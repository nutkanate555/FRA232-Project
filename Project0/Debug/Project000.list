
Project000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a44  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006bdc  08006bdc  00016bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bfc  08006bfc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08006bfc  08006bfc  00016bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c04  08006c04  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c04  08006c04  00016c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c08  08006c08  00016c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000090  08006c98  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  08006c98  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc46  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d92  00000000  00000000  0002dd02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0002fa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00030798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168da  00000000  00000000  000313f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d814  00000000  00000000  00047cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f0fc  00000000  00000000  000554de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e45da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bdc  00000000  00000000  000e4630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006bc4 	.word	0x08006bc4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08006bc4 	.word	0x08006bc4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b96e 	b.w	8001060 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468c      	mov	ip, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8083 	bne.w	8000eb2 <__udivmoddi4+0x116>
 8000dac:	428a      	cmp	r2, r1
 8000dae:	4617      	mov	r7, r2
 8000db0:	d947      	bls.n	8000e42 <__udivmoddi4+0xa6>
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	b142      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db8:	f1c2 0020 	rsb	r0, r2, #32
 8000dbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	4097      	lsls	r7, r2
 8000dc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000dd4:	fa1f fe87 	uxth.w	lr, r7
 8000dd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ddc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de0:	fb06 f10e 	mul.w	r1, r6, lr
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dee:	f080 8119 	bcs.w	8001024 <__udivmoddi4+0x288>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8116 	bls.w	8001024 <__udivmoddi4+0x288>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	f080 8105 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8102 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	2600      	movs	r6, #0
 8000e32:	b11d      	cbz	r5, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c5 4300 	strd	r4, r3, [r5]
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	b902      	cbnz	r2, 8000e46 <__udivmoddi4+0xaa>
 8000e44:	deff      	udf	#255	; 0xff
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d150      	bne.n	8000ef0 <__udivmoddi4+0x154>
 8000e4e:	1bcb      	subs	r3, r1, r7
 8000e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e54:	fa1f f887 	uxth.w	r8, r7
 8000e58:	2601      	movs	r6, #1
 8000e5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e5e:	0c21      	lsrs	r1, r4, #16
 8000e60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb08 f30c 	mul.w	r3, r8, ip
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000e70:	1879      	adds	r1, r7, r1
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0xe2>
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	f200 80e9 	bhi.w	8001050 <__udivmoddi4+0x2b4>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x10c>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x10a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80d9 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e7bf      	b.n	8000e32 <__udivmoddi4+0x96>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d909      	bls.n	8000eca <__udivmoddi4+0x12e>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	f000 80b1 	beq.w	800101e <__udivmoddi4+0x282>
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	fab3 f683 	clz	r6, r3
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d14a      	bne.n	8000f68 <__udivmoddi4+0x1cc>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0x140>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 80b8 	bhi.w	800104c <__udivmoddi4+0x2b0>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb61 0103 	sbc.w	r1, r1, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0a8      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000eea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eee:	e7a5      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef8:	4097      	lsls	r7, r2
 8000efa:	fa01 f002 	lsl.w	r0, r1, r2
 8000efe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f02:	40d9      	lsrs	r1, r3
 8000f04:	4330      	orrs	r0, r6
 8000f06:	0c03      	lsrs	r3, r0, #16
 8000f08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f0c:	fa1f f887 	uxth.w	r8, r7
 8000f10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f18:	fb06 f108 	mul.w	r1, r6, r8
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f22:	d909      	bls.n	8000f38 <__udivmoddi4+0x19c>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f2a:	f080 808d 	bcs.w	8001048 <__udivmoddi4+0x2ac>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 808a 	bls.w	8001048 <__udivmoddi4+0x2ac>
 8000f34:	3e02      	subs	r6, #2
 8000f36:	443b      	add	r3, r7
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b281      	uxth	r1, r0
 8000f3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb00 f308 	mul.w	r3, r0, r8
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x1c4>
 8000f50:	1879      	adds	r1, r7, r1
 8000f52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f56:	d273      	bcs.n	8001040 <__udivmoddi4+0x2a4>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d971      	bls.n	8001040 <__udivmoddi4+0x2a4>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4439      	add	r1, r7
 8000f60:	1acb      	subs	r3, r1, r3
 8000f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f66:	e778      	b.n	8000e5a <__udivmoddi4+0xbe>
 8000f68:	f1c6 0c20 	rsb	ip, r6, #32
 8000f6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f74:	431c      	orrs	r4, r3
 8000f76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f86:	431f      	orrs	r7, r3
 8000f88:	0c3b      	lsrs	r3, r7, #16
 8000f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8e:	fa1f f884 	uxth.w	r8, r4
 8000f92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f9e:	458a      	cmp	sl, r1
 8000fa0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x220>
 8000faa:	1861      	adds	r1, r4, r1
 8000fac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fb0:	d248      	bcs.n	8001044 <__udivmoddi4+0x2a8>
 8000fb2:	458a      	cmp	sl, r1
 8000fb4:	d946      	bls.n	8001044 <__udivmoddi4+0x2a8>
 8000fb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000fba:	4421      	add	r1, r4
 8000fbc:	eba1 010a 	sub.w	r1, r1, sl
 8000fc0:	b2bf      	uxth	r7, r7
 8000fc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fce:	fb00 f808 	mul.w	r8, r0, r8
 8000fd2:	45b8      	cmp	r8, r7
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x24a>
 8000fd6:	19e7      	adds	r7, r4, r7
 8000fd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fdc:	d22e      	bcs.n	800103c <__udivmoddi4+0x2a0>
 8000fde:	45b8      	cmp	r8, r7
 8000fe0:	d92c      	bls.n	800103c <__udivmoddi4+0x2a0>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4427      	add	r7, r4
 8000fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fea:	eba7 0708 	sub.w	r7, r7, r8
 8000fee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ff2:	454f      	cmp	r7, r9
 8000ff4:	46c6      	mov	lr, r8
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	d31a      	bcc.n	8001030 <__udivmoddi4+0x294>
 8000ffa:	d017      	beq.n	800102c <__udivmoddi4+0x290>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x27a>
 8000ffe:	ebb3 020e 	subs.w	r2, r3, lr
 8001002:	eb67 0701 	sbc.w	r7, r7, r1
 8001006:	fa07 fc0c 	lsl.w	ip, r7, ip
 800100a:	40f2      	lsrs	r2, r6
 800100c:	ea4c 0202 	orr.w	r2, ip, r2
 8001010:	40f7      	lsrs	r7, r6
 8001012:	e9c5 2700 	strd	r2, r7, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	462e      	mov	r6, r5
 8001020:	4628      	mov	r0, r5
 8001022:	e70b      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001024:	4606      	mov	r6, r0
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0x60>
 8001028:	4618      	mov	r0, r3
 800102a:	e6fd      	b.n	8000e28 <__udivmoddi4+0x8c>
 800102c:	4543      	cmp	r3, r8
 800102e:	d2e5      	bcs.n	8000ffc <__udivmoddi4+0x260>
 8001030:	ebb8 0e02 	subs.w	lr, r8, r2
 8001034:	eb69 0104 	sbc.w	r1, r9, r4
 8001038:	3801      	subs	r0, #1
 800103a:	e7df      	b.n	8000ffc <__udivmoddi4+0x260>
 800103c:	4608      	mov	r0, r1
 800103e:	e7d2      	b.n	8000fe6 <__udivmoddi4+0x24a>
 8001040:	4660      	mov	r0, ip
 8001042:	e78d      	b.n	8000f60 <__udivmoddi4+0x1c4>
 8001044:	4681      	mov	r9, r0
 8001046:	e7b9      	b.n	8000fbc <__udivmoddi4+0x220>
 8001048:	4666      	mov	r6, ip
 800104a:	e775      	b.n	8000f38 <__udivmoddi4+0x19c>
 800104c:	4630      	mov	r0, r6
 800104e:	e74a      	b.n	8000ee6 <__udivmoddi4+0x14a>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	4439      	add	r1, r7
 8001056:	e713      	b.n	8000e80 <__udivmoddi4+0xe4>
 8001058:	3802      	subs	r0, #2
 800105a:	443c      	add	r4, r7
 800105c:	e724      	b.n	8000ea8 <__udivmoddi4+0x10c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	0000      	movs	r0, r0
	...

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106e:	f001 ffd1 	bl	8003014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001072:	f000 f967 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001076:	f000 fb45 	bl	8001704 <MX_GPIO_Init>
  MX_DMA_Init();
 800107a:	f000 fb1b 	bl	80016b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800107e:	f000 faef 	bl	8001660 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001082:	f000 f9c7 	bl	8001414 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001086:	f000 fa1d 	bl	80014c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800108a:	f000 fa67 	bl	800155c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800108e:	489c      	ldr	r0, [pc, #624]	; (8001300 <main+0x298>)
 8001090:	f003 fc02 	bl	8004898 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001094:	213c      	movs	r1, #60	; 0x3c
 8001096:	489b      	ldr	r0, [pc, #620]	; (8001304 <main+0x29c>)
 8001098:	f003 fe10 	bl	8004cbc <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 800109c:	489a      	ldr	r0, [pc, #616]	; (8001308 <main+0x2a0>)
 800109e:	f003 fba1 	bl	80047e4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010a2:	2100      	movs	r1, #0
 80010a4:	4898      	ldr	r0, [pc, #608]	; (8001308 <main+0x2a0>)
 80010a6:	f003 fcb3 	bl	8004a10 <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010aa:	4898      	ldr	r0, [pc, #608]	; (800130c <main+0x2a4>)
 80010ac:	f000 fbd0 	bl	8001850 <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010b0:	4996      	ldr	r1, [pc, #600]	; (800130c <main+0x2a4>)
 80010b2:	4897      	ldr	r0, [pc, #604]	; (8001310 <main+0x2a8>)
 80010b4:	f000 fbe4 	bl	8001880 <TrajectoryGenerationStructureInit>

  VelocityControllerInit(&VelocityPIDController, &TrjStruc);
 80010b8:	4995      	ldr	r1, [pc, #596]	; (8001310 <main+0x2a8>)
 80010ba:	4896      	ldr	r0, [pc, #600]	; (8001314 <main+0x2ac>)
 80010bc:	f000 fc58 	bl	8001970 <VelocityControllerInit>
  DisplacementControllerInit(&PositionPIDController, &TrjStruc);
 80010c0:	4993      	ldr	r1, [pc, #588]	; (8001310 <main+0x2a8>)
 80010c2:	4895      	ldr	r0, [pc, #596]	; (8001318 <main+0x2b0>)
 80010c4:	f000 fc88 	bl	80019d8 <DisplacementControllerInit>

  ///UART init
  UART2.huart = &huart2;
 80010c8:	4b94      	ldr	r3, [pc, #592]	; (800131c <main+0x2b4>)
 80010ca:	4a95      	ldr	r2, [pc, #596]	; (8001320 <main+0x2b8>)
 80010cc:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 80010ce:	4b93      	ldr	r3, [pc, #588]	; (800131c <main+0x2b4>)
 80010d0:	22ff      	movs	r2, #255	; 0xff
 80010d2:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 80010d4:	4b91      	ldr	r3, [pc, #580]	; (800131c <main+0x2b4>)
 80010d6:	22ff      	movs	r2, #255	; 0xff
 80010d8:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 80010da:	4890      	ldr	r0, [pc, #576]	; (800131c <main+0x2b4>)
 80010dc:	f001 f94c 	bl	8002378 <UARTInit>
  UARTResetStart(&UART2);
 80010e0:	488e      	ldr	r0, [pc, #568]	; (800131c <main+0x2b4>)
 80010e2:	f001 f971 	bl	80023c8 <UARTResetStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int16_t inputChar = UARTReadChar(&UART2);
 80010e6:	488d      	ldr	r0, [pc, #564]	; (800131c <main+0x2b4>)
 80010e8:	f001 f992 	bl	8002410 <UARTReadChar>
 80010ec:	4603      	mov	r3, r0
 80010ee:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 80010f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d005      	beq.n	8001106 <main+0x9e>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 80010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fe:	4987      	ldr	r1, [pc, #540]	; (800131c <main+0x2b4>)
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fa6b 	bl	80025dc <Munmunbot_Protocol>
	  }

	  switch (Munmunbot_State)
 8001106:	4b87      	ldr	r3, [pc, #540]	; (8001324 <main+0x2bc>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b05      	cmp	r3, #5
 800110c:	d8eb      	bhi.n	80010e6 <main+0x7e>
 800110e:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <main+0xac>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	080010e7 	.word	0x080010e7
 8001118:	080010e7 	.word	0x080010e7
 800111c:	0800112d 	.word	0x0800112d
 8001120:	080012b3 	.word	0x080012b3
 8001124:	080012bf 	.word	0x080012bf
 8001128:	080010e7 	.word	0x080010e7
	  		  break;
	  	  case STATE_Idle:
		  	  break;

	  	  case STATE_PrepareDATA:
	  		  if (MovingLinkMode == LMM_Set_Pos_Directly)
 800112c:	4b7e      	ldr	r3, [pc, #504]	; (8001328 <main+0x2c0>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d145      	bne.n	80011c0 <main+0x158>
			  {
	  			  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.141));
 8001134:	4b7d      	ldr	r3, [pc, #500]	; (800132c <main+0x2c4>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b74      	ldr	r3, [pc, #464]	; (800130c <main+0x2a4>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	fb03 f302 	mul.w	r3, r3, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f98a 	bl	800045c <__aeabi_ui2d>
 8001148:	a36b      	add	r3, pc, #428	; (adr r3, 80012f8 <main+0x290>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff fb29 	bl	80007a4 <__aeabi_ddiv>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fca9 	bl	8000ab0 <__aeabi_d2f>
 800115e:	4603      	mov	r3, r0
 8001160:	4a6b      	ldr	r2, [pc, #428]	; (8001310 <main+0x2a8>)
 8001162:	6593      	str	r3, [r2, #88]	; 0x58
	  			  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)
 8001164:	4b6a      	ldr	r3, [pc, #424]	; (8001310 <main+0x2a8>)
 8001166:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800116a:	4b68      	ldr	r3, [pc, #416]	; (800130c <main+0x2a4>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	db0d      	blt.n	800119c <main+0x134>
	  			  {
	  				 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001180:	4b63      	ldr	r3, [pc, #396]	; (8001310 <main+0x2a8>)
 8001182:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001186:	4b61      	ldr	r3, [pc, #388]	; (800130c <main+0x2a4>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001196:	4b5e      	ldr	r3, [pc, #376]	; (8001310 <main+0x2a8>)
 8001198:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	  			  }
				  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta; //// No implement
 800119c:	4b5c      	ldr	r3, [pc, #368]	; (8001310 <main+0x2a8>)
 800119e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80011a2:	4b5b      	ldr	r3, [pc, #364]	; (8001310 <main+0x2a8>)
 80011a4:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80011a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ac:	4b58      	ldr	r3, [pc, #352]	; (8001310 <main+0x2a8>)
 80011ae:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				  MovingLinkMode = LMM_Not_Set;
 80011b2:	4b5d      	ldr	r3, [pc, #372]	; (8001328 <main+0x2c0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
				  Munmunbot_State = STATE_Calculation;
 80011b8:	4b5a      	ldr	r3, [pc, #360]	; (8001324 <main+0x2bc>)
 80011ba:	2203      	movs	r2, #3
 80011bc:	701a      	strb	r2, [r3, #0]
	  		  else
	  		  {
	  			MovingLinkMode = LMM_Not_Set;
	  			Munmunbot_State = STATE_Idle;
	  		  }
		  	  break;
 80011be:	e099      	b.n	80012f4 <main+0x28c>
	  		  else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 80011c0:	4b59      	ldr	r3, [pc, #356]	; (8001328 <main+0x2c0>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d003      	beq.n	80011d0 <main+0x168>
 80011c8:	4b57      	ldr	r3, [pc, #348]	; (8001328 <main+0x2c0>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d169      	bne.n	80012a4 <main+0x23c>
	  			  if (NumberOfStationToGo == 0)
 80011d0:	4b57      	ldr	r3, [pc, #348]	; (8001330 <main+0x2c8>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10f      	bne.n	80011f8 <main+0x190>
						Munmunbot_State = STATE_Idle;
 80011d8:	4b52      	ldr	r3, [pc, #328]	; (8001324 <main+0x2bc>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
						NumberOfStationPTR = 0;
 80011de:	4b55      	ldr	r3, [pc, #340]	; (8001334 <main+0x2cc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
						NumberOfStationToGo = 0;
 80011e4:	4b52      	ldr	r3, [pc, #328]	; (8001330 <main+0x2c8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
						MovingLinkMode = LMM_Not_Set;
 80011ea:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <main+0x2c0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
						ACK2Return(&UART2);
 80011f0:	484a      	ldr	r0, [pc, #296]	; (800131c <main+0x2b4>)
 80011f2:	f001 f9e1 	bl	80025b8 <ACK2Return>
						break;
 80011f6:	e07d      	b.n	80012f4 <main+0x28c>
					TrjStruc.Desire_Theta = ( StationPos[Angularpos_InputArray[NumberOfStationPTR]]*CUSSStruc.PPRxQEI/(360.0));
 80011f8:	4b4e      	ldr	r3, [pc, #312]	; (8001334 <main+0x2cc>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <main+0x2d0>)
 8001200:	5c9b      	ldrb	r3, [r3, r2]
 8001202:	461a      	mov	r2, r3
 8001204:	4b4d      	ldr	r3, [pc, #308]	; (800133c <main+0x2d4>)
 8001206:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800120a:	461a      	mov	r2, r3
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <main+0x2a4>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	fb03 f302 	mul.w	r3, r3, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f921 	bl	800045c <__aeabi_ui2d>
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	4b48      	ldr	r3, [pc, #288]	; (8001340 <main+0x2d8>)
 8001220:	f7ff fac0 	bl	80007a4 <__aeabi_ddiv>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fc40 	bl	8000ab0 <__aeabi_d2f>
 8001230:	4603      	mov	r3, r0
 8001232:	4a37      	ldr	r2, [pc, #220]	; (8001310 <main+0x2a8>)
 8001234:	6593      	str	r3, [r2, #88]	; 0x58
					if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <main+0x2a8>)
 8001238:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <main+0x2a4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800124c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001250:	db0d      	blt.n	800126e <main+0x206>
						TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001252:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <main+0x2a8>)
 8001254:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001258:	4b2c      	ldr	r3, [pc, #176]	; (800130c <main+0x2a4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001268:	4b29      	ldr	r3, [pc, #164]	; (8001310 <main+0x2a8>)
 800126a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta; //// No implement
 800126e:	4b28      	ldr	r3, [pc, #160]	; (8001310 <main+0x2a8>)
 8001270:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <main+0x2a8>)
 8001276:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	4b24      	ldr	r3, [pc, #144]	; (8001310 <main+0x2a8>)
 8001280:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
					Munmunbot_State = STATE_Calculation;
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <main+0x2bc>)
 8001286:	2203      	movs	r2, #3
 8001288:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 800128a:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <main+0x2cc>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <main+0x2cc>)
 8001294:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <main+0x2c8>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	3b01      	subs	r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b24      	ldr	r3, [pc, #144]	; (8001330 <main+0x2c8>)
 80012a0:	701a      	strb	r2, [r3, #0]
		  	  break;
 80012a2:	e027      	b.n	80012f4 <main+0x28c>
	  			MovingLinkMode = LMM_Not_Set;
 80012a4:	4b20      	ldr	r3, [pc, #128]	; (8001328 <main+0x2c0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
	  			Munmunbot_State = STATE_Idle;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <main+0x2bc>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
		  	  break;
 80012b0:	e020      	b.n	80012f4 <main+0x28c>

	  	  case STATE_Calculation:
	  		  TrajectoryGenerationCalculation();
 80012b2:	f000 fc05 	bl	8001ac0 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <main+0x2bc>)
 80012b8:	2204      	movs	r2, #4
 80012ba:	701a      	strb	r2, [r3, #0]
	  		  break;
 80012bc:	e01a      	b.n	80012f4 <main+0x28c>

	   	  case STATE_Link_Moving:
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 80012be:	f000 faad 	bl	800181c <micros>
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <main+0x2a8>)
 80012c4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80012c8:	1a84      	subs	r4, r0, r2
 80012ca:	eb61 0503 	sbc.w	r5, r1, r3
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <main+0x2a8>)
 80012d0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80012d4:	429d      	cmp	r5, r3
 80012d6:	bf08      	it	eq
 80012d8:	4294      	cmpeq	r4, r2
 80012da:	d30a      	bcc.n	80012f2 <main+0x28a>
	   		  {
	   			  // GEN Trajectory
	   			  TrajectoryGenerationProcess();
 80012dc:	f000 fd00 	bl	8001ce0 <TrajectoryGenerationProcess>
	   			  PIDController2in1();
 80012e0:	f000 ff60 	bl	80021a4 <PIDController2in1>


	   			  TrjStruc.Loop_Timestamp = micros();
 80012e4:	f000 fa9a 	bl	800181c <micros>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4908      	ldr	r1, [pc, #32]	; (8001310 <main+0x2a8>)
 80012ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	   		  }

	  		  break;
 80012f2:	bf00      	nop
  {
 80012f4:	e6f7      	b.n	80010e6 <main+0x7e>
 80012f6:	bf00      	nop
 80012f8:	00000000 	.word	0x00000000
 80012fc:	40eeac80 	.word	0x40eeac80
 8001300:	20000520 	.word	0x20000520
 8001304:	200004d8 	.word	0x200004d8
 8001308:	20000430 	.word	0x20000430
 800130c:	200002a8 	.word	0x200002a8
 8001310:	20000238 	.word	0x20000238
 8001314:	20000208 	.word	0x20000208
 8001318:	200001d8 	.word	0x200001d8
 800131c:	200000b8 	.word	0x200000b8
 8001320:	20000568 	.word	0x20000568
 8001324:	20000000 	.word	0x20000000
 8001328:	200001d2 	.word	0x200001d2
 800132c:	200001d0 	.word	0x200001d0
 8001330:	200001d3 	.word	0x200001d3
 8001334:	200001d4 	.word	0x200001d4
 8001338:	200000d0 	.word	0x200000d0
 800133c:	20000004 	.word	0x20000004
 8001340:	40768000 	.word	0x40768000

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	; 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	; 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f005 fabe 	bl	80068d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b27      	ldr	r3, [pc, #156]	; (800140c <SystemClock_Config+0xc8>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a26      	ldr	r2, [pc, #152]	; (800140c <SystemClock_Config+0xc8>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <SystemClock_Config+0xc8>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b21      	ldr	r3, [pc, #132]	; (8001410 <SystemClock_Config+0xcc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a20      	ldr	r2, [pc, #128]	; (8001410 <SystemClock_Config+0xcc>)
 800138e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <SystemClock_Config+0xcc>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a0:	2302      	movs	r3, #2
 80013a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a4:	2301      	movs	r3, #1
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a8:	2310      	movs	r3, #16
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ac:	2302      	movs	r3, #2
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b0:	2300      	movs	r3, #0
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013b4:	2308      	movs	r3, #8
 80013b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013b8:	2364      	movs	r3, #100	; 0x64
 80013ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013bc:	2302      	movs	r3, #2
 80013be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013c0:	2304      	movs	r3, #4
 80013c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fd47 	bl	8003e5c <HAL_RCC_OscConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013d4:	f001 fbb4 	bl	8002b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d8:	230f      	movs	r3, #15
 80013da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013dc:	2302      	movs	r3, #2
 80013de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	2103      	movs	r1, #3
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 ffa9 	bl	800434c <HAL_RCC_ClockConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001400:	f001 fb9e 	bl	8002b40 <Error_Handler>
  }
}
 8001404:	bf00      	nop
 8001406:	3750      	adds	r7, #80	; 0x50
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40007000 	.word	0x40007000

08001414 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2224      	movs	r2, #36	; 0x24
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fa56 	bl	80068d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001432:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <MX_TIM1_Init+0xac>)
 8001434:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <MX_TIM1_Init+0xa8>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001444:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001448:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_TIM1_Init+0xa8>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800145c:	2303      	movs	r3, #3
 800145e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001464:	2301      	movs	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800146c:	2302      	movs	r3, #2
 800146e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001474:	2301      	movs	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001488:	f003 fb72 	bl	8004b70 <HAL_TIM_Encoder_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001492:	f001 fb55 	bl	8002b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <MX_TIM1_Init+0xa8>)
 80014a4:	f004 fa16 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014ae:	f001 fb47 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3730      	adds	r7, #48	; 0x30
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200004d8 	.word	0x200004d8
 80014c0:	40010000 	.word	0x40010000

080014c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_TIM2_Init+0x94>)
 80014e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_TIM2_Init+0x94>)
 80014ea:	2263      	movs	r2, #99	; 0x63
 80014ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_TIM2_Init+0x94>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <MX_TIM2_Init+0x94>)
 80014f6:	f04f 32ff 	mov.w	r2, #4294967295
 80014fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_TIM2_Init+0x94>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <MX_TIM2_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <MX_TIM2_Init+0x94>)
 800150a:	f003 f91b 	bl	8004744 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001514:	f001 fb14 	bl	8002b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <MX_TIM2_Init+0x94>)
 8001526:	f003 fe1d 	bl	8005164 <HAL_TIM_ConfigClockSource>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001530:	f001 fb06 	bl	8002b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_TIM2_Init+0x94>)
 8001542:	f004 f9c7 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800154c:	f001 faf8 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000520 	.word	0x20000520

0800155c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	; 0x38
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
 8001588:	615a      	str	r2, [r3, #20]
 800158a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800158c:	4b32      	ldr	r3, [pc, #200]	; (8001658 <MX_TIM3_Init+0xfc>)
 800158e:	4a33      	ldr	r2, [pc, #204]	; (800165c <MX_TIM3_Init+0x100>)
 8001590:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <MX_TIM3_Init+0xfc>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <MX_TIM3_Init+0xfc>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800159e:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <MX_TIM3_Init+0xfc>)
 80015a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80015a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a6:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <MX_TIM3_Init+0xfc>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <MX_TIM3_Init+0xfc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b2:	4829      	ldr	r0, [pc, #164]	; (8001658 <MX_TIM3_Init+0xfc>)
 80015b4:	f003 f8c6 	bl	8004744 <HAL_TIM_Base_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015be:	f001 fabf 	bl	8002b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4822      	ldr	r0, [pc, #136]	; (8001658 <MX_TIM3_Init+0xfc>)
 80015d0:	f003 fdc8 	bl	8005164 <HAL_TIM_ConfigClockSource>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015da:	f001 fab1 	bl	8002b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015de:	481e      	ldr	r0, [pc, #120]	; (8001658 <MX_TIM3_Init+0xfc>)
 80015e0:	f003 f9bc 	bl	800495c <HAL_TIM_PWM_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015ea:	f001 faa9 	bl	8002b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f6:	f107 0320 	add.w	r3, r7, #32
 80015fa:	4619      	mov	r1, r3
 80015fc:	4816      	ldr	r0, [pc, #88]	; (8001658 <MX_TIM3_Init+0xfc>)
 80015fe:	f004 f969 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001608:	f001 fa9a 	bl	8002b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160c:	2360      	movs	r3, #96	; 0x60
 800160e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	4619      	mov	r1, r3
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_TIM3_Init+0xfc>)
 8001624:	f003 fce0 	bl	8004fe8 <HAL_TIM_PWM_ConfigChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800162e:	f001 fa87 	bl	8002b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2204      	movs	r2, #4
 8001636:	4619      	mov	r1, r3
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <MX_TIM3_Init+0xfc>)
 800163a:	f003 fcd5 	bl	8004fe8 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001644:	f001 fa7c 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <MX_TIM3_Init+0xfc>)
 800164a:	f001 fb2b 	bl	8002ca4 <HAL_TIM_MspPostInit>

}
 800164e:	bf00      	nop
 8001650:	3738      	adds	r7, #56	; 0x38
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000430 	.word	0x20000430
 800165c:	40000400 	.word	0x40000400

08001660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <MX_USART2_UART_Init+0x50>)
 8001668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 800166c:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001684:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001688:	220c      	movs	r2, #12
 800168a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 800169a:	f004 f99d 	bl	80059d8 <HAL_UART_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80016a4:	f001 fa4c 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000568 	.word	0x20000568
 80016b0:	40004400 	.word	0x40004400

080016b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_DMA_Init+0x4c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <MX_DMA_Init+0x4c>)
 80016c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <MX_DMA_Init+0x4c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2010      	movs	r0, #16
 80016dc:	f001 fde7 	bl	80032ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016e0:	2010      	movs	r0, #16
 80016e2:	f001 fe00 	bl	80032e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	2011      	movs	r0, #17
 80016ec:	f001 fddf 	bl	80032ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016f0:	2011      	movs	r0, #17
 80016f2:	f001 fdf8 	bl	80032e6 <HAL_NVIC_EnableIRQ>

}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <MX_GPIO_Init+0xd0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a2c      	ldr	r2, [pc, #176]	; (80017d4 <MX_GPIO_Init+0xd0>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <MX_GPIO_Init+0xd0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <MX_GPIO_Init+0xd0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <MX_GPIO_Init+0xd0>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <MX_GPIO_Init+0xd0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <MX_GPIO_Init+0xd0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <MX_GPIO_Init+0xd0>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_GPIO_Init+0xd0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <MX_GPIO_Init+0xd0>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <MX_GPIO_Init+0xd0>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_GPIO_Init+0xd0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2120      	movs	r1, #32
 800178e:	4812      	ldr	r0, [pc, #72]	; (80017d8 <MX_GPIO_Init+0xd4>)
 8001790:	f002 fb4a 	bl	8003e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MX_GPIO_Init+0xd8>)
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <MX_GPIO_Init+0xdc>)
 80017aa:	f002 f9b9 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017ae:	2320      	movs	r3, #32
 80017b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_GPIO_Init+0xd4>)
 80017c6:	f002 f9ab 	bl	8003b20 <HAL_GPIO_Init>

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	10210000 	.word	0x10210000
 80017e0:	40020800 	.word	0x40020800

080017e4 <HAL_TIM_PeriodElapsedCallback>:
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017e4:	b4b0      	push	{r4, r5, r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d109      	bne.n	8001808 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f112 34ff 	adds.w	r4, r2, #4294967295
 80017fe:	f143 0500 	adc.w	r5, r3, #0
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001804:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bcb0      	pop	{r4, r5, r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000520 	.word	0x20000520
 8001818:	200000b0 	.word	0x200000b0

0800181c <micros>:

uint64_t micros()
{
 800181c:	b4b0      	push	{r4, r5, r7}
 800181e:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <micros+0x2c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	4618      	mov	r0, r3
 8001828:	f04f 0100 	mov.w	r1, #0
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <micros+0x30>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	1884      	adds	r4, r0, r2
 8001834:	eb41 0503 	adc.w	r5, r1, r3
 8001838:	4622      	mov	r2, r4
 800183a:	462b      	mov	r3, r5
}
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bcb0      	pop	{r4, r5, r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000520 	.word	0x20000520
 800184c:	200000b0 	.word	0x200000b0

08001850 <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800185e:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	009a      	lsls	r2, r3, #2
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 255;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	22ff      	movs	r2, #255	; 0xff
 800186e:	609a      	str	r2, [r3, #8]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	0000      	movs	r0, r0
	...

08001880 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.25*(CUSSvar->PPRxQEI))/3.141;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fde4 	bl	800045c <__aeabi_ui2d>
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b31      	ldr	r3, [pc, #196]	; (8001960 <TrajectoryGenerationStructureInit+0xe0>)
 800189a:	f7fe fe59 	bl	8000550 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	a32c      	add	r3, pc, #176	; (adr r3, 8001958 <TrajectoryGenerationStructureInit+0xd8>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe ff7a 	bl	80007a4 <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f8fa 	bl	8000ab0 <__aeabi_d2f>
 80018bc:	4602      	mov	r2, r0
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	615a      	str	r2, [r3, #20]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fdc4 	bl	800045c <__aeabi_ui2d>
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <TrajectoryGenerationStructureInit+0xe4>)
 80018da:	f7fe ff63 	bl	80007a4 <__aeabi_ddiv>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f8e3 	bl	8000ab0 <__aeabi_d2f>
 80018ea:	4602      	mov	r2, r0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = 0;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	65da      	str	r2, [r3, #92]	; 0x5c
	TGSvar->Mode = 0;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	669a      	str	r2, [r3, #104]	; 0x68
	TGSvar->Submode = 0;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	66da      	str	r2, [r3, #108]	; 0x6c
	TGSvar->Loop_Freq = 10000;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f242 7210 	movw	r2, #10000	; 0x2710
 800190a:	649a      	str	r2, [r3, #72]	; 0x48
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001910:	4a15      	ldr	r2, [pc, #84]	; (8001968 <TrajectoryGenerationStructureInit+0xe8>)
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	461a      	mov	r2, r3
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	edd3 6a04 	vldr	s13, [r3, #16]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	ed93 7a05 	vldr	s14, [r3, #20]
 800192e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	ed93 7a04 	vldr	s14, [r3, #16]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	edd3 7a00 	vldr	s15, [r3]
 8001944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	9ba5e354 	.word	0x9ba5e354
 800195c:	400920c4 	.word	0x400920c4
 8001960:	3fd00000 	.word	0x3fd00000
 8001964:	404e0000 	.word	0x404e0000
 8001968:	000f4240 	.word	0x000f4240
 800196c:	00000000 	.word	0x00000000

08001970 <VelocityControllerInit>:

void VelocityControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <VelocityControllerInit+0x58>)
 800197e:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 0.2;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <VelocityControllerInit+0x5c>)
 8001984:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0.1;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a11      	ldr	r2, [pc, #68]	; (80019d0 <VelocityControllerInit+0x60>)
 800198a:	609a      	str	r2, [r3, #8]
	VCvar->Integral_Value = 0;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f7fe fda1 	bl	80004e4 <__aeabi_ul2d>
 80019a2:	a307      	add	r3, pc, #28	; (adr r3, 80019c0 <VelocityControllerInit+0x50>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe fefc 	bl	80007a4 <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	00000000 	.word	0x00000000
 80019c4:	412e8480 	.word	0x412e8480
 80019c8:	40a00000 	.word	0x40a00000
 80019cc:	3e4ccccd 	.word	0x3e4ccccd
 80019d0:	3dcccccd 	.word	0x3dcccccd
 80019d4:	00000000 	.word	0x00000000

080019d8 <DisplacementControllerInit>:

void DisplacementControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <DisplacementControllerInit+0x58>)
 80019e6:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 0.2;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <DisplacementControllerInit+0x5c>)
 80019ec:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0.1;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <DisplacementControllerInit+0x60>)
 80019f2:	609a      	str	r2, [r3, #8]
	VCvar->Integral_Value = 0;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7fe fd6d 	bl	80004e4 <__aeabi_ul2d>
 8001a0a:	a307      	add	r3, pc, #28	; (adr r3, 8001a28 <DisplacementControllerInit+0x50>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fec8 	bl	80007a4 <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	412e8480 	.word	0x412e8480
 8001a30:	40a00000 	.word	0x40a00000
 8001a34:	3e4ccccd 	.word	0x3e4ccccd
 8001a38:	3dcccccd 	.word	0x3dcccccd
 8001a3c:	00000000 	.word	0x00000000

08001a40 <TrajectoryGenerationVelocityMaxSetting>:


void TrajectoryGenerationVelocityMaxSetting (TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp)*10)/(255.0*60.0);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	6892      	ldr	r2, [r2, #8]
 8001a52:	fb02 f203 	mul.w	r2, r2, r3
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fcfc 	bl	800045c <__aeabi_ui2d>
 8001a64:	a314      	add	r3, pc, #80	; (adr r3, 8001ab8 <TrajectoryGenerationVelocityMaxSetting+0x78>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fe9b 	bl	80007a4 <__aeabi_ddiv>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff f81b 	bl	8000ab0 <__aeabi_d2f>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	611a      	str	r2, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	edd3 6a04 	vldr	s13, [r3, #16]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	40cde200 	.word	0x40cde200

08001ac0 <TrajectoryGenerationCalculation>:


void TrajectoryGenerationCalculation()
{
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 8001ac4:	4b84      	ldr	r3, [pc, #528]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001ac6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001aca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad2:	d518      	bpl.n	8001b06 <TrajectoryGenerationCalculation+0x46>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 8001ad4:	4b80      	ldr	r3, [pc, #512]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001ad6:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ada:	eef1 7a67 	vneg.f32	s15, s15
 8001ade:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001ae0:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 8001ae4:	4b7c      	ldr	r3, [pc, #496]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001ae6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aea:	eef1 7a67 	vneg.f32	s15, s15
 8001aee:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001af0:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 8001af4:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001af6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001afa:	eef1 7a67 	vneg.f32	s15, s15
 8001afe:	4b76      	ldr	r3, [pc, #472]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b00:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8001b04:	e013      	b.n	8001b2e <TrajectoryGenerationCalculation+0x6e>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 8001b06:	4b74      	ldr	r3, [pc, #464]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b08:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001b0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	dd0b      	ble.n	8001b2e <TrajectoryGenerationCalculation+0x6e>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 8001b16:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a6f      	ldr	r2, [pc, #444]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b1c:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 8001b1e:	4b6e      	ldr	r3, [pc, #440]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	4a6d      	ldr	r2, [pc, #436]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b24:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 8001b26:	4b6c      	ldr	r3, [pc, #432]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2a:	4a6b      	ldr	r2, [pc, #428]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b2c:	6653      	str	r3, [r2, #100]	; 0x64
	  }
	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 8001b2e:	4b6a      	ldr	r3, [pc, #424]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b30:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001b34:	4b68      	ldr	r3, [pc, #416]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b36:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b42:	d554      	bpl.n	8001bee <TrajectoryGenerationCalculation+0x12e>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 8001b44:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b46:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001b4a:	4b63      	ldr	r3, [pc, #396]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b4c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b50:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b54:	ee16 0a90 	vmov	r0, s13
 8001b58:	f7fe fca2 	bl	80004a0 <__aeabi_f2d>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	ec43 2b10 	vmov	d0, r2, r3
 8001b64:	f004 ff46 	bl	80069f4 <sqrt>
 8001b68:	ec53 2b10 	vmov	r2, r3, d0
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7fe ff9e 	bl	8000ab0 <__aeabi_d2f>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4a58      	ldr	r2, [pc, #352]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b78:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8001b7a:	4b57      	ldr	r3, [pc, #348]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	4a56      	ldr	r2, [pc, #344]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b80:	6253      	str	r3, [r2, #36]	; 0x24
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 8001b82:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b84:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b88:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b8a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b8e:	4b52      	ldr	r3, [pc, #328]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001b90:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9c:	ee17 0a90 	vmov	r0, s15
 8001ba0:	f7fe fc7e 	bl	80004a0 <__aeabi_f2d>
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bac:	f7fe fdfa 	bl	80007a4 <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4614      	mov	r4, r2
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fc6f 	bl	80004a0 <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	f7fe fb0b 	bl	80001e4 <__adddf3>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe ff6b 	bl	8000ab0 <__aeabi_d2f>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a3e      	ldr	r2, [pc, #248]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001bde:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Mode = 0;
 8001be0:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	669a      	str	r2, [r3, #104]	; 0x68
		 TrjStruc.Submode = 0;
 8001be6:	4b3c      	ldr	r3, [pc, #240]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	66da      	str	r2, [r3, #108]	; 0x6c
 8001bec:	e063      	b.n	8001cb6 <TrajectoryGenerationCalculation+0x1f6>
	  }

	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 8001bee:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001bf0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001bf6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	db58      	blt.n	8001cb6 <TrajectoryGenerationCalculation+0x1f6>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 8001c04:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c06:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c10:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c14:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c16:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c20:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	4a2b      	ldr	r2, [pc, #172]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c2a:	6253      	str	r3, [r2, #36]	; 0x24
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c2e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c34:	edd3 6a00 	vldr	s13, [r3]
 8001c38:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c3a:	edd3 7a00 	vldr	s15, [r3]
 8001c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c46:	ee17 0a90 	vmov	r0, s15
 8001c4a:	f7fe fc29 	bl	80004a0 <__aeabi_f2d>
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c56:	f7fe fda5 	bl	80007a4 <__aeabi_ddiv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4614      	mov	r4, r2
 8001c60:	461d      	mov	r5, r3
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc1a 	bl	80004a0 <__aeabi_f2d>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4620      	mov	r0, r4
 8001c72:	4629      	mov	r1, r5
 8001c74:	f7fe fab6 	bl	80001e4 <__adddf3>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f7fe ff16 	bl	8000ab0 <__aeabi_d2f>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c88:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c8c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c92:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001c9c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001ca6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		  TrjStruc.Mode = 1;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	669a      	str	r2, [r3, #104]	; 0x68
		  TrjStruc.Submode = 0;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	66da      	str	r2, [r3, #108]	; 0x6c
	  }
	 TrjStruc.Equation_Timestamp = micros();
 8001cb6:	f7ff fdb1 	bl	800181c <micros>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4906      	ldr	r1, [pc, #24]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001cc0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 TrjStruc.Loop_Timestamp = micros();
 8001cc4:	f7ff fdaa 	bl	800181c <micros>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4902      	ldr	r1, [pc, #8]	; (8001cd8 <TrajectoryGenerationCalculation+0x218>)
 8001cce:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001cd2:	bf00      	nop
 8001cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000238 	.word	0x20000238
 8001cdc:	00000000 	.word	0x00000000

08001ce0 <TrajectoryGenerationProcess>:




void TrajectoryGenerationProcess()
{
 8001ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 8001ce8:	f7ff fd98 	bl	800181c <micros>
 8001cec:	4bb8      	ldr	r3, [pc, #736]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001cee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001cf2:	1a84      	subs	r4, r0, r2
 8001cf4:	eb61 0503 	sbc.w	r5, r1, r3
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	f7fe fbf2 	bl	80004e4 <__aeabi_ul2d>
 8001d00:	a3b1      	add	r3, pc, #708	; (adr r3, 8001fc8 <TrajectoryGenerationProcess+0x2e8>)
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	f7fe fd4d 	bl	80007a4 <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	49b0      	ldr	r1, [pc, #704]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001d10:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	 switch (TrjStruc.Mode)
 8001d14:	4bae      	ldr	r3, [pc, #696]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	f000 8226 	beq.w	800216a <TrajectoryGenerationProcess+0x48a>
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	f200 8232 	bhi.w	8002188 <TrajectoryGenerationProcess+0x4a8>
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <TrajectoryGenerationProcess+0x50>
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	f000 80e6 	beq.w	8001efa <TrajectoryGenerationProcess+0x21a>
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  TrjStruc.Start_Theta = TrjStruc.Desire_Theta;
			  Munmunbot_State = STATE_Idle;
			  break;
		  }
}
 8001d2e:	e22b      	b.n	8002188 <TrajectoryGenerationProcess+0x4a8>
			  if (TrjStruc.Submode == 0)
 8001d30:	4ba7      	ldr	r3, [pc, #668]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d161      	bne.n	8001dfc <TrajectoryGenerationProcess+0x11c>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8001d38:	4ba5      	ldr	r3, [pc, #660]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fbaf 	bl	80004a0 <__aeabi_f2d>
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	4ba3      	ldr	r3, [pc, #652]	; (8001fd4 <TrajectoryGenerationProcess+0x2f4>)
 8001d48:	f7fe fc02 	bl	8000550 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4614      	mov	r4, r2
 8001d52:	461d      	mov	r5, r3
 8001d54:	4b9e      	ldr	r3, [pc, #632]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001d56:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001d5a:	4b9d      	ldr	r3, [pc, #628]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001d5c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001d60:	f7fe fbf6 	bl	8000550 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f7fe fbf0 	bl	8000550 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4614      	mov	r4, r2
 8001d76:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 8001d78:	4b95      	ldr	r3, [pc, #596]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fb8f 	bl	80004a0 <__aeabi_f2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4620      	mov	r0, r4
 8001d88:	4629      	mov	r1, r5
 8001d8a:	f7fe fa2b 	bl	80001e4 <__adddf3>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe fe8b 	bl	8000ab0 <__aeabi_d2f>
 8001d9a:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8001d9c:	4a8c      	ldr	r2, [pc, #560]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001d9e:	6213      	str	r3, [r2, #32]
				  count += 1;
 8001da0:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <TrajectoryGenerationProcess+0x2f8>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b8b      	ldr	r3, [pc, #556]	; (8001fd8 <TrajectoryGenerationProcess+0x2f8>)
 8001daa:	801a      	strh	r2, [r3, #0]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 8001dac:	f7ff fd36 	bl	800181c <micros>
 8001db0:	4b87      	ldr	r3, [pc, #540]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001db2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001db6:	1a84      	subs	r4, r0, r2
 8001db8:	613c      	str	r4, [r7, #16]
 8001dba:	eb61 0303 	sbc.w	r3, r1, r3
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dc4:	f7fe ff8c 	bl	8000ce0 <__aeabi_ul2f>
 8001dc8:	ee06 0a90 	vmov	s13, r0
 8001dcc:	4b80      	ldr	r3, [pc, #512]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001dce:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dd2:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001fdc <TrajectoryGenerationProcess+0x2fc>
 8001dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dda:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	da00      	bge.n	8001de6 <TrajectoryGenerationProcess+0x106>
			  break;
 8001de4:	e1cd      	b.n	8002182 <TrajectoryGenerationProcess+0x4a2>
					  TrjStruc.Equation_Timestamp = micros();
 8001de6:	f7ff fd19 	bl	800181c <micros>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4978      	ldr	r1, [pc, #480]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001df0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 1;
 8001df4:	4b76      	ldr	r3, [pc, #472]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 8001dfa:	e1c2      	b.n	8002182 <TrajectoryGenerationProcess+0x4a2>
			  else if (TrjStruc.Submode == 1)
 8001dfc:	4b74      	ldr	r3, [pc, #464]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	f040 81be 	bne.w	8002182 <TrajectoryGenerationProcess+0x4a2>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb48 	bl	80004a0 <__aeabi_f2d>
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	4b72      	ldr	r3, [pc, #456]	; (8001fe0 <TrajectoryGenerationProcess+0x300>)
 8001e16:	f7fe fb9b 	bl	8000550 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4614      	mov	r4, r2
 8001e20:	461d      	mov	r5, r3
 8001e22:	4b6b      	ldr	r3, [pc, #428]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001e24:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001e28:	4b69      	ldr	r3, [pc, #420]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001e2a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001e2e:	f7fe fb8f 	bl	8000550 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4620      	mov	r0, r4
 8001e38:	4629      	mov	r1, r5
 8001e3a:	f7fe fb89 	bl	8000550 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4614      	mov	r4, r2
 8001e44:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001e48:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e4c:	4b60      	ldr	r3, [pc, #384]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001e4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e56:	ee17 0a90 	vmov	r0, s15
 8001e5a:	f7fe fb21 	bl	80004a0 <__aeabi_f2d>
 8001e5e:	4b5c      	ldr	r3, [pc, #368]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001e60:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001e64:	f7fe fb74 	bl	8000550 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	4629      	mov	r1, r5
 8001e70:	f7fe f9b8 	bl	80001e4 <__adddf3>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4614      	mov	r4, r2
 8001e7a:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 8001e7c:	4b54      	ldr	r3, [pc, #336]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb0d 	bl	80004a0 <__aeabi_f2d>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	f7fe f9a9 	bl	80001e4 <__adddf3>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fe09 	bl	8000ab0 <__aeabi_d2f>
 8001e9e:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8001ea0:	4a4b      	ldr	r2, [pc, #300]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001ea2:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 8001ea4:	f7ff fcba 	bl	800181c <micros>
 8001ea8:	4b49      	ldr	r3, [pc, #292]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001eaa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001eae:	1a84      	subs	r4, r0, r2
 8001eb0:	60bc      	str	r4, [r7, #8]
 8001eb2:	eb61 0303 	sbc.w	r3, r1, r3
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ebc:	f7fe ff10 	bl	8000ce0 <__aeabi_ul2f>
 8001ec0:	ee06 0a90 	vmov	s13, r0
 8001ec4:	4b42      	ldr	r3, [pc, #264]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001ec6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eca:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001fdc <TrajectoryGenerationProcess+0x2fc>
 8001ece:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	da00      	bge.n	8001ede <TrajectoryGenerationProcess+0x1fe>
			  break;
 8001edc:	e151      	b.n	8002182 <TrajectoryGenerationProcess+0x4a2>
					  TrjStruc.Equation_Timestamp = micros();
 8001ede:	f7ff fc9d 	bl	800181c <micros>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	493a      	ldr	r1, [pc, #232]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001ee8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 0;
 8001eec:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	66da      	str	r2, [r3, #108]	; 0x6c
					  TrjStruc.Mode = 2; ///Final Value Mode
 8001ef2:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	669a      	str	r2, [r3, #104]	; 0x68
			  break;
 8001ef8:	e143      	b.n	8002182 <TrajectoryGenerationProcess+0x4a2>
			  if (TrjStruc.Submode == 0)
 8001efa:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d170      	bne.n	8001fe4 <TrajectoryGenerationProcess+0x304>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8001f02:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe faca 	bl	80004a0 <__aeabi_f2d>
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <TrajectoryGenerationProcess+0x2f4>)
 8001f12:	f7fe fb1d 	bl	8000550 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4614      	mov	r4, r2
 8001f1c:	461d      	mov	r5, r3
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001f20:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001f24:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001f26:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f2a:	f7fe fb11 	bl	8000550 <__aeabi_dmul>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe fb0b 	bl	8000550 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4614      	mov	r4, r2
 8001f40:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 8001f42:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe faaa 	bl	80004a0 <__aeabi_f2d>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4620      	mov	r0, r4
 8001f52:	4629      	mov	r1, r5
 8001f54:	f7fe f946 	bl	80001e4 <__adddf3>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7fe fda6 	bl	8000ab0 <__aeabi_d2f>
 8001f64:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8001f66:	4a1a      	ldr	r2, [pc, #104]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001f68:	6213      	str	r3, [r2, #32]
				  count += 1;
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <TrajectoryGenerationProcess+0x2f8>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <TrajectoryGenerationProcess+0x2f8>)
 8001f74:	801a      	strh	r2, [r3, #0]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8001f76:	f7ff fc51 	bl	800181c <micros>
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001f7c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001f80:	1a84      	subs	r4, r0, r2
 8001f82:	603c      	str	r4, [r7, #0]
 8001f84:	eb61 0303 	sbc.w	r3, r1, r3
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f8e:	f7fe fea7 	bl	8000ce0 <__aeabi_ul2f>
 8001f92:	ee06 0a90 	vmov	s13, r0
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001fdc <TrajectoryGenerationProcess+0x2fc>
 8001fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa4:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fac:	da00      	bge.n	8001fb0 <TrajectoryGenerationProcess+0x2d0>
			  break;
 8001fae:	e0ea      	b.n	8002186 <TrajectoryGenerationProcess+0x4a6>
					  TrjStruc.Equation_Timestamp = micros();
 8001fb0:	f7ff fc34 	bl	800181c <micros>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4905      	ldr	r1, [pc, #20]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001fba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 1;
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <TrajectoryGenerationProcess+0x2f0>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 8001fc4:	e0df      	b.n	8002186 <TrajectoryGenerationProcess+0x4a6>
 8001fc6:	bf00      	nop
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	412e8480 	.word	0x412e8480
 8001fd0:	20000238 	.word	0x20000238
 8001fd4:	3fe00000 	.word	0x3fe00000
 8001fd8:	200002b4 	.word	0x200002b4
 8001fdc:	49742400 	.word	0x49742400
 8001fe0:	bfe00000 	.word	0xbfe00000
			  else if (TrjStruc.Submode == 1)
 8001fe4:	4b6b      	ldr	r3, [pc, #428]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8001fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d148      	bne.n	800207e <TrajectoryGenerationProcess+0x39e>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8001fec:	4b69      	ldr	r3, [pc, #420]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fa55 	bl	80004a0 <__aeabi_f2d>
 8001ff6:	4b67      	ldr	r3, [pc, #412]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8001ff8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001ffc:	f7fe faa8 	bl	8000550 <__aeabi_dmul>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4614      	mov	r4, r2
 8002006:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 8002008:	4b62      	ldr	r3, [pc, #392]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fa47 	bl	80004a0 <__aeabi_f2d>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4620      	mov	r0, r4
 8002018:	4629      	mov	r1, r5
 800201a:	f7fe f8e3 	bl	80001e4 <__adddf3>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4610      	mov	r0, r2
 8002024:	4619      	mov	r1, r3
 8002026:	f7fe fd43 	bl	8000ab0 <__aeabi_d2f>
 800202a:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 800202c:	4a59      	ldr	r2, [pc, #356]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 800202e:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 8002030:	f7ff fbf4 	bl	800181c <micros>
 8002034:	4b57      	ldr	r3, [pc, #348]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8002036:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800203a:	ebb0 0a02 	subs.w	sl, r0, r2
 800203e:	eb61 0b03 	sbc.w	fp, r1, r3
 8002042:	4650      	mov	r0, sl
 8002044:	4659      	mov	r1, fp
 8002046:	f7fe fe4b 	bl	8000ce0 <__aeabi_ul2f>
 800204a:	ee06 0a90 	vmov	s13, r0
 800204e:	4b51      	ldr	r3, [pc, #324]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8002050:	edd3 7a02 	vldr	s15, [r3, #8]
 8002054:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002198 <TrajectoryGenerationProcess+0x4b8>
 8002058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800205c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002064:	da00      	bge.n	8002068 <TrajectoryGenerationProcess+0x388>
			  break;
 8002066:	e08e      	b.n	8002186 <TrajectoryGenerationProcess+0x4a6>
					  TrjStruc.Equation_Timestamp = micros();
 8002068:	f7ff fbd8 	bl	800181c <micros>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4948      	ldr	r1, [pc, #288]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8002072:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 2;
 8002076:	4b47      	ldr	r3, [pc, #284]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8002078:	2202      	movs	r2, #2
 800207a:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 800207c:	e083      	b.n	8002186 <TrajectoryGenerationProcess+0x4a6>
			  else if (TrjStruc.Submode == 2)
 800207e:	4b45      	ldr	r3, [pc, #276]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8002080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002082:	2b02      	cmp	r3, #2
 8002084:	d17f      	bne.n	8002186 <TrajectoryGenerationProcess+0x4a6>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002086:	4b43      	ldr	r3, [pc, #268]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fa08 	bl	80004a0 <__aeabi_f2d>
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	4b41      	ldr	r3, [pc, #260]	; (800219c <TrajectoryGenerationProcess+0x4bc>)
 8002096:	f7fe fa5b 	bl	8000550 <__aeabi_dmul>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4614      	mov	r4, r2
 80020a0:	461d      	mov	r5, r3
 80020a2:	4b3c      	ldr	r3, [pc, #240]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 80020a4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80020a8:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 80020aa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80020ae:	f7fe fa4f 	bl	8000550 <__aeabi_dmul>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4620      	mov	r0, r4
 80020b8:	4629      	mov	r1, r5
 80020ba:	f7fe fa49 	bl	8000550 <__aeabi_dmul>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4614      	mov	r4, r2
 80020c4:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 80020c6:	4b33      	ldr	r3, [pc, #204]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe f9e8 	bl	80004a0 <__aeabi_f2d>
 80020d0:	4b30      	ldr	r3, [pc, #192]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 80020d2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80020d6:	f7fe fa3b 	bl	8000550 <__aeabi_dmul>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4620      	mov	r0, r4
 80020e0:	4629      	mov	r1, r5
 80020e2:	f7fe f87f 	bl	80001e4 <__adddf3>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4614      	mov	r4, r2
 80020ec:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe f9d4 	bl	80004a0 <__aeabi_f2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4620      	mov	r0, r4
 80020fe:	4629      	mov	r1, r5
 8002100:	f7fe f870 	bl	80001e4 <__adddf3>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe fcd0 	bl	8000ab0 <__aeabi_d2f>
 8002110:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002112:	4a20      	ldr	r2, [pc, #128]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8002114:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002116:	f7ff fb81 	bl	800181c <micros>
 800211a:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 800211c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002120:	ebb0 0802 	subs.w	r8, r0, r2
 8002124:	eb61 0903 	sbc.w	r9, r1, r3
 8002128:	4640      	mov	r0, r8
 800212a:	4649      	mov	r1, r9
 800212c:	f7fe fdd8 	bl	8000ce0 <__aeabi_ul2f>
 8002130:	ee06 0a90 	vmov	s13, r0
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002198 <TrajectoryGenerationProcess+0x4b8>
 800213e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002142:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	da00      	bge.n	800214e <TrajectoryGenerationProcess+0x46e>
			  break;
 800214c:	e01b      	b.n	8002186 <TrajectoryGenerationProcess+0x4a6>
					  TrjStruc.Equation_Timestamp = micros();
 800214e:	f7ff fb65 	bl	800181c <micros>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	490f      	ldr	r1, [pc, #60]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8002158:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 0;
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 800215e:	2200      	movs	r2, #0
 8002160:	66da      	str	r2, [r3, #108]	; 0x6c
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8002164:	2202      	movs	r2, #2
 8002166:	669a      	str	r2, [r3, #104]	; 0x68
			  break;
 8002168:	e00d      	b.n	8002186 <TrajectoryGenerationProcess+0x4a6>
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8002170:	6213      	str	r3, [r2, #32]
			  TrjStruc.Start_Theta = TrjStruc.Desire_Theta;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	4a07      	ldr	r2, [pc, #28]	; (8002194 <TrajectoryGenerationProcess+0x4b4>)
 8002178:	65d3      	str	r3, [r2, #92]	; 0x5c
			  Munmunbot_State = STATE_Idle;
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <TrajectoryGenerationProcess+0x4c0>)
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
			  break;
 8002180:	e002      	b.n	8002188 <TrajectoryGenerationProcess+0x4a8>
			  break;
 8002182:	bf00      	nop
 8002184:	e000      	b.n	8002188 <TrajectoryGenerationProcess+0x4a8>
			  break;
 8002186:	bf00      	nop
}
 8002188:	bf00      	nop
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002192:	bf00      	nop
 8002194:	20000238 	.word	0x20000238
 8002198:	49742400 	.word	0x49742400
 800219c:	bfe00000 	.word	0xbfe00000
 80021a0:	20000000 	.word	0x20000000

080021a4 <PIDController2in1>:

void PIDController2in1()
{
 80021a4:	b5b0      	push	{r4, r5, r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 80021a8:	4b70      	ldr	r3, [pc, #448]	; (800236c <PIDController2in1+0x1c8>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4a70      	ldr	r2, [pc, #448]	; (8002370 <PIDController2in1+0x1cc>)
 80021ae:	6113      	str	r3, [r2, #16]
    PositionPIDController.NowError = PositionPIDController.OutputFeedback-PositionPIDController.OutputDesire;
 80021b0:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <PIDController2in1+0x1cc>)
 80021b2:	ed93 7a05 	vldr	s14, [r3, #20]
 80021b6:	4b6e      	ldr	r3, [pc, #440]	; (8002370 <PIDController2in1+0x1cc>)
 80021b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80021bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c0:	4b6b      	ldr	r3, [pc, #428]	; (8002370 <PIDController2in1+0x1cc>)
 80021c2:	edc3 7a07 	vstr	s15, [r3, #28]
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 80021c6:	4b6a      	ldr	r3, [pc, #424]	; (8002370 <PIDController2in1+0x1cc>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f968 	bl	80004a0 <__aeabi_f2d>
 80021d0:	4604      	mov	r4, r0
 80021d2:	460d      	mov	r5, r1
 80021d4:	4b66      	ldr	r3, [pc, #408]	; (8002370 <PIDController2in1+0x1cc>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f961 	bl	80004a0 <__aeabi_f2d>
 80021de:	4b64      	ldr	r3, [pc, #400]	; (8002370 <PIDController2in1+0x1cc>)
 80021e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021e4:	f7fe f9b4 	bl	8000550 <__aeabi_dmul>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4620      	mov	r0, r4
 80021ee:	4629      	mov	r1, r5
 80021f0:	f7fd fff8 	bl	80001e4 <__adddf3>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f7fe fc58 	bl	8000ab0 <__aeabi_d2f>
 8002200:	4603      	mov	r3, r0
 8002202:	4a5b      	ldr	r2, [pc, #364]	; (8002370 <PIDController2in1+0x1cc>)
 8002204:	6193      	str	r3, [r2, #24]
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002206:	4b5a      	ldr	r3, [pc, #360]	; (8002370 <PIDController2in1+0x1cc>)
 8002208:	ed93 7a00 	vldr	s14, [r3]
 800220c:	4b58      	ldr	r3, [pc, #352]	; (8002370 <PIDController2in1+0x1cc>)
 800220e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002212:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 8002216:	4b56      	ldr	r3, [pc, #344]	; (8002370 <PIDController2in1+0x1cc>)
 8002218:	edd3 6a01 	vldr	s13, [r3, #4]
 800221c:	4b54      	ldr	r3, [pc, #336]	; (8002370 <PIDController2in1+0x1cc>)
 800221e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222a:	ee17 0a90 	vmov	r0, s15
 800222e:	f7fe f937 	bl	80004a0 <__aeabi_f2d>
 8002232:	4604      	mov	r4, r0
 8002234:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime);
 8002236:	4b4e      	ldr	r3, [pc, #312]	; (8002370 <PIDController2in1+0x1cc>)
 8002238:	ed93 7a02 	vldr	s14, [r3, #8]
 800223c:	4b4c      	ldr	r3, [pc, #304]	; (8002370 <PIDController2in1+0x1cc>)
 800223e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002242:	4b4b      	ldr	r3, [pc, #300]	; (8002370 <PIDController2in1+0x1cc>)
 8002244:	edd3 7a08 	vldr	s15, [r3, #32]
 8002248:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800224c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002250:	ee17 0a90 	vmov	r0, s15
 8002254:	f7fe f924 	bl	80004a0 <__aeabi_f2d>
 8002258:	4b45      	ldr	r3, [pc, #276]	; (8002370 <PIDController2in1+0x1cc>)
 800225a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800225e:	f7fe faa1 	bl	80007a4 <__aeabi_ddiv>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4620      	mov	r0, r4
 8002268:	4629      	mov	r1, r5
 800226a:	f7fd ffbb 	bl	80001e4 <__adddf3>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	f7fe fc1b 	bl	8000ab0 <__aeabi_d2f>
 800227a:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 800227c:	4a3c      	ldr	r2, [pc, #240]	; (8002370 <PIDController2in1+0x1cc>)
 800227e:	60d3      	str	r3, [r2, #12]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 8002280:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <PIDController2in1+0x1cc>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	4a3a      	ldr	r2, [pc, #232]	; (8002370 <PIDController2in1+0x1cc>)
 8002286:	6213      	str	r3, [r2, #32]

    VelocityPIDController.OutputDesire = PositionPIDController.ControllerOutput;
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <PIDController2in1+0x1cc>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a39      	ldr	r2, [pc, #228]	; (8002374 <PIDController2in1+0x1d0>)
 800228e:	6113      	str	r3, [r2, #16]
    VelocityPIDController.NowError = VelocityPIDController.OutputFeedback-VelocityPIDController.OutputDesire;
 8002290:	4b38      	ldr	r3, [pc, #224]	; (8002374 <PIDController2in1+0x1d0>)
 8002292:	ed93 7a05 	vldr	s14, [r3, #20]
 8002296:	4b37      	ldr	r3, [pc, #220]	; (8002374 <PIDController2in1+0x1d0>)
 8002298:	edd3 7a04 	vldr	s15, [r3, #16]
 800229c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a0:	4b34      	ldr	r3, [pc, #208]	; (8002374 <PIDController2in1+0x1d0>)
 80022a2:	edc3 7a07 	vstr	s15, [r3, #28]
    VelocityPIDController.Integral_Value += VelocityPIDController.NowError*VelocityPIDController.SamplingTime;
 80022a6:	4b33      	ldr	r3, [pc, #204]	; (8002374 <PIDController2in1+0x1d0>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f8f8 	bl	80004a0 <__aeabi_f2d>
 80022b0:	4604      	mov	r4, r0
 80022b2:	460d      	mov	r5, r1
 80022b4:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <PIDController2in1+0x1d0>)
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f8f1 	bl	80004a0 <__aeabi_f2d>
 80022be:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <PIDController2in1+0x1d0>)
 80022c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80022c4:	f7fe f944 	bl	8000550 <__aeabi_dmul>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4620      	mov	r0, r4
 80022ce:	4629      	mov	r1, r5
 80022d0:	f7fd ff88 	bl	80001e4 <__adddf3>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	f7fe fbe8 	bl	8000ab0 <__aeabi_d2f>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4a24      	ldr	r2, [pc, #144]	; (8002374 <PIDController2in1+0x1d0>)
 80022e4:	6193      	str	r3, [r2, #24]
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <PIDController2in1+0x1d0>)
 80022e8:	ed93 7a00 	vldr	s14, [r3]
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <PIDController2in1+0x1d0>)
 80022ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80022f2:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
 80022f6:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <PIDController2in1+0x1d0>)
 80022f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <PIDController2in1+0x1d0>)
 80022fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8002302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230a:	ee17 0a90 	vmov	r0, s15
 800230e:	f7fe f8c7 	bl	80004a0 <__aeabi_f2d>
 8002312:	4604      	mov	r4, r0
 8002314:	460d      	mov	r5, r1
					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime);
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <PIDController2in1+0x1d0>)
 8002318:	ed93 7a02 	vldr	s14, [r3, #8]
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <PIDController2in1+0x1d0>)
 800231e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <PIDController2in1+0x1d0>)
 8002324:	edd3 7a08 	vldr	s15, [r3, #32]
 8002328:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800232c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002330:	ee17 0a90 	vmov	r0, s15
 8002334:	f7fe f8b4 	bl	80004a0 <__aeabi_f2d>
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <PIDController2in1+0x1d0>)
 800233a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800233e:	f7fe fa31 	bl	80007a4 <__aeabi_ddiv>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4620      	mov	r0, r4
 8002348:	4629      	mov	r1, r5
 800234a:	f7fd ff4b 	bl	80001e4 <__adddf3>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f7fe fbab 	bl	8000ab0 <__aeabi_d2f>
 800235a:	4603      	mov	r3, r0
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 800235c:	4a05      	ldr	r2, [pc, #20]	; (8002374 <PIDController2in1+0x1d0>)
 800235e:	60d3      	str	r3, [r2, #12]
    VelocityPIDController.PreviousError = VelocityPIDController.NowError;
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <PIDController2in1+0x1d0>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	4a03      	ldr	r2, [pc, #12]	; (8002374 <PIDController2in1+0x1d0>)
 8002366:	6213      	str	r3, [r2, #32]

}
 8002368:	bf00      	nop
 800236a:	bdb0      	pop	{r4, r5, r7, pc}
 800236c:	20000238 	.word	0x20000238
 8002370:	200001d8 	.word	0x200001d8
 8002374:	20000208 	.word	0x20000208

08002378 <UARTInit>:



///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <UARTInit+0x4c>)
 8002382:	88db      	ldrh	r3, [r3, #6]
 8002384:	4619      	mov	r1, r3
 8002386:	2001      	movs	r0, #1
 8002388:	f004 fa64 	bl	8006854 <calloc>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <UARTInit+0x4c>)
 8002396:	889b      	ldrh	r3, [r3, #4]
 8002398:	4619      	mov	r1, r3
 800239a:	2001      	movs	r0, #1
 800239c:	f004 fa5a 	bl	8006854 <calloc>
 80023a0:	4603      	mov	r3, r0
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	81da      	strh	r2, [r3, #14]
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200000b8 	.word	0x200000b8

080023c8 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6919      	ldr	r1, [r3, #16]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	88db      	ldrh	r3, [r3, #6]
 80023dc:	461a      	mov	r2, r3
 80023de:	f003 fbb5 	bl	8005b4c <HAL_UART_Receive_DMA>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	88db      	ldrh	r3, [r3, #6]
 80023f6:	461a      	mov	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	1ad3      	subs	r3, r2, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8002418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241c:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	8a9b      	ldrh	r3, [r3, #20]
 8002422:	461c      	mov	r4, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ffe0 	bl	80023ea <UARTGetRxHead>
 800242a:	4603      	mov	r3, r0
 800242c:	429c      	cmp	r4, r3
 800242e:	d013      	beq.n	8002458 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	8a92      	ldrh	r2, [r2, #20]
 8002438:	4413      	add	r3, r2
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	8a9b      	ldrh	r3, [r3, #20]
 8002442:	3301      	adds	r3, #1
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	88d2      	ldrh	r2, [r2, #6]
 8002448:	fb93 f1f2 	sdiv	r1, r3, r2
 800244c:	fb02 f201 	mul.w	r2, r2, r1
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	b29a      	uxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8002458:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}

08002464 <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b20      	cmp	r3, #32
 8002478:	d13d      	bne.n	80024f6 <UARTTxDumpBuffer+0x92>
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <UARTTxDumpBuffer+0x9c>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d139      	bne.n	80024f6 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8002482:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <UARTTxDumpBuffer+0x9c>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	89da      	ldrh	r2, [r3, #14]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	899b      	ldrh	r3, [r3, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d02d      	beq.n	80024f0 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	89da      	ldrh	r2, [r3, #14]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800249c:	429a      	cmp	r2, r3
 800249e:	d906      	bls.n	80024ae <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	89da      	ldrh	r2, [r3, #14]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	e005      	b.n	80024ba <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	889a      	ldrh	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	8992      	ldrh	r2, [r2, #12]
 80024c8:	4413      	add	r3, r2
 80024ca:	89fa      	ldrh	r2, [r7, #14]
 80024cc:	4619      	mov	r1, r3
 80024ce:	f003 fad1 	bl	8005a74 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	899b      	ldrh	r3, [r3, #12]
 80024d6:	461a      	mov	r2, r3
 80024d8:	89fb      	ldrh	r3, [r7, #14]
 80024da:	4413      	add	r3, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	8892      	ldrh	r2, [r2, #4]
 80024e0:	fb93 f1f2 	sdiv	r1, r3, r2
 80024e4:	fb02 f201 	mul.w	r2, r2, r1
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <UARTTxDumpBuffer+0x9c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
	}
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200002b6 	.word	0x200002b6

08002504 <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	889b      	ldrh	r3, [r3, #4]
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	4293      	cmp	r3, r2
 800251a:	bf28      	it	cs
 800251c:	4613      	movcs	r3, r2
 800251e:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002520:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	889b      	ldrh	r3, [r3, #4]
 8002526:	4619      	mov	r1, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	89db      	ldrh	r3, [r3, #14]
 800252c:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 800252e:	4293      	cmp	r3, r2
 8002530:	bfa8      	it	ge
 8002532:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8002534:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	89d2      	ldrh	r2, [r2, #14]
 800253e:	4413      	add	r3, r2
 8002540:	8aba      	ldrh	r2, [r7, #20]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	4618      	mov	r0, r3
 8002546:	f004 f9b7 	bl	80068b8 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	89db      	ldrh	r3, [r3, #14]
 800254e:	461a      	mov	r2, r3
 8002550:	8afb      	ldrh	r3, [r7, #22]
 8002552:	4413      	add	r3, r2
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	8892      	ldrh	r2, [r2, #4]
 8002558:	fb93 f1f2 	sdiv	r1, r3, r2
 800255c:	fb02 f201 	mul.w	r2, r2, r1
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8002568:	8afa      	ldrh	r2, [r7, #22]
 800256a:	8abb      	ldrh	r3, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	d00a      	beq.n	8002586 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6898      	ldr	r0, [r3, #8]
 8002574:	8abb      	ldrh	r3, [r7, #20]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 800257a:	8afa      	ldrh	r2, [r7, #22]
 800257c:	8abb      	ldrh	r3, [r7, #20]
 800257e:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002580:	461a      	mov	r2, r3
 8002582:	f004 f999 	bl	80068b8 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f7ff ff6c 	bl	8002464 <UARTTxDumpBuffer>

}
 800258c:	bf00      	nop
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 800259c:	f247 5358 	movw	r3, #30040	; 0x7558
 80025a0:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 80025a2:	f107 030c 	add.w	r3, r7, #12
 80025a6:	2202      	movs	r2, #2
 80025a8:	4619      	mov	r1, r3
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffaa 	bl	8002504 <UARTTxWrite>
	}
}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 80025c0:	f646 6346 	movw	r3, #28230	; 0x6e46
 80025c4:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 80025c6:	f107 030c 	add.w	r3, r7, #12
 80025ca:	2202      	movs	r2, #2
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff98 	bl	8002504 <UARTTxWrite>
	}
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <Munmunbot_Protocol>:


void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter[256] = {0};
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;

	switch (Munmunbot_Protocol_State)
 80025e8:	4ba1      	ldr	r3, [pc, #644]	; (8002870 <Munmunbot_Protocol+0x294>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	f200 828c 	bhi.w	8002b0a <Munmunbot_Protocol+0x52e>
 80025f2:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <Munmunbot_Protocol+0x1c>)
 80025f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f8:	08002611 	.word	0x08002611
 80025fc:	080026c5 	.word	0x080026c5
 8002600:	08002707 	.word	0x08002707
 8002604:	08002755 	.word	0x08002755
 8002608:	08002771 	.word	0x08002771
 800260c:	0800280f 	.word	0x0800280f
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 8002610:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002614:	111b      	asrs	r3, r3, #4
 8002616:	b21b      	sxth	r3, r3
 8002618:	b29b      	uxth	r3, r3
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	2b09      	cmp	r3, #9
 8002620:	f040 8270 	bne.w	8002b04 <Munmunbot_Protocol+0x528>
			{
				CheckSum = dataIn;
 8002624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002628:	4a92      	ldr	r2, [pc, #584]	; (8002874 <Munmunbot_Protocol+0x298>)
 800262a:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4b90      	ldr	r3, [pc, #576]	; (8002878 <Munmunbot_Protocol+0x29c>)
 8002638:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 800263a:	4b8f      	ldr	r3, [pc, #572]	; (8002878 <Munmunbot_Protocol+0x29c>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b07      	cmp	r3, #7
 8002640:	d103      	bne.n	800264a <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 8002642:	4b8b      	ldr	r3, [pc, #556]	; (8002870 <Munmunbot_Protocol+0x294>)
 8002644:	2203      	movs	r2, #3
 8002646:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 8002648:	e25c      	b.n	8002b04 <Munmunbot_Protocol+0x528>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 800264a:	4b8b      	ldr	r3, [pc, #556]	; (8002878 <Munmunbot_Protocol+0x29c>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d00b      	beq.n	800266a <Munmunbot_Protocol+0x8e>
 8002652:	4b89      	ldr	r3, [pc, #548]	; (8002878 <Munmunbot_Protocol+0x29c>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b04      	cmp	r3, #4
 8002658:	d007      	beq.n	800266a <Munmunbot_Protocol+0x8e>
 800265a:	4b87      	ldr	r3, [pc, #540]	; (8002878 <Munmunbot_Protocol+0x29c>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b05      	cmp	r3, #5
 8002660:	d003      	beq.n	800266a <Munmunbot_Protocol+0x8e>
 8002662:	4b85      	ldr	r3, [pc, #532]	; (8002878 <Munmunbot_Protocol+0x29c>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b06      	cmp	r3, #6
 8002668:	d103      	bne.n	8002672 <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 800266a:	4b81      	ldr	r3, [pc, #516]	; (8002870 <Munmunbot_Protocol+0x294>)
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]
			break;
 8002670:	e248      	b.n	8002b04 <Munmunbot_Protocol+0x528>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8002672:	4b81      	ldr	r3, [pc, #516]	; (8002878 <Munmunbot_Protocol+0x29c>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d020      	beq.n	80026bc <Munmunbot_Protocol+0xe0>
 800267a:	4b7f      	ldr	r3, [pc, #508]	; (8002878 <Munmunbot_Protocol+0x29c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d01c      	beq.n	80026bc <Munmunbot_Protocol+0xe0>
 8002682:	4b7d      	ldr	r3, [pc, #500]	; (8002878 <Munmunbot_Protocol+0x29c>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b08      	cmp	r3, #8
 8002688:	d018      	beq.n	80026bc <Munmunbot_Protocol+0xe0>
 800268a:	4b7b      	ldr	r3, [pc, #492]	; (8002878 <Munmunbot_Protocol+0x29c>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b09      	cmp	r3, #9
 8002690:	d014      	beq.n	80026bc <Munmunbot_Protocol+0xe0>
 8002692:	4b79      	ldr	r3, [pc, #484]	; (8002878 <Munmunbot_Protocol+0x29c>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b0a      	cmp	r3, #10
 8002698:	d010      	beq.n	80026bc <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 800269a:	4b77      	ldr	r3, [pc, #476]	; (8002878 <Munmunbot_Protocol+0x29c>)
 800269c:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 800269e:	2b0b      	cmp	r3, #11
 80026a0:	d00c      	beq.n	80026bc <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 80026a2:	4b75      	ldr	r3, [pc, #468]	; (8002878 <Munmunbot_Protocol+0x29c>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d008      	beq.n	80026bc <Munmunbot_Protocol+0xe0>
 80026aa:	4b73      	ldr	r3, [pc, #460]	; (8002878 <Munmunbot_Protocol+0x29c>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b0d      	cmp	r3, #13
 80026b0:	d004      	beq.n	80026bc <Munmunbot_Protocol+0xe0>
 80026b2:	4b71      	ldr	r3, [pc, #452]	; (8002878 <Munmunbot_Protocol+0x29c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b0e      	cmp	r3, #14
 80026b8:	f040 8224 	bne.w	8002b04 <Munmunbot_Protocol+0x528>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 80026bc:	4b6c      	ldr	r3, [pc, #432]	; (8002870 <Munmunbot_Protocol+0x294>)
 80026be:	2205      	movs	r2, #5
 80026c0:	701a      	strb	r2, [r3, #0]
			break;
 80026c2:	e21f      	b.n	8002b04 <Munmunbot_Protocol+0x528>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 80026c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026c8:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <Munmunbot_Protocol+0x298>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	4a69      	ldr	r2, [pc, #420]	; (8002874 <Munmunbot_Protocol+0x298>)
 80026d0:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	4b68      	ldr	r3, [pc, #416]	; (800287c <Munmunbot_Protocol+0x2a0>)
 80026da:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4b66      	ldr	r3, [pc, #408]	; (8002880 <Munmunbot_Protocol+0x2a4>)
 80026e8:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 80026ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ee:	111b      	asrs	r3, r3, #4
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b61      	ldr	r3, [pc, #388]	; (8002880 <Munmunbot_Protocol+0x2a4>)
 80026fc:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <Munmunbot_Protocol+0x294>)
 8002700:	2202      	movs	r2, #2
 8002702:	701a      	strb	r2, [r3, #0]
			 break;
 8002704:	e201      	b.n	8002b0a <Munmunbot_Protocol+0x52e>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 8002706:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800270a:	4b5a      	ldr	r3, [pc, #360]	; (8002874 <Munmunbot_Protocol+0x298>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4413      	add	r3, r2
 8002710:	4a58      	ldr	r2, [pc, #352]	; (8002874 <Munmunbot_Protocol+0x298>)
 8002712:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	b21a      	sxth	r2, r3
 800271a:	4b58      	ldr	r3, [pc, #352]	; (800287c <Munmunbot_Protocol+0x2a0>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	b21b      	sxth	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	b21b      	sxth	r3, r3
 8002724:	b29a      	uxth	r2, r3
 8002726:	4b55      	ldr	r3, [pc, #340]	; (800287c <Munmunbot_Protocol+0x2a0>)
 8002728:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	b2da      	uxtb	r2, r3
 8002734:	4b52      	ldr	r3, [pc, #328]	; (8002880 <Munmunbot_Protocol+0x2a4>)
 8002736:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 8002738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273c:	111b      	asrs	r3, r3, #4
 800273e:	b21b      	sxth	r3, r3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	b2da      	uxtb	r2, r3
 8002748:	4b4d      	ldr	r3, [pc, #308]	; (8002880 <Munmunbot_Protocol+0x2a4>)
 800274a:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 800274c:	4b48      	ldr	r3, [pc, #288]	; (8002870 <Munmunbot_Protocol+0x294>)
 800274e:	2205      	movs	r2, #5
 8002750:	701a      	strb	r2, [r3, #0]
			 break;
 8002752:	e1da      	b.n	8002b0a <Munmunbot_Protocol+0x52e>

		case PP_Frame3_Data_0:
			   CheckSum += dataIn;
 8002754:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002758:	4b46      	ldr	r3, [pc, #280]	; (8002874 <Munmunbot_Protocol+0x298>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4413      	add	r3, r2
 800275e:	4a45      	ldr	r2, [pc, #276]	; (8002874 <Munmunbot_Protocol+0x298>)
 8002760:	6013      	str	r3, [r2, #0]
		   	   n_station = dataIn;
 8002762:	88fa      	ldrh	r2, [r7, #6]
 8002764:	4b47      	ldr	r3, [pc, #284]	; (8002884 <Munmunbot_Protocol+0x2a8>)
 8002766:	801a      	strh	r2, [r3, #0]
			   Munmunbot_Protocol_State = PP_Frame3_Data_1;
 8002768:	4b41      	ldr	r3, [pc, #260]	; (8002870 <Munmunbot_Protocol+0x294>)
 800276a:	2204      	movs	r2, #4
 800276c:	701a      	strb	r2, [r3, #0]
			   break;
 800276e:	e1cc      	b.n	8002b0a <Munmunbot_Protocol+0x52e>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 8002770:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002774:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <Munmunbot_Protocol+0x298>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4413      	add	r3, r2
 800277a:	4a3e      	ldr	r2, [pc, #248]	; (8002874 <Munmunbot_Protocol+0x298>)
 800277c:	6013      	str	r3, [r2, #0]
				if (n_station > 2)
 800277e:	4b41      	ldr	r3, [pc, #260]	; (8002884 <Munmunbot_Protocol+0x2a8>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d927      	bls.n	80027d6 <Munmunbot_Protocol+0x1fa>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	4a3f      	ldr	r2, [pc, #252]	; (8002888 <Munmunbot_Protocol+0x2ac>)
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	b2d9      	uxtb	r1, r3
 8002794:	4b3a      	ldr	r3, [pc, #232]	; (8002880 <Munmunbot_Protocol+0x2a4>)
 8002796:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002798:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <Munmunbot_Protocol+0x2ac>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	4b39      	ldr	r3, [pc, #228]	; (8002888 <Munmunbot_Protocol+0x2ac>)
 80027a2:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 80027a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a8:	111b      	asrs	r3, r3, #4
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	4a36      	ldr	r2, [pc, #216]	; (8002888 <Munmunbot_Protocol+0x2ac>)
 80027b0:	7812      	ldrb	r2, [r2, #0]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	b2d9      	uxtb	r1, r3
 80027b8:	4b31      	ldr	r3, [pc, #196]	; (8002880 <Munmunbot_Protocol+0x2a4>)
 80027ba:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 80027bc:	4b32      	ldr	r3, [pc, #200]	; (8002888 <Munmunbot_Protocol+0x2ac>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	3301      	adds	r3, #1
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <Munmunbot_Protocol+0x2ac>)
 80027c6:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 80027c8:	4b2e      	ldr	r3, [pc, #184]	; (8002884 <Munmunbot_Protocol+0x2a8>)
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	3b02      	subs	r3, #2
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <Munmunbot_Protocol+0x2a8>)
 80027d2:	801a      	strh	r2, [r3, #0]
 80027d4:	e012      	b.n	80027fc <Munmunbot_Protocol+0x220>
				}
				else if (n_station == 1)
 80027d6:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <Munmunbot_Protocol+0x2a8>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d10e      	bne.n	80027fc <Munmunbot_Protocol+0x220>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	4a29      	ldr	r2, [pc, #164]	; (8002888 <Munmunbot_Protocol+0x2ac>)
 80027e4:	7812      	ldrb	r2, [r2, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	b2d9      	uxtb	r1, r3
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <Munmunbot_Protocol+0x2a4>)
 80027ee:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 80027f0:	4b24      	ldr	r3, [pc, #144]	; (8002884 <Munmunbot_Protocol+0x2a8>)
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	4b22      	ldr	r3, [pc, #136]	; (8002884 <Munmunbot_Protocol+0x2a8>)
 80027fa:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 80027fc:	4b21      	ldr	r3, [pc, #132]	; (8002884 <Munmunbot_Protocol+0x2a8>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f040 8181 	bne.w	8002b08 <Munmunbot_Protocol+0x52c>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <Munmunbot_Protocol+0x294>)
 8002808:	2205      	movs	r2, #5
 800280a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800280c:	e17c      	b.n	8002b08 <Munmunbot_Protocol+0x52c>

			case PP_CheckSum:
				CheckSum = ~CheckSum;
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <Munmunbot_Protocol+0x298>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	43db      	mvns	r3, r3
 8002814:	4a17      	ldr	r2, [pc, #92]	; (8002874 <Munmunbot_Protocol+0x298>)
 8002816:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 8002818:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800281c:	4b15      	ldr	r3, [pc, #84]	; (8002874 <Munmunbot_Protocol+0x298>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	f040 8150 	bne.w	8002ac6 <Munmunbot_Protocol+0x4ea>
				{
					switch (ProtocolMode)
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <Munmunbot_Protocol+0x29c>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	3b01      	subs	r3, #1
 800282c:	2b0d      	cmp	r3, #13
 800282e:	f200 8165 	bhi.w	8002afc <Munmunbot_Protocol+0x520>
 8002832:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <Munmunbot_Protocol+0x25c>)
 8002834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002838:	0800288d 	.word	0x0800288d
 800283c:	080028c5 	.word	0x080028c5
 8002840:	080028dd 	.word	0x080028dd
 8002844:	080028f5 	.word	0x080028f5
 8002848:	08002919 	.word	0x08002919
 800284c:	08002939 	.word	0x08002939
 8002850:	0800295f 	.word	0x0800295f
 8002854:	080029ab 	.word	0x080029ab
 8002858:	080029c3 	.word	0x080029c3
 800285c:	08002a0b 	.word	0x08002a0b
 8002860:	08002a51 	.word	0x08002a51
 8002864:	08002a97 	.word	0x08002a97
 8002868:	08002aa7 	.word	0x08002aa7
 800286c:	08002ab7 	.word	0x08002ab7
 8002870:	200002b7 	.word	0x200002b7
 8002874:	200002b8 	.word	0x200002b8
 8002878:	200002bc 	.word	0x200002bc
 800287c:	200002be 	.word	0x200002be
 8002880:	200002c0 	.word	0x200002c0
 8002884:	200003c0 	.word	0x200003c0
 8002888:	200003c2 	.word	0x200003c2
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 800288c:	2391      	movs	r3, #145	; 0x91
 800288e:	763b      	strb	r3, [r7, #24]
						{0b10010001, parameter[0], parameter[1], 0b0};
 8002890:	4ba0      	ldr	r3, [pc, #640]	; (8002b14 <Munmunbot_Protocol+0x538>)
 8002892:	781b      	ldrb	r3, [r3, #0]
						uint8_t temp[] =
 8002894:	767b      	strb	r3, [r7, #25]
						{0b10010001, parameter[0], parameter[1], 0b0};
 8002896:	4b9f      	ldr	r3, [pc, #636]	; (8002b14 <Munmunbot_Protocol+0x538>)
 8002898:	785b      	ldrb	r3, [r3, #1]
						uint8_t temp[] =
 800289a:	76bb      	strb	r3, [r7, #26]
 800289c:	2300      	movs	r3, #0
 800289e:	76fb      	strb	r3, [r7, #27]
						temp[3] = ~(temp[0]+temp[1]+temp[2]);
 80028a0:	7e3a      	ldrb	r2, [r7, #24]
 80028a2:	7e7b      	ldrb	r3, [r7, #25]
 80028a4:	4413      	add	r3, r2
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	7ebb      	ldrb	r3, [r7, #26]
 80028aa:	4413      	add	r3, r2
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	76fb      	strb	r3, [r7, #27]
						UARTTxWrite(uart, temp, 4);
 80028b4:	f107 0318 	add.w	r3, r7, #24
 80028b8:	2204      	movs	r2, #4
 80028ba:	4619      	mov	r1, r3
 80028bc:	6838      	ldr	r0, [r7, #0]
 80028be:	f7ff fe21 	bl	8002504 <UARTTxWrite>
						}
						break;
 80028c2:	e11b      	b.n	8002afc <Munmunbot_Protocol+0x520>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 80028c4:	4b94      	ldr	r3, [pc, #592]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f040 80fe 	bne.w	8002aca <Munmunbot_Protocol+0x4ee>
						{
							Munmunbot_State = STATE_Idle;
 80028ce:	4b92      	ldr	r3, [pc, #584]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 80028d4:	6838      	ldr	r0, [r7, #0]
 80028d6:	f7ff fe5d 	bl	8002594 <ACK1Return>
						}
						break;
 80028da:	e0f6      	b.n	8002aca <Munmunbot_Protocol+0x4ee>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80028dc:	4b8e      	ldr	r3, [pc, #568]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	f040 80f4 	bne.w	8002ace <Munmunbot_Protocol+0x4f2>
						{
							Munmunbot_State = STATE_Disconnected;
 80028e6:	4b8c      	ldr	r3, [pc, #560]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 80028ec:	6838      	ldr	r0, [r7, #0]
 80028ee:	f7ff fe51 	bl	8002594 <ACK1Return>
						}
						break;
 80028f2:	e0ec      	b.n	8002ace <Munmunbot_Protocol+0x4f2>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80028f4:	4b88      	ldr	r3, [pc, #544]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	f040 80ea 	bne.w	8002ad2 <Munmunbot_Protocol+0x4f6>
						{
							CUSSStruc.RPMp = Data_HAck;
 80028fe:	4b87      	ldr	r3, [pc, #540]	; (8002b1c <Munmunbot_Protocol+0x540>)
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	4b86      	ldr	r3, [pc, #536]	; (8002b20 <Munmunbot_Protocol+0x544>)
 8002906:	609a      	str	r2, [r3, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 8002908:	4985      	ldr	r1, [pc, #532]	; (8002b20 <Munmunbot_Protocol+0x544>)
 800290a:	4886      	ldr	r0, [pc, #536]	; (8002b24 <Munmunbot_Protocol+0x548>)
 800290c:	f7ff f898 	bl	8001a40 <TrajectoryGenerationVelocityMaxSetting>
							ACK1Return(uart);
 8002910:	6838      	ldr	r0, [r7, #0]
 8002912:	f7ff fe3f 	bl	8002594 <ACK1Return>
						}
						break;
 8002916:	e0dc      	b.n	8002ad2 <Munmunbot_Protocol+0x4f6>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002918:	4b7f      	ldr	r3, [pc, #508]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	f040 80da 	bne.w	8002ad6 <Munmunbot_Protocol+0x4fa>
						{
							Angularpos_InputNumber = Data_HAck;
 8002922:	4b7e      	ldr	r3, [pc, #504]	; (8002b1c <Munmunbot_Protocol+0x540>)
 8002924:	881a      	ldrh	r2, [r3, #0]
 8002926:	4b80      	ldr	r3, [pc, #512]	; (8002b28 <Munmunbot_Protocol+0x54c>)
 8002928:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 800292a:	4b80      	ldr	r3, [pc, #512]	; (8002b2c <Munmunbot_Protocol+0x550>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 8002930:	6838      	ldr	r0, [r7, #0]
 8002932:	f7ff fe2f 	bl	8002594 <ACK1Return>
						}
						break;
 8002936:	e0ce      	b.n	8002ad6 <Munmunbot_Protocol+0x4fa>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002938:	4b77      	ldr	r3, [pc, #476]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	f040 80cc 	bne.w	8002ada <Munmunbot_Protocol+0x4fe>
						{
							Angularpos_InputArray[0] = parameter[0];
 8002942:	4b74      	ldr	r3, [pc, #464]	; (8002b14 <Munmunbot_Protocol+0x538>)
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	4b7a      	ldr	r3, [pc, #488]	; (8002b30 <Munmunbot_Protocol+0x554>)
 8002948:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 800294a:	4b78      	ldr	r3, [pc, #480]	; (8002b2c <Munmunbot_Protocol+0x550>)
 800294c:	2202      	movs	r2, #2
 800294e:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 8002950:	4b78      	ldr	r3, [pc, #480]	; (8002b34 <Munmunbot_Protocol+0x558>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 8002956:	6838      	ldr	r0, [r7, #0]
 8002958:	f7ff fe1c 	bl	8002594 <ACK1Return>
						}
						break;
 800295c:	e0bd      	b.n	8002ada <Munmunbot_Protocol+0x4fe>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 800295e:	4b6e      	ldr	r3, [pc, #440]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b01      	cmp	r3, #1
 8002964:	f040 80bb 	bne.w	8002ade <Munmunbot_Protocol+0x502>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 8002968:	4b70      	ldr	r3, [pc, #448]	; (8002b2c <Munmunbot_Protocol+0x550>)
 800296a:	2203      	movs	r2, #3
 800296c:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station; i++)
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	e00b      	b.n	800298c <Munmunbot_Protocol+0x3b0>
							{
								Angularpos_InputArray[i] = parameter[i];
 8002974:	4a67      	ldr	r2, [pc, #412]	; (8002b14 <Munmunbot_Protocol+0x538>)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	7819      	ldrb	r1, [r3, #0]
 800297c:	4a6c      	ldr	r2, [pc, #432]	; (8002b30 <Munmunbot_Protocol+0x554>)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	4413      	add	r3, r2
 8002982:	460a      	mov	r2, r1
 8002984:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station; i++)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	4b6a      	ldr	r3, [pc, #424]	; (8002b38 <Munmunbot_Protocol+0x55c>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	4293      	cmp	r3, r2
 8002996:	dbed      	blt.n	8002974 <Munmunbot_Protocol+0x398>
							}
							NumberOfStationToGo = n_station;
 8002998:	4b67      	ldr	r3, [pc, #412]	; (8002b38 <Munmunbot_Protocol+0x55c>)
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b65      	ldr	r3, [pc, #404]	; (8002b34 <Munmunbot_Protocol+0x558>)
 80029a0:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	f7ff fdf6 	bl	8002594 <ACK1Return>
						}
						break;
 80029a8:	e099      	b.n	8002ade <Munmunbot_Protocol+0x502>
					case 8:  /// Go go ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80029aa:	4b5b      	ldr	r3, [pc, #364]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	f040 8097 	bne.w	8002ae2 <Munmunbot_Protocol+0x506>
						{
							ACK1Return(uart);
 80029b4:	6838      	ldr	r0, [r7, #0]
 80029b6:	f7ff fded 	bl	8002594 <ACK1Return>
							Munmunbot_State = STATE_PrepareDATA;
 80029ba:	4b57      	ldr	r3, [pc, #348]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 80029bc:	2202      	movs	r2, #2
 80029be:	701a      	strb	r2, [r3, #0]
						}
						break;
 80029c0:	e08f      	b.n	8002ae2 <Munmunbot_Protocol+0x506>
					case 9:
						if (Munmunbot_State == STATE_End_Effector_Working)
 80029c2:	4b55      	ldr	r3, [pc, #340]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b05      	cmp	r3, #5
 80029c8:	f040 808d 	bne.w	8002ae6 <Munmunbot_Protocol+0x50a>
						{
							ACK1Return(uart);
 80029cc:	6838      	ldr	r0, [r7, #0]
 80029ce:	f7ff fde1 	bl	8002594 <ACK1Return>
							{
								uint8_t temp[] =
 80029d2:	2391      	movs	r3, #145	; 0x91
 80029d4:	753b      	strb	r3, [r7, #20]
								{0b10010001, parameter[0], parameter[1], 0b0};
 80029d6:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <Munmunbot_Protocol+0x538>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
								uint8_t temp[] =
 80029da:	757b      	strb	r3, [r7, #21]
								{0b10010001, parameter[0], parameter[1], 0b0};
 80029dc:	4b4d      	ldr	r3, [pc, #308]	; (8002b14 <Munmunbot_Protocol+0x538>)
 80029de:	785b      	ldrb	r3, [r3, #1]
								uint8_t temp[] =
 80029e0:	75bb      	strb	r3, [r7, #22]
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]
								temp[3] = ~(temp[0]+temp[1]+temp[2]);
 80029e6:	7d3a      	ldrb	r2, [r7, #20]
 80029e8:	7d7b      	ldrb	r3, [r7, #21]
 80029ea:	4413      	add	r3, r2
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	7dbb      	ldrb	r3, [r7, #22]
 80029f0:	4413      	add	r3, r2
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	75fb      	strb	r3, [r7, #23]
								UARTTxWrite(uart, temp, 4);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	2204      	movs	r2, #4
 8002a00:	4619      	mov	r1, r3
 8002a02:	6838      	ldr	r0, [r7, #0]
 8002a04:	f7ff fd7e 	bl	8002504 <UARTTxWrite>
							}
						}
						break;
 8002a08:	e06d      	b.n	8002ae6 <Munmunbot_Protocol+0x50a>
					case 10:
						if (Munmunbot_State == STATE_End_Effector_Working)
 8002a0a:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d16b      	bne.n	8002aea <Munmunbot_Protocol+0x50e>
						{
							ACK1Return(uart);
 8002a12:	6838      	ldr	r0, [r7, #0]
 8002a14:	f7ff fdbe 	bl	8002594 <ACK1Return>
							{
								uint8_t temp[] =
 8002a18:	2391      	movs	r3, #145	; 0x91
 8002a1a:	743b      	strb	r3, [r7, #16]
								{0b10010001, parameter[0], parameter[1], 0b0};
 8002a1c:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <Munmunbot_Protocol+0x538>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
								uint8_t temp[] =
 8002a20:	747b      	strb	r3, [r7, #17]
								{0b10010001, parameter[0], parameter[1], 0b0};
 8002a22:	4b3c      	ldr	r3, [pc, #240]	; (8002b14 <Munmunbot_Protocol+0x538>)
 8002a24:	785b      	ldrb	r3, [r3, #1]
								uint8_t temp[] =
 8002a26:	74bb      	strb	r3, [r7, #18]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	74fb      	strb	r3, [r7, #19]
								temp[3] = ~(temp[0]+temp[1]+temp[2]);
 8002a2c:	7c3a      	ldrb	r2, [r7, #16]
 8002a2e:	7c7b      	ldrb	r3, [r7, #17]
 8002a30:	4413      	add	r3, r2
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	7cbb      	ldrb	r3, [r7, #18]
 8002a36:	4413      	add	r3, r2
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	74fb      	strb	r3, [r7, #19]
								UARTTxWrite(uart, temp, 4);
 8002a40:	f107 0310 	add.w	r3, r7, #16
 8002a44:	2204      	movs	r2, #4
 8002a46:	4619      	mov	r1, r3
 8002a48:	6838      	ldr	r0, [r7, #0]
 8002a4a:	f7ff fd5b 	bl	8002504 <UARTTxWrite>
							}
						}
						break;
 8002a4e:	e04c      	b.n	8002aea <Munmunbot_Protocol+0x50e>
					case 11:
						if (Munmunbot_State == STATE_End_Effector_Working)
 8002a50:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d14a      	bne.n	8002aee <Munmunbot_Protocol+0x512>
						{
							ACK1Return(uart);
 8002a58:	6838      	ldr	r0, [r7, #0]
 8002a5a:	f7ff fd9b 	bl	8002594 <ACK1Return>
							{
								uint8_t temp[] =
 8002a5e:	2391      	movs	r3, #145	; 0x91
 8002a60:	733b      	strb	r3, [r7, #12]
								{0b10010001, parameter[0], parameter[1], 0b0};
 8002a62:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <Munmunbot_Protocol+0x538>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
								uint8_t temp[] =
 8002a66:	737b      	strb	r3, [r7, #13]
								{0b10010001, parameter[0], parameter[1], 0b0};
 8002a68:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <Munmunbot_Protocol+0x538>)
 8002a6a:	785b      	ldrb	r3, [r3, #1]
								uint8_t temp[] =
 8002a6c:	73bb      	strb	r3, [r7, #14]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
								temp[3] = ~(temp[0]+temp[1]+temp[2]);
 8002a72:	7b3a      	ldrb	r2, [r7, #12]
 8002a74:	7b7b      	ldrb	r3, [r7, #13]
 8002a76:	4413      	add	r3, r2
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	7bbb      	ldrb	r3, [r7, #14]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	73fb      	strb	r3, [r7, #15]
								UARTTxWrite(uart, temp, 4);
 8002a86:	f107 030c 	add.w	r3, r7, #12
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6838      	ldr	r0, [r7, #0]
 8002a90:	f7ff fd38 	bl	8002504 <UARTTxWrite>
							}
						}
						break;
 8002a94:	e02b      	b.n	8002aee <Munmunbot_Protocol+0x512>
					case 12:
						if (Munmunbot_State == STATE_Idle)
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d129      	bne.n	8002af2 <Munmunbot_Protocol+0x516>
						{
							ACK1Return(uart);
 8002a9e:	6838      	ldr	r0, [r7, #0]
 8002aa0:	f7ff fd78 	bl	8002594 <ACK1Return>
						}
						break;
 8002aa4:	e025      	b.n	8002af2 <Munmunbot_Protocol+0x516>
					case 13:
						if (Munmunbot_State == STATE_Idle)
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d123      	bne.n	8002af6 <Munmunbot_Protocol+0x51a>
						{
							ACK1Return(uart);
 8002aae:	6838      	ldr	r0, [r7, #0]
 8002ab0:	f7ff fd70 	bl	8002594 <ACK1Return>
						}
						break;
 8002ab4:	e01f      	b.n	8002af6 <Munmunbot_Protocol+0x51a>
					case 14:
						if (Munmunbot_State == STATE_Idle)
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <Munmunbot_Protocol+0x53c>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d11d      	bne.n	8002afa <Munmunbot_Protocol+0x51e>
						{
							ACK1Return(uart);
 8002abe:	6838      	ldr	r0, [r7, #0]
 8002ac0:	f7ff fd68 	bl	8002594 <ACK1Return>
						}
						break;
 8002ac4:	e019      	b.n	8002afa <Munmunbot_Protocol+0x51e>
				}
			}
 8002ac6:	bf00      	nop
 8002ac8:	e018      	b.n	8002afc <Munmunbot_Protocol+0x520>
						break;
 8002aca:	bf00      	nop
 8002acc:	e016      	b.n	8002afc <Munmunbot_Protocol+0x520>
						break;
 8002ace:	bf00      	nop
 8002ad0:	e014      	b.n	8002afc <Munmunbot_Protocol+0x520>
						break;
 8002ad2:	bf00      	nop
 8002ad4:	e012      	b.n	8002afc <Munmunbot_Protocol+0x520>
						break;
 8002ad6:	bf00      	nop
 8002ad8:	e010      	b.n	8002afc <Munmunbot_Protocol+0x520>
						break;
 8002ada:	bf00      	nop
 8002adc:	e00e      	b.n	8002afc <Munmunbot_Protocol+0x520>
						break;
 8002ade:	bf00      	nop
 8002ae0:	e00c      	b.n	8002afc <Munmunbot_Protocol+0x520>
						break;
 8002ae2:	bf00      	nop
 8002ae4:	e00a      	b.n	8002afc <Munmunbot_Protocol+0x520>
						break;
 8002ae6:	bf00      	nop
 8002ae8:	e008      	b.n	8002afc <Munmunbot_Protocol+0x520>
						break;
 8002aea:	bf00      	nop
 8002aec:	e006      	b.n	8002afc <Munmunbot_Protocol+0x520>
						break;
 8002aee:	bf00      	nop
 8002af0:	e004      	b.n	8002afc <Munmunbot_Protocol+0x520>
						break;
 8002af2:	bf00      	nop
 8002af4:	e002      	b.n	8002afc <Munmunbot_Protocol+0x520>
						break;
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <Munmunbot_Protocol+0x520>
						break;
 8002afa:	bf00      	nop
			Munmunbot_Protocol_State = PP_STARTandMode;
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <Munmunbot_Protocol+0x560>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
			break;
 8002b02:	e002      	b.n	8002b0a <Munmunbot_Protocol+0x52e>
			break;
 8002b04:	bf00      	nop
 8002b06:	e000      	b.n	8002b0a <Munmunbot_Protocol+0x52e>
				break;
 8002b08:	bf00      	nop
	}
}
 8002b0a:	bf00      	nop
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200002c0 	.word	0x200002c0
 8002b18:	20000000 	.word	0x20000000
 8002b1c:	200002be 	.word	0x200002be
 8002b20:	200002a8 	.word	0x200002a8
 8002b24:	20000238 	.word	0x20000238
 8002b28:	200001d0 	.word	0x200001d0
 8002b2c:	200001d2 	.word	0x200001d2
 8002b30:	200000d0 	.word	0x200000d0
 8002b34:	200001d3 	.word	0x200001d3
 8002b38:	200003c0 	.word	0x200003c0
 8002b3c:	200002b7 	.word	0x200002b7

08002b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b44:	b672      	cpsid	i
}
 8002b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b48:	e7fe      	b.n	8002b48 <Error_Handler+0x8>
	...

08002b4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <HAL_MspInit+0x4c>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	4a0f      	ldr	r2, [pc, #60]	; (8002b98 <HAL_MspInit+0x4c>)
 8002b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b60:	6453      	str	r3, [r2, #68]	; 0x44
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_MspInit+0x4c>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_MspInit+0x4c>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <HAL_MspInit+0x4c>)
 8002b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_MspInit+0x4c>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b8a:	2007      	movs	r0, #7
 8002b8c:	f000 fb84 	bl	8003298 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800

08002b9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <HAL_TIM_Encoder_MspInit+0x84>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d12c      	bne.n	8002c18 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a10      	ldr	r2, [pc, #64]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4619      	mov	r1, r3
 8002c12:	4805      	ldr	r0, [pc, #20]	; (8002c28 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002c14:	f000 ff84 	bl	8003b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c18:	bf00      	nop
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020000 	.word	0x40020000

08002c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d116      	bne.n	8002c6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_TIM_Base_MspInit+0x70>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <HAL_TIM_Base_MspInit+0x70>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <HAL_TIM_Base_MspInit+0x70>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	201c      	movs	r0, #28
 8002c60:	f000 fb25 	bl	80032ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c64:	201c      	movs	r0, #28
 8002c66:	f000 fb3e 	bl	80032e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c6a:	e012      	b.n	8002c92 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <HAL_TIM_Base_MspInit+0x74>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10d      	bne.n	8002c92 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_TIM_Base_MspInit+0x70>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a07      	ldr	r2, [pc, #28]	; (8002c9c <HAL_TIM_Base_MspInit+0x70>)
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_TIM_Base_MspInit+0x70>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40000400 	.word	0x40000400

08002ca4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 030c 	add.w	r3, r7, #12
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <HAL_TIM_MspPostInit+0x68>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d11d      	bne.n	8002d02 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_TIM_MspPostInit+0x6c>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <HAL_TIM_MspPostInit+0x6c>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <HAL_TIM_MspPostInit+0x6c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ce2:	23c0      	movs	r3, #192	; 0xc0
 8002ce4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4805      	ldr	r0, [pc, #20]	; (8002d14 <HAL_TIM_MspPostInit+0x70>)
 8002cfe:	f000 ff0f 	bl	8003b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d02:	bf00      	nop
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40000400 	.word	0x40000400
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40020000 	.word	0x40020000

08002d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a4c      	ldr	r2, [pc, #304]	; (8002e68 <HAL_UART_MspInit+0x150>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	f040 8091 	bne.w	8002e5e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	4b4a      	ldr	r3, [pc, #296]	; (8002e6c <HAL_UART_MspInit+0x154>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	4a49      	ldr	r2, [pc, #292]	; (8002e6c <HAL_UART_MspInit+0x154>)
 8002d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4c:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_UART_MspInit+0x154>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	4b43      	ldr	r3, [pc, #268]	; (8002e6c <HAL_UART_MspInit+0x154>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	4a42      	ldr	r2, [pc, #264]	; (8002e6c <HAL_UART_MspInit+0x154>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6313      	str	r3, [r2, #48]	; 0x30
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <HAL_UART_MspInit+0x154>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d74:	230c      	movs	r3, #12
 8002d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d84:	2307      	movs	r3, #7
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4838      	ldr	r0, [pc, #224]	; (8002e70 <HAL_UART_MspInit+0x158>)
 8002d90:	f000 fec6 	bl	8003b20 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002d94:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <HAL_UART_MspInit+0x15c>)
 8002d96:	4a38      	ldr	r2, [pc, #224]	; (8002e78 <HAL_UART_MspInit+0x160>)
 8002d98:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002d9a:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <HAL_UART_MspInit+0x15c>)
 8002d9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002da0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002da2:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <HAL_UART_MspInit+0x15c>)
 8002da4:	2240      	movs	r2, #64	; 0x40
 8002da6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002da8:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <HAL_UART_MspInit+0x15c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dae:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <HAL_UART_MspInit+0x15c>)
 8002db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002db6:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <HAL_UART_MspInit+0x15c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <HAL_UART_MspInit+0x15c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002dc2:	4b2c      	ldr	r3, [pc, #176]	; (8002e74 <HAL_UART_MspInit+0x15c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <HAL_UART_MspInit+0x15c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dce:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <HAL_UART_MspInit+0x15c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002dd4:	4827      	ldr	r0, [pc, #156]	; (8002e74 <HAL_UART_MspInit+0x15c>)
 8002dd6:	f000 faa1 	bl	800331c <HAL_DMA_Init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002de0:	f7ff feae 	bl	8002b40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <HAL_UART_MspInit+0x15c>)
 8002de8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dea:	4a22      	ldr	r2, [pc, #136]	; (8002e74 <HAL_UART_MspInit+0x15c>)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002df0:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <HAL_UART_MspInit+0x164>)
 8002df2:	4a23      	ldr	r2, [pc, #140]	; (8002e80 <HAL_UART_MspInit+0x168>)
 8002df4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002df6:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <HAL_UART_MspInit+0x164>)
 8002df8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dfc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dfe:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <HAL_UART_MspInit+0x164>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_UART_MspInit+0x164>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <HAL_UART_MspInit+0x164>)
 8002e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e10:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_UART_MspInit+0x164>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e18:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <HAL_UART_MspInit+0x164>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_UART_MspInit+0x164>)
 8002e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e24:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_UART_MspInit+0x164>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_UART_MspInit+0x164>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e32:	4812      	ldr	r0, [pc, #72]	; (8002e7c <HAL_UART_MspInit+0x164>)
 8002e34:	f000 fa72 	bl	800331c <HAL_DMA_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002e3e:	f7ff fe7f 	bl	8002b40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <HAL_UART_MspInit+0x164>)
 8002e46:	639a      	str	r2, [r3, #56]	; 0x38
 8002e48:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <HAL_UART_MspInit+0x164>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	2026      	movs	r0, #38	; 0x26
 8002e54:	f000 fa2b 	bl	80032ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e58:	2026      	movs	r0, #38	; 0x26
 8002e5a:	f000 fa44 	bl	80032e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e5e:	bf00      	nop
 8002e60:	3728      	adds	r7, #40	; 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40004400 	.word	0x40004400
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40020000 	.word	0x40020000
 8002e74:	20000478 	.word	0x20000478
 8002e78:	400260a0 	.word	0x400260a0
 8002e7c:	200003d0 	.word	0x200003d0
 8002e80:	40026088 	.word	0x40026088

08002e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e88:	e7fe      	b.n	8002e88 <NMI_Handler+0x4>

08002e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8e:	e7fe      	b.n	8002e8e <HardFault_Handler+0x4>

08002e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e94:	e7fe      	b.n	8002e94 <MemManage_Handler+0x4>

08002e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e9a:	e7fe      	b.n	8002e9a <BusFault_Handler+0x4>

08002e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ea0:	e7fe      	b.n	8002ea0 <UsageFault_Handler+0x4>

08002ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ed0:	f000 f8f2 	bl	80030b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002edc:	4802      	ldr	r0, [pc, #8]	; (8002ee8 <DMA1_Stream5_IRQHandler+0x10>)
 8002ede:	f000 fbb5 	bl	800364c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200003d0 	.word	0x200003d0

08002eec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <DMA1_Stream6_IRQHandler+0x10>)
 8002ef2:	f000 fbab 	bl	800364c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000478 	.word	0x20000478

08002f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f04:	4802      	ldr	r0, [pc, #8]	; (8002f10 <TIM2_IRQHandler+0x10>)
 8002f06:	f001 ff67 	bl	8004dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000520 	.word	0x20000520

08002f14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f18:	4802      	ldr	r0, [pc, #8]	; (8002f24 <USART2_IRQHandler+0x10>)
 8002f1a:	f002 fe47 	bl	8005bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000568 	.word	0x20000568

08002f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f30:	4a14      	ldr	r2, [pc, #80]	; (8002f84 <_sbrk+0x5c>)
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <_sbrk+0x60>)
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f3c:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <_sbrk+0x64>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f44:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <_sbrk+0x64>)
 8002f46:	4a12      	ldr	r2, [pc, #72]	; (8002f90 <_sbrk+0x68>)
 8002f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <_sbrk+0x64>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d207      	bcs.n	8002f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f58:	f003 fc84 	bl	8006864 <__errno>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	220c      	movs	r2, #12
 8002f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295
 8002f66:	e009      	b.n	8002f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <_sbrk+0x64>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <_sbrk+0x64>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	4a05      	ldr	r2, [pc, #20]	; (8002f8c <_sbrk+0x64>)
 8002f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20020000 	.word	0x20020000
 8002f88:	00000400 	.word	0x00000400
 8002f8c:	200003c4 	.word	0x200003c4
 8002f90:	200005c0 	.word	0x200005c0

08002f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <SystemInit+0x28>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <SystemInit+0x28>)
 8002fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <SystemInit+0x28>)
 8002faa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fae:	609a      	str	r2, [r3, #8]
#endif
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ff8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002fc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002fc6:	e003      	b.n	8002fd0 <LoopCopyDataInit>

08002fc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002fca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002fcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002fce:	3104      	adds	r1, #4

08002fd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fd0:	480b      	ldr	r0, [pc, #44]	; (8003000 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fd8:	d3f6      	bcc.n	8002fc8 <CopyDataInit>
  ldr  r2, =_sbss
 8002fda:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fdc:	e002      	b.n	8002fe4 <LoopFillZerobss>

08002fde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fe0:	f842 3b04 	str.w	r3, [r2], #4

08002fe4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fe4:	4b09      	ldr	r3, [pc, #36]	; (800300c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fe6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fe8:	d3f9      	bcc.n	8002fde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fea:	f7ff ffd3 	bl	8002f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fee:	f003 fc3f 	bl	8006870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ff2:	f7fe f839 	bl	8001068 <main>
  bx  lr    
 8002ff6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ff8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ffc:	08006c0c 	.word	0x08006c0c
  ldr  r0, =_sdata
 8003000:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003004:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8003008:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800300c:	200005c0 	.word	0x200005c0

08003010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003010:	e7fe      	b.n	8003010 <ADC_IRQHandler>
	...

08003014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <HAL_Init+0x40>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a0d      	ldr	r2, [pc, #52]	; (8003054 <HAL_Init+0x40>)
 800301e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003022:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_Init+0x40>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0a      	ldr	r2, [pc, #40]	; (8003054 <HAL_Init+0x40>)
 800302a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800302e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003030:	4b08      	ldr	r3, [pc, #32]	; (8003054 <HAL_Init+0x40>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a07      	ldr	r2, [pc, #28]	; (8003054 <HAL_Init+0x40>)
 8003036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303c:	2003      	movs	r0, #3
 800303e:	f000 f92b 	bl	8003298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003042:	2000      	movs	r0, #0
 8003044:	f000 f808 	bl	8003058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003048:	f7ff fd80 	bl	8002b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40023c00 	.word	0x40023c00

08003058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003060:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_InitTick+0x54>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_InitTick+0x58>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	4619      	mov	r1, r3
 800306a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800306e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003072:	fbb2 f3f3 	udiv	r3, r2, r3
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f943 	bl	8003302 <HAL_SYSTICK_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e00e      	b.n	80030a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b0f      	cmp	r3, #15
 800308a:	d80a      	bhi.n	80030a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800308c:	2200      	movs	r2, #0
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	f000 f90b 	bl	80032ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003098:	4a06      	ldr	r2, [pc, #24]	; (80030b4 <HAL_InitTick+0x5c>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000018 	.word	0x20000018
 80030b0:	20000020 	.word	0x20000020
 80030b4:	2000001c 	.word	0x2000001c

080030b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_IncTick+0x20>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_IncTick+0x24>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4413      	add	r3, r2
 80030c8:	4a04      	ldr	r2, [pc, #16]	; (80030dc <HAL_IncTick+0x24>)
 80030ca:	6013      	str	r3, [r2, #0]
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000020 	.word	0x20000020
 80030dc:	200005ac 	.word	0x200005ac

080030e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return uwTick;
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <HAL_GetTick+0x14>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	200005ac 	.word	0x200005ac

080030f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <__NVIC_SetPriorityGrouping+0x44>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003114:	4013      	ands	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312a:	4a04      	ldr	r2, [pc, #16]	; (800313c <__NVIC_SetPriorityGrouping+0x44>)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	60d3      	str	r3, [r2, #12]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <__NVIC_GetPriorityGrouping+0x18>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	f003 0307 	and.w	r3, r3, #7
}
 800314e:	4618      	mov	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db0b      	blt.n	8003186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	4907      	ldr	r1, [pc, #28]	; (8003194 <__NVIC_EnableIRQ+0x38>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2001      	movs	r0, #1
 800317e:	fa00 f202 	lsl.w	r2, r0, r2
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000e100 	.word	0xe000e100

08003198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	db0a      	blt.n	80031c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	490c      	ldr	r1, [pc, #48]	; (80031e4 <__NVIC_SetPriority+0x4c>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	440b      	add	r3, r1
 80031bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c0:	e00a      	b.n	80031d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4908      	ldr	r1, [pc, #32]	; (80031e8 <__NVIC_SetPriority+0x50>)
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	3b04      	subs	r3, #4
 80031d0:	0112      	lsls	r2, r2, #4
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	440b      	add	r3, r1
 80031d6:	761a      	strb	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000e100 	.word	0xe000e100
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f1c3 0307 	rsb	r3, r3, #7
 8003206:	2b04      	cmp	r3, #4
 8003208:	bf28      	it	cs
 800320a:	2304      	movcs	r3, #4
 800320c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3304      	adds	r3, #4
 8003212:	2b06      	cmp	r3, #6
 8003214:	d902      	bls.n	800321c <NVIC_EncodePriority+0x30>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3b03      	subs	r3, #3
 800321a:	e000      	b.n	800321e <NVIC_EncodePriority+0x32>
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	401a      	ands	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003234:	f04f 31ff 	mov.w	r1, #4294967295
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43d9      	mvns	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	4313      	orrs	r3, r2
         );
}
 8003246:	4618      	mov	r0, r3
 8003248:	3724      	adds	r7, #36	; 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3b01      	subs	r3, #1
 8003260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003264:	d301      	bcc.n	800326a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003266:	2301      	movs	r3, #1
 8003268:	e00f      	b.n	800328a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <SysTick_Config+0x40>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003272:	210f      	movs	r1, #15
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	f7ff ff8e 	bl	8003198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <SysTick_Config+0x40>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <SysTick_Config+0x40>)
 8003284:	2207      	movs	r2, #7
 8003286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	e000e010 	.word	0xe000e010

08003298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ff29 	bl	80030f8 <__NVIC_SetPriorityGrouping>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c0:	f7ff ff3e 	bl	8003140 <__NVIC_GetPriorityGrouping>
 80032c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	6978      	ldr	r0, [r7, #20]
 80032cc:	f7ff ff8e 	bl	80031ec <NVIC_EncodePriority>
 80032d0:	4602      	mov	r2, r0
 80032d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d6:	4611      	mov	r1, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff5d 	bl	8003198 <__NVIC_SetPriority>
}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff31 	bl	800315c <__NVIC_EnableIRQ>
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ffa2 	bl	8003254 <SysTick_Config>
 8003310:	4603      	mov	r3, r0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003328:	f7ff feda 	bl	80030e0 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e099      	b.n	800346c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003358:	e00f      	b.n	800337a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800335a:	f7ff fec1 	bl	80030e0 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b05      	cmp	r3, #5
 8003366:	d908      	bls.n	800337a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2203      	movs	r2, #3
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e078      	b.n	800346c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e8      	bne.n	800335a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4b38      	ldr	r3, [pc, #224]	; (8003474 <HAL_DMA_Init+0x158>)
 8003394:	4013      	ands	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d107      	bne.n	80033e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	4313      	orrs	r3, r2
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0307 	bic.w	r3, r3, #7
 80033fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2b04      	cmp	r3, #4
 800340c:	d117      	bne.n	800343e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00e      	beq.n	800343e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fb01 	bl	8003a28 <DMA_CheckFifoParam>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2240      	movs	r2, #64	; 0x40
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800343a:	2301      	movs	r3, #1
 800343c:	e016      	b.n	800346c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fab8 	bl	80039bc <DMA_CalcBaseAndBitshift>
 800344c:	4603      	mov	r3, r0
 800344e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	223f      	movs	r2, #63	; 0x3f
 8003456:	409a      	lsls	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	f010803f 	.word	0xf010803f

08003478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_DMA_Start_IT+0x26>
 800349a:	2302      	movs	r3, #2
 800349c:	e040      	b.n	8003520 <HAL_DMA_Start_IT+0xa8>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d12f      	bne.n	8003512 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fa4a 	bl	8003960 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d0:	223f      	movs	r2, #63	; 0x3f
 80034d2:	409a      	lsls	r2, r3
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0216 	orr.w	r2, r2, #22
 80034e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0208 	orr.w	r2, r2, #8
 80034fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e005      	b.n	800351e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800351a:	2302      	movs	r3, #2
 800351c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800351e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003536:	f7ff fdd3 	bl	80030e0 <HAL_GetTick>
 800353a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d008      	beq.n	800355a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2280      	movs	r2, #128	; 0x80
 800354c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e052      	b.n	8003600 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0216 	bic.w	r2, r2, #22
 8003568:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003578:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d103      	bne.n	800358a <HAL_DMA_Abort+0x62>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0208 	bic.w	r2, r2, #8
 8003598:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035aa:	e013      	b.n	80035d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ac:	f7ff fd98 	bl	80030e0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b05      	cmp	r3, #5
 80035b8:	d90c      	bls.n	80035d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2203      	movs	r2, #3
 80035cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e015      	b.n	8003600 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e4      	bne.n	80035ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	223f      	movs	r2, #63	; 0x3f
 80035e8:	409a      	lsls	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d004      	beq.n	8003626 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2280      	movs	r2, #128	; 0x80
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e00c      	b.n	8003640 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2205      	movs	r2, #5
 800362a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003658:	4b92      	ldr	r3, [pc, #584]	; (80038a4 <HAL_DMA_IRQHandler+0x258>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a92      	ldr	r2, [pc, #584]	; (80038a8 <HAL_DMA_IRQHandler+0x25c>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	0a9b      	lsrs	r3, r3, #10
 8003664:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	2208      	movs	r2, #8
 8003678:	409a      	lsls	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01a      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0204 	bic.w	r2, r2, #4
 800369e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	2208      	movs	r2, #8
 80036a6:	409a      	lsls	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	2201      	movs	r2, #1
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d012      	beq.n	80036ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	2201      	movs	r2, #1
 80036dc:	409a      	lsls	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e6:	f043 0202 	orr.w	r2, r3, #2
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	2204      	movs	r2, #4
 80036f4:	409a      	lsls	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d012      	beq.n	8003724 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00b      	beq.n	8003724 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003710:	2204      	movs	r2, #4
 8003712:	409a      	lsls	r2, r3
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371c:	f043 0204 	orr.w	r2, r3, #4
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	2210      	movs	r2, #16
 800372a:	409a      	lsls	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d043      	beq.n	80037bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d03c      	beq.n	80037bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	2210      	movs	r2, #16
 8003748:	409a      	lsls	r2, r3
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d018      	beq.n	800378e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d108      	bne.n	800377c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d024      	beq.n	80037bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	4798      	blx	r3
 800377a:	e01f      	b.n	80037bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01b      	beq.n	80037bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	4798      	blx	r3
 800378c:	e016      	b.n	80037bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d107      	bne.n	80037ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0208 	bic.w	r2, r2, #8
 80037aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	2220      	movs	r2, #32
 80037c2:	409a      	lsls	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 808e 	beq.w	80038ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8086 	beq.w	80038ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	2220      	movs	r2, #32
 80037e4:	409a      	lsls	r2, r3
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	d136      	bne.n	8003864 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0216 	bic.w	r2, r2, #22
 8003804:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003814:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d103      	bne.n	8003826 <HAL_DMA_IRQHandler+0x1da>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0208 	bic.w	r2, r2, #8
 8003834:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383a:	223f      	movs	r2, #63	; 0x3f
 800383c:	409a      	lsls	r2, r3
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003856:	2b00      	cmp	r3, #0
 8003858:	d07d      	beq.n	8003956 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
        }
        return;
 8003862:	e078      	b.n	8003956 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d01c      	beq.n	80038ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d108      	bne.n	8003892 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	2b00      	cmp	r3, #0
 8003886:	d030      	beq.n	80038ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
 8003890:	e02b      	b.n	80038ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d027      	beq.n	80038ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
 80038a2:	e022      	b.n	80038ea <HAL_DMA_IRQHandler+0x29e>
 80038a4:	20000018 	.word	0x20000018
 80038a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0210 	bic.w	r2, r2, #16
 80038c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d032      	beq.n	8003958 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d022      	beq.n	8003944 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2205      	movs	r2, #5
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	3301      	adds	r3, #1
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	429a      	cmp	r2, r3
 8003920:	d307      	bcc.n	8003932 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f2      	bne.n	8003916 <HAL_DMA_IRQHandler+0x2ca>
 8003930:	e000      	b.n	8003934 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003932:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
 8003954:	e000      	b.n	8003958 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003956:	bf00      	nop
    }
  }
}
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop

08003960 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800397c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d108      	bne.n	80039a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800399e:	e007      	b.n	80039b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	60da      	str	r2, [r3, #12]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	3b10      	subs	r3, #16
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <DMA_CalcBaseAndBitshift+0x64>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	091b      	lsrs	r3, r3, #4
 80039d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039d6:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <DMA_CalcBaseAndBitshift+0x68>)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d909      	bls.n	80039fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	1d1a      	adds	r2, r3, #4
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	659a      	str	r2, [r3, #88]	; 0x58
 80039fc:	e007      	b.n	8003a0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a06:	f023 0303 	bic.w	r3, r3, #3
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	aaaaaaab 	.word	0xaaaaaaab
 8003a24:	08006bf4 	.word	0x08006bf4

08003a28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d11f      	bne.n	8003a82 <DMA_CheckFifoParam+0x5a>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d856      	bhi.n	8003af6 <DMA_CheckFifoParam+0xce>
 8003a48:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <DMA_CheckFifoParam+0x28>)
 8003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4e:	bf00      	nop
 8003a50:	08003a61 	.word	0x08003a61
 8003a54:	08003a73 	.word	0x08003a73
 8003a58:	08003a61 	.word	0x08003a61
 8003a5c:	08003af7 	.word	0x08003af7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d046      	beq.n	8003afa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a70:	e043      	b.n	8003afa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a7a:	d140      	bne.n	8003afe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a80:	e03d      	b.n	8003afe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8a:	d121      	bne.n	8003ad0 <DMA_CheckFifoParam+0xa8>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d837      	bhi.n	8003b02 <DMA_CheckFifoParam+0xda>
 8003a92:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <DMA_CheckFifoParam+0x70>)
 8003a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a98:	08003aa9 	.word	0x08003aa9
 8003a9c:	08003aaf 	.word	0x08003aaf
 8003aa0:	08003aa9 	.word	0x08003aa9
 8003aa4:	08003ac1 	.word	0x08003ac1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8003aac:	e030      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d025      	beq.n	8003b06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003abe:	e022      	b.n	8003b06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ac8:	d11f      	bne.n	8003b0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ace:	e01c      	b.n	8003b0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d903      	bls.n	8003ade <DMA_CheckFifoParam+0xb6>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d003      	beq.n	8003ae4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003adc:	e018      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae2:	e015      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00e      	beq.n	8003b0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
      break;
 8003af4:	e00b      	b.n	8003b0e <DMA_CheckFifoParam+0xe6>
      break;
 8003af6:	bf00      	nop
 8003af8:	e00a      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
      break;
 8003afa:	bf00      	nop
 8003afc:	e008      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
      break;
 8003afe:	bf00      	nop
 8003b00:	e006      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
      break;
 8003b02:	bf00      	nop
 8003b04:	e004      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
      break;
 8003b06:	bf00      	nop
 8003b08:	e002      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b0a:	bf00      	nop
 8003b0c:	e000      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
      break;
 8003b0e:	bf00      	nop
    }
  } 
  
  return status; 
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop

08003b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	e159      	b.n	8003df0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	f040 8148 	bne.w	8003dea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d005      	beq.n	8003b72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d130      	bne.n	8003bd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ba8:	2201      	movs	r2, #1
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	091b      	lsrs	r3, r3, #4
 8003bbe:	f003 0201 	and.w	r2, r3, #1
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d017      	beq.n	8003c10 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	2203      	movs	r2, #3
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d123      	bne.n	8003c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	08da      	lsrs	r2, r3, #3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3208      	adds	r2, #8
 8003c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	220f      	movs	r2, #15
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	08da      	lsrs	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3208      	adds	r2, #8
 8003c5e:	69b9      	ldr	r1, [r7, #24]
 8003c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	2203      	movs	r2, #3
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0203 	and.w	r2, r3, #3
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80a2 	beq.w	8003dea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	4b57      	ldr	r3, [pc, #348]	; (8003e08 <HAL_GPIO_Init+0x2e8>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	4a56      	ldr	r2, [pc, #344]	; (8003e08 <HAL_GPIO_Init+0x2e8>)
 8003cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb6:	4b54      	ldr	r3, [pc, #336]	; (8003e08 <HAL_GPIO_Init+0x2e8>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cc2:	4a52      	ldr	r2, [pc, #328]	; (8003e0c <HAL_GPIO_Init+0x2ec>)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	089b      	lsrs	r3, r3, #2
 8003cc8:	3302      	adds	r3, #2
 8003cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	220f      	movs	r2, #15
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a49      	ldr	r2, [pc, #292]	; (8003e10 <HAL_GPIO_Init+0x2f0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d019      	beq.n	8003d22 <HAL_GPIO_Init+0x202>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a48      	ldr	r2, [pc, #288]	; (8003e14 <HAL_GPIO_Init+0x2f4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_GPIO_Init+0x1fe>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a47      	ldr	r2, [pc, #284]	; (8003e18 <HAL_GPIO_Init+0x2f8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00d      	beq.n	8003d1a <HAL_GPIO_Init+0x1fa>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a46      	ldr	r2, [pc, #280]	; (8003e1c <HAL_GPIO_Init+0x2fc>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <HAL_GPIO_Init+0x1f6>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a45      	ldr	r2, [pc, #276]	; (8003e20 <HAL_GPIO_Init+0x300>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d101      	bne.n	8003d12 <HAL_GPIO_Init+0x1f2>
 8003d0e:	2304      	movs	r3, #4
 8003d10:	e008      	b.n	8003d24 <HAL_GPIO_Init+0x204>
 8003d12:	2307      	movs	r3, #7
 8003d14:	e006      	b.n	8003d24 <HAL_GPIO_Init+0x204>
 8003d16:	2303      	movs	r3, #3
 8003d18:	e004      	b.n	8003d24 <HAL_GPIO_Init+0x204>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e002      	b.n	8003d24 <HAL_GPIO_Init+0x204>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_GPIO_Init+0x204>
 8003d22:	2300      	movs	r3, #0
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	f002 0203 	and.w	r2, r2, #3
 8003d2a:	0092      	lsls	r2, r2, #2
 8003d2c:	4093      	lsls	r3, r2
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d34:	4935      	ldr	r1, [pc, #212]	; (8003e0c <HAL_GPIO_Init+0x2ec>)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d42:	4b38      	ldr	r3, [pc, #224]	; (8003e24 <HAL_GPIO_Init+0x304>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d66:	4a2f      	ldr	r2, [pc, #188]	; (8003e24 <HAL_GPIO_Init+0x304>)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d6c:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <HAL_GPIO_Init+0x304>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d90:	4a24      	ldr	r2, [pc, #144]	; (8003e24 <HAL_GPIO_Init+0x304>)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d96:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <HAL_GPIO_Init+0x304>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dba:	4a1a      	ldr	r2, [pc, #104]	; (8003e24 <HAL_GPIO_Init+0x304>)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dc0:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <HAL_GPIO_Init+0x304>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003de4:	4a0f      	ldr	r2, [pc, #60]	; (8003e24 <HAL_GPIO_Init+0x304>)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3301      	adds	r3, #1
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2b0f      	cmp	r3, #15
 8003df4:	f67f aea2 	bls.w	8003b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	3724      	adds	r7, #36	; 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	40013800 	.word	0x40013800
 8003e10:	40020000 	.word	0x40020000
 8003e14:	40020400 	.word	0x40020400
 8003e18:	40020800 	.word	0x40020800
 8003e1c:	40020c00 	.word	0x40020c00
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40013c00 	.word	0x40013c00

08003e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	807b      	strh	r3, [r7, #2]
 8003e34:	4613      	mov	r3, r2
 8003e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e38:	787b      	ldrb	r3, [r7, #1]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e3e:	887a      	ldrh	r2, [r7, #2]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e44:	e003      	b.n	8003e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e46:	887b      	ldrh	r3, [r7, #2]
 8003e48:	041a      	lsls	r2, r3, #16
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	619a      	str	r2, [r3, #24]
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e264      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d075      	beq.n	8003f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e7a:	4ba3      	ldr	r3, [pc, #652]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d00c      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e86:	4ba0      	ldr	r3, [pc, #640]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d112      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e92:	4b9d      	ldr	r3, [pc, #628]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea0:	4b99      	ldr	r3, [pc, #612]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d05b      	beq.n	8003f64 <HAL_RCC_OscConfig+0x108>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d157      	bne.n	8003f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e23f      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec0:	d106      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x74>
 8003ec2:	4b91      	ldr	r3, [pc, #580]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a90      	ldr	r2, [pc, #576]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e01d      	b.n	8003f0c <HAL_RCC_OscConfig+0xb0>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x98>
 8003eda:	4b8b      	ldr	r3, [pc, #556]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a8a      	ldr	r2, [pc, #552]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b88      	ldr	r3, [pc, #544]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a87      	ldr	r2, [pc, #540]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0xb0>
 8003ef4:	4b84      	ldr	r3, [pc, #528]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a83      	ldr	r2, [pc, #524]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b81      	ldr	r3, [pc, #516]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a80      	ldr	r2, [pc, #512]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f14:	f7ff f8e4 	bl	80030e0 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f1c:	f7ff f8e0 	bl	80030e0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	; 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e204      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b76      	ldr	r3, [pc, #472]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0xc0>
 8003f3a:	e014      	b.n	8003f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7ff f8d0 	bl	80030e0 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f44:	f7ff f8cc 	bl	80030e0 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e1f0      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f56:	4b6c      	ldr	r3, [pc, #432]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0xe8>
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d063      	beq.n	800403a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f72:	4b65      	ldr	r3, [pc, #404]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b62      	ldr	r3, [pc, #392]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d11c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8a:	4b5f      	ldr	r3, [pc, #380]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d116      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f96:	4b5c      	ldr	r3, [pc, #368]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_RCC_OscConfig+0x152>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e1c4      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fae:	4b56      	ldr	r3, [pc, #344]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4952      	ldr	r1, [pc, #328]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	e03a      	b.n	800403a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fcc:	4b4f      	ldr	r3, [pc, #316]	; (800410c <HAL_RCC_OscConfig+0x2b0>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7ff f885 	bl	80030e0 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fda:	f7ff f881 	bl	80030e0 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e1a5      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fec:	4b46      	ldr	r3, [pc, #280]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff8:	4b43      	ldr	r3, [pc, #268]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4940      	ldr	r1, [pc, #256]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
 800400c:	e015      	b.n	800403a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400e:	4b3f      	ldr	r3, [pc, #252]	; (800410c <HAL_RCC_OscConfig+0x2b0>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7ff f864 	bl	80030e0 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800401c:	f7ff f860 	bl	80030e0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e184      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d030      	beq.n	80040a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404e:	4b30      	ldr	r3, [pc, #192]	; (8004110 <HAL_RCC_OscConfig+0x2b4>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7ff f844 	bl	80030e0 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800405c:	f7ff f840 	bl	80030e0 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e164      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406e:	4b26      	ldr	r3, [pc, #152]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x200>
 800407a:	e015      	b.n	80040a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800407c:	4b24      	ldr	r3, [pc, #144]	; (8004110 <HAL_RCC_OscConfig+0x2b4>)
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004082:	f7ff f82d 	bl	80030e0 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800408a:	f7ff f829 	bl	80030e0 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e14d      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 800409e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f0      	bne.n	800408a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80a0 	beq.w	80041f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	4a0e      	ldr	r2, [pc, #56]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d4:	6413      	str	r3, [r2, #64]	; 0x40
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e2:	2301      	movs	r3, #1
 80040e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_OscConfig+0x2b8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d121      	bne.n	8004136 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <HAL_RCC_OscConfig+0x2b8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a07      	ldr	r2, [pc, #28]	; (8004114 <HAL_RCC_OscConfig+0x2b8>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fe:	f7fe ffef 	bl	80030e0 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	e011      	b.n	800412a <HAL_RCC_OscConfig+0x2ce>
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	42470000 	.word	0x42470000
 8004110:	42470e80 	.word	0x42470e80
 8004114:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004118:	f7fe ffe2 	bl	80030e0 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e106      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412a:	4b85      	ldr	r3, [pc, #532]	; (8004340 <HAL_RCC_OscConfig+0x4e4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d106      	bne.n	800414c <HAL_RCC_OscConfig+0x2f0>
 800413e:	4b81      	ldr	r3, [pc, #516]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	4a80      	ldr	r2, [pc, #512]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	6713      	str	r3, [r2, #112]	; 0x70
 800414a:	e01c      	b.n	8004186 <HAL_RCC_OscConfig+0x32a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b05      	cmp	r3, #5
 8004152:	d10c      	bne.n	800416e <HAL_RCC_OscConfig+0x312>
 8004154:	4b7b      	ldr	r3, [pc, #492]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	4a7a      	ldr	r2, [pc, #488]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 800415a:	f043 0304 	orr.w	r3, r3, #4
 800415e:	6713      	str	r3, [r2, #112]	; 0x70
 8004160:	4b78      	ldr	r3, [pc, #480]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004164:	4a77      	ldr	r2, [pc, #476]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	6713      	str	r3, [r2, #112]	; 0x70
 800416c:	e00b      	b.n	8004186 <HAL_RCC_OscConfig+0x32a>
 800416e:	4b75      	ldr	r3, [pc, #468]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	4a74      	ldr	r2, [pc, #464]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	6713      	str	r3, [r2, #112]	; 0x70
 800417a:	4b72      	ldr	r3, [pc, #456]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	4a71      	ldr	r2, [pc, #452]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 8004180:	f023 0304 	bic.w	r3, r3, #4
 8004184:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d015      	beq.n	80041ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7fe ffa7 	bl	80030e0 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004194:	e00a      	b.n	80041ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004196:	f7fe ffa3 	bl	80030e0 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e0c5      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ac:	4b65      	ldr	r3, [pc, #404]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ee      	beq.n	8004196 <HAL_RCC_OscConfig+0x33a>
 80041b8:	e014      	b.n	80041e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ba:	f7fe ff91 	bl	80030e0 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fe ff8d 	bl	80030e0 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e0af      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d8:	4b5a      	ldr	r3, [pc, #360]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1ee      	bne.n	80041c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d105      	bne.n	80041f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ea:	4b56      	ldr	r3, [pc, #344]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	4a55      	ldr	r2, [pc, #340]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 80041f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 809b 	beq.w	8004336 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004200:	4b50      	ldr	r3, [pc, #320]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 030c 	and.w	r3, r3, #12
 8004208:	2b08      	cmp	r3, #8
 800420a:	d05c      	beq.n	80042c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d141      	bne.n	8004298 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004214:	4b4c      	ldr	r3, [pc, #304]	; (8004348 <HAL_RCC_OscConfig+0x4ec>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421a:	f7fe ff61 	bl	80030e0 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004222:	f7fe ff5d 	bl	80030e0 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e081      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004234:	4b43      	ldr	r3, [pc, #268]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f0      	bne.n	8004222 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	019b      	lsls	r3, r3, #6
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	3b01      	subs	r3, #1
 800425a:	041b      	lsls	r3, r3, #16
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	061b      	lsls	r3, r3, #24
 8004264:	4937      	ldr	r1, [pc, #220]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800426a:	4b37      	ldr	r3, [pc, #220]	; (8004348 <HAL_RCC_OscConfig+0x4ec>)
 800426c:	2201      	movs	r2, #1
 800426e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7fe ff36 	bl	80030e0 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004278:	f7fe ff32 	bl	80030e0 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e056      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428a:	4b2e      	ldr	r3, [pc, #184]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x41c>
 8004296:	e04e      	b.n	8004336 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004298:	4b2b      	ldr	r3, [pc, #172]	; (8004348 <HAL_RCC_OscConfig+0x4ec>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429e:	f7fe ff1f 	bl	80030e0 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a6:	f7fe ff1b 	bl	80030e0 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e03f      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b8:	4b22      	ldr	r3, [pc, #136]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f0      	bne.n	80042a6 <HAL_RCC_OscConfig+0x44a>
 80042c4:	e037      	b.n	8004336 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e032      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042d2:	4b1c      	ldr	r3, [pc, #112]	; (8004344 <HAL_RCC_OscConfig+0x4e8>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d028      	beq.n	8004332 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d121      	bne.n	8004332 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d11a      	bne.n	8004332 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004302:	4013      	ands	r3, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004308:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800430a:	4293      	cmp	r3, r2
 800430c:	d111      	bne.n	8004332 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	3b01      	subs	r3, #1
 800431c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d107      	bne.n	8004332 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d001      	beq.n	8004336 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40007000 	.word	0x40007000
 8004344:	40023800 	.word	0x40023800
 8004348:	42470060 	.word	0x42470060

0800434c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e0cc      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004360:	4b68      	ldr	r3, [pc, #416]	; (8004504 <HAL_RCC_ClockConfig+0x1b8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d90c      	bls.n	8004388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b65      	ldr	r3, [pc, #404]	; (8004504 <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004376:	4b63      	ldr	r3, [pc, #396]	; (8004504 <HAL_RCC_ClockConfig+0x1b8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d001      	beq.n	8004388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0b8      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d020      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043a0:	4b59      	ldr	r3, [pc, #356]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4a58      	ldr	r2, [pc, #352]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b8:	4b53      	ldr	r3, [pc, #332]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4a52      	ldr	r2, [pc, #328]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c4:	4b50      	ldr	r3, [pc, #320]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	494d      	ldr	r1, [pc, #308]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d044      	beq.n	800446c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d107      	bne.n	80043fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	4b47      	ldr	r3, [pc, #284]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d119      	bne.n	800442a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e07f      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d003      	beq.n	800440a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004406:	2b03      	cmp	r3, #3
 8004408:	d107      	bne.n	800441a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440a:	4b3f      	ldr	r3, [pc, #252]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e06f      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441a:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e067      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800442a:	4b37      	ldr	r3, [pc, #220]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f023 0203 	bic.w	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	4934      	ldr	r1, [pc, #208]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	4313      	orrs	r3, r2
 800443a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800443c:	f7fe fe50 	bl	80030e0 <HAL_GetTick>
 8004440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004442:	e00a      	b.n	800445a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004444:	f7fe fe4c 	bl	80030e0 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004452:	4293      	cmp	r3, r2
 8004454:	d901      	bls.n	800445a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e04f      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	4b2b      	ldr	r3, [pc, #172]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 020c 	and.w	r2, r3, #12
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	429a      	cmp	r2, r3
 800446a:	d1eb      	bne.n	8004444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800446c:	4b25      	ldr	r3, [pc, #148]	; (8004504 <HAL_RCC_ClockConfig+0x1b8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d20c      	bcs.n	8004494 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b22      	ldr	r3, [pc, #136]	; (8004504 <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004482:	4b20      	ldr	r3, [pc, #128]	; (8004504 <HAL_RCC_ClockConfig+0x1b8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e032      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044a0:	4b19      	ldr	r3, [pc, #100]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4916      	ldr	r1, [pc, #88]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d009      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	490e      	ldr	r1, [pc, #56]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044d2:	f000 f821 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80044d6:	4602      	mov	r2, r0
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	490a      	ldr	r1, [pc, #40]	; (800450c <HAL_RCC_ClockConfig+0x1c0>)
 80044e4:	5ccb      	ldrb	r3, [r1, r3]
 80044e6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <HAL_RCC_ClockConfig+0x1c4>)
 80044ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <HAL_RCC_ClockConfig+0x1c8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fdb0 	bl	8003058 <HAL_InitTick>

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40023c00 	.word	0x40023c00
 8004508:	40023800 	.word	0x40023800
 800450c:	08006bdc 	.word	0x08006bdc
 8004510:	20000018 	.word	0x20000018
 8004514:	2000001c 	.word	0x2000001c

08004518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	2300      	movs	r3, #0
 800452a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004530:	4b67      	ldr	r3, [pc, #412]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b08      	cmp	r3, #8
 800453a:	d00d      	beq.n	8004558 <HAL_RCC_GetSysClockFreq+0x40>
 800453c:	2b08      	cmp	r3, #8
 800453e:	f200 80bd 	bhi.w	80046bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x34>
 8004546:	2b04      	cmp	r3, #4
 8004548:	d003      	beq.n	8004552 <HAL_RCC_GetSysClockFreq+0x3a>
 800454a:	e0b7      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800454c:	4b61      	ldr	r3, [pc, #388]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800454e:	60bb      	str	r3, [r7, #8]
       break;
 8004550:	e0b7      	b.n	80046c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004552:	4b61      	ldr	r3, [pc, #388]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004554:	60bb      	str	r3, [r7, #8]
      break;
 8004556:	e0b4      	b.n	80046c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004558:	4b5d      	ldr	r3, [pc, #372]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004560:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004562:	4b5b      	ldr	r3, [pc, #364]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d04d      	beq.n	800460a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800456e:	4b58      	ldr	r3, [pc, #352]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	099b      	lsrs	r3, r3, #6
 8004574:	461a      	mov	r2, r3
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	ea02 0800 	and.w	r8, r2, r0
 8004586:	ea03 0901 	and.w	r9, r3, r1
 800458a:	4640      	mov	r0, r8
 800458c:	4649      	mov	r1, r9
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	014b      	lsls	r3, r1, #5
 8004598:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800459c:	0142      	lsls	r2, r0, #5
 800459e:	4610      	mov	r0, r2
 80045a0:	4619      	mov	r1, r3
 80045a2:	ebb0 0008 	subs.w	r0, r0, r8
 80045a6:	eb61 0109 	sbc.w	r1, r1, r9
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	018b      	lsls	r3, r1, #6
 80045b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045b8:	0182      	lsls	r2, r0, #6
 80045ba:	1a12      	subs	r2, r2, r0
 80045bc:	eb63 0301 	sbc.w	r3, r3, r1
 80045c0:	f04f 0000 	mov.w	r0, #0
 80045c4:	f04f 0100 	mov.w	r1, #0
 80045c8:	00d9      	lsls	r1, r3, #3
 80045ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045ce:	00d0      	lsls	r0, r2, #3
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	eb12 0208 	adds.w	r2, r2, r8
 80045d8:	eb43 0309 	adc.w	r3, r3, r9
 80045dc:	f04f 0000 	mov.w	r0, #0
 80045e0:	f04f 0100 	mov.w	r1, #0
 80045e4:	0259      	lsls	r1, r3, #9
 80045e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80045ea:	0250      	lsls	r0, r2, #9
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4610      	mov	r0, r2
 80045f2:	4619      	mov	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	f7fc fbb6 	bl	8000d6c <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4613      	mov	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e04a      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800460a:	4b31      	ldr	r3, [pc, #196]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	099b      	lsrs	r3, r3, #6
 8004610:	461a      	mov	r2, r3
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	f240 10ff 	movw	r0, #511	; 0x1ff
 800461a:	f04f 0100 	mov.w	r1, #0
 800461e:	ea02 0400 	and.w	r4, r2, r0
 8004622:	ea03 0501 	and.w	r5, r3, r1
 8004626:	4620      	mov	r0, r4
 8004628:	4629      	mov	r1, r5
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	014b      	lsls	r3, r1, #5
 8004634:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004638:	0142      	lsls	r2, r0, #5
 800463a:	4610      	mov	r0, r2
 800463c:	4619      	mov	r1, r3
 800463e:	1b00      	subs	r0, r0, r4
 8004640:	eb61 0105 	sbc.w	r1, r1, r5
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	018b      	lsls	r3, r1, #6
 800464e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004652:	0182      	lsls	r2, r0, #6
 8004654:	1a12      	subs	r2, r2, r0
 8004656:	eb63 0301 	sbc.w	r3, r3, r1
 800465a:	f04f 0000 	mov.w	r0, #0
 800465e:	f04f 0100 	mov.w	r1, #0
 8004662:	00d9      	lsls	r1, r3, #3
 8004664:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004668:	00d0      	lsls	r0, r2, #3
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	1912      	adds	r2, r2, r4
 8004670:	eb45 0303 	adc.w	r3, r5, r3
 8004674:	f04f 0000 	mov.w	r0, #0
 8004678:	f04f 0100 	mov.w	r1, #0
 800467c:	0299      	lsls	r1, r3, #10
 800467e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004682:	0290      	lsls	r0, r2, #10
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4610      	mov	r0, r2
 800468a:	4619      	mov	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	461a      	mov	r2, r3
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	f7fc fb6a 	bl	8000d6c <__aeabi_uldivmod>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4613      	mov	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	0c1b      	lsrs	r3, r3, #16
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	3301      	adds	r3, #1
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b8:	60bb      	str	r3, [r7, #8]
      break;
 80046ba:	e002      	b.n	80046c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046be:	60bb      	str	r3, [r7, #8]
      break;
 80046c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046c2:	68bb      	ldr	r3, [r7, #8]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800
 80046d4:	00f42400 	.word	0x00f42400
 80046d8:	007a1200 	.word	0x007a1200

080046dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e0:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046e2:	681b      	ldr	r3, [r3, #0]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000018 	.word	0x20000018

080046f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046f8:	f7ff fff0 	bl	80046dc <HAL_RCC_GetHCLKFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	0a9b      	lsrs	r3, r3, #10
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	4903      	ldr	r1, [pc, #12]	; (8004718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40023800 	.word	0x40023800
 8004718:	08006bec 	.word	0x08006bec

0800471c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004720:	f7ff ffdc 	bl	80046dc <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	0b5b      	lsrs	r3, r3, #13
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4903      	ldr	r1, [pc, #12]	; (8004740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40023800 	.word	0x40023800
 8004740:	08006bec 	.word	0x08006bec

08004744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e041      	b.n	80047da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fe fa5e 	bl	8002c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f000 fdda 	bl	800533c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d001      	beq.n	80047fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e03c      	b.n	8004876 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1e      	ldr	r2, [pc, #120]	; (8004884 <HAL_TIM_Base_Start+0xa0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d018      	beq.n	8004840 <HAL_TIM_Base_Start+0x5c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004816:	d013      	beq.n	8004840 <HAL_TIM_Base_Start+0x5c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1a      	ldr	r2, [pc, #104]	; (8004888 <HAL_TIM_Base_Start+0xa4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00e      	beq.n	8004840 <HAL_TIM_Base_Start+0x5c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a19      	ldr	r2, [pc, #100]	; (800488c <HAL_TIM_Base_Start+0xa8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d009      	beq.n	8004840 <HAL_TIM_Base_Start+0x5c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a17      	ldr	r2, [pc, #92]	; (8004890 <HAL_TIM_Base_Start+0xac>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d004      	beq.n	8004840 <HAL_TIM_Base_Start+0x5c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a16      	ldr	r2, [pc, #88]	; (8004894 <HAL_TIM_Base_Start+0xb0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d111      	bne.n	8004864 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b06      	cmp	r3, #6
 8004850:	d010      	beq.n	8004874 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004862:	e007      	b.n	8004874 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40010000 	.word	0x40010000
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800
 8004890:	40000c00 	.word	0x40000c00
 8004894:	40014000 	.word	0x40014000

08004898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d001      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e044      	b.n	800493a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <HAL_TIM_Base_Start_IT+0xb0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d018      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x6c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048da:	d013      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x6c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1a      	ldr	r2, [pc, #104]	; (800494c <HAL_TIM_Base_Start_IT+0xb4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00e      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x6c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a19      	ldr	r2, [pc, #100]	; (8004950 <HAL_TIM_Base_Start_IT+0xb8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x6c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a17      	ldr	r2, [pc, #92]	; (8004954 <HAL_TIM_Base_Start_IT+0xbc>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x6c>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a16      	ldr	r2, [pc, #88]	; (8004958 <HAL_TIM_Base_Start_IT+0xc0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d111      	bne.n	8004928 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b06      	cmp	r3, #6
 8004914:	d010      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0201 	orr.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004926:	e007      	b.n	8004938 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40010000 	.word	0x40010000
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40014000 	.word	0x40014000

0800495c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e041      	b.n	80049f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f839 	bl	80049fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f000 fcce 	bl	800533c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
	...

08004a10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d109      	bne.n	8004a34 <HAL_TIM_PWM_Start+0x24>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e022      	b.n	8004a7a <HAL_TIM_PWM_Start+0x6a>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d109      	bne.n	8004a4e <HAL_TIM_PWM_Start+0x3e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	bf14      	ite	ne
 8004a46:	2301      	movne	r3, #1
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	e015      	b.n	8004a7a <HAL_TIM_PWM_Start+0x6a>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d109      	bne.n	8004a68 <HAL_TIM_PWM_Start+0x58>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	e008      	b.n	8004a7a <HAL_TIM_PWM_Start+0x6a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	bf14      	ite	ne
 8004a74:	2301      	movne	r3, #1
 8004a76:	2300      	moveq	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e068      	b.n	8004b54 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Start+0x82>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a90:	e013      	b.n	8004aba <HAL_TIM_PWM_Start+0xaa>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0x92>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa0:	e00b      	b.n	8004aba <HAL_TIM_PWM_Start+0xaa>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0xa2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab0:	e003      	b.n	8004aba <HAL_TIM_PWM_Start+0xaa>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	6839      	ldr	r1, [r7, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fee0 	bl	8005888 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a23      	ldr	r2, [pc, #140]	; (8004b5c <HAL_TIM_PWM_Start+0x14c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d107      	bne.n	8004ae2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ae0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <HAL_TIM_PWM_Start+0x14c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d018      	beq.n	8004b1e <HAL_TIM_PWM_Start+0x10e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d013      	beq.n	8004b1e <HAL_TIM_PWM_Start+0x10e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a19      	ldr	r2, [pc, #100]	; (8004b60 <HAL_TIM_PWM_Start+0x150>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00e      	beq.n	8004b1e <HAL_TIM_PWM_Start+0x10e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a17      	ldr	r2, [pc, #92]	; (8004b64 <HAL_TIM_PWM_Start+0x154>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d009      	beq.n	8004b1e <HAL_TIM_PWM_Start+0x10e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a16      	ldr	r2, [pc, #88]	; (8004b68 <HAL_TIM_PWM_Start+0x158>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <HAL_TIM_PWM_Start+0x10e>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a14      	ldr	r2, [pc, #80]	; (8004b6c <HAL_TIM_PWM_Start+0x15c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d111      	bne.n	8004b42 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b06      	cmp	r3, #6
 8004b2e:	d010      	beq.n	8004b52 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b40:	e007      	b.n	8004b52 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40010000 	.word	0x40010000
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800
 8004b68:	40000c00 	.word	0x40000c00
 8004b6c:	40014000 	.word	0x40014000

08004b70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e097      	b.n	8004cb4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fd ffff 	bl	8002b9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb4:	f023 0307 	bic.w	r3, r3, #7
 8004bb8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f000 fbb9 	bl	800533c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	4313      	orrs	r3, r2
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004c10:	f023 030c 	bic.w	r3, r3, #12
 8004c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	011a      	lsls	r2, r3, #4
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	031b      	lsls	r3, r3, #12
 8004c40:	4313      	orrs	r3, r2
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	4313      	orrs	r3, r2
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ccc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cd4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cdc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ce4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d110      	bne.n	8004d0e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d102      	bne.n	8004cf8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cf2:	7b7b      	ldrb	r3, [r7, #13]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d001      	beq.n	8004cfc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e069      	b.n	8004dd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d0c:	e031      	b.n	8004d72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d110      	bne.n	8004d36 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d14:	7bbb      	ldrb	r3, [r7, #14]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d102      	bne.n	8004d20 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d1a:	7b3b      	ldrb	r3, [r7, #12]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d001      	beq.n	8004d24 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e055      	b.n	8004dd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d34:	e01d      	b.n	8004d72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d108      	bne.n	8004d4e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d3c:	7bbb      	ldrb	r3, [r7, #14]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d105      	bne.n	8004d4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d42:	7b7b      	ldrb	r3, [r7, #13]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d102      	bne.n	8004d4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d48:	7b3b      	ldrb	r3, [r7, #12]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d001      	beq.n	8004d52 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e03e      	b.n	8004dd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2202      	movs	r2, #2
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2202      	movs	r2, #2
 8004d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_TIM_Encoder_Start+0xc4>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d008      	beq.n	8004d90 <HAL_TIM_Encoder_Start+0xd4>
 8004d7e:	e00f      	b.n	8004da0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2201      	movs	r2, #1
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 fd7d 	bl	8005888 <TIM_CCxChannelCmd>
      break;
 8004d8e:	e016      	b.n	8004dbe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2201      	movs	r2, #1
 8004d96:	2104      	movs	r1, #4
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fd75 	bl	8005888 <TIM_CCxChannelCmd>
      break;
 8004d9e:	e00e      	b.n	8004dbe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2201      	movs	r2, #1
 8004da6:	2100      	movs	r1, #0
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fd6d 	bl	8005888 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2201      	movs	r2, #1
 8004db4:	2104      	movs	r1, #4
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fd66 	bl	8005888 <TIM_CCxChannelCmd>
      break;
 8004dbc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0201 	orr.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d122      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d11b      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0202 	mvn.w	r2, #2
 8004e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fa70 	bl	8005300 <HAL_TIM_IC_CaptureCallback>
 8004e20:	e005      	b.n	8004e2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa62 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fa73 	bl	8005314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d122      	bne.n	8004e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d11b      	bne.n	8004e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0204 	mvn.w	r2, #4
 8004e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fa46 	bl	8005300 <HAL_TIM_IC_CaptureCallback>
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fa38 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fa49 	bl	8005314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d122      	bne.n	8004edc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d11b      	bne.n	8004edc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0208 	mvn.w	r2, #8
 8004eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fa1c 	bl	8005300 <HAL_TIM_IC_CaptureCallback>
 8004ec8:	e005      	b.n	8004ed6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fa0e 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fa1f 	bl	8005314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d122      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b10      	cmp	r3, #16
 8004ef6:	d11b      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0210 	mvn.w	r2, #16
 8004f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2208      	movs	r2, #8
 8004f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9f2 	bl	8005300 <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f9e4 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f9f5 	bl	8005314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d10e      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d107      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0201 	mvn.w	r2, #1
 8004f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fc fc44 	bl	80017e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f66:	2b80      	cmp	r3, #128	; 0x80
 8004f68:	d10e      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f74:	2b80      	cmp	r3, #128	; 0x80
 8004f76:	d107      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fd1e 	bl	80059c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b40      	cmp	r3, #64	; 0x40
 8004f94:	d10e      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d107      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f9ba 	bl	8005328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d10e      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d107      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0220 	mvn.w	r2, #32
 8004fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fce8 	bl	80059b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ffe:	2302      	movs	r3, #2
 8005000:	e0ac      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b0c      	cmp	r3, #12
 800500e:	f200 809f 	bhi.w	8005150 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005012:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	0800504d 	.word	0x0800504d
 800501c:	08005151 	.word	0x08005151
 8005020:	08005151 	.word	0x08005151
 8005024:	08005151 	.word	0x08005151
 8005028:	0800508d 	.word	0x0800508d
 800502c:	08005151 	.word	0x08005151
 8005030:	08005151 	.word	0x08005151
 8005034:	08005151 	.word	0x08005151
 8005038:	080050cf 	.word	0x080050cf
 800503c:	08005151 	.word	0x08005151
 8005040:	08005151 	.word	0x08005151
 8005044:	08005151 	.word	0x08005151
 8005048:	0800510f 	.word	0x0800510f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 f9f2 	bl	800543c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0208 	orr.w	r2, r2, #8
 8005066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0204 	bic.w	r2, r2, #4
 8005076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6999      	ldr	r1, [r3, #24]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	619a      	str	r2, [r3, #24]
      break;
 800508a:	e062      	b.n	8005152 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fa38 	bl	8005508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6999      	ldr	r1, [r3, #24]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	021a      	lsls	r2, r3, #8
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	619a      	str	r2, [r3, #24]
      break;
 80050cc:	e041      	b.n	8005152 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fa83 	bl	80055e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0208 	orr.w	r2, r2, #8
 80050e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0204 	bic.w	r2, r2, #4
 80050f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69d9      	ldr	r1, [r3, #28]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	61da      	str	r2, [r3, #28]
      break;
 800510c:	e021      	b.n	8005152 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	4618      	mov	r0, r3
 8005116:	f000 facd 	bl	80056b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69d9      	ldr	r1, [r3, #28]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	021a      	lsls	r2, r3, #8
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	61da      	str	r2, [r3, #28]
      break;
 800514e:	e000      	b.n	8005152 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005150:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_TIM_ConfigClockSource+0x18>
 8005178:	2302      	movs	r3, #2
 800517a:	e0b3      	b.n	80052e4 <HAL_TIM_ConfigClockSource+0x180>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800519a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b4:	d03e      	beq.n	8005234 <HAL_TIM_ConfigClockSource+0xd0>
 80051b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ba:	f200 8087 	bhi.w	80052cc <HAL_TIM_ConfigClockSource+0x168>
 80051be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c2:	f000 8085 	beq.w	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ca:	d87f      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x168>
 80051cc:	2b70      	cmp	r3, #112	; 0x70
 80051ce:	d01a      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0xa2>
 80051d0:	2b70      	cmp	r3, #112	; 0x70
 80051d2:	d87b      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x168>
 80051d4:	2b60      	cmp	r3, #96	; 0x60
 80051d6:	d050      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x116>
 80051d8:	2b60      	cmp	r3, #96	; 0x60
 80051da:	d877      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x168>
 80051dc:	2b50      	cmp	r3, #80	; 0x50
 80051de:	d03c      	beq.n	800525a <HAL_TIM_ConfigClockSource+0xf6>
 80051e0:	2b50      	cmp	r3, #80	; 0x50
 80051e2:	d873      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x168>
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d058      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x136>
 80051e8:	2b40      	cmp	r3, #64	; 0x40
 80051ea:	d86f      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x168>
 80051ec:	2b30      	cmp	r3, #48	; 0x30
 80051ee:	d064      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x156>
 80051f0:	2b30      	cmp	r3, #48	; 0x30
 80051f2:	d86b      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x168>
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d060      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x156>
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d867      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x168>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d05c      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x156>
 8005200:	2b10      	cmp	r3, #16
 8005202:	d05a      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005204:	e062      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6899      	ldr	r1, [r3, #8]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f000 fb17 	bl	8005848 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005228:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	609a      	str	r2, [r3, #8]
      break;
 8005232:	e04e      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	6899      	ldr	r1, [r3, #8]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f000 fb00 	bl	8005848 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005256:	609a      	str	r2, [r3, #8]
      break;
 8005258:	e03b      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	461a      	mov	r2, r3
 8005268:	f000 fa74 	bl	8005754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2150      	movs	r1, #80	; 0x50
 8005272:	4618      	mov	r0, r3
 8005274:	f000 facd 	bl	8005812 <TIM_ITRx_SetConfig>
      break;
 8005278:	e02b      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6859      	ldr	r1, [r3, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	461a      	mov	r2, r3
 8005288:	f000 fa93 	bl	80057b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2160      	movs	r1, #96	; 0x60
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fabd 	bl	8005812 <TIM_ITRx_SetConfig>
      break;
 8005298:	e01b      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6859      	ldr	r1, [r3, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f000 fa54 	bl	8005754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2140      	movs	r1, #64	; 0x40
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 faad 	bl	8005812 <TIM_ITRx_SetConfig>
      break;
 80052b8:	e00b      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f000 faa4 	bl	8005812 <TIM_ITRx_SetConfig>
        break;
 80052ca:	e002      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052cc:	bf00      	nop
 80052ce:	e000      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a34      	ldr	r2, [pc, #208]	; (8005420 <TIM_Base_SetConfig+0xe4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00f      	beq.n	8005374 <TIM_Base_SetConfig+0x38>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535a:	d00b      	beq.n	8005374 <TIM_Base_SetConfig+0x38>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a31      	ldr	r2, [pc, #196]	; (8005424 <TIM_Base_SetConfig+0xe8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d007      	beq.n	8005374 <TIM_Base_SetConfig+0x38>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a30      	ldr	r2, [pc, #192]	; (8005428 <TIM_Base_SetConfig+0xec>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_Base_SetConfig+0x38>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a2f      	ldr	r2, [pc, #188]	; (800542c <TIM_Base_SetConfig+0xf0>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d108      	bne.n	8005386 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a25      	ldr	r2, [pc, #148]	; (8005420 <TIM_Base_SetConfig+0xe4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d01b      	beq.n	80053c6 <TIM_Base_SetConfig+0x8a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005394:	d017      	beq.n	80053c6 <TIM_Base_SetConfig+0x8a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a22      	ldr	r2, [pc, #136]	; (8005424 <TIM_Base_SetConfig+0xe8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <TIM_Base_SetConfig+0x8a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a21      	ldr	r2, [pc, #132]	; (8005428 <TIM_Base_SetConfig+0xec>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00f      	beq.n	80053c6 <TIM_Base_SetConfig+0x8a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a20      	ldr	r2, [pc, #128]	; (800542c <TIM_Base_SetConfig+0xf0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <TIM_Base_SetConfig+0x8a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1f      	ldr	r2, [pc, #124]	; (8005430 <TIM_Base_SetConfig+0xf4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d007      	beq.n	80053c6 <TIM_Base_SetConfig+0x8a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1e      	ldr	r2, [pc, #120]	; (8005434 <TIM_Base_SetConfig+0xf8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_Base_SetConfig+0x8a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1d      	ldr	r2, [pc, #116]	; (8005438 <TIM_Base_SetConfig+0xfc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d108      	bne.n	80053d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a08      	ldr	r2, [pc, #32]	; (8005420 <TIM_Base_SetConfig+0xe4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d103      	bne.n	800540c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	615a      	str	r2, [r3, #20]
}
 8005412:	bf00      	nop
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40014000 	.word	0x40014000
 8005434:	40014400 	.word	0x40014400
 8005438:	40014800 	.word	0x40014800

0800543c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f023 0201 	bic.w	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0303 	bic.w	r3, r3, #3
 8005472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f023 0302 	bic.w	r3, r3, #2
 8005484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a1c      	ldr	r2, [pc, #112]	; (8005504 <TIM_OC1_SetConfig+0xc8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d10c      	bne.n	80054b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f023 0308 	bic.w	r3, r3, #8
 800549e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f023 0304 	bic.w	r3, r3, #4
 80054b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a13      	ldr	r2, [pc, #76]	; (8005504 <TIM_OC1_SetConfig+0xc8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d111      	bne.n	80054de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	621a      	str	r2, [r3, #32]
}
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	40010000 	.word	0x40010000

08005508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f023 0210 	bic.w	r2, r3, #16
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f023 0320 	bic.w	r3, r3, #32
 8005552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <TIM_OC2_SetConfig+0xd4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d10d      	bne.n	8005584 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800556e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a15      	ldr	r2, [pc, #84]	; (80055dc <TIM_OC2_SetConfig+0xd4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d113      	bne.n	80055b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800559a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000

080055e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	021b      	lsls	r3, r3, #8
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a1d      	ldr	r2, [pc, #116]	; (80056b0 <TIM_OC3_SetConfig+0xd0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d10d      	bne.n	800565a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <TIM_OC3_SetConfig+0xd0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d113      	bne.n	800568a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	621a      	str	r2, [r3, #32]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	40010000 	.word	0x40010000

080056b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	031b      	lsls	r3, r3, #12
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a10      	ldr	r2, [pc, #64]	; (8005750 <TIM_OC4_SetConfig+0x9c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d109      	bne.n	8005728 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800571a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	019b      	lsls	r3, r3, #6
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40010000 	.word	0x40010000

08005754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	f023 0201 	bic.w	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800577e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f023 030a 	bic.w	r3, r3, #10
 8005790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b087      	sub	sp, #28
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f023 0210 	bic.w	r2, r3, #16
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	031b      	lsls	r3, r3, #12
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	f043 0307 	orr.w	r3, r3, #7
 8005834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	609a      	str	r2, [r3, #8]
}
 800583c:	bf00      	nop
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	021a      	lsls	r2, r3, #8
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	431a      	orrs	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4313      	orrs	r3, r2
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	609a      	str	r2, [r3, #8]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	2201      	movs	r2, #1
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a1a      	ldr	r2, [r3, #32]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	401a      	ands	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a1a      	ldr	r2, [r3, #32]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	fa01 f303 	lsl.w	r3, r1, r3
 80058c0:	431a      	orrs	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	621a      	str	r2, [r3, #32]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e050      	b.n	800598e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1c      	ldr	r2, [pc, #112]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d018      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005938:	d013      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a18      	ldr	r2, [pc, #96]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a16      	ldr	r2, [pc, #88]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a15      	ldr	r2, [pc, #84]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a13      	ldr	r2, [pc, #76]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d10c      	bne.n	800597c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	4313      	orrs	r3, r2
 8005972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40010000 	.word	0x40010000
 80059a0:	40000400 	.word	0x40000400
 80059a4:	40000800 	.word	0x40000800
 80059a8:	40000c00 	.word	0x40000c00
 80059ac:	40014000 	.word	0x40014000

080059b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e03f      	b.n	8005a6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fd f98a 	bl	8002d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2224      	movs	r2, #36	; 0x24
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fd51 	bl	80064c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695a      	ldr	r2, [r3, #20]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	d153      	bne.n	8005b36 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_UART_Transmit_DMA+0x26>
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e04c      	b.n	8005b38 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_UART_Transmit_DMA+0x38>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e045      	b.n	8005b38 <HAL_UART_Transmit_DMA+0xc4>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	88fa      	ldrh	r2, [r7, #6]
 8005abe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2221      	movs	r2, #33	; 0x21
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad8:	4a19      	ldr	r2, [pc, #100]	; (8005b40 <HAL_UART_Transmit_DMA+0xcc>)
 8005ada:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae0:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <HAL_UART_Transmit_DMA+0xd0>)
 8005ae2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae8:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <HAL_UART_Transmit_DMA+0xd4>)
 8005aea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af0:	2200      	movs	r2, #0
 8005af2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005af4:	f107 0308 	add.w	r3, r7, #8
 8005af8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6819      	ldr	r1, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3304      	adds	r3, #4
 8005b08:	461a      	mov	r2, r3
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	f7fd fcb4 	bl	8003478 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b18:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695a      	ldr	r2, [r3, #20]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b30:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	e000      	b.n	8005b38 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005b36:	2302      	movs	r3, #2
  }
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	08005f81 	.word	0x08005f81
 8005b44:	08005fd3 	.word	0x08005fd3
 8005b48:	080060bb 	.word	0x080060bb

08005b4c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	4613      	mov	r3, r2
 8005b58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d11d      	bne.n	8005ba2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <HAL_UART_Receive_DMA+0x26>
 8005b6c:	88fb      	ldrh	r3, [r7, #6]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e016      	b.n	8005ba4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_UART_Receive_DMA+0x38>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e00f      	b.n	8005ba4 <HAL_UART_Receive_DMA+0x58>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005b92:	88fb      	ldrh	r3, [r7, #6]
 8005b94:	461a      	mov	r2, r3
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 fad9 	bl	8006150 <UART_Start_Receive_DMA>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	e000      	b.n	8005ba4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ba2:	2302      	movs	r3, #2
  }
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08a      	sub	sp, #40	; 0x28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10d      	bne.n	8005bfe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <HAL_UART_IRQHandler+0x52>
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fbcd 	bl	8006396 <UART_Receive_IT>
      return;
 8005bfc:	e17c      	b.n	8005ef8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80b1 	beq.w	8005d68 <HAL_UART_IRQHandler+0x1bc>
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d105      	bne.n	8005c1c <HAL_UART_IRQHandler+0x70>
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 80a6 	beq.w	8005d68 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_UART_IRQHandler+0x90>
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	f043 0201 	orr.w	r2, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <HAL_UART_IRQHandler+0xb0>
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	f043 0202 	orr.w	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <HAL_UART_IRQHandler+0xd0>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	f043 0204 	orr.w	r2, r3, #4
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00f      	beq.n	8005ca6 <HAL_UART_IRQHandler+0xfa>
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <HAL_UART_IRQHandler+0xee>
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f043 0208 	orr.w	r2, r3, #8
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 811f 	beq.w	8005eee <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d007      	beq.n	8005cca <HAL_UART_IRQHandler+0x11e>
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fb66 	bl	8006396 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	bf0c      	ite	eq
 8005cd8:	2301      	moveq	r3, #1
 8005cda:	2300      	movne	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d102      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x146>
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d031      	beq.n	8005d56 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 faa6 	bl	8006244 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b40      	cmp	r3, #64	; 0x40
 8005d04:	d123      	bne.n	8005d4e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695a      	ldr	r2, [r3, #20]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d14:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d013      	beq.n	8005d46 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	4a77      	ldr	r2, [pc, #476]	; (8005f00 <HAL_UART_IRQHandler+0x354>)
 8005d24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fd fc6c 	bl	8003608 <HAL_DMA_Abort_IT>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d016      	beq.n	8005d64 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d40:	4610      	mov	r0, r2
 8005d42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d44:	e00e      	b.n	8005d64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f904 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4c:	e00a      	b.n	8005d64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f900 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d54:	e006      	b.n	8005d64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f8fc 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d62:	e0c4      	b.n	8005eee <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d64:	bf00      	nop
    return;
 8005d66:	e0c2      	b.n	8005eee <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	f040 80a2 	bne.w	8005eb6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 809c 	beq.w	8005eb6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8096 	beq.w	8005eb6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	d14f      	bne.n	8005e4e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005db8:	8a3b      	ldrh	r3, [r7, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8099 	beq.w	8005ef2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dc4:	8a3a      	ldrh	r2, [r7, #16]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	f080 8093 	bcs.w	8005ef2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	8a3a      	ldrh	r2, [r7, #16]
 8005dd0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ddc:	d02b      	beq.n	8005e36 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dec:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695a      	ldr	r2, [r3, #20]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0201 	bic.w	r2, r2, #1
 8005dfc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e0c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0210 	bic.w	r2, r2, #16
 8005e2a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fd fb79 	bl	8003528 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f88e 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e4c:	e051      	b.n	8005ef2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d047      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005e66:	8a7b      	ldrh	r3, [r7, #18]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d044      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e7a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0210 	bic.w	r2, r2, #16
 8005ea8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005eaa:	8a7b      	ldrh	r3, [r7, #18]
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f85a 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005eb4:	e01f      	b.n	8005ef6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x326>
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f9fb 	bl	80062c6 <UART_Transmit_IT>
    return;
 8005ed0:	e012      	b.n	8005ef8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00d      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x34c>
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d008      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fa3d 	bl	8006366 <UART_EndTransmit_IT>
    return;
 8005eec:	e004      	b.n	8005ef8 <HAL_UART_IRQHandler+0x34c>
    return;
 8005eee:	bf00      	nop
 8005ef0:	e002      	b.n	8005ef8 <HAL_UART_IRQHandler+0x34c>
      return;
 8005ef2:	bf00      	nop
 8005ef4:	e000      	b.n	8005ef8 <HAL_UART_IRQHandler+0x34c>
      return;
 8005ef6:	bf00      	nop
  }
}
 8005ef8:	3728      	adds	r7, #40	; 0x28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	0800629f 	.word	0x0800629f

08005f04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d113      	bne.n	8005fc4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fb0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fc0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fc2:	e002      	b.n	8005fca <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7ff ff9d 	bl	8005f04 <HAL_UART_TxCpltCallback>
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f7ff ff99 	bl	8005f18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006006:	2b00      	cmp	r3, #0
 8006008:	d12a      	bne.n	8006060 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800601e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695a      	ldr	r2, [r3, #20]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695a      	ldr	r2, [r3, #20]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800603e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	2b01      	cmp	r3, #1
 800604e:	d107      	bne.n	8006060 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0210 	bic.w	r2, r2, #16
 800605e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006064:	2b01      	cmp	r3, #1
 8006066:	d106      	bne.n	8006076 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800606c:	4619      	mov	r1, r3
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f7ff ff7a 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006074:	e002      	b.n	800607c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f7ff ff58 	bl	8005f2c <HAL_UART_RxCpltCallback>
}
 800607c:	bf00      	nop
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	2b01      	cmp	r3, #1
 8006098:	d108      	bne.n	80060ac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800609e:	085b      	lsrs	r3, r3, #1
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	4619      	mov	r1, r3
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff ff5f 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060aa:	e002      	b.n	80060b2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7ff ff47 	bl	8005f40 <HAL_UART_RxHalfCpltCallback>
}
 80060b2:	bf00      	nop
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b80      	cmp	r3, #128	; 0x80
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b21      	cmp	r3, #33	; 0x21
 80060ec:	d108      	bne.n	8006100 <UART_DMAError+0x46>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2200      	movs	r2, #0
 80060f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80060fa:	68b8      	ldr	r0, [r7, #8]
 80060fc:	f000 f88c 	bl	8006218 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	bf0c      	ite	eq
 800610e:	2301      	moveq	r3, #1
 8006110:	2300      	movne	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b22      	cmp	r3, #34	; 0x22
 8006120:	d108      	bne.n	8006134 <UART_DMAError+0x7a>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2200      	movs	r2, #0
 800612c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800612e:	68b8      	ldr	r0, [r7, #8]
 8006130:	f000 f888 	bl	8006244 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	f043 0210 	orr.w	r2, r3, #16
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006140:	68b8      	ldr	r0, [r7, #8]
 8006142:	f7ff ff07 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2222      	movs	r2, #34	; 0x22
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	4a23      	ldr	r2, [pc, #140]	; (800620c <UART_Start_Receive_DMA+0xbc>)
 800617e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	4a22      	ldr	r2, [pc, #136]	; (8006210 <UART_Start_Receive_DMA+0xc0>)
 8006186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	4a21      	ldr	r2, [pc, #132]	; (8006214 <UART_Start_Receive_DMA+0xc4>)
 800618e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	2200      	movs	r2, #0
 8006196:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006198:	f107 0308 	add.w	r3, r7, #8
 800619c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3304      	adds	r3, #4
 80061a8:	4619      	mov	r1, r3
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	f7fd f962 	bl	8003478 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80061b4:	2300      	movs	r3, #0
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	613b      	str	r3, [r7, #16]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	695a      	ldr	r2, [r3, #20]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0201 	orr.w	r2, r2, #1
 80061f0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695a      	ldr	r2, [r3, #20]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006200:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	08005fef 	.word	0x08005fef
 8006210:	08006085 	.word	0x08006085
 8006214:	080060bb 	.word	0x080060bb

08006218 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800622e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800625a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695a      	ldr	r2, [r3, #20]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0201 	bic.w	r2, r2, #1
 800626a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	2b01      	cmp	r3, #1
 8006272:	d107      	bne.n	8006284 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0210 	bic.w	r2, r2, #16
 8006282:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f7ff fe4b 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062be:	bf00      	nop
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b085      	sub	sp, #20
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b21      	cmp	r3, #33	; 0x21
 80062d8:	d13e      	bne.n	8006358 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e2:	d114      	bne.n	800630e <UART_Transmit_IT+0x48>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d110      	bne.n	800630e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006300:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	1c9a      	adds	r2, r3, #2
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	621a      	str	r2, [r3, #32]
 800630c:	e008      	b.n	8006320 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	1c59      	adds	r1, r3, #1
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6211      	str	r1, [r2, #32]
 8006318:	781a      	ldrb	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29b      	uxth	r3, r3
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	4619      	mov	r1, r3
 800632e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10f      	bne.n	8006354 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006342:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006352:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	e000      	b.n	800635a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006358:	2302      	movs	r3, #2
  }
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800637c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff fdbc 	bl	8005f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b22      	cmp	r3, #34	; 0x22
 80063a8:	f040 8087 	bne.w	80064ba <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b4:	d117      	bne.n	80063e6 <UART_Receive_IT+0x50>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d113      	bne.n	80063e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063de:	1c9a      	adds	r2, r3, #2
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	629a      	str	r2, [r3, #40]	; 0x28
 80063e4:	e026      	b.n	8006434 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f8:	d007      	beq.n	800640a <UART_Receive_IT+0x74>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <UART_Receive_IT+0x82>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d106      	bne.n	8006418 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	e008      	b.n	800642a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006424:	b2da      	uxtb	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006438:	b29b      	uxth	r3, r3
 800643a:	3b01      	subs	r3, #1
 800643c:	b29b      	uxth	r3, r3
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	4619      	mov	r1, r3
 8006442:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006444:	2b00      	cmp	r3, #0
 8006446:	d136      	bne.n	80064b6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0220 	bic.w	r2, r2, #32
 8006456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695a      	ldr	r2, [r3, #20]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0201 	bic.w	r2, r2, #1
 8006476:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	2b01      	cmp	r3, #1
 8006486:	d10e      	bne.n	80064a6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0210 	bic.w	r2, r2, #16
 8006496:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff fd62 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
 80064a4:	e002      	b.n	80064ac <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff fd40 	bl	8005f2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e002      	b.n	80064bc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e000      	b.n	80064bc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80064ba:	2302      	movs	r3, #2
  }
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c8:	b09f      	sub	sp, #124	; 0x7c
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064da:	68d9      	ldr	r1, [r3, #12]
 80064dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	ea40 0301 	orr.w	r3, r0, r1
 80064e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	431a      	orrs	r2, r3
 80064f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80064fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006508:	f021 010c 	bic.w	r1, r1, #12
 800650c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006512:	430b      	orrs	r3, r1
 8006514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006522:	6999      	ldr	r1, [r3, #24]
 8006524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	ea40 0301 	orr.w	r3, r0, r1
 800652c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800652e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4bc5      	ldr	r3, [pc, #788]	; (8006848 <UART_SetConfig+0x384>)
 8006534:	429a      	cmp	r2, r3
 8006536:	d004      	beq.n	8006542 <UART_SetConfig+0x7e>
 8006538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	4bc3      	ldr	r3, [pc, #780]	; (800684c <UART_SetConfig+0x388>)
 800653e:	429a      	cmp	r2, r3
 8006540:	d103      	bne.n	800654a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006542:	f7fe f8eb 	bl	800471c <HAL_RCC_GetPCLK2Freq>
 8006546:	6778      	str	r0, [r7, #116]	; 0x74
 8006548:	e002      	b.n	8006550 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800654a:	f7fe f8d3 	bl	80046f4 <HAL_RCC_GetPCLK1Freq>
 800654e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006558:	f040 80b6 	bne.w	80066c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800655c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800655e:	461c      	mov	r4, r3
 8006560:	f04f 0500 	mov.w	r5, #0
 8006564:	4622      	mov	r2, r4
 8006566:	462b      	mov	r3, r5
 8006568:	1891      	adds	r1, r2, r2
 800656a:	6439      	str	r1, [r7, #64]	; 0x40
 800656c:	415b      	adcs	r3, r3
 800656e:	647b      	str	r3, [r7, #68]	; 0x44
 8006570:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006574:	1912      	adds	r2, r2, r4
 8006576:	eb45 0303 	adc.w	r3, r5, r3
 800657a:	f04f 0000 	mov.w	r0, #0
 800657e:	f04f 0100 	mov.w	r1, #0
 8006582:	00d9      	lsls	r1, r3, #3
 8006584:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006588:	00d0      	lsls	r0, r2, #3
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	1911      	adds	r1, r2, r4
 8006590:	6639      	str	r1, [r7, #96]	; 0x60
 8006592:	416b      	adcs	r3, r5
 8006594:	667b      	str	r3, [r7, #100]	; 0x64
 8006596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	461a      	mov	r2, r3
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	1891      	adds	r1, r2, r2
 80065a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80065a4:	415b      	adcs	r3, r3
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80065b0:	f7fa fbdc 	bl	8000d6c <__aeabi_uldivmod>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4ba5      	ldr	r3, [pc, #660]	; (8006850 <UART_SetConfig+0x38c>)
 80065ba:	fba3 2302 	umull	r2, r3, r3, r2
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	011e      	lsls	r6, r3, #4
 80065c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c4:	461c      	mov	r4, r3
 80065c6:	f04f 0500 	mov.w	r5, #0
 80065ca:	4622      	mov	r2, r4
 80065cc:	462b      	mov	r3, r5
 80065ce:	1891      	adds	r1, r2, r2
 80065d0:	6339      	str	r1, [r7, #48]	; 0x30
 80065d2:	415b      	adcs	r3, r3
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
 80065d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80065da:	1912      	adds	r2, r2, r4
 80065dc:	eb45 0303 	adc.w	r3, r5, r3
 80065e0:	f04f 0000 	mov.w	r0, #0
 80065e4:	f04f 0100 	mov.w	r1, #0
 80065e8:	00d9      	lsls	r1, r3, #3
 80065ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065ee:	00d0      	lsls	r0, r2, #3
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	1911      	adds	r1, r2, r4
 80065f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80065f8:	416b      	adcs	r3, r5
 80065fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	461a      	mov	r2, r3
 8006602:	f04f 0300 	mov.w	r3, #0
 8006606:	1891      	adds	r1, r2, r2
 8006608:	62b9      	str	r1, [r7, #40]	; 0x28
 800660a:	415b      	adcs	r3, r3
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800660e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006612:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006616:	f7fa fba9 	bl	8000d6c <__aeabi_uldivmod>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	4b8c      	ldr	r3, [pc, #560]	; (8006850 <UART_SetConfig+0x38c>)
 8006620:	fba3 1302 	umull	r1, r3, r3, r2
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	2164      	movs	r1, #100	; 0x64
 8006628:	fb01 f303 	mul.w	r3, r1, r3
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	3332      	adds	r3, #50	; 0x32
 8006632:	4a87      	ldr	r2, [pc, #540]	; (8006850 <UART_SetConfig+0x38c>)
 8006634:	fba2 2303 	umull	r2, r3, r2, r3
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006640:	441e      	add	r6, r3
 8006642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006644:	4618      	mov	r0, r3
 8006646:	f04f 0100 	mov.w	r1, #0
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	1894      	adds	r4, r2, r2
 8006650:	623c      	str	r4, [r7, #32]
 8006652:	415b      	adcs	r3, r3
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
 8006656:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800665a:	1812      	adds	r2, r2, r0
 800665c:	eb41 0303 	adc.w	r3, r1, r3
 8006660:	f04f 0400 	mov.w	r4, #0
 8006664:	f04f 0500 	mov.w	r5, #0
 8006668:	00dd      	lsls	r5, r3, #3
 800666a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800666e:	00d4      	lsls	r4, r2, #3
 8006670:	4622      	mov	r2, r4
 8006672:	462b      	mov	r3, r5
 8006674:	1814      	adds	r4, r2, r0
 8006676:	653c      	str	r4, [r7, #80]	; 0x50
 8006678:	414b      	adcs	r3, r1
 800667a:	657b      	str	r3, [r7, #84]	; 0x54
 800667c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	461a      	mov	r2, r3
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	1891      	adds	r1, r2, r2
 8006688:	61b9      	str	r1, [r7, #24]
 800668a:	415b      	adcs	r3, r3
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006692:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006696:	f7fa fb69 	bl	8000d6c <__aeabi_uldivmod>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	4b6c      	ldr	r3, [pc, #432]	; (8006850 <UART_SetConfig+0x38c>)
 80066a0:	fba3 1302 	umull	r1, r3, r3, r2
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	2164      	movs	r1, #100	; 0x64
 80066a8:	fb01 f303 	mul.w	r3, r1, r3
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	3332      	adds	r3, #50	; 0x32
 80066b2:	4a67      	ldr	r2, [pc, #412]	; (8006850 <UART_SetConfig+0x38c>)
 80066b4:	fba2 2303 	umull	r2, r3, r2, r3
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	f003 0207 	and.w	r2, r3, #7
 80066be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4432      	add	r2, r6
 80066c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066c6:	e0b9      	b.n	800683c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ca:	461c      	mov	r4, r3
 80066cc:	f04f 0500 	mov.w	r5, #0
 80066d0:	4622      	mov	r2, r4
 80066d2:	462b      	mov	r3, r5
 80066d4:	1891      	adds	r1, r2, r2
 80066d6:	6139      	str	r1, [r7, #16]
 80066d8:	415b      	adcs	r3, r3
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80066e0:	1912      	adds	r2, r2, r4
 80066e2:	eb45 0303 	adc.w	r3, r5, r3
 80066e6:	f04f 0000 	mov.w	r0, #0
 80066ea:	f04f 0100 	mov.w	r1, #0
 80066ee:	00d9      	lsls	r1, r3, #3
 80066f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066f4:	00d0      	lsls	r0, r2, #3
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	eb12 0804 	adds.w	r8, r2, r4
 80066fe:	eb43 0905 	adc.w	r9, r3, r5
 8006702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	4618      	mov	r0, r3
 8006708:	f04f 0100 	mov.w	r1, #0
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	008b      	lsls	r3, r1, #2
 8006716:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800671a:	0082      	lsls	r2, r0, #2
 800671c:	4640      	mov	r0, r8
 800671e:	4649      	mov	r1, r9
 8006720:	f7fa fb24 	bl	8000d6c <__aeabi_uldivmod>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4b49      	ldr	r3, [pc, #292]	; (8006850 <UART_SetConfig+0x38c>)
 800672a:	fba3 2302 	umull	r2, r3, r3, r2
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	011e      	lsls	r6, r3, #4
 8006732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006734:	4618      	mov	r0, r3
 8006736:	f04f 0100 	mov.w	r1, #0
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	1894      	adds	r4, r2, r2
 8006740:	60bc      	str	r4, [r7, #8]
 8006742:	415b      	adcs	r3, r3
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800674a:	1812      	adds	r2, r2, r0
 800674c:	eb41 0303 	adc.w	r3, r1, r3
 8006750:	f04f 0400 	mov.w	r4, #0
 8006754:	f04f 0500 	mov.w	r5, #0
 8006758:	00dd      	lsls	r5, r3, #3
 800675a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800675e:	00d4      	lsls	r4, r2, #3
 8006760:	4622      	mov	r2, r4
 8006762:	462b      	mov	r3, r5
 8006764:	1814      	adds	r4, r2, r0
 8006766:	64bc      	str	r4, [r7, #72]	; 0x48
 8006768:	414b      	adcs	r3, r1
 800676a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800676c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	4618      	mov	r0, r3
 8006772:	f04f 0100 	mov.w	r1, #0
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	008b      	lsls	r3, r1, #2
 8006780:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006784:	0082      	lsls	r2, r0, #2
 8006786:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800678a:	f7fa faef 	bl	8000d6c <__aeabi_uldivmod>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4b2f      	ldr	r3, [pc, #188]	; (8006850 <UART_SetConfig+0x38c>)
 8006794:	fba3 1302 	umull	r1, r3, r3, r2
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	2164      	movs	r1, #100	; 0x64
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	011b      	lsls	r3, r3, #4
 80067a4:	3332      	adds	r3, #50	; 0x32
 80067a6:	4a2a      	ldr	r2, [pc, #168]	; (8006850 <UART_SetConfig+0x38c>)
 80067a8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067b2:	441e      	add	r6, r3
 80067b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067b6:	4618      	mov	r0, r3
 80067b8:	f04f 0100 	mov.w	r1, #0
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	1894      	adds	r4, r2, r2
 80067c2:	603c      	str	r4, [r7, #0]
 80067c4:	415b      	adcs	r3, r3
 80067c6:	607b      	str	r3, [r7, #4]
 80067c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067cc:	1812      	adds	r2, r2, r0
 80067ce:	eb41 0303 	adc.w	r3, r1, r3
 80067d2:	f04f 0400 	mov.w	r4, #0
 80067d6:	f04f 0500 	mov.w	r5, #0
 80067da:	00dd      	lsls	r5, r3, #3
 80067dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067e0:	00d4      	lsls	r4, r2, #3
 80067e2:	4622      	mov	r2, r4
 80067e4:	462b      	mov	r3, r5
 80067e6:	eb12 0a00 	adds.w	sl, r2, r0
 80067ea:	eb43 0b01 	adc.w	fp, r3, r1
 80067ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f04f 0100 	mov.w	r1, #0
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	008b      	lsls	r3, r1, #2
 8006802:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006806:	0082      	lsls	r2, r0, #2
 8006808:	4650      	mov	r0, sl
 800680a:	4659      	mov	r1, fp
 800680c:	f7fa faae 	bl	8000d6c <__aeabi_uldivmod>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4b0e      	ldr	r3, [pc, #56]	; (8006850 <UART_SetConfig+0x38c>)
 8006816:	fba3 1302 	umull	r1, r3, r3, r2
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	2164      	movs	r1, #100	; 0x64
 800681e:	fb01 f303 	mul.w	r3, r1, r3
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	3332      	adds	r3, #50	; 0x32
 8006828:	4a09      	ldr	r2, [pc, #36]	; (8006850 <UART_SetConfig+0x38c>)
 800682a:	fba2 2303 	umull	r2, r3, r2, r3
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	f003 020f 	and.w	r2, r3, #15
 8006834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4432      	add	r2, r6
 800683a:	609a      	str	r2, [r3, #8]
}
 800683c:	bf00      	nop
 800683e:	377c      	adds	r7, #124	; 0x7c
 8006840:	46bd      	mov	sp, r7
 8006842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006846:	bf00      	nop
 8006848:	40011000 	.word	0x40011000
 800684c:	40011400 	.word	0x40011400
 8006850:	51eb851f 	.word	0x51eb851f

08006854 <calloc>:
 8006854:	4b02      	ldr	r3, [pc, #8]	; (8006860 <calloc+0xc>)
 8006856:	460a      	mov	r2, r1
 8006858:	4601      	mov	r1, r0
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	f000 b842 	b.w	80068e4 <_calloc_r>
 8006860:	20000024 	.word	0x20000024

08006864 <__errno>:
 8006864:	4b01      	ldr	r3, [pc, #4]	; (800686c <__errno+0x8>)
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	20000024 	.word	0x20000024

08006870 <__libc_init_array>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	4d0d      	ldr	r5, [pc, #52]	; (80068a8 <__libc_init_array+0x38>)
 8006874:	4c0d      	ldr	r4, [pc, #52]	; (80068ac <__libc_init_array+0x3c>)
 8006876:	1b64      	subs	r4, r4, r5
 8006878:	10a4      	asrs	r4, r4, #2
 800687a:	2600      	movs	r6, #0
 800687c:	42a6      	cmp	r6, r4
 800687e:	d109      	bne.n	8006894 <__libc_init_array+0x24>
 8006880:	4d0b      	ldr	r5, [pc, #44]	; (80068b0 <__libc_init_array+0x40>)
 8006882:	4c0c      	ldr	r4, [pc, #48]	; (80068b4 <__libc_init_array+0x44>)
 8006884:	f000 f99e 	bl	8006bc4 <_init>
 8006888:	1b64      	subs	r4, r4, r5
 800688a:	10a4      	asrs	r4, r4, #2
 800688c:	2600      	movs	r6, #0
 800688e:	42a6      	cmp	r6, r4
 8006890:	d105      	bne.n	800689e <__libc_init_array+0x2e>
 8006892:	bd70      	pop	{r4, r5, r6, pc}
 8006894:	f855 3b04 	ldr.w	r3, [r5], #4
 8006898:	4798      	blx	r3
 800689a:	3601      	adds	r6, #1
 800689c:	e7ee      	b.n	800687c <__libc_init_array+0xc>
 800689e:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a2:	4798      	blx	r3
 80068a4:	3601      	adds	r6, #1
 80068a6:	e7f2      	b.n	800688e <__libc_init_array+0x1e>
 80068a8:	08006c04 	.word	0x08006c04
 80068ac:	08006c04 	.word	0x08006c04
 80068b0:	08006c04 	.word	0x08006c04
 80068b4:	08006c08 	.word	0x08006c08

080068b8 <memcpy>:
 80068b8:	440a      	add	r2, r1
 80068ba:	4291      	cmp	r1, r2
 80068bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80068c0:	d100      	bne.n	80068c4 <memcpy+0xc>
 80068c2:	4770      	bx	lr
 80068c4:	b510      	push	{r4, lr}
 80068c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068ce:	4291      	cmp	r1, r2
 80068d0:	d1f9      	bne.n	80068c6 <memcpy+0xe>
 80068d2:	bd10      	pop	{r4, pc}

080068d4 <memset>:
 80068d4:	4402      	add	r2, r0
 80068d6:	4603      	mov	r3, r0
 80068d8:	4293      	cmp	r3, r2
 80068da:	d100      	bne.n	80068de <memset+0xa>
 80068dc:	4770      	bx	lr
 80068de:	f803 1b01 	strb.w	r1, [r3], #1
 80068e2:	e7f9      	b.n	80068d8 <memset+0x4>

080068e4 <_calloc_r>:
 80068e4:	b513      	push	{r0, r1, r4, lr}
 80068e6:	434a      	muls	r2, r1
 80068e8:	4611      	mov	r1, r2
 80068ea:	9201      	str	r2, [sp, #4]
 80068ec:	f000 f80a 	bl	8006904 <_malloc_r>
 80068f0:	4604      	mov	r4, r0
 80068f2:	b118      	cbz	r0, 80068fc <_calloc_r+0x18>
 80068f4:	9a01      	ldr	r2, [sp, #4]
 80068f6:	2100      	movs	r1, #0
 80068f8:	f7ff ffec 	bl	80068d4 <memset>
 80068fc:	4620      	mov	r0, r4
 80068fe:	b002      	add	sp, #8
 8006900:	bd10      	pop	{r4, pc}
	...

08006904 <_malloc_r>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	1ccd      	adds	r5, r1, #3
 8006908:	f025 0503 	bic.w	r5, r5, #3
 800690c:	3508      	adds	r5, #8
 800690e:	2d0c      	cmp	r5, #12
 8006910:	bf38      	it	cc
 8006912:	250c      	movcc	r5, #12
 8006914:	2d00      	cmp	r5, #0
 8006916:	4606      	mov	r6, r0
 8006918:	db01      	blt.n	800691e <_malloc_r+0x1a>
 800691a:	42a9      	cmp	r1, r5
 800691c:	d903      	bls.n	8006926 <_malloc_r+0x22>
 800691e:	230c      	movs	r3, #12
 8006920:	6033      	str	r3, [r6, #0]
 8006922:	2000      	movs	r0, #0
 8006924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006926:	f000 f857 	bl	80069d8 <__malloc_lock>
 800692a:	4921      	ldr	r1, [pc, #132]	; (80069b0 <_malloc_r+0xac>)
 800692c:	680a      	ldr	r2, [r1, #0]
 800692e:	4614      	mov	r4, r2
 8006930:	b99c      	cbnz	r4, 800695a <_malloc_r+0x56>
 8006932:	4f20      	ldr	r7, [pc, #128]	; (80069b4 <_malloc_r+0xb0>)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	b923      	cbnz	r3, 8006942 <_malloc_r+0x3e>
 8006938:	4621      	mov	r1, r4
 800693a:	4630      	mov	r0, r6
 800693c:	f000 f83c 	bl	80069b8 <_sbrk_r>
 8006940:	6038      	str	r0, [r7, #0]
 8006942:	4629      	mov	r1, r5
 8006944:	4630      	mov	r0, r6
 8006946:	f000 f837 	bl	80069b8 <_sbrk_r>
 800694a:	1c43      	adds	r3, r0, #1
 800694c:	d123      	bne.n	8006996 <_malloc_r+0x92>
 800694e:	230c      	movs	r3, #12
 8006950:	6033      	str	r3, [r6, #0]
 8006952:	4630      	mov	r0, r6
 8006954:	f000 f846 	bl	80069e4 <__malloc_unlock>
 8006958:	e7e3      	b.n	8006922 <_malloc_r+0x1e>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	1b5b      	subs	r3, r3, r5
 800695e:	d417      	bmi.n	8006990 <_malloc_r+0x8c>
 8006960:	2b0b      	cmp	r3, #11
 8006962:	d903      	bls.n	800696c <_malloc_r+0x68>
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	441c      	add	r4, r3
 8006968:	6025      	str	r5, [r4, #0]
 800696a:	e004      	b.n	8006976 <_malloc_r+0x72>
 800696c:	6863      	ldr	r3, [r4, #4]
 800696e:	42a2      	cmp	r2, r4
 8006970:	bf0c      	ite	eq
 8006972:	600b      	streq	r3, [r1, #0]
 8006974:	6053      	strne	r3, [r2, #4]
 8006976:	4630      	mov	r0, r6
 8006978:	f000 f834 	bl	80069e4 <__malloc_unlock>
 800697c:	f104 000b 	add.w	r0, r4, #11
 8006980:	1d23      	adds	r3, r4, #4
 8006982:	f020 0007 	bic.w	r0, r0, #7
 8006986:	1ac2      	subs	r2, r0, r3
 8006988:	d0cc      	beq.n	8006924 <_malloc_r+0x20>
 800698a:	1a1b      	subs	r3, r3, r0
 800698c:	50a3      	str	r3, [r4, r2]
 800698e:	e7c9      	b.n	8006924 <_malloc_r+0x20>
 8006990:	4622      	mov	r2, r4
 8006992:	6864      	ldr	r4, [r4, #4]
 8006994:	e7cc      	b.n	8006930 <_malloc_r+0x2c>
 8006996:	1cc4      	adds	r4, r0, #3
 8006998:	f024 0403 	bic.w	r4, r4, #3
 800699c:	42a0      	cmp	r0, r4
 800699e:	d0e3      	beq.n	8006968 <_malloc_r+0x64>
 80069a0:	1a21      	subs	r1, r4, r0
 80069a2:	4630      	mov	r0, r6
 80069a4:	f000 f808 	bl	80069b8 <_sbrk_r>
 80069a8:	3001      	adds	r0, #1
 80069aa:	d1dd      	bne.n	8006968 <_malloc_r+0x64>
 80069ac:	e7cf      	b.n	800694e <_malloc_r+0x4a>
 80069ae:	bf00      	nop
 80069b0:	200003c8 	.word	0x200003c8
 80069b4:	200003cc 	.word	0x200003cc

080069b8 <_sbrk_r>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	4d06      	ldr	r5, [pc, #24]	; (80069d4 <_sbrk_r+0x1c>)
 80069bc:	2300      	movs	r3, #0
 80069be:	4604      	mov	r4, r0
 80069c0:	4608      	mov	r0, r1
 80069c2:	602b      	str	r3, [r5, #0]
 80069c4:	f7fc fab0 	bl	8002f28 <_sbrk>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_sbrk_r+0x1a>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_sbrk_r+0x1a>
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	200005b0 	.word	0x200005b0

080069d8 <__malloc_lock>:
 80069d8:	4801      	ldr	r0, [pc, #4]	; (80069e0 <__malloc_lock+0x8>)
 80069da:	f000 b809 	b.w	80069f0 <__retarget_lock_acquire_recursive>
 80069de:	bf00      	nop
 80069e0:	200005b8 	.word	0x200005b8

080069e4 <__malloc_unlock>:
 80069e4:	4801      	ldr	r0, [pc, #4]	; (80069ec <__malloc_unlock+0x8>)
 80069e6:	f000 b804 	b.w	80069f2 <__retarget_lock_release_recursive>
 80069ea:	bf00      	nop
 80069ec:	200005b8 	.word	0x200005b8

080069f0 <__retarget_lock_acquire_recursive>:
 80069f0:	4770      	bx	lr

080069f2 <__retarget_lock_release_recursive>:
 80069f2:	4770      	bx	lr

080069f4 <sqrt>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	ed2d 8b02 	vpush	{d8}
 80069fa:	ec55 4b10 	vmov	r4, r5, d0
 80069fe:	f000 f82d 	bl	8006a5c <__ieee754_sqrt>
 8006a02:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <sqrt+0x64>)
 8006a04:	eeb0 8a40 	vmov.f32	s16, s0
 8006a08:	eef0 8a60 	vmov.f32	s17, s1
 8006a0c:	f993 3000 	ldrsb.w	r3, [r3]
 8006a10:	3301      	adds	r3, #1
 8006a12:	d019      	beq.n	8006a48 <sqrt+0x54>
 8006a14:	4622      	mov	r2, r4
 8006a16:	462b      	mov	r3, r5
 8006a18:	4620      	mov	r0, r4
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	f7fa f832 	bl	8000a84 <__aeabi_dcmpun>
 8006a20:	b990      	cbnz	r0, 8006a48 <sqrt+0x54>
 8006a22:	2200      	movs	r2, #0
 8006a24:	2300      	movs	r3, #0
 8006a26:	4620      	mov	r0, r4
 8006a28:	4629      	mov	r1, r5
 8006a2a:	f7fa f803 	bl	8000a34 <__aeabi_dcmplt>
 8006a2e:	b158      	cbz	r0, 8006a48 <sqrt+0x54>
 8006a30:	f7ff ff18 	bl	8006864 <__errno>
 8006a34:	2321      	movs	r3, #33	; 0x21
 8006a36:	6003      	str	r3, [r0, #0]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4619      	mov	r1, r3
 8006a40:	f7f9 feb0 	bl	80007a4 <__aeabi_ddiv>
 8006a44:	ec41 0b18 	vmov	d8, r0, r1
 8006a48:	eeb0 0a48 	vmov.f32	s0, s16
 8006a4c:	eef0 0a68 	vmov.f32	s1, s17
 8006a50:	ecbd 8b02 	vpop	{d8}
 8006a54:	bd38      	pop	{r3, r4, r5, pc}
 8006a56:	bf00      	nop
 8006a58:	20000088 	.word	0x20000088

08006a5c <__ieee754_sqrt>:
 8006a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a60:	ec55 4b10 	vmov	r4, r5, d0
 8006a64:	4e56      	ldr	r6, [pc, #344]	; (8006bc0 <__ieee754_sqrt+0x164>)
 8006a66:	43ae      	bics	r6, r5
 8006a68:	ee10 0a10 	vmov	r0, s0
 8006a6c:	ee10 3a10 	vmov	r3, s0
 8006a70:	4629      	mov	r1, r5
 8006a72:	462a      	mov	r2, r5
 8006a74:	d110      	bne.n	8006a98 <__ieee754_sqrt+0x3c>
 8006a76:	ee10 2a10 	vmov	r2, s0
 8006a7a:	462b      	mov	r3, r5
 8006a7c:	f7f9 fd68 	bl	8000550 <__aeabi_dmul>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4620      	mov	r0, r4
 8006a86:	4629      	mov	r1, r5
 8006a88:	f7f9 fbac 	bl	80001e4 <__adddf3>
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	460d      	mov	r5, r1
 8006a90:	ec45 4b10 	vmov	d0, r4, r5
 8006a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a98:	2d00      	cmp	r5, #0
 8006a9a:	dc10      	bgt.n	8006abe <__ieee754_sqrt+0x62>
 8006a9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006aa0:	4330      	orrs	r0, r6
 8006aa2:	d0f5      	beq.n	8006a90 <__ieee754_sqrt+0x34>
 8006aa4:	b15d      	cbz	r5, 8006abe <__ieee754_sqrt+0x62>
 8006aa6:	ee10 2a10 	vmov	r2, s0
 8006aaa:	462b      	mov	r3, r5
 8006aac:	ee10 0a10 	vmov	r0, s0
 8006ab0:	f7f9 fb96 	bl	80001e0 <__aeabi_dsub>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	f7f9 fe74 	bl	80007a4 <__aeabi_ddiv>
 8006abc:	e7e6      	b.n	8006a8c <__ieee754_sqrt+0x30>
 8006abe:	1509      	asrs	r1, r1, #20
 8006ac0:	d076      	beq.n	8006bb0 <__ieee754_sqrt+0x154>
 8006ac2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006ac6:	07ce      	lsls	r6, r1, #31
 8006ac8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006acc:	bf5e      	ittt	pl
 8006ace:	0fda      	lsrpl	r2, r3, #31
 8006ad0:	005b      	lslpl	r3, r3, #1
 8006ad2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006ad6:	0fda      	lsrs	r2, r3, #31
 8006ad8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006adc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	106d      	asrs	r5, r5, #1
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	f04f 0e16 	mov.w	lr, #22
 8006aea:	4684      	mov	ip, r0
 8006aec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006af0:	eb0c 0401 	add.w	r4, ip, r1
 8006af4:	4294      	cmp	r4, r2
 8006af6:	bfde      	ittt	le
 8006af8:	1b12      	suble	r2, r2, r4
 8006afa:	eb04 0c01 	addle.w	ip, r4, r1
 8006afe:	1840      	addle	r0, r0, r1
 8006b00:	0052      	lsls	r2, r2, #1
 8006b02:	f1be 0e01 	subs.w	lr, lr, #1
 8006b06:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006b0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006b0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b12:	d1ed      	bne.n	8006af0 <__ieee754_sqrt+0x94>
 8006b14:	4671      	mov	r1, lr
 8006b16:	2720      	movs	r7, #32
 8006b18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006b1c:	4562      	cmp	r2, ip
 8006b1e:	eb04 060e 	add.w	r6, r4, lr
 8006b22:	dc02      	bgt.n	8006b2a <__ieee754_sqrt+0xce>
 8006b24:	d113      	bne.n	8006b4e <__ieee754_sqrt+0xf2>
 8006b26:	429e      	cmp	r6, r3
 8006b28:	d811      	bhi.n	8006b4e <__ieee754_sqrt+0xf2>
 8006b2a:	2e00      	cmp	r6, #0
 8006b2c:	eb06 0e04 	add.w	lr, r6, r4
 8006b30:	da43      	bge.n	8006bba <__ieee754_sqrt+0x15e>
 8006b32:	f1be 0f00 	cmp.w	lr, #0
 8006b36:	db40      	blt.n	8006bba <__ieee754_sqrt+0x15e>
 8006b38:	f10c 0801 	add.w	r8, ip, #1
 8006b3c:	eba2 020c 	sub.w	r2, r2, ip
 8006b40:	429e      	cmp	r6, r3
 8006b42:	bf88      	it	hi
 8006b44:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006b48:	1b9b      	subs	r3, r3, r6
 8006b4a:	4421      	add	r1, r4
 8006b4c:	46c4      	mov	ip, r8
 8006b4e:	0052      	lsls	r2, r2, #1
 8006b50:	3f01      	subs	r7, #1
 8006b52:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006b56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006b5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b5e:	d1dd      	bne.n	8006b1c <__ieee754_sqrt+0xc0>
 8006b60:	4313      	orrs	r3, r2
 8006b62:	d006      	beq.n	8006b72 <__ieee754_sqrt+0x116>
 8006b64:	1c4c      	adds	r4, r1, #1
 8006b66:	bf13      	iteet	ne
 8006b68:	3101      	addne	r1, #1
 8006b6a:	3001      	addeq	r0, #1
 8006b6c:	4639      	moveq	r1, r7
 8006b6e:	f021 0101 	bicne.w	r1, r1, #1
 8006b72:	1043      	asrs	r3, r0, #1
 8006b74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006b78:	0849      	lsrs	r1, r1, #1
 8006b7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006b7e:	07c2      	lsls	r2, r0, #31
 8006b80:	bf48      	it	mi
 8006b82:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006b86:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	463d      	mov	r5, r7
 8006b8e:	e77f      	b.n	8006a90 <__ieee754_sqrt+0x34>
 8006b90:	0ada      	lsrs	r2, r3, #11
 8006b92:	3815      	subs	r0, #21
 8006b94:	055b      	lsls	r3, r3, #21
 8006b96:	2a00      	cmp	r2, #0
 8006b98:	d0fa      	beq.n	8006b90 <__ieee754_sqrt+0x134>
 8006b9a:	02d7      	lsls	r7, r2, #11
 8006b9c:	d50a      	bpl.n	8006bb4 <__ieee754_sqrt+0x158>
 8006b9e:	f1c1 0420 	rsb	r4, r1, #32
 8006ba2:	fa23 f404 	lsr.w	r4, r3, r4
 8006ba6:	1e4d      	subs	r5, r1, #1
 8006ba8:	408b      	lsls	r3, r1
 8006baa:	4322      	orrs	r2, r4
 8006bac:	1b41      	subs	r1, r0, r5
 8006bae:	e788      	b.n	8006ac2 <__ieee754_sqrt+0x66>
 8006bb0:	4608      	mov	r0, r1
 8006bb2:	e7f0      	b.n	8006b96 <__ieee754_sqrt+0x13a>
 8006bb4:	0052      	lsls	r2, r2, #1
 8006bb6:	3101      	adds	r1, #1
 8006bb8:	e7ef      	b.n	8006b9a <__ieee754_sqrt+0x13e>
 8006bba:	46e0      	mov	r8, ip
 8006bbc:	e7be      	b.n	8006b3c <__ieee754_sqrt+0xe0>
 8006bbe:	bf00      	nop
 8006bc0:	7ff00000 	.word	0x7ff00000

08006bc4 <_init>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	bf00      	nop
 8006bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bca:	bc08      	pop	{r3}
 8006bcc:	469e      	mov	lr, r3
 8006bce:	4770      	bx	lr

08006bd0 <_fini>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	bf00      	nop
 8006bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd6:	bc08      	pop	{r3}
 8006bd8:	469e      	mov	lr, r3
 8006bda:	4770      	bx	lr
