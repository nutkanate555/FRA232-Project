
Project000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d08  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008ea0  08008ea0  00018ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed8  08008ed8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008ed8  08008ed8  00018ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ee0  08008ee0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ee0  08008ee0  00018ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee4  08008ee4  00018ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000088  08008f70  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08008f70  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d35  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203d  00000000  00000000  00030ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00032e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00033e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f23  00000000  00000000  00034d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001173f  00000000  00000000  0004bc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a86  00000000  00000000  0005d3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eee38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000493c  00000000  00000000  000eee8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008e88 	.word	0x08008e88

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	08008e88 	.word	0x08008e88

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96e 	b.w	80010a0 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468c      	mov	ip, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8083 	bne.w	8000ef2 <__udivmoddi4+0x116>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4617      	mov	r7, r2
 8000df0:	d947      	bls.n	8000e82 <__udivmoddi4+0xa6>
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b142      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	f1c2 0020 	rsb	r0, r2, #32
 8000dfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	ea40 0c01 	orr.w	ip, r0, r1
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fbbc f6f8 	udiv	r6, ip, r8
 8000e14:	fa1f fe87 	uxth.w	lr, r7
 8000e18:	fb08 c116 	mls	r1, r8, r6, ip
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f10e 	mul.w	r1, r6, lr
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x60>
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 8119 	bcs.w	8001064 <__udivmoddi4+0x288>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 8116 	bls.w	8001064 <__udivmoddi4+0x288>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	443b      	add	r3, r7
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x8c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	f080 8105 	bcs.w	8001068 <__udivmoddi4+0x28c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8102 	bls.w	8001068 <__udivmoddi4+0x28c>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6c:	eba4 040e 	sub.w	r4, r4, lr
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa0>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	b902      	cbnz	r2, 8000e86 <__udivmoddi4+0xaa>
 8000e84:	deff      	udf	#255	; 0xff
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d150      	bne.n	8000f30 <__udivmoddi4+0x154>
 8000e8e:	1bcb      	subs	r3, r1, r7
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	2601      	movs	r6, #1
 8000e9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb08 f30c 	mul.w	r3, r8, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0xe4>
 8000eb0:	1879      	adds	r1, r7, r1
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0xe2>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	f200 80e9 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ecc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x10c>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x10a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80d9 	bhi.w	8001098 <__udivmoddi4+0x2bc>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e7bf      	b.n	8000e72 <__udivmoddi4+0x96>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0x12e>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	f000 80b1 	beq.w	800105e <__udivmoddi4+0x282>
 8000efc:	2600      	movs	r6, #0
 8000efe:	e9c5 0100 	strd	r0, r1, [r5]
 8000f02:	4630      	mov	r0, r6
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f683 	clz	r6, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d14a      	bne.n	8000fa8 <__udivmoddi4+0x1cc>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0x140>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80b8 	bhi.w	800108c <__udivmoddi4+0x2b0>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d0a8      	beq.n	8000e7c <__udivmoddi4+0xa0>
 8000f2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0xa0>
 8000f30:	f1c2 0320 	rsb	r3, r2, #32
 8000f34:	fa20 f603 	lsr.w	r6, r0, r3
 8000f38:	4097      	lsls	r7, r2
 8000f3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	4330      	orrs	r0, r6
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f4c:	fa1f f887 	uxth.w	r8, r7
 8000f50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f58:	fb06 f108 	mul.w	r1, r6, r8
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x19c>
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f6a:	f080 808d 	bcs.w	8001088 <__udivmoddi4+0x2ac>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	f240 808a 	bls.w	8001088 <__udivmoddi4+0x2ac>
 8000f74:	3e02      	subs	r6, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	b281      	uxth	r1, r0
 8000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb00 f308 	mul.w	r3, r0, r8
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d907      	bls.n	8000fa0 <__udivmoddi4+0x1c4>
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f96:	d273      	bcs.n	8001080 <__udivmoddi4+0x2a4>
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d971      	bls.n	8001080 <__udivmoddi4+0x2a4>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4439      	add	r1, r7
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa6:	e778      	b.n	8000e9a <__udivmoddi4+0xbe>
 8000fa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000fac:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fba:	fa01 f306 	lsl.w	r3, r1, r6
 8000fbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	0c3b      	lsrs	r3, r7, #16
 8000fca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fce:	fa1f f884 	uxth.w	r8, r4
 8000fd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fda:	fb09 fa08 	mul.w	sl, r9, r8
 8000fde:	458a      	cmp	sl, r1
 8000fe0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x220>
 8000fea:	1861      	adds	r1, r4, r1
 8000fec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff0:	d248      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8000ff2:	458a      	cmp	sl, r1
 8000ff4:	d946      	bls.n	8001084 <__udivmoddi4+0x2a8>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4421      	add	r1, r4
 8000ffc:	eba1 010a 	sub.w	r1, r1, sl
 8001000:	b2bf      	uxth	r7, r7
 8001002:	fbb1 f0fe 	udiv	r0, r1, lr
 8001006:	fb0e 1110 	mls	r1, lr, r0, r1
 800100a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100e:	fb00 f808 	mul.w	r8, r0, r8
 8001012:	45b8      	cmp	r8, r7
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x24a>
 8001016:	19e7      	adds	r7, r4, r7
 8001018:	f100 31ff 	add.w	r1, r0, #4294967295
 800101c:	d22e      	bcs.n	800107c <__udivmoddi4+0x2a0>
 800101e:	45b8      	cmp	r8, r7
 8001020:	d92c      	bls.n	800107c <__udivmoddi4+0x2a0>
 8001022:	3802      	subs	r0, #2
 8001024:	4427      	add	r7, r4
 8001026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102a:	eba7 0708 	sub.w	r7, r7, r8
 800102e:	fba0 8902 	umull	r8, r9, r0, r2
 8001032:	454f      	cmp	r7, r9
 8001034:	46c6      	mov	lr, r8
 8001036:	4649      	mov	r1, r9
 8001038:	d31a      	bcc.n	8001070 <__udivmoddi4+0x294>
 800103a:	d017      	beq.n	800106c <__udivmoddi4+0x290>
 800103c:	b15d      	cbz	r5, 8001056 <__udivmoddi4+0x27a>
 800103e:	ebb3 020e 	subs.w	r2, r3, lr
 8001042:	eb67 0701 	sbc.w	r7, r7, r1
 8001046:	fa07 fc0c 	lsl.w	ip, r7, ip
 800104a:	40f2      	lsrs	r2, r6
 800104c:	ea4c 0202 	orr.w	r2, ip, r2
 8001050:	40f7      	lsrs	r7, r6
 8001052:	e9c5 2700 	strd	r2, r7, [r5]
 8001056:	2600      	movs	r6, #0
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	462e      	mov	r6, r5
 8001060:	4628      	mov	r0, r5
 8001062:	e70b      	b.n	8000e7c <__udivmoddi4+0xa0>
 8001064:	4606      	mov	r6, r0
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0x60>
 8001068:	4618      	mov	r0, r3
 800106a:	e6fd      	b.n	8000e68 <__udivmoddi4+0x8c>
 800106c:	4543      	cmp	r3, r8
 800106e:	d2e5      	bcs.n	800103c <__udivmoddi4+0x260>
 8001070:	ebb8 0e02 	subs.w	lr, r8, r2
 8001074:	eb69 0104 	sbc.w	r1, r9, r4
 8001078:	3801      	subs	r0, #1
 800107a:	e7df      	b.n	800103c <__udivmoddi4+0x260>
 800107c:	4608      	mov	r0, r1
 800107e:	e7d2      	b.n	8001026 <__udivmoddi4+0x24a>
 8001080:	4660      	mov	r0, ip
 8001082:	e78d      	b.n	8000fa0 <__udivmoddi4+0x1c4>
 8001084:	4681      	mov	r9, r0
 8001086:	e7b9      	b.n	8000ffc <__udivmoddi4+0x220>
 8001088:	4666      	mov	r6, ip
 800108a:	e775      	b.n	8000f78 <__udivmoddi4+0x19c>
 800108c:	4630      	mov	r0, r6
 800108e:	e74a      	b.n	8000f26 <__udivmoddi4+0x14a>
 8001090:	f1ac 0c02 	sub.w	ip, ip, #2
 8001094:	4439      	add	r1, r7
 8001096:	e713      	b.n	8000ec0 <__udivmoddi4+0xe4>
 8001098:	3802      	subs	r0, #2
 800109a:	443c      	add	r4, r7
 800109c:	e724      	b.n	8000ee8 <__udivmoddi4+0x10c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010aa:	f002 faf5 	bl	8003698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ae:	f000 f971 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b2:	f000 fb73 	bl	800179c <MX_GPIO_Init>
  MX_DMA_Init();
 80010b6:	f000 fb49 	bl	800174c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010ba:	f000 fb1b 	bl	80016f4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010be:	f000 f9ff 	bl	80014c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c2:	f000 fa55 	bl	8001570 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010c6:	f000 fa9f 	bl	8001608 <MX_TIM3_Init>
  MX_I2C1_Init();
 80010ca:	f000 f9cb 	bl	8001464 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010ce:	48a1      	ldr	r0, [pc, #644]	; (8001354 <main+0x2b0>)
 80010d0:	f005 fd44 	bl	8006b5c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010d4:	213c      	movs	r1, #60	; 0x3c
 80010d6:	48a0      	ldr	r0, [pc, #640]	; (8001358 <main+0x2b4>)
 80010d8:	f005 ff52 	bl	8006f80 <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010dc:	489f      	ldr	r0, [pc, #636]	; (800135c <main+0x2b8>)
 80010de:	f005 fce3 	bl	8006aa8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e2:	2100      	movs	r1, #0
 80010e4:	489d      	ldr	r0, [pc, #628]	; (800135c <main+0x2b8>)
 80010e6:	f005 fdf5 	bl	8006cd4 <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010ea:	489d      	ldr	r0, [pc, #628]	; (8001360 <main+0x2bc>)
 80010ec:	f000 fc9a 	bl	8001a24 <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010f0:	499b      	ldr	r1, [pc, #620]	; (8001360 <main+0x2bc>)
 80010f2:	489c      	ldr	r0, [pc, #624]	; (8001364 <main+0x2c0>)
 80010f4:	f000 fcac 	bl	8001a50 <TrajectoryGenerationStructureInit>

  VelocityControllerInit(&VelocityPIDController, &TrjStruc);
 80010f8:	499a      	ldr	r1, [pc, #616]	; (8001364 <main+0x2c0>)
 80010fa:	489b      	ldr	r0, [pc, #620]	; (8001368 <main+0x2c4>)
 80010fc:	f000 fd24 	bl	8001b48 <VelocityControllerInit>
  DisplacementControllerInit(&PositionPIDController, &TrjStruc);
 8001100:	4998      	ldr	r1, [pc, #608]	; (8001364 <main+0x2c0>)
 8001102:	489a      	ldr	r0, [pc, #616]	; (800136c <main+0x2c8>)
 8001104:	f000 fd54 	bl	8001bb0 <DisplacementControllerInit>

  ///UART init
  UART2.huart = &huart2;
 8001108:	4b99      	ldr	r3, [pc, #612]	; (8001370 <main+0x2cc>)
 800110a:	4a9a      	ldr	r2, [pc, #616]	; (8001374 <main+0x2d0>)
 800110c:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 800110e:	4b98      	ldr	r3, [pc, #608]	; (8001370 <main+0x2cc>)
 8001110:	22ff      	movs	r2, #255	; 0xff
 8001112:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8001114:	4b96      	ldr	r3, [pc, #600]	; (8001370 <main+0x2cc>)
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 800111a:	4895      	ldr	r0, [pc, #596]	; (8001370 <main+0x2cc>)
 800111c:	f001 facc 	bl	80026b8 <UARTInit>
  UARTResetStart(&UART2);
 8001120:	4893      	ldr	r0, [pc, #588]	; (8001370 <main+0x2cc>)
 8001122:	f001 faf1 	bl	8002708 <UARTResetStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 8001126:	4892      	ldr	r0, [pc, #584]	; (8001370 <main+0x2cc>)
 8001128:	f001 fb12 	bl	8002750 <UARTReadChar>
 800112c:	4603      	mov	r3, r0
 800112e:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 8001130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <main+0xa2>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 800113a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113e:	498c      	ldr	r1, [pc, #560]	; (8001370 <main+0x2cc>)
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fbed 	bl	8002920 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 8001146:	4b8c      	ldr	r3, [pc, #560]	; (8001378 <main+0x2d4>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b06      	cmp	r3, #6
 800114c:	d8eb      	bhi.n	8001126 <main+0x82>
 800114e:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <main+0xb0>)
 8001150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001154:	08001127 	.word	0x08001127
 8001158:	08001127 	.word	0x08001127
 800115c:	08001171 	.word	0x08001171
 8001160:	08001177 	.word	0x08001177
 8001164:	08001183 	.word	0x08001183
 8001168:	080012b3 	.word	0x080012b3
 800116c:	080012bb 	.word	0x080012bb
	  		  break;
	  	  case STATE_Idle:
		  	  break;

	  	  case STATE_PrepareDATA:
	  		  TrajectoryGenerationPrepareDATA();
 8001170:	f000 fd86 	bl	8001c80 <TrajectoryGenerationPrepareDATA>
		  	  break;
 8001174:	e0ec      	b.n	8001350 <main+0x2ac>

	  	  case STATE_Calculation:
	  		  TrajectoryGenerationCalculation();
 8001176:	f000 fec7 	bl	8001f08 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 800117a:	4b7f      	ldr	r3, [pc, #508]	; (8001378 <main+0x2d4>)
 800117c:	2204      	movs	r2, #4
 800117e:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001180:	e0e6      	b.n	8001350 <main+0x2ac>

	   	  case STATE_Link_Moving:
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8001182:	f000 fc35 	bl	80019f0 <micros>
 8001186:	4b77      	ldr	r3, [pc, #476]	; (8001364 <main+0x2c0>)
 8001188:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800118c:	1a84      	subs	r4, r0, r2
 800118e:	eb61 0503 	sbc.w	r5, r1, r3
 8001192:	4b74      	ldr	r3, [pc, #464]	; (8001364 <main+0x2c0>)
 8001194:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001198:	429d      	cmp	r5, r3
 800119a:	bf08      	it	eq
 800119c:	4294      	cmpeq	r4, r2
 800119e:	f0c0 80d2 	bcc.w	8001346 <main+0x2a2>
	   		  {
	   			  // GEN Trajectory
	   			  TrajectoryGenerationProcess();
 80011a2:	f000 ffc1 	bl	8002128 <TrajectoryGenerationProcess>
	   			  EncoderVelocityAndPosition_Update();
 80011a6:	f000 fb87 	bl	80018b8 <EncoderVelocityAndPosition_Update>
	   			  PIDController2in1();  ///use only position
 80011aa:	f001 fa0d 	bl	80025c8 <PIDController2in1>
	   			  Plant_input = PositionPIDController.ControllerOutput;
 80011ae:	4b6f      	ldr	r3, [pc, #444]	; (800136c <main+0x2c8>)
 80011b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b8:	ee17 2a90 	vmov	r2, s15
 80011bc:	4b6f      	ldr	r3, [pc, #444]	; (800137c <main+0x2d8>)
 80011be:	601a      	str	r2, [r3, #0]
	   			  DCMotorStruc.PWMOut = abs(Plant_input);
 80011c0:	4b6e      	ldr	r3, [pc, #440]	; (800137c <main+0x2d8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bfb8      	it	lt
 80011c8:	425b      	neglt	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b6c      	ldr	r3, [pc, #432]	; (8001380 <main+0x2dc>)
 80011ce:	605a      	str	r2, [r3, #4]
	   			  if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 80011d0:	4b6b      	ldr	r3, [pc, #428]	; (8001380 <main+0x2dc>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80011d8:	4293      	cmp	r3, r2
 80011da:	d903      	bls.n	80011e4 <main+0x140>
	   			  {
	   				 DCMotorStruc.PWMOut = 10000;
 80011dc:	4b68      	ldr	r3, [pc, #416]	; (8001380 <main+0x2dc>)
 80011de:	f242 7210 	movw	r2, #10000	; 0x2710
 80011e2:	605a      	str	r2, [r3, #4]
	   			  }

	   			  if (Plant_input >= 0) /// Setting DIR
	   			  {
	   				  DCMotorStruc.DIR = 1;
 80011e4:	4b66      	ldr	r3, [pc, #408]	; (8001380 <main+0x2dc>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
	   			  }
	   			  else if (Plant_input < 0)
	   			  {
	   				  DCMotorStruc.DIR = 0;
	   			  }
	   			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 80011ea:	4b65      	ldr	r3, [pc, #404]	; (8001380 <main+0x2dc>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	4864      	ldr	r0, [pc, #400]	; (8001384 <main+0x2e0>)
 80011f4:	f003 f980 	bl	80044f8 <HAL_GPIO_WritePin>

	   			  PositionPIDController.OutputFeedback = TrjStruc.AngularDisplacementDesire;  /// for testing
 80011f8:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <main+0x2c0>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4a5b      	ldr	r2, [pc, #364]	; (800136c <main+0x2c8>)
 80011fe:	6153      	str	r3, [r2, #20]

	   			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8001200:	4b56      	ldr	r3, [pc, #344]	; (800135c <main+0x2b8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a5e      	ldr	r2, [pc, #376]	; (8001380 <main+0x2dc>)
 8001206:	6852      	ldr	r2, [r2, #4]
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
	   			  TrjStruc.Loop_Timestamp = micros();
 800120a:	f000 fbf1 	bl	80019f0 <micros>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4954      	ldr	r1, [pc, #336]	; (8001364 <main+0x2c0>)
 8001214:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 1) &&
 8001218:	4b54      	ldr	r3, [pc, #336]	; (800136c <main+0x2c8>)
 800121a:	ed93 7a05 	vldr	s14, [r3, #20]
 800121e:	4b51      	ldr	r3, [pc, #324]	; (8001364 <main+0x2c0>)
 8001220:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800122c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001234:	d900      	bls.n	8001238 <main+0x194>
	   				 Moving_Link_Task_Flag = 0;
	   			  }

	   		  }

	  		  break;
 8001236:	e086      	b.n	8001346 <main+0x2a2>
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 1) &&
 8001238:	4b4c      	ldr	r3, [pc, #304]	; (800136c <main+0x2c8>)
 800123a:	ed93 7a05 	vldr	s14, [r3, #20]
 800123e:	4b49      	ldr	r3, [pc, #292]	; (8001364 <main+0x2c0>)
 8001240:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001248:	ee77 7ae6 	vsub.f32	s15, s15, s13
	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 1) &&
 800124c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001254:	da00      	bge.n	8001258 <main+0x1b4>
	  		  break;
 8001256:	e076      	b.n	8001346 <main+0x2a2>
						  (Moving_Link_Task_Flag == 1))
 8001258:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <main+0x2e4>)
 800125a:	781b      	ldrb	r3, [r3, #0]
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 1) &&
 800125c:	2b01      	cmp	r3, #1
 800125e:	d172      	bne.n	8001346 <main+0x2a2>
	   				  if(MovingLinkMode == LMM_Set_Pos_Directly)
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <main+0x2e8>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d10d      	bne.n	8001284 <main+0x1e0>
	   					Munmunbot_State = STATE_Idle;
 8001268:	4b43      	ldr	r3, [pc, #268]	; (8001378 <main+0x2d4>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
	   					MovingLinkMode = LMM_Not_Set;
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <main+0x2e8>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001274:	4b39      	ldr	r3, [pc, #228]	; (800135c <main+0x2b8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2200      	movs	r2, #0
 800127a:	635a      	str	r2, [r3, #52]	; 0x34
	   					ACK2Return(&UART2);
 800127c:	483c      	ldr	r0, [pc, #240]	; (8001370 <main+0x2cc>)
 800127e:	f001 fb3b 	bl	80028f8 <ACK2Return>
 8001282:	e00e      	b.n	80012a2 <main+0x1fe>
	   				  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 8001284:	4b41      	ldr	r3, [pc, #260]	; (800138c <main+0x2e8>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d003      	beq.n	8001294 <main+0x1f0>
 800128c:	4b3f      	ldr	r3, [pc, #252]	; (800138c <main+0x2e8>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b03      	cmp	r3, #3
 8001292:	d106      	bne.n	80012a2 <main+0x1fe>
	   					Munmunbot_State = STATE_End_Effector_Working;
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <main+0x2d4>)
 8001296:	2205      	movs	r2, #5
 8001298:	701a      	strb	r2, [r3, #0]
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <main+0x2b8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	635a      	str	r2, [r3, #52]	; 0x34
	   				 TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 80012a2:	4b32      	ldr	r3, [pc, #200]	; (800136c <main+0x2c8>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	4a2f      	ldr	r2, [pc, #188]	; (8001364 <main+0x2c0>)
 80012a8:	65d3      	str	r3, [r2, #92]	; 0x5c
	   				 Moving_Link_Task_Flag = 0;
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <main+0x2e4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
	  		  break;
 80012b0:	e049      	b.n	8001346 <main+0x2a2>
	  	  case STATE_End_Effector_Working:
	  		  ///I2C implement
	  		  Munmunbot_State = STATE_PrepareDATA; /// for testing
 80012b2:	4b31      	ldr	r3, [pc, #196]	; (8001378 <main+0x2d4>)
 80012b4:	2202      	movs	r2, #2
 80012b6:	701a      	strb	r2, [r3, #0]


	  		  break;
 80012b8:	e04a      	b.n	8001350 <main+0x2ac>

	  	  case STATE_SetHome:

	  		  switch (SethomeMode)
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <main+0x2ec>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d02a      	beq.n	8001318 <main+0x274>
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	f73f af2f 	bgt.w	8001126 <main+0x82>
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <main+0x22e>
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d00e      	beq.n	80012ee <main+0x24a>
 80012d0:	e729      	b.n	8001126 <main+0x82>
	  		  {
				case SetHomeState_0:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	482b      	ldr	r0, [pc, #172]	; (8001384 <main+0x2e0>)
 80012d8:	f003 f90e 	bl	80044f8 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <main+0x2b8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34
					SethomeMode = SetHomeState_1;
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <main+0x2ec>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]

					break;
 80012ec:	e030      	b.n	8001350 <main+0x2ac>
				case SetHomeState_1:
					if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 1)
 80012ee:	2140      	movs	r1, #64	; 0x40
 80012f0:	4824      	ldr	r0, [pc, #144]	; (8001384 <main+0x2e0>)
 80012f2:	f003 f8e9 	bl	80044c8 <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d126      	bne.n	800134a <main+0x2a6>
					{
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	4820      	ldr	r0, [pc, #128]	; (8001384 <main+0x2e0>)
 8001302:	f003 f8f9 	bl	80044f8 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <main+0x2b8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130e:	635a      	str	r2, [r3, #52]	; 0x34
						SethomeMode = SetHomeState_2;
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <main+0x2ec>)
 8001312:	2202      	movs	r2, #2
 8001314:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001316:	e018      	b.n	800134a <main+0x2a6>
				case SetHomeState_2:
					if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0)
 8001318:	2140      	movs	r1, #64	; 0x40
 800131a:	481a      	ldr	r0, [pc, #104]	; (8001384 <main+0x2e0>)
 800131c:	f003 f8d4 	bl	80044c8 <HAL_GPIO_ReadPin>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d113      	bne.n	800134e <main+0x2aa>
					{
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <main+0x2b8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2200      	movs	r2, #0
 800132c:	635a      	str	r2, [r3, #52]	; 0x34
						Encoder_SetHome_Position();
 800132e:	f000 fb33 	bl	8001998 <Encoder_SetHome_Position>
						SethomeMode = SetHomeState_0;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <main+0x2ec>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
						Munmunbot_State = STATE_Idle;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <main+0x2d4>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
						ACK1Return(&UART2);
 800133e:	480c      	ldr	r0, [pc, #48]	; (8001370 <main+0x2cc>)
 8001340:	f001 fac8 	bl	80028d4 <ACK1Return>
					}
				    break;
 8001344:	e003      	b.n	800134e <main+0x2aa>
	  		  break;
 8001346:	bf00      	nop
 8001348:	e6ed      	b.n	8001126 <main+0x82>
					break;
 800134a:	bf00      	nop
 800134c:	e6eb      	b.n	8001126 <main+0x82>
				    break;
 800134e:	bf00      	nop
  {
 8001350:	e6e9      	b.n	8001126 <main+0x82>
 8001352:	bf00      	nop
 8001354:	200004ac 	.word	0x200004ac
 8001358:	20000464 	.word	0x20000464
 800135c:	200003bc 	.word	0x200003bc
 8001360:	200001c8 	.word	0x200001c8
 8001364:	20000158 	.word	0x20000158
 8001368:	20000128 	.word	0x20000128
 800136c:	200000f8 	.word	0x200000f8
 8001370:	200000b0 	.word	0x200000b0
 8001374:	200004f4 	.word	0x200004f4
 8001378:	200000d1 	.word	0x200000d1
 800137c:	200000ec 	.word	0x200000ec
 8001380:	200000c8 	.word	0x200000c8
 8001384:	40020800 	.word	0x40020800
 8001388:	200000f0 	.word	0x200000f0
 800138c:	200000e6 	.word	0x200000e6
 8001390:	200000d2 	.word	0x200000d2

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b094      	sub	sp, #80	; 0x50
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	2230      	movs	r2, #48	; 0x30
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f007 fbf8 	bl	8008b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <SystemClock_Config+0xc8>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	4a26      	ldr	r2, [pc, #152]	; (800145c <SystemClock_Config+0xc8>)
 80013c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c6:	6413      	str	r3, [r2, #64]	; 0x40
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <SystemClock_Config+0xc8>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <SystemClock_Config+0xcc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a20      	ldr	r2, [pc, #128]	; (8001460 <SystemClock_Config+0xcc>)
 80013de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <SystemClock_Config+0xcc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f0:	2302      	movs	r3, #2
 80013f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f8:	2310      	movs	r3, #16
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fc:	2302      	movs	r3, #2
 80013fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001400:	2300      	movs	r3, #0
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001404:	2308      	movs	r3, #8
 8001406:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001408:	2364      	movs	r3, #100	; 0x64
 800140a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140c:	2302      	movs	r3, #2
 800140e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001410:	2304      	movs	r3, #4
 8001412:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4618      	mov	r0, r3
 800141a:	f004 fe81 	bl	8006120 <HAL_RCC_OscConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001424:	f001 fe62 	bl	80030ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001428:	230f      	movs	r3, #15
 800142a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142c:	2302      	movs	r3, #2
 800142e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001438:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	2103      	movs	r1, #3
 8001444:	4618      	mov	r0, r3
 8001446:	f005 f8e3 	bl	8006610 <HAL_RCC_ClockConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001450:	f001 fe4c 	bl	80030ec <Error_Handler>
  }
}
 8001454:	bf00      	nop
 8001456:	3750      	adds	r7, #80	; 0x50
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000

08001464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_I2C1_Init+0x50>)
 800146a:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <MX_I2C1_Init+0x54>)
 800146c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001470:	4a12      	ldr	r2, [pc, #72]	; (80014bc <MX_I2C1_Init+0x58>)
 8001472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_I2C1_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001486:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <MX_I2C1_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_I2C1_Init+0x50>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_I2C1_Init+0x50>)
 80014a2:	f003 f843 	bl	800452c <HAL_I2C_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014ac:	f001 fe1e 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000368 	.word	0x20000368
 80014b8:	40005400 	.word	0x40005400
 80014bc:	00061a80 	.word	0x00061a80

080014c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2224      	movs	r2, #36	; 0x24
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f007 fb62 	bl	8008b98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <MX_TIM1_Init+0xa8>)
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <MX_TIM1_Init+0xac>)
 80014e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <MX_TIM1_Init+0xa8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <MX_TIM1_Init+0xa8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24575;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <MX_TIM1_Init+0xa8>)
 80014f0:	f645 72ff 	movw	r2, #24575	; 0x5fff
 80014f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <MX_TIM1_Init+0xa8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_TIM1_Init+0xa8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_TIM1_Init+0xa8>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001508:	2303      	movs	r3, #3
 800150a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001510:	2301      	movs	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001518:	2302      	movs	r3, #2
 800151a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001520:	2301      	movs	r3, #1
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4619      	mov	r1, r3
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_TIM1_Init+0xa8>)
 8001534:	f005 fc7e 	bl	8006e34 <HAL_TIM_Encoder_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800153e:	f001 fdd5 	bl	80030ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <MX_TIM1_Init+0xa8>)
 8001550:	f006 fb22 	bl	8007b98 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800155a:	f001 fdc7 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3730      	adds	r7, #48	; 0x30
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000464 	.word	0x20000464
 800156c:	40010000 	.word	0x40010000

08001570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_TIM2_Init+0x94>)
 800158e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_TIM2_Init+0x94>)
 8001596:	2263      	movs	r2, #99	; 0x63
 8001598:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_TIM2_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_TIM2_Init+0x94>)
 80015a2:	f04f 32ff 	mov.w	r2, #4294967295
 80015a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_TIM2_Init+0x94>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_TIM2_Init+0x94>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b4:	4813      	ldr	r0, [pc, #76]	; (8001604 <MX_TIM2_Init+0x94>)
 80015b6:	f005 fa27 	bl	8006a08 <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015c0:	f001 fd94 	bl	80030ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <MX_TIM2_Init+0x94>)
 80015d2:	f005 ff29 	bl	8007428 <HAL_TIM_ConfigClockSource>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015dc:	f001 fd86 	bl	80030ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e8:	463b      	mov	r3, r7
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_TIM2_Init+0x94>)
 80015ee:	f006 fad3 	bl	8007b98 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015f8:	f001 fd78 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200004ac 	.word	0x200004ac

08001608 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08e      	sub	sp, #56	; 0x38
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]
 8001636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001638:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <MX_TIM3_Init+0xe4>)
 800163a:	4a2d      	ldr	r2, [pc, #180]	; (80016f0 <MX_TIM3_Init+0xe8>)
 800163c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <MX_TIM3_Init+0xe4>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <MX_TIM3_Init+0xe4>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <MX_TIM3_Init+0xe4>)
 800164c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001650:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <MX_TIM3_Init+0xe4>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <MX_TIM3_Init+0xe4>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800165e:	4823      	ldr	r0, [pc, #140]	; (80016ec <MX_TIM3_Init+0xe4>)
 8001660:	f005 f9d2 	bl	8006a08 <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800166a:	f001 fd3f 	bl	80030ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001678:	4619      	mov	r1, r3
 800167a:	481c      	ldr	r0, [pc, #112]	; (80016ec <MX_TIM3_Init+0xe4>)
 800167c:	f005 fed4 	bl	8007428 <HAL_TIM_ConfigClockSource>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001686:	f001 fd31 	bl	80030ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800168a:	4818      	ldr	r0, [pc, #96]	; (80016ec <MX_TIM3_Init+0xe4>)
 800168c:	f005 fac8 	bl	8006c20 <HAL_TIM_PWM_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001696:	f001 fd29 	bl	80030ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016a2:	f107 0320 	add.w	r3, r7, #32
 80016a6:	4619      	mov	r1, r3
 80016a8:	4810      	ldr	r0, [pc, #64]	; (80016ec <MX_TIM3_Init+0xe4>)
 80016aa:	f006 fa75 	bl	8007b98 <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016b4:	f001 fd1a 	bl	80030ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b8:	2360      	movs	r3, #96	; 0x60
 80016ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	4619      	mov	r1, r3
 80016ce:	4807      	ldr	r0, [pc, #28]	; (80016ec <MX_TIM3_Init+0xe4>)
 80016d0:	f005 fdec 	bl	80072ac <HAL_TIM_PWM_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016da:	f001 fd07 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016de:	4803      	ldr	r0, [pc, #12]	; (80016ec <MX_TIM3_Init+0xe4>)
 80016e0:	f001 fe0e 	bl	8003300 <HAL_TIM_MspPostInit>

}
 80016e4:	bf00      	nop
 80016e6:	3738      	adds	r7, #56	; 0x38
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200003bc 	.word	0x200003bc
 80016f0:	40000400 	.word	0x40000400

080016f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_USART2_UART_Init+0x50>)
 80016fa:	4a13      	ldr	r2, [pc, #76]	; (8001748 <MX_USART2_UART_Init+0x54>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_USART2_UART_Init+0x50>)
 8001700:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_USART2_UART_Init+0x50>)
 8001708:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800170c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <MX_USART2_UART_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_USART2_UART_Init+0x50>)
 8001716:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800171a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_USART2_UART_Init+0x50>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_USART2_UART_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_USART2_UART_Init+0x50>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_USART2_UART_Init+0x50>)
 8001730:	f006 fab4 	bl	8007c9c <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800173a:	f001 fcd7 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200004f4 	.word	0x200004f4
 8001748:	40004400 	.word	0x40004400

0800174c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <MX_DMA_Init+0x4c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <MX_DMA_Init+0x4c>)
 800175c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <MX_DMA_Init+0x4c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	2010      	movs	r0, #16
 8001774:	f002 f8dd 	bl	8003932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001778:	2010      	movs	r0, #16
 800177a:	f002 f8f6 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	2011      	movs	r0, #17
 8001784:	f002 f8d5 	bl	8003932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001788:	2011      	movs	r0, #17
 800178a:	f002 f8ee 	bl	800396a <HAL_NVIC_EnableIRQ>

}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800

0800179c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <MX_GPIO_Init+0x10c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a3b      	ldr	r2, [pc, #236]	; (80018a8 <MX_GPIO_Init+0x10c>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b39      	ldr	r3, [pc, #228]	; (80018a8 <MX_GPIO_Init+0x10c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <MX_GPIO_Init+0x10c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a34      	ldr	r2, [pc, #208]	; (80018a8 <MX_GPIO_Init+0x10c>)
 80017d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <MX_GPIO_Init+0x10c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <MX_GPIO_Init+0x10c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a2d      	ldr	r2, [pc, #180]	; (80018a8 <MX_GPIO_Init+0x10c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <MX_GPIO_Init+0x10c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <MX_GPIO_Init+0x10c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a26      	ldr	r2, [pc, #152]	; (80018a8 <MX_GPIO_Init+0x10c>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <MX_GPIO_Init+0x10c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	2120      	movs	r1, #32
 8001826:	4821      	ldr	r0, [pc, #132]	; (80018ac <MX_GPIO_Init+0x110>)
 8001828:	f002 fe66 	bl	80044f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	481f      	ldr	r0, [pc, #124]	; (80018b0 <MX_GPIO_Init+0x114>)
 8001832:	f002 fe61 	bl	80044f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <MX_GPIO_Init+0x118>)
 800183e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4819      	ldr	r0, [pc, #100]	; (80018b0 <MX_GPIO_Init+0x114>)
 800184c:	f002 fcb8 	bl	80041c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001850:	2320      	movs	r3, #32
 8001852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	4811      	ldr	r0, [pc, #68]	; (80018ac <MX_GPIO_Init+0x110>)
 8001868:	f002 fcaa 	bl	80041c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitch_Signal_Pin */
  GPIO_InitStruct.Pin = LimitSwitch_Signal_Pin;
 800186c:	2340      	movs	r3, #64	; 0x40
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitch_Signal_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	480c      	ldr	r0, [pc, #48]	; (80018b0 <MX_GPIO_Init+0x114>)
 8001880:	f002 fc9e 	bl	80041c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_GPIO_Init+0x114>)
 800189c:	f002 fc90 	bl	80041c0 <HAL_GPIO_Init>

}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020800 	.word	0x40020800
 80018b4:	10210000 	.word	0x10210000

080018b8 <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 4096
#define  MAX_ENCODER_PERIOD 8192

void EncoderVelocityAndPosition_Update()
{
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	ed2d 8b02 	vpush	{d8}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;
	static uint32_t Velocity_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 80018c2:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <EncoderVelocityAndPosition_Update+0xbc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	61fb      	str	r3, [r7, #28]

	uint64_t EncoderNowTimestamp = micros();
 80018ca:	f000 f891 	bl	80019f0 <micros>
 80018ce:	e9c7 0104 	strd	r0, r1, [r7, #16]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 80018d2:	4b29      	ldr	r3, [pc, #164]	; (8001978 <EncoderVelocityAndPosition_Update+0xc0>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018dc:	1a84      	subs	r4, r0, r2
 80018de:	eb61 0503 	sbc.w	r5, r1, r3
 80018e2:	e9c7 4502 	strd	r4, r5, [r7, #8]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80018e6:	4b25      	ldr	r3, [pc, #148]	; (800197c <EncoderVelocityAndPosition_Update+0xc4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	607b      	str	r3, [r7, #4]

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80018f0:	4a22      	ldr	r2, [pc, #136]	; (800197c <EncoderVelocityAndPosition_Update+0xc4>)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80018f6:	4920      	ldr	r1, [pc, #128]	; (8001978 <EncoderVelocityAndPosition_Update+0xc0>)
 80018f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018fc:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <EncoderVelocityAndPosition_Update+0xc8>)
 800190c:	edc3 7a05 	vstr	s15, [r3, #20]

	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <EncoderVelocityAndPosition_Update+0xcc>)
 8001914:	fb02 f303 	mul.w	r3, r2, r3
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001920:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001924:	f7ff f9fc 	bl	8000d20 <__aeabi_ul2f>
 8001928:	ee07 0a10 	vmov	s14, r0
 800192c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001934:	ee17 2a90 	vmov	r2, s15
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <EncoderVelocityAndPosition_Update+0xd0>)
 800193a:	601a      	str	r2, [r3, #0]

	// LPF
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*249))/250.0;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <EncoderVelocityAndPosition_Update+0xd0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <EncoderVelocityAndPosition_Update+0xd4>)
 800194a:	edd3 7a05 	vldr	s15, [r3, #20]
 800194e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001990 <EncoderVelocityAndPosition_Update+0xd8>
 8001952:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800195a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001994 <EncoderVelocityAndPosition_Update+0xdc>
 800195e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <EncoderVelocityAndPosition_Update+0xd4>)
 8001964:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	ecbd 8b02 	vpop	{d8}
 8001972:	bdb0      	pop	{r4, r5, r7, pc}
 8001974:	20000464 	.word	0x20000464
 8001978:	200001d8 	.word	0x200001d8
 800197c:	200001e0 	.word	0x200001e0
 8001980:	200000f8 	.word	0x200000f8
 8001984:	000f4240 	.word	0x000f4240
 8001988:	200001e4 	.word	0x200001e4
 800198c:	20000128 	.word	0x20000128
 8001990:	43790000 	.word	0x43790000
 8001994:	437a0000 	.word	0x437a0000

08001998 <Encoder_SetHome_Position>:

void Encoder_SetHome_Position()
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <Encoder_SetHome_Position+0x18>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <Encoder_SetHome_Position+0x1c>)
 80019a2:	6852      	ldr	r2, [r2, #4]
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	20000464 	.word	0x20000464
 80019b4:	200001c8 	.word	0x200001c8

080019b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b4b0      	push	{r4, r5, r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d109      	bne.n	80019dc <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	f112 34ff 	adds.w	r4, r2, #4294967295
 80019d2:	f143 0500 	adc.w	r5, r3, #0
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80019d8:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bcb0      	pop	{r4, r5, r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	200004ac 	.word	0x200004ac
 80019ec:	200000a8 	.word	0x200000a8

080019f0 <micros>:

uint64_t micros()
{
 80019f0:	b4b0      	push	{r4, r5, r7}
 80019f2:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <micros+0x2c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	4618      	mov	r0, r3
 80019fc:	f04f 0100 	mov.w	r1, #0
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <micros+0x30>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	1884      	adds	r4, r0, r2
 8001a08:	eb41 0503 	adc.w	r5, r1, r3
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	462b      	mov	r3, r5
}
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bcb0      	pop	{r4, r5, r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	200004ac 	.word	0x200004ac
 8001a20:	200000a8 	.word	0x200000a8

08001a24 <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a32:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	009a      	lsls	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 10;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	220a      	movs	r2, #10
 8001a42:	609a      	str	r2, [r3, #8]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.25*(CUSSvar->PPRxQEI))/3.141;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fcfc 	bl	800045c <__aeabi_ui2d>
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <TrajectoryGenerationStructureInit+0xe8>)
 8001a6a:	f7fe fd71 	bl	8000550 <__aeabi_dmul>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	a32e      	add	r3, pc, #184	; (adr r3, 8001b30 <TrajectoryGenerationStructureInit+0xe0>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fe92 	bl	80007a4 <__aeabi_ddiv>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff f832 	bl	8000af0 <__aeabi_d2f>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	615a      	str	r2, [r3, #20]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fcdc 	bl	800045c <__aeabi_ui2d>
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <TrajectoryGenerationStructureInit+0xec>)
 8001aaa:	f7fe fe7b 	bl	80007a4 <__aeabi_ddiv>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f7ff f81b 	bl	8000af0 <__aeabi_d2f>
 8001aba:	4602      	mov	r2, r0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = CUSSStruc.PPRxQEI;  /// PPRxQEI == 0 degree
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <TrajectoryGenerationStructureInit+0xf0>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	TGSvar->Mode = 0;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	669a      	str	r2, [r3, #104]	; 0x68
	TGSvar->Submode = 0;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	66da      	str	r2, [r3, #108]	; 0x6c
	TGSvar->Loop_Freq = 10000;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ae4:	649a      	str	r2, [r3, #72]	; 0x48
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aea:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <TrajectoryGenerationStructureInit+0xf4>)
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	9ba5e354 	.word	0x9ba5e354
 8001b34:	400920c4 	.word	0x400920c4
 8001b38:	3fd00000 	.word	0x3fd00000
 8001b3c:	404e0000 	.word	0x404e0000
 8001b40:	200001c8 	.word	0x200001c8
 8001b44:	000f4240 	.word	0x000f4240

08001b48 <VelocityControllerInit>:

void VelocityControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <VelocityControllerInit+0x58>)
 8001b56:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 0.2;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <VelocityControllerInit+0x5c>)
 8001b5c:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0.1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <VelocityControllerInit+0x60>)
 8001b62:	609a      	str	r2, [r3, #8]
	VCvar->Integral_Value = 0;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	f7fe fcb5 	bl	80004e4 <__aeabi_ul2d>
 8001b7a:	a307      	add	r3, pc, #28	; (adr r3, 8001b98 <VelocityControllerInit+0x50>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	f7fe fe10 	bl	80007a4 <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	412e8480 	.word	0x412e8480
 8001ba0:	40a00000 	.word	0x40a00000
 8001ba4:	3e4ccccd 	.word	0x3e4ccccd
 8001ba8:	3dcccccd 	.word	0x3dcccccd
 8001bac:	00000000 	.word	0x00000000

08001bb0 <DisplacementControllerInit>:

void DisplacementControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <DisplacementControllerInit+0x58>)
 8001bbe:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 0.2;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <DisplacementControllerInit+0x5c>)
 8001bc4:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
	VCvar->Integral_Value = 0;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7fe fc80 	bl	80004e4 <__aeabi_ul2d>
 8001be4:	a306      	add	r3, pc, #24	; (adr r3, 8001c00 <DisplacementControllerInit+0x50>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	f7fe fddb 	bl	80007a4 <__aeabi_ddiv>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	00000000 	.word	0x00000000
 8001c04:	412e8480 	.word	0x412e8480
 8001c08:	40a00000 	.word	0x40a00000
 8001c0c:	3e4ccccd 	.word	0x3e4ccccd

08001c10 <TrajectoryGenerationVelocityMaxSetting>:

void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp))/(60.0);   ///RPM to pps
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	6892      	ldr	r2, [r2, #8]
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc18 	bl	800045c <__aeabi_ui2d>
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <TrajectoryGenerationVelocityMaxSetting+0x6c>)
 8001c32:	f7fe fdb7 	bl	80007a4 <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7fe ff57 	bl	8000af0 <__aeabi_d2f>
 8001c42:	4602      	mov	r2, r0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	611a      	str	r2, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	404e0000 	.word	0x404e0000

08001c80 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	if (MovingLinkMode == LMM_Set_Pos_Directly)
 8001c84:	4b94      	ldr	r3, [pc, #592]	; (8001ed8 <TrajectoryGenerationPrepareDATA+0x258>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d165      	bne.n	8001d58 <TrajectoryGenerationPrepareDATA+0xd8>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 8001c8c:	4b93      	ldr	r3, [pc, #588]	; (8001edc <TrajectoryGenerationPrepareDATA+0x25c>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b93      	ldr	r3, [pc, #588]	; (8001ee0 <TrajectoryGenerationPrepareDATA+0x260>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	fb03 f302 	mul.w	r3, r3, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fbde 	bl	800045c <__aeabi_ui2d>
 8001ca0:	a38b      	add	r3, pc, #556	; (adr r3, 8001ed0 <TrajectoryGenerationPrepareDATA+0x250>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe fd7d 	bl	80007a4 <__aeabi_ddiv>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe ff1d 	bl	8000af0 <__aeabi_d2f>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4a8a      	ldr	r2, [pc, #552]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001cba:	6593      	str	r3, [r2, #88]	; 0x58
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 8001cbc:	4b89      	ldr	r3, [pc, #548]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001cbe:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001cc2:	4b87      	ldr	r3, [pc, #540]	; (8001ee0 <TrajectoryGenerationPrepareDATA+0x260>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	db0d      	blt.n	8001cf4 <TrajectoryGenerationPrepareDATA+0x74>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001cd8:	4b82      	ldr	r3, [pc, #520]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001cda:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001cde:	4b80      	ldr	r3, [pc, #512]	; (8001ee0 <TrajectoryGenerationPrepareDATA+0x260>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cee:	4b7d      	ldr	r3, [pc, #500]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001cf0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		  }
		  TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8001cf4:	4b7b      	ldr	r3, [pc, #492]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001cf6:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001cfa:	4b79      	ldr	r3, [pc, #484]	; (8001ee0 <TrajectoryGenerationPrepareDATA+0x260>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0a:	4b76      	ldr	r3, [pc, #472]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001d0c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

		  if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 8001d10:	4b74      	ldr	r3, [pc, #464]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001d12:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001d16:	4b73      	ldr	r3, [pc, #460]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001d18:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001d1c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	d00e      	beq.n	8001d44 <TrajectoryGenerationPrepareDATA+0xc4>
		  {
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8001d26:	4b6f      	ldr	r3, [pc, #444]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001d28:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001d2c:	4b6d      	ldr	r3, [pc, #436]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001d2e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001d32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d36:	4b6b      	ldr	r3, [pc, #428]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001d38:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			  Munmunbot_State = STATE_Calculation;
 8001d3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <TrajectoryGenerationPrepareDATA+0x268>)
 8001d3e:	2203      	movs	r2, #3
 8001d40:	701a      	strb	r2, [r3, #0]
	  else  ///shouldn't happen
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
	  }
}
 8001d42:	e0c1      	b.n	8001ec8 <TrajectoryGenerationPrepareDATA+0x248>
			Munmunbot_State = STATE_Idle;
 8001d44:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <TrajectoryGenerationPrepareDATA+0x268>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8001d4a:	4b63      	ldr	r3, [pc, #396]	; (8001ed8 <TrajectoryGenerationPrepareDATA+0x258>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
			ACK2Return(&UART2);
 8001d50:	4866      	ldr	r0, [pc, #408]	; (8001eec <TrajectoryGenerationPrepareDATA+0x26c>)
 8001d52:	f000 fdd1 	bl	80028f8 <ACK2Return>
}
 8001d56:	e0b7      	b.n	8001ec8 <TrajectoryGenerationPrepareDATA+0x248>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 8001d58:	4b5f      	ldr	r3, [pc, #380]	; (8001ed8 <TrajectoryGenerationPrepareDATA+0x258>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d004      	beq.n	8001d6a <TrajectoryGenerationPrepareDATA+0xea>
 8001d60:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <TrajectoryGenerationPrepareDATA+0x258>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	f040 80a8 	bne.w	8001eba <TrajectoryGenerationPrepareDATA+0x23a>
		  if (NumberOfStationToGo == 0)
 8001d6a:	4b61      	ldr	r3, [pc, #388]	; (8001ef0 <TrajectoryGenerationPrepareDATA+0x270>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10f      	bne.n	8001d92 <TrajectoryGenerationPrepareDATA+0x112>
				Munmunbot_State = STATE_Idle;
 8001d72:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <TrajectoryGenerationPrepareDATA+0x268>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 8001d78:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <TrajectoryGenerationPrepareDATA+0x274>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 8001d7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ef0 <TrajectoryGenerationPrepareDATA+0x270>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8001d84:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <TrajectoryGenerationPrepareDATA+0x258>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 8001d8a:	4858      	ldr	r0, [pc, #352]	; (8001eec <TrajectoryGenerationPrepareDATA+0x26c>)
 8001d8c:	f000 fdb4 	bl	80028f8 <ACK2Return>
		  if (NumberOfStationToGo == 0)
 8001d90:	e09a      	b.n	8001ec8 <TrajectoryGenerationPrepareDATA+0x248>
			Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 8001d92:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <TrajectoryGenerationPrepareDATA+0x274>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b57      	ldr	r3, [pc, #348]	; (8001ef8 <TrajectoryGenerationPrepareDATA+0x278>)
 8001d9a:	5c9a      	ldrb	r2, [r3, r2]
 8001d9c:	4b57      	ldr	r3, [pc, #348]	; (8001efc <TrajectoryGenerationPrepareDATA+0x27c>)
 8001d9e:	701a      	strb	r2, [r3, #0]
			if (Current_Station > 10)   //pass input
 8001da0:	4b56      	ldr	r3, [pc, #344]	; (8001efc <TrajectoryGenerationPrepareDATA+0x27c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b0a      	cmp	r3, #10
 8001da6:	d90c      	bls.n	8001dc2 <TrajectoryGenerationPrepareDATA+0x142>
				NumberOfStationPTR += 1;
 8001da8:	4b52      	ldr	r3, [pc, #328]	; (8001ef4 <TrajectoryGenerationPrepareDATA+0x274>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b50      	ldr	r3, [pc, #320]	; (8001ef4 <TrajectoryGenerationPrepareDATA+0x274>)
 8001db2:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 8001db4:	4b4e      	ldr	r3, [pc, #312]	; (8001ef0 <TrajectoryGenerationPrepareDATA+0x270>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <TrajectoryGenerationPrepareDATA+0x270>)
 8001dbe:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001dc0:	e082      	b.n	8001ec8 <TrajectoryGenerationPrepareDATA+0x248>
				TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0));   ///fix this if change algorithm
 8001dc2:	4b4e      	ldr	r3, [pc, #312]	; (8001efc <TrajectoryGenerationPrepareDATA+0x27c>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	4a4d      	ldr	r2, [pc, #308]	; (8001f00 <TrajectoryGenerationPrepareDATA+0x280>)
 8001dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <TrajectoryGenerationPrepareDATA+0x260>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	fb03 f302 	mul.w	r3, r3, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fb3f 	bl	800045c <__aeabi_ui2d>
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	4b48      	ldr	r3, [pc, #288]	; (8001f04 <TrajectoryGenerationPrepareDATA+0x284>)
 8001de4:	f7fe fcde 	bl	80007a4 <__aeabi_ddiv>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f7fe fe7e 	bl	8000af0 <__aeabi_d2f>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4a3b      	ldr	r2, [pc, #236]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001df8:	6593      	str	r3, [r2, #88]	; 0x58
				if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)  ///wrap input into 1 revolute. ///shouldn't happen
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001dfc:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001e00:	4b37      	ldr	r3, [pc, #220]	; (8001ee0 <TrajectoryGenerationPrepareDATA+0x260>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	db0d      	blt.n	8001e32 <TrajectoryGenerationPrepareDATA+0x1b2>
					TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001e16:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001e18:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <TrajectoryGenerationPrepareDATA+0x260>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	ee07 3a90 	vmov	s15, r3
 8001e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001e2e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001e34:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <TrajectoryGenerationPrepareDATA+0x260>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e48:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001e4a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				if (TrjStruc.Desire_Theta == TrjStruc.Start_Theta)
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001e50:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001e56:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001e5a:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e62:	d10f      	bne.n	8001e84 <TrajectoryGenerationPrepareDATA+0x204>
					NumberOfStationPTR += 1;
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <TrajectoryGenerationPrepareDATA+0x274>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <TrajectoryGenerationPrepareDATA+0x274>)
 8001e6e:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <TrajectoryGenerationPrepareDATA+0x270>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <TrajectoryGenerationPrepareDATA+0x270>)
 8001e7a:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_End_Effector_Working;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <TrajectoryGenerationPrepareDATA+0x268>)
 8001e7e:	2205      	movs	r2, #5
 8001e80:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001e82:	e021      	b.n	8001ec8 <TrajectoryGenerationPrepareDATA+0x248>
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001e86:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001e8c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <TrajectoryGenerationPrepareDATA+0x264>)
 8001e96:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
					Munmunbot_State = STATE_Calculation;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <TrajectoryGenerationPrepareDATA+0x268>)
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <TrajectoryGenerationPrepareDATA+0x274>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <TrajectoryGenerationPrepareDATA+0x274>)
 8001eaa:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8001eac:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <TrajectoryGenerationPrepareDATA+0x270>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <TrajectoryGenerationPrepareDATA+0x270>)
 8001eb6:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001eb8:	e006      	b.n	8001ec8 <TrajectoryGenerationPrepareDATA+0x248>
		MovingLinkMode = LMM_Not_Set;
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <TrajectoryGenerationPrepareDATA+0x258>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <TrajectoryGenerationPrepareDATA+0x268>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
}
 8001ec6:	e7ff      	b.n	8001ec8 <TrajectoryGenerationPrepareDATA+0x248>
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	f3af 8000 	nop.w
 8001ed0:	99999999 	.word	0x99999999
 8001ed4:	40eeadf9 	.word	0x40eeadf9
 8001ed8:	200000e6 	.word	0x200000e6
 8001edc:	200000e4 	.word	0x200000e4
 8001ee0:	200001c8 	.word	0x200001c8
 8001ee4:	20000158 	.word	0x20000158
 8001ee8:	200000d1 	.word	0x200000d1
 8001eec:	200000b0 	.word	0x200000b0
 8001ef0:	200000e8 	.word	0x200000e8
 8001ef4:	200000e9 	.word	0x200000e9
 8001ef8:	200000d4 	.word	0x200000d4
 8001efc:	200000e7 	.word	0x200000e7
 8001f00:	20000000 	.word	0x20000000
 8001f04:	40768000 	.word	0x40768000

08001f08 <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 8001f08:	b5b0      	push	{r4, r5, r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 8001f0c:	4b84      	ldr	r3, [pc, #528]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f0e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001f12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	d518      	bpl.n	8001f4e <TrajectoryGenerationCalculation+0x46>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 8001f1c:	4b80      	ldr	r3, [pc, #512]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f22:	eef1 7a67 	vneg.f32	s15, s15
 8001f26:	4b7e      	ldr	r3, [pc, #504]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f28:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 8001f2c:	4b7c      	ldr	r3, [pc, #496]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f2e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f32:	eef1 7a67 	vneg.f32	s15, s15
 8001f36:	4b7a      	ldr	r3, [pc, #488]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f38:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 8001f3c:	4b78      	ldr	r3, [pc, #480]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f3e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001f42:	eef1 7a67 	vneg.f32	s15, s15
 8001f46:	4b76      	ldr	r3, [pc, #472]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f48:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8001f4c:	e013      	b.n	8001f76 <TrajectoryGenerationCalculation+0x6e>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 8001f4e:	4b74      	ldr	r3, [pc, #464]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f50:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001f54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5c:	dd0b      	ble.n	8001f76 <TrajectoryGenerationCalculation+0x6e>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 8001f5e:	4b70      	ldr	r3, [pc, #448]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	4a6f      	ldr	r2, [pc, #444]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f64:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 8001f66:	4b6e      	ldr	r3, [pc, #440]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	4a6d      	ldr	r2, [pc, #436]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f6c:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 8001f6e:	4b6c      	ldr	r3, [pc, #432]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f72:	4a6b      	ldr	r2, [pc, #428]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f74:	6653      	str	r3, [r2, #100]	; 0x64
	  }

	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 8001f76:	4b6a      	ldr	r3, [pc, #424]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f78:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001f7c:	4b68      	ldr	r3, [pc, #416]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8a:	d554      	bpl.n	8002036 <TrajectoryGenerationCalculation+0x12e>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 8001f8c:	4b64      	ldr	r3, [pc, #400]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f8e:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001f92:	4b63      	ldr	r3, [pc, #396]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001f94:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f98:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f9c:	ee16 0a90 	vmov	r0, s13
 8001fa0:	f7fe fa7e 	bl	80004a0 <__aeabi_f2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	ec43 2b10 	vmov	d0, r2, r3
 8001fac:	f006 fe84 	bl	8008cb8 <sqrt>
 8001fb0:	ec53 2b10 	vmov	r2, r3, d0
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7fe fd9a 	bl	8000af0 <__aeabi_d2f>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a58      	ldr	r2, [pc, #352]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001fc0:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8001fc2:	4b57      	ldr	r3, [pc, #348]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc6:	4a56      	ldr	r2, [pc, #344]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001fc8:	6253      	str	r3, [r2, #36]	; 0x24
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 8001fca:	4b55      	ldr	r3, [pc, #340]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001fcc:	ed93 7a07 	vldr	s14, [r3, #28]
 8001fd0:	4b53      	ldr	r3, [pc, #332]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001fd2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fd6:	4b52      	ldr	r3, [pc, #328]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8001fd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe4:	ee17 0a90 	vmov	r0, s15
 8001fe8:	f7fe fa5a 	bl	80004a0 <__aeabi_f2d>
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ff4:	f7fe fbd6 	bl	80007a4 <__aeabi_ddiv>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4614      	mov	r4, r2
 8001ffe:	461d      	mov	r5, r3
 8002000:	4b47      	ldr	r3, [pc, #284]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fa4b 	bl	80004a0 <__aeabi_f2d>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4620      	mov	r0, r4
 8002010:	4629      	mov	r1, r5
 8002012:	f7fe f8e7 	bl	80001e4 <__adddf3>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	f7fe fd67 	bl	8000af0 <__aeabi_d2f>
 8002022:	4603      	mov	r3, r0
 8002024:	4a3e      	ldr	r2, [pc, #248]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8002026:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Mode = 0;
 8002028:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 800202a:	2200      	movs	r2, #0
 800202c:	669a      	str	r2, [r3, #104]	; 0x68
		 TrjStruc.Submode = 0;
 800202e:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8002030:	2200      	movs	r2, #0
 8002032:	66da      	str	r2, [r3, #108]	; 0x6c
 8002034:	e063      	b.n	80020fe <TrajectoryGenerationCalculation+0x1f6>
	  }
	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 8002036:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8002038:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800203c:	4b38      	ldr	r3, [pc, #224]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 800203e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204a:	db58      	blt.n	80020fe <TrajectoryGenerationCalculation+0x1f6>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 800204c:	4b34      	ldr	r3, [pc, #208]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 800204e:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002052:	4b33      	ldr	r3, [pc, #204]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8002054:	edd3 7a03 	vldr	s15, [r3, #12]
 8002058:	ee77 6a67 	vsub.f32	s13, s14, s15
 800205c:	4b30      	ldr	r3, [pc, #192]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 800205e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002066:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8002068:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 800206c:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8002072:	6253      	str	r3, [r2, #36]	; 0x24
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 8002074:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8002076:	ed93 7a07 	vldr	s14, [r3, #28]
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 800207c:	edd3 6a00 	vldr	s13, [r3]
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8002082:	edd3 7a00 	vldr	s15, [r3]
 8002086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800208a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208e:	ee17 0a90 	vmov	r0, s15
 8002092:	f7fe fa05 	bl	80004a0 <__aeabi_f2d>
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800209e:	f7fe fb81 	bl	80007a4 <__aeabi_ddiv>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4614      	mov	r4, r2
 80020a8:	461d      	mov	r5, r3
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f9f6 	bl	80004a0 <__aeabi_f2d>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4620      	mov	r0, r4
 80020ba:	4629      	mov	r1, r5
 80020bc:	f7fe f892 	bl	80001e4 <__adddf3>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	f7fe fd12 	bl	8000af0 <__aeabi_d2f>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4a14      	ldr	r2, [pc, #80]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 80020d0:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 80020d4:	ed93 7a06 	vldr	s14, [r3, #24]
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 80020da:	edd3 7a02 	vldr	s15, [r3, #8]
 80020de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 80020e4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80020e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 80020ee:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		  TrjStruc.Mode = 1;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	669a      	str	r2, [r3, #104]	; 0x68
		  TrjStruc.Submode = 0;
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	66da      	str	r2, [r3, #108]	; 0x6c
	  }
	 TrjStruc.Equation_Timestamp = micros();
 80020fe:	f7ff fc77 	bl	80019f0 <micros>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4906      	ldr	r1, [pc, #24]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8002108:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 TrjStruc.Loop_Timestamp = micros();
 800210c:	f7ff fc70 	bl	80019f0 <micros>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4902      	ldr	r1, [pc, #8]	; (8002120 <TrajectoryGenerationCalculation+0x218>)
 8002116:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 800211a:	bf00      	nop
 800211c:	bdb0      	pop	{r4, r5, r7, pc}
 800211e:	bf00      	nop
 8002120:	20000158 	.word	0x20000158
 8002124:	00000000 	.word	0x00000000

08002128 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 8002128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 8002130:	f7ff fc5e 	bl	80019f0 <micros>
 8002134:	4bb2      	ldr	r3, [pc, #712]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002136:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800213a:	1a84      	subs	r4, r0, r2
 800213c:	eb61 0503 	sbc.w	r5, r1, r3
 8002140:	4620      	mov	r0, r4
 8002142:	4629      	mov	r1, r5
 8002144:	f7fe f9ce 	bl	80004e4 <__aeabi_ul2d>
 8002148:	a3ab      	add	r3, pc, #684	; (adr r3, 80023f8 <TrajectoryGenerationProcess+0x2d0>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	f7fe fb29 	bl	80007a4 <__aeabi_ddiv>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	49aa      	ldr	r1, [pc, #680]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002158:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	 switch (TrjStruc.Mode)
 800215c:	4ba8      	ldr	r3, [pc, #672]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 800215e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002160:	2b02      	cmp	r3, #2
 8002162:	f000 8218 	beq.w	8002596 <TrajectoryGenerationProcess+0x46e>
 8002166:	2b02      	cmp	r3, #2
 8002168:	f200 8220 	bhi.w	80025ac <TrajectoryGenerationProcess+0x484>
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <TrajectoryGenerationProcess+0x50>
 8002170:	2b01      	cmp	r3, #1
 8002172:	f000 80e0 	beq.w	8002336 <TrajectoryGenerationProcess+0x20e>
		  case 2:
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  break;
		  }
}
 8002176:	e219      	b.n	80025ac <TrajectoryGenerationProcess+0x484>
			  if (TrjStruc.Submode == 0)
 8002178:	4ba1      	ldr	r3, [pc, #644]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 800217a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d15b      	bne.n	8002238 <TrajectoryGenerationProcess+0x110>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002180:	4b9f      	ldr	r3, [pc, #636]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f98b 	bl	80004a0 <__aeabi_f2d>
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	4b9d      	ldr	r3, [pc, #628]	; (8002404 <TrajectoryGenerationProcess+0x2dc>)
 8002190:	f7fe f9de 	bl	8000550 <__aeabi_dmul>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4614      	mov	r4, r2
 800219a:	461d      	mov	r5, r3
 800219c:	4b98      	ldr	r3, [pc, #608]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 800219e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80021a2:	4b97      	ldr	r3, [pc, #604]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 80021a4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80021a8:	f7fe f9d2 	bl	8000550 <__aeabi_dmul>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4620      	mov	r0, r4
 80021b2:	4629      	mov	r1, r5
 80021b4:	f7fe f9cc 	bl	8000550 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4614      	mov	r4, r2
 80021be:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 80021c0:	4b8f      	ldr	r3, [pc, #572]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f96b 	bl	80004a0 <__aeabi_f2d>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4620      	mov	r0, r4
 80021d0:	4629      	mov	r1, r5
 80021d2:	f7fe f807 	bl	80001e4 <__adddf3>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f7fe fc87 	bl	8000af0 <__aeabi_d2f>
 80021e2:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80021e4:	4a86      	ldr	r2, [pc, #536]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 80021e6:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80021e8:	f7ff fc02 	bl	80019f0 <micros>
 80021ec:	4b84      	ldr	r3, [pc, #528]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 80021ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80021f2:	1a84      	subs	r4, r0, r2
 80021f4:	613c      	str	r4, [r7, #16]
 80021f6:	eb61 0303 	sbc.w	r3, r1, r3
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002200:	f7fe fd8e 	bl	8000d20 <__aeabi_ul2f>
 8002204:	ee06 0a90 	vmov	s13, r0
 8002208:	4b7d      	ldr	r3, [pc, #500]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 800220a:	edd3 7a01 	vldr	s15, [r3, #4]
 800220e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002408 <TrajectoryGenerationProcess+0x2e0>
 8002212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002216:	eef4 6ae7 	vcmpe.f32	s13, s15
 800221a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221e:	da00      	bge.n	8002222 <TrajectoryGenerationProcess+0xfa>
			  break;
 8002220:	e1c1      	b.n	80025a6 <TrajectoryGenerationProcess+0x47e>
					  TrjStruc.Equation_Timestamp = micros();
 8002222:	f7ff fbe5 	bl	80019f0 <micros>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4975      	ldr	r1, [pc, #468]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 800222c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 1;
 8002230:	4b73      	ldr	r3, [pc, #460]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002232:	2201      	movs	r2, #1
 8002234:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 8002236:	e1b6      	b.n	80025a6 <TrajectoryGenerationProcess+0x47e>
			  else if (TrjStruc.Submode == 1)
 8002238:	4b71      	ldr	r3, [pc, #452]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 800223a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223c:	2b01      	cmp	r3, #1
 800223e:	f040 81b2 	bne.w	80025a6 <TrajectoryGenerationProcess+0x47e>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002242:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f92a 	bl	80004a0 <__aeabi_f2d>
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	4b6e      	ldr	r3, [pc, #440]	; (800240c <TrajectoryGenerationProcess+0x2e4>)
 8002252:	f7fe f97d 	bl	8000550 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4614      	mov	r4, r2
 800225c:	461d      	mov	r5, r3
 800225e:	4b68      	ldr	r3, [pc, #416]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002260:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002264:	4b66      	ldr	r3, [pc, #408]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002266:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800226a:	f7fe f971 	bl	8000550 <__aeabi_dmul>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4620      	mov	r0, r4
 8002274:	4629      	mov	r1, r5
 8002276:	f7fe f96b 	bl	8000550 <__aeabi_dmul>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4614      	mov	r4, r2
 8002280:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 8002282:	4b5f      	ldr	r3, [pc, #380]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002284:	ed93 7a07 	vldr	s14, [r3, #28]
 8002288:	4b5d      	ldr	r3, [pc, #372]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 800228a:	edd3 7a01 	vldr	s15, [r3, #4]
 800228e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002292:	ee17 0a90 	vmov	r0, s15
 8002296:	f7fe f903 	bl	80004a0 <__aeabi_f2d>
 800229a:	4b59      	ldr	r3, [pc, #356]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 800229c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80022a0:	f7fe f956 	bl	8000550 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4620      	mov	r0, r4
 80022aa:	4629      	mov	r1, r5
 80022ac:	f7fd ff9a 	bl	80001e4 <__adddf3>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4614      	mov	r4, r2
 80022b6:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 80022b8:	4b51      	ldr	r3, [pc, #324]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f8ef 	bl	80004a0 <__aeabi_f2d>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4620      	mov	r0, r4
 80022c8:	4629      	mov	r1, r5
 80022ca:	f7fd ff8b 	bl	80001e4 <__adddf3>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f7fe fc0b 	bl	8000af0 <__aeabi_d2f>
 80022da:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80022dc:	4a48      	ldr	r2, [pc, #288]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 80022de:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80022e0:	f7ff fb86 	bl	80019f0 <micros>
 80022e4:	4b46      	ldr	r3, [pc, #280]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 80022e6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80022ea:	1a84      	subs	r4, r0, r2
 80022ec:	60bc      	str	r4, [r7, #8]
 80022ee:	eb61 0303 	sbc.w	r3, r1, r3
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022f8:	f7fe fd12 	bl	8000d20 <__aeabi_ul2f>
 80022fc:	ee06 0a90 	vmov	s13, r0
 8002300:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002302:	edd3 7a01 	vldr	s15, [r3, #4]
 8002306:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002408 <TrajectoryGenerationProcess+0x2e0>
 800230a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800230e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	da00      	bge.n	800231a <TrajectoryGenerationProcess+0x1f2>
			  break;
 8002318:	e145      	b.n	80025a6 <TrajectoryGenerationProcess+0x47e>
					  TrjStruc.Equation_Timestamp = micros();
 800231a:	f7ff fb69 	bl	80019f0 <micros>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4937      	ldr	r1, [pc, #220]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002324:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 0;
 8002328:	4b35      	ldr	r3, [pc, #212]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 800232a:	2200      	movs	r2, #0
 800232c:	66da      	str	r2, [r3, #108]	; 0x6c
					  TrjStruc.Mode = 2; ///Final Value Mode
 800232e:	4b34      	ldr	r3, [pc, #208]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002330:	2202      	movs	r2, #2
 8002332:	669a      	str	r2, [r3, #104]	; 0x68
			  break;
 8002334:	e137      	b.n	80025a6 <TrajectoryGenerationProcess+0x47e>
			  if (TrjStruc.Submode == 0)
 8002336:	4b32      	ldr	r3, [pc, #200]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d168      	bne.n	8002410 <TrajectoryGenerationProcess+0x2e8>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 800233e:	4b30      	ldr	r3, [pc, #192]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe f8ac 	bl	80004a0 <__aeabi_f2d>
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <TrajectoryGenerationProcess+0x2dc>)
 800234e:	f7fe f8ff 	bl	8000550 <__aeabi_dmul>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4614      	mov	r4, r2
 8002358:	461d      	mov	r5, r3
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 800235c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002362:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002366:	f7fe f8f3 	bl	8000550 <__aeabi_dmul>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4620      	mov	r0, r4
 8002370:	4629      	mov	r1, r5
 8002372:	f7fe f8ed 	bl	8000550 <__aeabi_dmul>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4614      	mov	r4, r2
 800237c:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe f88c 	bl	80004a0 <__aeabi_f2d>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4620      	mov	r0, r4
 800238e:	4629      	mov	r1, r5
 8002390:	f7fd ff28 	bl	80001e4 <__adddf3>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	f7fe fba8 	bl	8000af0 <__aeabi_d2f>
 80023a0:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 80023a4:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 80023a6:	f7ff fb23 	bl	80019f0 <micros>
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 80023ac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80023b0:	1a84      	subs	r4, r0, r2
 80023b2:	603c      	str	r4, [r7, #0]
 80023b4:	eb61 0303 	sbc.w	r3, r1, r3
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023be:	f7fe fcaf 	bl	8000d20 <__aeabi_ul2f>
 80023c2:	ee06 0a90 	vmov	s13, r0
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002408 <TrajectoryGenerationProcess+0x2e0>
 80023d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80023d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023dc:	da00      	bge.n	80023e0 <TrajectoryGenerationProcess+0x2b8>
			  break;
 80023de:	e0e4      	b.n	80025aa <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 80023e0:	f7ff fb06 	bl	80019f0 <micros>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4905      	ldr	r1, [pc, #20]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 80023ea:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 1;
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <TrajectoryGenerationProcess+0x2d8>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 80023f4:	e0d9      	b.n	80025aa <TrajectoryGenerationProcess+0x482>
 80023f6:	bf00      	nop
 80023f8:	00000000 	.word	0x00000000
 80023fc:	412e8480 	.word	0x412e8480
 8002400:	20000158 	.word	0x20000158
 8002404:	3fe00000 	.word	0x3fe00000
 8002408:	49742400 	.word	0x49742400
 800240c:	bfe00000 	.word	0xbfe00000
			  else if (TrjStruc.Submode == 1)
 8002410:	4b69      	ldr	r3, [pc, #420]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 8002412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d148      	bne.n	80024aa <TrajectoryGenerationProcess+0x382>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002418:	4b67      	ldr	r3, [pc, #412]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f83f 	bl	80004a0 <__aeabi_f2d>
 8002422:	4b65      	ldr	r3, [pc, #404]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 8002424:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002428:	f7fe f892 	bl	8000550 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4614      	mov	r4, r2
 8002432:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 8002434:	4b60      	ldr	r3, [pc, #384]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f831 	bl	80004a0 <__aeabi_f2d>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fd fecd 	bl	80001e4 <__adddf3>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f7fe fb4d 	bl	8000af0 <__aeabi_d2f>
 8002456:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002458:	4a57      	ldr	r2, [pc, #348]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 800245a:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 800245c:	f7ff fac8 	bl	80019f0 <micros>
 8002460:	4b55      	ldr	r3, [pc, #340]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 8002462:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002466:	ebb0 0a02 	subs.w	sl, r0, r2
 800246a:	eb61 0b03 	sbc.w	fp, r1, r3
 800246e:	4650      	mov	r0, sl
 8002470:	4659      	mov	r1, fp
 8002472:	f7fe fc55 	bl	8000d20 <__aeabi_ul2f>
 8002476:	ee06 0a90 	vmov	s13, r0
 800247a:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 800247c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002480:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80025bc <TrajectoryGenerationProcess+0x494>
 8002484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002488:	eef4 6ae7 	vcmpe.f32	s13, s15
 800248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002490:	da00      	bge.n	8002494 <TrajectoryGenerationProcess+0x36c>
			  break;
 8002492:	e08a      	b.n	80025aa <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 8002494:	f7ff faac 	bl	80019f0 <micros>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4946      	ldr	r1, [pc, #280]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 800249e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 2;
 80024a2:	4b45      	ldr	r3, [pc, #276]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 80024a4:	2202      	movs	r2, #2
 80024a6:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 80024a8:	e07f      	b.n	80025aa <TrajectoryGenerationProcess+0x482>
			  else if (TrjStruc.Submode == 2)
 80024aa:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 80024ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d17b      	bne.n	80025aa <TrajectoryGenerationProcess+0x482>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fd fff2 	bl	80004a0 <__aeabi_f2d>
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <TrajectoryGenerationProcess+0x498>)
 80024c2:	f7fe f845 	bl	8000550 <__aeabi_dmul>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4614      	mov	r4, r2
 80024cc:	461d      	mov	r5, r3
 80024ce:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 80024d0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80024d4:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 80024d6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80024da:	f7fe f839 	bl	8000550 <__aeabi_dmul>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4620      	mov	r0, r4
 80024e4:	4629      	mov	r1, r5
 80024e6:	f7fe f833 	bl	8000550 <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4614      	mov	r4, r2
 80024f0:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 80024f2:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fd ffd2 	bl	80004a0 <__aeabi_f2d>
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 80024fe:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002502:	f7fe f825 	bl	8000550 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4620      	mov	r0, r4
 800250c:	4629      	mov	r1, r5
 800250e:	f7fd fe69 	bl	80001e4 <__adddf3>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4614      	mov	r4, r2
 8002518:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 800251a:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	4618      	mov	r0, r3
 8002520:	f7fd ffbe 	bl	80004a0 <__aeabi_f2d>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4620      	mov	r0, r4
 800252a:	4629      	mov	r1, r5
 800252c:	f7fd fe5a 	bl	80001e4 <__adddf3>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	f7fe fada 	bl	8000af0 <__aeabi_d2f>
 800253c:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 800253e:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 8002540:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002542:	f7ff fa55 	bl	80019f0 <micros>
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 8002548:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800254c:	ebb0 0802 	subs.w	r8, r0, r2
 8002550:	eb61 0903 	sbc.w	r9, r1, r3
 8002554:	4640      	mov	r0, r8
 8002556:	4649      	mov	r1, r9
 8002558:	f7fe fbe2 	bl	8000d20 <__aeabi_ul2f>
 800255c:	ee06 0a90 	vmov	s13, r0
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80025bc <TrajectoryGenerationProcess+0x494>
 800256a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800256e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002576:	da00      	bge.n	800257a <TrajectoryGenerationProcess+0x452>
			  break;
 8002578:	e017      	b.n	80025aa <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 800257a:	f7ff fa39 	bl	80019f0 <micros>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	490d      	ldr	r1, [pc, #52]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 8002584:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 0;
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 800258a:	2200      	movs	r2, #0
 800258c:	66da      	str	r2, [r3, #108]	; 0x6c
					  TrjStruc.Mode = 2; ///Final Value Mode
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 8002590:	2202      	movs	r2, #2
 8002592:	669a      	str	r2, [r3, #104]	; 0x68
			  break;
 8002594:	e009      	b.n	80025aa <TrajectoryGenerationProcess+0x482>
			  Moving_Link_Task_Flag = 1;
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <TrajectoryGenerationProcess+0x49c>)
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <TrajectoryGenerationProcess+0x490>)
 80025a2:	6213      	str	r3, [r2, #32]
			  break;
 80025a4:	e002      	b.n	80025ac <TrajectoryGenerationProcess+0x484>
			  break;
 80025a6:	bf00      	nop
 80025a8:	e000      	b.n	80025ac <TrajectoryGenerationProcess+0x484>
			  break;
 80025aa:	bf00      	nop
}
 80025ac:	bf00      	nop
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b6:	bf00      	nop
 80025b8:	20000158 	.word	0x20000158
 80025bc:	49742400 	.word	0x49742400
 80025c0:	bfe00000 	.word	0xbfe00000
 80025c4:	200000f0 	.word	0x200000f0

080025c8 <PIDController2in1>:

void PIDController2in1()
{
 80025c8:	b5b0      	push	{r4, r5, r7, lr}
 80025ca:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 80025cc:	4b38      	ldr	r3, [pc, #224]	; (80026b0 <PIDController2in1+0xe8>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4a38      	ldr	r2, [pc, #224]	; (80026b4 <PIDController2in1+0xec>)
 80025d2:	6113      	str	r3, [r2, #16]
    PositionPIDController.NowError = PositionPIDController.OutputFeedback-PositionPIDController.OutputDesire;
 80025d4:	4b37      	ldr	r3, [pc, #220]	; (80026b4 <PIDController2in1+0xec>)
 80025d6:	ed93 7a05 	vldr	s14, [r3, #20]
 80025da:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <PIDController2in1+0xec>)
 80025dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80025e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e4:	4b33      	ldr	r3, [pc, #204]	; (80026b4 <PIDController2in1+0xec>)
 80025e6:	edc3 7a07 	vstr	s15, [r3, #28]
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 80025ea:	4b32      	ldr	r3, [pc, #200]	; (80026b4 <PIDController2in1+0xec>)
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ff56 	bl	80004a0 <__aeabi_f2d>
 80025f4:	4604      	mov	r4, r0
 80025f6:	460d      	mov	r5, r1
 80025f8:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <PIDController2in1+0xec>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ff4f 	bl	80004a0 <__aeabi_f2d>
 8002602:	4b2c      	ldr	r3, [pc, #176]	; (80026b4 <PIDController2in1+0xec>)
 8002604:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002608:	f7fd ffa2 	bl	8000550 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4620      	mov	r0, r4
 8002612:	4629      	mov	r1, r5
 8002614:	f7fd fde6 	bl	80001e4 <__adddf3>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f7fe fa66 	bl	8000af0 <__aeabi_d2f>
 8002624:	4603      	mov	r3, r0
 8002626:	4a23      	ldr	r2, [pc, #140]	; (80026b4 <PIDController2in1+0xec>)
 8002628:	6193      	str	r3, [r2, #24]
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <PIDController2in1+0xec>)
 800262c:	ed93 7a00 	vldr	s14, [r3]
 8002630:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <PIDController2in1+0xec>)
 8002632:	edd3 7a07 	vldr	s15, [r3, #28]
 8002636:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 800263a:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <PIDController2in1+0xec>)
 800263c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002640:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <PIDController2in1+0xec>)
 8002642:	edd3 7a06 	vldr	s15, [r3, #24]
 8002646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800264a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800264e:	ee17 0a90 	vmov	r0, s15
 8002652:	f7fd ff25 	bl	80004a0 <__aeabi_f2d>
 8002656:	4604      	mov	r4, r0
 8002658:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime);
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <PIDController2in1+0xec>)
 800265c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002660:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <PIDController2in1+0xec>)
 8002662:	edd3 6a07 	vldr	s13, [r3, #28]
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <PIDController2in1+0xec>)
 8002668:	edd3 7a08 	vldr	s15, [r3, #32]
 800266c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002674:	ee17 0a90 	vmov	r0, s15
 8002678:	f7fd ff12 	bl	80004a0 <__aeabi_f2d>
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <PIDController2in1+0xec>)
 800267e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002682:	f7fe f88f 	bl	80007a4 <__aeabi_ddiv>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4620      	mov	r0, r4
 800268c:	4629      	mov	r1, r5
 800268e:	f7fd fda9 	bl	80001e4 <__adddf3>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	f7fe fa29 	bl	8000af0 <__aeabi_d2f>
 800269e:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 80026a0:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <PIDController2in1+0xec>)
 80026a2:	60d3      	str	r3, [r2, #12]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <PIDController2in1+0xec>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4a02      	ldr	r2, [pc, #8]	; (80026b4 <PIDController2in1+0xec>)
 80026aa:	6213      	str	r3, [r2, #32]
//    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
//					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
//					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime);
//    VelocityPIDController.PreviousError = VelocityPIDController.NowError;

}
 80026ac:	bf00      	nop
 80026ae:	bdb0      	pop	{r4, r5, r7, pc}
 80026b0:	20000158 	.word	0x20000158
 80026b4:	200000f8 	.word	0x200000f8

080026b8 <UARTInit>:



///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <UARTInit+0x4c>)
 80026c2:	88db      	ldrh	r3, [r3, #6]
 80026c4:	4619      	mov	r1, r3
 80026c6:	2001      	movs	r0, #1
 80026c8:	f006 fa26 	bl	8008b18 <calloc>
 80026cc:	4603      	mov	r3, r0
 80026ce:	461a      	mov	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <UARTInit+0x4c>)
 80026d6:	889b      	ldrh	r3, [r3, #4]
 80026d8:	4619      	mov	r1, r3
 80026da:	2001      	movs	r0, #1
 80026dc:	f006 fa1c 	bl	8008b18 <calloc>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	81da      	strh	r2, [r3, #14]
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200000b0 	.word	0x200000b0

08002708 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6919      	ldr	r1, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	88db      	ldrh	r3, [r3, #6]
 800271c:	461a      	mov	r2, r3
 800271e:	f005 fb77 	bl	8007e10 <HAL_UART_Receive_DMA>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	88db      	ldrh	r3, [r3, #6]
 8002736:	461a      	mov	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	1ad3      	subs	r3, r2, r3
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8002758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800275c:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	8a9b      	ldrh	r3, [r3, #20]
 8002762:	461c      	mov	r4, r3
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ffe0 	bl	800272a <UARTGetRxHead>
 800276a:	4603      	mov	r3, r0
 800276c:	429c      	cmp	r4, r3
 800276e:	d013      	beq.n	8002798 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	8a92      	ldrh	r2, [r2, #20]
 8002778:	4413      	add	r3, r2
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8a9b      	ldrh	r3, [r3, #20]
 8002782:	3301      	adds	r3, #1
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	88d2      	ldrh	r2, [r2, #6]
 8002788:	fb93 f1f2 	sdiv	r1, r3, r2
 800278c:	fb02 f201 	mul.w	r2, r2, r1
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	b29a      	uxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8002798:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd90      	pop	{r4, r7, pc}

080027a4 <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	d13d      	bne.n	8002836 <UARTTxDumpBuffer+0x92>
 80027ba:	4b21      	ldr	r3, [pc, #132]	; (8002840 <UARTTxDumpBuffer+0x9c>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d139      	bne.n	8002836 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 80027c2:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <UARTTxDumpBuffer+0x9c>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	89da      	ldrh	r2, [r3, #14]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	899b      	ldrh	r3, [r3, #12]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d02d      	beq.n	8002830 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	89da      	ldrh	r2, [r3, #14]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80027dc:	429a      	cmp	r2, r3
 80027de:	d906      	bls.n	80027ee <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	89da      	ldrh	r2, [r3, #14]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	e005      	b.n	80027fa <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	889a      	ldrh	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	8992      	ldrh	r2, [r2, #12]
 8002808:	4413      	add	r3, r2
 800280a:	89fa      	ldrh	r2, [r7, #14]
 800280c:	4619      	mov	r1, r3
 800280e:	f005 fa93 	bl	8007d38 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	899b      	ldrh	r3, [r3, #12]
 8002816:	461a      	mov	r2, r3
 8002818:	89fb      	ldrh	r3, [r7, #14]
 800281a:	4413      	add	r3, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	8892      	ldrh	r2, [r2, #4]
 8002820:	fb93 f1f2 	sdiv	r1, r3, r2
 8002824:	fb02 f201 	mul.w	r2, r2, r1
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	b29a      	uxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <UARTTxDumpBuffer+0x9c>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
	}
}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200001e8 	.word	0x200001e8

08002844 <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	4613      	mov	r3, r2
 8002850:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	889b      	ldrh	r3, [r3, #4]
 8002856:	88fa      	ldrh	r2, [r7, #6]
 8002858:	4293      	cmp	r3, r2
 800285a:	bf28      	it	cs
 800285c:	4613      	movcs	r3, r2
 800285e:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002860:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	889b      	ldrh	r3, [r3, #4]
 8002866:	4619      	mov	r1, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	89db      	ldrh	r3, [r3, #14]
 800286c:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 800286e:	4293      	cmp	r3, r2
 8002870:	bfa8      	it	ge
 8002872:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8002874:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	89d2      	ldrh	r2, [r2, #14]
 800287e:	4413      	add	r3, r2
 8002880:	8aba      	ldrh	r2, [r7, #20]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	4618      	mov	r0, r3
 8002886:	f006 f979 	bl	8008b7c <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	89db      	ldrh	r3, [r3, #14]
 800288e:	461a      	mov	r2, r3
 8002890:	8afb      	ldrh	r3, [r7, #22]
 8002892:	4413      	add	r3, r2
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	8892      	ldrh	r2, [r2, #4]
 8002898:	fb93 f1f2 	sdiv	r1, r3, r2
 800289c:	fb02 f201 	mul.w	r2, r2, r1
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80028a8:	8afa      	ldrh	r2, [r7, #22]
 80028aa:	8abb      	ldrh	r3, [r7, #20]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d00a      	beq.n	80028c6 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6898      	ldr	r0, [r3, #8]
 80028b4:	8abb      	ldrh	r3, [r7, #20]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 80028ba:	8afa      	ldrh	r2, [r7, #22]
 80028bc:	8abb      	ldrh	r3, [r7, #20]
 80028be:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80028c0:	461a      	mov	r2, r3
 80028c2:	f006 f95b 	bl	8008b7c <memcpy>
	}
	UARTTxDumpBuffer(uart);
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff ff6c 	bl	80027a4 <UARTTxDumpBuffer>

}
 80028cc:	bf00      	nop
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 80028dc:	f247 5358 	movw	r3, #30040	; 0x7558
 80028e0:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	2202      	movs	r2, #2
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ffaa 	bl	8002844 <UARTTxWrite>
	}
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 8002900:	f646 6346 	movw	r3, #28230	; 0x6e46
 8002904:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 8002906:	f107 030c 	add.w	r3, r7, #12
 800290a:	2202      	movs	r2, #2
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ff98 	bl	8002844 <UARTTxWrite>
	}
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	0000      	movs	r0, r0
	...

08002920 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b08e      	sub	sp, #56	; 0x38
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	6039      	str	r1, [r7, #0]
 800292a:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 800292c:	4b8b      	ldr	r3, [pc, #556]	; (8002b5c <Munmunbot_Protocol+0x23c>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b05      	cmp	r3, #5
 8002932:	f200 83af 	bhi.w	8003094 <Munmunbot_Protocol+0x774>
 8002936:	a201      	add	r2, pc, #4	; (adr r2, 800293c <Munmunbot_Protocol+0x1c>)
 8002938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293c:	08002955 	.word	0x08002955
 8002940:	08002a09 	.word	0x08002a09
 8002944:	08002a4b 	.word	0x08002a4b
 8002948:	08002a99 	.word	0x08002a99
 800294c:	08002abd 	.word	0x08002abd
 8002950:	08002b7d 	.word	0x08002b7d
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 8002954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002958:	111b      	asrs	r3, r3, #4
 800295a:	b21b      	sxth	r3, r3
 800295c:	b29b      	uxth	r3, r3
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	2b09      	cmp	r3, #9
 8002964:	f040 8393 	bne.w	800308e <Munmunbot_Protocol+0x76e>
			{
				CheckSum = dataIn;
 8002968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800296c:	4a7c      	ldr	r2, [pc, #496]	; (8002b60 <Munmunbot_Protocol+0x240>)
 800296e:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b7a      	ldr	r3, [pc, #488]	; (8002b64 <Munmunbot_Protocol+0x244>)
 800297c:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 800297e:	4b79      	ldr	r3, [pc, #484]	; (8002b64 <Munmunbot_Protocol+0x244>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b07      	cmp	r3, #7
 8002984:	d103      	bne.n	800298e <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 8002986:	4b75      	ldr	r3, [pc, #468]	; (8002b5c <Munmunbot_Protocol+0x23c>)
 8002988:	2203      	movs	r2, #3
 800298a:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 800298c:	e37f      	b.n	800308e <Munmunbot_Protocol+0x76e>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 800298e:	4b75      	ldr	r3, [pc, #468]	; (8002b64 <Munmunbot_Protocol+0x244>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d00b      	beq.n	80029ae <Munmunbot_Protocol+0x8e>
 8002996:	4b73      	ldr	r3, [pc, #460]	; (8002b64 <Munmunbot_Protocol+0x244>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b04      	cmp	r3, #4
 800299c:	d007      	beq.n	80029ae <Munmunbot_Protocol+0x8e>
 800299e:	4b71      	ldr	r3, [pc, #452]	; (8002b64 <Munmunbot_Protocol+0x244>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	d003      	beq.n	80029ae <Munmunbot_Protocol+0x8e>
 80029a6:	4b6f      	ldr	r3, [pc, #444]	; (8002b64 <Munmunbot_Protocol+0x244>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d103      	bne.n	80029b6 <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 80029ae:	4b6b      	ldr	r3, [pc, #428]	; (8002b5c <Munmunbot_Protocol+0x23c>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
			break;
 80029b4:	e36b      	b.n	800308e <Munmunbot_Protocol+0x76e>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 80029b6:	4b6b      	ldr	r3, [pc, #428]	; (8002b64 <Munmunbot_Protocol+0x244>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d020      	beq.n	8002a00 <Munmunbot_Protocol+0xe0>
 80029be:	4b69      	ldr	r3, [pc, #420]	; (8002b64 <Munmunbot_Protocol+0x244>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d01c      	beq.n	8002a00 <Munmunbot_Protocol+0xe0>
 80029c6:	4b67      	ldr	r3, [pc, #412]	; (8002b64 <Munmunbot_Protocol+0x244>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d018      	beq.n	8002a00 <Munmunbot_Protocol+0xe0>
 80029ce:	4b65      	ldr	r3, [pc, #404]	; (8002b64 <Munmunbot_Protocol+0x244>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b09      	cmp	r3, #9
 80029d4:	d014      	beq.n	8002a00 <Munmunbot_Protocol+0xe0>
 80029d6:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <Munmunbot_Protocol+0x244>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b0a      	cmp	r3, #10
 80029dc:	d010      	beq.n	8002a00 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 80029de:	4b61      	ldr	r3, [pc, #388]	; (8002b64 <Munmunbot_Protocol+0x244>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 80029e2:	2b0b      	cmp	r3, #11
 80029e4:	d00c      	beq.n	8002a00 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 80029e6:	4b5f      	ldr	r3, [pc, #380]	; (8002b64 <Munmunbot_Protocol+0x244>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d008      	beq.n	8002a00 <Munmunbot_Protocol+0xe0>
 80029ee:	4b5d      	ldr	r3, [pc, #372]	; (8002b64 <Munmunbot_Protocol+0x244>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b0d      	cmp	r3, #13
 80029f4:	d004      	beq.n	8002a00 <Munmunbot_Protocol+0xe0>
 80029f6:	4b5b      	ldr	r3, [pc, #364]	; (8002b64 <Munmunbot_Protocol+0x244>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b0e      	cmp	r3, #14
 80029fc:	f040 8347 	bne.w	800308e <Munmunbot_Protocol+0x76e>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 8002a00:	4b56      	ldr	r3, [pc, #344]	; (8002b5c <Munmunbot_Protocol+0x23c>)
 8002a02:	2205      	movs	r2, #5
 8002a04:	701a      	strb	r2, [r3, #0]
			break;
 8002a06:	e342      	b.n	800308e <Munmunbot_Protocol+0x76e>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 8002a08:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a0c:	4b54      	ldr	r3, [pc, #336]	; (8002b60 <Munmunbot_Protocol+0x240>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4413      	add	r3, r2
 8002a12:	4a53      	ldr	r2, [pc, #332]	; (8002b60 <Munmunbot_Protocol+0x240>)
 8002a14:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b52      	ldr	r3, [pc, #328]	; (8002b68 <Munmunbot_Protocol+0x248>)
 8002a1e:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <Munmunbot_Protocol+0x24c>)
 8002a2c:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 8002a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a32:	111b      	asrs	r3, r3, #4
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <Munmunbot_Protocol+0x24c>)
 8002a40:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 8002a42:	4b46      	ldr	r3, [pc, #280]	; (8002b5c <Munmunbot_Protocol+0x23c>)
 8002a44:	2202      	movs	r2, #2
 8002a46:	701a      	strb	r2, [r3, #0]

			 break;
 8002a48:	e324      	b.n	8003094 <Munmunbot_Protocol+0x774>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 8002a4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a4e:	4b44      	ldr	r3, [pc, #272]	; (8002b60 <Munmunbot_Protocol+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	4a42      	ldr	r2, [pc, #264]	; (8002b60 <Munmunbot_Protocol+0x240>)
 8002a56:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	b21a      	sxth	r2, r3
 8002a5e:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <Munmunbot_Protocol+0x248>)
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b21b      	sxth	r3, r3
 8002a64:	4313      	orrs	r3, r2
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <Munmunbot_Protocol+0x248>)
 8002a6c:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	4b3c      	ldr	r3, [pc, #240]	; (8002b6c <Munmunbot_Protocol+0x24c>)
 8002a7a:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 8002a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a80:	111b      	asrs	r3, r3, #4
 8002a82:	b21b      	sxth	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4b37      	ldr	r3, [pc, #220]	; (8002b6c <Munmunbot_Protocol+0x24c>)
 8002a8e:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 8002a90:	4b32      	ldr	r3, [pc, #200]	; (8002b5c <Munmunbot_Protocol+0x23c>)
 8002a92:	2205      	movs	r2, #5
 8002a94:	701a      	strb	r2, [r3, #0]
			 break;
 8002a96:	e2fd      	b.n	8003094 <Munmunbot_Protocol+0x774>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 8002a98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a9c:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <Munmunbot_Protocol+0x240>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	4a2f      	ldr	r2, [pc, #188]	; (8002b60 <Munmunbot_Protocol+0x240>)
 8002aa4:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <Munmunbot_Protocol+0x250>)
 8002aaa:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 8002aac:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <Munmunbot_Protocol+0x250>)
 8002aae:	881a      	ldrh	r2, [r3, #0]
 8002ab0:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <Munmunbot_Protocol+0x254>)
 8002ab2:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 8002ab4:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <Munmunbot_Protocol+0x23c>)
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	701a      	strb	r2, [r3, #0]

		   break;
 8002aba:	e2eb      	b.n	8003094 <Munmunbot_Protocol+0x774>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 8002abc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <Munmunbot_Protocol+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <Munmunbot_Protocol+0x240>)
 8002ac8:	6013      	str	r3, [r2, #0]
				if (n_station >= 2)
 8002aca:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <Munmunbot_Protocol+0x250>)
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d927      	bls.n	8002b22 <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <Munmunbot_Protocol+0x258>)
 8002ad8:	7812      	ldrb	r2, [r2, #0]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	b2d9      	uxtb	r1, r3
 8002ae0:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <Munmunbot_Protocol+0x24c>)
 8002ae2:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002ae4:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <Munmunbot_Protocol+0x258>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <Munmunbot_Protocol+0x258>)
 8002aee:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 8002af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af4:	111b      	asrs	r3, r3, #4
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <Munmunbot_Protocol+0x258>)
 8002afc:	7812      	ldrb	r2, [r2, #0]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	b2d9      	uxtb	r1, r3
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <Munmunbot_Protocol+0x24c>)
 8002b06:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <Munmunbot_Protocol+0x258>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <Munmunbot_Protocol+0x258>)
 8002b12:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 8002b14:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <Munmunbot_Protocol+0x250>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	3b02      	subs	r3, #2
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <Munmunbot_Protocol+0x250>)
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	e012      	b.n	8002b48 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 8002b22:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <Munmunbot_Protocol+0x250>)
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d10e      	bne.n	8002b48 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <Munmunbot_Protocol+0x258>)
 8002b30:	7812      	ldrb	r2, [r2, #0]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	b2d9      	uxtb	r1, r3
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <Munmunbot_Protocol+0x24c>)
 8002b3a:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <Munmunbot_Protocol+0x250>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <Munmunbot_Protocol+0x250>)
 8002b46:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <Munmunbot_Protocol+0x250>)
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 82a0 	bne.w	8003092 <Munmunbot_Protocol+0x772>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 8002b52:	4b02      	ldr	r3, [pc, #8]	; (8002b5c <Munmunbot_Protocol+0x23c>)
 8002b54:	2205      	movs	r2, #5
 8002b56:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002b58:	e29b      	b.n	8003092 <Munmunbot_Protocol+0x772>
 8002b5a:	bf00      	nop
 8002b5c:	200000d0 	.word	0x200000d0
 8002b60:	200001ec 	.word	0x200001ec
 8002b64:	200001f0 	.word	0x200001f0
 8002b68:	200001f2 	.word	0x200001f2
 8002b6c:	200001f4 	.word	0x200001f4
 8002b70:	200002f4 	.word	0x200002f4
 8002b74:	200002f6 	.word	0x200002f6
 8002b78:	200002f8 	.word	0x200002f8

			case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 8002b7c:	4ba3      	ldr	r3, [pc, #652]	; (8002e0c <Munmunbot_Protocol+0x4ec>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	4aa1      	ldr	r2, [pc, #644]	; (8002e0c <Munmunbot_Protocol+0x4ec>)
 8002b86:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 8002b88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b8c:	4b9f      	ldr	r3, [pc, #636]	; (8002e0c <Munmunbot_Protocol+0x4ec>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	f040 8268 	bne.w	8003066 <Munmunbot_Protocol+0x746>
				{

					switch (ProtocolMode)
 8002b96:	4b9e      	ldr	r3, [pc, #632]	; (8002e10 <Munmunbot_Protocol+0x4f0>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	2b0d      	cmp	r3, #13
 8002b9e:	f200 8263 	bhi.w	8003068 <Munmunbot_Protocol+0x748>
 8002ba2:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <Munmunbot_Protocol+0x288>)
 8002ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba8:	08002be1 	.word	0x08002be1
 8002bac:	08002c55 	.word	0x08002c55
 8002bb0:	08002c6b 	.word	0x08002c6b
 8002bb4:	08002c81 	.word	0x08002c81
 8002bb8:	08002ca3 	.word	0x08002ca3
 8002bbc:	08002cc1 	.word	0x08002cc1
 8002bc0:	08002ce5 	.word	0x08002ce5
 8002bc4:	08002d2f 	.word	0x08002d2f
 8002bc8:	08002d59 	.word	0x08002d59
 8002bcc:	08002e4d 	.word	0x08002e4d
 8002bd0:	08002f67 	.word	0x08002f67
 8002bd4:	0800303b 	.word	0x0800303b
 8002bd8:	08003043 	.word	0x08003043
 8002bdc:	0800304b 	.word	0x0800304b
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 8002be0:	2391      	movs	r3, #145	; 0x91
 8002be2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 8002be6:	4b8b      	ldr	r3, [pc, #556]	; (8002e14 <Munmunbot_Protocol+0x4f4>)
 8002be8:	785b      	ldrb	r3, [r3, #1]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	b25a      	sxtb	r2, r3
 8002bee:	4b89      	ldr	r3, [pc, #548]	; (8002e14 <Munmunbot_Protocol+0x4f4>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	b25b      	sxtb	r3, r3
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	b25b      	sxtb	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8002bfa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 8002bfe:	4b85      	ldr	r3, [pc, #532]	; (8002e14 <Munmunbot_Protocol+0x4f4>)
 8002c00:	78db      	ldrb	r3, [r3, #3]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	b25a      	sxtb	r2, r3
 8002c06:	4b83      	ldr	r3, [pc, #524]	; (8002e14 <Munmunbot_Protocol+0x4f4>)
 8002c08:	789b      	ldrb	r3, [r3, #2]
 8002c0a:	b25b      	sxtb	r3, r3
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	b25b      	sxtb	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8002c12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002c16:	2300      	movs	r3, #0
 8002c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c1c:	2358      	movs	r3, #88	; 0x58
 8002c1e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002c22:	2375      	movs	r3, #117	; 0x75
 8002c24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 8002c28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002c2c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002c30:	4413      	add	r3, r2
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002c38:	4413      	add	r3, r2
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						UARTTxWrite(uart, temp, 6);
 8002c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c48:	2206      	movs	r2, #6
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6838      	ldr	r0, [r7, #0]
 8002c4e:	f7ff fdf9 	bl	8002844 <UARTTxWrite>
						}
						break;
 8002c52:	e209      	b.n	8003068 <Munmunbot_Protocol+0x748>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 8002c54:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <Munmunbot_Protocol+0x4f8>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <Munmunbot_Protocol+0x342>
						{
							Munmunbot_State = STATE_Idle;
 8002c5c:	4b6e      	ldr	r3, [pc, #440]	; (8002e18 <Munmunbot_Protocol+0x4f8>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002c62:	6838      	ldr	r0, [r7, #0]
 8002c64:	f7ff fe36 	bl	80028d4 <ACK1Return>
						break;
 8002c68:	e1fe      	b.n	8003068 <Munmunbot_Protocol+0x748>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002c6a:	4b6b      	ldr	r3, [pc, #428]	; (8002e18 <Munmunbot_Protocol+0x4f8>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d102      	bne.n	8002c78 <Munmunbot_Protocol+0x358>
						{
							Munmunbot_State = STATE_Disconnected;
 8002c72:	4b69      	ldr	r3, [pc, #420]	; (8002e18 <Munmunbot_Protocol+0x4f8>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002c78:	6838      	ldr	r0, [r7, #0]
 8002c7a:	f7ff fe2b 	bl	80028d4 <ACK1Return>
						break;
 8002c7e:	e1f3      	b.n	8003068 <Munmunbot_Protocol+0x748>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002c80:	4b65      	ldr	r3, [pc, #404]	; (8002e18 <Munmunbot_Protocol+0x4f8>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d108      	bne.n	8002c9a <Munmunbot_Protocol+0x37a>
						{
							CUSSStruc.RPMp = Data_HAck;
 8002c88:	4b64      	ldr	r3, [pc, #400]	; (8002e1c <Munmunbot_Protocol+0x4fc>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b64      	ldr	r3, [pc, #400]	; (8002e20 <Munmunbot_Protocol+0x500>)
 8002c90:	609a      	str	r2, [r3, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 8002c92:	4963      	ldr	r1, [pc, #396]	; (8002e20 <Munmunbot_Protocol+0x500>)
 8002c94:	4863      	ldr	r0, [pc, #396]	; (8002e24 <Munmunbot_Protocol+0x504>)
 8002c96:	f7fe ffbb 	bl	8001c10 <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 8002c9a:	6838      	ldr	r0, [r7, #0]
 8002c9c:	f7ff fe1a 	bl	80028d4 <ACK1Return>
						break;
 8002ca0:	e1e2      	b.n	8003068 <Munmunbot_Protocol+0x748>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002ca2:	4b5d      	ldr	r3, [pc, #372]	; (8002e18 <Munmunbot_Protocol+0x4f8>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d106      	bne.n	8002cb8 <Munmunbot_Protocol+0x398>
						{
							Angularpos_InputNumber = Data_HAck;
 8002caa:	4b5c      	ldr	r3, [pc, #368]	; (8002e1c <Munmunbot_Protocol+0x4fc>)
 8002cac:	881a      	ldrh	r2, [r3, #0]
 8002cae:	4b5e      	ldr	r3, [pc, #376]	; (8002e28 <Munmunbot_Protocol+0x508>)
 8002cb0:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 8002cb2:	4b5e      	ldr	r3, [pc, #376]	; (8002e2c <Munmunbot_Protocol+0x50c>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002cb8:	6838      	ldr	r0, [r7, #0]
 8002cba:	f7ff fe0b 	bl	80028d4 <ACK1Return>
						break;
 8002cbe:	e1d3      	b.n	8003068 <Munmunbot_Protocol+0x748>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002cc0:	4b55      	ldr	r3, [pc, #340]	; (8002e18 <Munmunbot_Protocol+0x4f8>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d109      	bne.n	8002cdc <Munmunbot_Protocol+0x3bc>
						{
//							Angularpos_InputArray[0] = parameter[0];
							Angularpos_InputArray[0] = parameter[2];    //150 0x00 0x0A Checksum
 8002cc8:	4b52      	ldr	r3, [pc, #328]	; (8002e14 <Munmunbot_Protocol+0x4f4>)
 8002cca:	789a      	ldrb	r2, [r3, #2]
 8002ccc:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <Munmunbot_Protocol+0x510>)
 8002cce:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 8002cd0:	4b56      	ldr	r3, [pc, #344]	; (8002e2c <Munmunbot_Protocol+0x50c>)
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 8002cd6:	4b57      	ldr	r3, [pc, #348]	; (8002e34 <Munmunbot_Protocol+0x514>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002cdc:	6838      	ldr	r0, [r7, #0]
 8002cde:	f7ff fdf9 	bl	80028d4 <ACK1Return>
						break;
 8002ce2:	e1c1      	b.n	8003068 <Munmunbot_Protocol+0x748>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002ce4:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <Munmunbot_Protocol+0x4f8>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d11c      	bne.n	8002d26 <Munmunbot_Protocol+0x406>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 8002cec:	4b4f      	ldr	r3, [pc, #316]	; (8002e2c <Munmunbot_Protocol+0x50c>)
 8002cee:	2203      	movs	r2, #3
 8002cf0:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf6:	e00b      	b.n	8002d10 <Munmunbot_Protocol+0x3f0>
							{
								Angularpos_InputArray[i] = parameter[i];
 8002cf8:	4a46      	ldr	r2, [pc, #280]	; (8002e14 <Munmunbot_Protocol+0x4f4>)
 8002cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfc:	4413      	add	r3, r2
 8002cfe:	7819      	ldrb	r1, [r3, #0]
 8002d00:	4a4b      	ldr	r2, [pc, #300]	; (8002e30 <Munmunbot_Protocol+0x510>)
 8002d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d04:	4413      	add	r3, r2
 8002d06:	460a      	mov	r2, r1
 8002d08:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d10:	4b49      	ldr	r3, [pc, #292]	; (8002e38 <Munmunbot_Protocol+0x518>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	dbed      	blt.n	8002cf8 <Munmunbot_Protocol+0x3d8>
							}
							NumberOfStationToGo = n_station_mem;
 8002d1c:	4b46      	ldr	r3, [pc, #280]	; (8002e38 <Munmunbot_Protocol+0x518>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	4b44      	ldr	r3, [pc, #272]	; (8002e34 <Munmunbot_Protocol+0x514>)
 8002d24:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002d26:	6838      	ldr	r0, [r7, #0]
 8002d28:	f7ff fdd4 	bl	80028d4 <ACK1Return>
						break;
 8002d2c:	e19c      	b.n	8003068 <Munmunbot_Protocol+0x748>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 8002d2e:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <Munmunbot_Protocol+0x4f8>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d106      	bne.n	8002d44 <Munmunbot_Protocol+0x424>
						{
							Munmunbot_State = STATE_PrepareDATA;
 8002d36:	4b38      	ldr	r3, [pc, #224]	; (8002e18 <Munmunbot_Protocol+0x4f8>)
 8002d38:	2202      	movs	r2, #2
 8002d3a:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 8002d3c:	6838      	ldr	r0, [r7, #0]
 8002d3e:	f7ff fdc9 	bl	80028d4 <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};  ///ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 8002d42:	e191      	b.n	8003068 <Munmunbot_Protocol+0x748>
								uint8_t temp[] =
 8002d44:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <Munmunbot_Protocol+0x51c>)
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
								UARTTxWrite(uart, temp, 4);
 8002d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6838      	ldr	r0, [r7, #0]
 8002d52:	f7ff fd77 	bl	8002844 <UARTTxWrite>
						break;
 8002d56:	e187      	b.n	8003068 <Munmunbot_Protocol+0x748>

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 8002d58:	4a39      	ldr	r2, [pc, #228]	; (8002e40 <Munmunbot_Protocol+0x520>)
 8002d5a:	f107 031c 	add.w	r3, r7, #28
 8002d5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d62:	6018      	str	r0, [r3, #0]
 8002d64:	3304      	adds	r3, #4
 8002d66:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0}; ///ACK1 + Mode 9
							uint8_t Shift = 2;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
							DataForReturn = Current_Station&(0xff);
 8002d6e:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <Munmunbot_Protocol+0x524>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <Munmunbot_Protocol+0x528>)
 8002d76:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8002d78:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <Munmunbot_Protocol+0x528>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002d84:	3301      	adds	r3, #1
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002d8c:	440b      	add	r3, r1
 8002d8e:	f803 2c1c 	strb.w	r2, [r3, #-28]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <Munmunbot_Protocol+0x528>)
 8002d94:	881a      	ldrh	r2, [r3, #0]
 8002d96:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002da2:	440b      	add	r3, r1
 8002da4:	f803 2c1c 	strb.w	r2, [r3, #-28]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8002da8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002dac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002db0:	4413      	add	r3, r2
 8002db2:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8002db6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002dc0:	440b      	add	r3, r1
 8002dc2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002dce:	3302      	adds	r3, #2
 8002dd0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002dd4:	440b      	add	r3, r1
 8002dd6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002dda:	4413      	add	r3, r2
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002de2:	3303      	adds	r3, #3
 8002de4:	43d2      	mvns	r2, r2
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002dec:	440b      	add	r3, r1
 8002dee:	f803 2c1c 	strb.w	r2, [r3, #-28]
							UARTTxWrite(uart, temp, 4+Shift);
 8002df2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3304      	adds	r3, #4
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	4619      	mov	r1, r3
 8002e02:	6838      	ldr	r0, [r7, #0]
 8002e04:	f7ff fd1e 	bl	8002844 <UARTTxWrite>
						}

						break;
 8002e08:	e12e      	b.n	8003068 <Munmunbot_Protocol+0x748>
 8002e0a:	bf00      	nop
 8002e0c:	200001ec 	.word	0x200001ec
 8002e10:	200001f0 	.word	0x200001f0
 8002e14:	200001f4 	.word	0x200001f4
 8002e18:	200000d1 	.word	0x200000d1
 8002e1c:	200001f2 	.word	0x200001f2
 8002e20:	200001c8 	.word	0x200001c8
 8002e24:	20000158 	.word	0x20000158
 8002e28:	200000e4 	.word	0x200000e4
 8002e2c:	200000e6 	.word	0x200000e6
 8002e30:	200000d4 	.word	0x200000d4
 8002e34:	200000e8 	.word	0x200000e8
 8002e38:	200002f6 	.word	0x200002f6
 8002e3c:	6e467558 	.word	0x6e467558
 8002e40:	08008ea0 	.word	0x08008ea0
 8002e44:	200000e7 	.word	0x200000e7
 8002e48:	200002fa 	.word	0x200002fa

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 8002e4c:	4a98      	ldr	r2, [pc, #608]	; (80030b0 <Munmunbot_Protocol+0x790>)
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e56:	6018      	str	r0, [r3, #0]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,154, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
							DataForReturn = ((((int)PositionPIDController.OutputFeedback) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
 8002e62:	4b94      	ldr	r3, [pc, #592]	; (80030b4 <Munmunbot_Protocol+0x794>)
 8002e64:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e6c:	ee17 2a90 	vmov	r2, s15
 8002e70:	4b91      	ldr	r3, [pc, #580]	; (80030b8 <Munmunbot_Protocol+0x798>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	fbb2 f1f3 	udiv	r1, r2, r3
 8002e78:	fb03 f301 	mul.w	r3, r3, r1
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd faeb 	bl	800045c <__aeabi_ui2d>
 8002e86:	a386      	add	r3, pc, #536	; (adr r3, 80030a0 <Munmunbot_Protocol+0x780>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd fb60 	bl	8000550 <__aeabi_dmul>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	a383      	add	r3, pc, #524	; (adr r3, 80030a8 <Munmunbot_Protocol+0x788>)
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	f7fd fb57 	bl	8000550 <__aeabi_dmul>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4614      	mov	r4, r2
 8002ea8:	461d      	mov	r5, r3
 8002eaa:	4b83      	ldr	r3, [pc, #524]	; (80030b8 <Munmunbot_Protocol+0x798>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fad4 	bl	800045c <__aeabi_ui2d>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4620      	mov	r0, r4
 8002eba:	4629      	mov	r1, r5
 8002ebc:	f7fd fc72 	bl	80007a4 <__aeabi_ddiv>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fdf2 	bl	8000ab0 <__aeabi_d2uiz>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	4b7a      	ldr	r3, [pc, #488]	; (80030bc <Munmunbot_Protocol+0x79c>)
 8002ed2:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8002ed4:	4b79      	ldr	r3, [pc, #484]	; (80030bc <Munmunbot_Protocol+0x79c>)
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002ee8:	440b      	add	r3, r1
 8002eea:	f803 2c24 	strb.w	r2, [r3, #-36]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8002eee:	4b73      	ldr	r3, [pc, #460]	; (80030bc <Munmunbot_Protocol+0x79c>)
 8002ef0:	881a      	ldrh	r2, [r3, #0]
 8002ef2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002efe:	440b      	add	r3, r1
 8002f00:	f803 2c24 	strb.w	r2, [r3, #-36]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8002f04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8002f12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f16:	3301      	adds	r3, #1
 8002f18:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f22:	4413      	add	r3, r2
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f30:	440b      	add	r3, r1
 8002f32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f36:	4413      	add	r3, r2
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f3e:	3303      	adds	r3, #3
 8002f40:	43d2      	mvns	r2, r2
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f48:	440b      	add	r3, r1
 8002f4a:	f803 2c24 	strb.w	r2, [r3, #-36]
							UARTTxWrite(uart, temp, 4+Shift);
 8002f4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3304      	adds	r3, #4
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	6838      	ldr	r0, [r7, #0]
 8002f60:	f7ff fc70 	bl	8002844 <UARTTxWrite>
						}
						break;
 8002f64:	e080      	b.n	8003068 <Munmunbot_Protocol+0x748>

					case 11: /// Return Angular Velocity Max  ##Complete##
							{
								uint8_t temp[] =
 8002f66:	4a56      	ldr	r2, [pc, #344]	; (80030c0 <Munmunbot_Protocol+0x7a0>)
 8002f68:	f107 030c 	add.w	r3, r7, #12
 8002f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f70:	6018      	str	r0, [r3, #0]
 8002f72:	3304      	adds	r3, #4
 8002f74:	8019      	strh	r1, [r3, #0]
								{0x58 , 0x75 ,155, 0b0,  0b0, 0b0};
								uint8_t Shift = 2;
 8002f76:	2302      	movs	r3, #2
 8002f78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
								DataForReturn = (TrjStruc.AngularVelocityMax_Setting*60)/(CUSSStruc.PPRxQEI);  ///pps to RPM
 8002f7c:	4b51      	ldr	r3, [pc, #324]	; (80030c4 <Munmunbot_Protocol+0x7a4>)
 8002f7e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f82:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80030c8 <Munmunbot_Protocol+0x7a8>
 8002f86:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002f8a:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <Munmunbot_Protocol+0x798>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f9e:	ee17 3a90 	vmov	r3, s15
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	4b45      	ldr	r3, [pc, #276]	; (80030bc <Munmunbot_Protocol+0x79c>)
 8002fa6:	801a      	strh	r2, [r3, #0]
								temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8002fa8:	4b44      	ldr	r3, [pc, #272]	; (80030bc <Munmunbot_Protocol+0x79c>)
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002fbc:	440b      	add	r3, r1
 8002fbe:	f803 2c2c 	strb.w	r2, [r3, #-44]
								temp[2+Shift] = (DataForReturn)&(0xff);
 8002fc2:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <Munmunbot_Protocol+0x79c>)
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fca:	3302      	adds	r3, #2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f803 2c2c 	strb.w	r2, [r3, #-44]
								temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8002fd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fdc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8002fe6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fea:	3301      	adds	r3, #1
 8002fec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002ff0:	440b      	add	r3, r1
 8002ff2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ffe:	3302      	adds	r3, #2
 8003000:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003004:	440b      	add	r3, r1
 8003006:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800300a:	4413      	add	r3, r2
 800300c:	b2da      	uxtb	r2, r3
 800300e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003012:	3303      	adds	r3, #3
 8003014:	43d2      	mvns	r2, r2
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800301c:	440b      	add	r3, r1
 800301e:	f803 2c2c 	strb.w	r2, [r3, #-44]
								UARTTxWrite(uart, temp, 4+Shift);
 8003022:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003026:	b29b      	uxth	r3, r3
 8003028:	3304      	adds	r3, #4
 800302a:	b29a      	uxth	r2, r3
 800302c:	f107 030c 	add.w	r3, r7, #12
 8003030:	4619      	mov	r1, r3
 8003032:	6838      	ldr	r0, [r7, #0]
 8003034:	f7ff fc06 	bl	8002844 <UARTTxWrite>
							}
						break;
 8003038:	e016      	b.n	8003068 <Munmunbot_Protocol+0x748>
					case 12:
						if (Munmunbot_State == STATE_Idle)
						{

						}
						ACK1Return(uart);
 800303a:	6838      	ldr	r0, [r7, #0]
 800303c:	f7ff fc4a 	bl	80028d4 <ACK1Return>
						break;
 8003040:	e012      	b.n	8003068 <Munmunbot_Protocol+0x748>
					case 13:
						if (Munmunbot_State == STATE_Idle)
						{

						}
						ACK1Return(uart);
 8003042:	6838      	ldr	r0, [r7, #0]
 8003044:	f7ff fc46 	bl	80028d4 <ACK1Return>
						break;
 8003048:	e00e      	b.n	8003068 <Munmunbot_Protocol+0x748>

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <Munmunbot_Protocol+0x7ac>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d105      	bne.n	800305e <Munmunbot_Protocol+0x73e>
						{
							Munmunbot_State = STATE_SetHome;
 8003052:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <Munmunbot_Protocol+0x7ac>)
 8003054:	2206      	movs	r2, #6
 8003056:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 8003058:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <Munmunbot_Protocol+0x7b0>)
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 800305e:	6838      	ldr	r0, [r7, #0]
 8003060:	f7ff fc38 	bl	80028d4 <ACK1Return>
						break;
 8003064:	e000      	b.n	8003068 <Munmunbot_Protocol+0x748>
				    }
			   }
 8003066:	bf00      	nop
			n_station = 0;
 8003068:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <Munmunbot_Protocol+0x7b4>)
 800306a:	2200      	movs	r2, #0
 800306c:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <Munmunbot_Protocol+0x7b8>)
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 8003074:	4b19      	ldr	r3, [pc, #100]	; (80030dc <Munmunbot_Protocol+0x7bc>)
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 800307a:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <Munmunbot_Protocol+0x7c0>)
 800307c:	2200      	movs	r2, #0
 800307e:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 8003080:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <Munmunbot_Protocol+0x7c4>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
			Munmunbot_Protocol_State = PP_STARTandMode;
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <Munmunbot_Protocol+0x7c8>)
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
			break;
 800308c:	e002      	b.n	8003094 <Munmunbot_Protocol+0x774>
			break;
 800308e:	bf00      	nop
 8003090:	e000      	b.n	8003094 <Munmunbot_Protocol+0x774>
				break;
 8003092:	bf00      	nop
			}
	}
}
 8003094:	bf00      	nop
 8003096:	3738      	adds	r7, #56	; 0x38
 8003098:	46bd      	mov	sp, r7
 800309a:	bdb0      	pop	{r4, r5, r7, pc}
 800309c:	f3af 8000 	nop.w
 80030a0:	9ba5e354 	.word	0x9ba5e354
 80030a4:	400920c4 	.word	0x400920c4
 80030a8:	00000000 	.word	0x00000000
 80030ac:	40c38800 	.word	0x40c38800
 80030b0:	08008ea8 	.word	0x08008ea8
 80030b4:	200000f8 	.word	0x200000f8
 80030b8:	200001c8 	.word	0x200001c8
 80030bc:	200002fa 	.word	0x200002fa
 80030c0:	08008eb0 	.word	0x08008eb0
 80030c4:	20000158 	.word	0x20000158
 80030c8:	42700000 	.word	0x42700000
 80030cc:	200000d1 	.word	0x200000d1
 80030d0:	200000d2 	.word	0x200000d2
 80030d4:	200002f4 	.word	0x200002f4
 80030d8:	200001f0 	.word	0x200001f0
 80030dc:	200002f8 	.word	0x200002f8
 80030e0:	200001f2 	.word	0x200001f2
 80030e4:	200001ec 	.word	0x200001ec
 80030e8:	200000d0 	.word	0x200000d0

080030ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030f0:	b672      	cpsid	i
}
 80030f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030f4:	e7fe      	b.n	80030f4 <Error_Handler+0x8>
	...

080030f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_MspInit+0x4c>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	4a0f      	ldr	r2, [pc, #60]	; (8003144 <HAL_MspInit+0x4c>)
 8003108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800310c:	6453      	str	r3, [r2, #68]	; 0x44
 800310e:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <HAL_MspInit+0x4c>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_MspInit+0x4c>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a08      	ldr	r2, [pc, #32]	; (8003144 <HAL_MspInit+0x4c>)
 8003124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003128:	6413      	str	r3, [r2, #64]	; 0x40
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_MspInit+0x4c>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003136:	2007      	movs	r0, #7
 8003138:	f000 fbf0 	bl	800391c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40023800 	.word	0x40023800

08003148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	f107 0314 	add.w	r3, r7, #20
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a21      	ldr	r2, [pc, #132]	; (80031ec <HAL_I2C_MspInit+0xa4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d13b      	bne.n	80031e2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <HAL_I2C_MspInit+0xa8>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	4a1f      	ldr	r2, [pc, #124]	; (80031f0 <HAL_I2C_MspInit+0xa8>)
 8003174:	f043 0302 	orr.w	r3, r3, #2
 8003178:	6313      	str	r3, [r2, #48]	; 0x30
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_I2C_MspInit+0xa8>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003186:	23c0      	movs	r3, #192	; 0xc0
 8003188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800318a:	2312      	movs	r3, #18
 800318c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800318e:	2301      	movs	r3, #1
 8003190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003192:	2303      	movs	r3, #3
 8003194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003196:	2304      	movs	r3, #4
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	4619      	mov	r1, r3
 80031a0:	4814      	ldr	r0, [pc, #80]	; (80031f4 <HAL_I2C_MspInit+0xac>)
 80031a2:	f001 f80d 	bl	80041c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_I2C_MspInit+0xa8>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a10      	ldr	r2, [pc, #64]	; (80031f0 <HAL_I2C_MspInit+0xa8>)
 80031b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <HAL_I2C_MspInit+0xa8>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2100      	movs	r1, #0
 80031c6:	201f      	movs	r0, #31
 80031c8:	f000 fbb3 	bl	8003932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80031cc:	201f      	movs	r0, #31
 80031ce:	f000 fbcc 	bl	800396a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2100      	movs	r1, #0
 80031d6:	2020      	movs	r0, #32
 80031d8:	f000 fbab 	bl	8003932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80031dc:	2020      	movs	r0, #32
 80031de:	f000 fbc4 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031e2:	bf00      	nop
 80031e4:	3728      	adds	r7, #40	; 0x28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40005400 	.word	0x40005400
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40020400 	.word	0x40020400

080031f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003200:	f107 0314 	add.w	r3, r7, #20
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a19      	ldr	r2, [pc, #100]	; (800327c <HAL_TIM_Encoder_MspInit+0x84>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d12c      	bne.n	8003274 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	4b18      	ldr	r3, [pc, #96]	; (8003280 <HAL_TIM_Encoder_MspInit+0x88>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	4a17      	ldr	r2, [pc, #92]	; (8003280 <HAL_TIM_Encoder_MspInit+0x88>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6453      	str	r3, [r2, #68]	; 0x44
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_TIM_Encoder_MspInit+0x88>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	4b11      	ldr	r3, [pc, #68]	; (8003280 <HAL_TIM_Encoder_MspInit+0x88>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a10      	ldr	r2, [pc, #64]	; (8003280 <HAL_TIM_Encoder_MspInit+0x88>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <HAL_TIM_Encoder_MspInit+0x88>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 8003252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003258:	2302      	movs	r3, #2
 800325a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003260:	2300      	movs	r3, #0
 8003262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003264:	2301      	movs	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003268:	f107 0314 	add.w	r3, r7, #20
 800326c:	4619      	mov	r1, r3
 800326e:	4805      	ldr	r0, [pc, #20]	; (8003284 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003270:	f000 ffa6 	bl	80041c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003274:	bf00      	nop
 8003276:	3728      	adds	r7, #40	; 0x28
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40010000 	.word	0x40010000
 8003280:	40023800 	.word	0x40023800
 8003284:	40020000 	.word	0x40020000

08003288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003298:	d116      	bne.n	80032c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <HAL_TIM_Base_MspInit+0x70>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a15      	ldr	r2, [pc, #84]	; (80032f8 <HAL_TIM_Base_MspInit+0x70>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <HAL_TIM_Base_MspInit+0x70>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2100      	movs	r1, #0
 80032ba:	201c      	movs	r0, #28
 80032bc:	f000 fb39 	bl	8003932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032c0:	201c      	movs	r0, #28
 80032c2:	f000 fb52 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032c6:	e012      	b.n	80032ee <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <HAL_TIM_Base_MspInit+0x74>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d10d      	bne.n	80032ee <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <HAL_TIM_Base_MspInit+0x70>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <HAL_TIM_Base_MspInit+0x70>)
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	6413      	str	r3, [r2, #64]	; 0x40
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_TIM_Base_MspInit+0x70>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40000400 	.word	0x40000400

08003300 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 030c 	add.w	r3, r7, #12
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a12      	ldr	r2, [pc, #72]	; (8003368 <HAL_TIM_MspPostInit+0x68>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d11d      	bne.n	800335e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_TIM_MspPostInit+0x6c>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a10      	ldr	r2, [pc, #64]	; (800336c <HAL_TIM_MspPostInit+0x6c>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b0e      	ldr	r3, [pc, #56]	; (800336c <HAL_TIM_MspPostInit+0x6c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 800333e:	2340      	movs	r3, #64	; 0x40
 8003340:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	2302      	movs	r3, #2
 8003344:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800334e:	2302      	movs	r3, #2
 8003350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 8003352:	f107 030c 	add.w	r3, r7, #12
 8003356:	4619      	mov	r1, r3
 8003358:	4805      	ldr	r0, [pc, #20]	; (8003370 <HAL_TIM_MspPostInit+0x70>)
 800335a:	f000 ff31 	bl	80041c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800335e:	bf00      	nop
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40000400 	.word	0x40000400
 800336c:	40023800 	.word	0x40023800
 8003370:	40020000 	.word	0x40020000

08003374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a4c      	ldr	r2, [pc, #304]	; (80034c4 <HAL_UART_MspInit+0x150>)
 8003392:	4293      	cmp	r3, r2
 8003394:	f040 8091 	bne.w	80034ba <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	4b4a      	ldr	r3, [pc, #296]	; (80034c8 <HAL_UART_MspInit+0x154>)
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	4a49      	ldr	r2, [pc, #292]	; (80034c8 <HAL_UART_MspInit+0x154>)
 80033a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a6:	6413      	str	r3, [r2, #64]	; 0x40
 80033a8:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_UART_MspInit+0x154>)
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	4b43      	ldr	r3, [pc, #268]	; (80034c8 <HAL_UART_MspInit+0x154>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	4a42      	ldr	r2, [pc, #264]	; (80034c8 <HAL_UART_MspInit+0x154>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6313      	str	r3, [r2, #48]	; 0x30
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <HAL_UART_MspInit+0x154>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033d0:	230c      	movs	r3, #12
 80033d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033e0:	2307      	movs	r3, #7
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	4619      	mov	r1, r3
 80033ea:	4838      	ldr	r0, [pc, #224]	; (80034cc <HAL_UART_MspInit+0x158>)
 80033ec:	f000 fee8 	bl	80041c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80033f0:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <HAL_UART_MspInit+0x15c>)
 80033f2:	4a38      	ldr	r2, [pc, #224]	; (80034d4 <HAL_UART_MspInit+0x160>)
 80033f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80033f6:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <HAL_UART_MspInit+0x15c>)
 80033f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033fe:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <HAL_UART_MspInit+0x15c>)
 8003400:	2240      	movs	r2, #64	; 0x40
 8003402:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003404:	4b32      	ldr	r3, [pc, #200]	; (80034d0 <HAL_UART_MspInit+0x15c>)
 8003406:	2200      	movs	r2, #0
 8003408:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_UART_MspInit+0x15c>)
 800340c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003410:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003412:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <HAL_UART_MspInit+0x15c>)
 8003414:	2200      	movs	r2, #0
 8003416:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_UART_MspInit+0x15c>)
 800341a:	2200      	movs	r2, #0
 800341c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800341e:	4b2c      	ldr	r3, [pc, #176]	; (80034d0 <HAL_UART_MspInit+0x15c>)
 8003420:	2200      	movs	r2, #0
 8003422:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003424:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <HAL_UART_MspInit+0x15c>)
 8003426:	2200      	movs	r2, #0
 8003428:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800342a:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <HAL_UART_MspInit+0x15c>)
 800342c:	2200      	movs	r2, #0
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003430:	4827      	ldr	r0, [pc, #156]	; (80034d0 <HAL_UART_MspInit+0x15c>)
 8003432:	f000 fab5 	bl	80039a0 <HAL_DMA_Init>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800343c:	f7ff fe56 	bl	80030ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a23      	ldr	r2, [pc, #140]	; (80034d0 <HAL_UART_MspInit+0x15c>)
 8003444:	635a      	str	r2, [r3, #52]	; 0x34
 8003446:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <HAL_UART_MspInit+0x15c>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800344c:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <HAL_UART_MspInit+0x164>)
 800344e:	4a23      	ldr	r2, [pc, #140]	; (80034dc <HAL_UART_MspInit+0x168>)
 8003450:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003452:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_UART_MspInit+0x164>)
 8003454:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003458:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800345a:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <HAL_UART_MspInit+0x164>)
 800345c:	2200      	movs	r2, #0
 800345e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_UART_MspInit+0x164>)
 8003462:	2200      	movs	r2, #0
 8003464:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003466:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <HAL_UART_MspInit+0x164>)
 8003468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800346c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800346e:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_UART_MspInit+0x164>)
 8003470:	2200      	movs	r2, #0
 8003472:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <HAL_UART_MspInit+0x164>)
 8003476:	2200      	movs	r2, #0
 8003478:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <HAL_UART_MspInit+0x164>)
 800347c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003480:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003482:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <HAL_UART_MspInit+0x164>)
 8003484:	2200      	movs	r2, #0
 8003486:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003488:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <HAL_UART_MspInit+0x164>)
 800348a:	2200      	movs	r2, #0
 800348c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800348e:	4812      	ldr	r0, [pc, #72]	; (80034d8 <HAL_UART_MspInit+0x164>)
 8003490:	f000 fa86 	bl	80039a0 <HAL_DMA_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800349a:	f7ff fe27 	bl	80030ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <HAL_UART_MspInit+0x164>)
 80034a2:	639a      	str	r2, [r3, #56]	; 0x38
 80034a4:	4a0c      	ldr	r2, [pc, #48]	; (80034d8 <HAL_UART_MspInit+0x164>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2100      	movs	r1, #0
 80034ae:	2026      	movs	r0, #38	; 0x26
 80034b0:	f000 fa3f 	bl	8003932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034b4:	2026      	movs	r0, #38	; 0x26
 80034b6:	f000 fa58 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034ba:	bf00      	nop
 80034bc:	3728      	adds	r7, #40	; 0x28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40004400 	.word	0x40004400
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40020000 	.word	0x40020000
 80034d0:	20000404 	.word	0x20000404
 80034d4:	400260a0 	.word	0x400260a0
 80034d8:	20000308 	.word	0x20000308
 80034dc:	40026088 	.word	0x40026088

080034e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034e4:	e7fe      	b.n	80034e4 <NMI_Handler+0x4>

080034e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ea:	e7fe      	b.n	80034ea <HardFault_Handler+0x4>

080034ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034f0:	e7fe      	b.n	80034f0 <MemManage_Handler+0x4>

080034f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034f6:	e7fe      	b.n	80034f6 <BusFault_Handler+0x4>

080034f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034fc:	e7fe      	b.n	80034fc <UsageFault_Handler+0x4>

080034fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800351a:	b480      	push	{r7}
 800351c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800352c:	f000 f906 	bl	800373c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003530:	bf00      	nop
 8003532:	bd80      	pop	{r7, pc}

08003534 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003538:	4802      	ldr	r0, [pc, #8]	; (8003544 <DMA1_Stream5_IRQHandler+0x10>)
 800353a:	f000 fbc9 	bl	8003cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000308 	.word	0x20000308

08003548 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800354c:	4802      	ldr	r0, [pc, #8]	; (8003558 <DMA1_Stream6_IRQHandler+0x10>)
 800354e:	f000 fbbf 	bl	8003cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000404 	.word	0x20000404

0800355c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003560:	4802      	ldr	r0, [pc, #8]	; (800356c <TIM2_IRQHandler+0x10>)
 8003562:	f003 fd9b 	bl	800709c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	200004ac 	.word	0x200004ac

08003570 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <I2C1_EV_IRQHandler+0x10>)
 8003576:	f001 f91d 	bl	80047b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000368 	.word	0x20000368

08003584 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <I2C1_ER_IRQHandler+0x10>)
 800358a:	f001 fa80 	bl	8004a8e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000368 	.word	0x20000368

08003598 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <USART2_IRQHandler+0x10>)
 800359e:	f004 fc67 	bl	8007e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200004f4 	.word	0x200004f4

080035ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035b4:	4a14      	ldr	r2, [pc, #80]	; (8003608 <_sbrk+0x5c>)
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <_sbrk+0x60>)
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <_sbrk+0x64>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035c8:	4b11      	ldr	r3, [pc, #68]	; (8003610 <_sbrk+0x64>)
 80035ca:	4a12      	ldr	r2, [pc, #72]	; (8003614 <_sbrk+0x68>)
 80035cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <_sbrk+0x64>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d207      	bcs.n	80035ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035dc:	f005 faa4 	bl	8008b28 <__errno>
 80035e0:	4603      	mov	r3, r0
 80035e2:	220c      	movs	r2, #12
 80035e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ea:	e009      	b.n	8003600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035ec:	4b08      	ldr	r3, [pc, #32]	; (8003610 <_sbrk+0x64>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <_sbrk+0x64>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	4a05      	ldr	r2, [pc, #20]	; (8003610 <_sbrk+0x64>)
 80035fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035fe:	68fb      	ldr	r3, [r7, #12]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20020000 	.word	0x20020000
 800360c:	00000400 	.word	0x00000400
 8003610:	200002fc 	.word	0x200002fc
 8003614:	20000550 	.word	0x20000550

08003618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <SystemInit+0x28>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	4a07      	ldr	r2, [pc, #28]	; (8003640 <SystemInit+0x28>)
 8003624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800362c:	4b04      	ldr	r3, [pc, #16]	; (8003640 <SystemInit+0x28>)
 800362e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003632:	609a      	str	r2, [r3, #8]
#endif
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800367c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003648:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800364a:	e003      	b.n	8003654 <LoopCopyDataInit>

0800364c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800364e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003650:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003652:	3104      	adds	r1, #4

08003654 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003654:	480b      	ldr	r0, [pc, #44]	; (8003684 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003656:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003658:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800365a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800365c:	d3f6      	bcc.n	800364c <CopyDataInit>
  ldr  r2, =_sbss
 800365e:	4a0b      	ldr	r2, [pc, #44]	; (800368c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003660:	e002      	b.n	8003668 <LoopFillZerobss>

08003662 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003662:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003664:	f842 3b04 	str.w	r3, [r2], #4

08003668 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800366a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800366c:	d3f9      	bcc.n	8003662 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800366e:	f7ff ffd3 	bl	8003618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003672:	f005 fa5f 	bl	8008b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003676:	f7fd fd15 	bl	80010a4 <main>
  bx  lr    
 800367a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800367c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003680:	08008ee8 	.word	0x08008ee8
  ldr  r0, =_sdata
 8003684:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003688:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 800368c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8003690:	2000054c 	.word	0x2000054c

08003694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003694:	e7fe      	b.n	8003694 <ADC_IRQHandler>
	...

08003698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <HAL_Init+0x40>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0d      	ldr	r2, [pc, #52]	; (80036d8 <HAL_Init+0x40>)
 80036a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_Init+0x40>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <HAL_Init+0x40>)
 80036ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b4:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_Init+0x40>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <HAL_Init+0x40>)
 80036ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036c0:	2003      	movs	r0, #3
 80036c2:	f000 f92b 	bl	800391c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036c6:	2000      	movs	r0, #0
 80036c8:	f000 f808 	bl	80036dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036cc:	f7ff fd14 	bl	80030f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023c00 	.word	0x40023c00

080036dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <HAL_InitTick+0x54>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_InitTick+0x58>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	4619      	mov	r1, r3
 80036ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f943 	bl	8003986 <HAL_SYSTICK_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e00e      	b.n	8003728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b0f      	cmp	r3, #15
 800370e:	d80a      	bhi.n	8003726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003710:	2200      	movs	r2, #0
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	f04f 30ff 	mov.w	r0, #4294967295
 8003718:	f000 f90b 	bl	8003932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800371c:	4a06      	ldr	r2, [pc, #24]	; (8003738 <HAL_InitTick+0x5c>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	e000      	b.n	8003728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000014 	.word	0x20000014
 8003734:	2000001c 	.word	0x2000001c
 8003738:	20000018 	.word	0x20000018

0800373c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_IncTick+0x20>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_IncTick+0x24>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4413      	add	r3, r2
 800374c:	4a04      	ldr	r2, [pc, #16]	; (8003760 <HAL_IncTick+0x24>)
 800374e:	6013      	str	r3, [r2, #0]
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	2000001c 	.word	0x2000001c
 8003760:	20000538 	.word	0x20000538

08003764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return uwTick;
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <HAL_GetTick+0x14>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000538 	.word	0x20000538

0800377c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <__NVIC_SetPriorityGrouping+0x44>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003798:	4013      	ands	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ae:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <__NVIC_SetPriorityGrouping+0x44>)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	60d3      	str	r3, [r2, #12]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <__NVIC_GetPriorityGrouping+0x18>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	f003 0307 	and.w	r3, r3, #7
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	db0b      	blt.n	800380a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	f003 021f 	and.w	r2, r3, #31
 80037f8:	4907      	ldr	r1, [pc, #28]	; (8003818 <__NVIC_EnableIRQ+0x38>)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2001      	movs	r0, #1
 8003802:	fa00 f202 	lsl.w	r2, r0, r2
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000e100 	.word	0xe000e100

0800381c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	6039      	str	r1, [r7, #0]
 8003826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382c:	2b00      	cmp	r3, #0
 800382e:	db0a      	blt.n	8003846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	b2da      	uxtb	r2, r3
 8003834:	490c      	ldr	r1, [pc, #48]	; (8003868 <__NVIC_SetPriority+0x4c>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	0112      	lsls	r2, r2, #4
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	440b      	add	r3, r1
 8003840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003844:	e00a      	b.n	800385c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4908      	ldr	r1, [pc, #32]	; (800386c <__NVIC_SetPriority+0x50>)
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	3b04      	subs	r3, #4
 8003854:	0112      	lsls	r2, r2, #4
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	440b      	add	r3, r1
 800385a:	761a      	strb	r2, [r3, #24]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000e100 	.word	0xe000e100
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f1c3 0307 	rsb	r3, r3, #7
 800388a:	2b04      	cmp	r3, #4
 800388c:	bf28      	it	cs
 800388e:	2304      	movcs	r3, #4
 8003890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3304      	adds	r3, #4
 8003896:	2b06      	cmp	r3, #6
 8003898:	d902      	bls.n	80038a0 <NVIC_EncodePriority+0x30>
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3b03      	subs	r3, #3
 800389e:	e000      	b.n	80038a2 <NVIC_EncodePriority+0x32>
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	f04f 32ff 	mov.w	r2, #4294967295
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43da      	mvns	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	401a      	ands	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b8:	f04f 31ff 	mov.w	r1, #4294967295
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	43d9      	mvns	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c8:	4313      	orrs	r3, r2
         );
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3724      	adds	r7, #36	; 0x24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e8:	d301      	bcc.n	80038ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ea:	2301      	movs	r3, #1
 80038ec:	e00f      	b.n	800390e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <SysTick_Config+0x40>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038f6:	210f      	movs	r1, #15
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295
 80038fc:	f7ff ff8e 	bl	800381c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <SysTick_Config+0x40>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003906:	4b04      	ldr	r3, [pc, #16]	; (8003918 <SysTick_Config+0x40>)
 8003908:	2207      	movs	r2, #7
 800390a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	e000e010 	.word	0xe000e010

0800391c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ff29 	bl	800377c <__NVIC_SetPriorityGrouping>
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003932:	b580      	push	{r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003944:	f7ff ff3e 	bl	80037c4 <__NVIC_GetPriorityGrouping>
 8003948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f7ff ff8e 	bl	8003870 <NVIC_EncodePriority>
 8003954:	4602      	mov	r2, r0
 8003956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff5d 	bl	800381c <__NVIC_SetPriority>
}
 8003962:	bf00      	nop
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff31 	bl	80037e0 <__NVIC_EnableIRQ>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ffa2 	bl	80038d8 <SysTick_Config>
 8003994:	4603      	mov	r3, r0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039ac:	f7ff feda 	bl	8003764 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e099      	b.n	8003af0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039dc:	e00f      	b.n	80039fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039de:	f7ff fec1 	bl	8003764 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d908      	bls.n	80039fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2203      	movs	r2, #3
 80039f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e078      	b.n	8003af0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e8      	bne.n	80039de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4b38      	ldr	r3, [pc, #224]	; (8003af8 <HAL_DMA_Init+0x158>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d107      	bne.n	8003a68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	4313      	orrs	r3, r2
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f023 0307 	bic.w	r3, r3, #7
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d117      	bne.n	8003ac2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fb0f 	bl	80040c8 <DMA_CheckFifoParam>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2240      	movs	r2, #64	; 0x40
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e016      	b.n	8003af0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fac6 	bl	800405c <DMA_CalcBaseAndBitshift>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	223f      	movs	r2, #63	; 0x3f
 8003ada:	409a      	lsls	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	f010803f 	.word	0xf010803f

08003afc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_DMA_Start_IT+0x26>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e040      	b.n	8003ba4 <HAL_DMA_Start_IT+0xa8>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d12f      	bne.n	8003b96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fa58 	bl	8004000 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	223f      	movs	r2, #63	; 0x3f
 8003b56:	409a      	lsls	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0216 	orr.w	r2, r2, #22
 8003b6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0208 	orr.w	r2, r2, #8
 8003b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e005      	b.n	8003ba2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bba:	f7ff fdd3 	bl	8003764 <HAL_GetTick>
 8003bbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d008      	beq.n	8003bde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2280      	movs	r2, #128	; 0x80
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e052      	b.n	8003c84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0216 	bic.w	r2, r2, #22
 8003bec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <HAL_DMA_Abort+0x62>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0208 	bic.w	r2, r2, #8
 8003c1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c2e:	e013      	b.n	8003c58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c30:	f7ff fd98 	bl	8003764 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d90c      	bls.n	8003c58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2203      	movs	r2, #3
 8003c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e015      	b.n	8003c84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e4      	bne.n	8003c30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	223f      	movs	r2, #63	; 0x3f
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d004      	beq.n	8003caa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e00c      	b.n	8003cc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2205      	movs	r2, #5
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cdc:	4b92      	ldr	r3, [pc, #584]	; (8003f28 <HAL_DMA_IRQHandler+0x258>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a92      	ldr	r2, [pc, #584]	; (8003f2c <HAL_DMA_IRQHandler+0x25c>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	0a9b      	lsrs	r3, r3, #10
 8003ce8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01a      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d013      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0204 	bic.w	r2, r2, #4
 8003d22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	2208      	movs	r2, #8
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0201 	orr.w	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	2201      	movs	r2, #1
 8003d42:	409a      	lsls	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d012      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5e:	2201      	movs	r2, #1
 8003d60:	409a      	lsls	r2, r3
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	f043 0202 	orr.w	r2, r3, #2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	2204      	movs	r2, #4
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d012      	beq.n	8003da8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00b      	beq.n	8003da8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	2204      	movs	r2, #4
 8003d96:	409a      	lsls	r2, r3
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da0:	f043 0204 	orr.w	r2, r3, #4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dac:	2210      	movs	r2, #16
 8003dae:	409a      	lsls	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d043      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d03c      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	2210      	movs	r2, #16
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d018      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d108      	bne.n	8003e00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d024      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
 8003dfe:	e01f      	b.n	8003e40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01b      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
 8003e10:	e016      	b.n	8003e40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d107      	bne.n	8003e30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0208 	bic.w	r2, r2, #8
 8003e2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	2220      	movs	r2, #32
 8003e46:	409a      	lsls	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 808e 	beq.w	8003f6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8086 	beq.w	8003f6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	2220      	movs	r2, #32
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b05      	cmp	r3, #5
 8003e78:	d136      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0216 	bic.w	r2, r2, #22
 8003e88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <HAL_DMA_IRQHandler+0x1da>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0208 	bic.w	r2, r2, #8
 8003eb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	223f      	movs	r2, #63	; 0x3f
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d07d      	beq.n	8003fda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	4798      	blx	r3
        }
        return;
 8003ee6:	e078      	b.n	8003fda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01c      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d108      	bne.n	8003f16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d030      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
 8003f14:	e02b      	b.n	8003f6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d027      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4798      	blx	r3
 8003f26:	e022      	b.n	8003f6e <HAL_DMA_IRQHandler+0x29e>
 8003f28:	20000014 	.word	0x20000014
 8003f2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10f      	bne.n	8003f5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0210 	bic.w	r2, r2, #16
 8003f4c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d032      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d022      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2205      	movs	r2, #5
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d307      	bcc.n	8003fb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f2      	bne.n	8003f9a <HAL_DMA_IRQHandler+0x2ca>
 8003fb4:	e000      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003fb6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
 8003fd8:	e000      	b.n	8003fdc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003fda:	bf00      	nop
    }
  }
}
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop

08003fe4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff2:	b2db      	uxtb	r3, r3
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800401c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	d108      	bne.n	8004040 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800403e:	e007      	b.n	8004050 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	60da      	str	r2, [r3, #12]
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	3b10      	subs	r3, #16
 800406c:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <DMA_CalcBaseAndBitshift+0x64>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004076:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <DMA_CalcBaseAndBitshift+0x68>)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4413      	add	r3, r2
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d909      	bls.n	800409e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004092:	f023 0303 	bic.w	r3, r3, #3
 8004096:	1d1a      	adds	r2, r3, #4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	659a      	str	r2, [r3, #88]	; 0x58
 800409c:	e007      	b.n	80040ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040a6:	f023 0303 	bic.w	r3, r3, #3
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	aaaaaaab 	.word	0xaaaaaaab
 80040c4:	08008ed0 	.word	0x08008ed0

080040c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d11f      	bne.n	8004122 <DMA_CheckFifoParam+0x5a>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d856      	bhi.n	8004196 <DMA_CheckFifoParam+0xce>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <DMA_CheckFifoParam+0x28>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004101 	.word	0x08004101
 80040f4:	08004113 	.word	0x08004113
 80040f8:	08004101 	.word	0x08004101
 80040fc:	08004197 	.word	0x08004197
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d046      	beq.n	800419a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004110:	e043      	b.n	800419a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800411a:	d140      	bne.n	800419e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004120:	e03d      	b.n	800419e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412a:	d121      	bne.n	8004170 <DMA_CheckFifoParam+0xa8>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d837      	bhi.n	80041a2 <DMA_CheckFifoParam+0xda>
 8004132:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <DMA_CheckFifoParam+0x70>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	08004149 	.word	0x08004149
 800413c:	0800414f 	.word	0x0800414f
 8004140:	08004149 	.word	0x08004149
 8004144:	08004161 	.word	0x08004161
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
      break;
 800414c:	e030      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d025      	beq.n	80041a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415e:	e022      	b.n	80041a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004168:	d11f      	bne.n	80041aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800416e:	e01c      	b.n	80041aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d903      	bls.n	800417e <DMA_CheckFifoParam+0xb6>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d003      	beq.n	8004184 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800417c:	e018      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
      break;
 8004182:	e015      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00e      	beq.n	80041ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      break;
 8004194:	e00b      	b.n	80041ae <DMA_CheckFifoParam+0xe6>
      break;
 8004196:	bf00      	nop
 8004198:	e00a      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      break;
 800419a:	bf00      	nop
 800419c:	e008      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      break;
 800419e:	bf00      	nop
 80041a0:	e006      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      break;
 80041a2:	bf00      	nop
 80041a4:	e004      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      break;
 80041a6:	bf00      	nop
 80041a8:	e002      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      break;
 80041ae:	bf00      	nop
    }
  } 
  
  return status; 
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop

080041c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b089      	sub	sp, #36	; 0x24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e159      	b.n	8004490 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041dc:	2201      	movs	r2, #1
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	f040 8148 	bne.w	800448a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b01      	cmp	r3, #1
 8004204:	d005      	beq.n	8004212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800420e:	2b02      	cmp	r3, #2
 8004210:	d130      	bne.n	8004274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	2203      	movs	r2, #3
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4013      	ands	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4313      	orrs	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004248:	2201      	movs	r2, #1
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 0201 	and.w	r2, r3, #1
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	2b03      	cmp	r3, #3
 800427e:	d017      	beq.n	80042b0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	2203      	movs	r2, #3
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4013      	ands	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d123      	bne.n	8004304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	08da      	lsrs	r2, r3, #3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3208      	adds	r2, #8
 80042c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	220f      	movs	r2, #15
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	08da      	lsrs	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3208      	adds	r2, #8
 80042fe:	69b9      	ldr	r1, [r7, #24]
 8004300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	2203      	movs	r2, #3
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0203 	and.w	r2, r3, #3
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80a2 	beq.w	800448a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	4b57      	ldr	r3, [pc, #348]	; (80044a8 <HAL_GPIO_Init+0x2e8>)
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	4a56      	ldr	r2, [pc, #344]	; (80044a8 <HAL_GPIO_Init+0x2e8>)
 8004350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004354:	6453      	str	r3, [r2, #68]	; 0x44
 8004356:	4b54      	ldr	r3, [pc, #336]	; (80044a8 <HAL_GPIO_Init+0x2e8>)
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004362:	4a52      	ldr	r2, [pc, #328]	; (80044ac <HAL_GPIO_Init+0x2ec>)
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	3302      	adds	r3, #2
 800436a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	220f      	movs	r2, #15
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43db      	mvns	r3, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4013      	ands	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a49      	ldr	r2, [pc, #292]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d019      	beq.n	80043c2 <HAL_GPIO_Init+0x202>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a48      	ldr	r2, [pc, #288]	; (80044b4 <HAL_GPIO_Init+0x2f4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <HAL_GPIO_Init+0x1fe>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a47      	ldr	r2, [pc, #284]	; (80044b8 <HAL_GPIO_Init+0x2f8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00d      	beq.n	80043ba <HAL_GPIO_Init+0x1fa>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a46      	ldr	r2, [pc, #280]	; (80044bc <HAL_GPIO_Init+0x2fc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d007      	beq.n	80043b6 <HAL_GPIO_Init+0x1f6>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a45      	ldr	r2, [pc, #276]	; (80044c0 <HAL_GPIO_Init+0x300>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d101      	bne.n	80043b2 <HAL_GPIO_Init+0x1f2>
 80043ae:	2304      	movs	r3, #4
 80043b0:	e008      	b.n	80043c4 <HAL_GPIO_Init+0x204>
 80043b2:	2307      	movs	r3, #7
 80043b4:	e006      	b.n	80043c4 <HAL_GPIO_Init+0x204>
 80043b6:	2303      	movs	r3, #3
 80043b8:	e004      	b.n	80043c4 <HAL_GPIO_Init+0x204>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e002      	b.n	80043c4 <HAL_GPIO_Init+0x204>
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <HAL_GPIO_Init+0x204>
 80043c2:	2300      	movs	r3, #0
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	f002 0203 	and.w	r2, r2, #3
 80043ca:	0092      	lsls	r2, r2, #2
 80043cc:	4093      	lsls	r3, r2
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043d4:	4935      	ldr	r1, [pc, #212]	; (80044ac <HAL_GPIO_Init+0x2ec>)
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	089b      	lsrs	r3, r3, #2
 80043da:	3302      	adds	r3, #2
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043e2:	4b38      	ldr	r3, [pc, #224]	; (80044c4 <HAL_GPIO_Init+0x304>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	43db      	mvns	r3, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4013      	ands	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004406:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <HAL_GPIO_Init+0x304>)
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800440c:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <HAL_GPIO_Init+0x304>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	43db      	mvns	r3, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004430:	4a24      	ldr	r2, [pc, #144]	; (80044c4 <HAL_GPIO_Init+0x304>)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004436:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <HAL_GPIO_Init+0x304>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	43db      	mvns	r3, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800445a:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <HAL_GPIO_Init+0x304>)
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004460:	4b18      	ldr	r3, [pc, #96]	; (80044c4 <HAL_GPIO_Init+0x304>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004484:	4a0f      	ldr	r2, [pc, #60]	; (80044c4 <HAL_GPIO_Init+0x304>)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3301      	adds	r3, #1
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b0f      	cmp	r3, #15
 8004494:	f67f aea2 	bls.w	80041dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	3724      	adds	r7, #36	; 0x24
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40013800 	.word	0x40013800
 80044b0:	40020000 	.word	0x40020000
 80044b4:	40020400 	.word	0x40020400
 80044b8:	40020800 	.word	0x40020800
 80044bc:	40020c00 	.word	0x40020c00
 80044c0:	40021000 	.word	0x40021000
 80044c4:	40013c00 	.word	0x40013c00

080044c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	887b      	ldrh	r3, [r7, #2]
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
 80044e4:	e001      	b.n	80044ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	807b      	strh	r3, [r7, #2]
 8004504:	4613      	mov	r3, r2
 8004506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004508:	787b      	ldrb	r3, [r7, #1]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800450e:	887a      	ldrh	r2, [r7, #2]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004514:	e003      	b.n	800451e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004516:	887b      	ldrh	r3, [r7, #2]
 8004518:	041a      	lsls	r2, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	619a      	str	r2, [r3, #24]
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e12b      	b.n	8004796 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fe fdf8 	bl	8003148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2224      	movs	r2, #36	; 0x24
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0201 	bic.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800457e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800458e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004590:	f002 fa12 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8004594:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4a81      	ldr	r2, [pc, #516]	; (80047a0 <HAL_I2C_Init+0x274>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d807      	bhi.n	80045b0 <HAL_I2C_Init+0x84>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a80      	ldr	r2, [pc, #512]	; (80047a4 <HAL_I2C_Init+0x278>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	bf94      	ite	ls
 80045a8:	2301      	movls	r3, #1
 80045aa:	2300      	movhi	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	e006      	b.n	80045be <HAL_I2C_Init+0x92>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4a7d      	ldr	r2, [pc, #500]	; (80047a8 <HAL_I2C_Init+0x27c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	bf94      	ite	ls
 80045b8:	2301      	movls	r3, #1
 80045ba:	2300      	movhi	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e0e7      	b.n	8004796 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4a78      	ldr	r2, [pc, #480]	; (80047ac <HAL_I2C_Init+0x280>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	0c9b      	lsrs	r3, r3, #18
 80045d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	4a6a      	ldr	r2, [pc, #424]	; (80047a0 <HAL_I2C_Init+0x274>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d802      	bhi.n	8004600 <HAL_I2C_Init+0xd4>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	3301      	adds	r3, #1
 80045fe:	e009      	b.n	8004614 <HAL_I2C_Init+0xe8>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	4a69      	ldr	r2, [pc, #420]	; (80047b0 <HAL_I2C_Init+0x284>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	099b      	lsrs	r3, r3, #6
 8004612:	3301      	adds	r3, #1
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	430b      	orrs	r3, r1
 800461a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004626:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	495c      	ldr	r1, [pc, #368]	; (80047a0 <HAL_I2C_Init+0x274>)
 8004630:	428b      	cmp	r3, r1
 8004632:	d819      	bhi.n	8004668 <HAL_I2C_Init+0x13c>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	1e59      	subs	r1, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004642:	1c59      	adds	r1, r3, #1
 8004644:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004648:	400b      	ands	r3, r1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <HAL_I2C_Init+0x138>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1e59      	subs	r1, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	fbb1 f3f3 	udiv	r3, r1, r3
 800465c:	3301      	adds	r3, #1
 800465e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004662:	e051      	b.n	8004708 <HAL_I2C_Init+0x1dc>
 8004664:	2304      	movs	r3, #4
 8004666:	e04f      	b.n	8004708 <HAL_I2C_Init+0x1dc>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d111      	bne.n	8004694 <HAL_I2C_Init+0x168>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1e58      	subs	r0, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6859      	ldr	r1, [r3, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	440b      	add	r3, r1
 800467e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004682:	3301      	adds	r3, #1
 8004684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	e012      	b.n	80046ba <HAL_I2C_Init+0x18e>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1e58      	subs	r0, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6859      	ldr	r1, [r3, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	0099      	lsls	r1, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046aa:	3301      	adds	r3, #1
 80046ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_Init+0x196>
 80046be:	2301      	movs	r3, #1
 80046c0:	e022      	b.n	8004708 <HAL_I2C_Init+0x1dc>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10e      	bne.n	80046e8 <HAL_I2C_Init+0x1bc>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1e58      	subs	r0, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6859      	ldr	r1, [r3, #4]
 80046d2:	460b      	mov	r3, r1
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	440b      	add	r3, r1
 80046d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80046dc:	3301      	adds	r3, #1
 80046de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e6:	e00f      	b.n	8004708 <HAL_I2C_Init+0x1dc>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1e58      	subs	r0, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6859      	ldr	r1, [r3, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	0099      	lsls	r1, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80046fe:	3301      	adds	r3, #1
 8004700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	6809      	ldr	r1, [r1, #0]
 800470c:	4313      	orrs	r3, r2
 800470e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69da      	ldr	r2, [r3, #28]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004736:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6911      	ldr	r1, [r2, #16]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68d2      	ldr	r2, [r2, #12]
 8004742:	4311      	orrs	r1, r2
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	430b      	orrs	r3, r1
 800474a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	000186a0 	.word	0x000186a0
 80047a4:	001e847f 	.word	0x001e847f
 80047a8:	003d08ff 	.word	0x003d08ff
 80047ac:	431bde83 	.word	0x431bde83
 80047b0:	10624dd3 	.word	0x10624dd3

080047b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d003      	beq.n	80047ec <HAL_I2C_EV_IRQHandler+0x38>
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	f040 80bd 	bne.w	8004966 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10d      	bne.n	8004822 <HAL_I2C_EV_IRQHandler+0x6e>
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800480c:	d003      	beq.n	8004816 <HAL_I2C_EV_IRQHandler+0x62>
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004814:	d101      	bne.n	800481a <HAL_I2C_EV_IRQHandler+0x66>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x68>
 800481a:	2300      	movs	r3, #0
 800481c:	2b01      	cmp	r3, #1
 800481e:	f000 812e 	beq.w	8004a7e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00c      	beq.n	8004846 <HAL_I2C_EV_IRQHandler+0x92>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	0a5b      	lsrs	r3, r3, #9
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d006      	beq.n	8004846 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f001 fc55 	bl	80060e8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fd62 	bl	8005308 <I2C_Master_SB>
 8004844:	e08e      	b.n	8004964 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	08db      	lsrs	r3, r3, #3
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_I2C_EV_IRQHandler+0xb2>
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	0a5b      	lsrs	r3, r3, #9
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fdd8 	bl	8005414 <I2C_Master_ADD10>
 8004864:	e07e      	b.n	8004964 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_I2C_EV_IRQHandler+0xd2>
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	0a5b      	lsrs	r3, r3, #9
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fdf2 	bl	8005468 <I2C_Master_ADDR>
 8004884:	e06e      	b.n	8004964 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	089b      	lsrs	r3, r3, #2
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d037      	beq.n	8004902 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800489c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a0:	f000 80ef 	beq.w	8004a82 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	09db      	lsrs	r3, r3, #7
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00f      	beq.n	80048d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	0a9b      	lsrs	r3, r3, #10
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d009      	beq.n	80048d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	089b      	lsrs	r3, r3, #2
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d103      	bne.n	80048d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f9ef 	bl	8004cac <I2C_MasterTransmit_TXE>
 80048ce:	e049      	b.n	8004964 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	089b      	lsrs	r3, r3, #2
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80d2 	beq.w	8004a82 <HAL_I2C_EV_IRQHandler+0x2ce>
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	0a5b      	lsrs	r3, r3, #9
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 80cb 	beq.w	8004a82 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d103      	bne.n	80048fa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa76 	bl	8004de4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048f8:	e0c3      	b.n	8004a82 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fada 	bl	8004eb4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004900:	e0bf      	b.n	8004a82 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800490c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004910:	f000 80b7 	beq.w	8004a82 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	099b      	lsrs	r3, r3, #6
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00f      	beq.n	8004940 <HAL_I2C_EV_IRQHandler+0x18c>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	0a9b      	lsrs	r3, r3, #10
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d009      	beq.n	8004940 <HAL_I2C_EV_IRQHandler+0x18c>
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	089b      	lsrs	r3, r3, #2
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d103      	bne.n	8004940 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fb4a 	bl	8004fd2 <I2C_MasterReceive_RXNE>
 800493e:	e011      	b.n	8004964 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	089b      	lsrs	r3, r3, #2
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 809a 	beq.w	8004a82 <HAL_I2C_EV_IRQHandler+0x2ce>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	0a5b      	lsrs	r3, r3, #9
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8093 	beq.w	8004a82 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fbe9 	bl	8005134 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004962:	e08e      	b.n	8004a82 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004964:	e08d      	b.n	8004a82 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d004      	beq.n	8004978 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	e007      	b.n	8004988 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d012      	beq.n	80049ba <HAL_I2C_EV_IRQHandler+0x206>
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	0a5b      	lsrs	r3, r3, #9
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00c      	beq.n	80049ba <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80049b0:	69b9      	ldr	r1, [r7, #24]
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 ffa7 	bl	8005906 <I2C_Slave_ADDR>
 80049b8:	e066      	b.n	8004a88 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d009      	beq.n	80049da <HAL_I2C_EV_IRQHandler+0x226>
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	0a5b      	lsrs	r3, r3, #9
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 ffdc 	bl	8005990 <I2C_Slave_STOPF>
 80049d8:	e056      	b.n	8004a88 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049da:	7bbb      	ldrb	r3, [r7, #14]
 80049dc:	2b21      	cmp	r3, #33	; 0x21
 80049de:	d002      	beq.n	80049e6 <HAL_I2C_EV_IRQHandler+0x232>
 80049e0:	7bbb      	ldrb	r3, [r7, #14]
 80049e2:	2b29      	cmp	r3, #41	; 0x29
 80049e4:	d125      	bne.n	8004a32 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	09db      	lsrs	r3, r3, #7
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00f      	beq.n	8004a12 <HAL_I2C_EV_IRQHandler+0x25e>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	0a9b      	lsrs	r3, r3, #10
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_I2C_EV_IRQHandler+0x25e>
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d103      	bne.n	8004a12 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 febd 	bl	800578a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a10:	e039      	b.n	8004a86 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	089b      	lsrs	r3, r3, #2
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d033      	beq.n	8004a86 <HAL_I2C_EV_IRQHandler+0x2d2>
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	0a5b      	lsrs	r3, r3, #9
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d02d      	beq.n	8004a86 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 feea 	bl	8005804 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a30:	e029      	b.n	8004a86 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	099b      	lsrs	r3, r3, #6
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00f      	beq.n	8004a5e <HAL_I2C_EV_IRQHandler+0x2aa>
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	0a9b      	lsrs	r3, r3, #10
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_I2C_EV_IRQHandler+0x2aa>
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	089b      	lsrs	r3, r3, #2
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fef5 	bl	8005846 <I2C_SlaveReceive_RXNE>
 8004a5c:	e014      	b.n	8004a88 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	089b      	lsrs	r3, r3, #2
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00e      	beq.n	8004a88 <HAL_I2C_EV_IRQHandler+0x2d4>
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	0a5b      	lsrs	r3, r3, #9
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d008      	beq.n	8004a88 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 ff23 	bl	80058c2 <I2C_SlaveReceive_BTF>
 8004a7c:	e004      	b.n	8004a88 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004a7e:	bf00      	nop
 8004a80:	e002      	b.n	8004a88 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a82:	bf00      	nop
 8004a84:	e000      	b.n	8004a88 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a86:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b08a      	sub	sp, #40	; 0x28
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	0a1b      	lsrs	r3, r3, #8
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00e      	beq.n	8004adc <HAL_I2C_ER_IRQHandler+0x4e>
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	0a1b      	lsrs	r3, r3, #8
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ada:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	0a5b      	lsrs	r3, r3, #9
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00e      	beq.n	8004b06 <HAL_I2C_ER_IRQHandler+0x78>
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	0a1b      	lsrs	r3, r3, #8
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	f043 0302 	orr.w	r3, r3, #2
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004b04:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	0a9b      	lsrs	r3, r3, #10
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d03f      	beq.n	8004b92 <HAL_I2C_ER_IRQHandler+0x104>
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	0a1b      	lsrs	r3, r3, #8
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d039      	beq.n	8004b92 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004b1e:	7efb      	ldrb	r3, [r7, #27]
 8004b20:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b30:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004b38:	7ebb      	ldrb	r3, [r7, #26]
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d112      	bne.n	8004b64 <HAL_I2C_ER_IRQHandler+0xd6>
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10f      	bne.n	8004b64 <HAL_I2C_ER_IRQHandler+0xd6>
 8004b44:	7cfb      	ldrb	r3, [r7, #19]
 8004b46:	2b21      	cmp	r3, #33	; 0x21
 8004b48:	d008      	beq.n	8004b5c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004b4a:	7cfb      	ldrb	r3, [r7, #19]
 8004b4c:	2b29      	cmp	r3, #41	; 0x29
 8004b4e:	d005      	beq.n	8004b5c <HAL_I2C_ER_IRQHandler+0xce>
 8004b50:	7cfb      	ldrb	r3, [r7, #19]
 8004b52:	2b28      	cmp	r3, #40	; 0x28
 8004b54:	d106      	bne.n	8004b64 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b21      	cmp	r3, #33	; 0x21
 8004b5a:	d103      	bne.n	8004b64 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f001 f847 	bl	8005bf0 <I2C_Slave_AF>
 8004b62:	e016      	b.n	8004b92 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b6c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	f043 0304 	orr.w	r3, r3, #4
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b76:	7efb      	ldrb	r3, [r7, #27]
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d002      	beq.n	8004b82 <HAL_I2C_ER_IRQHandler+0xf4>
 8004b7c:	7efb      	ldrb	r3, [r7, #27]
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d107      	bne.n	8004b92 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b90:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	0adb      	lsrs	r3, r3, #11
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00e      	beq.n	8004bbc <HAL_I2C_ER_IRQHandler+0x12e>
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	0a1b      	lsrs	r3, r3, #8
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	f043 0308 	orr.w	r3, r3, #8
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004bba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f001 f87e 	bl	8005cd0 <I2C_ITError>
  }
}
 8004bd4:	bf00      	nop
 8004bd6:	3728      	adds	r7, #40	; 0x28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	70fb      	strb	r3, [r7, #3]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d150      	bne.n	8004d74 <I2C_MasterTransmit_TXE+0xc8>
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b21      	cmp	r3, #33	; 0x21
 8004cd6:	d14d      	bne.n	8004d74 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d01d      	beq.n	8004d1a <I2C_MasterTransmit_TXE+0x6e>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d01a      	beq.n	8004d1a <I2C_MasterTransmit_TXE+0x6e>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cea:	d016      	beq.n	8004d1a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cfa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2211      	movs	r2, #17
 8004d00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff ff62 	bl	8004bdc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d18:	e060      	b.n	8004ddc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d28:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d38:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d107      	bne.n	8004d64 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff ff7d 	bl	8004c5c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d62:	e03b      	b.n	8004ddc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff ff35 	bl	8004bdc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d72:	e033      	b.n	8004ddc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b21      	cmp	r3, #33	; 0x21
 8004d78:	d005      	beq.n	8004d86 <I2C_MasterTransmit_TXE+0xda>
 8004d7a:	7bbb      	ldrb	r3, [r7, #14]
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d12d      	bne.n	8004ddc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	2b22      	cmp	r3, #34	; 0x22
 8004d84:	d12a      	bne.n	8004ddc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d108      	bne.n	8004da2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004da0:	e01c      	b.n	8004ddc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d103      	bne.n	8004db6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f880 	bl	8004eb4 <I2C_MemoryTransmit_TXE_BTF>
}
 8004db4:	e012      	b.n	8004ddc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	781a      	ldrb	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004dda:	e7ff      	b.n	8004ddc <I2C_MasterTransmit_TXE+0x130>
 8004ddc:	bf00      	nop
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b21      	cmp	r3, #33	; 0x21
 8004dfc:	d156      	bne.n	8004eac <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d012      	beq.n	8004e2e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	781a      	ldrb	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004e2c:	e03e      	b.n	8004eac <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d01d      	beq.n	8004e70 <I2C_MasterTransmit_BTF+0x8c>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	d01a      	beq.n	8004e70 <I2C_MasterTransmit_BTF+0x8c>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e40:	d016      	beq.n	8004e70 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e50:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2211      	movs	r2, #17
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff feb7 	bl	8004bdc <HAL_I2C_MasterTxCpltCallback>
}
 8004e6e:	e01d      	b.n	8004eac <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e7e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff fe98 	bl	8004bdc <HAL_I2C_MasterTxCpltCallback>
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d11d      	bne.n	8004f08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d10b      	bne.n	8004eec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee4:	1c9a      	adds	r2, r3, #2
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004eea:	e06e      	b.n	8004fca <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	121b      	asrs	r3, r3, #8
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f06:	e060      	b.n	8004fca <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d10b      	bne.n	8004f28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f26:	e050      	b.n	8004fca <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d14c      	bne.n	8004fca <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b22      	cmp	r3, #34	; 0x22
 8004f34:	d108      	bne.n	8004f48 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f44:	601a      	str	r2, [r3, #0]
}
 8004f46:	e040      	b.n	8004fca <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d015      	beq.n	8004f7e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	2b21      	cmp	r3, #33	; 0x21
 8004f56:	d112      	bne.n	8004f7e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f7c:	e025      	b.n	8004fca <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d120      	bne.n	8004fca <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	2b21      	cmp	r3, #33	; 0x21
 8004f8c:	d11d      	bne.n	8004fca <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f9c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fac:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff fe49 	bl	8004c5c <HAL_I2C_MemTxCpltCallback>
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b22      	cmp	r3, #34	; 0x22
 8004fe4:	f040 80a2 	bne.w	800512c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d921      	bls.n	800503a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b03      	cmp	r3, #3
 8005024:	f040 8082 	bne.w	800512c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005036:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005038:	e078      	b.n	800512c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503e:	2b02      	cmp	r3, #2
 8005040:	d074      	beq.n	800512c <I2C_MasterReceive_RXNE+0x15a>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d002      	beq.n	800504e <I2C_MasterReceive_RXNE+0x7c>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d16e      	bne.n	800512c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f001 f818 	bl	8006084 <I2C_WaitOnSTOPRequestThroughIT>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d142      	bne.n	80050e0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005068:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005078:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d10a      	bne.n	80050ca <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff fdd4 	bl	8004c70 <HAL_I2C_MemRxCpltCallback>
}
 80050c8:	e030      	b.n	800512c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2212      	movs	r2, #18
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff fd89 	bl	8004bf0 <HAL_I2C_MasterRxCpltCallback>
}
 80050de:	e025      	b.n	800512c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff fdac 	bl	8004c84 <HAL_I2C_ErrorCallback>
}
 800512c:	bf00      	nop
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b04      	cmp	r3, #4
 800514a:	d11b      	bne.n	8005184 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005182:	e0bd      	b.n	8005300 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b03      	cmp	r3, #3
 800518c:	d129      	bne.n	80051e2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d00a      	beq.n	80051ba <I2C_MasterReceive_BTF+0x86>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d007      	beq.n	80051ba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051e0:	e08e      	b.n	8005300 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d176      	bne.n	80052da <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d002      	beq.n	80051f8 <I2C_MasterReceive_BTF+0xc4>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b10      	cmp	r3, #16
 80051f6:	d108      	bne.n	800520a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e019      	b.n	800523e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b04      	cmp	r3, #4
 800520e:	d002      	beq.n	8005216 <I2C_MasterReceive_BTF+0xe2>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d108      	bne.n	8005228 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e00a      	b.n	800523e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b10      	cmp	r3, #16
 800522c:	d007      	beq.n	800523e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005298:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b40      	cmp	r3, #64	; 0x40
 80052ac:	d10a      	bne.n	80052c4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff fcd7 	bl	8004c70 <HAL_I2C_MemRxCpltCallback>
}
 80052c2:	e01d      	b.n	8005300 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2212      	movs	r2, #18
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff fc8c 	bl	8004bf0 <HAL_I2C_MasterRxCpltCallback>
}
 80052d8:	e012      	b.n	8005300 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d117      	bne.n	800534c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005334:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005336:	e067      	b.n	8005408 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	b2da      	uxtb	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	611a      	str	r2, [r3, #16]
}
 800534a:	e05d      	b.n	8005408 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005354:	d133      	bne.n	80053be <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b21      	cmp	r3, #33	; 0x21
 8005360:	d109      	bne.n	8005376 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	b2db      	uxtb	r3, r3
 8005368:	461a      	mov	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005372:	611a      	str	r2, [r3, #16]
 8005374:	e008      	b.n	8005388 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	b2da      	uxtb	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <I2C_Master_SB+0x92>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d108      	bne.n	80053ac <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d032      	beq.n	8005408 <I2C_Master_SB+0x100>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d02d      	beq.n	8005408 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ba:	605a      	str	r2, [r3, #4]
}
 80053bc:	e024      	b.n	8005408 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10e      	bne.n	80053e4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	11db      	asrs	r3, r3, #7
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f003 0306 	and.w	r3, r3, #6
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	f063 030f 	orn	r3, r3, #15
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	611a      	str	r2, [r3, #16]
}
 80053e2:	e011      	b.n	8005408 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d10d      	bne.n	8005408 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	11db      	asrs	r3, r3, #7
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f003 0306 	and.w	r3, r3, #6
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f063 030e 	orn	r3, r3, #14
 8005400:	b2da      	uxtb	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	611a      	str	r2, [r3, #16]
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005420:	b2da      	uxtb	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <I2C_Master_ADD10+0x26>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d108      	bne.n	800544c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00c      	beq.n	800545c <I2C_Master_ADD10+0x48>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545a:	605a      	str	r2, [r3, #4]
  }
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005468:	b480      	push	{r7}
 800546a:	b091      	sub	sp, #68	; 0x44
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005476:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b22      	cmp	r3, #34	; 0x22
 8005490:	f040 8169 	bne.w	8005766 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10f      	bne.n	80054bc <I2C_Master_ADDR+0x54>
 800549c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80054a0:	2b40      	cmp	r3, #64	; 0x40
 80054a2:	d10b      	bne.n	80054bc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a4:	2300      	movs	r3, #0
 80054a6:	633b      	str	r3, [r7, #48]	; 0x30
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	633b      	str	r3, [r7, #48]	; 0x30
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	633b      	str	r3, [r7, #48]	; 0x30
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	e160      	b.n	800577e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d11d      	bne.n	8005500 <I2C_Master_ADDR+0x98>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054cc:	d118      	bne.n	8005500 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ce:	2300      	movs	r3, #0
 80054d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	651a      	str	r2, [r3, #80]	; 0x50
 80054fe:	e13e      	b.n	800577e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d113      	bne.n	8005532 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550a:	2300      	movs	r3, #0
 800550c:	62bb      	str	r3, [r7, #40]	; 0x28
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	62bb      	str	r3, [r7, #40]	; 0x28
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e115      	b.n	800575e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	f040 808a 	bne.w	8005652 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005544:	d137      	bne.n	80055b6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005554:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005564:	d113      	bne.n	800558e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005574:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005576:	2300      	movs	r3, #0
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	e0e7      	b.n	800575e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800558e:	2300      	movs	r3, #0
 8005590:	623b      	str	r3, [r7, #32]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	623b      	str	r3, [r7, #32]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	623b      	str	r3, [r7, #32]
 80055a2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	e0d3      	b.n	800575e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d02e      	beq.n	800561a <I2C_Master_ADDR+0x1b2>
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d02b      	beq.n	800561a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80055c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c4:	2b12      	cmp	r3, #18
 80055c6:	d102      	bne.n	80055ce <I2C_Master_ADDR+0x166>
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d125      	bne.n	800561a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d00e      	beq.n	80055f2 <I2C_Master_ADDR+0x18a>
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d00b      	beq.n	80055f2 <I2C_Master_ADDR+0x18a>
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d008      	beq.n	80055f2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	e007      	b.n	8005602 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005600:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	e0a1      	b.n	800575e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005628:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562a:	2300      	movs	r3, #0
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	61bb      	str	r3, [r7, #24]
 800563e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e085      	b.n	800575e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d14d      	bne.n	80056f8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	2b04      	cmp	r3, #4
 8005660:	d016      	beq.n	8005690 <I2C_Master_ADDR+0x228>
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	2b02      	cmp	r3, #2
 8005666:	d013      	beq.n	8005690 <I2C_Master_ADDR+0x228>
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	2b10      	cmp	r3, #16
 800566c:	d010      	beq.n	8005690 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	e007      	b.n	80056a0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800569e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ae:	d117      	bne.n	80056e0 <I2C_Master_ADDR+0x278>
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056b6:	d00b      	beq.n	80056d0 <I2C_Master_ADDR+0x268>
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d008      	beq.n	80056d0 <I2C_Master_ADDR+0x268>
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d005      	beq.n	80056d0 <I2C_Master_ADDR+0x268>
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	2b10      	cmp	r3, #16
 80056c8:	d002      	beq.n	80056d0 <I2C_Master_ADDR+0x268>
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d107      	bne.n	80056e0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	e032      	b.n	800575e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005706:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005716:	d117      	bne.n	8005748 <I2C_Master_ADDR+0x2e0>
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800571e:	d00b      	beq.n	8005738 <I2C_Master_ADDR+0x2d0>
 8005720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005722:	2b01      	cmp	r3, #1
 8005724:	d008      	beq.n	8005738 <I2C_Master_ADDR+0x2d0>
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	2b08      	cmp	r3, #8
 800572a:	d005      	beq.n	8005738 <I2C_Master_ADDR+0x2d0>
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	2b10      	cmp	r3, #16
 8005730:	d002      	beq.n	8005738 <I2C_Master_ADDR+0x2d0>
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	2b20      	cmp	r3, #32
 8005736:	d107      	bne.n	8005748 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005746:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005764:	e00b      	b.n	800577e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
}
 800577c:	e7ff      	b.n	800577e <I2C_Master_ADDR+0x316>
 800577e:	bf00      	nop
 8005780:	3744      	adds	r7, #68	; 0x44
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005798:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d02b      	beq.n	80057fc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	781a      	ldrb	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d114      	bne.n	80057fc <I2C_SlaveTransmit_TXE+0x72>
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b29      	cmp	r3, #41	; 0x29
 80057d6:	d111      	bne.n	80057fc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2221      	movs	r2, #33	; 0x21
 80057ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2228      	movs	r2, #40	; 0x28
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fa04 	bl	8004c04 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057fc:	bf00      	nop
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d011      	beq.n	800583a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	781a      	ldrb	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005854:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d02c      	beq.n	80058ba <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587c:	b29b      	uxth	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d114      	bne.n	80058ba <I2C_SlaveReceive_RXNE+0x74>
 8005890:	7bfb      	ldrb	r3, [r7, #15]
 8005892:	2b2a      	cmp	r3, #42	; 0x2a
 8005894:	d111      	bne.n	80058ba <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2222      	movs	r2, #34	; 0x22
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2228      	movs	r2, #40	; 0x28
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff f9af 	bl	8004c18 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80058ba:	bf00      	nop
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d012      	beq.n	80058fa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005910:	2300      	movs	r3, #0
 8005912:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005920:	2b28      	cmp	r3, #40	; 0x28
 8005922:	d127      	bne.n	8005974 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005932:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	089b      	lsrs	r3, r3, #2
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	09db      	lsrs	r3, r3, #7
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d103      	bne.n	8005958 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	81bb      	strh	r3, [r7, #12]
 8005956:	e002      	b.n	800595e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005966:	89ba      	ldrh	r2, [r7, #12]
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff f95d 	bl	8004c2c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005972:	e008      	b.n	8005986 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0202 	mvn.w	r2, #2
 800597c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005986:	bf00      	nop
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80059b0:	2300      	movs	r3, #0
 80059b2:	60bb      	str	r3, [r7, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	60bb      	str	r3, [r7, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ec:	d172      	bne.n	8005ad4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	2b22      	cmp	r3, #34	; 0x22
 80059f2:	d002      	beq.n	80059fa <I2C_Slave_STOPF+0x6a>
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	2b2a      	cmp	r3, #42	; 0x2a
 80059f8:	d135      	bne.n	8005a66 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f043 0204 	orr.w	r2, r3, #4
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe fad6 	bl	8003fe4 <HAL_DMA_GetState>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d049      	beq.n	8005ad2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a42:	4a69      	ldr	r2, [pc, #420]	; (8005be8 <I2C_Slave_STOPF+0x258>)
 8005a44:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fe f91e 	bl	8003c8c <HAL_DMA_Abort_IT>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d03d      	beq.n	8005ad2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a60:	4610      	mov	r0, r2
 8005a62:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a64:	e035      	b.n	8005ad2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f043 0204 	orr.w	r2, r3, #4
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe faa0 	bl	8003fe4 <HAL_DMA_GetState>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d014      	beq.n	8005ad4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aae:	4a4e      	ldr	r2, [pc, #312]	; (8005be8 <I2C_Slave_STOPF+0x258>)
 8005ab0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe f8e8 	bl	8003c8c <HAL_DMA_Abort_IT>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d008      	beq.n	8005ad4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005acc:	4610      	mov	r0, r2
 8005ace:	4798      	blx	r3
 8005ad0:	e000      	b.n	8005ad4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ad2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d03e      	beq.n	8005b5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d112      	bne.n	8005b12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1c:	2b40      	cmp	r3, #64	; 0x40
 8005b1e:	d112      	bne.n	8005b46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d005      	beq.n	8005b5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	f043 0204 	orr.w	r2, r3, #4
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f8b3 	bl	8005cd0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b6a:	e039      	b.n	8005be0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b70:	d109      	bne.n	8005b86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2228      	movs	r2, #40	; 0x28
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff f849 	bl	8004c18 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b28      	cmp	r3, #40	; 0x28
 8005b90:	d111      	bne.n	8005bb6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a15      	ldr	r2, [pc, #84]	; (8005bec <I2C_Slave_STOPF+0x25c>)
 8005b96:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff f84a 	bl	8004c48 <HAL_I2C_ListenCpltCallback>
}
 8005bb4:	e014      	b.n	8005be0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	2b22      	cmp	r3, #34	; 0x22
 8005bbc:	d002      	beq.n	8005bc4 <I2C_Slave_STOPF+0x234>
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	2b22      	cmp	r3, #34	; 0x22
 8005bc2:	d10d      	bne.n	8005be0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff f81c 	bl	8004c18 <HAL_I2C_SlaveRxCpltCallback>
}
 8005be0:	bf00      	nop
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	08005f35 	.word	0x08005f35
 8005bec:	ffff0000 	.word	0xffff0000

08005bf0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d002      	beq.n	8005c12 <I2C_Slave_AF+0x22>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d129      	bne.n	8005c66 <I2C_Slave_AF+0x76>
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	2b28      	cmp	r3, #40	; 0x28
 8005c16:	d126      	bne.n	8005c66 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <I2C_Slave_AF+0xdc>)
 8005c1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c2c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c36:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c46:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fe fff2 	bl	8004c48 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005c64:	e02e      	b.n	8005cc4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	2b21      	cmp	r3, #33	; 0x21
 8005c6a:	d126      	bne.n	8005cba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a17      	ldr	r2, [pc, #92]	; (8005ccc <I2C_Slave_AF+0xdc>)
 8005c70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2221      	movs	r2, #33	; 0x21
 8005c76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c96:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ca0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fe ffa6 	bl	8004c04 <HAL_I2C_SlaveTxCpltCallback>
}
 8005cb8:	e004      	b.n	8005cc4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cc2:	615a      	str	r2, [r3, #20]
}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	ffff0000 	.word	0xffff0000

08005cd0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ce6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ce8:	7bbb      	ldrb	r3, [r7, #14]
 8005cea:	2b10      	cmp	r3, #16
 8005cec:	d002      	beq.n	8005cf4 <I2C_ITError+0x24>
 8005cee:	7bbb      	ldrb	r3, [r7, #14]
 8005cf0:	2b40      	cmp	r3, #64	; 0x40
 8005cf2:	d10a      	bne.n	8005d0a <I2C_ITError+0x3a>
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	2b22      	cmp	r3, #34	; 0x22
 8005cf8:	d107      	bne.n	8005d0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d10:	2b28      	cmp	r3, #40	; 0x28
 8005d12:	d107      	bne.n	8005d24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2228      	movs	r2, #40	; 0x28
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d22:	e015      	b.n	8005d50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d32:	d00a      	beq.n	8005d4a <I2C_ITError+0x7a>
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	2b60      	cmp	r3, #96	; 0x60
 8005d38:	d007      	beq.n	8005d4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d5e:	d162      	bne.n	8005e26 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d020      	beq.n	8005dc0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d82:	4a6a      	ldr	r2, [pc, #424]	; (8005f2c <I2C_ITError+0x25c>)
 8005d84:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fd ff7e 	bl	8003c8c <HAL_DMA_Abort_IT>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 8089 	beq.w	8005eaa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dba:	4610      	mov	r0, r2
 8005dbc:	4798      	blx	r3
 8005dbe:	e074      	b.n	8005eaa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	4a59      	ldr	r2, [pc, #356]	; (8005f2c <I2C_ITError+0x25c>)
 8005dc6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fd ff5d 	bl	8003c8c <HAL_DMA_Abort_IT>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d068      	beq.n	8005eaa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de2:	2b40      	cmp	r3, #64	; 0x40
 8005de4:	d10b      	bne.n	8005dfe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
 8005e24:	e041      	b.n	8005eaa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b60      	cmp	r3, #96	; 0x60
 8005e30:	d125      	bne.n	8005e7e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d10b      	bne.n	8005e66 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0201 	bic.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7fe ff0e 	bl	8004c98 <HAL_I2C_AbortCpltCallback>
 8005e7c:	e015      	b.n	8005eaa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b40      	cmp	r3, #64	; 0x40
 8005e8a:	d10b      	bne.n	8005ea4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fe feed 	bl	8004c84 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10e      	bne.n	8005ed8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d109      	bne.n	8005ed8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d007      	beq.n	8005ee8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ee6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d113      	bne.n	8005f24 <I2C_ITError+0x254>
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b28      	cmp	r3, #40	; 0x28
 8005f00:	d110      	bne.n	8005f24 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a0a      	ldr	r2, [pc, #40]	; (8005f30 <I2C_ITError+0x260>)
 8005f06:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fe fe92 	bl	8004c48 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f24:	bf00      	nop
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	08005f35 	.word	0x08005f35
 8005f30:	ffff0000 	.word	0xffff0000

08005f34 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f4e:	4b4b      	ldr	r3, [pc, #300]	; (800607c <I2C_DMAAbort+0x148>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	08db      	lsrs	r3, r3, #3
 8005f54:	4a4a      	ldr	r2, [pc, #296]	; (8006080 <I2C_DMAAbort+0x14c>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	0a1a      	lsrs	r2, r3, #8
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	00da      	lsls	r2, r3, #3
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f043 0220 	orr.w	r2, r3, #32
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005f7a:	e00a      	b.n	8005f92 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f90:	d0ea      	beq.n	8005f68 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	2200      	movs	r2, #0
 8005fb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0201 	bic.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b60      	cmp	r3, #96	; 0x60
 8006002:	d10e      	bne.n	8006022 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2200      	movs	r2, #0
 8006018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800601a:	6978      	ldr	r0, [r7, #20]
 800601c:	f7fe fe3c 	bl	8004c98 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006020:	e027      	b.n	8006072 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006022:	7cfb      	ldrb	r3, [r7, #19]
 8006024:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006028:	2b28      	cmp	r3, #40	; 0x28
 800602a:	d117      	bne.n	800605c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800604a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2200      	movs	r2, #0
 8006050:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2228      	movs	r2, #40	; 0x28
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800605a:	e007      	b.n	800606c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800606c:	6978      	ldr	r0, [r7, #20]
 800606e:	f7fe fe09 	bl	8004c84 <HAL_I2C_ErrorCallback>
}
 8006072:	bf00      	nop
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000014 	.word	0x20000014
 8006080:	14f8b589 	.word	0x14f8b589

08006084 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006090:	4b13      	ldr	r3, [pc, #76]	; (80060e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	08db      	lsrs	r3, r3, #3
 8006096:	4a13      	ldr	r2, [pc, #76]	; (80060e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006098:	fba2 2303 	umull	r2, r3, r2, r3
 800609c:	0a1a      	lsrs	r2, r3, #8
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d107      	bne.n	80060c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f043 0220 	orr.w	r2, r3, #32
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e008      	b.n	80060d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d0:	d0e9      	beq.n	80060a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	20000014 	.word	0x20000014
 80060e4:	14f8b589 	.word	0x14f8b589

080060e8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80060f8:	d103      	bne.n	8006102 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006100:	e007      	b.n	8006112 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800610a:	d102      	bne.n	8006112 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2208      	movs	r2, #8
 8006110:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e264      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d075      	beq.n	800622a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800613e:	4ba3      	ldr	r3, [pc, #652]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 030c 	and.w	r3, r3, #12
 8006146:	2b04      	cmp	r3, #4
 8006148:	d00c      	beq.n	8006164 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800614a:	4ba0      	ldr	r3, [pc, #640]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006152:	2b08      	cmp	r3, #8
 8006154:	d112      	bne.n	800617c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006156:	4b9d      	ldr	r3, [pc, #628]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800615e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006162:	d10b      	bne.n	800617c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006164:	4b99      	ldr	r3, [pc, #612]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d05b      	beq.n	8006228 <HAL_RCC_OscConfig+0x108>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d157      	bne.n	8006228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e23f      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006184:	d106      	bne.n	8006194 <HAL_RCC_OscConfig+0x74>
 8006186:	4b91      	ldr	r3, [pc, #580]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a90      	ldr	r2, [pc, #576]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 800618c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	e01d      	b.n	80061d0 <HAL_RCC_OscConfig+0xb0>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800619c:	d10c      	bne.n	80061b8 <HAL_RCC_OscConfig+0x98>
 800619e:	4b8b      	ldr	r3, [pc, #556]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a8a      	ldr	r2, [pc, #552]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 80061a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	4b88      	ldr	r3, [pc, #544]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a87      	ldr	r2, [pc, #540]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 80061b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	e00b      	b.n	80061d0 <HAL_RCC_OscConfig+0xb0>
 80061b8:	4b84      	ldr	r3, [pc, #528]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a83      	ldr	r2, [pc, #524]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 80061be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	4b81      	ldr	r3, [pc, #516]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a80      	ldr	r2, [pc, #512]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 80061ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d013      	beq.n	8006200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d8:	f7fd fac4 	bl	8003764 <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061e0:	f7fd fac0 	bl	8003764 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b64      	cmp	r3, #100	; 0x64
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e204      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f2:	4b76      	ldr	r3, [pc, #472]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0f0      	beq.n	80061e0 <HAL_RCC_OscConfig+0xc0>
 80061fe:	e014      	b.n	800622a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006200:	f7fd fab0 	bl	8003764 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006208:	f7fd faac 	bl	8003764 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b64      	cmp	r3, #100	; 0x64
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e1f0      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800621a:	4b6c      	ldr	r3, [pc, #432]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1f0      	bne.n	8006208 <HAL_RCC_OscConfig+0xe8>
 8006226:	e000      	b.n	800622a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d063      	beq.n	80062fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006236:	4b65      	ldr	r3, [pc, #404]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 030c 	and.w	r3, r3, #12
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00b      	beq.n	800625a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006242:	4b62      	ldr	r3, [pc, #392]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800624a:	2b08      	cmp	r3, #8
 800624c:	d11c      	bne.n	8006288 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800624e:	4b5f      	ldr	r3, [pc, #380]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d116      	bne.n	8006288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800625a:	4b5c      	ldr	r3, [pc, #368]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <HAL_RCC_OscConfig+0x152>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d001      	beq.n	8006272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e1c4      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006272:	4b56      	ldr	r3, [pc, #344]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	4952      	ldr	r1, [pc, #328]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006282:	4313      	orrs	r3, r2
 8006284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006286:	e03a      	b.n	80062fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d020      	beq.n	80062d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006290:	4b4f      	ldr	r3, [pc, #316]	; (80063d0 <HAL_RCC_OscConfig+0x2b0>)
 8006292:	2201      	movs	r2, #1
 8006294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006296:	f7fd fa65 	bl	8003764 <HAL_GetTick>
 800629a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800629c:	e008      	b.n	80062b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800629e:	f7fd fa61 	bl	8003764 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e1a5      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b0:	4b46      	ldr	r3, [pc, #280]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0f0      	beq.n	800629e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062bc:	4b43      	ldr	r3, [pc, #268]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	4940      	ldr	r1, [pc, #256]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	600b      	str	r3, [r1, #0]
 80062d0:	e015      	b.n	80062fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062d2:	4b3f      	ldr	r3, [pc, #252]	; (80063d0 <HAL_RCC_OscConfig+0x2b0>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d8:	f7fd fa44 	bl	8003764 <HAL_GetTick>
 80062dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062de:	e008      	b.n	80062f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062e0:	f7fd fa40 	bl	8003764 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e184      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062f2:	4b36      	ldr	r3, [pc, #216]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1f0      	bne.n	80062e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d030      	beq.n	800636c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d016      	beq.n	8006340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006312:	4b30      	ldr	r3, [pc, #192]	; (80063d4 <HAL_RCC_OscConfig+0x2b4>)
 8006314:	2201      	movs	r2, #1
 8006316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006318:	f7fd fa24 	bl	8003764 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006320:	f7fd fa20 	bl	8003764 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e164      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006332:	4b26      	ldr	r3, [pc, #152]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0f0      	beq.n	8006320 <HAL_RCC_OscConfig+0x200>
 800633e:	e015      	b.n	800636c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006340:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <HAL_RCC_OscConfig+0x2b4>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006346:	f7fd fa0d 	bl	8003764 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800634e:	f7fd fa09 	bl	8003764 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e14d      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006360:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f0      	bne.n	800634e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 80a0 	beq.w	80064ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800637a:	2300      	movs	r3, #0
 800637c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800637e:	4b13      	ldr	r3, [pc, #76]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10f      	bne.n	80063aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	4a0e      	ldr	r2, [pc, #56]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 8006394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006398:	6413      	str	r3, [r2, #64]	; 0x40
 800639a:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <HAL_RCC_OscConfig+0x2ac>)
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a2:	60bb      	str	r3, [r7, #8]
 80063a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063a6:	2301      	movs	r3, #1
 80063a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063aa:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <HAL_RCC_OscConfig+0x2b8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d121      	bne.n	80063fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063b6:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <HAL_RCC_OscConfig+0x2b8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a07      	ldr	r2, [pc, #28]	; (80063d8 <HAL_RCC_OscConfig+0x2b8>)
 80063bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063c2:	f7fd f9cf 	bl	8003764 <HAL_GetTick>
 80063c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063c8:	e011      	b.n	80063ee <HAL_RCC_OscConfig+0x2ce>
 80063ca:	bf00      	nop
 80063cc:	40023800 	.word	0x40023800
 80063d0:	42470000 	.word	0x42470000
 80063d4:	42470e80 	.word	0x42470e80
 80063d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063dc:	f7fd f9c2 	bl	8003764 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e106      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ee:	4b85      	ldr	r3, [pc, #532]	; (8006604 <HAL_RCC_OscConfig+0x4e4>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d106      	bne.n	8006410 <HAL_RCC_OscConfig+0x2f0>
 8006402:	4b81      	ldr	r3, [pc, #516]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	4a80      	ldr	r2, [pc, #512]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 8006408:	f043 0301 	orr.w	r3, r3, #1
 800640c:	6713      	str	r3, [r2, #112]	; 0x70
 800640e:	e01c      	b.n	800644a <HAL_RCC_OscConfig+0x32a>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2b05      	cmp	r3, #5
 8006416:	d10c      	bne.n	8006432 <HAL_RCC_OscConfig+0x312>
 8006418:	4b7b      	ldr	r3, [pc, #492]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 800641a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641c:	4a7a      	ldr	r2, [pc, #488]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 800641e:	f043 0304 	orr.w	r3, r3, #4
 8006422:	6713      	str	r3, [r2, #112]	; 0x70
 8006424:	4b78      	ldr	r3, [pc, #480]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 8006426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006428:	4a77      	ldr	r2, [pc, #476]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 800642a:	f043 0301 	orr.w	r3, r3, #1
 800642e:	6713      	str	r3, [r2, #112]	; 0x70
 8006430:	e00b      	b.n	800644a <HAL_RCC_OscConfig+0x32a>
 8006432:	4b75      	ldr	r3, [pc, #468]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	4a74      	ldr	r2, [pc, #464]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	6713      	str	r3, [r2, #112]	; 0x70
 800643e:	4b72      	ldr	r3, [pc, #456]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 8006440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006442:	4a71      	ldr	r2, [pc, #452]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 8006444:	f023 0304 	bic.w	r3, r3, #4
 8006448:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d015      	beq.n	800647e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006452:	f7fd f987 	bl	8003764 <HAL_GetTick>
 8006456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006458:	e00a      	b.n	8006470 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800645a:	f7fd f983 	bl	8003764 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	f241 3288 	movw	r2, #5000	; 0x1388
 8006468:	4293      	cmp	r3, r2
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e0c5      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006470:	4b65      	ldr	r3, [pc, #404]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 8006472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0ee      	beq.n	800645a <HAL_RCC_OscConfig+0x33a>
 800647c:	e014      	b.n	80064a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800647e:	f7fd f971 	bl	8003764 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006484:	e00a      	b.n	800649c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006486:	f7fd f96d 	bl	8003764 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	f241 3288 	movw	r2, #5000	; 0x1388
 8006494:	4293      	cmp	r3, r2
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e0af      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800649c:	4b5a      	ldr	r3, [pc, #360]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 800649e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1ee      	bne.n	8006486 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d105      	bne.n	80064ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ae:	4b56      	ldr	r3, [pc, #344]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	4a55      	ldr	r2, [pc, #340]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 80064b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 809b 	beq.w	80065fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064c4:	4b50      	ldr	r3, [pc, #320]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 030c 	and.w	r3, r3, #12
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d05c      	beq.n	800658a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d141      	bne.n	800655c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d8:	4b4c      	ldr	r3, [pc, #304]	; (800660c <HAL_RCC_OscConfig+0x4ec>)
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064de:	f7fd f941 	bl	8003764 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064e6:	f7fd f93d 	bl	8003764 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e081      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064f8:	4b43      	ldr	r3, [pc, #268]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f0      	bne.n	80064e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	019b      	lsls	r3, r3, #6
 8006514:	431a      	orrs	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	3b01      	subs	r3, #1
 800651e:	041b      	lsls	r3, r3, #16
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	061b      	lsls	r3, r3, #24
 8006528:	4937      	ldr	r1, [pc, #220]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 800652a:	4313      	orrs	r3, r2
 800652c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800652e:	4b37      	ldr	r3, [pc, #220]	; (800660c <HAL_RCC_OscConfig+0x4ec>)
 8006530:	2201      	movs	r2, #1
 8006532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006534:	f7fd f916 	bl	8003764 <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800653c:	f7fd f912 	bl	8003764 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e056      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800654e:	4b2e      	ldr	r3, [pc, #184]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0f0      	beq.n	800653c <HAL_RCC_OscConfig+0x41c>
 800655a:	e04e      	b.n	80065fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800655c:	4b2b      	ldr	r3, [pc, #172]	; (800660c <HAL_RCC_OscConfig+0x4ec>)
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006562:	f7fd f8ff 	bl	8003764 <HAL_GetTick>
 8006566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006568:	e008      	b.n	800657c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800656a:	f7fd f8fb 	bl	8003764 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e03f      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800657c:	4b22      	ldr	r3, [pc, #136]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f0      	bne.n	800656a <HAL_RCC_OscConfig+0x44a>
 8006588:	e037      	b.n	80065fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d101      	bne.n	8006596 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e032      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006596:	4b1c      	ldr	r3, [pc, #112]	; (8006608 <HAL_RCC_OscConfig+0x4e8>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d028      	beq.n	80065f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d121      	bne.n	80065f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d11a      	bne.n	80065f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065c6:	4013      	ands	r3, r2
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d111      	bne.n	80065f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	085b      	lsrs	r3, r3, #1
 80065de:	3b01      	subs	r3, #1
 80065e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d107      	bne.n	80065f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d001      	beq.n	80065fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	40007000 	.word	0x40007000
 8006608:	40023800 	.word	0x40023800
 800660c:	42470060 	.word	0x42470060

08006610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e0cc      	b.n	80067be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006624:	4b68      	ldr	r3, [pc, #416]	; (80067c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d90c      	bls.n	800664c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006632:	4b65      	ldr	r3, [pc, #404]	; (80067c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800663a:	4b63      	ldr	r3, [pc, #396]	; (80067c8 <HAL_RCC_ClockConfig+0x1b8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	429a      	cmp	r2, r3
 8006646:	d001      	beq.n	800664c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e0b8      	b.n	80067be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d020      	beq.n	800669a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006664:	4b59      	ldr	r3, [pc, #356]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	4a58      	ldr	r2, [pc, #352]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 800666a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800666e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0308 	and.w	r3, r3, #8
 8006678:	2b00      	cmp	r3, #0
 800667a:	d005      	beq.n	8006688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800667c:	4b53      	ldr	r3, [pc, #332]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	4a52      	ldr	r2, [pc, #328]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 8006682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006688:	4b50      	ldr	r3, [pc, #320]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	494d      	ldr	r1, [pc, #308]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 8006696:	4313      	orrs	r3, r2
 8006698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d044      	beq.n	8006730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d107      	bne.n	80066be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ae:	4b47      	ldr	r3, [pc, #284]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d119      	bne.n	80066ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e07f      	b.n	80067be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d003      	beq.n	80066ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d107      	bne.n	80066de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ce:	4b3f      	ldr	r3, [pc, #252]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e06f      	b.n	80067be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066de:	4b3b      	ldr	r3, [pc, #236]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e067      	b.n	80067be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066ee:	4b37      	ldr	r3, [pc, #220]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f023 0203 	bic.w	r2, r3, #3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	4934      	ldr	r1, [pc, #208]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006700:	f7fd f830 	bl	8003764 <HAL_GetTick>
 8006704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006706:	e00a      	b.n	800671e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006708:	f7fd f82c 	bl	8003764 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	f241 3288 	movw	r2, #5000	; 0x1388
 8006716:	4293      	cmp	r3, r2
 8006718:	d901      	bls.n	800671e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e04f      	b.n	80067be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800671e:	4b2b      	ldr	r3, [pc, #172]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 020c 	and.w	r2, r3, #12
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	429a      	cmp	r2, r3
 800672e:	d1eb      	bne.n	8006708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006730:	4b25      	ldr	r3, [pc, #148]	; (80067c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d20c      	bcs.n	8006758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800673e:	4b22      	ldr	r3, [pc, #136]	; (80067c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006746:	4b20      	ldr	r3, [pc, #128]	; (80067c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0307 	and.w	r3, r3, #7
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	d001      	beq.n	8006758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e032      	b.n	80067be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	d008      	beq.n	8006776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006764:	4b19      	ldr	r3, [pc, #100]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	4916      	ldr	r1, [pc, #88]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 8006772:	4313      	orrs	r3, r2
 8006774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d009      	beq.n	8006796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006782:	4b12      	ldr	r3, [pc, #72]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	490e      	ldr	r1, [pc, #56]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 8006792:	4313      	orrs	r3, r2
 8006794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006796:	f000 f821 	bl	80067dc <HAL_RCC_GetSysClockFreq>
 800679a:	4602      	mov	r2, r0
 800679c:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <HAL_RCC_ClockConfig+0x1bc>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	091b      	lsrs	r3, r3, #4
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	490a      	ldr	r1, [pc, #40]	; (80067d0 <HAL_RCC_ClockConfig+0x1c0>)
 80067a8:	5ccb      	ldrb	r3, [r1, r3]
 80067aa:	fa22 f303 	lsr.w	r3, r2, r3
 80067ae:	4a09      	ldr	r2, [pc, #36]	; (80067d4 <HAL_RCC_ClockConfig+0x1c4>)
 80067b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067b2:	4b09      	ldr	r3, [pc, #36]	; (80067d8 <HAL_RCC_ClockConfig+0x1c8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fc ff90 	bl	80036dc <HAL_InitTick>

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40023c00 	.word	0x40023c00
 80067cc:	40023800 	.word	0x40023800
 80067d0:	08008eb8 	.word	0x08008eb8
 80067d4:	20000014 	.word	0x20000014
 80067d8:	20000018 	.word	0x20000018

080067dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	607b      	str	r3, [r7, #4]
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	2300      	movs	r3, #0
 80067ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067f4:	4b67      	ldr	r3, [pc, #412]	; (8006994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 030c 	and.w	r3, r3, #12
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d00d      	beq.n	800681c <HAL_RCC_GetSysClockFreq+0x40>
 8006800:	2b08      	cmp	r3, #8
 8006802:	f200 80bd 	bhi.w	8006980 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_RCC_GetSysClockFreq+0x34>
 800680a:	2b04      	cmp	r3, #4
 800680c:	d003      	beq.n	8006816 <HAL_RCC_GetSysClockFreq+0x3a>
 800680e:	e0b7      	b.n	8006980 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006810:	4b61      	ldr	r3, [pc, #388]	; (8006998 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006812:	60bb      	str	r3, [r7, #8]
       break;
 8006814:	e0b7      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006816:	4b61      	ldr	r3, [pc, #388]	; (800699c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006818:	60bb      	str	r3, [r7, #8]
      break;
 800681a:	e0b4      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800681c:	4b5d      	ldr	r3, [pc, #372]	; (8006994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006824:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006826:	4b5b      	ldr	r3, [pc, #364]	; (8006994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d04d      	beq.n	80068ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006832:	4b58      	ldr	r3, [pc, #352]	; (8006994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	099b      	lsrs	r3, r3, #6
 8006838:	461a      	mov	r2, r3
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006842:	f04f 0100 	mov.w	r1, #0
 8006846:	ea02 0800 	and.w	r8, r2, r0
 800684a:	ea03 0901 	and.w	r9, r3, r1
 800684e:	4640      	mov	r0, r8
 8006850:	4649      	mov	r1, r9
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	f04f 0300 	mov.w	r3, #0
 800685a:	014b      	lsls	r3, r1, #5
 800685c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006860:	0142      	lsls	r2, r0, #5
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	ebb0 0008 	subs.w	r0, r0, r8
 800686a:	eb61 0109 	sbc.w	r1, r1, r9
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	f04f 0300 	mov.w	r3, #0
 8006876:	018b      	lsls	r3, r1, #6
 8006878:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800687c:	0182      	lsls	r2, r0, #6
 800687e:	1a12      	subs	r2, r2, r0
 8006880:	eb63 0301 	sbc.w	r3, r3, r1
 8006884:	f04f 0000 	mov.w	r0, #0
 8006888:	f04f 0100 	mov.w	r1, #0
 800688c:	00d9      	lsls	r1, r3, #3
 800688e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006892:	00d0      	lsls	r0, r2, #3
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	eb12 0208 	adds.w	r2, r2, r8
 800689c:	eb43 0309 	adc.w	r3, r3, r9
 80068a0:	f04f 0000 	mov.w	r0, #0
 80068a4:	f04f 0100 	mov.w	r1, #0
 80068a8:	0259      	lsls	r1, r3, #9
 80068aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80068ae:	0250      	lsls	r0, r2, #9
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4610      	mov	r0, r2
 80068b6:	4619      	mov	r1, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	461a      	mov	r2, r3
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	f7fa fa74 	bl	8000dac <__aeabi_uldivmod>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4613      	mov	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	e04a      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068ce:	4b31      	ldr	r3, [pc, #196]	; (8006994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	099b      	lsrs	r3, r3, #6
 80068d4:	461a      	mov	r2, r3
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80068de:	f04f 0100 	mov.w	r1, #0
 80068e2:	ea02 0400 	and.w	r4, r2, r0
 80068e6:	ea03 0501 	and.w	r5, r3, r1
 80068ea:	4620      	mov	r0, r4
 80068ec:	4629      	mov	r1, r5
 80068ee:	f04f 0200 	mov.w	r2, #0
 80068f2:	f04f 0300 	mov.w	r3, #0
 80068f6:	014b      	lsls	r3, r1, #5
 80068f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80068fc:	0142      	lsls	r2, r0, #5
 80068fe:	4610      	mov	r0, r2
 8006900:	4619      	mov	r1, r3
 8006902:	1b00      	subs	r0, r0, r4
 8006904:	eb61 0105 	sbc.w	r1, r1, r5
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	018b      	lsls	r3, r1, #6
 8006912:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006916:	0182      	lsls	r2, r0, #6
 8006918:	1a12      	subs	r2, r2, r0
 800691a:	eb63 0301 	sbc.w	r3, r3, r1
 800691e:	f04f 0000 	mov.w	r0, #0
 8006922:	f04f 0100 	mov.w	r1, #0
 8006926:	00d9      	lsls	r1, r3, #3
 8006928:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800692c:	00d0      	lsls	r0, r2, #3
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	1912      	adds	r2, r2, r4
 8006934:	eb45 0303 	adc.w	r3, r5, r3
 8006938:	f04f 0000 	mov.w	r0, #0
 800693c:	f04f 0100 	mov.w	r1, #0
 8006940:	0299      	lsls	r1, r3, #10
 8006942:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006946:	0290      	lsls	r0, r2, #10
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	4610      	mov	r0, r2
 800694e:	4619      	mov	r1, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	461a      	mov	r2, r3
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	f7fa fa28 	bl	8000dac <__aeabi_uldivmod>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4613      	mov	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006964:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	0c1b      	lsrs	r3, r3, #16
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	3301      	adds	r3, #1
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	60bb      	str	r3, [r7, #8]
      break;
 800697e:	e002      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006982:	60bb      	str	r3, [r7, #8]
      break;
 8006984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006986:	68bb      	ldr	r3, [r7, #8]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006992:	bf00      	nop
 8006994:	40023800 	.word	0x40023800
 8006998:	00f42400 	.word	0x00f42400
 800699c:	007a1200 	.word	0x007a1200

080069a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069a6:	681b      	ldr	r3, [r3, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000014 	.word	0x20000014

080069b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069bc:	f7ff fff0 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	0a9b      	lsrs	r3, r3, #10
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	4903      	ldr	r1, [pc, #12]	; (80069dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ce:	5ccb      	ldrb	r3, [r1, r3]
 80069d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40023800 	.word	0x40023800
 80069dc:	08008ec8 	.word	0x08008ec8

080069e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069e4:	f7ff ffdc 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	0b5b      	lsrs	r3, r3, #13
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	4903      	ldr	r1, [pc, #12]	; (8006a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069f6:	5ccb      	ldrb	r3, [r1, r3]
 80069f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40023800 	.word	0x40023800
 8006a04:	08008ec8 	.word	0x08008ec8

08006a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e041      	b.n	8006a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fc fc2a 	bl	8003288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4619      	mov	r1, r3
 8006a46:	4610      	mov	r0, r2
 8006a48:	f000 fdda 	bl	8007600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d001      	beq.n	8006ac0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e03c      	b.n	8006b3a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a1e      	ldr	r2, [pc, #120]	; (8006b48 <HAL_TIM_Base_Start+0xa0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d018      	beq.n	8006b04 <HAL_TIM_Base_Start+0x5c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ada:	d013      	beq.n	8006b04 <HAL_TIM_Base_Start+0x5c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a1a      	ldr	r2, [pc, #104]	; (8006b4c <HAL_TIM_Base_Start+0xa4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00e      	beq.n	8006b04 <HAL_TIM_Base_Start+0x5c>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a19      	ldr	r2, [pc, #100]	; (8006b50 <HAL_TIM_Base_Start+0xa8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d009      	beq.n	8006b04 <HAL_TIM_Base_Start+0x5c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a17      	ldr	r2, [pc, #92]	; (8006b54 <HAL_TIM_Base_Start+0xac>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d004      	beq.n	8006b04 <HAL_TIM_Base_Start+0x5c>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a16      	ldr	r2, [pc, #88]	; (8006b58 <HAL_TIM_Base_Start+0xb0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d111      	bne.n	8006b28 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b06      	cmp	r3, #6
 8006b14:	d010      	beq.n	8006b38 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f042 0201 	orr.w	r2, r2, #1
 8006b24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b26:	e007      	b.n	8006b38 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f042 0201 	orr.w	r2, r2, #1
 8006b36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40010000 	.word	0x40010000
 8006b4c:	40000400 	.word	0x40000400
 8006b50:	40000800 	.word	0x40000800
 8006b54:	40000c00 	.word	0x40000c00
 8006b58:	40014000 	.word	0x40014000

08006b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d001      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e044      	b.n	8006bfe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0201 	orr.w	r2, r2, #1
 8006b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1e      	ldr	r2, [pc, #120]	; (8006c0c <HAL_TIM_Base_Start_IT+0xb0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d018      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9e:	d013      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a1a      	ldr	r2, [pc, #104]	; (8006c10 <HAL_TIM_Base_Start_IT+0xb4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00e      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <HAL_TIM_Base_Start_IT+0xb8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d009      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <HAL_TIM_Base_Start_IT+0xbc>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d004      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a16      	ldr	r2, [pc, #88]	; (8006c1c <HAL_TIM_Base_Start_IT+0xc0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d111      	bne.n	8006bec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b06      	cmp	r3, #6
 8006bd8:	d010      	beq.n	8006bfc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f042 0201 	orr.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bea:	e007      	b.n	8006bfc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40000400 	.word	0x40000400
 8006c14:	40000800 	.word	0x40000800
 8006c18:	40000c00 	.word	0x40000c00
 8006c1c:	40014000 	.word	0x40014000

08006c20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e041      	b.n	8006cb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f839 	bl	8006cbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f000 fcce 	bl	8007600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d109      	bne.n	8006cf8 <HAL_TIM_PWM_Start+0x24>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	bf14      	ite	ne
 8006cf0:	2301      	movne	r3, #1
 8006cf2:	2300      	moveq	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	e022      	b.n	8006d3e <HAL_TIM_PWM_Start+0x6a>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d109      	bne.n	8006d12 <HAL_TIM_PWM_Start+0x3e>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	bf14      	ite	ne
 8006d0a:	2301      	movne	r3, #1
 8006d0c:	2300      	moveq	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	e015      	b.n	8006d3e <HAL_TIM_PWM_Start+0x6a>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d109      	bne.n	8006d2c <HAL_TIM_PWM_Start+0x58>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	bf14      	ite	ne
 8006d24:	2301      	movne	r3, #1
 8006d26:	2300      	moveq	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	e008      	b.n	8006d3e <HAL_TIM_PWM_Start+0x6a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	bf14      	ite	ne
 8006d38:	2301      	movne	r3, #1
 8006d3a:	2300      	moveq	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e068      	b.n	8006e18 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <HAL_TIM_PWM_Start+0x82>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d54:	e013      	b.n	8006d7e <HAL_TIM_PWM_Start+0xaa>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d104      	bne.n	8006d66 <HAL_TIM_PWM_Start+0x92>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d64:	e00b      	b.n	8006d7e <HAL_TIM_PWM_Start+0xaa>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d104      	bne.n	8006d76 <HAL_TIM_PWM_Start+0xa2>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d74:	e003      	b.n	8006d7e <HAL_TIM_PWM_Start+0xaa>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2201      	movs	r2, #1
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fee0 	bl	8007b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a23      	ldr	r2, [pc, #140]	; (8006e20 <HAL_TIM_PWM_Start+0x14c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d107      	bne.n	8006da6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006da4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1d      	ldr	r2, [pc, #116]	; (8006e20 <HAL_TIM_PWM_Start+0x14c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d018      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x10e>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db8:	d013      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x10e>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a19      	ldr	r2, [pc, #100]	; (8006e24 <HAL_TIM_PWM_Start+0x150>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00e      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x10e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a17      	ldr	r2, [pc, #92]	; (8006e28 <HAL_TIM_PWM_Start+0x154>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d009      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x10e>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a16      	ldr	r2, [pc, #88]	; (8006e2c <HAL_TIM_PWM_Start+0x158>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d004      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x10e>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a14      	ldr	r2, [pc, #80]	; (8006e30 <HAL_TIM_PWM_Start+0x15c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d111      	bne.n	8006e06 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b06      	cmp	r3, #6
 8006df2:	d010      	beq.n	8006e16 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e04:	e007      	b.n	8006e16 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0201 	orr.w	r2, r2, #1
 8006e14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40010000 	.word	0x40010000
 8006e24:	40000400 	.word	0x40000400
 8006e28:	40000800 	.word	0x40000800
 8006e2c:	40000c00 	.word	0x40000c00
 8006e30:	40014000 	.word	0x40014000

08006e34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e097      	b.n	8006f78 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d106      	bne.n	8006e62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7fc f9cb 	bl	80031f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2202      	movs	r2, #2
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e78:	f023 0307 	bic.w	r3, r3, #7
 8006e7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4619      	mov	r1, r3
 8006e88:	4610      	mov	r0, r2
 8006e8a:	f000 fbb9 	bl	8007600 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb6:	f023 0303 	bic.w	r3, r3, #3
 8006eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006ed4:	f023 030c 	bic.w	r3, r3, #12
 8006ed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	021b      	lsls	r3, r3, #8
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	011a      	lsls	r2, r3, #4
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	031b      	lsls	r3, r3, #12
 8006f04:	4313      	orrs	r3, r2
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006f1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	4313      	orrs	r3, r2
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fa0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fa8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d110      	bne.n	8006fd2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d102      	bne.n	8006fbc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fb6:	7b7b      	ldrb	r3, [r7, #13]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d001      	beq.n	8006fc0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e069      	b.n	8007094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fd0:	e031      	b.n	8007036 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d110      	bne.n	8006ffa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d102      	bne.n	8006fe4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fde:	7b3b      	ldrb	r3, [r7, #12]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d001      	beq.n	8006fe8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e055      	b.n	8007094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ff8:	e01d      	b.n	8007036 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d108      	bne.n	8007012 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d105      	bne.n	8007012 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007006:	7b7b      	ldrb	r3, [r7, #13]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d102      	bne.n	8007012 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800700c:	7b3b      	ldrb	r3, [r7, #12]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d001      	beq.n	8007016 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e03e      	b.n	8007094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2202      	movs	r2, #2
 8007032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <HAL_TIM_Encoder_Start+0xc4>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b04      	cmp	r3, #4
 8007040:	d008      	beq.n	8007054 <HAL_TIM_Encoder_Start+0xd4>
 8007042:	e00f      	b.n	8007064 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2201      	movs	r2, #1
 800704a:	2100      	movs	r1, #0
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fd7d 	bl	8007b4c <TIM_CCxChannelCmd>
      break;
 8007052:	e016      	b.n	8007082 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2201      	movs	r2, #1
 800705a:	2104      	movs	r1, #4
 800705c:	4618      	mov	r0, r3
 800705e:	f000 fd75 	bl	8007b4c <TIM_CCxChannelCmd>
      break;
 8007062:	e00e      	b.n	8007082 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2201      	movs	r2, #1
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fd6d 	bl	8007b4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2201      	movs	r2, #1
 8007078:	2104      	movs	r1, #4
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fd66 	bl	8007b4c <TIM_CCxChannelCmd>
      break;
 8007080:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0201 	orr.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d122      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d11b      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f06f 0202 	mvn.w	r2, #2
 80070c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fa70 	bl	80075c4 <HAL_TIM_IC_CaptureCallback>
 80070e4:	e005      	b.n	80070f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa62 	bl	80075b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fa73 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0304 	and.w	r3, r3, #4
 8007102:	2b04      	cmp	r3, #4
 8007104:	d122      	bne.n	800714c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b04      	cmp	r3, #4
 8007112:	d11b      	bne.n	800714c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f06f 0204 	mvn.w	r2, #4
 800711c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2202      	movs	r2, #2
 8007122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fa46 	bl	80075c4 <HAL_TIM_IC_CaptureCallback>
 8007138:	e005      	b.n	8007146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa38 	bl	80075b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fa49 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b08      	cmp	r3, #8
 8007158:	d122      	bne.n	80071a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b08      	cmp	r3, #8
 8007166:	d11b      	bne.n	80071a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f06f 0208 	mvn.w	r2, #8
 8007170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2204      	movs	r2, #4
 8007176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa1c 	bl	80075c4 <HAL_TIM_IC_CaptureCallback>
 800718c:	e005      	b.n	800719a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fa0e 	bl	80075b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fa1f 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f003 0310 	and.w	r3, r3, #16
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	d122      	bne.n	80071f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f003 0310 	and.w	r3, r3, #16
 80071b8:	2b10      	cmp	r3, #16
 80071ba:	d11b      	bne.n	80071f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f06f 0210 	mvn.w	r2, #16
 80071c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2208      	movs	r2, #8
 80071ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f9f2 	bl	80075c4 <HAL_TIM_IC_CaptureCallback>
 80071e0:	e005      	b.n	80071ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f9e4 	bl	80075b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f9f5 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d10e      	bne.n	8007220 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b01      	cmp	r3, #1
 800720e:	d107      	bne.n	8007220 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f06f 0201 	mvn.w	r2, #1
 8007218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fa fbcc 	bl	80019b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722a:	2b80      	cmp	r3, #128	; 0x80
 800722c:	d10e      	bne.n	800724c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007238:	2b80      	cmp	r3, #128	; 0x80
 800723a:	d107      	bne.n	800724c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fd1e 	bl	8007c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d10e      	bne.n	8007278 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007264:	2b40      	cmp	r3, #64	; 0x40
 8007266:	d107      	bne.n	8007278 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f9ba 	bl	80075ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b20      	cmp	r3, #32
 8007284:	d10e      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b20      	cmp	r3, #32
 8007292:	d107      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0220 	mvn.w	r2, #32
 800729c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fce8 	bl	8007c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80072c2:	2302      	movs	r3, #2
 80072c4:	e0ac      	b.n	8007420 <HAL_TIM_PWM_ConfigChannel+0x174>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b0c      	cmp	r3, #12
 80072d2:	f200 809f 	bhi.w	8007414 <HAL_TIM_PWM_ConfigChannel+0x168>
 80072d6:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80072d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072dc:	08007311 	.word	0x08007311
 80072e0:	08007415 	.word	0x08007415
 80072e4:	08007415 	.word	0x08007415
 80072e8:	08007415 	.word	0x08007415
 80072ec:	08007351 	.word	0x08007351
 80072f0:	08007415 	.word	0x08007415
 80072f4:	08007415 	.word	0x08007415
 80072f8:	08007415 	.word	0x08007415
 80072fc:	08007393 	.word	0x08007393
 8007300:	08007415 	.word	0x08007415
 8007304:	08007415 	.word	0x08007415
 8007308:	08007415 	.word	0x08007415
 800730c:	080073d3 	.word	0x080073d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68b9      	ldr	r1, [r7, #8]
 8007316:	4618      	mov	r0, r3
 8007318:	f000 f9f2 	bl	8007700 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699a      	ldr	r2, [r3, #24]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0208 	orr.w	r2, r2, #8
 800732a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699a      	ldr	r2, [r3, #24]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0204 	bic.w	r2, r2, #4
 800733a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6999      	ldr	r1, [r3, #24]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	691a      	ldr	r2, [r3, #16]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	619a      	str	r2, [r3, #24]
      break;
 800734e:	e062      	b.n	8007416 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	4618      	mov	r0, r3
 8007358:	f000 fa38 	bl	80077cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800736a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6999      	ldr	r1, [r3, #24]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	021a      	lsls	r2, r3, #8
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	619a      	str	r2, [r3, #24]
      break;
 8007390:	e041      	b.n	8007416 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fa83 	bl	80078a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69da      	ldr	r2, [r3, #28]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f042 0208 	orr.w	r2, r2, #8
 80073ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69da      	ldr	r2, [r3, #28]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0204 	bic.w	r2, r2, #4
 80073bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69d9      	ldr	r1, [r3, #28]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	691a      	ldr	r2, [r3, #16]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	61da      	str	r2, [r3, #28]
      break;
 80073d0:	e021      	b.n	8007416 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68b9      	ldr	r1, [r7, #8]
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 facd 	bl	8007978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69da      	ldr	r2, [r3, #28]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69da      	ldr	r2, [r3, #28]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69d9      	ldr	r1, [r3, #28]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	021a      	lsls	r2, r3, #8
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	61da      	str	r2, [r3, #28]
      break;
 8007412:	e000      	b.n	8007416 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_TIM_ConfigClockSource+0x18>
 800743c:	2302      	movs	r3, #2
 800743e:	e0b3      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x180>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800745e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007466:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007478:	d03e      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0xd0>
 800747a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800747e:	f200 8087 	bhi.w	8007590 <HAL_TIM_ConfigClockSource+0x168>
 8007482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007486:	f000 8085 	beq.w	8007594 <HAL_TIM_ConfigClockSource+0x16c>
 800748a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748e:	d87f      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x168>
 8007490:	2b70      	cmp	r3, #112	; 0x70
 8007492:	d01a      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0xa2>
 8007494:	2b70      	cmp	r3, #112	; 0x70
 8007496:	d87b      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x168>
 8007498:	2b60      	cmp	r3, #96	; 0x60
 800749a:	d050      	beq.n	800753e <HAL_TIM_ConfigClockSource+0x116>
 800749c:	2b60      	cmp	r3, #96	; 0x60
 800749e:	d877      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x168>
 80074a0:	2b50      	cmp	r3, #80	; 0x50
 80074a2:	d03c      	beq.n	800751e <HAL_TIM_ConfigClockSource+0xf6>
 80074a4:	2b50      	cmp	r3, #80	; 0x50
 80074a6:	d873      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x168>
 80074a8:	2b40      	cmp	r3, #64	; 0x40
 80074aa:	d058      	beq.n	800755e <HAL_TIM_ConfigClockSource+0x136>
 80074ac:	2b40      	cmp	r3, #64	; 0x40
 80074ae:	d86f      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x168>
 80074b0:	2b30      	cmp	r3, #48	; 0x30
 80074b2:	d064      	beq.n	800757e <HAL_TIM_ConfigClockSource+0x156>
 80074b4:	2b30      	cmp	r3, #48	; 0x30
 80074b6:	d86b      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x168>
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d060      	beq.n	800757e <HAL_TIM_ConfigClockSource+0x156>
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d867      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x168>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d05c      	beq.n	800757e <HAL_TIM_ConfigClockSource+0x156>
 80074c4:	2b10      	cmp	r3, #16
 80074c6:	d05a      	beq.n	800757e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074c8:	e062      	b.n	8007590 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6818      	ldr	r0, [r3, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	6899      	ldr	r1, [r3, #8]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f000 fb17 	bl	8007b0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	609a      	str	r2, [r3, #8]
      break;
 80074f6:	e04e      	b.n	8007596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	6899      	ldr	r1, [r3, #8]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f000 fb00 	bl	8007b0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800751a:	609a      	str	r2, [r3, #8]
      break;
 800751c:	e03b      	b.n	8007596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	6859      	ldr	r1, [r3, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	461a      	mov	r2, r3
 800752c:	f000 fa74 	bl	8007a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2150      	movs	r1, #80	; 0x50
 8007536:	4618      	mov	r0, r3
 8007538:	f000 facd 	bl	8007ad6 <TIM_ITRx_SetConfig>
      break;
 800753c:	e02b      	b.n	8007596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	6859      	ldr	r1, [r3, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	461a      	mov	r2, r3
 800754c:	f000 fa93 	bl	8007a76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2160      	movs	r1, #96	; 0x60
 8007556:	4618      	mov	r0, r3
 8007558:	f000 fabd 	bl	8007ad6 <TIM_ITRx_SetConfig>
      break;
 800755c:	e01b      	b.n	8007596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	6859      	ldr	r1, [r3, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	461a      	mov	r2, r3
 800756c:	f000 fa54 	bl	8007a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2140      	movs	r1, #64	; 0x40
 8007576:	4618      	mov	r0, r3
 8007578:	f000 faad 	bl	8007ad6 <TIM_ITRx_SetConfig>
      break;
 800757c:	e00b      	b.n	8007596 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4619      	mov	r1, r3
 8007588:	4610      	mov	r0, r2
 800758a:	f000 faa4 	bl	8007ad6 <TIM_ITRx_SetConfig>
        break;
 800758e:	e002      	b.n	8007596 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007590:	bf00      	nop
 8007592:	e000      	b.n	8007596 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007594:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a34      	ldr	r2, [pc, #208]	; (80076e4 <TIM_Base_SetConfig+0xe4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d00f      	beq.n	8007638 <TIM_Base_SetConfig+0x38>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761e:	d00b      	beq.n	8007638 <TIM_Base_SetConfig+0x38>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a31      	ldr	r2, [pc, #196]	; (80076e8 <TIM_Base_SetConfig+0xe8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d007      	beq.n	8007638 <TIM_Base_SetConfig+0x38>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a30      	ldr	r2, [pc, #192]	; (80076ec <TIM_Base_SetConfig+0xec>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d003      	beq.n	8007638 <TIM_Base_SetConfig+0x38>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a2f      	ldr	r2, [pc, #188]	; (80076f0 <TIM_Base_SetConfig+0xf0>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d108      	bne.n	800764a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a25      	ldr	r2, [pc, #148]	; (80076e4 <TIM_Base_SetConfig+0xe4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d01b      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007658:	d017      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a22      	ldr	r2, [pc, #136]	; (80076e8 <TIM_Base_SetConfig+0xe8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d013      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a21      	ldr	r2, [pc, #132]	; (80076ec <TIM_Base_SetConfig+0xec>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00f      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a20      	ldr	r2, [pc, #128]	; (80076f0 <TIM_Base_SetConfig+0xf0>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d00b      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a1f      	ldr	r2, [pc, #124]	; (80076f4 <TIM_Base_SetConfig+0xf4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d007      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a1e      	ldr	r2, [pc, #120]	; (80076f8 <TIM_Base_SetConfig+0xf8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d003      	beq.n	800768a <TIM_Base_SetConfig+0x8a>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a1d      	ldr	r2, [pc, #116]	; (80076fc <TIM_Base_SetConfig+0xfc>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d108      	bne.n	800769c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	4313      	orrs	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a08      	ldr	r2, [pc, #32]	; (80076e4 <TIM_Base_SetConfig+0xe4>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d103      	bne.n	80076d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	615a      	str	r2, [r3, #20]
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40010000 	.word	0x40010000
 80076e8:	40000400 	.word	0x40000400
 80076ec:	40000800 	.word	0x40000800
 80076f0:	40000c00 	.word	0x40000c00
 80076f4:	40014000 	.word	0x40014000
 80076f8:	40014400 	.word	0x40014400
 80076fc:	40014800 	.word	0x40014800

08007700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	f023 0201 	bic.w	r2, r3, #1
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0303 	bic.w	r3, r3, #3
 8007736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f023 0302 	bic.w	r3, r3, #2
 8007748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a1c      	ldr	r2, [pc, #112]	; (80077c8 <TIM_OC1_SetConfig+0xc8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d10c      	bne.n	8007776 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f023 0308 	bic.w	r3, r3, #8
 8007762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	4313      	orrs	r3, r2
 800776c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f023 0304 	bic.w	r3, r3, #4
 8007774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a13      	ldr	r2, [pc, #76]	; (80077c8 <TIM_OC1_SetConfig+0xc8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d111      	bne.n	80077a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800778c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	621a      	str	r2, [r3, #32]
}
 80077bc:	bf00      	nop
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	40010000 	.word	0x40010000

080077cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	f023 0210 	bic.w	r2, r3, #16
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	021b      	lsls	r3, r3, #8
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f023 0320 	bic.w	r3, r3, #32
 8007816:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	011b      	lsls	r3, r3, #4
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	4313      	orrs	r3, r2
 8007822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a1e      	ldr	r2, [pc, #120]	; (80078a0 <TIM_OC2_SetConfig+0xd4>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d10d      	bne.n	8007848 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	011b      	lsls	r3, r3, #4
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	4313      	orrs	r3, r2
 800783e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007846:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a15      	ldr	r2, [pc, #84]	; (80078a0 <TIM_OC2_SetConfig+0xd4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d113      	bne.n	8007878 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800785e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	621a      	str	r2, [r3, #32]
}
 8007892:	bf00      	nop
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	40010000 	.word	0x40010000

080078a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f023 0303 	bic.w	r3, r3, #3
 80078da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a1d      	ldr	r2, [pc, #116]	; (8007974 <TIM_OC3_SetConfig+0xd0>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d10d      	bne.n	800791e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800791c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a14      	ldr	r2, [pc, #80]	; (8007974 <TIM_OC3_SetConfig+0xd0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d113      	bne.n	800794e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800792c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	011b      	lsls	r3, r3, #4
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4313      	orrs	r3, r2
 8007940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4313      	orrs	r3, r2
 800794c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	621a      	str	r2, [r3, #32]
}
 8007968:	bf00      	nop
 800796a:	371c      	adds	r7, #28
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	40010000 	.word	0x40010000

08007978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	021b      	lsls	r3, r3, #8
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	031b      	lsls	r3, r3, #12
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a10      	ldr	r2, [pc, #64]	; (8007a14 <TIM_OC4_SetConfig+0x9c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d109      	bne.n	80079ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	019b      	lsls	r3, r3, #6
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	621a      	str	r2, [r3, #32]
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40010000 	.word	0x40010000

08007a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	f023 0201 	bic.w	r2, r3, #1
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f023 030a 	bic.w	r3, r3, #10
 8007a54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	621a      	str	r2, [r3, #32]
}
 8007a6a:	bf00      	nop
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b087      	sub	sp, #28
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	f023 0210 	bic.w	r2, r3, #16
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007aa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	031b      	lsls	r3, r3, #12
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ab2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	621a      	str	r2, [r3, #32]
}
 8007aca:	bf00      	nop
 8007acc:	371c      	adds	r7, #28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b085      	sub	sp, #20
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f043 0307 	orr.w	r3, r3, #7
 8007af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	609a      	str	r2, [r3, #8]
}
 8007b00:	bf00      	nop
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	021a      	lsls	r2, r3, #8
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	609a      	str	r2, [r3, #8]
}
 8007b40:	bf00      	nop
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f003 031f 	and.w	r3, r3, #31
 8007b5e:	2201      	movs	r2, #1
 8007b60:	fa02 f303 	lsl.w	r3, r2, r3
 8007b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a1a      	ldr	r2, [r3, #32]
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	43db      	mvns	r3, r3
 8007b6e:	401a      	ands	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6a1a      	ldr	r2, [r3, #32]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f003 031f 	and.w	r3, r3, #31
 8007b7e:	6879      	ldr	r1, [r7, #4]
 8007b80:	fa01 f303 	lsl.w	r3, r1, r3
 8007b84:	431a      	orrs	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	621a      	str	r2, [r3, #32]
}
 8007b8a:	bf00      	nop
 8007b8c:	371c      	adds	r7, #28
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
	...

08007b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d101      	bne.n	8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bac:	2302      	movs	r3, #2
 8007bae:	e050      	b.n	8007c52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a1c      	ldr	r2, [pc, #112]	; (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d018      	beq.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfc:	d013      	beq.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a18      	ldr	r2, [pc, #96]	; (8007c64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d00e      	beq.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a16      	ldr	r2, [pc, #88]	; (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d009      	beq.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a15      	ldr	r2, [pc, #84]	; (8007c6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d004      	beq.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a13      	ldr	r2, [pc, #76]	; (8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d10c      	bne.n	8007c40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	40010000 	.word	0x40010000
 8007c64:	40000400 	.word	0x40000400
 8007c68:	40000800 	.word	0x40000800
 8007c6c:	40000c00 	.word	0x40000c00
 8007c70:	40014000 	.word	0x40014000

08007c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e03f      	b.n	8007d2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7fb fb56 	bl	8003374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2224      	movs	r2, #36	; 0x24
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fd51 	bl	8008788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	691a      	ldr	r2, [r3, #16]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	695a      	ldr	r2, [r3, #20]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2220      	movs	r2, #32
 8007d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	4613      	mov	r3, r2
 8007d44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d153      	bne.n	8007dfa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <HAL_UART_Transmit_DMA+0x26>
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e04c      	b.n	8007dfc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d101      	bne.n	8007d70 <HAL_UART_Transmit_DMA+0x38>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	e045      	b.n	8007dfc <HAL_UART_Transmit_DMA+0xc4>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	88fa      	ldrh	r2, [r7, #6]
 8007d82:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	88fa      	ldrh	r2, [r7, #6]
 8007d88:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2221      	movs	r2, #33	; 0x21
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9c:	4a19      	ldr	r2, [pc, #100]	; (8007e04 <HAL_UART_Transmit_DMA+0xcc>)
 8007d9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da4:	4a18      	ldr	r2, [pc, #96]	; (8007e08 <HAL_UART_Transmit_DMA+0xd0>)
 8007da6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dac:	4a17      	ldr	r2, [pc, #92]	; (8007e0c <HAL_UART_Transmit_DMA+0xd4>)
 8007dae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db4:	2200      	movs	r2, #0
 8007db6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007db8:	f107 0308 	add.w	r3, r7, #8
 8007dbc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	6819      	ldr	r1, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	461a      	mov	r2, r3
 8007dce:	88fb      	ldrh	r3, [r7, #6]
 8007dd0:	f7fb fe94 	bl	8003afc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ddc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	695a      	ldr	r2, [r3, #20]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007df4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	e000      	b.n	8007dfc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007dfa:	2302      	movs	r3, #2
  }
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	08008245 	.word	0x08008245
 8007e08:	08008297 	.word	0x08008297
 8007e0c:	0800837f 	.word	0x0800837f

08007e10 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	d11d      	bne.n	8007e66 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <HAL_UART_Receive_DMA+0x26>
 8007e30:	88fb      	ldrh	r3, [r7, #6]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e016      	b.n	8007e68 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d101      	bne.n	8007e48 <HAL_UART_Receive_DMA+0x38>
 8007e44:	2302      	movs	r3, #2
 8007e46:	e00f      	b.n	8007e68 <HAL_UART_Receive_DMA+0x58>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fad9 	bl	8008414 <UART_Start_Receive_DMA>
 8007e62:	4603      	mov	r3, r0
 8007e64:	e000      	b.n	8007e68 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e66:	2302      	movs	r3, #2
  }
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08a      	sub	sp, #40	; 0x28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10d      	bne.n	8007ec2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	f003 0320 	and.w	r3, r3, #32
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d008      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x52>
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	f003 0320 	and.w	r3, r3, #32
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fbcd 	bl	800865a <UART_Receive_IT>
      return;
 8007ec0:	e17c      	b.n	80081bc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 80b1 	beq.w	800802c <HAL_UART_IRQHandler+0x1bc>
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d105      	bne.n	8007ee0 <HAL_UART_IRQHandler+0x70>
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 80a6 	beq.w	800802c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <HAL_UART_IRQHandler+0x90>
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef8:	f043 0201 	orr.w	r2, r3, #1
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <HAL_UART_IRQHandler+0xb0>
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	f043 0202 	orr.w	r2, r3, #2
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <HAL_UART_IRQHandler+0xd0>
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d005      	beq.n	8007f40 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f38:	f043 0204 	orr.w	r2, r3, #4
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	f003 0308 	and.w	r3, r3, #8
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00f      	beq.n	8007f6a <HAL_UART_IRQHandler+0xfa>
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	f003 0320 	and.w	r3, r3, #32
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d104      	bne.n	8007f5e <HAL_UART_IRQHandler+0xee>
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d005      	beq.n	8007f6a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	f043 0208 	orr.w	r2, r3, #8
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 811f 	beq.w	80081b2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	f003 0320 	and.w	r3, r3, #32
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d007      	beq.n	8007f8e <HAL_UART_IRQHandler+0x11e>
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	f003 0320 	and.w	r3, r3, #32
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fb66 	bl	800865a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f98:	2b40      	cmp	r3, #64	; 0x40
 8007f9a:	bf0c      	ite	eq
 8007f9c:	2301      	moveq	r3, #1
 8007f9e:	2300      	movne	r3, #0
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d102      	bne.n	8007fb6 <HAL_UART_IRQHandler+0x146>
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d031      	beq.n	800801a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 faa6 	bl	8008508 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d123      	bne.n	8008012 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	695a      	ldr	r2, [r3, #20]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fd8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d013      	beq.n	800800a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe6:	4a77      	ldr	r2, [pc, #476]	; (80081c4 <HAL_UART_IRQHandler+0x354>)
 8007fe8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fb fe4c 	bl	8003c8c <HAL_DMA_Abort_IT>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d016      	beq.n	8008028 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008004:	4610      	mov	r0, r2
 8008006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008008:	e00e      	b.n	8008028 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f904 	bl	8008218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008010:	e00a      	b.n	8008028 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f900 	bl	8008218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008018:	e006      	b.n	8008028 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f8fc 	bl	8008218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008026:	e0c4      	b.n	80081b2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008028:	bf00      	nop
    return;
 800802a:	e0c2      	b.n	80081b2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008030:	2b01      	cmp	r3, #1
 8008032:	f040 80a2 	bne.w	800817a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	f003 0310 	and.w	r3, r3, #16
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 809c 	beq.w	800817a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	f003 0310 	and.w	r3, r3, #16
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8096 	beq.w	800817a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800804e:	2300      	movs	r3, #0
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800806e:	2b40      	cmp	r3, #64	; 0x40
 8008070:	d14f      	bne.n	8008112 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800807c:	8a3b      	ldrh	r3, [r7, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 8099 	beq.w	80081b6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008088:	8a3a      	ldrh	r2, [r7, #16]
 800808a:	429a      	cmp	r2, r3
 800808c:	f080 8093 	bcs.w	80081b6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	8a3a      	ldrh	r2, [r7, #16]
 8008094:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080a0:	d02b      	beq.n	80080fa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080b0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	695a      	ldr	r2, [r3, #20]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 0201 	bic.w	r2, r2, #1
 80080c0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	695a      	ldr	r2, [r3, #20]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080d0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0210 	bic.w	r2, r2, #16
 80080ee:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fb fd59 	bl	8003bac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008102:	b29b      	uxth	r3, r3
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	b29b      	uxth	r3, r3
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f88e 	bl	800822c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008110:	e051      	b.n	80081b6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800811a:	b29b      	uxth	r3, r3
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008124:	b29b      	uxth	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d047      	beq.n	80081ba <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800812a:	8a7b      	ldrh	r3, [r7, #18]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d044      	beq.n	80081ba <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800813e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	695a      	ldr	r2, [r3, #20]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 0201 	bic.w	r2, r2, #1
 800814e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2220      	movs	r2, #32
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68da      	ldr	r2, [r3, #12]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 0210 	bic.w	r2, r2, #16
 800816c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800816e:	8a7b      	ldrh	r3, [r7, #18]
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f85a 	bl	800822c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008178:	e01f      	b.n	80081ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008180:	2b00      	cmp	r3, #0
 8008182:	d008      	beq.n	8008196 <HAL_UART_IRQHandler+0x326>
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f9fb 	bl	800858a <UART_Transmit_IT>
    return;
 8008194:	e012      	b.n	80081bc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00d      	beq.n	80081bc <HAL_UART_IRQHandler+0x34c>
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d008      	beq.n	80081bc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fa3d 	bl	800862a <UART_EndTransmit_IT>
    return;
 80081b0:	e004      	b.n	80081bc <HAL_UART_IRQHandler+0x34c>
    return;
 80081b2:	bf00      	nop
 80081b4:	e002      	b.n	80081bc <HAL_UART_IRQHandler+0x34c>
      return;
 80081b6:	bf00      	nop
 80081b8:	e000      	b.n	80081bc <HAL_UART_IRQHandler+0x34c>
      return;
 80081ba:	bf00      	nop
  }
}
 80081bc:	3728      	adds	r7, #40	; 0x28
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	08008563 	.word	0x08008563

080081c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825c:	2b00      	cmp	r3, #0
 800825e:	d113      	bne.n	8008288 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	695a      	ldr	r2, [r3, #20]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008274:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68da      	ldr	r2, [r3, #12]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008284:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008286:	e002      	b.n	800828e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7ff ff9d 	bl	80081c8 <HAL_UART_TxCpltCallback>
}
 800828e:	bf00      	nop
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7ff ff99 	bl	80081dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082aa:	bf00      	nop
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082be:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d12a      	bne.n	8008324 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082e2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	695a      	ldr	r2, [r3, #20]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0201 	bic.w	r2, r2, #1
 80082f2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	695a      	ldr	r2, [r3, #20]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008302:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2220      	movs	r2, #32
 8008308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008310:	2b01      	cmp	r3, #1
 8008312:	d107      	bne.n	8008324 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0210 	bic.w	r2, r2, #16
 8008322:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008328:	2b01      	cmp	r3, #1
 800832a:	d106      	bne.n	800833a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008330:	4619      	mov	r1, r3
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f7ff ff7a 	bl	800822c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008338:	e002      	b.n	8008340 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f7ff ff58 	bl	80081f0 <HAL_UART_RxCpltCallback>
}
 8008340:	bf00      	nop
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835a:	2b01      	cmp	r3, #1
 800835c:	d108      	bne.n	8008370 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008362:	085b      	lsrs	r3, r3, #1
 8008364:	b29b      	uxth	r3, r3
 8008366:	4619      	mov	r1, r3
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff ff5f 	bl	800822c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800836e:	e002      	b.n	8008376 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f7ff ff47 	bl	8008204 <HAL_UART_RxHalfCpltCallback>
}
 8008376:	bf00      	nop
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839a:	2b80      	cmp	r3, #128	; 0x80
 800839c:	bf0c      	ite	eq
 800839e:	2301      	moveq	r3, #1
 80083a0:	2300      	movne	r3, #0
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b21      	cmp	r3, #33	; 0x21
 80083b0:	d108      	bne.n	80083c4 <UART_DMAError+0x46>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d005      	beq.n	80083c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2200      	movs	r2, #0
 80083bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80083be:	68b8      	ldr	r0, [r7, #8]
 80083c0:	f000 f88c 	bl	80084dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ce:	2b40      	cmp	r3, #64	; 0x40
 80083d0:	bf0c      	ite	eq
 80083d2:	2301      	moveq	r3, #1
 80083d4:	2300      	movne	r3, #0
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b22      	cmp	r3, #34	; 0x22
 80083e4:	d108      	bne.n	80083f8 <UART_DMAError+0x7a>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d005      	beq.n	80083f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2200      	movs	r2, #0
 80083f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80083f2:	68b8      	ldr	r0, [r7, #8]
 80083f4:	f000 f888 	bl	8008508 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	f043 0210 	orr.w	r2, r3, #16
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008404:	68b8      	ldr	r0, [r7, #8]
 8008406:	f7ff ff07 	bl	8008218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800840a:	bf00      	nop
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	4613      	mov	r3, r2
 8008420:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	88fa      	ldrh	r2, [r7, #6]
 800842c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2222      	movs	r2, #34	; 0x22
 8008438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008440:	4a23      	ldr	r2, [pc, #140]	; (80084d0 <UART_Start_Receive_DMA+0xbc>)
 8008442:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008448:	4a22      	ldr	r2, [pc, #136]	; (80084d4 <UART_Start_Receive_DMA+0xc0>)
 800844a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	4a21      	ldr	r2, [pc, #132]	; (80084d8 <UART_Start_Receive_DMA+0xc4>)
 8008452:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008458:	2200      	movs	r2, #0
 800845a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800845c:	f107 0308 	add.w	r3, r7, #8
 8008460:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3304      	adds	r3, #4
 800846c:	4619      	mov	r1, r3
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	88fb      	ldrh	r3, [r7, #6]
 8008474:	f7fb fb42 	bl	8003afc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008478:	2300      	movs	r3, #0
 800847a:	613b      	str	r3, [r7, #16]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	613b      	str	r3, [r7, #16]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	613b      	str	r3, [r7, #16]
 800848c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68da      	ldr	r2, [r3, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084a4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	695a      	ldr	r2, [r3, #20]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f042 0201 	orr.w	r2, r2, #1
 80084b4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695a      	ldr	r2, [r3, #20]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084c4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	080082b3 	.word	0x080082b3
 80084d4:	08008349 	.word	0x08008349
 80084d8:	0800837f 	.word	0x0800837f

080084dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80084f2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800851e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	695a      	ldr	r2, [r3, #20]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0201 	bic.w	r2, r2, #1
 800852e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008534:	2b01      	cmp	r3, #1
 8008536:	d107      	bne.n	8008548 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0210 	bic.w	r2, r2, #16
 8008546:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2220      	movs	r2, #32
 800854c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008556:	bf00      	nop
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff fe4b 	bl	8008218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008582:	bf00      	nop
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b21      	cmp	r3, #33	; 0x21
 800859c:	d13e      	bne.n	800861c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085a6:	d114      	bne.n	80085d2 <UART_Transmit_IT+0x48>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d110      	bne.n	80085d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	461a      	mov	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	1c9a      	adds	r2, r3, #2
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	621a      	str	r2, [r3, #32]
 80085d0:	e008      	b.n	80085e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	1c59      	adds	r1, r3, #1
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6211      	str	r1, [r2, #32]
 80085dc:	781a      	ldrb	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	4619      	mov	r1, r3
 80085f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10f      	bne.n	8008618 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008606:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008616:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	e000      	b.n	800861e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800861c:	2302      	movs	r3, #2
  }
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68da      	ldr	r2, [r3, #12]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008640:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2220      	movs	r2, #32
 8008646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff fdbc 	bl	80081c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b22      	cmp	r3, #34	; 0x22
 800866c:	f040 8087 	bne.w	800877e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008678:	d117      	bne.n	80086aa <UART_Receive_IT+0x50>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d113      	bne.n	80086aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	b29b      	uxth	r3, r3
 8008694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008698:	b29a      	uxth	r2, r3
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	1c9a      	adds	r2, r3, #2
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	629a      	str	r2, [r3, #40]	; 0x28
 80086a8:	e026      	b.n	80086f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ae:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086bc:	d007      	beq.n	80086ce <UART_Receive_IT+0x74>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10a      	bne.n	80086dc <UART_Receive_IT+0x82>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	701a      	strb	r2, [r3, #0]
 80086da:	e008      	b.n	80086ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	3b01      	subs	r3, #1
 8008700:	b29b      	uxth	r3, r3
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	4619      	mov	r1, r3
 8008706:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008708:	2b00      	cmp	r3, #0
 800870a:	d136      	bne.n	800877a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68da      	ldr	r2, [r3, #12]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 0220 	bic.w	r2, r2, #32
 800871a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800872a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	695a      	ldr	r2, [r3, #20]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 0201 	bic.w	r2, r2, #1
 800873a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008748:	2b01      	cmp	r3, #1
 800874a:	d10e      	bne.n	800876a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 0210 	bic.w	r2, r2, #16
 800875a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff fd62 	bl	800822c <HAL_UARTEx_RxEventCallback>
 8008768:	e002      	b.n	8008770 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff fd40 	bl	80081f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	e002      	b.n	8008780 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	e000      	b.n	8008780 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800877e:	2302      	movs	r3, #2
  }
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	b09f      	sub	sp, #124	; 0x7c
 800878e:	af00      	add	r7, sp, #0
 8008790:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800879c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800879e:	68d9      	ldr	r1, [r3, #12]
 80087a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	ea40 0301 	orr.w	r3, r0, r1
 80087a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ac:	689a      	ldr	r2, [r3, #8]
 80087ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	431a      	orrs	r2, r3
 80087b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	431a      	orrs	r2, r3
 80087ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	4313      	orrs	r3, r2
 80087c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80087c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80087cc:	f021 010c 	bic.w	r1, r1, #12
 80087d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087d6:	430b      	orrs	r3, r1
 80087d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80087e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e6:	6999      	ldr	r1, [r3, #24]
 80087e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	ea40 0301 	orr.w	r3, r0, r1
 80087f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	4bc5      	ldr	r3, [pc, #788]	; (8008b0c <UART_SetConfig+0x384>)
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d004      	beq.n	8008806 <UART_SetConfig+0x7e>
 80087fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	4bc3      	ldr	r3, [pc, #780]	; (8008b10 <UART_SetConfig+0x388>)
 8008802:	429a      	cmp	r2, r3
 8008804:	d103      	bne.n	800880e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008806:	f7fe f8eb 	bl	80069e0 <HAL_RCC_GetPCLK2Freq>
 800880a:	6778      	str	r0, [r7, #116]	; 0x74
 800880c:	e002      	b.n	8008814 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800880e:	f7fe f8d3 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8008812:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800881c:	f040 80b6 	bne.w	800898c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008822:	461c      	mov	r4, r3
 8008824:	f04f 0500 	mov.w	r5, #0
 8008828:	4622      	mov	r2, r4
 800882a:	462b      	mov	r3, r5
 800882c:	1891      	adds	r1, r2, r2
 800882e:	6439      	str	r1, [r7, #64]	; 0x40
 8008830:	415b      	adcs	r3, r3
 8008832:	647b      	str	r3, [r7, #68]	; 0x44
 8008834:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008838:	1912      	adds	r2, r2, r4
 800883a:	eb45 0303 	adc.w	r3, r5, r3
 800883e:	f04f 0000 	mov.w	r0, #0
 8008842:	f04f 0100 	mov.w	r1, #0
 8008846:	00d9      	lsls	r1, r3, #3
 8008848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800884c:	00d0      	lsls	r0, r2, #3
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	1911      	adds	r1, r2, r4
 8008854:	6639      	str	r1, [r7, #96]	; 0x60
 8008856:	416b      	adcs	r3, r5
 8008858:	667b      	str	r3, [r7, #100]	; 0x64
 800885a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	461a      	mov	r2, r3
 8008860:	f04f 0300 	mov.w	r3, #0
 8008864:	1891      	adds	r1, r2, r2
 8008866:	63b9      	str	r1, [r7, #56]	; 0x38
 8008868:	415b      	adcs	r3, r3
 800886a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800886c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008870:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008874:	f7f8 fa9a 	bl	8000dac <__aeabi_uldivmod>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4ba5      	ldr	r3, [pc, #660]	; (8008b14 <UART_SetConfig+0x38c>)
 800887e:	fba3 2302 	umull	r2, r3, r3, r2
 8008882:	095b      	lsrs	r3, r3, #5
 8008884:	011e      	lsls	r6, r3, #4
 8008886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008888:	461c      	mov	r4, r3
 800888a:	f04f 0500 	mov.w	r5, #0
 800888e:	4622      	mov	r2, r4
 8008890:	462b      	mov	r3, r5
 8008892:	1891      	adds	r1, r2, r2
 8008894:	6339      	str	r1, [r7, #48]	; 0x30
 8008896:	415b      	adcs	r3, r3
 8008898:	637b      	str	r3, [r7, #52]	; 0x34
 800889a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800889e:	1912      	adds	r2, r2, r4
 80088a0:	eb45 0303 	adc.w	r3, r5, r3
 80088a4:	f04f 0000 	mov.w	r0, #0
 80088a8:	f04f 0100 	mov.w	r1, #0
 80088ac:	00d9      	lsls	r1, r3, #3
 80088ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088b2:	00d0      	lsls	r0, r2, #3
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	1911      	adds	r1, r2, r4
 80088ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80088bc:	416b      	adcs	r3, r5
 80088be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	461a      	mov	r2, r3
 80088c6:	f04f 0300 	mov.w	r3, #0
 80088ca:	1891      	adds	r1, r2, r2
 80088cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80088ce:	415b      	adcs	r3, r3
 80088d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80088da:	f7f8 fa67 	bl	8000dac <__aeabi_uldivmod>
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	4b8c      	ldr	r3, [pc, #560]	; (8008b14 <UART_SetConfig+0x38c>)
 80088e4:	fba3 1302 	umull	r1, r3, r3, r2
 80088e8:	095b      	lsrs	r3, r3, #5
 80088ea:	2164      	movs	r1, #100	; 0x64
 80088ec:	fb01 f303 	mul.w	r3, r1, r3
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	00db      	lsls	r3, r3, #3
 80088f4:	3332      	adds	r3, #50	; 0x32
 80088f6:	4a87      	ldr	r2, [pc, #540]	; (8008b14 <UART_SetConfig+0x38c>)
 80088f8:	fba2 2303 	umull	r2, r3, r2, r3
 80088fc:	095b      	lsrs	r3, r3, #5
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008904:	441e      	add	r6, r3
 8008906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008908:	4618      	mov	r0, r3
 800890a:	f04f 0100 	mov.w	r1, #0
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	1894      	adds	r4, r2, r2
 8008914:	623c      	str	r4, [r7, #32]
 8008916:	415b      	adcs	r3, r3
 8008918:	627b      	str	r3, [r7, #36]	; 0x24
 800891a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800891e:	1812      	adds	r2, r2, r0
 8008920:	eb41 0303 	adc.w	r3, r1, r3
 8008924:	f04f 0400 	mov.w	r4, #0
 8008928:	f04f 0500 	mov.w	r5, #0
 800892c:	00dd      	lsls	r5, r3, #3
 800892e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008932:	00d4      	lsls	r4, r2, #3
 8008934:	4622      	mov	r2, r4
 8008936:	462b      	mov	r3, r5
 8008938:	1814      	adds	r4, r2, r0
 800893a:	653c      	str	r4, [r7, #80]	; 0x50
 800893c:	414b      	adcs	r3, r1
 800893e:	657b      	str	r3, [r7, #84]	; 0x54
 8008940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	461a      	mov	r2, r3
 8008946:	f04f 0300 	mov.w	r3, #0
 800894a:	1891      	adds	r1, r2, r2
 800894c:	61b9      	str	r1, [r7, #24]
 800894e:	415b      	adcs	r3, r3
 8008950:	61fb      	str	r3, [r7, #28]
 8008952:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008956:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800895a:	f7f8 fa27 	bl	8000dac <__aeabi_uldivmod>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4b6c      	ldr	r3, [pc, #432]	; (8008b14 <UART_SetConfig+0x38c>)
 8008964:	fba3 1302 	umull	r1, r3, r3, r2
 8008968:	095b      	lsrs	r3, r3, #5
 800896a:	2164      	movs	r1, #100	; 0x64
 800896c:	fb01 f303 	mul.w	r3, r1, r3
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	00db      	lsls	r3, r3, #3
 8008974:	3332      	adds	r3, #50	; 0x32
 8008976:	4a67      	ldr	r2, [pc, #412]	; (8008b14 <UART_SetConfig+0x38c>)
 8008978:	fba2 2303 	umull	r2, r3, r2, r3
 800897c:	095b      	lsrs	r3, r3, #5
 800897e:	f003 0207 	and.w	r2, r3, #7
 8008982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4432      	add	r2, r6
 8008988:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800898a:	e0b9      	b.n	8008b00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800898c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800898e:	461c      	mov	r4, r3
 8008990:	f04f 0500 	mov.w	r5, #0
 8008994:	4622      	mov	r2, r4
 8008996:	462b      	mov	r3, r5
 8008998:	1891      	adds	r1, r2, r2
 800899a:	6139      	str	r1, [r7, #16]
 800899c:	415b      	adcs	r3, r3
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80089a4:	1912      	adds	r2, r2, r4
 80089a6:	eb45 0303 	adc.w	r3, r5, r3
 80089aa:	f04f 0000 	mov.w	r0, #0
 80089ae:	f04f 0100 	mov.w	r1, #0
 80089b2:	00d9      	lsls	r1, r3, #3
 80089b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089b8:	00d0      	lsls	r0, r2, #3
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	eb12 0804 	adds.w	r8, r2, r4
 80089c2:	eb43 0905 	adc.w	r9, r3, r5
 80089c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f04f 0100 	mov.w	r1, #0
 80089d0:	f04f 0200 	mov.w	r2, #0
 80089d4:	f04f 0300 	mov.w	r3, #0
 80089d8:	008b      	lsls	r3, r1, #2
 80089da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089de:	0082      	lsls	r2, r0, #2
 80089e0:	4640      	mov	r0, r8
 80089e2:	4649      	mov	r1, r9
 80089e4:	f7f8 f9e2 	bl	8000dac <__aeabi_uldivmod>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4b49      	ldr	r3, [pc, #292]	; (8008b14 <UART_SetConfig+0x38c>)
 80089ee:	fba3 2302 	umull	r2, r3, r3, r2
 80089f2:	095b      	lsrs	r3, r3, #5
 80089f4:	011e      	lsls	r6, r3, #4
 80089f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089f8:	4618      	mov	r0, r3
 80089fa:	f04f 0100 	mov.w	r1, #0
 80089fe:	4602      	mov	r2, r0
 8008a00:	460b      	mov	r3, r1
 8008a02:	1894      	adds	r4, r2, r2
 8008a04:	60bc      	str	r4, [r7, #8]
 8008a06:	415b      	adcs	r3, r3
 8008a08:	60fb      	str	r3, [r7, #12]
 8008a0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a0e:	1812      	adds	r2, r2, r0
 8008a10:	eb41 0303 	adc.w	r3, r1, r3
 8008a14:	f04f 0400 	mov.w	r4, #0
 8008a18:	f04f 0500 	mov.w	r5, #0
 8008a1c:	00dd      	lsls	r5, r3, #3
 8008a1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a22:	00d4      	lsls	r4, r2, #3
 8008a24:	4622      	mov	r2, r4
 8008a26:	462b      	mov	r3, r5
 8008a28:	1814      	adds	r4, r2, r0
 8008a2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8008a2c:	414b      	adcs	r3, r1
 8008a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f04f 0100 	mov.w	r1, #0
 8008a3a:	f04f 0200 	mov.w	r2, #0
 8008a3e:	f04f 0300 	mov.w	r3, #0
 8008a42:	008b      	lsls	r3, r1, #2
 8008a44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a48:	0082      	lsls	r2, r0, #2
 8008a4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a4e:	f7f8 f9ad 	bl	8000dac <__aeabi_uldivmod>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4b2f      	ldr	r3, [pc, #188]	; (8008b14 <UART_SetConfig+0x38c>)
 8008a58:	fba3 1302 	umull	r1, r3, r3, r2
 8008a5c:	095b      	lsrs	r3, r3, #5
 8008a5e:	2164      	movs	r1, #100	; 0x64
 8008a60:	fb01 f303 	mul.w	r3, r1, r3
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	011b      	lsls	r3, r3, #4
 8008a68:	3332      	adds	r3, #50	; 0x32
 8008a6a:	4a2a      	ldr	r2, [pc, #168]	; (8008b14 <UART_SetConfig+0x38c>)
 8008a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a70:	095b      	lsrs	r3, r3, #5
 8008a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a76:	441e      	add	r6, r3
 8008a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f04f 0100 	mov.w	r1, #0
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	1894      	adds	r4, r2, r2
 8008a86:	603c      	str	r4, [r7, #0]
 8008a88:	415b      	adcs	r3, r3
 8008a8a:	607b      	str	r3, [r7, #4]
 8008a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a90:	1812      	adds	r2, r2, r0
 8008a92:	eb41 0303 	adc.w	r3, r1, r3
 8008a96:	f04f 0400 	mov.w	r4, #0
 8008a9a:	f04f 0500 	mov.w	r5, #0
 8008a9e:	00dd      	lsls	r5, r3, #3
 8008aa0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008aa4:	00d4      	lsls	r4, r2, #3
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	eb12 0a00 	adds.w	sl, r2, r0
 8008aae:	eb43 0b01 	adc.w	fp, r3, r1
 8008ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f04f 0100 	mov.w	r1, #0
 8008abc:	f04f 0200 	mov.w	r2, #0
 8008ac0:	f04f 0300 	mov.w	r3, #0
 8008ac4:	008b      	lsls	r3, r1, #2
 8008ac6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008aca:	0082      	lsls	r2, r0, #2
 8008acc:	4650      	mov	r0, sl
 8008ace:	4659      	mov	r1, fp
 8008ad0:	f7f8 f96c 	bl	8000dac <__aeabi_uldivmod>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4b0e      	ldr	r3, [pc, #56]	; (8008b14 <UART_SetConfig+0x38c>)
 8008ada:	fba3 1302 	umull	r1, r3, r3, r2
 8008ade:	095b      	lsrs	r3, r3, #5
 8008ae0:	2164      	movs	r1, #100	; 0x64
 8008ae2:	fb01 f303 	mul.w	r3, r1, r3
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	011b      	lsls	r3, r3, #4
 8008aea:	3332      	adds	r3, #50	; 0x32
 8008aec:	4a09      	ldr	r2, [pc, #36]	; (8008b14 <UART_SetConfig+0x38c>)
 8008aee:	fba2 2303 	umull	r2, r3, r2, r3
 8008af2:	095b      	lsrs	r3, r3, #5
 8008af4:	f003 020f 	and.w	r2, r3, #15
 8008af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4432      	add	r2, r6
 8008afe:	609a      	str	r2, [r3, #8]
}
 8008b00:	bf00      	nop
 8008b02:	377c      	adds	r7, #124	; 0x7c
 8008b04:	46bd      	mov	sp, r7
 8008b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0a:	bf00      	nop
 8008b0c:	40011000 	.word	0x40011000
 8008b10:	40011400 	.word	0x40011400
 8008b14:	51eb851f 	.word	0x51eb851f

08008b18 <calloc>:
 8008b18:	4b02      	ldr	r3, [pc, #8]	; (8008b24 <calloc+0xc>)
 8008b1a:	460a      	mov	r2, r1
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	6818      	ldr	r0, [r3, #0]
 8008b20:	f000 b842 	b.w	8008ba8 <_calloc_r>
 8008b24:	20000020 	.word	0x20000020

08008b28 <__errno>:
 8008b28:	4b01      	ldr	r3, [pc, #4]	; (8008b30 <__errno+0x8>)
 8008b2a:	6818      	ldr	r0, [r3, #0]
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	20000020 	.word	0x20000020

08008b34 <__libc_init_array>:
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	4d0d      	ldr	r5, [pc, #52]	; (8008b6c <__libc_init_array+0x38>)
 8008b38:	4c0d      	ldr	r4, [pc, #52]	; (8008b70 <__libc_init_array+0x3c>)
 8008b3a:	1b64      	subs	r4, r4, r5
 8008b3c:	10a4      	asrs	r4, r4, #2
 8008b3e:	2600      	movs	r6, #0
 8008b40:	42a6      	cmp	r6, r4
 8008b42:	d109      	bne.n	8008b58 <__libc_init_array+0x24>
 8008b44:	4d0b      	ldr	r5, [pc, #44]	; (8008b74 <__libc_init_array+0x40>)
 8008b46:	4c0c      	ldr	r4, [pc, #48]	; (8008b78 <__libc_init_array+0x44>)
 8008b48:	f000 f99e 	bl	8008e88 <_init>
 8008b4c:	1b64      	subs	r4, r4, r5
 8008b4e:	10a4      	asrs	r4, r4, #2
 8008b50:	2600      	movs	r6, #0
 8008b52:	42a6      	cmp	r6, r4
 8008b54:	d105      	bne.n	8008b62 <__libc_init_array+0x2e>
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
 8008b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5c:	4798      	blx	r3
 8008b5e:	3601      	adds	r6, #1
 8008b60:	e7ee      	b.n	8008b40 <__libc_init_array+0xc>
 8008b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b66:	4798      	blx	r3
 8008b68:	3601      	adds	r6, #1
 8008b6a:	e7f2      	b.n	8008b52 <__libc_init_array+0x1e>
 8008b6c:	08008ee0 	.word	0x08008ee0
 8008b70:	08008ee0 	.word	0x08008ee0
 8008b74:	08008ee0 	.word	0x08008ee0
 8008b78:	08008ee4 	.word	0x08008ee4

08008b7c <memcpy>:
 8008b7c:	440a      	add	r2, r1
 8008b7e:	4291      	cmp	r1, r2
 8008b80:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b84:	d100      	bne.n	8008b88 <memcpy+0xc>
 8008b86:	4770      	bx	lr
 8008b88:	b510      	push	{r4, lr}
 8008b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b92:	4291      	cmp	r1, r2
 8008b94:	d1f9      	bne.n	8008b8a <memcpy+0xe>
 8008b96:	bd10      	pop	{r4, pc}

08008b98 <memset>:
 8008b98:	4402      	add	r2, r0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d100      	bne.n	8008ba2 <memset+0xa>
 8008ba0:	4770      	bx	lr
 8008ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ba6:	e7f9      	b.n	8008b9c <memset+0x4>

08008ba8 <_calloc_r>:
 8008ba8:	b513      	push	{r0, r1, r4, lr}
 8008baa:	434a      	muls	r2, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	9201      	str	r2, [sp, #4]
 8008bb0:	f000 f80a 	bl	8008bc8 <_malloc_r>
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	b118      	cbz	r0, 8008bc0 <_calloc_r+0x18>
 8008bb8:	9a01      	ldr	r2, [sp, #4]
 8008bba:	2100      	movs	r1, #0
 8008bbc:	f7ff ffec 	bl	8008b98 <memset>
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	b002      	add	sp, #8
 8008bc4:	bd10      	pop	{r4, pc}
	...

08008bc8 <_malloc_r>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	1ccd      	adds	r5, r1, #3
 8008bcc:	f025 0503 	bic.w	r5, r5, #3
 8008bd0:	3508      	adds	r5, #8
 8008bd2:	2d0c      	cmp	r5, #12
 8008bd4:	bf38      	it	cc
 8008bd6:	250c      	movcc	r5, #12
 8008bd8:	2d00      	cmp	r5, #0
 8008bda:	4606      	mov	r6, r0
 8008bdc:	db01      	blt.n	8008be2 <_malloc_r+0x1a>
 8008bde:	42a9      	cmp	r1, r5
 8008be0:	d903      	bls.n	8008bea <_malloc_r+0x22>
 8008be2:	230c      	movs	r3, #12
 8008be4:	6033      	str	r3, [r6, #0]
 8008be6:	2000      	movs	r0, #0
 8008be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bea:	f000 f857 	bl	8008c9c <__malloc_lock>
 8008bee:	4921      	ldr	r1, [pc, #132]	; (8008c74 <_malloc_r+0xac>)
 8008bf0:	680a      	ldr	r2, [r1, #0]
 8008bf2:	4614      	mov	r4, r2
 8008bf4:	b99c      	cbnz	r4, 8008c1e <_malloc_r+0x56>
 8008bf6:	4f20      	ldr	r7, [pc, #128]	; (8008c78 <_malloc_r+0xb0>)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	b923      	cbnz	r3, 8008c06 <_malloc_r+0x3e>
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f000 f83c 	bl	8008c7c <_sbrk_r>
 8008c04:	6038      	str	r0, [r7, #0]
 8008c06:	4629      	mov	r1, r5
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f000 f837 	bl	8008c7c <_sbrk_r>
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	d123      	bne.n	8008c5a <_malloc_r+0x92>
 8008c12:	230c      	movs	r3, #12
 8008c14:	6033      	str	r3, [r6, #0]
 8008c16:	4630      	mov	r0, r6
 8008c18:	f000 f846 	bl	8008ca8 <__malloc_unlock>
 8008c1c:	e7e3      	b.n	8008be6 <_malloc_r+0x1e>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	1b5b      	subs	r3, r3, r5
 8008c22:	d417      	bmi.n	8008c54 <_malloc_r+0x8c>
 8008c24:	2b0b      	cmp	r3, #11
 8008c26:	d903      	bls.n	8008c30 <_malloc_r+0x68>
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	441c      	add	r4, r3
 8008c2c:	6025      	str	r5, [r4, #0]
 8008c2e:	e004      	b.n	8008c3a <_malloc_r+0x72>
 8008c30:	6863      	ldr	r3, [r4, #4]
 8008c32:	42a2      	cmp	r2, r4
 8008c34:	bf0c      	ite	eq
 8008c36:	600b      	streq	r3, [r1, #0]
 8008c38:	6053      	strne	r3, [r2, #4]
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f000 f834 	bl	8008ca8 <__malloc_unlock>
 8008c40:	f104 000b 	add.w	r0, r4, #11
 8008c44:	1d23      	adds	r3, r4, #4
 8008c46:	f020 0007 	bic.w	r0, r0, #7
 8008c4a:	1ac2      	subs	r2, r0, r3
 8008c4c:	d0cc      	beq.n	8008be8 <_malloc_r+0x20>
 8008c4e:	1a1b      	subs	r3, r3, r0
 8008c50:	50a3      	str	r3, [r4, r2]
 8008c52:	e7c9      	b.n	8008be8 <_malloc_r+0x20>
 8008c54:	4622      	mov	r2, r4
 8008c56:	6864      	ldr	r4, [r4, #4]
 8008c58:	e7cc      	b.n	8008bf4 <_malloc_r+0x2c>
 8008c5a:	1cc4      	adds	r4, r0, #3
 8008c5c:	f024 0403 	bic.w	r4, r4, #3
 8008c60:	42a0      	cmp	r0, r4
 8008c62:	d0e3      	beq.n	8008c2c <_malloc_r+0x64>
 8008c64:	1a21      	subs	r1, r4, r0
 8008c66:	4630      	mov	r0, r6
 8008c68:	f000 f808 	bl	8008c7c <_sbrk_r>
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	d1dd      	bne.n	8008c2c <_malloc_r+0x64>
 8008c70:	e7cf      	b.n	8008c12 <_malloc_r+0x4a>
 8008c72:	bf00      	nop
 8008c74:	20000300 	.word	0x20000300
 8008c78:	20000304 	.word	0x20000304

08008c7c <_sbrk_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	4d06      	ldr	r5, [pc, #24]	; (8008c98 <_sbrk_r+0x1c>)
 8008c80:	2300      	movs	r3, #0
 8008c82:	4604      	mov	r4, r0
 8008c84:	4608      	mov	r0, r1
 8008c86:	602b      	str	r3, [r5, #0]
 8008c88:	f7fa fc90 	bl	80035ac <_sbrk>
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	d102      	bne.n	8008c96 <_sbrk_r+0x1a>
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	b103      	cbz	r3, 8008c96 <_sbrk_r+0x1a>
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	2000053c 	.word	0x2000053c

08008c9c <__malloc_lock>:
 8008c9c:	4801      	ldr	r0, [pc, #4]	; (8008ca4 <__malloc_lock+0x8>)
 8008c9e:	f000 b809 	b.w	8008cb4 <__retarget_lock_acquire_recursive>
 8008ca2:	bf00      	nop
 8008ca4:	20000544 	.word	0x20000544

08008ca8 <__malloc_unlock>:
 8008ca8:	4801      	ldr	r0, [pc, #4]	; (8008cb0 <__malloc_unlock+0x8>)
 8008caa:	f000 b804 	b.w	8008cb6 <__retarget_lock_release_recursive>
 8008cae:	bf00      	nop
 8008cb0:	20000544 	.word	0x20000544

08008cb4 <__retarget_lock_acquire_recursive>:
 8008cb4:	4770      	bx	lr

08008cb6 <__retarget_lock_release_recursive>:
 8008cb6:	4770      	bx	lr

08008cb8 <sqrt>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	ed2d 8b02 	vpush	{d8}
 8008cbe:	ec55 4b10 	vmov	r4, r5, d0
 8008cc2:	f000 f82d 	bl	8008d20 <__ieee754_sqrt>
 8008cc6:	4b15      	ldr	r3, [pc, #84]	; (8008d1c <sqrt+0x64>)
 8008cc8:	eeb0 8a40 	vmov.f32	s16, s0
 8008ccc:	eef0 8a60 	vmov.f32	s17, s1
 8008cd0:	f993 3000 	ldrsb.w	r3, [r3]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	d019      	beq.n	8008d0c <sqrt+0x54>
 8008cd8:	4622      	mov	r2, r4
 8008cda:	462b      	mov	r3, r5
 8008cdc:	4620      	mov	r0, r4
 8008cde:	4629      	mov	r1, r5
 8008ce0:	f7f7 fed0 	bl	8000a84 <__aeabi_dcmpun>
 8008ce4:	b990      	cbnz	r0, 8008d0c <sqrt+0x54>
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2300      	movs	r3, #0
 8008cea:	4620      	mov	r0, r4
 8008cec:	4629      	mov	r1, r5
 8008cee:	f7f7 fea1 	bl	8000a34 <__aeabi_dcmplt>
 8008cf2:	b158      	cbz	r0, 8008d0c <sqrt+0x54>
 8008cf4:	f7ff ff18 	bl	8008b28 <__errno>
 8008cf8:	2321      	movs	r3, #33	; 0x21
 8008cfa:	6003      	str	r3, [r0, #0]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2300      	movs	r3, #0
 8008d00:	4610      	mov	r0, r2
 8008d02:	4619      	mov	r1, r3
 8008d04:	f7f7 fd4e 	bl	80007a4 <__aeabi_ddiv>
 8008d08:	ec41 0b18 	vmov	d8, r0, r1
 8008d0c:	eeb0 0a48 	vmov.f32	s0, s16
 8008d10:	eef0 0a68 	vmov.f32	s1, s17
 8008d14:	ecbd 8b02 	vpop	{d8}
 8008d18:	bd38      	pop	{r3, r4, r5, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20000084 	.word	0x20000084

08008d20 <__ieee754_sqrt>:
 8008d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d24:	ec55 4b10 	vmov	r4, r5, d0
 8008d28:	4e56      	ldr	r6, [pc, #344]	; (8008e84 <__ieee754_sqrt+0x164>)
 8008d2a:	43ae      	bics	r6, r5
 8008d2c:	ee10 0a10 	vmov	r0, s0
 8008d30:	ee10 3a10 	vmov	r3, s0
 8008d34:	4629      	mov	r1, r5
 8008d36:	462a      	mov	r2, r5
 8008d38:	d110      	bne.n	8008d5c <__ieee754_sqrt+0x3c>
 8008d3a:	ee10 2a10 	vmov	r2, s0
 8008d3e:	462b      	mov	r3, r5
 8008d40:	f7f7 fc06 	bl	8000550 <__aeabi_dmul>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4620      	mov	r0, r4
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	f7f7 fa4a 	bl	80001e4 <__adddf3>
 8008d50:	4604      	mov	r4, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	ec45 4b10 	vmov	d0, r4, r5
 8008d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d5c:	2d00      	cmp	r5, #0
 8008d5e:	dc10      	bgt.n	8008d82 <__ieee754_sqrt+0x62>
 8008d60:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008d64:	4330      	orrs	r0, r6
 8008d66:	d0f5      	beq.n	8008d54 <__ieee754_sqrt+0x34>
 8008d68:	b15d      	cbz	r5, 8008d82 <__ieee754_sqrt+0x62>
 8008d6a:	ee10 2a10 	vmov	r2, s0
 8008d6e:	462b      	mov	r3, r5
 8008d70:	ee10 0a10 	vmov	r0, s0
 8008d74:	f7f7 fa34 	bl	80001e0 <__aeabi_dsub>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	f7f7 fd12 	bl	80007a4 <__aeabi_ddiv>
 8008d80:	e7e6      	b.n	8008d50 <__ieee754_sqrt+0x30>
 8008d82:	1509      	asrs	r1, r1, #20
 8008d84:	d076      	beq.n	8008e74 <__ieee754_sqrt+0x154>
 8008d86:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008d8a:	07ce      	lsls	r6, r1, #31
 8008d8c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008d90:	bf5e      	ittt	pl
 8008d92:	0fda      	lsrpl	r2, r3, #31
 8008d94:	005b      	lslpl	r3, r3, #1
 8008d96:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008d9a:	0fda      	lsrs	r2, r3, #31
 8008d9c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008da0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008da4:	2000      	movs	r0, #0
 8008da6:	106d      	asrs	r5, r5, #1
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	f04f 0e16 	mov.w	lr, #22
 8008dae:	4684      	mov	ip, r0
 8008db0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008db4:	eb0c 0401 	add.w	r4, ip, r1
 8008db8:	4294      	cmp	r4, r2
 8008dba:	bfde      	ittt	le
 8008dbc:	1b12      	suble	r2, r2, r4
 8008dbe:	eb04 0c01 	addle.w	ip, r4, r1
 8008dc2:	1840      	addle	r0, r0, r1
 8008dc4:	0052      	lsls	r2, r2, #1
 8008dc6:	f1be 0e01 	subs.w	lr, lr, #1
 8008dca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008dce:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008dd2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008dd6:	d1ed      	bne.n	8008db4 <__ieee754_sqrt+0x94>
 8008dd8:	4671      	mov	r1, lr
 8008dda:	2720      	movs	r7, #32
 8008ddc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008de0:	4562      	cmp	r2, ip
 8008de2:	eb04 060e 	add.w	r6, r4, lr
 8008de6:	dc02      	bgt.n	8008dee <__ieee754_sqrt+0xce>
 8008de8:	d113      	bne.n	8008e12 <__ieee754_sqrt+0xf2>
 8008dea:	429e      	cmp	r6, r3
 8008dec:	d811      	bhi.n	8008e12 <__ieee754_sqrt+0xf2>
 8008dee:	2e00      	cmp	r6, #0
 8008df0:	eb06 0e04 	add.w	lr, r6, r4
 8008df4:	da43      	bge.n	8008e7e <__ieee754_sqrt+0x15e>
 8008df6:	f1be 0f00 	cmp.w	lr, #0
 8008dfa:	db40      	blt.n	8008e7e <__ieee754_sqrt+0x15e>
 8008dfc:	f10c 0801 	add.w	r8, ip, #1
 8008e00:	eba2 020c 	sub.w	r2, r2, ip
 8008e04:	429e      	cmp	r6, r3
 8008e06:	bf88      	it	hi
 8008e08:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008e0c:	1b9b      	subs	r3, r3, r6
 8008e0e:	4421      	add	r1, r4
 8008e10:	46c4      	mov	ip, r8
 8008e12:	0052      	lsls	r2, r2, #1
 8008e14:	3f01      	subs	r7, #1
 8008e16:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008e1a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008e1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008e22:	d1dd      	bne.n	8008de0 <__ieee754_sqrt+0xc0>
 8008e24:	4313      	orrs	r3, r2
 8008e26:	d006      	beq.n	8008e36 <__ieee754_sqrt+0x116>
 8008e28:	1c4c      	adds	r4, r1, #1
 8008e2a:	bf13      	iteet	ne
 8008e2c:	3101      	addne	r1, #1
 8008e2e:	3001      	addeq	r0, #1
 8008e30:	4639      	moveq	r1, r7
 8008e32:	f021 0101 	bicne.w	r1, r1, #1
 8008e36:	1043      	asrs	r3, r0, #1
 8008e38:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008e3c:	0849      	lsrs	r1, r1, #1
 8008e3e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008e42:	07c2      	lsls	r2, r0, #31
 8008e44:	bf48      	it	mi
 8008e46:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008e4a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008e4e:	460c      	mov	r4, r1
 8008e50:	463d      	mov	r5, r7
 8008e52:	e77f      	b.n	8008d54 <__ieee754_sqrt+0x34>
 8008e54:	0ada      	lsrs	r2, r3, #11
 8008e56:	3815      	subs	r0, #21
 8008e58:	055b      	lsls	r3, r3, #21
 8008e5a:	2a00      	cmp	r2, #0
 8008e5c:	d0fa      	beq.n	8008e54 <__ieee754_sqrt+0x134>
 8008e5e:	02d7      	lsls	r7, r2, #11
 8008e60:	d50a      	bpl.n	8008e78 <__ieee754_sqrt+0x158>
 8008e62:	f1c1 0420 	rsb	r4, r1, #32
 8008e66:	fa23 f404 	lsr.w	r4, r3, r4
 8008e6a:	1e4d      	subs	r5, r1, #1
 8008e6c:	408b      	lsls	r3, r1
 8008e6e:	4322      	orrs	r2, r4
 8008e70:	1b41      	subs	r1, r0, r5
 8008e72:	e788      	b.n	8008d86 <__ieee754_sqrt+0x66>
 8008e74:	4608      	mov	r0, r1
 8008e76:	e7f0      	b.n	8008e5a <__ieee754_sqrt+0x13a>
 8008e78:	0052      	lsls	r2, r2, #1
 8008e7a:	3101      	adds	r1, #1
 8008e7c:	e7ef      	b.n	8008e5e <__ieee754_sqrt+0x13e>
 8008e7e:	46e0      	mov	r8, ip
 8008e80:	e7be      	b.n	8008e00 <__ieee754_sqrt+0xe0>
 8008e82:	bf00      	nop
 8008e84:	7ff00000 	.word	0x7ff00000

08008e88 <_init>:
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	bf00      	nop
 8008e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e8e:	bc08      	pop	{r3}
 8008e90:	469e      	mov	lr, r3
 8008e92:	4770      	bx	lr

08008e94 <_fini>:
 8008e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e96:	bf00      	nop
 8008e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e9a:	bc08      	pop	{r3}
 8008e9c:	469e      	mov	lr, r3
 8008e9e:	4770      	bx	lr
