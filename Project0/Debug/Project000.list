
Project000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ba8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08009d40  08009d40  00019d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d78  08009d78  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d78  08009d78  00019d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d80  08009d80  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d80  08009d80  00019d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d84  08009d84  00019d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000090  08009e14  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08009e14  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f64  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  00031020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00033040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  00034058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f71  00000000  00000000  00034fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011caa  00000000  00000000  0004bf51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d9f  00000000  00000000  0005dbfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef99a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a54  00000000  00000000  000ef9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009d28 	.word	0x08009d28

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08009d28 	.word	0x08009d28

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96e 	b.w	80010a0 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468c      	mov	ip, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8083 	bne.w	8000ef2 <__udivmoddi4+0x116>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4617      	mov	r7, r2
 8000df0:	d947      	bls.n	8000e82 <__udivmoddi4+0xa6>
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b142      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	f1c2 0020 	rsb	r0, r2, #32
 8000dfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	ea40 0c01 	orr.w	ip, r0, r1
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fbbc f6f8 	udiv	r6, ip, r8
 8000e14:	fa1f fe87 	uxth.w	lr, r7
 8000e18:	fb08 c116 	mls	r1, r8, r6, ip
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f10e 	mul.w	r1, r6, lr
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x60>
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 8119 	bcs.w	8001064 <__udivmoddi4+0x288>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 8116 	bls.w	8001064 <__udivmoddi4+0x288>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	443b      	add	r3, r7
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x8c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	f080 8105 	bcs.w	8001068 <__udivmoddi4+0x28c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8102 	bls.w	8001068 <__udivmoddi4+0x28c>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6c:	eba4 040e 	sub.w	r4, r4, lr
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa0>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	b902      	cbnz	r2, 8000e86 <__udivmoddi4+0xaa>
 8000e84:	deff      	udf	#255	; 0xff
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d150      	bne.n	8000f30 <__udivmoddi4+0x154>
 8000e8e:	1bcb      	subs	r3, r1, r7
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	2601      	movs	r6, #1
 8000e9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb08 f30c 	mul.w	r3, r8, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0xe4>
 8000eb0:	1879      	adds	r1, r7, r1
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0xe2>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	f200 80e9 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ecc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x10c>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x10a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80d9 	bhi.w	8001098 <__udivmoddi4+0x2bc>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e7bf      	b.n	8000e72 <__udivmoddi4+0x96>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0x12e>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	f000 80b1 	beq.w	800105e <__udivmoddi4+0x282>
 8000efc:	2600      	movs	r6, #0
 8000efe:	e9c5 0100 	strd	r0, r1, [r5]
 8000f02:	4630      	mov	r0, r6
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f683 	clz	r6, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d14a      	bne.n	8000fa8 <__udivmoddi4+0x1cc>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0x140>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80b8 	bhi.w	800108c <__udivmoddi4+0x2b0>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d0a8      	beq.n	8000e7c <__udivmoddi4+0xa0>
 8000f2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0xa0>
 8000f30:	f1c2 0320 	rsb	r3, r2, #32
 8000f34:	fa20 f603 	lsr.w	r6, r0, r3
 8000f38:	4097      	lsls	r7, r2
 8000f3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	4330      	orrs	r0, r6
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f4c:	fa1f f887 	uxth.w	r8, r7
 8000f50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f58:	fb06 f108 	mul.w	r1, r6, r8
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x19c>
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f6a:	f080 808d 	bcs.w	8001088 <__udivmoddi4+0x2ac>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	f240 808a 	bls.w	8001088 <__udivmoddi4+0x2ac>
 8000f74:	3e02      	subs	r6, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	b281      	uxth	r1, r0
 8000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb00 f308 	mul.w	r3, r0, r8
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d907      	bls.n	8000fa0 <__udivmoddi4+0x1c4>
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f96:	d273      	bcs.n	8001080 <__udivmoddi4+0x2a4>
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d971      	bls.n	8001080 <__udivmoddi4+0x2a4>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4439      	add	r1, r7
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa6:	e778      	b.n	8000e9a <__udivmoddi4+0xbe>
 8000fa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000fac:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fba:	fa01 f306 	lsl.w	r3, r1, r6
 8000fbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	0c3b      	lsrs	r3, r7, #16
 8000fca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fce:	fa1f f884 	uxth.w	r8, r4
 8000fd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fda:	fb09 fa08 	mul.w	sl, r9, r8
 8000fde:	458a      	cmp	sl, r1
 8000fe0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x220>
 8000fea:	1861      	adds	r1, r4, r1
 8000fec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff0:	d248      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8000ff2:	458a      	cmp	sl, r1
 8000ff4:	d946      	bls.n	8001084 <__udivmoddi4+0x2a8>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4421      	add	r1, r4
 8000ffc:	eba1 010a 	sub.w	r1, r1, sl
 8001000:	b2bf      	uxth	r7, r7
 8001002:	fbb1 f0fe 	udiv	r0, r1, lr
 8001006:	fb0e 1110 	mls	r1, lr, r0, r1
 800100a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100e:	fb00 f808 	mul.w	r8, r0, r8
 8001012:	45b8      	cmp	r8, r7
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x24a>
 8001016:	19e7      	adds	r7, r4, r7
 8001018:	f100 31ff 	add.w	r1, r0, #4294967295
 800101c:	d22e      	bcs.n	800107c <__udivmoddi4+0x2a0>
 800101e:	45b8      	cmp	r8, r7
 8001020:	d92c      	bls.n	800107c <__udivmoddi4+0x2a0>
 8001022:	3802      	subs	r0, #2
 8001024:	4427      	add	r7, r4
 8001026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102a:	eba7 0708 	sub.w	r7, r7, r8
 800102e:	fba0 8902 	umull	r8, r9, r0, r2
 8001032:	454f      	cmp	r7, r9
 8001034:	46c6      	mov	lr, r8
 8001036:	4649      	mov	r1, r9
 8001038:	d31a      	bcc.n	8001070 <__udivmoddi4+0x294>
 800103a:	d017      	beq.n	800106c <__udivmoddi4+0x290>
 800103c:	b15d      	cbz	r5, 8001056 <__udivmoddi4+0x27a>
 800103e:	ebb3 020e 	subs.w	r2, r3, lr
 8001042:	eb67 0701 	sbc.w	r7, r7, r1
 8001046:	fa07 fc0c 	lsl.w	ip, r7, ip
 800104a:	40f2      	lsrs	r2, r6
 800104c:	ea4c 0202 	orr.w	r2, ip, r2
 8001050:	40f7      	lsrs	r7, r6
 8001052:	e9c5 2700 	strd	r2, r7, [r5]
 8001056:	2600      	movs	r6, #0
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	462e      	mov	r6, r5
 8001060:	4628      	mov	r0, r5
 8001062:	e70b      	b.n	8000e7c <__udivmoddi4+0xa0>
 8001064:	4606      	mov	r6, r0
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0x60>
 8001068:	4618      	mov	r0, r3
 800106a:	e6fd      	b.n	8000e68 <__udivmoddi4+0x8c>
 800106c:	4543      	cmp	r3, r8
 800106e:	d2e5      	bcs.n	800103c <__udivmoddi4+0x260>
 8001070:	ebb8 0e02 	subs.w	lr, r8, r2
 8001074:	eb69 0104 	sbc.w	r1, r9, r4
 8001078:	3801      	subs	r0, #1
 800107a:	e7df      	b.n	800103c <__udivmoddi4+0x260>
 800107c:	4608      	mov	r0, r1
 800107e:	e7d2      	b.n	8001026 <__udivmoddi4+0x24a>
 8001080:	4660      	mov	r0, ip
 8001082:	e78d      	b.n	8000fa0 <__udivmoddi4+0x1c4>
 8001084:	4681      	mov	r9, r0
 8001086:	e7b9      	b.n	8000ffc <__udivmoddi4+0x220>
 8001088:	4666      	mov	r6, ip
 800108a:	e775      	b.n	8000f78 <__udivmoddi4+0x19c>
 800108c:	4630      	mov	r0, r6
 800108e:	e74a      	b.n	8000f26 <__udivmoddi4+0x14a>
 8001090:	f1ac 0c02 	sub.w	ip, ip, #2
 8001094:	4439      	add	r1, r7
 8001096:	e713      	b.n	8000ec0 <__udivmoddi4+0xe4>
 8001098:	3802      	subs	r0, #2
 800109a:	443c      	add	r4, r7
 800109c:	e724      	b.n	8000ee8 <__udivmoddi4+0x10c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	0000      	movs	r0, r0
	...

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f003 f984 	bl	80043bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 f9fc 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 fbfe 	bl	80018b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010bc:	f000 fbd4 	bl	8001868 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010c0:	f000 fba6 	bl	8001810 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010c4:	f000 fa8a 	bl	80015dc <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c8:	f000 fae0 	bl	800168c <MX_TIM2_Init>
  MX_TIM3_Init();
 80010cc:	f000 fb2a 	bl	8001724 <MX_TIM3_Init>
  MX_I2C1_Init();
 80010d0:	f000 fa56 	bl	8001580 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010d4:	48a4      	ldr	r0, [pc, #656]	; (8001368 <main+0x2c0>)
 80010d6:	f006 fc91 	bl	80079fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010da:	213c      	movs	r1, #60	; 0x3c
 80010dc:	48a3      	ldr	r0, [pc, #652]	; (800136c <main+0x2c4>)
 80010de:	f006 fe9f 	bl	8007e20 <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010e2:	48a3      	ldr	r0, [pc, #652]	; (8001370 <main+0x2c8>)
 80010e4:	f006 fc30 	bl	8007948 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	48a1      	ldr	r0, [pc, #644]	; (8001370 <main+0x2c8>)
 80010ec:	f006 fd42 	bl	8007b74 <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010f0:	48a0      	ldr	r0, [pc, #640]	; (8001374 <main+0x2cc>)
 80010f2:	f000 fde9 	bl	8001cc8 <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010f6:	499f      	ldr	r1, [pc, #636]	; (8001374 <main+0x2cc>)
 80010f8:	489f      	ldr	r0, [pc, #636]	; (8001378 <main+0x2d0>)
 80010fa:	f000 fdfd 	bl	8001cf8 <TrajectoryGenerationStructureInit>

  VelocityControllerInit(&VelocityPIDController, &TrjStruc);
 80010fe:	499e      	ldr	r1, [pc, #632]	; (8001378 <main+0x2d0>)
 8001100:	489e      	ldr	r0, [pc, #632]	; (800137c <main+0x2d4>)
 8001102:	f000 fe9d 	bl	8001e40 <VelocityControllerInit>
  DisplacementControllerInit(&PositionPIDController, &TrjStruc);
 8001106:	499c      	ldr	r1, [pc, #624]	; (8001378 <main+0x2d0>)
 8001108:	489d      	ldr	r0, [pc, #628]	; (8001380 <main+0x2d8>)
 800110a:	f000 fecd 	bl	8001ea8 <DisplacementControllerInit>

  htim1.Instance->CNT = CUSSStruc.PPRxQEI;
 800110e:	4b97      	ldr	r3, [pc, #604]	; (800136c <main+0x2c4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a98      	ldr	r2, [pc, #608]	; (8001374 <main+0x2cc>)
 8001114:	6852      	ldr	r2, [r2, #4]
 8001116:	625a      	str	r2, [r3, #36]	; 0x24

  ///UART init
  UART2.huart = &huart2;
 8001118:	4b9a      	ldr	r3, [pc, #616]	; (8001384 <main+0x2dc>)
 800111a:	4a9b      	ldr	r2, [pc, #620]	; (8001388 <main+0x2e0>)
 800111c:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 800111e:	4b99      	ldr	r3, [pc, #612]	; (8001384 <main+0x2dc>)
 8001120:	22ff      	movs	r2, #255	; 0xff
 8001122:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8001124:	4b97      	ldr	r3, [pc, #604]	; (8001384 <main+0x2dc>)
 8001126:	22ff      	movs	r2, #255	; 0xff
 8001128:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 800112a:	4896      	ldr	r0, [pc, #600]	; (8001384 <main+0x2dc>)
 800112c:	f001 feae 	bl	8002e8c <UARTInit>
  UARTResetStart(&UART2);
 8001130:	4894      	ldr	r0, [pc, #592]	; (8001384 <main+0x2dc>)
 8001132:	f001 fed3 	bl	8002edc <UARTResetStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 8001136:	4893      	ldr	r0, [pc, #588]	; (8001384 <main+0x2dc>)
 8001138:	f001 fef4 	bl	8002f24 <UARTReadChar>
 800113c:	4603      	mov	r3, r0
 800113e:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 8001140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <main+0xae>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	498d      	ldr	r1, [pc, #564]	; (8001384 <main+0x2dc>)
 8001150:	4618      	mov	r0, r3
 8001152:	f001 ffcd 	bl	80030f0 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 8001156:	4b8d      	ldr	r3, [pc, #564]	; (800138c <main+0x2e4>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b06      	cmp	r3, #6
 800115c:	f200 8177 	bhi.w	800144e <main+0x3a6>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <main+0xc0>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001185 	.word	0x08001185
 800116c:	080011a9 	.word	0x080011a9
 8001170:	080011b5 	.word	0x080011b5
 8001174:	080011c5 	.word	0x080011c5
 8001178:	080011db 	.word	0x080011db
 800117c:	080013ad 	.word	0x080013ad
 8001180:	0800143f 	.word	0x0800143f
	  {
	  	  case STATE_Disconnected:
	  		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0)
 8001184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001188:	4881      	ldr	r0, [pc, #516]	; (8001390 <main+0x2e8>)
 800118a:	f004 f82f 	bl	80051ec <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d103      	bne.n	800119c <main+0xf4>
	  		  {
	  			  LAMP_ON(0);
 8001194:	2000      	movs	r0, #0
 8001196:	f002 fc4b 	bl	8003a30 <LAMP_ON>
 800119a:	e002      	b.n	80011a2 <main+0xfa>
	  		  }
	  		  else
	  		  {
	  			  LAMP_ON(4);
 800119c:	2004      	movs	r0, #4
 800119e:	f002 fc47 	bl	8003a30 <LAMP_ON>
	  		  }
	  		  Emergency_switch_trigger();
 80011a2:	f002 fcb5 	bl	8003b10 <Emergency_switch_trigger>
	  		  break;
 80011a6:	e152      	b.n	800144e <main+0x3a6>

	  	  case STATE_Idle:
	  		  LAMP_ON(1);
 80011a8:	2001      	movs	r0, #1
 80011aa:	f002 fc41 	bl	8003a30 <LAMP_ON>
	  		  Emergency_switch_trigger();
 80011ae:	f002 fcaf 	bl	8003b10 <Emergency_switch_trigger>
		  	  break;
 80011b2:	e14c      	b.n	800144e <main+0x3a6>

	  	  case STATE_PrepareDATA:
	  		  LAMP_ON(2);
 80011b4:	2002      	movs	r0, #2
 80011b6:	f002 fc3b 	bl	8003a30 <LAMP_ON>
	  		  TrajectoryGenerationPrepareDATA();
 80011ba:	f000 fee1 	bl	8001f80 <TrajectoryGenerationPrepareDATA>
	  		  Emergency_switch_trigger();
 80011be:	f002 fca7 	bl	8003b10 <Emergency_switch_trigger>
		  	  break;
 80011c2:	e144      	b.n	800144e <main+0x3a6>

	  	  case STATE_Calculation:
	  		  LAMP_ON(2);
 80011c4:	2002      	movs	r0, #2
 80011c6:	f002 fc33 	bl	8003a30 <LAMP_ON>
	  		  TrajectoryGenerationCalculation();
 80011ca:	f001 f835 	bl	8002238 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 80011ce:	4b6f      	ldr	r3, [pc, #444]	; (800138c <main+0x2e4>)
 80011d0:	2204      	movs	r2, #4
 80011d2:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 80011d4:	f002 fc9c 	bl	8003b10 <Emergency_switch_trigger>
	  		  break;
 80011d8:	e139      	b.n	800144e <main+0x3a6>

	   	  case STATE_Link_Moving:
	   		  LAMP_ON(2);
 80011da:	2002      	movs	r0, #2
 80011dc:	f002 fc28 	bl	8003a30 <LAMP_ON>
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 80011e0:	f000 fd58 	bl	8001c94 <micros>
 80011e4:	4b64      	ldr	r3, [pc, #400]	; (8001378 <main+0x2d0>)
 80011e6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80011ea:	1a84      	subs	r4, r0, r2
 80011ec:	eb61 0503 	sbc.w	r5, r1, r3
 80011f0:	4b61      	ldr	r3, [pc, #388]	; (8001378 <main+0x2d0>)
 80011f2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80011f6:	429d      	cmp	r5, r3
 80011f8:	bf08      	it	eq
 80011fa:	4294      	cmpeq	r4, r2
 80011fc:	f0c0 80b1 	bcc.w	8001362 <main+0x2ba>
	   		  {
	   			  Controlling_the_LINK();
 8001200:	f002 fce0 	bl	8003bc4 <Controlling_the_LINK>

	   			  ///////////////////////////////////////////////////////////////////
//	   			  PositionPIDController.OutputFeedback = TrjStruc.AngularDisplacementDesire;
	   			  ///////////////////////////////////////////////////////////////////
	   			  if (PIDTunerMode == 0)
 8001204:	4b63      	ldr	r3, [pc, #396]	; (8001394 <main+0x2ec>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d169      	bne.n	80012e0 <main+0x238>
	   			  {
					  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 800120c:	4b5c      	ldr	r3, [pc, #368]	; (8001380 <main+0x2d8>)
 800120e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001212:	4b59      	ldr	r3, [pc, #356]	; (8001378 <main+0x2d0>)
 8001214:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001218:	4b5f      	ldr	r3, [pc, #380]	; (8001398 <main+0x2f0>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001228:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	f200 8097 	bhi.w	8001362 <main+0x2ba>
							  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8001234:	4b52      	ldr	r3, [pc, #328]	; (8001380 <main+0x2d8>)
 8001236:	ed93 7a07 	vldr	s14, [r3, #28]
 800123a:	4b4f      	ldr	r3, [pc, #316]	; (8001378 <main+0x2d0>)
 800123c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001240:	4b55      	ldr	r3, [pc, #340]	; (8001398 <main+0x2f0>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124c:	ee76 7ae7 	vsub.f32	s15, s13, s15
					  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8001250:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001258:	f2c0 8083 	blt.w	8001362 <main+0x2ba>
							  (Moving_Link_Task_Flag == 1))
 800125c:	4b4f      	ldr	r3, [pc, #316]	; (800139c <main+0x2f4>)
 800125e:	781b      	ldrb	r3, [r3, #0]
							  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8001260:	2b01      	cmp	r3, #1
 8001262:	d17e      	bne.n	8001362 <main+0x2ba>
					  {
						  if(MovingLinkMode == LMM_Set_Pos_Directly)
 8001264:	4b4e      	ldr	r3, [pc, #312]	; (80013a0 <main+0x2f8>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d111      	bne.n	8001290 <main+0x1e8>
						  {
							Munmunbot_State = STATE_Idle;
 800126c:	4b47      	ldr	r3, [pc, #284]	; (800138c <main+0x2e4>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Not_Set;
 8001272:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <main+0x2f8>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
							TrjStruc.Start_Theta =  PositionPIDController.OutputFeedback;
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <main+0x2d8>)
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	4a3e      	ldr	r2, [pc, #248]	; (8001378 <main+0x2d0>)
 800127e:	66d3      	str	r3, [r2, #108]	; 0x6c
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001280:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <main+0x2c8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2200      	movs	r2, #0
 8001286:	635a      	str	r2, [r3, #52]	; 0x34
							ACK2Return(&UART2);
 8001288:	483e      	ldr	r0, [pc, #248]	; (8001384 <main+0x2dc>)
 800128a:	f001 ff1f 	bl	80030cc <ACK2Return>
 800128e:	e011      	b.n	80012b4 <main+0x20c>
						  }

						  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 8001290:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <main+0x2f8>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d003      	beq.n	80012a0 <main+0x1f8>
 8001298:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <main+0x2f8>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d109      	bne.n	80012b4 <main+0x20c>
						  {
							Munmunbot_State = STATE_End_Effector_Working;
 80012a0:	4b3a      	ldr	r3, [pc, #232]	; (800138c <main+0x2e4>)
 80012a2:	2205      	movs	r2, #5
 80012a4:	701a      	strb	r2, [r3, #0]
							GripperState = 0;
 80012a6:	4b3f      	ldr	r3, [pc, #252]	; (80013a4 <main+0x2fc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80012ac:	4b30      	ldr	r3, [pc, #192]	; (8001370 <main+0x2c8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2200      	movs	r2, #0
 80012b2:	635a      	str	r2, [r3, #52]	; 0x34
						  }
						 TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 80012b4:	4b32      	ldr	r3, [pc, #200]	; (8001380 <main+0x2d8>)
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <main+0x2d0>)
 80012ba:	66d3      	str	r3, [r2, #108]	; 0x6c
						 TrjStruc.AngularVelocityDesire = 0;
 80012bc:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <main+0x2d0>)
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
						 VelocityPIDController.OutputFeedback = 0;
 80012c4:	4b2d      	ldr	r3, [pc, #180]	; (800137c <main+0x2d4>)
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
						 EstimatedAngularAcceration = 0;
 80012cc:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <main+0x300>)
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
						 Moving_Link_Task_Flag = 0;
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <main+0x2f4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
						 PID_Reset();
 80012da:	f002 fb4f 	bl	800397c <PID_Reset>
 80012de:	e040      	b.n	8001362 <main+0x2ba>
					  }
	   			  }
	   			  else
	   			  {
					  if (Moving_Link_Task_Flag == 1)
 80012e0:	4b2e      	ldr	r3, [pc, #184]	; (800139c <main+0x2f4>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d13c      	bne.n	8001362 <main+0x2ba>
					  {
						  if(MovingLinkMode == LMM_Set_Pos_Directly)
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <main+0x2f8>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d111      	bne.n	8001314 <main+0x26c>
						  {
							Munmunbot_State = STATE_Idle;
 80012f0:	4b26      	ldr	r3, [pc, #152]	; (800138c <main+0x2e4>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Not_Set;
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <main+0x2f8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
							TrjStruc.Start_Theta =  PositionPIDController.OutputFeedback;
 80012fc:	4b20      	ldr	r3, [pc, #128]	; (8001380 <main+0x2d8>)
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <main+0x2d0>)
 8001302:	66d3      	str	r3, [r2, #108]	; 0x6c
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <main+0x2c8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2200      	movs	r2, #0
 800130a:	635a      	str	r2, [r3, #52]	; 0x34
							ACK2Return(&UART2);
 800130c:	481d      	ldr	r0, [pc, #116]	; (8001384 <main+0x2dc>)
 800130e:	f001 fedd 	bl	80030cc <ACK2Return>
 8001312:	e011      	b.n	8001338 <main+0x290>
						  }

						  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <main+0x2f8>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d003      	beq.n	8001324 <main+0x27c>
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <main+0x2f8>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d109      	bne.n	8001338 <main+0x290>
						  {
							Munmunbot_State = STATE_End_Effector_Working;
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <main+0x2e4>)
 8001326:	2205      	movs	r2, #5
 8001328:	701a      	strb	r2, [r3, #0]
							GripperState = 0;
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <main+0x2fc>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <main+0x2c8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2200      	movs	r2, #0
 8001336:	635a      	str	r2, [r3, #52]	; 0x34
						  }
						 TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <main+0x2d8>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <main+0x2d0>)
 800133e:	66d3      	str	r3, [r2, #108]	; 0x6c
						 TrjStruc.AngularVelocityDesire = 0;
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <main+0x2d0>)
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
						 VelocityPIDController.OutputFeedback = 0;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <main+0x2d4>)
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	61da      	str	r2, [r3, #28]
						 EstimatedAngularAcceration = 0;
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <main+0x300>)
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
						 Moving_Link_Task_Flag = 0;
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <main+0x2f4>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
						 PID_Reset();
 800135e:	f002 fb0d 	bl	800397c <PID_Reset>
					  }
	   			  }
	   		  }
	  		  Emergency_switch_trigger();
 8001362:	f002 fbd5 	bl	8003b10 <Emergency_switch_trigger>
	  		  break;
 8001366:	e072      	b.n	800144e <main+0x3a6>
 8001368:	200004fc 	.word	0x200004fc
 800136c:	200004b4 	.word	0x200004b4
 8001370:	2000040c 	.word	0x2000040c
 8001374:	20000208 	.word	0x20000208
 8001378:	20000178 	.word	0x20000178
 800137c:	20000140 	.word	0x20000140
 8001380:	20000108 	.word	0x20000108
 8001384:	200000b8 	.word	0x200000b8
 8001388:	20000544 	.word	0x20000544
 800138c:	200000d9 	.word	0x200000d9
 8001390:	40020400 	.word	0x40020400
 8001394:	20000214 	.word	0x20000214
 8001398:	20000014 	.word	0x20000014
 800139c:	200000f8 	.word	0x200000f8
 80013a0:	200000ee 	.word	0x200000ee
 80013a4:	200000fa 	.word	0x200000fa
 80013a8:	20000218 	.word	0x20000218

	  	  case STATE_End_Effector_Working:
	  		  LAMP_ON(3);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f002 fb3f 	bl	8003a30 <LAMP_ON>
	  		  ///I2C implement
	  		  if(GripperEnable == 1)
 80013b2:	4b35      	ldr	r3, [pc, #212]	; (8001488 <main+0x3e0>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d137      	bne.n	800142a <main+0x382>
	  		  {
	  			if ((hi2c1.State == HAL_I2C_STATE_READY) && (GripperState == 0))
 80013ba:	4b34      	ldr	r3, [pc, #208]	; (800148c <main+0x3e4>)
 80013bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	d116      	bne.n	80013f4 <main+0x34c>
 80013c6:	4b32      	ldr	r3, [pc, #200]	; (8001490 <main+0x3e8>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d112      	bne.n	80013f4 <main+0x34c>
	  			{
	  				{
	  					uint8_t temp[1] = {0x45};
 80013ce:	2345      	movs	r3, #69	; 0x45
 80013d0:	713b      	strb	r3, [r7, #4]
	  					HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 80013d2:	1d3a      	adds	r2, r7, #4
 80013d4:	2301      	movs	r3, #1
 80013d6:	2146      	movs	r1, #70	; 0x46
 80013d8:	482c      	ldr	r0, [pc, #176]	; (800148c <main+0x3e4>)
 80013da:	f004 f895 	bl	8005508 <HAL_I2C_Master_Transmit_IT>
	  				}
	  				GripperState = 1;
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <main+0x3e8>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
	  				Timestamp_Gripper = micros();
 80013e4:	f000 fc56 	bl	8001c94 <micros>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4929      	ldr	r1, [pc, #164]	; (8001494 <main+0x3ec>)
 80013ee:	e9c1 2300 	strd	r2, r3, [r1]
 80013f2:	e021      	b.n	8001438 <main+0x390>
	  			}
	  			else if ((micros() - Timestamp_Gripper >= 5100000) && (GripperState == 1))
 80013f4:	f000 fc4e 	bl	8001c94 <micros>
 80013f8:	4b26      	ldr	r3, [pc, #152]	; (8001494 <main+0x3ec>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	ebb0 0802 	subs.w	r8, r0, r2
 8001402:	eb61 0903 	sbc.w	r9, r1, r3
 8001406:	a31e      	add	r3, pc, #120	; (adr r3, 8001480 <main+0x3d8>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	454b      	cmp	r3, r9
 800140e:	bf08      	it	eq
 8001410:	4542      	cmpeq	r2, r8
 8001412:	d211      	bcs.n	8001438 <main+0x390>
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <main+0x3e8>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d10d      	bne.n	8001438 <main+0x390>
	  			{
	  				GripperState = 0;
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <main+0x3e8>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
	  				Munmunbot_State = STATE_PrepareDATA;
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <main+0x3f0>)
 8001424:	2202      	movs	r2, #2
 8001426:	701a      	strb	r2, [r3, #0]
 8001428:	e006      	b.n	8001438 <main+0x390>
	  			}
	  		  }
	  		  else if(GripperEnable == 0)
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <main+0x3e0>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <main+0x390>
			  {
		  		 Munmunbot_State = STATE_PrepareDATA;
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <main+0x3f0>)
 8001434:	2202      	movs	r2, #2
 8001436:	701a      	strb	r2, [r3, #0]
			  }
	  		  Emergency_switch_trigger();
 8001438:	f002 fb6a 	bl	8003b10 <Emergency_switch_trigger>
	  		  break;
 800143c:	e007      	b.n	800144e <main+0x3a6>

	  	  case STATE_SetHome:
	  		  LAMP_ON(2);
 800143e:	2002      	movs	r0, #2
 8001440:	f002 faf6 	bl	8003a30 <LAMP_ON>
	  		  SETHOME_StateMachine_Function();
 8001444:	f002 fc26 	bl	8003c94 <SETHOME_StateMachine_Function>
	  		  Emergency_switch_trigger();
 8001448:	f002 fb62 	bl	8003b10 <Emergency_switch_trigger>
	  		  break;
 800144c:	bf00      	nop

	  }

	  if ( pidSetZeroFlag != 0 )
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <main+0x3f4>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d010      	beq.n	8001478 <main+0x3d0>
	  {
		  pidSetZeroFlag = 0;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <main+0x3f4>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <main+0x3f8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2200      	movs	r2, #0
 8001462:	635a      	str	r2, [r3, #52]	; 0x34
		  TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <main+0x3fc>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <main+0x400>)
 800146a:	66d3      	str	r3, [r2, #108]	; 0x6c
		  TrjStruc.AngularVelocityDesire = 0;
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <main+0x400>)
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
		  PID_Reset();
 8001474:	f002 fa82 	bl	800397c <PID_Reset>
	  }



	  UARTTxDumpBuffer(&UART2);
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <main+0x404>)
 800147a:	f001 fd7d 	bl	8002f78 <UARTTxDumpBuffer>
  {
 800147e:	e65a      	b.n	8001136 <main+0x8e>
 8001480:	004dd1df 	.word	0x004dd1df
 8001484:	00000000 	.word	0x00000000
 8001488:	200000f9 	.word	0x200000f9
 800148c:	200003b8 	.word	0x200003b8
 8001490:	200000fa 	.word	0x200000fa
 8001494:	20000100 	.word	0x20000100
 8001498:	200000d9 	.word	0x200000d9
 800149c:	200000ac 	.word	0x200000ac
 80014a0:	2000040c 	.word	0x2000040c
 80014a4:	20000108 	.word	0x20000108
 80014a8:	20000178 	.word	0x20000178
 80014ac:	200000b8 	.word	0x200000b8

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	; 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	2230      	movs	r2, #48	; 0x30
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f008 faba 	bl	8009a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <SystemClock_Config+0xc8>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	4a26      	ldr	r2, [pc, #152]	; (8001578 <SystemClock_Config+0xc8>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	; 0x40
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <SystemClock_Config+0xc8>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <SystemClock_Config+0xcc>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a20      	ldr	r2, [pc, #128]	; (800157c <SystemClock_Config+0xcc>)
 80014fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <SystemClock_Config+0xcc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800150c:	2302      	movs	r3, #2
 800150e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001510:	2301      	movs	r3, #1
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001514:	2310      	movs	r3, #16
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001518:	2302      	movs	r3, #2
 800151a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800151c:	2300      	movs	r3, #0
 800151e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001520:	2308      	movs	r3, #8
 8001522:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001524:	2364      	movs	r3, #100	; 0x64
 8001526:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001528:	2302      	movs	r3, #2
 800152a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800152c:	2304      	movs	r3, #4
 800152e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	4618      	mov	r0, r3
 8001536:	f005 fd43 	bl	8006fc0 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001540:	f002 fc52 	bl	8003de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001544:	230f      	movs	r3, #15
 8001546:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001548:	2302      	movs	r3, #2
 800154a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001554:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	2103      	movs	r1, #3
 8001560:	4618      	mov	r0, r3
 8001562:	f005 ffa5 	bl	80074b0 <HAL_RCC_ClockConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800156c:	f002 fc3c 	bl	8003de8 <Error_Handler>
  }
}
 8001570:	bf00      	nop
 8001572:	3750      	adds	r7, #80	; 0x50
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	40007000 	.word	0x40007000

08001580 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_I2C1_Init+0x54>)
 8001586:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <MX_I2C1_Init+0x58>)
 8001588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_I2C1_Init+0x54>)
 800158c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001590:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_I2C1_Init+0x54>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_I2C1_Init+0x54>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_I2C1_Init+0x54>)
 80015a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_I2C1_Init+0x54>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_I2C1_Init+0x54>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_I2C1_Init+0x54>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_I2C1_Init+0x54>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_I2C1_Init+0x54>)
 80015c0:	f003 fe5e 	bl	8005280 <HAL_I2C_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80015ca:	f002 fc0d 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200003b8 	.word	0x200003b8
 80015d8:	40005400 	.word	0x40005400

080015dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	; 0x30
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	2224      	movs	r2, #36	; 0x24
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f008 fa24 	bl	8009a38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015f8:	4b22      	ldr	r3, [pc, #136]	; (8001684 <MX_TIM1_Init+0xa8>)
 80015fa:	4a23      	ldr	r2, [pc, #140]	; (8001688 <MX_TIM1_Init+0xac>)
 80015fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <MX_TIM1_Init+0xa8>)
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <MX_TIM1_Init+0xa8>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24575;
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_TIM1_Init+0xa8>)
 800160c:	f645 72ff 	movw	r2, #24575	; 0x5fff
 8001610:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <MX_TIM1_Init+0xa8>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_TIM1_Init+0xa8>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_TIM1_Init+0xa8>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001624:	2303      	movs	r3, #3
 8001626:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800162c:	2301      	movs	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001634:	2302      	movs	r3, #2
 8001636:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800163c:	2301      	movs	r3, #1
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4619      	mov	r1, r3
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <MX_TIM1_Init+0xa8>)
 8001650:	f006 fb40 	bl	8007cd4 <HAL_TIM_Encoder_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800165a:	f002 fbc5 	bl	8003de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_TIM1_Init+0xa8>)
 800166c:	f007 f9e4 	bl	8008a38 <HAL_TIMEx_MasterConfigSynchronization>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001676:	f002 fbb7 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3730      	adds	r7, #48	; 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200004b4 	.word	0x200004b4
 8001688:	40010000 	.word	0x40010000

0800168c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	463b      	mov	r3, r7
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <MX_TIM2_Init+0x94>)
 80016aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <MX_TIM2_Init+0x94>)
 80016b2:	2263      	movs	r2, #99	; 0x63
 80016b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <MX_TIM2_Init+0x94>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_TIM2_Init+0x94>)
 80016be:	f04f 32ff 	mov.w	r2, #4294967295
 80016c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <MX_TIM2_Init+0x94>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_TIM2_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016d0:	4813      	ldr	r0, [pc, #76]	; (8001720 <MX_TIM2_Init+0x94>)
 80016d2:	f006 f8e9 	bl	80078a8 <HAL_TIM_Base_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016dc:	f002 fb84 	bl	8003de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4619      	mov	r1, r3
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <MX_TIM2_Init+0x94>)
 80016ee:	f006 fdeb 	bl	80082c8 <HAL_TIM_ConfigClockSource>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016f8:	f002 fb76 	bl	8003de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001704:	463b      	mov	r3, r7
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_TIM2_Init+0x94>)
 800170a:	f007 f995 	bl	8008a38 <HAL_TIMEx_MasterConfigSynchronization>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001714:	f002 fb68 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200004fc 	.word	0x200004fc

08001724 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	; 0x38
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001754:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <MX_TIM3_Init+0xe4>)
 8001756:	4a2d      	ldr	r2, [pc, #180]	; (800180c <MX_TIM3_Init+0xe8>)
 8001758:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800175a:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <MX_TIM3_Init+0xe4>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <MX_TIM3_Init+0xe4>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <MX_TIM3_Init+0xe4>)
 8001768:	f242 7210 	movw	r2, #10000	; 0x2710
 800176c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <MX_TIM3_Init+0xe4>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <MX_TIM3_Init+0xe4>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800177a:	4823      	ldr	r0, [pc, #140]	; (8001808 <MX_TIM3_Init+0xe4>)
 800177c:	f006 f894 	bl	80078a8 <HAL_TIM_Base_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001786:	f002 fb2f 	bl	8003de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001794:	4619      	mov	r1, r3
 8001796:	481c      	ldr	r0, [pc, #112]	; (8001808 <MX_TIM3_Init+0xe4>)
 8001798:	f006 fd96 	bl	80082c8 <HAL_TIM_ConfigClockSource>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80017a2:	f002 fb21 	bl	8003de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017a6:	4818      	ldr	r0, [pc, #96]	; (8001808 <MX_TIM3_Init+0xe4>)
 80017a8:	f006 f98a 	bl	8007ac0 <HAL_TIM_PWM_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80017b2:	f002 fb19 	bl	8003de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	4619      	mov	r1, r3
 80017c4:	4810      	ldr	r0, [pc, #64]	; (8001808 <MX_TIM3_Init+0xe4>)
 80017c6:	f007 f937 	bl	8008a38 <HAL_TIMEx_MasterConfigSynchronization>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017d0:	f002 fb0a 	bl	8003de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d4:	2360      	movs	r3, #96	; 0x60
 80017d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2200      	movs	r2, #0
 80017e8:	4619      	mov	r1, r3
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <MX_TIM3_Init+0xe4>)
 80017ec:	f006 fcae 	bl	800814c <HAL_TIM_PWM_ConfigChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80017f6:	f002 faf7 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017fa:	4803      	ldr	r0, [pc, #12]	; (8001808 <MX_TIM3_Init+0xe4>)
 80017fc:	f002 fbfe 	bl	8003ffc <HAL_TIM_MspPostInit>

}
 8001800:	bf00      	nop
 8001802:	3738      	adds	r7, #56	; 0x38
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000040c 	.word	0x2000040c
 800180c:	40000400 	.word	0x40000400

08001810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_USART2_UART_Init+0x50>)
 8001816:	4a13      	ldr	r2, [pc, #76]	; (8001864 <MX_USART2_UART_Init+0x54>)
 8001818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_USART2_UART_Init+0x50>)
 800181c:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_USART2_UART_Init+0x50>)
 8001824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001828:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <MX_USART2_UART_Init+0x50>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_USART2_UART_Init+0x50>)
 8001832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_USART2_UART_Init+0x50>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_USART2_UART_Init+0x50>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_USART2_UART_Init+0x50>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_USART2_UART_Init+0x50>)
 800184c:	f007 f976 	bl	8008b3c <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001856:	f002 fac7 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000544 	.word	0x20000544
 8001864:	40004400 	.word	0x40004400

08001868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_DMA_Init+0x4c>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <MX_DMA_Init+0x4c>)
 8001878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <MX_DMA_Init+0x4c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	2010      	movs	r0, #16
 8001890:	f002 fee1 	bl	8004656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001894:	2010      	movs	r0, #16
 8001896:	f002 fefa 	bl	800468e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	2011      	movs	r0, #17
 80018a0:	f002 fed9 	bl	8004656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80018a4:	2011      	movs	r0, #17
 80018a6:	f002 fef2 	bl	800468e <HAL_NVIC_EnableIRQ>

}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800

080018b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b5f      	ldr	r3, [pc, #380]	; (8001a50 <MX_GPIO_Init+0x198>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a5e      	ldr	r2, [pc, #376]	; (8001a50 <MX_GPIO_Init+0x198>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b5c      	ldr	r3, [pc, #368]	; (8001a50 <MX_GPIO_Init+0x198>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b58      	ldr	r3, [pc, #352]	; (8001a50 <MX_GPIO_Init+0x198>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a57      	ldr	r2, [pc, #348]	; (8001a50 <MX_GPIO_Init+0x198>)
 80018f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b55      	ldr	r3, [pc, #340]	; (8001a50 <MX_GPIO_Init+0x198>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b51      	ldr	r3, [pc, #324]	; (8001a50 <MX_GPIO_Init+0x198>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a50      	ldr	r2, [pc, #320]	; (8001a50 <MX_GPIO_Init+0x198>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b4e      	ldr	r3, [pc, #312]	; (8001a50 <MX_GPIO_Init+0x198>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <MX_GPIO_Init+0x198>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a49      	ldr	r2, [pc, #292]	; (8001a50 <MX_GPIO_Init+0x198>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <MX_GPIO_Init+0x198>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	2120      	movs	r1, #32
 8001942:	4844      	ldr	r0, [pc, #272]	; (8001a54 <MX_GPIO_Init+0x19c>)
 8001944:	f003 fc6a 	bl	800521c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lamp1_Pin|Lamp2_Pin, GPIO_PIN_SET);
 8001948:	2201      	movs	r2, #1
 800194a:	2106      	movs	r1, #6
 800194c:	4842      	ldr	r0, [pc, #264]	; (8001a58 <MX_GPIO_Init+0x1a0>)
 800194e:	f003 fc65 	bl	800521c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	4841      	ldr	r0, [pc, #260]	; (8001a5c <MX_GPIO_Init+0x1a4>)
 8001958:	f003 fc60 	bl	800521c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp3_GPIO_Port, Lamp3_Pin, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001962:	483c      	ldr	r0, [pc, #240]	; (8001a54 <MX_GPIO_Init+0x19c>)
 8001964:	f003 fc5a 	bl	800521c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800196e:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <MX_GPIO_Init+0x1a8>)
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4837      	ldr	r0, [pc, #220]	; (8001a5c <MX_GPIO_Init+0x1a4>)
 800197e:	f003 fab1 	bl	8004ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Lamp3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Lamp3_Pin;
 8001982:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	482e      	ldr	r0, [pc, #184]	; (8001a54 <MX_GPIO_Init+0x19c>)
 800199c:	f003 faa2 	bl	8004ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lamp1_Pin Lamp2_Pin */
  GPIO_InitStruct.Pin = Lamp1_Pin|Lamp2_Pin;
 80019a0:	2306      	movs	r3, #6
 80019a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a4:	2301      	movs	r3, #1
 80019a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	4828      	ldr	r0, [pc, #160]	; (8001a58 <MX_GPIO_Init+0x1a0>)
 80019b8:	f003 fa94 	bl	8004ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Switch_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Signal_Pin;
 80019bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Switch_Signal_GPIO_Port, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	4821      	ldr	r0, [pc, #132]	; (8001a58 <MX_GPIO_Init+0x1a0>)
 80019d2:	f003 fa87 	bl	8004ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Index_Signal_Pin */
  GPIO_InitStruct.Pin = Index_Signal_Pin;
 80019d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <MX_GPIO_Init+0x1ac>)
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Index_Signal_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	481b      	ldr	r0, [pc, #108]	; (8001a58 <MX_GPIO_Init+0x1a0>)
 80019ec:	f003 fa7a 	bl	8004ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	4815      	ldr	r0, [pc, #84]	; (8001a5c <MX_GPIO_Init+0x1a4>)
 8001a08:	f003 fa6c 	bl	8004ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitchSignal_Pin */
  GPIO_InitStruct.Pin = LimitSwitchSignal_Pin;
 8001a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_GPIO_Init+0x1ac>)
 8001a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitchSignal_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480e      	ldr	r0, [pc, #56]	; (8001a5c <MX_GPIO_Init+0x1a4>)
 8001a22:	f003 fa5f 	bl	8004ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2017      	movs	r0, #23
 8001a2c:	f002 fe13 	bl	8004656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a30:	2017      	movs	r0, #23
 8001a32:	f002 fe2c 	bl	800468e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2028      	movs	r0, #40	; 0x28
 8001a3c:	f002 fe0b 	bl	8004656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a40:	2028      	movs	r0, #40	; 0x28
 8001a42:	f002 fe24 	bl	800468e <HAL_NVIC_EnableIRQ>

}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	; 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	10210000 	.word	0x10210000
 8001a64:	10110000 	.word	0x10110000

08001a68 <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 12288
#define  MAX_ENCODER_PERIOD 24576

void EncoderVelocityAndPosition_Update()
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	ed2d 8b02 	vpush	{d8}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0

	static float EncoderLastVelocity = 0;
	static float Velocity_Output = 0;
	static float Acceration_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001a72:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <EncoderVelocityAndPosition_Update+0x120>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
	uint64_t EncoderNowTimestamp = micros();
 8001a7a:	f000 f90b 	bl	8001c94 <micros>
 8001a7e:	e9c7 0106 	strd	r0, r1, [r7, #24]

	int32_t EncoderPositionDiff;
	float EncoderVelocityDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001a82:	4b42      	ldr	r3, [pc, #264]	; (8001b8c <EncoderVelocityAndPosition_Update+0x124>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a8c:	1a84      	subs	r4, r0, r2
 8001a8e:	eb61 0503 	sbc.w	r5, r1, r3
 8001a92:	e9c7 4504 	strd	r4, r5, [r7, #16]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001a96:	4b3e      	ldr	r3, [pc, #248]	; (8001b90 <EncoderVelocityAndPosition_Update+0x128>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	60fb      	str	r3, [r7, #12]

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8001aa0:	4a3b      	ldr	r2, [pc, #236]	; (8001b90 <EncoderVelocityAndPosition_Update+0x128>)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001aa6:	4939      	ldr	r1, [pc, #228]	; (8001b8c <EncoderVelocityAndPosition_Update+0x124>)
 8001aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aac:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aba:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <EncoderVelocityAndPosition_Update+0x12c>)
 8001abc:	edc3 7a07 	vstr	s15, [r3, #28]

	// LPF
	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4a35      	ldr	r2, [pc, #212]	; (8001b98 <EncoderVelocityAndPosition_Update+0x130>)
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001ad0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ad4:	f7ff f924 	bl	8000d20 <__aeabi_ul2f>
 8001ad8:	ee07 0a10 	vmov	s14, r0
 8001adc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001ae0:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <EncoderVelocityAndPosition_Update+0x134>)
 8001ae2:	edc3 7a00 	vstr	s15, [r3]
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*299))/300.0;
 8001ae6:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <EncoderVelocityAndPosition_Update+0x138>)
 8001ae8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001aec:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001ba4 <EncoderVelocityAndPosition_Update+0x13c>
 8001af0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <EncoderVelocityAndPosition_Update+0x134>)
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001afe:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001ba8 <EncoderVelocityAndPosition_Update+0x140>
 8001b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <EncoderVelocityAndPosition_Update+0x138>)
 8001b08:	edc3 7a07 	vstr	s15, [r3, #28]
//	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*149))/150.0;

	float EncoderNowVelocity = VelocityPIDController.OutputFeedback;
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <EncoderVelocityAndPosition_Update+0x138>)
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	60bb      	str	r3, [r7, #8]

	EncoderVelocityDiff = EncoderNowVelocity - EncoderLastVelocity;
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <EncoderVelocityAndPosition_Update+0x144>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b20:	edc7 7a01 	vstr	s15, [r7, #4]
	EncoderLastVelocity = VelocityPIDController.OutputFeedback;
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <EncoderVelocityAndPosition_Update+0x138>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	4a20      	ldr	r2, [pc, #128]	; (8001bac <EncoderVelocityAndPosition_Update+0x144>)
 8001b2a:	6013      	str	r3, [r2, #0]

	Acceration_Output = ( EncoderVelocityDiff * 1000000)  / (float) EncoderTimeDiff;
 8001b2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b30:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001bb0 <EncoderVelocityAndPosition_Update+0x148>
 8001b34:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001b38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b3c:	f7ff f8f0 	bl	8000d20 <__aeabi_ul2f>
 8001b40:	ee07 0a10 	vmov	s14, r0
 8001b44:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <EncoderVelocityAndPosition_Update+0x14c>)
 8001b4a:	edc3 7a00 	vstr	s15, [r3]
	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*299))/300.0;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <EncoderVelocityAndPosition_Update+0x150>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001ba4 <EncoderVelocityAndPosition_Update+0x13c>
 8001b58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <EncoderVelocityAndPosition_Update+0x14c>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b66:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001ba8 <EncoderVelocityAndPosition_Update+0x140>
 8001b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <EncoderVelocityAndPosition_Update+0x14c>)
 8001b70:	edc3 7a00 	vstr	s15, [r3]
//	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*149))/150.0;
	EstimatedAngularAcceration = ( Acceration_Output );
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <EncoderVelocityAndPosition_Update+0x14c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <EncoderVelocityAndPosition_Update+0x150>)
 8001b7a:	6013      	str	r3, [r2, #0]

}
 8001b7c:	bf00      	nop
 8001b7e:	3728      	adds	r7, #40	; 0x28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	ecbd 8b02 	vpop	{d8}
 8001b86:	bdb0      	pop	{r4, r5, r7, pc}
 8001b88:	200004b4 	.word	0x200004b4
 8001b8c:	20000220 	.word	0x20000220
 8001b90:	20000228 	.word	0x20000228
 8001b94:	20000108 	.word	0x20000108
 8001b98:	000f4240 	.word	0x000f4240
 8001b9c:	2000022c 	.word	0x2000022c
 8001ba0:	20000140 	.word	0x20000140
 8001ba4:	43958000 	.word	0x43958000
 8001ba8:	43960000 	.word	0x43960000
 8001bac:	20000230 	.word	0x20000230
 8001bb0:	49742400 	.word	0x49742400
 8001bb4:	20000234 	.word	0x20000234
 8001bb8:	20000218 	.word	0x20000218

08001bbc <HAL_TIM_PeriodElapsedCallback>:
{
	HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bbc:	b4b0      	push	{r4, r5, r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d109      	bne.n	8001be0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001bd6:	f143 0500 	adc.w	r5, r3, #0
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001bdc:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bcb0      	pop	{r4, r5, r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	200004fc 	.word	0x200004fc
 8001bf0:	200000b0 	.word	0x200000b0

08001bf4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13) // If The INT Source Is EXTI Line15 -> index  ///13 for test
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c04:	d118      	bne.n	8001c38 <HAL_GPIO_EXTI_Callback+0x44>
	{
    	if (Munmunbot_State == STATE_SetHome)
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_GPIO_EXTI_Callback+0x88>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d114      	bne.n	8001c38 <HAL_GPIO_EXTI_Callback+0x44>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d110      	bne.n	8001c38 <HAL_GPIO_EXTI_Callback+0x44>
    		{
    			HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x90>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1b      	ldr	r2, [pc, #108]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x94>)
 8001c1c:	6852      	ldr	r2, [r2, #4]
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
    			SethomeMode = SetHomeState_2;
 8001c20:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001c22:	2202      	movs	r2, #2
 8001c24:	701a      	strb	r2, [r3, #0]
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	4818      	ldr	r0, [pc, #96]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x98>)
 8001c2c:	f003 faf6 	bl	800521c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2200      	movs	r2, #0
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34
    		}
    	}
	}

    if(GPIO_Pin == GPIO_PIN_8) // LimitSwitch
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c3e:	d118      	bne.n	8001c72 <HAL_GPIO_EXTI_Callback+0x7e>
	{
    	if (Munmunbot_State == STATE_SetHome)
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_GPIO_EXTI_Callback+0x88>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b06      	cmp	r3, #6
 8001c46:	d114      	bne.n	8001c72 <HAL_GPIO_EXTI_Callback+0x7e>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d110      	bne.n	8001c72 <HAL_GPIO_EXTI_Callback+0x7e>
    		{
    			HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x90>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0c      	ldr	r2, [pc, #48]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x94>)
 8001c56:	6852      	ldr	r2, [r2, #4]
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
    			SethomeMode = SetHomeState_2;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	701a      	strb	r2, [r3, #0]
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	4809      	ldr	r0, [pc, #36]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x98>)
 8001c66:	f003 fad9 	bl	800521c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
    		}
    	}
	}

}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200000d9 	.word	0x200000d9
 8001c80:	200000da 	.word	0x200000da
 8001c84:	200004b4 	.word	0x200004b4
 8001c88:	20000208 	.word	0x20000208
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	2000040c 	.word	0x2000040c

08001c94 <micros>:

uint64_t micros()
{
 8001c94:	b4b0      	push	{r4, r5, r7}
 8001c96:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <micros+0x2c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f04f 0100 	mov.w	r1, #0
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <micros+0x30>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	1884      	adds	r4, r0, r2
 8001cac:	eb41 0503 	adc.w	r5, r1, r3
 8001cb0:	4622      	mov	r2, r4
 8001cb2:	462b      	mov	r3, r5
}
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bcb0      	pop	{r4, r5, r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	200004fc 	.word	0x200004fc
 8001cc4:	200000b0 	.word	0x200000b0

08001cc8 <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cd6:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	009a      	lsls	r2, r3, #2
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 10;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a03      	ldr	r2, [pc, #12]	; (8001cf4 <ConverterUnitSystemStructureInit+0x2c>)
 8001ce6:	609a      	str	r2, [r3, #8]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	41200000 	.word	0x41200000

08001cf8 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.3*(CUSSvar->PPRxQEI))/(3.1416*2.0);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fba8 	bl	800045c <__aeabi_ui2d>
 8001d0c:	a347      	add	r3, pc, #284	; (adr r3, 8001e2c <TrajectoryGenerationStructureInit+0x134>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fc1d 	bl	8000550 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	a345      	add	r3, pc, #276	; (adr r3, 8001e34 <TrajectoryGenerationStructureInit+0x13c>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fd3e 	bl	80007a4 <__aeabi_ddiv>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7fe fede 	bl	8000af0 <__aeabi_d2f>
 8001d34:	4602      	mov	r2, r0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	615a      	str	r2, [r3, #20]
//	TGSvar->AngularAccerationMax_Setting = (0.5*(CUSSvar->PPRxQEI))/(3.1416*2.0);
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fb88 	bl	800045c <__aeabi_ui2d>
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <TrajectoryGenerationStructureInit+0x128>)
 8001d52:	f7fe fd27 	bl	80007a4 <__aeabi_ddiv>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f7fe fec7 	bl	8000af0 <__aeabi_d2f>
 8001d62:	4602      	mov	r2, r0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = CUSSStruc.PPRxQEI;  /// PPRxQEI == 0 degree
 8001d68:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <TrajectoryGenerationStructureInit+0x12c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	ee07 3a90 	vmov	s15, r3
 8001d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	TGSvar->Mode = 0;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	TGSvar->Submode = 0;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	TGSvar->Loop_Freq = 1000;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d90:	659a      	str	r2, [r3, #88]	; 0x58
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <TrajectoryGenerationStructureInit+0x130>)
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	edd3 6a04 	vldr	s13, [r3, #16]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	ed93 7a05 	vldr	s14, [r3, #20]
 8001db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	edc3 7a03 	vstr	s15, [r3, #12]
	TGSvar->AngularVelocityFinalMin = 0*1.8*(CUSSvar->PPRxQEI)/60.0;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fb3f 	bl	800045c <__aeabi_ui2d>
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	f7fe fbb3 	bl	8000550 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <TrajectoryGenerationStructureInit+0x128>)
 8001df8:	f7fe fcd4 	bl	80007a4 <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe fe74 	bl	8000af0 <__aeabi_d2f>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	679a      	str	r2, [r3, #120]	; 0x78
	TGSvar->Alpha = 1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e14:	67da      	str	r2, [r3, #124]	; 0x7c

}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	404e0000 	.word	0x404e0000
 8001e24:	20000208 	.word	0x20000208
 8001e28:	000f4240 	.word	0x000f4240
 8001e2c:	33333333 	.word	0x33333333
 8001e30:	3fd33333 	.word	0x3fd33333
 8001e34:	2e48e8a7 	.word	0x2e48e8a7
 8001e38:	401921ff 	.word	0x401921ff
 8001e3c:	00000000 	.word	0x00000000

08001e40 <VelocityControllerInit>:

void VelocityControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
//	VCvar->Kp = 3;
//	VCvar->Ki = 20;
//	VCvar->Kd = 0.005;

	//Tin
	VCvar->Kp = 5;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <VelocityControllerInit+0x60>)
 8001e4e:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 12;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <VelocityControllerInit+0x64>)
 8001e54:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]

	VCvar->offSet = 0;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
	VCvar->Integral_Value = 0;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	621a      	str	r2, [r3, #32]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe fb34 	bl	80004e4 <__aeabi_ul2d>
 8001e7c:	a306      	add	r3, pc, #24	; (adr r3, 8001e98 <VelocityControllerInit+0x58>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	f7fe fc8f 	bl	80007a4 <__aeabi_ddiv>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	412e8480 	.word	0x412e8480
 8001ea0:	40a00000 	.word	0x40a00000
 8001ea4:	41400000 	.word	0x41400000

08001ea8 <DisplacementControllerInit>:

void DisplacementControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
//	VCvar->Kp = 0.5;
//	VCvar->Ki = 4;
//	VCvar->Kd = 0;

	//Tin
	VCvar->Kp = 0.06;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <DisplacementControllerInit+0x60>)
 8001eb6:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 1.2;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <DisplacementControllerInit+0x64>)
 8001ebc:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0.01;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <DisplacementControllerInit+0x68>)
 8001ec2:	609a      	str	r2, [r3, #8]


	VCvar->offSet = 0;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]
	VCvar->Integral_Value = 0;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe fb01 	bl	80004e4 <__aeabi_ul2d>
 8001ee2:	a307      	add	r3, pc, #28	; (adr r3, 8001f00 <DisplacementControllerInit+0x58>)
 8001ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee8:	f7fe fc5c 	bl	80007a4 <__aeabi_ddiv>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	00000000 	.word	0x00000000
 8001f04:	412e8480 	.word	0x412e8480
 8001f08:	3d75c28f 	.word	0x3d75c28f
 8001f0c:	3f99999a 	.word	0x3f99999a
 8001f10:	3c23d70a 	.word	0x3c23d70a

08001f14 <TrajectoryGenerationVelocityMaxSetting>:

void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp))/(60.0);   ///RPM to pps
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f34:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001f7c <TrajectoryGenerationVelocityMaxSetting+0x68>
 8001f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	edc3 7a04 	vstr	s15, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	edd3 6a04 	vldr	s13, [r3, #16]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	42700000 	.word	0x42700000

08001f80 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	// fix start position base on Encoder
	TrjStruc.Start_Theta = htim1.Instance->CNT;
 8001f84:	4b9e      	ldr	r3, [pc, #632]	; (8002200 <TrajectoryGenerationPrepareDATA+0x280>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f92:	4b9c      	ldr	r3, [pc, #624]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 8001f94:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	if (MovingLinkMode == LMM_Set_Pos_Directly)
 8001f98:	4b9b      	ldr	r3, [pc, #620]	; (8002208 <TrajectoryGenerationPrepareDATA+0x288>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d165      	bne.n	800206c <TrajectoryGenerationPrepareDATA+0xec>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 8001fa0:	4b9a      	ldr	r3, [pc, #616]	; (800220c <TrajectoryGenerationPrepareDATA+0x28c>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b9a      	ldr	r3, [pc, #616]	; (8002210 <TrajectoryGenerationPrepareDATA+0x290>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	fb03 f302 	mul.w	r3, r3, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fa54 	bl	800045c <__aeabi_ui2d>
 8001fb4:	a390      	add	r3, pc, #576	; (adr r3, 80021f8 <TrajectoryGenerationPrepareDATA+0x278>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe fbf3 	bl	80007a4 <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f7fe fd93 	bl	8000af0 <__aeabi_d2f>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4a8d      	ldr	r2, [pc, #564]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 8001fce:	6693      	str	r3, [r2, #104]	; 0x68
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 8001fd0:	4b8c      	ldr	r3, [pc, #560]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 8001fd2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001fd6:	4b8e      	ldr	r3, [pc, #568]	; (8002210 <TrajectoryGenerationPrepareDATA+0x290>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fea:	db0d      	blt.n	8002008 <TrajectoryGenerationPrepareDATA+0x88>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001fec:	4b85      	ldr	r3, [pc, #532]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 8001fee:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001ff2:	4b87      	ldr	r3, [pc, #540]	; (8002210 <TrajectoryGenerationPrepareDATA+0x290>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002002:	4b80      	ldr	r3, [pc, #512]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 8002004:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		  }
		  TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8002008:	4b7e      	ldr	r3, [pc, #504]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 800200a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800200e:	4b80      	ldr	r3, [pc, #512]	; (8002210 <TrajectoryGenerationPrepareDATA+0x290>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800201a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201e:	4b79      	ldr	r3, [pc, #484]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 8002020:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

		  if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 8002024:	4b77      	ldr	r3, [pc, #476]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 8002026:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800202a:	4b76      	ldr	r3, [pc, #472]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 800202c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002030:	eeb4 7a67 	vcmp.f32	s14, s15
 8002034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002038:	d00e      	beq.n	8002058 <TrajectoryGenerationPrepareDATA+0xd8>
		  {
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 800203a:	4b72      	ldr	r3, [pc, #456]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 800203c:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002040:	4b70      	ldr	r3, [pc, #448]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 8002042:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800204a:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 800204c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			  Munmunbot_State = STATE_Calculation;
 8002050:	4b70      	ldr	r3, [pc, #448]	; (8002214 <TrajectoryGenerationPrepareDATA+0x294>)
 8002052:	2203      	movs	r2, #3
 8002054:	701a      	strb	r2, [r3, #0]
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
		ACK2Return(&UART2);
	  }
}
 8002056:	e0cd      	b.n	80021f4 <TrajectoryGenerationPrepareDATA+0x274>
			Munmunbot_State = STATE_Idle;
 8002058:	4b6e      	ldr	r3, [pc, #440]	; (8002214 <TrajectoryGenerationPrepareDATA+0x294>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 800205e:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <TrajectoryGenerationPrepareDATA+0x288>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
			ACK2Return(&UART2);
 8002064:	486c      	ldr	r0, [pc, #432]	; (8002218 <TrajectoryGenerationPrepareDATA+0x298>)
 8002066:	f001 f831 	bl	80030cc <ACK2Return>
}
 800206a:	e0c3      	b.n	80021f4 <TrajectoryGenerationPrepareDATA+0x274>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <TrajectoryGenerationPrepareDATA+0x288>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d004      	beq.n	800207e <TrajectoryGenerationPrepareDATA+0xfe>
 8002074:	4b64      	ldr	r3, [pc, #400]	; (8002208 <TrajectoryGenerationPrepareDATA+0x288>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b03      	cmp	r3, #3
 800207a:	f040 80b1 	bne.w	80021e0 <TrajectoryGenerationPrepareDATA+0x260>
		  if (NumberOfStationToGo == 0)
 800207e:	4b67      	ldr	r3, [pc, #412]	; (800221c <TrajectoryGenerationPrepareDATA+0x29c>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <TrajectoryGenerationPrepareDATA+0x126>
				Munmunbot_State = STATE_Idle;
 8002086:	4b63      	ldr	r3, [pc, #396]	; (8002214 <TrajectoryGenerationPrepareDATA+0x294>)
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 800208c:	4b64      	ldr	r3, [pc, #400]	; (8002220 <TrajectoryGenerationPrepareDATA+0x2a0>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 8002092:	4b62      	ldr	r3, [pc, #392]	; (800221c <TrajectoryGenerationPrepareDATA+0x29c>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8002098:	4b5b      	ldr	r3, [pc, #364]	; (8002208 <TrajectoryGenerationPrepareDATA+0x288>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 800209e:	485e      	ldr	r0, [pc, #376]	; (8002218 <TrajectoryGenerationPrepareDATA+0x298>)
 80020a0:	f001 f814 	bl	80030cc <ACK2Return>
		  if (NumberOfStationToGo == 0)
 80020a4:	e0a6      	b.n	80021f4 <TrajectoryGenerationPrepareDATA+0x274>
			Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 80020a6:	4b5e      	ldr	r3, [pc, #376]	; (8002220 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	4b5d      	ldr	r3, [pc, #372]	; (8002224 <TrajectoryGenerationPrepareDATA+0x2a4>)
 80020ae:	5c9a      	ldrb	r2, [r3, r2]
 80020b0:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <TrajectoryGenerationPrepareDATA+0x2a8>)
 80020b2:	701a      	strb	r2, [r3, #0]
			if (Current_Station > 10)   //pass input
 80020b4:	4b5c      	ldr	r3, [pc, #368]	; (8002228 <TrajectoryGenerationPrepareDATA+0x2a8>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b0a      	cmp	r3, #10
 80020ba:	d90c      	bls.n	80020d6 <TrajectoryGenerationPrepareDATA+0x156>
				NumberOfStationPTR += 1;
 80020bc:	4b58      	ldr	r3, [pc, #352]	; (8002220 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b56      	ldr	r3, [pc, #344]	; (8002220 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80020c6:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 80020c8:	4b54      	ldr	r3, [pc, #336]	; (800221c <TrajectoryGenerationPrepareDATA+0x29c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b52      	ldr	r3, [pc, #328]	; (800221c <TrajectoryGenerationPrepareDATA+0x29c>)
 80020d2:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 80020d4:	e08e      	b.n	80021f4 <TrajectoryGenerationPrepareDATA+0x274>
				TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0))*5.0;   ///fix this if change algorithm
 80020d6:	4b54      	ldr	r3, [pc, #336]	; (8002228 <TrajectoryGenerationPrepareDATA+0x2a8>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	3b01      	subs	r3, #1
 80020dc:	4a53      	ldr	r2, [pc, #332]	; (800222c <TrajectoryGenerationPrepareDATA+0x2ac>)
 80020de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020e2:	461a      	mov	r2, r3
 80020e4:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <TrajectoryGenerationPrepareDATA+0x290>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	fb03 f302 	mul.w	r3, r3, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe f9b5 	bl	800045c <__aeabi_ui2d>
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b4e      	ldr	r3, [pc, #312]	; (8002230 <TrajectoryGenerationPrepareDATA+0x2b0>)
 80020f8:	f7fe fb54 	bl	80007a4 <__aeabi_ddiv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4610      	mov	r0, r2
 8002102:	4619      	mov	r1, r3
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <TrajectoryGenerationPrepareDATA+0x2b4>)
 800210a:	f7fe fa21 	bl	8000550 <__aeabi_dmul>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f7fe fceb 	bl	8000af0 <__aeabi_d2f>
 800211a:	4603      	mov	r3, r0
 800211c:	4a39      	ldr	r2, [pc, #228]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 800211e:	6693      	str	r3, [r2, #104]	; 0x68
				if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)  ///wrap input into 1 revolute. ///shouldn't happen
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 8002122:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002126:	4b3a      	ldr	r3, [pc, #232]	; (8002210 <TrajectoryGenerationPrepareDATA+0x290>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213a:	db0d      	blt.n	8002158 <TrajectoryGenerationPrepareDATA+0x1d8>
					TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 800213c:	4b31      	ldr	r3, [pc, #196]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 800213e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002142:	4b33      	ldr	r3, [pc, #204]	; (8002210 <TrajectoryGenerationPrepareDATA+0x290>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002152:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 8002154:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 800215a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800215e:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <TrajectoryGenerationPrepareDATA+0x290>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800216a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216e:	4b25      	ldr	r3, [pc, #148]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 8002170:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				if (TrjStruc.Desire_Theta == TrjStruc.Start_Theta)
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 8002176:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800217a:	4b22      	ldr	r3, [pc, #136]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 800217c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002180:	eeb4 7a67 	vcmp.f32	s14, s15
 8002184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002188:	d10f      	bne.n	80021aa <TrajectoryGenerationPrepareDATA+0x22a>
					NumberOfStationPTR += 1;
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <TrajectoryGenerationPrepareDATA+0x2a0>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002194:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <TrajectoryGenerationPrepareDATA+0x29c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	3b01      	subs	r3, #1
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b1f      	ldr	r3, [pc, #124]	; (800221c <TrajectoryGenerationPrepareDATA+0x29c>)
 80021a0:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_End_Effector_Working;
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <TrajectoryGenerationPrepareDATA+0x294>)
 80021a4:	2205      	movs	r2, #5
 80021a6:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 80021a8:	e024      	b.n	80021f4 <TrajectoryGenerationPrepareDATA+0x274>
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 80021ac:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 80021b2:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80021b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <TrajectoryGenerationPrepareDATA+0x284>)
 80021bc:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
					Munmunbot_State = STATE_Calculation;
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <TrajectoryGenerationPrepareDATA+0x294>)
 80021c2:	2203      	movs	r2, #3
 80021c4:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80021d0:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <TrajectoryGenerationPrepareDATA+0x29c>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <TrajectoryGenerationPrepareDATA+0x29c>)
 80021dc:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 80021de:	e009      	b.n	80021f4 <TrajectoryGenerationPrepareDATA+0x274>
		MovingLinkMode = LMM_Not_Set;
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <TrajectoryGenerationPrepareDATA+0x288>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <TrajectoryGenerationPrepareDATA+0x294>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
		ACK2Return(&UART2);
 80021ec:	480a      	ldr	r0, [pc, #40]	; (8002218 <TrajectoryGenerationPrepareDATA+0x298>)
 80021ee:	f000 ff6d 	bl	80030cc <ACK2Return>
}
 80021f2:	e7ff      	b.n	80021f4 <TrajectoryGenerationPrepareDATA+0x274>
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	99999999 	.word	0x99999999
 80021fc:	40eeadf9 	.word	0x40eeadf9
 8002200:	200004b4 	.word	0x200004b4
 8002204:	20000178 	.word	0x20000178
 8002208:	200000ee 	.word	0x200000ee
 800220c:	200000ec 	.word	0x200000ec
 8002210:	20000208 	.word	0x20000208
 8002214:	200000d9 	.word	0x200000d9
 8002218:	200000b8 	.word	0x200000b8
 800221c:	200000f0 	.word	0x200000f0
 8002220:	200000f1 	.word	0x200000f1
 8002224:	200000dc 	.word	0x200000dc
 8002228:	200000ef 	.word	0x200000ef
 800222c:	20000000 	.word	0x20000000
 8002230:	40768000 	.word	0x40768000
 8002234:	40140000 	.word	0x40140000

08002238 <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 8002238:	b5b0      	push	{r4, r5, r7, lr}
 800223a:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 800223c:	4b8d      	ldr	r3, [pc, #564]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800223e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224a:	d51b      	bpl.n	8002284 <TrajectoryGenerationCalculation+0x4c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 800224c:	4b89      	ldr	r3, [pc, #548]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800224e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002252:	eef1 7a67 	vneg.f32	s15, s15
 8002256:	4b87      	ldr	r3, [pc, #540]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002258:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 800225c:	4b85      	ldr	r3, [pc, #532]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800225e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002262:	eef1 7a67 	vneg.f32	s15, s15
 8002266:	4b83      	ldr	r3, [pc, #524]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002268:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 800226c:	4b81      	ldr	r3, [pc, #516]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800226e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002272:	eef1 7a67 	vneg.f32	s15, s15
 8002276:	4b7f      	ldr	r3, [pc, #508]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002278:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		 TrjStruc.Alpha = -1;
 800227c:	4b7d      	ldr	r3, [pc, #500]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800227e:	4a7e      	ldr	r2, [pc, #504]	; (8002478 <TrajectoryGenerationCalculation+0x240>)
 8002280:	67da      	str	r2, [r3, #124]	; 0x7c
 8002282:	e017      	b.n	80022b4 <TrajectoryGenerationCalculation+0x7c>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 8002284:	4b7b      	ldr	r3, [pc, #492]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002286:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800228a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	dd0f      	ble.n	80022b4 <TrajectoryGenerationCalculation+0x7c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 8002294:	4b77      	ldr	r3, [pc, #476]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	4a76      	ldr	r2, [pc, #472]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800229a:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 800229c:	4b75      	ldr	r3, [pc, #468]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	4a74      	ldr	r2, [pc, #464]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80022a2:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 80022a4:	4b73      	ldr	r3, [pc, #460]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	4a72      	ldr	r2, [pc, #456]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80022aa:	6753      	str	r3, [r2, #116]	; 0x74
		 TrjStruc.Alpha = 1;
 80022ac:	4b71      	ldr	r3, [pc, #452]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80022ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022b2:	67da      	str	r2, [r3, #124]	; 0x7c
	  }

	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 80022b4:	4b6f      	ldr	r3, [pc, #444]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80022b6:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80022ba:	4b6e      	ldr	r3, [pc, #440]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80022bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80022c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c8:	d55a      	bpl.n	8002380 <TrajectoryGenerationCalculation+0x148>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 80022ca:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80022cc:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80022d0:	4b68      	ldr	r3, [pc, #416]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80022d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80022d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022da:	ee16 0a90 	vmov	r0, s13
 80022de:	f7fe f8df 	bl	80004a0 <__aeabi_f2d>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	ec43 2b10 	vmov	d0, r2, r3
 80022ea:	f007 fc35 	bl	8009b58 <sqrt>
 80022ee:	ec53 2b10 	vmov	r2, r3, d0
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	f7fe fbfb 	bl	8000af0 <__aeabi_d2f>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4a5d      	ldr	r2, [pc, #372]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80022fe:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8002300:	4b5c      	ldr	r3, [pc, #368]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002304:	4a5b      	ldr	r2, [pc, #364]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002306:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 8002308:	4b5a      	ldr	r3, [pc, #360]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800230a:	ed93 7a07 	vldr	s14, [r3, #28]
 800230e:	4b59      	ldr	r3, [pc, #356]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002310:	edd3 6a01 	vldr	s13, [r3, #4]
 8002314:	4b57      	ldr	r3, [pc, #348]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002316:	edd3 7a01 	vldr	s15, [r3, #4]
 800231a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002322:	ee17 0a90 	vmov	r0, s15
 8002326:	f7fe f8bb 	bl	80004a0 <__aeabi_f2d>
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002332:	f7fe fa37 	bl	80007a4 <__aeabi_ddiv>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4614      	mov	r4, r2
 800233c:	461d      	mov	r5, r3
 800233e:	4b4d      	ldr	r3, [pc, #308]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe f8ac 	bl	80004a0 <__aeabi_f2d>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fd ff48 	bl	80001e4 <__adddf3>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fbc8 	bl	8000af0 <__aeabi_d2f>
 8002360:	4603      	mov	r3, r0
 8002362:	4a44      	ldr	r2, [pc, #272]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002364:	62d3      	str	r3, [r2, #44]	; 0x2c
		 TrjStruc.Mode = 0;
 8002366:	4b43      	ldr	r3, [pc, #268]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002368:	2200      	movs	r2, #0
 800236a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		 TrjStruc.Submode = 0;
 800236e:	4b41      	ldr	r3, [pc, #260]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002370:	2200      	movs	r2, #0
 8002372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		 TrjStruc.Subsubmode = 0;
 8002376:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002378:	2200      	movs	r2, #0
 800237a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800237e:	e069      	b.n	8002454 <TrajectoryGenerationCalculation+0x21c>
	  }
	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 8002380:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002382:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002386:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002388:	edd3 7a03 	vldr	s15, [r3, #12]
 800238c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	db5e      	blt.n	8002454 <TrajectoryGenerationCalculation+0x21c>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 8002396:	4b37      	ldr	r3, [pc, #220]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002398:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800239c:	4b35      	ldr	r3, [pc, #212]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800239e:	edd3 7a03 	vldr	s15, [r3, #12]
 80023a2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023a6:	4b33      	ldr	r3, [pc, #204]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80023a8:	ed93 7a04 	vldr	s14, [r3, #16]
 80023ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b0:	4b30      	ldr	r3, [pc, #192]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80023b2:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 80023b6:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80023b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ba:	4a2e      	ldr	r2, [pc, #184]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80023bc:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80023c0:	ed93 7a07 	vldr	s14, [r3, #28]
 80023c4:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80023c6:	edd3 6a00 	vldr	s13, [r3]
 80023ca:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d8:	ee17 0a90 	vmov	r0, s15
 80023dc:	f7fe f860 	bl	80004a0 <__aeabi_f2d>
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023e8:	f7fe f9dc 	bl	80007a4 <__aeabi_ddiv>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4614      	mov	r4, r2
 80023f2:	461d      	mov	r5, r3
 80023f4:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f851 	bl	80004a0 <__aeabi_f2d>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4620      	mov	r0, r4
 8002404:	4629      	mov	r1, r5
 8002406:	f7fd feed 	bl	80001e4 <__adddf3>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	f7fe fb6d 	bl	8000af0 <__aeabi_d2f>
 8002416:	4603      	mov	r3, r0
 8002418:	4a16      	ldr	r2, [pc, #88]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800241a:	62d3      	str	r3, [r2, #44]	; 0x2c
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800241e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002424:	edd3 7a02 	vldr	s15, [r3, #8]
 8002428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800242e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002438:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  TrjStruc.Mode = 1;
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800243e:	2201      	movs	r2, #1
 8002440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		  TrjStruc.Submode = 0;
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 8002446:	2200      	movs	r2, #0
 8002448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		  TrjStruc.Subsubmode = 0;
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800244e:	2200      	movs	r2, #0
 8002450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  }
	 TrjStruc.Equation_Timestamp = micros();
 8002454:	f7ff fc1e 	bl	8001c94 <micros>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4905      	ldr	r1, [pc, #20]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800245e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 TrjStruc.Loop_Timestamp = micros();
 8002462:	f7ff fc17 	bl	8001c94 <micros>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4902      	ldr	r1, [pc, #8]	; (8002474 <TrajectoryGenerationCalculation+0x23c>)
 800246c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002470:	bf00      	nop
 8002472:	bdb0      	pop	{r4, r5, r7, pc}
 8002474:	20000178 	.word	0x20000178
 8002478:	bf800000 	.word	0xbf800000
 800247c:	00000000 	.word	0x00000000

08002480 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 8002480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002484:	ed2d 8b02 	vpush	{d8}
 8002488:	b091      	sub	sp, #68	; 0x44
 800248a:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 800248c:	f7ff fc02 	bl	8001c94 <micros>
 8002490:	4ba3      	ldr	r3, [pc, #652]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 8002492:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002496:	1a84      	subs	r4, r0, r2
 8002498:	eb61 0503 	sbc.w	r5, r1, r3
 800249c:	4620      	mov	r0, r4
 800249e:	4629      	mov	r1, r5
 80024a0:	f7fe f820 	bl	80004e4 <__aeabi_ul2d>
 80024a4:	a39c      	add	r3, pc, #624	; (adr r3, 8002718 <TrajectoryGenerationProcess+0x298>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	f7fe f97b 	bl	80007a4 <__aeabi_ddiv>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	4b9a      	ldr	r3, [pc, #616]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80024b8:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38

	 switch (TrjStruc.Mode)
 80024bc:	4b98      	ldr	r3, [pc, #608]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80024be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	f000 83b0 	beq.w	8002c28 <TrajectoryGenerationProcess+0x7a8>
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	f200 83bc 	bhi.w	8002c46 <TrajectoryGenerationProcess+0x7c6>
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <TrajectoryGenerationProcess+0x5a>
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	f000 81b8 	beq.w	8002848 <TrajectoryGenerationProcess+0x3c8>
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  TrjStruc.AngularVelocityDesire = 0;
			  break;
		  }
}
 80024d8:	e3b5      	b.n	8002c46 <TrajectoryGenerationProcess+0x7c6>
			  if (TrjStruc.Submode == 0)
 80024da:	4b91      	ldr	r3, [pc, #580]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80024dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d16f      	bne.n	80025c4 <TrajectoryGenerationProcess+0x144>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80024e4:	4b8e      	ldr	r3, [pc, #568]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fd ffd9 	bl	80004a0 <__aeabi_f2d>
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	4b8c      	ldr	r3, [pc, #560]	; (8002724 <TrajectoryGenerationProcess+0x2a4>)
 80024f4:	f7fe f82c 	bl	8000550 <__aeabi_dmul>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4614      	mov	r4, r2
 80024fe:	461d      	mov	r5, r3
 8002500:	4b87      	ldr	r3, [pc, #540]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 8002502:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002506:	4b86      	ldr	r3, [pc, #536]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 8002508:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800250c:	f7fe f820 	bl	8000550 <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4620      	mov	r0, r4
 8002516:	4629      	mov	r1, r5
 8002518:	f7fe f81a 	bl	8000550 <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4614      	mov	r4, r2
 8002522:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 8002524:	4b7e      	ldr	r3, [pc, #504]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	4618      	mov	r0, r3
 800252a:	f7fd ffb9 	bl	80004a0 <__aeabi_f2d>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4620      	mov	r0, r4
 8002534:	4629      	mov	r1, r5
 8002536:	f7fd fe55 	bl	80001e4 <__adddf3>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	f7fe fad5 	bl	8000af0 <__aeabi_d2f>
 8002546:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002548:	4a75      	ldr	r2, [pc, #468]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 800254a:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 800254c:	4b74      	ldr	r3, [pc, #464]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fd ffa5 	bl	80004a0 <__aeabi_f2d>
 8002556:	4b72      	ldr	r3, [pc, #456]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 8002558:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800255c:	f7fd fff8 	bl	8000550 <__aeabi_dmul>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	f7fe fac2 	bl	8000af0 <__aeabi_d2f>
 800256c:	4603      	mov	r3, r0
 800256e:	4a6c      	ldr	r2, [pc, #432]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 8002570:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 8002572:	f7ff fb8f 	bl	8001c94 <micros>
 8002576:	4b6a      	ldr	r3, [pc, #424]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 8002578:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800257c:	1a84      	subs	r4, r0, r2
 800257e:	63bc      	str	r4, [r7, #56]	; 0x38
 8002580:	eb61 0303 	sbc.w	r3, r1, r3
 8002584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002586:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800258a:	f7fe fbc9 	bl	8000d20 <__aeabi_ul2f>
 800258e:	ee06 0a90 	vmov	s13, r0
 8002592:	4b63      	ldr	r3, [pc, #396]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 8002594:	edd3 7a01 	vldr	s15, [r3, #4]
 8002598:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002728 <TrajectoryGenerationProcess+0x2a8>
 800259c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	da00      	bge.n	80025ac <TrajectoryGenerationProcess+0x12c>
			  break;
 80025aa:	e349      	b.n	8002c40 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 80025ac:	f7ff fb72 	bl	8001c94 <micros>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	495a      	ldr	r1, [pc, #360]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80025b6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 80025ba:	4b59      	ldr	r3, [pc, #356]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80025bc:	2201      	movs	r2, #1
 80025be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 80025c2:	e33d      	b.n	8002c40 <TrajectoryGenerationProcess+0x7c0>
			  else if (TrjStruc.Submode == 1)
 80025c4:	4b56      	ldr	r3, [pc, #344]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80025c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	f040 8338 	bne.w	8002c40 <TrajectoryGenerationProcess+0x7c0>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80025d0:	4b53      	ldr	r3, [pc, #332]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd ff63 	bl	80004a0 <__aeabi_f2d>
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	4b53      	ldr	r3, [pc, #332]	; (800272c <TrajectoryGenerationProcess+0x2ac>)
 80025e0:	f7fd ffb6 	bl	8000550 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4614      	mov	r4, r2
 80025ea:	461d      	mov	r5, r3
 80025ec:	4b4c      	ldr	r3, [pc, #304]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80025ee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80025f2:	4b4b      	ldr	r3, [pc, #300]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80025f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80025f8:	f7fd ffaa 	bl	8000550 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4620      	mov	r0, r4
 8002602:	4629      	mov	r1, r5
 8002604:	f7fd ffa4 	bl	8000550 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4614      	mov	r4, r2
 800260e:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 8002610:	4b43      	ldr	r3, [pc, #268]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 8002612:	ed93 7a07 	vldr	s14, [r3, #28]
 8002616:	4b42      	ldr	r3, [pc, #264]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 8002618:	edd3 7a01 	vldr	s15, [r3, #4]
 800261c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002620:	ee17 0a90 	vmov	r0, s15
 8002624:	f7fd ff3c 	bl	80004a0 <__aeabi_f2d>
 8002628:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 800262a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800262e:	f7fd ff8f 	bl	8000550 <__aeabi_dmul>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4620      	mov	r0, r4
 8002638:	4629      	mov	r1, r5
 800263a:	f7fd fdd3 	bl	80001e4 <__adddf3>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4614      	mov	r4, r2
 8002644:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 8002646:	4b36      	ldr	r3, [pc, #216]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ff28 	bl	80004a0 <__aeabi_f2d>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4620      	mov	r0, r4
 8002656:	4629      	mov	r1, r5
 8002658:	f7fd fdc4 	bl	80001e4 <__adddf3>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	f7fe fa44 	bl	8000af0 <__aeabi_d2f>
 8002668:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 800266a:	4a2d      	ldr	r2, [pc, #180]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 800266c:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002674:	2b00      	cmp	r3, #0
 8002676:	d15b      	bne.n	8002730 <TrajectoryGenerationProcess+0x2b0>
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 8002678:	4b29      	ldr	r3, [pc, #164]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff0f 	bl	80004a0 <__aeabi_f2d>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	633a      	str	r2, [r7, #48]	; 0x30
 8002688:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
 800268e:	4b24      	ldr	r3, [pc, #144]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 8002690:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002694:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002698:	f7fd ff5a 	bl	8000550 <__aeabi_dmul>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4614      	mov	r4, r2
 80026a2:	461d      	mov	r5, r3
													   (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular);
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80026a6:	ed93 7a07 	vldr	s14, [r3, #28]
 80026aa:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80026ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80026b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b4:	ee17 0a90 	vmov	r0, s15
 80026b8:	f7fd fef2 	bl	80004a0 <__aeabi_f2d>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 80026c0:	4620      	mov	r0, r4
 80026c2:	4629      	mov	r1, r5
 80026c4:	f7fd fd8e 	bl	80001e4 <__adddf3>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7fe fa0e 	bl	8000af0 <__aeabi_d2f>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80026d8:	6253      	str	r3, [r2, #36]	; 0x24
					  if ( TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <= TrjStruc.AngularVelocityFinalMin )
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80026dc:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80026e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80026e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80026ec:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80026f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	d875      	bhi.n	80027e6 <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 1;
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 8002702:	f7ff fac7 	bl	8001c94 <micros>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4905      	ldr	r1, [pc, #20]	; (8002720 <TrajectoryGenerationProcess+0x2a0>)
 800270c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002710:	e069      	b.n	80027e6 <TrajectoryGenerationProcess+0x366>
 8002712:	bf00      	nop
 8002714:	f3af 8000 	nop.w
 8002718:	00000000 	.word	0x00000000
 800271c:	412e8480 	.word	0x412e8480
 8002720:	20000178 	.word	0x20000178
 8002724:	3fe00000 	.word	0x3fe00000
 8002728:	49742400 	.word	0x49742400
 800272c:	bfe00000 	.word	0xbfe00000
				  else if ( TrjStruc.Subsubmode == 1 )
 8002730:	4ba9      	ldr	r3, [pc, #676]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	2b01      	cmp	r3, #1
 8002738:	d14c      	bne.n	80027d4 <TrajectoryGenerationProcess+0x354>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 800273a:	4ba7      	ldr	r3, [pc, #668]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 800273c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002740:	4ba5      	ldr	r3, [pc, #660]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002742:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274a:	4ba3      	ldr	r3, [pc, #652]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 800274c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeTriangular*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 8002750:	f7ff faa0 	bl	8001c94 <micros>
 8002754:	4ba0      	ldr	r3, [pc, #640]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002756:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800275a:	1a84      	subs	r4, r0, r2
 800275c:	62bc      	str	r4, [r7, #40]	; 0x28
 800275e:	eb61 0303 	sbc.w	r3, r1, r3
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002764:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002768:	f7fd febc 	bl	80004e4 <__aeabi_ul2d>
 800276c:	4604      	mov	r4, r0
 800276e:	460d      	mov	r5, r1
 8002770:	4b99      	ldr	r3, [pc, #612]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002772:	edd3 7a01 	vldr	s15, [r3, #4]
 8002776:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80029dc <TrajectoryGenerationProcess+0x55c>
 800277a:	ee27 8a87 	vmul.f32	s16, s15, s14
 800277e:	4b96      	ldr	r3, [pc, #600]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002780:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002784:	4b94      	ldr	r3, [pc, #592]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002786:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800278a:	1a86      	subs	r6, r0, r2
 800278c:	623e      	str	r6, [r7, #32]
 800278e:	eb61 0303 	sbc.w	r3, r1, r3
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
 8002794:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002798:	f7fe fac2 	bl	8000d20 <__aeabi_ul2f>
 800279c:	ee07 0a90 	vmov	s15, r0
 80027a0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80027a4:	ee17 0a90 	vmov	r0, s15
 80027a8:	f7fd fe7a 	bl	80004a0 <__aeabi_f2d>
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027b4:	f7fd fff6 	bl	80007a4 <__aeabi_ddiv>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4620      	mov	r0, r4
 80027be:	4629      	mov	r1, r5
 80027c0:	f7fe f94c 	bl	8000a5c <__aeabi_dcmpge>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00d      	beq.n	80027e6 <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 2;
 80027ca:	4b83      	ldr	r3, [pc, #524]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 80027cc:	2202      	movs	r2, #2
 80027ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80027d2:	e008      	b.n	80027e6 <TrajectoryGenerationProcess+0x366>
				  else if ( TrjStruc.Subsubmode == 2 )
 80027d4:	4b80      	ldr	r3, [pc, #512]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d103      	bne.n	80027e6 <TrajectoryGenerationProcess+0x366>
					  TrjStruc.AngularVelocityDesire = 0;
 80027de:	4b7e      	ldr	r3, [pc, #504]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80027e6:	f7ff fa55 	bl	8001c94 <micros>
 80027ea:	4b7b      	ldr	r3, [pc, #492]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 80027ec:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80027f0:	1a84      	subs	r4, r0, r2
 80027f2:	61bc      	str	r4, [r7, #24]
 80027f4:	eb61 0303 	sbc.w	r3, r1, r3
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027fe:	f7fe fa8f 	bl	8000d20 <__aeabi_ul2f>
 8002802:	ee06 0a90 	vmov	s13, r0
 8002806:	4b74      	ldr	r3, [pc, #464]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002808:	edd3 7a01 	vldr	s15, [r3, #4]
 800280c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80029dc <TrajectoryGenerationProcess+0x55c>
 8002810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002814:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281c:	da00      	bge.n	8002820 <TrajectoryGenerationProcess+0x3a0>
			  break;
 800281e:	e20f      	b.n	8002c40 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 8002820:	f7ff fa38 	bl	8001c94 <micros>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	496b      	ldr	r1, [pc, #428]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 800282a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 800282e:	4b6a      	ldr	r3, [pc, #424]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002830:	2200      	movs	r2, #0
 8002832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 8002836:	4b68      	ldr	r3, [pc, #416]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002838:	2200      	movs	r2, #0
 800283a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 800283e:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002840:	2202      	movs	r2, #2
 8002842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 8002846:	e1fb      	b.n	8002c40 <TrajectoryGenerationProcess+0x7c0>
			  if (TrjStruc.Submode == 0)
 8002848:	4b63      	ldr	r3, [pc, #396]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 800284a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284e:	2b00      	cmp	r3, #0
 8002850:	d16e      	bne.n	8002930 <TrajectoryGenerationProcess+0x4b0>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002852:	4b61      	ldr	r3, [pc, #388]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fe22 	bl	80004a0 <__aeabi_f2d>
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	4b5f      	ldr	r3, [pc, #380]	; (80029e0 <TrajectoryGenerationProcess+0x560>)
 8002862:	f7fd fe75 	bl	8000550 <__aeabi_dmul>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4614      	mov	r4, r2
 800286c:	461d      	mov	r5, r3
 800286e:	4b5a      	ldr	r3, [pc, #360]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002870:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002874:	4b58      	ldr	r3, [pc, #352]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002876:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800287a:	f7fd fe69 	bl	8000550 <__aeabi_dmul>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4620      	mov	r0, r4
 8002884:	4629      	mov	r1, r5
 8002886:	f7fd fe63 	bl	8000550 <__aeabi_dmul>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4614      	mov	r4, r2
 8002890:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 8002892:	4b51      	ldr	r3, [pc, #324]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe02 	bl	80004a0 <__aeabi_f2d>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4620      	mov	r0, r4
 80028a2:	4629      	mov	r1, r5
 80028a4:	f7fd fc9e 	bl	80001e4 <__adddf3>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7fe f91e 	bl	8000af0 <__aeabi_d2f>
 80028b4:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80028b6:	4a48      	ldr	r2, [pc, #288]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 80028b8:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd fdee 	bl	80004a0 <__aeabi_f2d>
 80028c4:	4b44      	ldr	r3, [pc, #272]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 80028c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80028ca:	f7fd fe41 	bl	8000550 <__aeabi_dmul>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	f7fe f90b 	bl	8000af0 <__aeabi_d2f>
 80028da:	4603      	mov	r3, r0
 80028dc:	4a3e      	ldr	r2, [pc, #248]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 80028de:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 80028e0:	f7ff f9d8 	bl	8001c94 <micros>
 80028e4:	4b3c      	ldr	r3, [pc, #240]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 80028e6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80028ea:	ebb0 0a02 	subs.w	sl, r0, r2
 80028ee:	eb61 0b03 	sbc.w	fp, r1, r3
 80028f2:	4650      	mov	r0, sl
 80028f4:	4659      	mov	r1, fp
 80028f6:	f7fe fa13 	bl	8000d20 <__aeabi_ul2f>
 80028fa:	ee06 0a90 	vmov	s13, r0
 80028fe:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80029dc <TrajectoryGenerationProcess+0x55c>
 8002908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800290c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002914:	da00      	bge.n	8002918 <TrajectoryGenerationProcess+0x498>
			  break;
 8002916:	e195      	b.n	8002c44 <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002918:	f7ff f9bc 	bl	8001c94 <micros>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	492d      	ldr	r1, [pc, #180]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002922:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 8002926:	4b2c      	ldr	r3, [pc, #176]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002928:	2201      	movs	r2, #1
 800292a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 800292e:	e189      	b.n	8002c44 <TrajectoryGenerationProcess+0x7c4>
			  else if (TrjStruc.Submode == 1)
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002936:	2b01      	cmp	r3, #1
 8002938:	d154      	bne.n	80029e4 <TrajectoryGenerationProcess+0x564>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 800293a:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd fdae 	bl	80004a0 <__aeabi_f2d>
 8002944:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002946:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800294a:	f7fd fe01 	bl	8000550 <__aeabi_dmul>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4614      	mov	r4, r2
 8002954:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 8002956:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fda0 	bl	80004a0 <__aeabi_f2d>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	f7fd fc3c 	bl	80001e4 <__adddf3>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f8bc 	bl	8000af0 <__aeabi_d2f>
 8002978:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 800297a:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 800297c:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularVelocity;
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	4a15      	ldr	r2, [pc, #84]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 8002984:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 8002986:	f7ff f985 	bl	8001c94 <micros>
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 800298c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002990:	ebb0 0802 	subs.w	r8, r0, r2
 8002994:	eb61 0903 	sbc.w	r9, r1, r3
 8002998:	4640      	mov	r0, r8
 800299a:	4649      	mov	r1, r9
 800299c:	f7fe f9c0 	bl	8000d20 <__aeabi_ul2f>
 80029a0:	ee06 0a90 	vmov	s13, r0
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 80029a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80029aa:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80029dc <TrajectoryGenerationProcess+0x55c>
 80029ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	da00      	bge.n	80029be <TrajectoryGenerationProcess+0x53e>
			  break;
 80029bc:	e142      	b.n	8002c44 <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 80029be:	f7ff f969 	bl	8001c94 <micros>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4904      	ldr	r1, [pc, #16]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 80029c8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 2;
 80029cc:	4b02      	ldr	r3, [pc, #8]	; (80029d8 <TrajectoryGenerationProcess+0x558>)
 80029ce:	2202      	movs	r2, #2
 80029d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 80029d4:	e136      	b.n	8002c44 <TrajectoryGenerationProcess+0x7c4>
 80029d6:	bf00      	nop
 80029d8:	20000178 	.word	0x20000178
 80029dc:	49742400 	.word	0x49742400
 80029e0:	3fe00000 	.word	0x3fe00000
			  else if (TrjStruc.Submode == 2)
 80029e4:	4b9b      	ldr	r3, [pc, #620]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 80029e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	f040 812a 	bne.w	8002c44 <TrajectoryGenerationProcess+0x7c4>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80029f0:	4b98      	ldr	r3, [pc, #608]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fd53 	bl	80004a0 <__aeabi_f2d>
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	4b96      	ldr	r3, [pc, #600]	; (8002c58 <TrajectoryGenerationProcess+0x7d8>)
 8002a00:	f7fd fda6 	bl	8000550 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4614      	mov	r4, r2
 8002a0a:	461d      	mov	r5, r3
 8002a0c:	4b91      	ldr	r3, [pc, #580]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002a0e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002a12:	4b90      	ldr	r3, [pc, #576]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002a14:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002a18:	f7fd fd9a 	bl	8000550 <__aeabi_dmul>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4620      	mov	r0, r4
 8002a22:	4629      	mov	r1, r5
 8002a24:	f7fd fd94 	bl	8000550 <__aeabi_dmul>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002a30:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fd33 	bl	80004a0 <__aeabi_f2d>
 8002a3a:	4b86      	ldr	r3, [pc, #536]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002a3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002a40:	f7fd fd86 	bl	8000550 <__aeabi_dmul>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4620      	mov	r0, r4
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	f7fd fbca 	bl	80001e4 <__adddf3>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4614      	mov	r4, r2
 8002a56:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 8002a58:	4b7e      	ldr	r3, [pc, #504]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fd fd1f 	bl	80004a0 <__aeabi_f2d>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4620      	mov	r0, r4
 8002a68:	4629      	mov	r1, r5
 8002a6a:	f7fd fbbb 	bl	80001e4 <__adddf3>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	f7fe f83b 	bl	8000af0 <__aeabi_d2f>
 8002a7a:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002a7c:	4a75      	ldr	r2, [pc, #468]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002a7e:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 8002a80:	4b74      	ldr	r3, [pc, #464]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d142      	bne.n	8002b10 <TrajectoryGenerationProcess+0x690>
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 8002a8a:	4b72      	ldr	r3, [pc, #456]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002a8c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a90:	eef1 7a67 	vneg.f32	s15, s15
 8002a94:	ee17 3a90 	vmov	r3, s15
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fd fd01 	bl	80004a0 <__aeabi_f2d>
 8002a9e:	4b6d      	ldr	r3, [pc, #436]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002aa0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002aa4:	f7fd fd54 	bl	8000550 <__aeabi_dmul>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4614      	mov	r4, r2
 8002aae:	461d      	mov	r5, r3
							                           + ( TrjStruc.AngularVelocity );
 8002ab0:	4b68      	ldr	r3, [pc, #416]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fcf3 	bl	80004a0 <__aeabi_f2d>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4620      	mov	r0, r4
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	f7fd fb8f 	bl	80001e4 <__adddf3>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	f7fe f80f 	bl	8000af0 <__aeabi_d2f>
 8002ad2:	4603      	mov	r3, r0
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 8002ad4:	4a5f      	ldr	r2, [pc, #380]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002ad6:	6253      	str	r3, [r2, #36]	; 0x24
					  if (  TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <=  TrjStruc.AngularVelocityFinalMin )
 8002ad8:	4b5e      	ldr	r3, [pc, #376]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002ada:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002ade:	4b5d      	ldr	r3, [pc, #372]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002ae0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae8:	4b5a      	ldr	r3, [pc, #360]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002aea:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002aee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af6:	d866      	bhi.n	8002bc6 <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 1;
 8002af8:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 8002b00:	f7ff f8c8 	bl	8001c94 <micros>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4952      	ldr	r1, [pc, #328]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002b0a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002b0e:	e05a      	b.n	8002bc6 <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 1 )
 8002b10:	4b50      	ldr	r3, [pc, #320]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d14c      	bne.n	8002bb4 <TrajectoryGenerationProcess+0x734>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 8002b1a:	4b4e      	ldr	r3, [pc, #312]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002b1c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002b20:	4b4c      	ldr	r3, [pc, #304]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002b22:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002b2c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeLSPB*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 8002b30:	f7ff f8b0 	bl	8001c94 <micros>
 8002b34:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002b36:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002b3a:	1a84      	subs	r4, r0, r2
 8002b3c:	613c      	str	r4, [r7, #16]
 8002b3e:	eb61 0303 	sbc.w	r3, r1, r3
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b48:	f7fd fccc 	bl	80004e4 <__aeabi_ul2d>
 8002b4c:	4604      	mov	r4, r0
 8002b4e:	460d      	mov	r5, r1
 8002b50:	4b40      	ldr	r3, [pc, #256]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002c5c <TrajectoryGenerationProcess+0x7dc>
 8002b5a:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002b60:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002b64:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002b66:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002b6a:	1a86      	subs	r6, r0, r2
 8002b6c:	60be      	str	r6, [r7, #8]
 8002b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b78:	f7fe f8d2 	bl	8000d20 <__aeabi_ul2f>
 8002b7c:	ee07 0a90 	vmov	s15, r0
 8002b80:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002b84:	ee17 0a90 	vmov	r0, s15
 8002b88:	f7fd fc8a 	bl	80004a0 <__aeabi_f2d>
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b94:	f7fd fe06 	bl	80007a4 <__aeabi_ddiv>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	f7fd ff5c 	bl	8000a5c <__aeabi_dcmpge>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00d      	beq.n	8002bc6 <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 2;
 8002baa:	4b2a      	ldr	r3, [pc, #168]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002bac:	2202      	movs	r2, #2
 8002bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002bb2:	e008      	b.n	8002bc6 <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 2 )
 8002bb4:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d103      	bne.n	8002bc6 <TrajectoryGenerationProcess+0x746>
					  TrjStruc.AngularVelocityDesire = 0;
 8002bbe:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002bc6:	f7ff f865 	bl	8001c94 <micros>
 8002bca:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002bcc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002bd0:	1a84      	subs	r4, r0, r2
 8002bd2:	603c      	str	r4, [r7, #0]
 8002bd4:	eb61 0303 	sbc.w	r3, r1, r3
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bde:	f7fe f89f 	bl	8000d20 <__aeabi_ul2f>
 8002be2:	ee06 0a90 	vmov	s13, r0
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002c5c <TrajectoryGenerationProcess+0x7dc>
 8002bf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf4:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfc:	da00      	bge.n	8002c00 <TrajectoryGenerationProcess+0x780>
			  break;
 8002bfe:	e021      	b.n	8002c44 <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002c00:	f7ff f848 	bl	8001c94 <micros>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4912      	ldr	r1, [pc, #72]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002c0a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 8002c16:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002c20:	2202      	movs	r2, #2
 8002c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 8002c26:	e00d      	b.n	8002c44 <TrajectoryGenerationProcess+0x7c4>
			  Moving_Link_Task_Flag = 1;
 8002c28:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <TrajectoryGenerationProcess+0x7e0>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c32:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002c34:	6213      	str	r3, [r2, #32]
			  TrjStruc.AngularVelocityDesire = 0;
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <TrajectoryGenerationProcess+0x7d4>)
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
			  break;
 8002c3e:	e002      	b.n	8002c46 <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002c40:	bf00      	nop
 8002c42:	e000      	b.n	8002c46 <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002c44:	bf00      	nop
}
 8002c46:	bf00      	nop
 8002c48:	3744      	adds	r7, #68	; 0x44
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	ecbd 8b02 	vpop	{d8}
 8002c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c54:	20000178 	.word	0x20000178
 8002c58:	bfe00000 	.word	0xbfe00000
 8002c5c:	49742400 	.word	0x49742400
 8002c60:	200000f8 	.word	0x200000f8

08002c64 <PIDController2in1>:

void PIDController2in1()
{
 8002c64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c68:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 8002c6a:	4b85      	ldr	r3, [pc, #532]	; (8002e80 <PIDController2in1+0x21c>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4a85      	ldr	r2, [pc, #532]	; (8002e84 <PIDController2in1+0x220>)
 8002c70:	6193      	str	r3, [r2, #24]
    PositionPIDController.NowError = PositionPIDController.OutputDesire - PositionPIDController.OutputFeedback;
 8002c72:	4b84      	ldr	r3, [pc, #528]	; (8002e84 <PIDController2in1+0x220>)
 8002c74:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c78:	4b82      	ldr	r3, [pc, #520]	; (8002e84 <PIDController2in1+0x220>)
 8002c7a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c82:	4b80      	ldr	r3, [pc, #512]	; (8002e84 <PIDController2in1+0x220>)
 8002c84:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 8002c88:	4b7e      	ldr	r3, [pc, #504]	; (8002e84 <PIDController2in1+0x220>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd fc07 	bl	80004a0 <__aeabi_f2d>
 8002c92:	4604      	mov	r4, r0
 8002c94:	460d      	mov	r5, r1
 8002c96:	4b7b      	ldr	r3, [pc, #492]	; (8002e84 <PIDController2in1+0x220>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fc00 	bl	80004a0 <__aeabi_f2d>
 8002ca0:	4b78      	ldr	r3, [pc, #480]	; (8002e84 <PIDController2in1+0x220>)
 8002ca2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ca6:	f7fd fc53 	bl	8000550 <__aeabi_dmul>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4620      	mov	r0, r4
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	f7fd fa97 	bl	80001e4 <__adddf3>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f7fd ff17 	bl	8000af0 <__aeabi_d2f>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4a6f      	ldr	r2, [pc, #444]	; (8002e84 <PIDController2in1+0x220>)
 8002cc6:	6213      	str	r3, [r2, #32]
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002cc8:	4b6e      	ldr	r3, [pc, #440]	; (8002e84 <PIDController2in1+0x220>)
 8002cca:	ed93 7a00 	vldr	s14, [r3]
 8002cce:	4b6d      	ldr	r3, [pc, #436]	; (8002e84 <PIDController2in1+0x220>)
 8002cd0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 8002cd8:	4b6a      	ldr	r3, [pc, #424]	; (8002e84 <PIDController2in1+0x220>)
 8002cda:	edd3 6a01 	vldr	s13, [r3, #4]
 8002cde:	4b69      	ldr	r3, [pc, #420]	; (8002e84 <PIDController2in1+0x220>)
 8002ce0:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cec:	ee17 0a90 	vmov	r0, s15
 8002cf0:	f7fd fbd6 	bl	80004a0 <__aeabi_f2d>
 8002cf4:	4604      	mov	r4, r0
 8002cf6:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime)
 8002cf8:	4b62      	ldr	r3, [pc, #392]	; (8002e84 <PIDController2in1+0x220>)
 8002cfa:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cfe:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <PIDController2in1+0x220>)
 8002d00:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002d04:	4b5f      	ldr	r3, [pc, #380]	; (8002e84 <PIDController2in1+0x220>)
 8002d06:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d0a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d12:	ee17 0a90 	vmov	r0, s15
 8002d16:	f7fd fbc3 	bl	80004a0 <__aeabi_f2d>
 8002d1a:	4b5a      	ldr	r3, [pc, #360]	; (8002e84 <PIDController2in1+0x220>)
 8002d1c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002d20:	f7fd fd40 	bl	80007a4 <__aeabi_ddiv>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4620      	mov	r0, r4
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	f7fd fa5a 	bl	80001e4 <__adddf3>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4614      	mov	r4, r2
 8002d36:	461d      	mov	r5, r3
					  +(PositionPIDController.offSet);
 8002d38:	4b52      	ldr	r3, [pc, #328]	; (8002e84 <PIDController2in1+0x220>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fbaf 	bl	80004a0 <__aeabi_f2d>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4620      	mov	r0, r4
 8002d48:	4629      	mov	r1, r5
 8002d4a:	f7fd fa4b 	bl	80001e4 <__adddf3>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	f7fd fecb 	bl	8000af0 <__aeabi_d2f>
 8002d5a:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002d5c:	4a49      	ldr	r2, [pc, #292]	; (8002e84 <PIDController2in1+0x220>)
 8002d5e:	6113      	str	r3, [r2, #16]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 8002d60:	4b48      	ldr	r3, [pc, #288]	; (8002e84 <PIDController2in1+0x220>)
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	4a47      	ldr	r2, [pc, #284]	; (8002e84 <PIDController2in1+0x220>)
 8002d66:	6293      	str	r3, [r2, #40]	; 0x28
//					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime)
//					  +(VelocityPIDController.offSet);
//    VelocityPIDController.PreviousError = VelocityPIDController.NowError;

    // Error Term
    VelocityPIDController.OutputDesire = PositionPIDController.ControllerOutput + TrjStruc.AngularVelocityDesire;
 8002d68:	4b46      	ldr	r3, [pc, #280]	; (8002e84 <PIDController2in1+0x220>)
 8002d6a:	ed93 7a04 	vldr	s14, [r3, #16]
 8002d6e:	4b44      	ldr	r3, [pc, #272]	; (8002e80 <PIDController2in1+0x21c>)
 8002d70:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d78:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <PIDController2in1+0x224>)
 8002d7a:	edc3 7a06 	vstr	s15, [r3, #24]
    VelocityPIDController.NowError = VelocityPIDController.OutputDesire - VelocityPIDController.OutputFeedback;
 8002d7e:	4b42      	ldr	r3, [pc, #264]	; (8002e88 <PIDController2in1+0x224>)
 8002d80:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d84:	4b40      	ldr	r3, [pc, #256]	; (8002e88 <PIDController2in1+0x224>)
 8002d86:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d8e:	4b3e      	ldr	r3, [pc, #248]	; (8002e88 <PIDController2in1+0x224>)
 8002d90:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Calculate Output of the Controller
    VelocityPIDController.ControllerOutput = VelocityPIDController.PreviousControllerOutput +
 8002d94:	4b3c      	ldr	r3, [pc, #240]	; (8002e88 <PIDController2in1+0x224>)
 8002d96:	ed93 7a05 	vldr	s14, [r3, #20]
    		(( VelocityPIDController.Kp + VelocityPIDController.Ki + VelocityPIDController.Kd ) * VelocityPIDController.NowError ) -
 8002d9a:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <PIDController2in1+0x224>)
 8002d9c:	edd3 6a00 	vldr	s13, [r3]
 8002da0:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <PIDController2in1+0x224>)
 8002da2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002da6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002daa:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <PIDController2in1+0x224>)
 8002dac:	edd3 7a02 	vldr	s15, [r3, #8]
 8002db0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002db4:	4b34      	ldr	r3, [pc, #208]	; (8002e88 <PIDController2in1+0x224>)
 8002db6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
    VelocityPIDController.ControllerOutput = VelocityPIDController.PreviousControllerOutput +
 8002dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc2:	ee17 0a90 	vmov	r0, s15
 8002dc6:	f7fd fb6b 	bl	80004a0 <__aeabi_f2d>
 8002dca:	4604      	mov	r4, r0
 8002dcc:	460d      	mov	r5, r1
			(( VelocityPIDController.Kp + ( 2.0 * VelocityPIDController.Kd )) * VelocityPIDController.PreviousError ) +
 8002dce:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <PIDController2in1+0x224>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fb64 	bl	80004a0 <__aeabi_f2d>
 8002dd8:	4680      	mov	r8, r0
 8002dda:	4689      	mov	r9, r1
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <PIDController2in1+0x224>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd fb5d 	bl	80004a0 <__aeabi_f2d>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	f7fd f9fb 	bl	80001e4 <__adddf3>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4640      	mov	r0, r8
 8002df4:	4649      	mov	r1, r9
 8002df6:	f7fd f9f5 	bl	80001e4 <__adddf3>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4690      	mov	r8, r2
 8002e00:	4699      	mov	r9, r3
 8002e02:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <PIDController2in1+0x224>)
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd fb4a 	bl	80004a0 <__aeabi_f2d>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4640      	mov	r0, r8
 8002e12:	4649      	mov	r1, r9
 8002e14:	f7fd fb9c 	bl	8000550 <__aeabi_dmul>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
    		(( VelocityPIDController.Kp + VelocityPIDController.Ki + VelocityPIDController.Kd ) * VelocityPIDController.NowError ) -
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	4629      	mov	r1, r5
 8002e20:	f7fd f9de 	bl	80001e0 <__aeabi_dsub>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4614      	mov	r4, r2
 8002e2a:	461d      	mov	r5, r3
			( VelocityPIDController.Kd *  VelocityPIDController.PreviousPreviousError );
 8002e2c:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <PIDController2in1+0x224>)
 8002e2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <PIDController2in1+0x224>)
 8002e34:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3c:	ee17 0a90 	vmov	r0, s15
 8002e40:	f7fd fb2e 	bl	80004a0 <__aeabi_f2d>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
			(( VelocityPIDController.Kp + ( 2.0 * VelocityPIDController.Kd )) * VelocityPIDController.PreviousError ) +
 8002e48:	4620      	mov	r0, r4
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	f7fd f9ca 	bl	80001e4 <__adddf3>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4610      	mov	r0, r2
 8002e56:	4619      	mov	r1, r3
 8002e58:	f7fd fe4a 	bl	8000af0 <__aeabi_d2f>
 8002e5c:	4603      	mov	r3, r0
    VelocityPIDController.ControllerOutput = VelocityPIDController.PreviousControllerOutput +
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <PIDController2in1+0x224>)
 8002e60:	6113      	str	r3, [r2, #16]

    // Updating Process
    VelocityPIDController.PreviousPreviousError = VelocityPIDController.PreviousError;
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <PIDController2in1+0x224>)
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	4a08      	ldr	r2, [pc, #32]	; (8002e88 <PIDController2in1+0x224>)
 8002e68:	62d3      	str	r3, [r2, #44]	; 0x2c
    VelocityPIDController.PreviousError = VelocityPIDController.NowError;
 8002e6a:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <PIDController2in1+0x224>)
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <PIDController2in1+0x224>)
 8002e70:	6293      	str	r3, [r2, #40]	; 0x28
    VelocityPIDController.PreviousControllerOutput =  VelocityPIDController.ControllerOutput;
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <PIDController2in1+0x224>)
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	4a04      	ldr	r2, [pc, #16]	; (8002e88 <PIDController2in1+0x224>)
 8002e78:	6153      	str	r3, [r2, #20]

}
 8002e7a:	bf00      	nop
 8002e7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e80:	20000178 	.word	0x20000178
 8002e84:	20000108 	.word	0x20000108
 8002e88:	20000140 	.word	0x20000140

08002e8c <UARTInit>:



///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002e94:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <UARTInit+0x4c>)
 8002e96:	88db      	ldrh	r3, [r3, #6]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f006 fd8c 	bl	80099b8 <calloc>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <UARTInit+0x4c>)
 8002eaa:	889b      	ldrh	r3, [r3, #4]
 8002eac:	4619      	mov	r1, r3
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f006 fd82 	bl	80099b8 <calloc>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	81da      	strh	r2, [r3, #14]
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200000b8 	.word	0x200000b8

08002edc <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6919      	ldr	r1, [r3, #16]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	88db      	ldrh	r3, [r3, #6]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f005 fedd 	bl	8008cb0 <HAL_UART_Receive_DMA>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	88db      	ldrh	r3, [r3, #6]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	1ad3      	subs	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8002f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f30:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8a9b      	ldrh	r3, [r3, #20]
 8002f36:	461c      	mov	r4, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ffe0 	bl	8002efe <UARTGetRxHead>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	429c      	cmp	r4, r3
 8002f42:	d013      	beq.n	8002f6c <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	8a92      	ldrh	r2, [r2, #20]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8a9b      	ldrh	r3, [r3, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	88d2      	ldrh	r2, [r2, #6]
 8002f5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f60:	fb02 f201 	mul.w	r2, r2, r1
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8002f6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd90      	pop	{r4, r7, pc}

08002f78 <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d13d      	bne.n	800300a <UARTTxDumpBuffer+0x92>
 8002f8e:	4b21      	ldr	r3, [pc, #132]	; (8003014 <UARTTxDumpBuffer+0x9c>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d139      	bne.n	800300a <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8002f96:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <UARTTxDumpBuffer+0x9c>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	89da      	ldrh	r2, [r3, #14]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	899b      	ldrh	r3, [r3, #12]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d02d      	beq.n	8003004 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	89da      	ldrh	r2, [r3, #14]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d906      	bls.n	8002fc2 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	89da      	ldrh	r2, [r3, #14]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	e005      	b.n	8002fce <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	889a      	ldrh	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	8992      	ldrh	r2, [r2, #12]
 8002fdc:	4413      	add	r3, r2
 8002fde:	89fa      	ldrh	r2, [r7, #14]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f005 fdf9 	bl	8008bd8 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	899b      	ldrh	r3, [r3, #12]
 8002fea:	461a      	mov	r2, r3
 8002fec:	89fb      	ldrh	r3, [r7, #14]
 8002fee:	4413      	add	r3, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	8892      	ldrh	r2, [r2, #4]
 8002ff4:	fb93 f1f2 	sdiv	r1, r3, r2
 8002ff8:	fb02 f201 	mul.w	r2, r2, r1
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <UARTTxDumpBuffer+0x9c>)
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
	}
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000238 	.word	0x20000238

08003018 <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	4613      	mov	r3, r2
 8003024:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	889b      	ldrh	r3, [r3, #4]
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	4293      	cmp	r3, r2
 800302e:	bf28      	it	cs
 8003030:	4613      	movcs	r3, r2
 8003032:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8003034:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	889b      	ldrh	r3, [r3, #4]
 800303a:	4619      	mov	r1, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	89db      	ldrh	r3, [r3, #14]
 8003040:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8003042:	4293      	cmp	r3, r2
 8003044:	bfa8      	it	ge
 8003046:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8003048:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	89d2      	ldrh	r2, [r2, #14]
 8003052:	4413      	add	r3, r2
 8003054:	8aba      	ldrh	r2, [r7, #20]
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	4618      	mov	r0, r3
 800305a:	f006 fcdf 	bl	8009a1c <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	89db      	ldrh	r3, [r3, #14]
 8003062:	461a      	mov	r2, r3
 8003064:	8afb      	ldrh	r3, [r7, #22]
 8003066:	4413      	add	r3, r2
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	8892      	ldrh	r2, [r2, #4]
 800306c:	fb93 f1f2 	sdiv	r1, r3, r2
 8003070:	fb02 f201 	mul.w	r2, r2, r1
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 800307c:	8afa      	ldrh	r2, [r7, #22]
 800307e:	8abb      	ldrh	r3, [r7, #20]
 8003080:	429a      	cmp	r2, r3
 8003082:	d00a      	beq.n	800309a <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6898      	ldr	r0, [r3, #8]
 8003088:	8abb      	ldrh	r3, [r7, #20]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 800308e:	8afa      	ldrh	r2, [r7, #22]
 8003090:	8abb      	ldrh	r3, [r7, #20]
 8003092:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003094:	461a      	mov	r2, r3
 8003096:	f006 fcc1 	bl	8009a1c <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7ff ff6c 	bl	8002f78 <UARTTxDumpBuffer>

}
 80030a0:	bf00      	nop
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 80030b0:	f247 5358 	movw	r3, #30040	; 0x7558
 80030b4:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 80030b6:	f107 030c 	add.w	r3, r7, #12
 80030ba:	2202      	movs	r2, #2
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ffaa 	bl	8003018 <UARTTxWrite>
	}
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 80030d4:	f646 6346 	movw	r3, #28230	; 0x6e46
 80030d8:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 80030da:	f107 030c 	add.w	r3, r7, #12
 80030de:	2202      	movs	r2, #2
 80030e0:	4619      	mov	r1, r3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ff98 	bl	8003018 <UARTTxWrite>
	}
}
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 80030f0:	b5b0      	push	{r4, r5, r7, lr}
 80030f2:	b08e      	sub	sp, #56	; 0x38
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	6039      	str	r1, [r7, #0]
 80030fa:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 80030fc:	4b8b      	ldr	r3, [pc, #556]	; (800332c <Munmunbot_Protocol+0x23c>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b05      	cmp	r3, #5
 8003102:	f200 8408 	bhi.w	8003916 <Munmunbot_Protocol+0x826>
 8003106:	a201      	add	r2, pc, #4	; (adr r2, 800310c <Munmunbot_Protocol+0x1c>)
 8003108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310c:	08003125 	.word	0x08003125
 8003110:	080031d9 	.word	0x080031d9
 8003114:	0800321b 	.word	0x0800321b
 8003118:	08003269 	.word	0x08003269
 800311c:	0800328d 	.word	0x0800328d
 8003120:	0800334d 	.word	0x0800334d
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 8003124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003128:	111b      	asrs	r3, r3, #4
 800312a:	b21b      	sxth	r3, r3
 800312c:	b29b      	uxth	r3, r3
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	2b09      	cmp	r3, #9
 8003134:	f040 83ec 	bne.w	8003910 <Munmunbot_Protocol+0x820>
			{
				CheckSum = dataIn;
 8003138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800313c:	4a7c      	ldr	r2, [pc, #496]	; (8003330 <Munmunbot_Protocol+0x240>)
 800313e:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4b7a      	ldr	r3, [pc, #488]	; (8003334 <Munmunbot_Protocol+0x244>)
 800314c:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 800314e:	4b79      	ldr	r3, [pc, #484]	; (8003334 <Munmunbot_Protocol+0x244>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b07      	cmp	r3, #7
 8003154:	d103      	bne.n	800315e <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 8003156:	4b75      	ldr	r3, [pc, #468]	; (800332c <Munmunbot_Protocol+0x23c>)
 8003158:	2203      	movs	r2, #3
 800315a:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 800315c:	e3d8      	b.n	8003910 <Munmunbot_Protocol+0x820>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 800315e:	4b75      	ldr	r3, [pc, #468]	; (8003334 <Munmunbot_Protocol+0x244>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d00b      	beq.n	800317e <Munmunbot_Protocol+0x8e>
 8003166:	4b73      	ldr	r3, [pc, #460]	; (8003334 <Munmunbot_Protocol+0x244>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b04      	cmp	r3, #4
 800316c:	d007      	beq.n	800317e <Munmunbot_Protocol+0x8e>
 800316e:	4b71      	ldr	r3, [pc, #452]	; (8003334 <Munmunbot_Protocol+0x244>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d003      	beq.n	800317e <Munmunbot_Protocol+0x8e>
 8003176:	4b6f      	ldr	r3, [pc, #444]	; (8003334 <Munmunbot_Protocol+0x244>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b06      	cmp	r3, #6
 800317c:	d103      	bne.n	8003186 <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 800317e:	4b6b      	ldr	r3, [pc, #428]	; (800332c <Munmunbot_Protocol+0x23c>)
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
			break;
 8003184:	e3c4      	b.n	8003910 <Munmunbot_Protocol+0x820>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8003186:	4b6b      	ldr	r3, [pc, #428]	; (8003334 <Munmunbot_Protocol+0x244>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d020      	beq.n	80031d0 <Munmunbot_Protocol+0xe0>
 800318e:	4b69      	ldr	r3, [pc, #420]	; (8003334 <Munmunbot_Protocol+0x244>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d01c      	beq.n	80031d0 <Munmunbot_Protocol+0xe0>
 8003196:	4b67      	ldr	r3, [pc, #412]	; (8003334 <Munmunbot_Protocol+0x244>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b08      	cmp	r3, #8
 800319c:	d018      	beq.n	80031d0 <Munmunbot_Protocol+0xe0>
 800319e:	4b65      	ldr	r3, [pc, #404]	; (8003334 <Munmunbot_Protocol+0x244>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b09      	cmp	r3, #9
 80031a4:	d014      	beq.n	80031d0 <Munmunbot_Protocol+0xe0>
 80031a6:	4b63      	ldr	r3, [pc, #396]	; (8003334 <Munmunbot_Protocol+0x244>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b0a      	cmp	r3, #10
 80031ac:	d010      	beq.n	80031d0 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 80031ae:	4b61      	ldr	r3, [pc, #388]	; (8003334 <Munmunbot_Protocol+0x244>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 80031b2:	2b0b      	cmp	r3, #11
 80031b4:	d00c      	beq.n	80031d0 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 80031b6:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <Munmunbot_Protocol+0x244>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d008      	beq.n	80031d0 <Munmunbot_Protocol+0xe0>
 80031be:	4b5d      	ldr	r3, [pc, #372]	; (8003334 <Munmunbot_Protocol+0x244>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b0d      	cmp	r3, #13
 80031c4:	d004      	beq.n	80031d0 <Munmunbot_Protocol+0xe0>
 80031c6:	4b5b      	ldr	r3, [pc, #364]	; (8003334 <Munmunbot_Protocol+0x244>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b0e      	cmp	r3, #14
 80031cc:	f040 83a0 	bne.w	8003910 <Munmunbot_Protocol+0x820>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 80031d0:	4b56      	ldr	r3, [pc, #344]	; (800332c <Munmunbot_Protocol+0x23c>)
 80031d2:	2205      	movs	r2, #5
 80031d4:	701a      	strb	r2, [r3, #0]
			break;
 80031d6:	e39b      	b.n	8003910 <Munmunbot_Protocol+0x820>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 80031d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031dc:	4b54      	ldr	r3, [pc, #336]	; (8003330 <Munmunbot_Protocol+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	4a53      	ldr	r2, [pc, #332]	; (8003330 <Munmunbot_Protocol+0x240>)
 80031e4:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	4b52      	ldr	r3, [pc, #328]	; (8003338 <Munmunbot_Protocol+0x248>)
 80031ee:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4b50      	ldr	r3, [pc, #320]	; (800333c <Munmunbot_Protocol+0x24c>)
 80031fc:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 80031fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003202:	111b      	asrs	r3, r3, #4
 8003204:	b21b      	sxth	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	b2da      	uxtb	r2, r3
 800320e:	4b4b      	ldr	r3, [pc, #300]	; (800333c <Munmunbot_Protocol+0x24c>)
 8003210:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 8003212:	4b46      	ldr	r3, [pc, #280]	; (800332c <Munmunbot_Protocol+0x23c>)
 8003214:	2202      	movs	r2, #2
 8003216:	701a      	strb	r2, [r3, #0]

			 break;
 8003218:	e37d      	b.n	8003916 <Munmunbot_Protocol+0x826>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 800321a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800321e:	4b44      	ldr	r3, [pc, #272]	; (8003330 <Munmunbot_Protocol+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4413      	add	r3, r2
 8003224:	4a42      	ldr	r2, [pc, #264]	; (8003330 <Munmunbot_Protocol+0x240>)
 8003226:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	b21a      	sxth	r2, r3
 800322e:	4b42      	ldr	r3, [pc, #264]	; (8003338 <Munmunbot_Protocol+0x248>)
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b21b      	sxth	r3, r3
 8003234:	4313      	orrs	r3, r2
 8003236:	b21b      	sxth	r3, r3
 8003238:	b29a      	uxth	r2, r3
 800323a:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <Munmunbot_Protocol+0x248>)
 800323c:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	b2da      	uxtb	r2, r3
 8003248:	4b3c      	ldr	r3, [pc, #240]	; (800333c <Munmunbot_Protocol+0x24c>)
 800324a:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 800324c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003250:	111b      	asrs	r3, r3, #4
 8003252:	b21b      	sxth	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	b2da      	uxtb	r2, r3
 800325c:	4b37      	ldr	r3, [pc, #220]	; (800333c <Munmunbot_Protocol+0x24c>)
 800325e:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <Munmunbot_Protocol+0x23c>)
 8003262:	2205      	movs	r2, #5
 8003264:	701a      	strb	r2, [r3, #0]
			 break;
 8003266:	e356      	b.n	8003916 <Munmunbot_Protocol+0x826>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 8003268:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800326c:	4b30      	ldr	r3, [pc, #192]	; (8003330 <Munmunbot_Protocol+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4413      	add	r3, r2
 8003272:	4a2f      	ldr	r2, [pc, #188]	; (8003330 <Munmunbot_Protocol+0x240>)
 8003274:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 8003276:	88fa      	ldrh	r2, [r7, #6]
 8003278:	4b31      	ldr	r3, [pc, #196]	; (8003340 <Munmunbot_Protocol+0x250>)
 800327a:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 800327c:	4b30      	ldr	r3, [pc, #192]	; (8003340 <Munmunbot_Protocol+0x250>)
 800327e:	881a      	ldrh	r2, [r3, #0]
 8003280:	4b30      	ldr	r3, [pc, #192]	; (8003344 <Munmunbot_Protocol+0x254>)
 8003282:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 8003284:	4b29      	ldr	r3, [pc, #164]	; (800332c <Munmunbot_Protocol+0x23c>)
 8003286:	2204      	movs	r2, #4
 8003288:	701a      	strb	r2, [r3, #0]

		   break;
 800328a:	e344      	b.n	8003916 <Munmunbot_Protocol+0x826>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 800328c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003290:	4b27      	ldr	r3, [pc, #156]	; (8003330 <Munmunbot_Protocol+0x240>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4413      	add	r3, r2
 8003296:	4a26      	ldr	r2, [pc, #152]	; (8003330 <Munmunbot_Protocol+0x240>)
 8003298:	6013      	str	r3, [r2, #0]
				if (n_station >= 2)
 800329a:	4b29      	ldr	r3, [pc, #164]	; (8003340 <Munmunbot_Protocol+0x250>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d927      	bls.n	80032f2 <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	4a28      	ldr	r2, [pc, #160]	; (8003348 <Munmunbot_Protocol+0x258>)
 80032a8:	7812      	ldrb	r2, [r2, #0]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	b2d9      	uxtb	r1, r3
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <Munmunbot_Protocol+0x24c>)
 80032b2:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 80032b4:	4b24      	ldr	r3, [pc, #144]	; (8003348 <Munmunbot_Protocol+0x258>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	4b22      	ldr	r3, [pc, #136]	; (8003348 <Munmunbot_Protocol+0x258>)
 80032be:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 80032c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032c4:	111b      	asrs	r3, r3, #4
 80032c6:	b21b      	sxth	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	4a1f      	ldr	r2, [pc, #124]	; (8003348 <Munmunbot_Protocol+0x258>)
 80032cc:	7812      	ldrb	r2, [r2, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	b2d9      	uxtb	r1, r3
 80032d4:	4b19      	ldr	r3, [pc, #100]	; (800333c <Munmunbot_Protocol+0x24c>)
 80032d6:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <Munmunbot_Protocol+0x258>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	3301      	adds	r3, #1
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <Munmunbot_Protocol+0x258>)
 80032e2:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 80032e4:	4b16      	ldr	r3, [pc, #88]	; (8003340 <Munmunbot_Protocol+0x250>)
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	3b02      	subs	r3, #2
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <Munmunbot_Protocol+0x250>)
 80032ee:	801a      	strh	r2, [r3, #0]
 80032f0:	e012      	b.n	8003318 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 80032f2:	4b13      	ldr	r3, [pc, #76]	; (8003340 <Munmunbot_Protocol+0x250>)
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d10e      	bne.n	8003318 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <Munmunbot_Protocol+0x258>)
 8003300:	7812      	ldrb	r2, [r2, #0]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	b2d9      	uxtb	r1, r3
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <Munmunbot_Protocol+0x24c>)
 800330a:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <Munmunbot_Protocol+0x250>)
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <Munmunbot_Protocol+0x250>)
 8003316:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <Munmunbot_Protocol+0x250>)
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 82f9 	bne.w	8003914 <Munmunbot_Protocol+0x824>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 8003322:	4b02      	ldr	r3, [pc, #8]	; (800332c <Munmunbot_Protocol+0x23c>)
 8003324:	2205      	movs	r2, #5
 8003326:	701a      	strb	r2, [r3, #0]
				}
				break;
 8003328:	e2f4      	b.n	8003914 <Munmunbot_Protocol+0x824>
 800332a:	bf00      	nop
 800332c:	200000d8 	.word	0x200000d8
 8003330:	2000023c 	.word	0x2000023c
 8003334:	20000240 	.word	0x20000240
 8003338:	20000242 	.word	0x20000242
 800333c:	20000244 	.word	0x20000244
 8003340:	20000344 	.word	0x20000344
 8003344:	20000346 	.word	0x20000346
 8003348:	20000348 	.word	0x20000348

			case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 800334c:	4bb0      	ldr	r3, [pc, #704]	; (8003610 <Munmunbot_Protocol+0x520>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	43db      	mvns	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	4aae      	ldr	r2, [pc, #696]	; (8003610 <Munmunbot_Protocol+0x520>)
 8003356:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 8003358:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800335c:	4bac      	ldr	r3, [pc, #688]	; (8003610 <Munmunbot_Protocol+0x520>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	f040 82c1 	bne.w	80038e8 <Munmunbot_Protocol+0x7f8>
				{

					switch (ProtocolMode)
 8003366:	4bab      	ldr	r3, [pc, #684]	; (8003614 <Munmunbot_Protocol+0x524>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	3b01      	subs	r3, #1
 800336c:	2b0d      	cmp	r3, #13
 800336e:	f200 82bc 	bhi.w	80038ea <Munmunbot_Protocol+0x7fa>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <Munmunbot_Protocol+0x288>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	080033b1 	.word	0x080033b1
 800337c:	08003425 	.word	0x08003425
 8003380:	0800343b 	.word	0x0800343b
 8003384:	08003451 	.word	0x08003451
 8003388:	080034a1 	.word	0x080034a1
 800338c:	080034bf 	.word	0x080034bf
 8003390:	080034e3 	.word	0x080034e3
 8003394:	0800352d 	.word	0x0800352d
 8003398:	08003557 	.word	0x08003557
 800339c:	08003655 	.word	0x08003655
 80033a0:	08003767 	.word	0x08003767
 80033a4:	080038a1 	.word	0x080038a1
 80033a8:	080038b7 	.word	0x080038b7
 80033ac:	080038cd 	.word	0x080038cd
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 80033b0:	2391      	movs	r3, #145	; 0x91
 80033b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 80033b6:	4b98      	ldr	r3, [pc, #608]	; (8003618 <Munmunbot_Protocol+0x528>)
 80033b8:	785b      	ldrb	r3, [r3, #1]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	b25a      	sxtb	r2, r3
 80033be:	4b96      	ldr	r3, [pc, #600]	; (8003618 <Munmunbot_Protocol+0x528>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	b25b      	sxtb	r3, r3
 80033c4:	4313      	orrs	r3, r2
 80033c6:	b25b      	sxtb	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 80033ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 80033ce:	4b92      	ldr	r3, [pc, #584]	; (8003618 <Munmunbot_Protocol+0x528>)
 80033d0:	78db      	ldrb	r3, [r3, #3]
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	b25a      	sxtb	r2, r3
 80033d6:	4b90      	ldr	r3, [pc, #576]	; (8003618 <Munmunbot_Protocol+0x528>)
 80033d8:	789b      	ldrb	r3, [r3, #2]
 80033da:	b25b      	sxtb	r3, r3
 80033dc:	4313      	orrs	r3, r2
 80033de:	b25b      	sxtb	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 80033e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80033e6:	2300      	movs	r3, #0
 80033e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033ec:	2358      	movs	r3, #88	; 0x58
 80033ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80033f2:	2375      	movs	r3, #117	; 0x75
 80033f4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 80033f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80033fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003400:	4413      	add	r3, r2
 8003402:	b2da      	uxtb	r2, r3
 8003404:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003408:	4413      	add	r3, r2
 800340a:	b2db      	uxtb	r3, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						UARTTxWrite(uart, temp, 6);
 8003414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003418:	2206      	movs	r2, #6
 800341a:	4619      	mov	r1, r3
 800341c:	6838      	ldr	r0, [r7, #0]
 800341e:	f7ff fdfb 	bl	8003018 <UARTTxWrite>
						}
						break;
 8003422:	e262      	b.n	80038ea <Munmunbot_Protocol+0x7fa>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 8003424:	4b7d      	ldr	r3, [pc, #500]	; (800361c <Munmunbot_Protocol+0x52c>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <Munmunbot_Protocol+0x342>
						{
							Munmunbot_State = STATE_Idle;
 800342c:	4b7b      	ldr	r3, [pc, #492]	; (800361c <Munmunbot_Protocol+0x52c>)
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003432:	6838      	ldr	r0, [r7, #0]
 8003434:	f7ff fe38 	bl	80030a8 <ACK1Return>
						break;
 8003438:	e257      	b.n	80038ea <Munmunbot_Protocol+0x7fa>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 800343a:	4b78      	ldr	r3, [pc, #480]	; (800361c <Munmunbot_Protocol+0x52c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d102      	bne.n	8003448 <Munmunbot_Protocol+0x358>
						{
							Munmunbot_State = STATE_Disconnected;
 8003442:	4b76      	ldr	r3, [pc, #472]	; (800361c <Munmunbot_Protocol+0x52c>)
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003448:	6838      	ldr	r0, [r7, #0]
 800344a:	f7ff fe2d 	bl	80030a8 <ACK1Return>
						break;
 800344e:	e24c      	b.n	80038ea <Munmunbot_Protocol+0x7fa>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003450:	4b72      	ldr	r3, [pc, #456]	; (800361c <Munmunbot_Protocol+0x52c>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d11f      	bne.n	8003498 <Munmunbot_Protocol+0x3a8>
						{
							CUSSStruc.RPMp = (Data_HAck*10.0)/255.0;
 8003458:	4b71      	ldr	r3, [pc, #452]	; (8003620 <Munmunbot_Protocol+0x530>)
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd f80d 	bl	800047c <__aeabi_i2d>
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	4b6f      	ldr	r3, [pc, #444]	; (8003624 <Munmunbot_Protocol+0x534>)
 8003468:	f7fd f872 	bl	8000550 <__aeabi_dmul>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	a364      	add	r3, pc, #400	; (adr r3, 8003608 <Munmunbot_Protocol+0x518>)
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f7fd f993 	bl	80007a4 <__aeabi_ddiv>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4610      	mov	r0, r2
 8003484:	4619      	mov	r1, r3
 8003486:	f7fd fb33 	bl	8000af0 <__aeabi_d2f>
 800348a:	4603      	mov	r3, r0
 800348c:	4a66      	ldr	r2, [pc, #408]	; (8003628 <Munmunbot_Protocol+0x538>)
 800348e:	6093      	str	r3, [r2, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 8003490:	4965      	ldr	r1, [pc, #404]	; (8003628 <Munmunbot_Protocol+0x538>)
 8003492:	4866      	ldr	r0, [pc, #408]	; (800362c <Munmunbot_Protocol+0x53c>)
 8003494:	f7fe fd3e 	bl	8001f14 <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 8003498:	6838      	ldr	r0, [r7, #0]
 800349a:	f7ff fe05 	bl	80030a8 <ACK1Return>
						break;
 800349e:	e224      	b.n	80038ea <Munmunbot_Protocol+0x7fa>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80034a0:	4b5e      	ldr	r3, [pc, #376]	; (800361c <Munmunbot_Protocol+0x52c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d106      	bne.n	80034b6 <Munmunbot_Protocol+0x3c6>
						{
							Angularpos_InputNumber = Data_HAck;
 80034a8:	4b5d      	ldr	r3, [pc, #372]	; (8003620 <Munmunbot_Protocol+0x530>)
 80034aa:	881a      	ldrh	r2, [r3, #0]
 80034ac:	4b60      	ldr	r3, [pc, #384]	; (8003630 <Munmunbot_Protocol+0x540>)
 80034ae:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 80034b0:	4b60      	ldr	r3, [pc, #384]	; (8003634 <Munmunbot_Protocol+0x544>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80034b6:	6838      	ldr	r0, [r7, #0]
 80034b8:	f7ff fdf6 	bl	80030a8 <ACK1Return>
						break;
 80034bc:	e215      	b.n	80038ea <Munmunbot_Protocol+0x7fa>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80034be:	4b57      	ldr	r3, [pc, #348]	; (800361c <Munmunbot_Protocol+0x52c>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d109      	bne.n	80034da <Munmunbot_Protocol+0x3ea>
						{
//							Angularpos_InputArray[0] = parameter[0];
							Angularpos_InputArray[0] = parameter[2];    //150 0x00 0x0A Checksum
 80034c6:	4b54      	ldr	r3, [pc, #336]	; (8003618 <Munmunbot_Protocol+0x528>)
 80034c8:	789a      	ldrb	r2, [r3, #2]
 80034ca:	4b5b      	ldr	r3, [pc, #364]	; (8003638 <Munmunbot_Protocol+0x548>)
 80034cc:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 80034ce:	4b59      	ldr	r3, [pc, #356]	; (8003634 <Munmunbot_Protocol+0x544>)
 80034d0:	2202      	movs	r2, #2
 80034d2:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 80034d4:	4b59      	ldr	r3, [pc, #356]	; (800363c <Munmunbot_Protocol+0x54c>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80034da:	6838      	ldr	r0, [r7, #0]
 80034dc:	f7ff fde4 	bl	80030a8 <ACK1Return>
						break;
 80034e0:	e203      	b.n	80038ea <Munmunbot_Protocol+0x7fa>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80034e2:	4b4e      	ldr	r3, [pc, #312]	; (800361c <Munmunbot_Protocol+0x52c>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d11c      	bne.n	8003524 <Munmunbot_Protocol+0x434>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 80034ea:	4b52      	ldr	r3, [pc, #328]	; (8003634 <Munmunbot_Protocol+0x544>)
 80034ec:	2203      	movs	r2, #3
 80034ee:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	637b      	str	r3, [r7, #52]	; 0x34
 80034f4:	e00b      	b.n	800350e <Munmunbot_Protocol+0x41e>
							{
								Angularpos_InputArray[i] = parameter[i];
 80034f6:	4a48      	ldr	r2, [pc, #288]	; (8003618 <Munmunbot_Protocol+0x528>)
 80034f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fa:	4413      	add	r3, r2
 80034fc:	7819      	ldrb	r1, [r3, #0]
 80034fe:	4a4e      	ldr	r2, [pc, #312]	; (8003638 <Munmunbot_Protocol+0x548>)
 8003500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003502:	4413      	add	r3, r2
 8003504:	460a      	mov	r2, r1
 8003506:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8003508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350a:	3301      	adds	r3, #1
 800350c:	637b      	str	r3, [r7, #52]	; 0x34
 800350e:	4b4c      	ldr	r3, [pc, #304]	; (8003640 <Munmunbot_Protocol+0x550>)
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003516:	4293      	cmp	r3, r2
 8003518:	dbed      	blt.n	80034f6 <Munmunbot_Protocol+0x406>
							}
							NumberOfStationToGo = n_station_mem;
 800351a:	4b49      	ldr	r3, [pc, #292]	; (8003640 <Munmunbot_Protocol+0x550>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	4b46      	ldr	r3, [pc, #280]	; (800363c <Munmunbot_Protocol+0x54c>)
 8003522:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003524:	6838      	ldr	r0, [r7, #0]
 8003526:	f7ff fdbf 	bl	80030a8 <ACK1Return>
						break;
 800352a:	e1de      	b.n	80038ea <Munmunbot_Protocol+0x7fa>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 800352c:	4b3b      	ldr	r3, [pc, #236]	; (800361c <Munmunbot_Protocol+0x52c>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d106      	bne.n	8003542 <Munmunbot_Protocol+0x452>
						{
							Munmunbot_State = STATE_PrepareDATA;
 8003534:	4b39      	ldr	r3, [pc, #228]	; (800361c <Munmunbot_Protocol+0x52c>)
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 800353a:	6838      	ldr	r0, [r7, #0]
 800353c:	f7ff fdb4 	bl	80030a8 <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};  ///ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 8003540:	e1d3      	b.n	80038ea <Munmunbot_Protocol+0x7fa>
								uint8_t temp[] =
 8003542:	4b40      	ldr	r3, [pc, #256]	; (8003644 <Munmunbot_Protocol+0x554>)
 8003544:	623b      	str	r3, [r7, #32]
								UARTTxWrite(uart, temp, 4);
 8003546:	f107 0320 	add.w	r3, r7, #32
 800354a:	2204      	movs	r2, #4
 800354c:	4619      	mov	r1, r3
 800354e:	6838      	ldr	r0, [r7, #0]
 8003550:	f7ff fd62 	bl	8003018 <UARTTxWrite>
						break;
 8003554:	e1c9      	b.n	80038ea <Munmunbot_Protocol+0x7fa>

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 8003556:	4a3c      	ldr	r2, [pc, #240]	; (8003648 <Munmunbot_Protocol+0x558>)
 8003558:	f107 0318 	add.w	r3, r7, #24
 800355c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003560:	6018      	str	r0, [r3, #0]
 8003562:	3304      	adds	r3, #4
 8003564:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0}; ///ACK1 + Mode 9
							uint8_t Shift = 2;
 8003566:	2302      	movs	r3, #2
 8003568:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
							DataForReturn = Current_Station&(0xff);
 800356c:	4b37      	ldr	r3, [pc, #220]	; (800364c <Munmunbot_Protocol+0x55c>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	b29a      	uxth	r2, r3
 8003572:	4b37      	ldr	r3, [pc, #220]	; (8003650 <Munmunbot_Protocol+0x560>)
 8003574:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8003576:	4b36      	ldr	r3, [pc, #216]	; (8003650 <Munmunbot_Protocol+0x560>)
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	b29a      	uxth	r2, r3
 800357e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003582:	3301      	adds	r3, #1
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800358a:	440b      	add	r3, r1
 800358c:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8003590:	4b2f      	ldr	r3, [pc, #188]	; (8003650 <Munmunbot_Protocol+0x560>)
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003598:	3302      	adds	r3, #2
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80035a0:	440b      	add	r3, r1
 80035a2:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 80035a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80035aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035ae:	4413      	add	r3, r2
 80035b0:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 80035b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80035b8:	3301      	adds	r3, #1
 80035ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80035be:	440b      	add	r3, r1
 80035c0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80035c4:	4413      	add	r3, r2
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80035cc:	3302      	adds	r3, #2
 80035ce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80035d2:	440b      	add	r3, r1
 80035d4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80035d8:	4413      	add	r3, r2
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80035e0:	3303      	adds	r3, #3
 80035e2:	43d2      	mvns	r2, r2
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80035ea:	440b      	add	r3, r1
 80035ec:	f803 2c20 	strb.w	r2, [r3, #-32]
							UARTTxWrite(uart, temp, 4+Shift);
 80035f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3304      	adds	r3, #4
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	f107 0318 	add.w	r3, r7, #24
 80035fe:	4619      	mov	r1, r3
 8003600:	6838      	ldr	r0, [r7, #0]
 8003602:	f7ff fd09 	bl	8003018 <UARTTxWrite>
						}

						break;
 8003606:	e170      	b.n	80038ea <Munmunbot_Protocol+0x7fa>
 8003608:	00000000 	.word	0x00000000
 800360c:	406fe000 	.word	0x406fe000
 8003610:	2000023c 	.word	0x2000023c
 8003614:	20000240 	.word	0x20000240
 8003618:	20000244 	.word	0x20000244
 800361c:	200000d9 	.word	0x200000d9
 8003620:	20000242 	.word	0x20000242
 8003624:	40240000 	.word	0x40240000
 8003628:	20000208 	.word	0x20000208
 800362c:	20000178 	.word	0x20000178
 8003630:	200000ec 	.word	0x200000ec
 8003634:	200000ee 	.word	0x200000ee
 8003638:	200000dc 	.word	0x200000dc
 800363c:	200000f0 	.word	0x200000f0
 8003640:	20000346 	.word	0x20000346
 8003644:	6e467558 	.word	0x6e467558
 8003648:	08009d40 	.word	0x08009d40
 800364c:	200000ef 	.word	0x200000ef
 8003650:	2000034a 	.word	0x2000034a

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 8003654:	4ab8      	ldr	r2, [pc, #736]	; (8003938 <Munmunbot_Protocol+0x848>)
 8003656:	f107 0310 	add.w	r3, r7, #16
 800365a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800365e:	6018      	str	r0, [r3, #0]
 8003660:	3304      	adds	r3, #4
 8003662:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,154, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 8003664:	2302      	movs	r3, #2
 8003666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
							DataForReturn = ((((int) htim1.Instance->CNT) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
 800366a:	4bb4      	ldr	r3, [pc, #720]	; (800393c <Munmunbot_Protocol+0x84c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	4ab3      	ldr	r2, [pc, #716]	; (8003940 <Munmunbot_Protocol+0x850>)
 8003672:	6852      	ldr	r2, [r2, #4]
 8003674:	fbb3 f1f2 	udiv	r1, r3, r2
 8003678:	fb02 f201 	mul.w	r2, r2, r1
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc feeb 	bl	800045c <__aeabi_ui2d>
 8003686:	a3a6      	add	r3, pc, #664	; (adr r3, 8003920 <Munmunbot_Protocol+0x830>)
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f7fc ff60 	bl	8000550 <__aeabi_dmul>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	a3a3      	add	r3, pc, #652	; (adr r3, 8003928 <Munmunbot_Protocol+0x838>)
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f7fc ff57 	bl	8000550 <__aeabi_dmul>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4614      	mov	r4, r2
 80036a8:	461d      	mov	r5, r3
 80036aa:	4ba5      	ldr	r3, [pc, #660]	; (8003940 <Munmunbot_Protocol+0x850>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fc fed4 	bl	800045c <__aeabi_ui2d>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4620      	mov	r0, r4
 80036ba:	4629      	mov	r1, r5
 80036bc:	f7fd f872 	bl	80007a4 <__aeabi_ddiv>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	f7fd f9f2 	bl	8000ab0 <__aeabi_d2uiz>
 80036cc:	4603      	mov	r3, r0
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	4b9c      	ldr	r3, [pc, #624]	; (8003944 <Munmunbot_Protocol+0x854>)
 80036d2:	801a      	strh	r2, [r3, #0]
//							DataForReturn = ((((int) PositionPIDController.OutputFeedback) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 80036d4:	4b9b      	ldr	r3, [pc, #620]	; (8003944 <Munmunbot_Protocol+0x854>)
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	b29a      	uxth	r2, r3
 80036dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036e0:	3301      	adds	r3, #1
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80036e8:	440b      	add	r3, r1
 80036ea:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[2+Shift] = (DataForReturn)&(0xff);
 80036ee:	4b95      	ldr	r3, [pc, #596]	; (8003944 <Munmunbot_Protocol+0x854>)
 80036f0:	881a      	ldrh	r2, [r3, #0]
 80036f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036f6:	3302      	adds	r3, #2
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80036fe:	440b      	add	r3, r1
 8003700:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8003704:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003708:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800370c:	4413      	add	r3, r2
 800370e:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 8003712:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003716:	3301      	adds	r3, #1
 8003718:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800371c:	440b      	add	r3, r1
 800371e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003722:	4413      	add	r3, r2
 8003724:	b2da      	uxtb	r2, r3
 8003726:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800372a:	3302      	adds	r3, #2
 800372c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003730:	440b      	add	r3, r1
 8003732:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003736:	4413      	add	r3, r2
 8003738:	b2da      	uxtb	r2, r3
 800373a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800373e:	3303      	adds	r3, #3
 8003740:	43d2      	mvns	r2, r2
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003748:	440b      	add	r3, r1
 800374a:	f803 2c28 	strb.w	r2, [r3, #-40]
							UARTTxWrite(uart, temp, 4+Shift);
 800374e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003752:	b29b      	uxth	r3, r3
 8003754:	3304      	adds	r3, #4
 8003756:	b29a      	uxth	r2, r3
 8003758:	f107 0310 	add.w	r3, r7, #16
 800375c:	4619      	mov	r1, r3
 800375e:	6838      	ldr	r0, [r7, #0]
 8003760:	f7ff fc5a 	bl	8003018 <UARTTxWrite>
						}
						break;
 8003764:	e0c1      	b.n	80038ea <Munmunbot_Protocol+0x7fa>

					case 11: /// Return Angular Velocity Max  ##Complete##
						{
							uint8_t temp[] =
 8003766:	4a78      	ldr	r2, [pc, #480]	; (8003948 <Munmunbot_Protocol+0x858>)
 8003768:	f107 0308 	add.w	r3, r7, #8
 800376c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003770:	6018      	str	r0, [r3, #0]
 8003772:	3304      	adds	r3, #4
 8003774:	8019      	strh	r1, [r3, #0]
							{ 0x58, 0x75, 155, 0b0,  0b0, 0b0 };
							uint8_t Shift = 2;
 8003776:	2302      	movs	r3, #2
 8003778:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
//							float temp2  = ( TrjStruc.AngularVelocityMax_Setting*60.0 )/( ( float ) CUSSStruc.PPRxQEI );  ///pps to RPM
							float temp3 = ( abs( VelocityPIDController.OutputFeedback )*60.0 )/( ( float ) CUSSStruc.PPRxQEI );
 800377c:	4b73      	ldr	r3, [pc, #460]	; (800394c <Munmunbot_Protocol+0x85c>)
 800377e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003786:	ee17 3a90 	vmov	r3, s15
 800378a:	2b00      	cmp	r3, #0
 800378c:	bfb8      	it	lt
 800378e:	425b      	neglt	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	f7fc fe73 	bl	800047c <__aeabi_i2d>
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	4b6d      	ldr	r3, [pc, #436]	; (8003950 <Munmunbot_Protocol+0x860>)
 800379c:	f7fc fed8 	bl	8000550 <__aeabi_dmul>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4614      	mov	r4, r2
 80037a6:	461d      	mov	r5, r3
 80037a8:	4b65      	ldr	r3, [pc, #404]	; (8003940 <Munmunbot_Protocol+0x850>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	ee07 3a90 	vmov	s15, r3
 80037b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b4:	ee17 0a90 	vmov	r0, s15
 80037b8:	f7fc fe72 	bl	80004a0 <__aeabi_f2d>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4620      	mov	r0, r4
 80037c2:	4629      	mov	r1, r5
 80037c4:	f7fc ffee 	bl	80007a4 <__aeabi_ddiv>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4610      	mov	r0, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	f7fd f98e 	bl	8000af0 <__aeabi_d2f>
 80037d4:	4603      	mov	r3, r0
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
							DataForReturn = ( temp3 * 255.0 )/10.0;
 80037d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037da:	f7fc fe61 	bl	80004a0 <__aeabi_f2d>
 80037de:	a354      	add	r3, pc, #336	; (adr r3, 8003930 <Munmunbot_Protocol+0x840>)
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	f7fc feb4 	bl	8000550 <__aeabi_dmul>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4610      	mov	r0, r2
 80037ee:	4619      	mov	r1, r3
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	4b57      	ldr	r3, [pc, #348]	; (8003954 <Munmunbot_Protocol+0x864>)
 80037f6:	f7fc ffd5 	bl	80007a4 <__aeabi_ddiv>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	f7fd f955 	bl	8000ab0 <__aeabi_d2uiz>
 8003806:	4603      	mov	r3, r0
 8003808:	b29a      	uxth	r2, r3
 800380a:	4b4e      	ldr	r3, [pc, #312]	; (8003944 <Munmunbot_Protocol+0x854>)
 800380c:	801a      	strh	r2, [r3, #0]
							temp[ 1+Shift ] = ( DataForReturn>>8 )&( 0xff );
 800380e:	4b4d      	ldr	r3, [pc, #308]	; (8003944 <Munmunbot_Protocol+0x854>)
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	b29a      	uxth	r2, r3
 8003816:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800381a:	3301      	adds	r3, #1
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003822:	440b      	add	r3, r1
 8003824:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 2+Shift ] = ( DataForReturn )&( 0xff );
 8003828:	4b46      	ldr	r3, [pc, #280]	; (8003944 <Munmunbot_Protocol+0x854>)
 800382a:	881a      	ldrh	r2, [r3, #0]
 800382c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003830:	3302      	adds	r3, #2
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003838:	440b      	add	r3, r1
 800383a:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 3+Shift ] = ~( temp[ 0+Shift ]+temp[ 1+Shift ]+temp[ 2+Shift ] );
 800383e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003842:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003846:	4413      	add	r3, r2
 8003848:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 800384c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003850:	3301      	adds	r3, #1
 8003852:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003856:	440b      	add	r3, r1
 8003858:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800385c:	4413      	add	r3, r2
 800385e:	b2da      	uxtb	r2, r3
 8003860:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003864:	3302      	adds	r3, #2
 8003866:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800386a:	440b      	add	r3, r1
 800386c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003870:	4413      	add	r3, r2
 8003872:	b2da      	uxtb	r2, r3
 8003874:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003878:	3303      	adds	r3, #3
 800387a:	43d2      	mvns	r2, r2
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003882:	440b      	add	r3, r1
 8003884:	f803 2c30 	strb.w	r2, [r3, #-48]
							UARTTxWrite( uart, temp, 4+Shift );
 8003888:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800388c:	b29b      	uxth	r3, r3
 800388e:	3304      	adds	r3, #4
 8003890:	b29a      	uxth	r2, r3
 8003892:	f107 0308 	add.w	r3, r7, #8
 8003896:	4619      	mov	r1, r3
 8003898:	6838      	ldr	r0, [r7, #0]
 800389a:	f7ff fbbd 	bl	8003018 <UARTTxWrite>
						}
						break;
 800389e:	e024      	b.n	80038ea <Munmunbot_Protocol+0x7fa>

					case 12:  //Enable Gripper
						if (Munmunbot_State == STATE_Idle)
 80038a0:	4b2d      	ldr	r3, [pc, #180]	; (8003958 <Munmunbot_Protocol+0x868>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d102      	bne.n	80038ae <Munmunbot_Protocol+0x7be>
						{
							GripperEnable = 1;
 80038a8:	4b2c      	ldr	r3, [pc, #176]	; (800395c <Munmunbot_Protocol+0x86c>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80038ae:	6838      	ldr	r0, [r7, #0]
 80038b0:	f7ff fbfa 	bl	80030a8 <ACK1Return>
						break;
 80038b4:	e019      	b.n	80038ea <Munmunbot_Protocol+0x7fa>
					case 13: //Disable Gripper
						if (Munmunbot_State == STATE_Idle)
 80038b6:	4b28      	ldr	r3, [pc, #160]	; (8003958 <Munmunbot_Protocol+0x868>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d102      	bne.n	80038c4 <Munmunbot_Protocol+0x7d4>
						{
							GripperEnable = 0;
 80038be:	4b27      	ldr	r3, [pc, #156]	; (800395c <Munmunbot_Protocol+0x86c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80038c4:	6838      	ldr	r0, [r7, #0]
 80038c6:	f7ff fbef 	bl	80030a8 <ACK1Return>
						break;
 80038ca:	e00e      	b.n	80038ea <Munmunbot_Protocol+0x7fa>

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80038cc:	4b22      	ldr	r3, [pc, #136]	; (8003958 <Munmunbot_Protocol+0x868>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d105      	bne.n	80038e0 <Munmunbot_Protocol+0x7f0>
						{
							Munmunbot_State = STATE_SetHome;
 80038d4:	4b20      	ldr	r3, [pc, #128]	; (8003958 <Munmunbot_Protocol+0x868>)
 80038d6:	2206      	movs	r2, #6
 80038d8:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 80038da:	4b21      	ldr	r3, [pc, #132]	; (8003960 <Munmunbot_Protocol+0x870>)
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80038e0:	6838      	ldr	r0, [r7, #0]
 80038e2:	f7ff fbe1 	bl	80030a8 <ACK1Return>
						break;
 80038e6:	e000      	b.n	80038ea <Munmunbot_Protocol+0x7fa>
				    }
			   }
 80038e8:	bf00      	nop
			n_station = 0;
 80038ea:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <Munmunbot_Protocol+0x874>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 80038f0:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <Munmunbot_Protocol+0x878>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 80038f6:	4b1d      	ldr	r3, [pc, #116]	; (800396c <Munmunbot_Protocol+0x87c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 80038fc:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <Munmunbot_Protocol+0x880>)
 80038fe:	2200      	movs	r2, #0
 8003900:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 8003902:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <Munmunbot_Protocol+0x884>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
			Munmunbot_Protocol_State = PP_STARTandMode;
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <Munmunbot_Protocol+0x888>)
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
			break;
 800390e:	e002      	b.n	8003916 <Munmunbot_Protocol+0x826>
			break;
 8003910:	bf00      	nop
 8003912:	e000      	b.n	8003916 <Munmunbot_Protocol+0x826>
				break;
 8003914:	bf00      	nop
			}
	}
}
 8003916:	bf00      	nop
 8003918:	3738      	adds	r7, #56	; 0x38
 800391a:	46bd      	mov	sp, r7
 800391c:	bdb0      	pop	{r4, r5, r7, pc}
 800391e:	bf00      	nop
 8003920:	9ba5e354 	.word	0x9ba5e354
 8003924:	400920c4 	.word	0x400920c4
 8003928:	00000000 	.word	0x00000000
 800392c:	40c38800 	.word	0x40c38800
 8003930:	00000000 	.word	0x00000000
 8003934:	406fe000 	.word	0x406fe000
 8003938:	08009d48 	.word	0x08009d48
 800393c:	200004b4 	.word	0x200004b4
 8003940:	20000208 	.word	0x20000208
 8003944:	2000034a 	.word	0x2000034a
 8003948:	08009d50 	.word	0x08009d50
 800394c:	20000140 	.word	0x20000140
 8003950:	404e0000 	.word	0x404e0000
 8003954:	40240000 	.word	0x40240000
 8003958:	200000d9 	.word	0x200000d9
 800395c:	200000f9 	.word	0x200000f9
 8003960:	200000da 	.word	0x200000da
 8003964:	20000344 	.word	0x20000344
 8003968:	20000240 	.word	0x20000240
 800396c:	20000348 	.word	0x20000348
 8003970:	20000242 	.word	0x20000242
 8003974:	2000023c 	.word	0x2000023c
 8003978:	200000d8 	.word	0x200000d8

0800397c <PID_Reset>:

void PID_Reset()
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
	PositionPIDController.PreviousError = 0;
 8003980:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <PID_Reset+0xa8>)
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	629a      	str	r2, [r3, #40]	; 0x28
	PositionPIDController.Integral_Value = 0;
 8003988:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <PID_Reset+0xa8>)
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	621a      	str	r2, [r3, #32]
	PositionPIDController.ControllerOutput = 0;
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <PID_Reset+0xa8>)
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	611a      	str	r2, [r3, #16]
	PositionPIDController.NowError = 0;
 8003998:	4b22      	ldr	r3, [pc, #136]	; (8003a24 <PID_Reset+0xa8>)
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	625a      	str	r2, [r3, #36]	; 0x24
	PositionPIDController.OutputDesire = htim1.Instance->CNT;
 80039a0:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <PID_Reset+0xac>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <PID_Reset+0xa8>)
 80039b0:	edc3 7a06 	vstr	s15, [r3, #24]
	PositionPIDController.OutputFeedback = htim1.Instance->CNT;
 80039b4:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <PID_Reset+0xac>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <PID_Reset+0xa8>)
 80039c4:	edc3 7a07 	vstr	s15, [r3, #28]
	PositionPIDController.PreviousPreviousError = 0;
 80039c8:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <PID_Reset+0xa8>)
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c
	PositionPIDController.PreviousControllerOutput = 0;
 80039d0:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <PID_Reset+0xa8>)
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	615a      	str	r2, [r3, #20]


	VelocityPIDController.PreviousError = 0;
 80039d8:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <PID_Reset+0xb0>)
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
	VelocityPIDController.Integral_Value = 0;
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <PID_Reset+0xb0>)
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	621a      	str	r2, [r3, #32]
	VelocityPIDController.ControllerOutput = 0;
 80039e8:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <PID_Reset+0xb0>)
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	611a      	str	r2, [r3, #16]
	VelocityPIDController.NowError = 0;
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <PID_Reset+0xb0>)
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24
	VelocityPIDController.OutputDesire = 0;
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <PID_Reset+0xb0>)
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	619a      	str	r2, [r3, #24]
	VelocityPIDController.OutputFeedback = 0;
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <PID_Reset+0xb0>)
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	61da      	str	r2, [r3, #28]
	VelocityPIDController.PreviousPreviousError = 0;
 8003a08:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <PID_Reset+0xb0>)
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	62da      	str	r2, [r3, #44]	; 0x2c
	VelocityPIDController.PreviousControllerOutput = 0;
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <PID_Reset+0xb0>)
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	615a      	str	r2, [r3, #20]
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000108 	.word	0x20000108
 8003a28:	200004b4 	.word	0x200004b4
 8003a2c:	20000140 	.word	0x20000140

08003a30 <LAMP_ON>:

void LAMP_ON(uint8_t lampnumber)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	71fb      	strb	r3, [r7, #7]
	if (lampnumber == 0)
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d110      	bne.n	8003a62 <LAMP_ON+0x32>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003a40:	2201      	movs	r2, #1
 8003a42:	2102      	movs	r1, #2
 8003a44:	4830      	ldr	r0, [pc, #192]	; (8003b08 <LAMP_ON+0xd8>)
 8003a46:	f001 fbe9 	bl	800521c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	2104      	movs	r1, #4
 8003a4e:	482e      	ldr	r0, [pc, #184]	; (8003b08 <LAMP_ON+0xd8>)
 8003a50:	f001 fbe4 	bl	800521c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003a54:	2201      	movs	r2, #1
 8003a56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a5a:	482c      	ldr	r0, [pc, #176]	; (8003b0c <LAMP_ON+0xdc>)
 8003a5c:	f001 fbde 	bl	800521c <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
	}
}
 8003a60:	e04e      	b.n	8003b00 <LAMP_ON+0xd0>
	else if (lampnumber == 1)
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d110      	bne.n	8003a8a <LAMP_ON+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	4826      	ldr	r0, [pc, #152]	; (8003b08 <LAMP_ON+0xd8>)
 8003a6e:	f001 fbd5 	bl	800521c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003a72:	2201      	movs	r2, #1
 8003a74:	2104      	movs	r1, #4
 8003a76:	4824      	ldr	r0, [pc, #144]	; (8003b08 <LAMP_ON+0xd8>)
 8003a78:	f001 fbd0 	bl	800521c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a82:	4822      	ldr	r0, [pc, #136]	; (8003b0c <LAMP_ON+0xdc>)
 8003a84:	f001 fbca 	bl	800521c <HAL_GPIO_WritePin>
}
 8003a88:	e03a      	b.n	8003b00 <LAMP_ON+0xd0>
	else if (lampnumber == 2)
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d110      	bne.n	8003ab2 <LAMP_ON+0x82>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003a90:	2201      	movs	r2, #1
 8003a92:	2102      	movs	r1, #2
 8003a94:	481c      	ldr	r0, [pc, #112]	; (8003b08 <LAMP_ON+0xd8>)
 8003a96:	f001 fbc1 	bl	800521c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2104      	movs	r1, #4
 8003a9e:	481a      	ldr	r0, [pc, #104]	; (8003b08 <LAMP_ON+0xd8>)
 8003aa0:	f001 fbbc 	bl	800521c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003aaa:	4818      	ldr	r0, [pc, #96]	; (8003b0c <LAMP_ON+0xdc>)
 8003aac:	f001 fbb6 	bl	800521c <HAL_GPIO_WritePin>
}
 8003ab0:	e026      	b.n	8003b00 <LAMP_ON+0xd0>
	else if (lampnumber == 3)
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d110      	bne.n	8003ada <LAMP_ON+0xaa>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003ab8:	2201      	movs	r2, #1
 8003aba:	2102      	movs	r1, #2
 8003abc:	4812      	ldr	r0, [pc, #72]	; (8003b08 <LAMP_ON+0xd8>)
 8003abe:	f001 fbad 	bl	800521c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	4810      	ldr	r0, [pc, #64]	; (8003b08 <LAMP_ON+0xd8>)
 8003ac8:	f001 fba8 	bl	800521c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003acc:	2200      	movs	r2, #0
 8003ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ad2:	480e      	ldr	r0, [pc, #56]	; (8003b0c <LAMP_ON+0xdc>)
 8003ad4:	f001 fba2 	bl	800521c <HAL_GPIO_WritePin>
}
 8003ad8:	e012      	b.n	8003b00 <LAMP_ON+0xd0>
	else if (lampnumber == 4)
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d10f      	bne.n	8003b00 <LAMP_ON+0xd0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4808      	ldr	r0, [pc, #32]	; (8003b08 <LAMP_ON+0xd8>)
 8003ae6:	f001 fb99 	bl	800521c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003aea:	2200      	movs	r2, #0
 8003aec:	2104      	movs	r1, #4
 8003aee:	4806      	ldr	r0, [pc, #24]	; (8003b08 <LAMP_ON+0xd8>)
 8003af0:	f001 fb94 	bl	800521c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003af4:	2200      	movs	r2, #0
 8003af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003afa:	4804      	ldr	r0, [pc, #16]	; (8003b0c <LAMP_ON+0xdc>)
 8003afc:	f001 fb8e 	bl	800521c <HAL_GPIO_WritePin>
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40020400 	.word	0x40020400
 8003b0c:	40020000 	.word	0x40020000

08003b10 <Emergency_switch_trigger>:

void Emergency_switch_trigger()
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1)
 8003b14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b18:	481f      	ldr	r0, [pc, #124]	; (8003b98 <Emergency_switch_trigger+0x88>)
 8003b1a:	f001 fb67 	bl	80051ec <HAL_GPIO_ReadPin>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d136      	bne.n	8003b92 <Emergency_switch_trigger+0x82>
	{
		// Reset State Machine All
		Munmunbot_State = STATE_Disconnected;
 8003b24:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <Emergency_switch_trigger+0x8c>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
		MovingLinkMode = LMM_Not_Set;
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <Emergency_switch_trigger+0x90>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
		SethomeMode = SetHomeState_0;
 8003b30:	4b1c      	ldr	r3, [pc, #112]	; (8003ba4 <Emergency_switch_trigger+0x94>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
		TrjStruc.Mode = 0;
 8003b36:	4b1c      	ldr	r3, [pc, #112]	; (8003ba8 <Emergency_switch_trigger+0x98>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		TrjStruc.Submode = 0;
 8003b3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <Emergency_switch_trigger+0x98>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		// Send back ACK to User-interface
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <Emergency_switch_trigger+0x8c>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d00b      	beq.n	8003b66 <Emergency_switch_trigger+0x56>
 8003b4e:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <Emergency_switch_trigger+0x8c>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d007      	beq.n	8003b66 <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8003b56:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <Emergency_switch_trigger+0x8c>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d003      	beq.n	8003b66 <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <Emergency_switch_trigger+0x8c>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d102      	bne.n	8003b6c <Emergency_switch_trigger+0x5c>
		{
			ACK2Return(&UART2);
 8003b66:	4811      	ldr	r0, [pc, #68]	; (8003bac <Emergency_switch_trigger+0x9c>)
 8003b68:	f7ff fab0 	bl	80030cc <ACK2Return>
		}

		// Reset variable
		NumberOfStationToGo = 0;
 8003b6c:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <Emergency_switch_trigger+0xa0>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	701a      	strb	r2, [r3, #0]
		NumberOfStationPTR = 0;
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <Emergency_switch_trigger+0xa4>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
		Moving_Link_Task_Flag = 0;
 8003b78:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <Emergency_switch_trigger+0xa8>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]

		// Stop the Motor
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <Emergency_switch_trigger+0xac>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8003b86:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <Emergency_switch_trigger+0xb0>)
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <Emergency_switch_trigger+0x98>)
 8003b8c:	66d3      	str	r3, [r2, #108]	; 0x6c

		PID_Reset();
 8003b8e:	f7ff fef5 	bl	800397c <PID_Reset>
	}
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40020400 	.word	0x40020400
 8003b9c:	200000d9 	.word	0x200000d9
 8003ba0:	200000ee 	.word	0x200000ee
 8003ba4:	200000da 	.word	0x200000da
 8003ba8:	20000178 	.word	0x20000178
 8003bac:	200000b8 	.word	0x200000b8
 8003bb0:	200000f0 	.word	0x200000f0
 8003bb4:	200000f1 	.word	0x200000f1
 8003bb8:	200000f8 	.word	0x200000f8
 8003bbc:	2000040c 	.word	0x2000040c
 8003bc0:	20000108 	.word	0x20000108

08003bc4 <Controlling_the_LINK>:

void Controlling_the_LINK()
{
 8003bc4:	b5b0      	push	{r4, r5, r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
	  // GEN Trajectory
	  TrajectoryGenerationProcess();
 8003bc8:	f7fe fc5a 	bl	8002480 <TrajectoryGenerationProcess>
	  EncoderVelocityAndPosition_Update();
 8003bcc:	f7fd ff4c 	bl	8001a68 <EncoderVelocityAndPosition_Update>
	  PIDController2in1();  ///use only position
 8003bd0:	f7ff f848 	bl	8002c64 <PIDController2in1>
//	  Plant_input = PositionPIDController.ControllerOutput;
	  Plant_input = VelocityPIDController.ControllerOutput;
 8003bd4:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <Controlling_the_LINK+0xb8>)
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	4a29      	ldr	r2, [pc, #164]	; (8003c80 <Controlling_the_LINK+0xbc>)
 8003bda:	6013      	str	r3, [r2, #0]

	  if (Plant_input >= 0) /// Setting DIR
 8003bdc:	4b28      	ldr	r3, [pc, #160]	; (8003c80 <Controlling_the_LINK+0xbc>)
 8003bde:	edd3 7a00 	vldr	s15, [r3]
 8003be2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bea:	db0c      	blt.n	8003c06 <Controlling_the_LINK+0x42>
	  {
		  DCMotorStruc.DIR = 1;
 8003bec:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <Controlling_the_LINK+0xc0>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 8003bf2:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <Controlling_the_LINK+0xbc>)
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bfc:	ee17 2a90 	vmov	r2, s15
 8003c00:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <Controlling_the_LINK+0xc0>)
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	e01b      	b.n	8003c3e <Controlling_the_LINK+0x7a>
	  }
	  else if (Plant_input < 0)
 8003c06:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <Controlling_the_LINK+0xbc>)
 8003c08:	edd3 7a00 	vldr	s15, [r3]
 8003c0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c14:	d513      	bpl.n	8003c3e <Controlling_the_LINK+0x7a>
	  {
		  DCMotorStruc.DIR = 0;
 8003c16:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <Controlling_the_LINK+0xc0>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 8003c1c:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <Controlling_the_LINK+0xbc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc fc3d 	bl	80004a0 <__aeabi_f2d>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4614      	mov	r4, r2
 8003c2c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003c30:	4620      	mov	r0, r4
 8003c32:	4629      	mov	r1, r5
 8003c34:	f7fc ff3c 	bl	8000ab0 <__aeabi_d2uiz>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <Controlling_the_LINK+0xc0>)
 8003c3c:	6053      	str	r3, [r2, #4]
	  }

	  if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <Controlling_the_LINK+0xc0>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d903      	bls.n	8003c52 <Controlling_the_LINK+0x8e>
	  {
		 DCMotorStruc.PWMOut = 10000;
 8003c4a:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <Controlling_the_LINK+0xc0>)
 8003c4c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c50:	605a      	str	r2, [r3, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 8003c52:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <Controlling_the_LINK+0xc0>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	2180      	movs	r1, #128	; 0x80
 8003c5a:	480b      	ldr	r0, [pc, #44]	; (8003c88 <Controlling_the_LINK+0xc4>)
 8003c5c:	f001 fade 	bl	800521c <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8003c60:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <Controlling_the_LINK+0xc8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a07      	ldr	r2, [pc, #28]	; (8003c84 <Controlling_the_LINK+0xc0>)
 8003c66:	6852      	ldr	r2, [r2, #4]
 8003c68:	635a      	str	r2, [r3, #52]	; 0x34
	  TrjStruc.Loop_Timestamp = micros();
 8003c6a:	f7fe f813 	bl	8001c94 <micros>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4907      	ldr	r1, [pc, #28]	; (8003c90 <Controlling_the_LINK+0xcc>)
 8003c74:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8003c78:	bf00      	nop
 8003c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c7c:	20000140 	.word	0x20000140
 8003c80:	200000f4 	.word	0x200000f4
 8003c84:	200000d0 	.word	0x200000d0
 8003c88:	40020800 	.word	0x40020800
 8003c8c:	2000040c 	.word	0x2000040c
 8003c90:	20000178 	.word	0x20000178

08003c94 <SETHOME_StateMachine_Function>:

void SETHOME_StateMachine_Function()
{
 8003c94:	b5b0      	push	{r4, r5, r7, lr}
 8003c96:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 8003c98:	4b49      	ldr	r3, [pc, #292]	; (8003dc0 <SETHOME_StateMachine_Function+0x12c>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	f200 808d 	bhi.w	8003dbc <SETHOME_StateMachine_Function+0x128>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <SETHOME_StateMachine_Function+0x14>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003db7 	.word	0x08003db7
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08003d0f 	.word	0x08003d0f
	{
		case SetHomeState_0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2180      	movs	r1, #128	; 0x80
 8003cbc:	4841      	ldr	r0, [pc, #260]	; (8003dc4 <SETHOME_StateMachine_Function+0x130>)
 8003cbe:	f001 faad 	bl	800521c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1700);
 8003cc2:	4b41      	ldr	r3, [pc, #260]	; (8003dc8 <SETHOME_StateMachine_Function+0x134>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8003cca:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 8003ccc:	4b3c      	ldr	r3, [pc, #240]	; (8003dc0 <SETHOME_StateMachine_Function+0x12c>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]
			break;
 8003cd2:	e073      	b.n	8003dbc <SETHOME_StateMachine_Function+0x128>
		case SetHomeState_1:
			break;
		case SetHomeState_2:

			SethomeMode = SetHomeState_0;
 8003cd4:	4b3a      	ldr	r3, [pc, #232]	; (8003dc0 <SETHOME_StateMachine_Function+0x12c>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
			Munmunbot_State = STATE_Idle;
 8003cda:	4b3c      	ldr	r3, [pc, #240]	; (8003dcc <SETHOME_StateMachine_Function+0x138>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8003ce0:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <SETHOME_StateMachine_Function+0x13c>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003ce6:	4b38      	ldr	r3, [pc, #224]	; (8003dc8 <SETHOME_StateMachine_Function+0x134>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2200      	movs	r2, #0
 8003cec:	635a      	str	r2, [r3, #52]	; 0x34
			TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
 8003cee:	4b39      	ldr	r3, [pc, #228]	; (8003dd4 <SETHOME_StateMachine_Function+0x140>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	ee07 3a90 	vmov	s15, r3
 8003cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfc:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <SETHOME_StateMachine_Function+0x144>)
 8003cfe:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			Moving_Link_Task_Flag = 0;
 8003d02:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <SETHOME_StateMachine_Function+0x148>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
			PID_Reset();
 8003d08:	f7ff fe38 	bl	800397c <PID_Reset>
//				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
//				TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
//				Moving_Link_Task_Flag = 0;
//				PID_Reset();
//			}
			break;
 8003d0c:	e056      	b.n	8003dbc <SETHOME_StateMachine_Function+0x128>
		case SetHomeState_3:
		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8003d0e:	f7fd ffc1 	bl	8001c94 <micros>
 8003d12:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <SETHOME_StateMachine_Function+0x144>)
 8003d14:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003d18:	1a84      	subs	r4, r0, r2
 8003d1a:	eb61 0503 	sbc.w	r5, r1, r3
 8003d1e:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <SETHOME_StateMachine_Function+0x144>)
 8003d20:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003d24:	429d      	cmp	r5, r3
 8003d26:	bf08      	it	eq
 8003d28:	4294      	cmpeq	r4, r2
 8003d2a:	d346      	bcc.n	8003dba <SETHOME_StateMachine_Function+0x126>
		  {
			  Controlling_the_LINK();
 8003d2c:	f7ff ff4a 	bl	8003bc4 <Controlling_the_LINK>

			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8003d30:	4b2b      	ldr	r3, [pc, #172]	; (8003de0 <SETHOME_StateMachine_Function+0x14c>)
 8003d32:	ed93 7a07 	vldr	s14, [r3, #28]
 8003d36:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <SETHOME_StateMachine_Function+0x144>)
 8003d38:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003d3c:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <SETHOME_StateMachine_Function+0x150>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	ee07 3a90 	vmov	s15, r3
 8003d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d54:	d900      	bls.n	8003d58 <SETHOME_StateMachine_Function+0xc4>
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
					Moving_Link_Task_Flag = 0;
					PID_Reset();
			  }
		  }
		  break;
 8003d56:	e030      	b.n	8003dba <SETHOME_StateMachine_Function+0x126>
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8003d58:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <SETHOME_StateMachine_Function+0x14c>)
 8003d5a:	ed93 7a07 	vldr	s14, [r3, #28]
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <SETHOME_StateMachine_Function+0x144>)
 8003d60:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003d64:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <SETHOME_StateMachine_Function+0x150>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	ee07 3a90 	vmov	s15, r3
 8003d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d70:	ee76 7ae7 	vsub.f32	s15, s13, s15
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8003d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7c:	da00      	bge.n	8003d80 <SETHOME_StateMachine_Function+0xec>
		  break;
 8003d7e:	e01c      	b.n	8003dba <SETHOME_StateMachine_Function+0x126>
					  (Moving_Link_Task_Flag == 1))
 8003d80:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <SETHOME_StateMachine_Function+0x148>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d118      	bne.n	8003dba <SETHOME_StateMachine_Function+0x126>
					SethomeMode = SetHomeState_0;
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <SETHOME_StateMachine_Function+0x12c>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_Idle;
 8003d8e:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <SETHOME_StateMachine_Function+0x138>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	701a      	strb	r2, [r3, #0]
					MovingLinkMode = LMM_Not_Set;
 8003d94:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <SETHOME_StateMachine_Function+0x13c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <SETHOME_StateMachine_Function+0x134>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	635a      	str	r2, [r3, #52]	; 0x34
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <SETHOME_StateMachine_Function+0x14c>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	4a0c      	ldr	r2, [pc, #48]	; (8003dd8 <SETHOME_StateMachine_Function+0x144>)
 8003da8:	66d3      	str	r3, [r2, #108]	; 0x6c
					Moving_Link_Task_Flag = 0;
 8003daa:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <SETHOME_StateMachine_Function+0x148>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
					PID_Reset();
 8003db0:	f7ff fde4 	bl	800397c <PID_Reset>
		  break;
 8003db4:	e001      	b.n	8003dba <SETHOME_StateMachine_Function+0x126>
			break;
 8003db6:	bf00      	nop
 8003db8:	e000      	b.n	8003dbc <SETHOME_StateMachine_Function+0x128>
		  break;
 8003dba:	bf00      	nop
     }

}
 8003dbc:	bf00      	nop
 8003dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8003dc0:	200000da 	.word	0x200000da
 8003dc4:	40020800 	.word	0x40020800
 8003dc8:	2000040c 	.word	0x2000040c
 8003dcc:	200000d9 	.word	0x200000d9
 8003dd0:	200000ee 	.word	0x200000ee
 8003dd4:	200004b4 	.word	0x200004b4
 8003dd8:	20000178 	.word	0x20000178
 8003ddc:	200000f8 	.word	0x200000f8
 8003de0:	20000108 	.word	0x20000108
 8003de4:	20000014 	.word	0x20000014

08003de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dec:	b672      	cpsid	i
}
 8003dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003df0:	e7fe      	b.n	8003df0 <Error_Handler+0x8>
	...

08003df4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	607b      	str	r3, [r7, #4]
 8003dfe:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <HAL_MspInit+0x4c>)
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	4a0f      	ldr	r2, [pc, #60]	; (8003e40 <HAL_MspInit+0x4c>)
 8003e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e08:	6453      	str	r3, [r2, #68]	; 0x44
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <HAL_MspInit+0x4c>)
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e12:	607b      	str	r3, [r7, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_MspInit+0x4c>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	4a08      	ldr	r2, [pc, #32]	; (8003e40 <HAL_MspInit+0x4c>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e24:	6413      	str	r3, [r2, #64]	; 0x40
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_MspInit+0x4c>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003e32:	2007      	movs	r0, #7
 8003e34:	f000 fc04 	bl	8004640 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40023800 	.word	0x40023800

08003e44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	; 0x28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4c:	f107 0314 	add.w	r3, r7, #20
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a21      	ldr	r2, [pc, #132]	; (8003ee8 <HAL_I2C_MspInit+0xa4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d13c      	bne.n	8003ee0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_I2C_MspInit+0xa8>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <HAL_I2C_MspInit+0xa8>)
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	6313      	str	r3, [r2, #48]	; 0x30
 8003e76:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <HAL_I2C_MspInit+0xa8>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003e82:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e88:	2312      	movs	r3, #18
 8003e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e90:	2303      	movs	r3, #3
 8003e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e94:	2304      	movs	r3, #4
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e98:	f107 0314 	add.w	r3, r7, #20
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4814      	ldr	r0, [pc, #80]	; (8003ef0 <HAL_I2C_MspInit+0xac>)
 8003ea0:	f001 f820 	bl	8004ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	4b10      	ldr	r3, [pc, #64]	; (8003eec <HAL_I2C_MspInit+0xa8>)
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	4a0f      	ldr	r2, [pc, #60]	; (8003eec <HAL_I2C_MspInit+0xa8>)
 8003eae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb4:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <HAL_I2C_MspInit+0xa8>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	201f      	movs	r0, #31
 8003ec6:	f000 fbc6 	bl	8004656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003eca:	201f      	movs	r0, #31
 8003ecc:	f000 fbdf 	bl	800468e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	2020      	movs	r0, #32
 8003ed6:	f000 fbbe 	bl	8004656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003eda:	2020      	movs	r0, #32
 8003edc:	f000 fbd7 	bl	800468e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ee0:	bf00      	nop
 8003ee2:	3728      	adds	r7, #40	; 0x28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40005400 	.word	0x40005400
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40020400 	.word	0x40020400

08003ef4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	; 0x28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <HAL_TIM_Encoder_MspInit+0x84>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d12c      	bne.n	8003f70 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x88>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x88>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6453      	str	r3, [r2, #68]	; 0x44
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x88>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x88>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	4a10      	ldr	r2, [pc, #64]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x88>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6313      	str	r3, [r2, #48]	; 0x30
 8003f42:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x88>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 8003f4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f54:	2302      	movs	r3, #2
 8003f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f60:	2301      	movs	r3, #1
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f64:	f107 0314 	add.w	r3, r7, #20
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4805      	ldr	r0, [pc, #20]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003f6c:	f000 ffba 	bl	8004ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003f70:	bf00      	nop
 8003f72:	3728      	adds	r7, #40	; 0x28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40020000 	.word	0x40020000

08003f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d116      	bne.n	8003fc4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <HAL_TIM_Base_MspInit+0x70>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <HAL_TIM_Base_MspInit+0x70>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_TIM_Base_MspInit+0x70>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	201c      	movs	r0, #28
 8003fb8:	f000 fb4d 	bl	8004656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fbc:	201c      	movs	r0, #28
 8003fbe:	f000 fb66 	bl	800468e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003fc2:	e012      	b.n	8003fea <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a0b      	ldr	r2, [pc, #44]	; (8003ff8 <HAL_TIM_Base_MspInit+0x74>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d10d      	bne.n	8003fea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <HAL_TIM_Base_MspInit+0x70>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <HAL_TIM_Base_MspInit+0x70>)
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fde:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_TIM_Base_MspInit+0x70>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
}
 8003fea:	bf00      	nop
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	40000400 	.word	0x40000400

08003ffc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004004:	f107 030c 	add.w	r3, r7, #12
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a12      	ldr	r2, [pc, #72]	; (8004064 <HAL_TIM_MspPostInit+0x68>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d11d      	bne.n	800405a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	4b11      	ldr	r3, [pc, #68]	; (8004068 <HAL_TIM_MspPostInit+0x6c>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	4a10      	ldr	r2, [pc, #64]	; (8004068 <HAL_TIM_MspPostInit+0x6c>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	6313      	str	r3, [r2, #48]	; 0x30
 800402e:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <HAL_TIM_MspPostInit+0x6c>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 800403a:	2340      	movs	r3, #64	; 0x40
 800403c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403e:	2302      	movs	r3, #2
 8004040:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800404a:	2302      	movs	r3, #2
 800404c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 800404e:	f107 030c 	add.w	r3, r7, #12
 8004052:	4619      	mov	r1, r3
 8004054:	4805      	ldr	r0, [pc, #20]	; (800406c <HAL_TIM_MspPostInit+0x70>)
 8004056:	f000 ff45 	bl	8004ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800405a:	bf00      	nop
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40000400 	.word	0x40000400
 8004068:	40023800 	.word	0x40023800
 800406c:	40020000 	.word	0x40020000

08004070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004078:	f107 0314 	add.w	r3, r7, #20
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a4c      	ldr	r2, [pc, #304]	; (80041c0 <HAL_UART_MspInit+0x150>)
 800408e:	4293      	cmp	r3, r2
 8004090:	f040 8091 	bne.w	80041b6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	4b4a      	ldr	r3, [pc, #296]	; (80041c4 <HAL_UART_MspInit+0x154>)
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	4a49      	ldr	r2, [pc, #292]	; (80041c4 <HAL_UART_MspInit+0x154>)
 800409e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a2:	6413      	str	r3, [r2, #64]	; 0x40
 80040a4:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <HAL_UART_MspInit+0x154>)
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	4b43      	ldr	r3, [pc, #268]	; (80041c4 <HAL_UART_MspInit+0x154>)
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	4a42      	ldr	r2, [pc, #264]	; (80041c4 <HAL_UART_MspInit+0x154>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6313      	str	r3, [r2, #48]	; 0x30
 80040c0:	4b40      	ldr	r3, [pc, #256]	; (80041c4 <HAL_UART_MspInit+0x154>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80040cc:	230c      	movs	r3, #12
 80040ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d0:	2302      	movs	r3, #2
 80040d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d8:	2303      	movs	r3, #3
 80040da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040dc:	2307      	movs	r3, #7
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e0:	f107 0314 	add.w	r3, r7, #20
 80040e4:	4619      	mov	r1, r3
 80040e6:	4838      	ldr	r0, [pc, #224]	; (80041c8 <HAL_UART_MspInit+0x158>)
 80040e8:	f000 fefc 	bl	8004ee4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80040ec:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_UART_MspInit+0x15c>)
 80040ee:	4a38      	ldr	r2, [pc, #224]	; (80041d0 <HAL_UART_MspInit+0x160>)
 80040f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80040f2:	4b36      	ldr	r3, [pc, #216]	; (80041cc <HAL_UART_MspInit+0x15c>)
 80040f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040fa:	4b34      	ldr	r3, [pc, #208]	; (80041cc <HAL_UART_MspInit+0x15c>)
 80040fc:	2240      	movs	r2, #64	; 0x40
 80040fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004100:	4b32      	ldr	r3, [pc, #200]	; (80041cc <HAL_UART_MspInit+0x15c>)
 8004102:	2200      	movs	r2, #0
 8004104:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004106:	4b31      	ldr	r3, [pc, #196]	; (80041cc <HAL_UART_MspInit+0x15c>)
 8004108:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800410c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800410e:	4b2f      	ldr	r3, [pc, #188]	; (80041cc <HAL_UART_MspInit+0x15c>)
 8004110:	2200      	movs	r2, #0
 8004112:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004114:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <HAL_UART_MspInit+0x15c>)
 8004116:	2200      	movs	r2, #0
 8004118:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800411a:	4b2c      	ldr	r3, [pc, #176]	; (80041cc <HAL_UART_MspInit+0x15c>)
 800411c:	2200      	movs	r2, #0
 800411e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004120:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <HAL_UART_MspInit+0x15c>)
 8004122:	2200      	movs	r2, #0
 8004124:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004126:	4b29      	ldr	r3, [pc, #164]	; (80041cc <HAL_UART_MspInit+0x15c>)
 8004128:	2200      	movs	r2, #0
 800412a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800412c:	4827      	ldr	r0, [pc, #156]	; (80041cc <HAL_UART_MspInit+0x15c>)
 800412e:	f000 fac9 	bl	80046c4 <HAL_DMA_Init>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004138:	f7ff fe56 	bl	8003de8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a23      	ldr	r2, [pc, #140]	; (80041cc <HAL_UART_MspInit+0x15c>)
 8004140:	635a      	str	r2, [r3, #52]	; 0x34
 8004142:	4a22      	ldr	r2, [pc, #136]	; (80041cc <HAL_UART_MspInit+0x15c>)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004148:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <HAL_UART_MspInit+0x164>)
 800414a:	4a23      	ldr	r2, [pc, #140]	; (80041d8 <HAL_UART_MspInit+0x168>)
 800414c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800414e:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <HAL_UART_MspInit+0x164>)
 8004150:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004154:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004156:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <HAL_UART_MspInit+0x164>)
 8004158:	2200      	movs	r2, #0
 800415a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <HAL_UART_MspInit+0x164>)
 800415e:	2200      	movs	r2, #0
 8004160:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004162:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <HAL_UART_MspInit+0x164>)
 8004164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004168:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800416a:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <HAL_UART_MspInit+0x164>)
 800416c:	2200      	movs	r2, #0
 800416e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004170:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <HAL_UART_MspInit+0x164>)
 8004172:	2200      	movs	r2, #0
 8004174:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004176:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <HAL_UART_MspInit+0x164>)
 8004178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800417c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800417e:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <HAL_UART_MspInit+0x164>)
 8004180:	2200      	movs	r2, #0
 8004182:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004184:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <HAL_UART_MspInit+0x164>)
 8004186:	2200      	movs	r2, #0
 8004188:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800418a:	4812      	ldr	r0, [pc, #72]	; (80041d4 <HAL_UART_MspInit+0x164>)
 800418c:	f000 fa9a 	bl	80046c4 <HAL_DMA_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004196:	f7ff fe27 	bl	8003de8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <HAL_UART_MspInit+0x164>)
 800419e:	639a      	str	r2, [r3, #56]	; 0x38
 80041a0:	4a0c      	ldr	r2, [pc, #48]	; (80041d4 <HAL_UART_MspInit+0x164>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80041a6:	2200      	movs	r2, #0
 80041a8:	2100      	movs	r1, #0
 80041aa:	2026      	movs	r0, #38	; 0x26
 80041ac:	f000 fa53 	bl	8004656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041b0:	2026      	movs	r0, #38	; 0x26
 80041b2:	f000 fa6c 	bl	800468e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041b6:	bf00      	nop
 80041b8:	3728      	adds	r7, #40	; 0x28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40004400 	.word	0x40004400
 80041c4:	40023800 	.word	0x40023800
 80041c8:	40020000 	.word	0x40020000
 80041cc:	20000454 	.word	0x20000454
 80041d0:	400260a0 	.word	0x400260a0
 80041d4:	20000358 	.word	0x20000358
 80041d8:	40026088 	.word	0x40026088

080041dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041e0:	e7fe      	b.n	80041e0 <NMI_Handler+0x4>

080041e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041e2:	b480      	push	{r7}
 80041e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041e6:	e7fe      	b.n	80041e6 <HardFault_Handler+0x4>

080041e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041ec:	e7fe      	b.n	80041ec <MemManage_Handler+0x4>

080041ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041ee:	b480      	push	{r7}
 80041f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041f2:	e7fe      	b.n	80041f2 <BusFault_Handler+0x4>

080041f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041f8:	e7fe      	b.n	80041f8 <UsageFault_Handler+0x4>

080041fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041fa:	b480      	push	{r7}
 80041fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004216:	b480      	push	{r7}
 8004218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004228:	f000 f91a 	bl	8004460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800422c:	bf00      	nop
 800422e:	bd80      	pop	{r7, pc}

08004230 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004234:	4802      	ldr	r0, [pc, #8]	; (8004240 <DMA1_Stream5_IRQHandler+0x10>)
 8004236:	f000 fbdd 	bl	80049f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000358 	.word	0x20000358

08004244 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004248:	4802      	ldr	r0, [pc, #8]	; (8004254 <DMA1_Stream6_IRQHandler+0x10>)
 800424a:	f000 fbd3 	bl	80049f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000454 	.word	0x20000454

08004258 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800425c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004260:	f000 fff6 	bl	8005250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004264:	bf00      	nop
 8004266:	bd80      	pop	{r7, pc}

08004268 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800426c:	4802      	ldr	r0, [pc, #8]	; (8004278 <TIM2_IRQHandler+0x10>)
 800426e:	f003 fe65 	bl	8007f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200004fc 	.word	0x200004fc

0800427c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004280:	4802      	ldr	r0, [pc, #8]	; (800428c <I2C1_EV_IRQHandler+0x10>)
 8004282:	f001 f9e7 	bl	8005654 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	200003b8 	.word	0x200003b8

08004290 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004294:	4802      	ldr	r0, [pc, #8]	; (80042a0 <I2C1_ER_IRQHandler+0x10>)
 8004296:	f001 fb4a 	bl	800592e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	200003b8 	.word	0x200003b8

080042a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042a8:	4802      	ldr	r0, [pc, #8]	; (80042b4 <USART2_IRQHandler+0x10>)
 80042aa:	f004 fd31 	bl	8008d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042ae:	bf00      	nop
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000544 	.word	0x20000544

080042b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80042bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80042c0:	f000 ffc6 	bl	8005250 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80042c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80042c8:	f000 ffc2 	bl	8005250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80042cc:	bf00      	nop
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042d8:	4a14      	ldr	r2, [pc, #80]	; (800432c <_sbrk+0x5c>)
 80042da:	4b15      	ldr	r3, [pc, #84]	; (8004330 <_sbrk+0x60>)
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042e4:	4b13      	ldr	r3, [pc, #76]	; (8004334 <_sbrk+0x64>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042ec:	4b11      	ldr	r3, [pc, #68]	; (8004334 <_sbrk+0x64>)
 80042ee:	4a12      	ldr	r2, [pc, #72]	; (8004338 <_sbrk+0x68>)
 80042f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <_sbrk+0x64>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d207      	bcs.n	8004310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004300:	f005 fb62 	bl	80099c8 <__errno>
 8004304:	4603      	mov	r3, r0
 8004306:	220c      	movs	r2, #12
 8004308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800430a:	f04f 33ff 	mov.w	r3, #4294967295
 800430e:	e009      	b.n	8004324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004310:	4b08      	ldr	r3, [pc, #32]	; (8004334 <_sbrk+0x64>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <_sbrk+0x64>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	4a05      	ldr	r2, [pc, #20]	; (8004334 <_sbrk+0x64>)
 8004320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004322:	68fb      	ldr	r3, [r7, #12]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20020000 	.word	0x20020000
 8004330:	00000400 	.word	0x00000400
 8004334:	2000034c 	.word	0x2000034c
 8004338:	200005a0 	.word	0x200005a0

0800433c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <SystemInit+0x28>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	4a07      	ldr	r2, [pc, #28]	; (8004364 <SystemInit+0x28>)
 8004348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800434c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004350:	4b04      	ldr	r3, [pc, #16]	; (8004364 <SystemInit+0x28>)
 8004352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004356:	609a      	str	r2, [r3, #8]
#endif
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800436c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800436e:	e003      	b.n	8004378 <LoopCopyDataInit>

08004370 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004372:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004374:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004376:	3104      	adds	r1, #4

08004378 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004378:	480b      	ldr	r0, [pc, #44]	; (80043a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800437a:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800437c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800437e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004380:	d3f6      	bcc.n	8004370 <CopyDataInit>
  ldr  r2, =_sbss
 8004382:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004384:	e002      	b.n	800438c <LoopFillZerobss>

08004386 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004386:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004388:	f842 3b04 	str.w	r3, [r2], #4

0800438c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800438e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004390:	d3f9      	bcc.n	8004386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004392:	f7ff ffd3 	bl	800433c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004396:	f005 fb1d 	bl	80099d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800439a:	f7fc fe85 	bl	80010a8 <main>
  bx  lr    
 800439e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80043a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80043a4:	08009d88 	.word	0x08009d88
  ldr  r0, =_sdata
 80043a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043ac:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80043b0:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80043b4:	2000059c 	.word	0x2000059c

080043b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043b8:	e7fe      	b.n	80043b8 <ADC_IRQHandler>
	...

080043bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043c0:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <HAL_Init+0x40>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a0d      	ldr	r2, [pc, #52]	; (80043fc <HAL_Init+0x40>)
 80043c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_Init+0x40>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <HAL_Init+0x40>)
 80043d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043d8:	4b08      	ldr	r3, [pc, #32]	; (80043fc <HAL_Init+0x40>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a07      	ldr	r2, [pc, #28]	; (80043fc <HAL_Init+0x40>)
 80043de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043e4:	2003      	movs	r0, #3
 80043e6:	f000 f92b 	bl	8004640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ea:	2000      	movs	r0, #0
 80043ec:	f000 f808 	bl	8004400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043f0:	f7ff fd00 	bl	8003df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40023c00 	.word	0x40023c00

08004400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <HAL_InitTick+0x54>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b12      	ldr	r3, [pc, #72]	; (8004458 <HAL_InitTick+0x58>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	4619      	mov	r1, r3
 8004412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004416:	fbb3 f3f1 	udiv	r3, r3, r1
 800441a:	fbb2 f3f3 	udiv	r3, r2, r3
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f943 	bl	80046aa <HAL_SYSTICK_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e00e      	b.n	800444c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b0f      	cmp	r3, #15
 8004432:	d80a      	bhi.n	800444a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004434:	2200      	movs	r2, #0
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	f04f 30ff 	mov.w	r0, #4294967295
 800443c:	f000 f90b 	bl	8004656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004440:	4a06      	ldr	r2, [pc, #24]	; (800445c <HAL_InitTick+0x5c>)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	e000      	b.n	800444c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000018 	.word	0x20000018
 8004458:	20000020 	.word	0x20000020
 800445c:	2000001c 	.word	0x2000001c

08004460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_IncTick+0x20>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_IncTick+0x24>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4413      	add	r3, r2
 8004470:	4a04      	ldr	r2, [pc, #16]	; (8004484 <HAL_IncTick+0x24>)
 8004472:	6013      	str	r3, [r2, #0]
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000020 	.word	0x20000020
 8004484:	20000588 	.word	0x20000588

08004488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return uwTick;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <HAL_GetTick+0x14>)
 800448e:	681b      	ldr	r3, [r3, #0]
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000588 	.word	0x20000588

080044a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b0:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <__NVIC_SetPriorityGrouping+0x44>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044bc:	4013      	ands	r3, r2
 80044be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044d2:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <__NVIC_SetPriorityGrouping+0x44>)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	60d3      	str	r3, [r2, #12]
}
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <__NVIC_GetPriorityGrouping+0x18>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	0a1b      	lsrs	r3, r3, #8
 80044f2:	f003 0307 	and.w	r3, r3, #7
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	2b00      	cmp	r3, #0
 8004514:	db0b      	blt.n	800452e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	f003 021f 	and.w	r2, r3, #31
 800451c:	4907      	ldr	r1, [pc, #28]	; (800453c <__NVIC_EnableIRQ+0x38>)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	2001      	movs	r0, #1
 8004526:	fa00 f202 	lsl.w	r2, r0, r2
 800452a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	e000e100 	.word	0xe000e100

08004540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	6039      	str	r1, [r7, #0]
 800454a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db0a      	blt.n	800456a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	490c      	ldr	r1, [pc, #48]	; (800458c <__NVIC_SetPriority+0x4c>)
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	0112      	lsls	r2, r2, #4
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	440b      	add	r3, r1
 8004564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004568:	e00a      	b.n	8004580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	4908      	ldr	r1, [pc, #32]	; (8004590 <__NVIC_SetPriority+0x50>)
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	3b04      	subs	r3, #4
 8004578:	0112      	lsls	r2, r2, #4
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	440b      	add	r3, r1
 800457e:	761a      	strb	r2, [r3, #24]
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	e000e100 	.word	0xe000e100
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004594:	b480      	push	{r7}
 8004596:	b089      	sub	sp, #36	; 0x24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f1c3 0307 	rsb	r3, r3, #7
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	bf28      	it	cs
 80045b2:	2304      	movcs	r3, #4
 80045b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3304      	adds	r3, #4
 80045ba:	2b06      	cmp	r3, #6
 80045bc:	d902      	bls.n	80045c4 <NVIC_EncodePriority+0x30>
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3b03      	subs	r3, #3
 80045c2:	e000      	b.n	80045c6 <NVIC_EncodePriority+0x32>
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43da      	mvns	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	401a      	ands	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045dc:	f04f 31ff 	mov.w	r1, #4294967295
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	fa01 f303 	lsl.w	r3, r1, r3
 80045e6:	43d9      	mvns	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ec:	4313      	orrs	r3, r2
         );
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3724      	adds	r7, #36	; 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3b01      	subs	r3, #1
 8004608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800460c:	d301      	bcc.n	8004612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800460e:	2301      	movs	r3, #1
 8004610:	e00f      	b.n	8004632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004612:	4a0a      	ldr	r2, [pc, #40]	; (800463c <SysTick_Config+0x40>)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3b01      	subs	r3, #1
 8004618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800461a:	210f      	movs	r1, #15
 800461c:	f04f 30ff 	mov.w	r0, #4294967295
 8004620:	f7ff ff8e 	bl	8004540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <SysTick_Config+0x40>)
 8004626:	2200      	movs	r2, #0
 8004628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800462a:	4b04      	ldr	r3, [pc, #16]	; (800463c <SysTick_Config+0x40>)
 800462c:	2207      	movs	r2, #7
 800462e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	e000e010 	.word	0xe000e010

08004640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff ff29 	bl	80044a0 <__NVIC_SetPriorityGrouping>
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004656:	b580      	push	{r7, lr}
 8004658:	b086      	sub	sp, #24
 800465a:	af00      	add	r7, sp, #0
 800465c:	4603      	mov	r3, r0
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004668:	f7ff ff3e 	bl	80044e8 <__NVIC_GetPriorityGrouping>
 800466c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	6978      	ldr	r0, [r7, #20]
 8004674:	f7ff ff8e 	bl	8004594 <NVIC_EncodePriority>
 8004678:	4602      	mov	r2, r0
 800467a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800467e:	4611      	mov	r1, r2
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ff5d 	bl	8004540 <__NVIC_SetPriority>
}
 8004686:	bf00      	nop
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	4603      	mov	r3, r0
 8004696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ff31 	bl	8004504 <__NVIC_EnableIRQ>
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff ffa2 	bl	80045fc <SysTick_Config>
 80046b8:	4603      	mov	r3, r0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046d0:	f7ff feda 	bl	8004488 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e099      	b.n	8004814 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0201 	bic.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004700:	e00f      	b.n	8004722 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004702:	f7ff fec1 	bl	8004488 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b05      	cmp	r3, #5
 800470e:	d908      	bls.n	8004722 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2203      	movs	r2, #3
 800471a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e078      	b.n	8004814 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e8      	bne.n	8004702 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4b38      	ldr	r3, [pc, #224]	; (800481c <HAL_DMA_Init+0x158>)
 800473c:	4013      	ands	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800474e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800475a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	2b04      	cmp	r3, #4
 800477a:	d107      	bne.n	800478c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	4313      	orrs	r3, r2
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 0307 	bic.w	r3, r3, #7
 80047a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d117      	bne.n	80047e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00e      	beq.n	80047e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fb0f 	bl	8004dec <DMA_CheckFifoParam>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2240      	movs	r2, #64	; 0x40
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047e2:	2301      	movs	r3, #1
 80047e4:	e016      	b.n	8004814 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fac6 	bl	8004d80 <DMA_CalcBaseAndBitshift>
 80047f4:	4603      	mov	r3, r0
 80047f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fc:	223f      	movs	r2, #63	; 0x3f
 80047fe:	409a      	lsls	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	f010803f 	.word	0xf010803f

08004820 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004836:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_DMA_Start_IT+0x26>
 8004842:	2302      	movs	r3, #2
 8004844:	e040      	b.n	80048c8 <HAL_DMA_Start_IT+0xa8>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b01      	cmp	r3, #1
 8004858:	d12f      	bne.n	80048ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fa58 	bl	8004d24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004878:	223f      	movs	r2, #63	; 0x3f
 800487a:	409a      	lsls	r2, r3
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0216 	orr.w	r2, r2, #22
 800488e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d007      	beq.n	80048a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0208 	orr.w	r2, r2, #8
 80048a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	e005      	b.n	80048c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048c2:	2302      	movs	r3, #2
 80048c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048de:	f7ff fdd3 	bl	8004488 <HAL_GetTick>
 80048e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d008      	beq.n	8004902 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2280      	movs	r2, #128	; 0x80
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e052      	b.n	80049a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0216 	bic.w	r2, r2, #22
 8004910:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004920:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d103      	bne.n	8004932 <HAL_DMA_Abort+0x62>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0208 	bic.w	r2, r2, #8
 8004940:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004952:	e013      	b.n	800497c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004954:	f7ff fd98 	bl	8004488 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b05      	cmp	r3, #5
 8004960:	d90c      	bls.n	800497c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2203      	movs	r2, #3
 8004974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e015      	b.n	80049a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e4      	bne.n	8004954 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	223f      	movs	r2, #63	; 0x3f
 8004990:	409a      	lsls	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d004      	beq.n	80049ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2280      	movs	r2, #128	; 0x80
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e00c      	b.n	80049e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2205      	movs	r2, #5
 80049d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0201 	bic.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a00:	4b92      	ldr	r3, [pc, #584]	; (8004c4c <HAL_DMA_IRQHandler+0x258>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a92      	ldr	r2, [pc, #584]	; (8004c50 <HAL_DMA_IRQHandler+0x25c>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	0a9b      	lsrs	r3, r3, #10
 8004a0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1e:	2208      	movs	r2, #8
 8004a20:	409a      	lsls	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01a      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d013      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0204 	bic.w	r2, r2, #4
 8004a46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a58:	f043 0201 	orr.w	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	2201      	movs	r2, #1
 8004a66:	409a      	lsls	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d012      	beq.n	8004a96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a82:	2201      	movs	r2, #1
 8004a84:	409a      	lsls	r2, r3
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	f043 0202 	orr.w	r2, r3, #2
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d012      	beq.n	8004acc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00b      	beq.n	8004acc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab8:	2204      	movs	r2, #4
 8004aba:	409a      	lsls	r2, r3
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac4:	f043 0204 	orr.w	r2, r3, #4
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad0:	2210      	movs	r2, #16
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d043      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d03c      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aee:	2210      	movs	r2, #16
 8004af0:	409a      	lsls	r2, r3
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d018      	beq.n	8004b36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d108      	bne.n	8004b24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d024      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
 8004b22:	e01f      	b.n	8004b64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01b      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	4798      	blx	r3
 8004b34:	e016      	b.n	8004b64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d107      	bne.n	8004b54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0208 	bic.w	r2, r2, #8
 8004b52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b68:	2220      	movs	r2, #32
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 808e 	beq.w	8004c92 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8086 	beq.w	8004c92 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b05      	cmp	r3, #5
 8004b9c:	d136      	bne.n	8004c0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0216 	bic.w	r2, r2, #22
 8004bac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d103      	bne.n	8004bce <HAL_DMA_IRQHandler+0x1da>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0208 	bic.w	r2, r2, #8
 8004bdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be2:	223f      	movs	r2, #63	; 0x3f
 8004be4:	409a      	lsls	r2, r3
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d07d      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	4798      	blx	r3
        }
        return;
 8004c0a:	e078      	b.n	8004cfe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d01c      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d108      	bne.n	8004c3a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d030      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4798      	blx	r3
 8004c38:	e02b      	b.n	8004c92 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d027      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	4798      	blx	r3
 8004c4a:	e022      	b.n	8004c92 <HAL_DMA_IRQHandler+0x29e>
 8004c4c:	20000018 	.word	0x20000018
 8004c50:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0210 	bic.w	r2, r2, #16
 8004c70:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d032      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d022      	beq.n	8004cec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2205      	movs	r2, #5
 8004caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0201 	bic.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d307      	bcc.n	8004cda <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f2      	bne.n	8004cbe <HAL_DMA_IRQHandler+0x2ca>
 8004cd8:	e000      	b.n	8004cdc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004cda:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
 8004cfc:	e000      	b.n	8004d00 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004cfe:	bf00      	nop
    }
  }
}
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop

08004d08 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d16:	b2db      	uxtb	r3, r3
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b40      	cmp	r3, #64	; 0x40
 8004d50:	d108      	bne.n	8004d64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d62:	e007      	b.n	8004d74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	3b10      	subs	r3, #16
 8004d90:	4a14      	ldr	r2, [pc, #80]	; (8004de4 <DMA_CalcBaseAndBitshift+0x64>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d9a:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <DMA_CalcBaseAndBitshift+0x68>)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d909      	bls.n	8004dc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004db6:	f023 0303 	bic.w	r3, r3, #3
 8004dba:	1d1a      	adds	r2, r3, #4
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	659a      	str	r2, [r3, #88]	; 0x58
 8004dc0:	e007      	b.n	8004dd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dca:	f023 0303 	bic.w	r3, r3, #3
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	aaaaaaab 	.word	0xaaaaaaab
 8004de8:	08009d70 	.word	0x08009d70

08004dec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d11f      	bne.n	8004e46 <DMA_CheckFifoParam+0x5a>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d856      	bhi.n	8004eba <DMA_CheckFifoParam+0xce>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <DMA_CheckFifoParam+0x28>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e25 	.word	0x08004e25
 8004e18:	08004e37 	.word	0x08004e37
 8004e1c:	08004e25 	.word	0x08004e25
 8004e20:	08004ebb 	.word	0x08004ebb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d046      	beq.n	8004ebe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e34:	e043      	b.n	8004ebe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e3e:	d140      	bne.n	8004ec2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e44:	e03d      	b.n	8004ec2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4e:	d121      	bne.n	8004e94 <DMA_CheckFifoParam+0xa8>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d837      	bhi.n	8004ec6 <DMA_CheckFifoParam+0xda>
 8004e56:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <DMA_CheckFifoParam+0x70>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004e6d 	.word	0x08004e6d
 8004e60:	08004e73 	.word	0x08004e73
 8004e64:	08004e6d 	.word	0x08004e6d
 8004e68:	08004e85 	.word	0x08004e85
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e70:	e030      	b.n	8004ed4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d025      	beq.n	8004eca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e82:	e022      	b.n	8004eca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e8c:	d11f      	bne.n	8004ece <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e92:	e01c      	b.n	8004ece <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d903      	bls.n	8004ea2 <DMA_CheckFifoParam+0xb6>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d003      	beq.n	8004ea8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ea0:	e018      	b.n	8004ed4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea6:	e015      	b.n	8004ed4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00e      	beq.n	8004ed2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb8:	e00b      	b.n	8004ed2 <DMA_CheckFifoParam+0xe6>
      break;
 8004eba:	bf00      	nop
 8004ebc:	e00a      	b.n	8004ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ebe:	bf00      	nop
 8004ec0:	e008      	b.n	8004ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ec2:	bf00      	nop
 8004ec4:	e006      	b.n	8004ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e004      	b.n	8004ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8004eca:	bf00      	nop
 8004ecc:	e002      	b.n	8004ed4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ece:	bf00      	nop
 8004ed0:	e000      	b.n	8004ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ed2:	bf00      	nop
    }
  } 
  
  return status; 
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop

08004ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b089      	sub	sp, #36	; 0x24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	e159      	b.n	80051b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f00:	2201      	movs	r2, #1
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4013      	ands	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	f040 8148 	bne.w	80051ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d005      	beq.n	8004f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d130      	bne.n	8004f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	2203      	movs	r2, #3
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	43db      	mvns	r3, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	43db      	mvns	r3, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 0201 	and.w	r2, r3, #1
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d017      	beq.n	8004fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	2203      	movs	r2, #3
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d123      	bne.n	8005028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	08da      	lsrs	r2, r3, #3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3208      	adds	r2, #8
 8004fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	220f      	movs	r2, #15
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4013      	ands	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	08da      	lsrs	r2, r3, #3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3208      	adds	r2, #8
 8005022:	69b9      	ldr	r1, [r7, #24]
 8005024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	2203      	movs	r2, #3
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	4013      	ands	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 0203 	and.w	r2, r3, #3
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4313      	orrs	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80a2 	beq.w	80051ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	4b57      	ldr	r3, [pc, #348]	; (80051cc <HAL_GPIO_Init+0x2e8>)
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	4a56      	ldr	r2, [pc, #344]	; (80051cc <HAL_GPIO_Init+0x2e8>)
 8005074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005078:	6453      	str	r3, [r2, #68]	; 0x44
 800507a:	4b54      	ldr	r3, [pc, #336]	; (80051cc <HAL_GPIO_Init+0x2e8>)
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005086:	4a52      	ldr	r2, [pc, #328]	; (80051d0 <HAL_GPIO_Init+0x2ec>)
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	089b      	lsrs	r3, r3, #2
 800508c:	3302      	adds	r3, #2
 800508e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	220f      	movs	r2, #15
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43db      	mvns	r3, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4013      	ands	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a49      	ldr	r2, [pc, #292]	; (80051d4 <HAL_GPIO_Init+0x2f0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d019      	beq.n	80050e6 <HAL_GPIO_Init+0x202>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a48      	ldr	r2, [pc, #288]	; (80051d8 <HAL_GPIO_Init+0x2f4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d013      	beq.n	80050e2 <HAL_GPIO_Init+0x1fe>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a47      	ldr	r2, [pc, #284]	; (80051dc <HAL_GPIO_Init+0x2f8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00d      	beq.n	80050de <HAL_GPIO_Init+0x1fa>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a46      	ldr	r2, [pc, #280]	; (80051e0 <HAL_GPIO_Init+0x2fc>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d007      	beq.n	80050da <HAL_GPIO_Init+0x1f6>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a45      	ldr	r2, [pc, #276]	; (80051e4 <HAL_GPIO_Init+0x300>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d101      	bne.n	80050d6 <HAL_GPIO_Init+0x1f2>
 80050d2:	2304      	movs	r3, #4
 80050d4:	e008      	b.n	80050e8 <HAL_GPIO_Init+0x204>
 80050d6:	2307      	movs	r3, #7
 80050d8:	e006      	b.n	80050e8 <HAL_GPIO_Init+0x204>
 80050da:	2303      	movs	r3, #3
 80050dc:	e004      	b.n	80050e8 <HAL_GPIO_Init+0x204>
 80050de:	2302      	movs	r3, #2
 80050e0:	e002      	b.n	80050e8 <HAL_GPIO_Init+0x204>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <HAL_GPIO_Init+0x204>
 80050e6:	2300      	movs	r3, #0
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	f002 0203 	and.w	r2, r2, #3
 80050ee:	0092      	lsls	r2, r2, #2
 80050f0:	4093      	lsls	r3, r2
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050f8:	4935      	ldr	r1, [pc, #212]	; (80051d0 <HAL_GPIO_Init+0x2ec>)
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	089b      	lsrs	r3, r3, #2
 80050fe:	3302      	adds	r3, #2
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005106:	4b38      	ldr	r3, [pc, #224]	; (80051e8 <HAL_GPIO_Init+0x304>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	43db      	mvns	r3, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4013      	ands	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800512a:	4a2f      	ldr	r2, [pc, #188]	; (80051e8 <HAL_GPIO_Init+0x304>)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005130:	4b2d      	ldr	r3, [pc, #180]	; (80051e8 <HAL_GPIO_Init+0x304>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005154:	4a24      	ldr	r2, [pc, #144]	; (80051e8 <HAL_GPIO_Init+0x304>)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800515a:	4b23      	ldr	r3, [pc, #140]	; (80051e8 <HAL_GPIO_Init+0x304>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	43db      	mvns	r3, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4013      	ands	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800517e:	4a1a      	ldr	r2, [pc, #104]	; (80051e8 <HAL_GPIO_Init+0x304>)
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005184:	4b18      	ldr	r3, [pc, #96]	; (80051e8 <HAL_GPIO_Init+0x304>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	43db      	mvns	r3, r3
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	4013      	ands	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051a8:	4a0f      	ldr	r2, [pc, #60]	; (80051e8 <HAL_GPIO_Init+0x304>)
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3301      	adds	r3, #1
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	2b0f      	cmp	r3, #15
 80051b8:	f67f aea2 	bls.w	8004f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	3724      	adds	r7, #36	; 0x24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40013800 	.word	0x40013800
 80051d4:	40020000 	.word	0x40020000
 80051d8:	40020400 	.word	0x40020400
 80051dc:	40020800 	.word	0x40020800
 80051e0:	40020c00 	.word	0x40020c00
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40013c00 	.word	0x40013c00

080051ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	887b      	ldrh	r3, [r7, #2]
 80051fe:	4013      	ands	r3, r2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
 8005208:	e001      	b.n	800520e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800520a:	2300      	movs	r3, #0
 800520c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800520e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	807b      	strh	r3, [r7, #2]
 8005228:	4613      	mov	r3, r2
 800522a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800522c:	787b      	ldrb	r3, [r7, #1]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005232:	887a      	ldrh	r2, [r7, #2]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005238:	e003      	b.n	8005242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800523a:	887b      	ldrh	r3, [r7, #2]
 800523c:	041a      	lsls	r2, r3, #16
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	619a      	str	r2, [r3, #24]
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800525a:	4b08      	ldr	r3, [pc, #32]	; (800527c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d006      	beq.n	8005274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005266:	4a05      	ldr	r2, [pc, #20]	; (800527c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005268:	88fb      	ldrh	r3, [r7, #6]
 800526a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	4618      	mov	r0, r3
 8005270:	f7fc fcc0 	bl	8001bf4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005274:	bf00      	nop
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40013c00 	.word	0x40013c00

08005280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e12b      	b.n	80054ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fe fdcc 	bl	8003e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2224      	movs	r2, #36	; 0x24
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052e4:	f002 fab8 	bl	8007858 <HAL_RCC_GetPCLK1Freq>
 80052e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	4a81      	ldr	r2, [pc, #516]	; (80054f4 <HAL_I2C_Init+0x274>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d807      	bhi.n	8005304 <HAL_I2C_Init+0x84>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a80      	ldr	r2, [pc, #512]	; (80054f8 <HAL_I2C_Init+0x278>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	bf94      	ite	ls
 80052fc:	2301      	movls	r3, #1
 80052fe:	2300      	movhi	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	e006      	b.n	8005312 <HAL_I2C_Init+0x92>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a7d      	ldr	r2, [pc, #500]	; (80054fc <HAL_I2C_Init+0x27c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	bf94      	ite	ls
 800530c:	2301      	movls	r3, #1
 800530e:	2300      	movhi	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e0e7      	b.n	80054ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4a78      	ldr	r2, [pc, #480]	; (8005500 <HAL_I2C_Init+0x280>)
 800531e:	fba2 2303 	umull	r2, r3, r2, r3
 8005322:	0c9b      	lsrs	r3, r3, #18
 8005324:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4a6a      	ldr	r2, [pc, #424]	; (80054f4 <HAL_I2C_Init+0x274>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d802      	bhi.n	8005354 <HAL_I2C_Init+0xd4>
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	3301      	adds	r3, #1
 8005352:	e009      	b.n	8005368 <HAL_I2C_Init+0xe8>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800535a:	fb02 f303 	mul.w	r3, r2, r3
 800535e:	4a69      	ldr	r2, [pc, #420]	; (8005504 <HAL_I2C_Init+0x284>)
 8005360:	fba2 2303 	umull	r2, r3, r2, r3
 8005364:	099b      	lsrs	r3, r3, #6
 8005366:	3301      	adds	r3, #1
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	430b      	orrs	r3, r1
 800536e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800537a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	495c      	ldr	r1, [pc, #368]	; (80054f4 <HAL_I2C_Init+0x274>)
 8005384:	428b      	cmp	r3, r1
 8005386:	d819      	bhi.n	80053bc <HAL_I2C_Init+0x13c>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1e59      	subs	r1, r3, #1
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	fbb1 f3f3 	udiv	r3, r1, r3
 8005396:	1c59      	adds	r1, r3, #1
 8005398:	f640 73fc 	movw	r3, #4092	; 0xffc
 800539c:	400b      	ands	r3, r1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_I2C_Init+0x138>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1e59      	subs	r1, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80053b0:	3301      	adds	r3, #1
 80053b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053b6:	e051      	b.n	800545c <HAL_I2C_Init+0x1dc>
 80053b8:	2304      	movs	r3, #4
 80053ba:	e04f      	b.n	800545c <HAL_I2C_Init+0x1dc>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d111      	bne.n	80053e8 <HAL_I2C_Init+0x168>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	1e58      	subs	r0, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6859      	ldr	r1, [r3, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	440b      	add	r3, r1
 80053d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053d6:	3301      	adds	r3, #1
 80053d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053dc:	2b00      	cmp	r3, #0
 80053de:	bf0c      	ite	eq
 80053e0:	2301      	moveq	r3, #1
 80053e2:	2300      	movne	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	e012      	b.n	800540e <HAL_I2C_Init+0x18e>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	1e58      	subs	r0, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6859      	ldr	r1, [r3, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	0099      	lsls	r1, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80053fe:	3301      	adds	r3, #1
 8005400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf0c      	ite	eq
 8005408:	2301      	moveq	r3, #1
 800540a:	2300      	movne	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <HAL_I2C_Init+0x196>
 8005412:	2301      	movs	r3, #1
 8005414:	e022      	b.n	800545c <HAL_I2C_Init+0x1dc>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10e      	bne.n	800543c <HAL_I2C_Init+0x1bc>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1e58      	subs	r0, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	460b      	mov	r3, r1
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	440b      	add	r3, r1
 800542c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005430:	3301      	adds	r3, #1
 8005432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543a:	e00f      	b.n	800545c <HAL_I2C_Init+0x1dc>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	1e58      	subs	r0, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6859      	ldr	r1, [r3, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	0099      	lsls	r1, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005452:	3301      	adds	r3, #1
 8005454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005458:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	6809      	ldr	r1, [r1, #0]
 8005460:	4313      	orrs	r3, r2
 8005462:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800548a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6911      	ldr	r1, [r2, #16]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	68d2      	ldr	r2, [r2, #12]
 8005496:	4311      	orrs	r1, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	430b      	orrs	r3, r1
 800549e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	000186a0 	.word	0x000186a0
 80054f8:	001e847f 	.word	0x001e847f
 80054fc:	003d08ff 	.word	0x003d08ff
 8005500:	431bde83 	.word	0x431bde83
 8005504:	10624dd3 	.word	0x10624dd3

08005508 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	607a      	str	r2, [r7, #4]
 8005512:	461a      	mov	r2, r3
 8005514:	460b      	mov	r3, r1
 8005516:	817b      	strh	r3, [r7, #10]
 8005518:	4613      	mov	r3, r2
 800551a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b20      	cmp	r3, #32
 800552a:	f040 8085 	bne.w	8005638 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800552e:	4b46      	ldr	r3, [pc, #280]	; (8005648 <HAL_I2C_Master_Transmit_IT+0x140>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	08db      	lsrs	r3, r3, #3
 8005534:	4a45      	ldr	r2, [pc, #276]	; (800564c <HAL_I2C_Master_Transmit_IT+0x144>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	0a1a      	lsrs	r2, r3, #8
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009a      	lsls	r2, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	3b01      	subs	r3, #1
 800554c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d116      	bne.n	8005582 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f043 0220 	orr.w	r2, r3, #32
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e05b      	b.n	800563a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b02      	cmp	r3, #2
 800558e:	d0db      	beq.n	8005548 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_I2C_Master_Transmit_IT+0x96>
 800559a:	2302      	movs	r3, #2
 800559c:	e04d      	b.n	800563a <HAL_I2C_Master_Transmit_IT+0x132>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d007      	beq.n	80055c4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2221      	movs	r2, #33	; 0x21
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2210      	movs	r2, #16
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	893a      	ldrh	r2, [r7, #8]
 80055f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4a13      	ldr	r2, [pc, #76]	; (8005650 <HAL_I2C_Master_Transmit_IT+0x148>)
 8005604:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005606:	897a      	ldrh	r2, [r7, #10]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800561a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005632:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	e000      	b.n	800563a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005638:	2302      	movs	r3, #2
  }
}
 800563a:	4618      	mov	r0, r3
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	20000018 	.word	0x20000018
 800564c:	14f8b589 	.word	0x14f8b589
 8005650:	ffff0000 	.word	0xffff0000

08005654 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005674:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b10      	cmp	r3, #16
 8005682:	d003      	beq.n	800568c <HAL_I2C_EV_IRQHandler+0x38>
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	2b40      	cmp	r3, #64	; 0x40
 8005688:	f040 80bd 	bne.w	8005806 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10d      	bne.n	80056c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80056ac:	d003      	beq.n	80056b6 <HAL_I2C_EV_IRQHandler+0x62>
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80056b4:	d101      	bne.n	80056ba <HAL_I2C_EV_IRQHandler+0x66>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <HAL_I2C_EV_IRQHandler+0x68>
 80056ba:	2300      	movs	r3, #0
 80056bc:	2b01      	cmp	r3, #1
 80056be:	f000 812e 	beq.w	800591e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00c      	beq.n	80056e6 <HAL_I2C_EV_IRQHandler+0x92>
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	0a5b      	lsrs	r3, r3, #9
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d006      	beq.n	80056e6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 fc55 	bl	8006f88 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fd62 	bl	80061a8 <I2C_Master_SB>
 80056e4:	e08e      	b.n	8005804 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	08db      	lsrs	r3, r3, #3
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <HAL_I2C_EV_IRQHandler+0xb2>
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	0a5b      	lsrs	r3, r3, #9
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fdd8 	bl	80062b4 <I2C_Master_ADD10>
 8005704:	e07e      	b.n	8005804 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <HAL_I2C_EV_IRQHandler+0xd2>
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	0a5b      	lsrs	r3, r3, #9
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fdf2 	bl	8006308 <I2C_Master_ADDR>
 8005724:	e06e      	b.n	8005804 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	089b      	lsrs	r3, r3, #2
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d037      	beq.n	80057a2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800573c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005740:	f000 80ef 	beq.w	8005922 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	09db      	lsrs	r3, r3, #7
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00f      	beq.n	8005770 <HAL_I2C_EV_IRQHandler+0x11c>
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	0a9b      	lsrs	r3, r3, #10
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d009      	beq.n	8005770 <HAL_I2C_EV_IRQHandler+0x11c>
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	089b      	lsrs	r3, r3, #2
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d103      	bne.n	8005770 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f9ef 	bl	8005b4c <I2C_MasterTransmit_TXE>
 800576e:	e049      	b.n	8005804 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	089b      	lsrs	r3, r3, #2
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 80d2 	beq.w	8005922 <HAL_I2C_EV_IRQHandler+0x2ce>
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	0a5b      	lsrs	r3, r3, #9
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 80cb 	beq.w	8005922 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	2b10      	cmp	r3, #16
 8005790:	d103      	bne.n	800579a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa76 	bl	8005c84 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005798:	e0c3      	b.n	8005922 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fada 	bl	8005d54 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057a0:	e0bf      	b.n	8005922 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b0:	f000 80b7 	beq.w	8005922 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	099b      	lsrs	r3, r3, #6
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00f      	beq.n	80057e0 <HAL_I2C_EV_IRQHandler+0x18c>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	0a9b      	lsrs	r3, r3, #10
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <HAL_I2C_EV_IRQHandler+0x18c>
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	089b      	lsrs	r3, r3, #2
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d103      	bne.n	80057e0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fb4a 	bl	8005e72 <I2C_MasterReceive_RXNE>
 80057de:	e011      	b.n	8005804 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 809a 	beq.w	8005922 <HAL_I2C_EV_IRQHandler+0x2ce>
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	0a5b      	lsrs	r3, r3, #9
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8093 	beq.w	8005922 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fbe9 	bl	8005fd4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005802:	e08e      	b.n	8005922 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005804:	e08d      	b.n	8005922 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d004      	beq.n	8005818 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	e007      	b.n	8005828 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	085b      	lsrs	r3, r3, #1
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d012      	beq.n	800585a <HAL_I2C_EV_IRQHandler+0x206>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	0a5b      	lsrs	r3, r3, #9
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00c      	beq.n	800585a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 ffa7 	bl	80067a6 <I2C_Slave_ADDR>
 8005858:	e066      	b.n	8005928 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	091b      	lsrs	r3, r3, #4
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_I2C_EV_IRQHandler+0x226>
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	0a5b      	lsrs	r3, r3, #9
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 ffdc 	bl	8006830 <I2C_Slave_STOPF>
 8005878:	e056      	b.n	8005928 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800587a:	7bbb      	ldrb	r3, [r7, #14]
 800587c:	2b21      	cmp	r3, #33	; 0x21
 800587e:	d002      	beq.n	8005886 <HAL_I2C_EV_IRQHandler+0x232>
 8005880:	7bbb      	ldrb	r3, [r7, #14]
 8005882:	2b29      	cmp	r3, #41	; 0x29
 8005884:	d125      	bne.n	80058d2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	09db      	lsrs	r3, r3, #7
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00f      	beq.n	80058b2 <HAL_I2C_EV_IRQHandler+0x25e>
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	0a9b      	lsrs	r3, r3, #10
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d009      	beq.n	80058b2 <HAL_I2C_EV_IRQHandler+0x25e>
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	089b      	lsrs	r3, r3, #2
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d103      	bne.n	80058b2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 febd 	bl	800662a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058b0:	e039      	b.n	8005926 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	089b      	lsrs	r3, r3, #2
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d033      	beq.n	8005926 <HAL_I2C_EV_IRQHandler+0x2d2>
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	0a5b      	lsrs	r3, r3, #9
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d02d      	beq.n	8005926 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 feea 	bl	80066a4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058d0:	e029      	b.n	8005926 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	099b      	lsrs	r3, r3, #6
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00f      	beq.n	80058fe <HAL_I2C_EV_IRQHandler+0x2aa>
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	0a9b      	lsrs	r3, r3, #10
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <HAL_I2C_EV_IRQHandler+0x2aa>
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d103      	bne.n	80058fe <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fef5 	bl	80066e6 <I2C_SlaveReceive_RXNE>
 80058fc:	e014      	b.n	8005928 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	089b      	lsrs	r3, r3, #2
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00e      	beq.n	8005928 <HAL_I2C_EV_IRQHandler+0x2d4>
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	0a5b      	lsrs	r3, r3, #9
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 ff23 	bl	8006762 <I2C_SlaveReceive_BTF>
 800591c:	e004      	b.n	8005928 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800591e:	bf00      	nop
 8005920:	e002      	b.n	8005928 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005922:	bf00      	nop
 8005924:	e000      	b.n	8005928 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005926:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b08a      	sub	sp, #40	; 0x28
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005946:	2300      	movs	r3, #0
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005950:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	0a1b      	lsrs	r3, r3, #8
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00e      	beq.n	800597c <HAL_I2C_ER_IRQHandler+0x4e>
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	0a1b      	lsrs	r3, r3, #8
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d008      	beq.n	800597c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	f043 0301 	orr.w	r3, r3, #1
 8005970:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800597a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	0a5b      	lsrs	r3, r3, #9
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00e      	beq.n	80059a6 <HAL_I2C_ER_IRQHandler+0x78>
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	0a1b      	lsrs	r3, r3, #8
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	f043 0302 	orr.w	r3, r3, #2
 800599a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80059a4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	0a9b      	lsrs	r3, r3, #10
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d03f      	beq.n	8005a32 <HAL_I2C_ER_IRQHandler+0x104>
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	0a1b      	lsrs	r3, r3, #8
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d039      	beq.n	8005a32 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80059be:	7efb      	ldrb	r3, [r7, #27]
 80059c0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80059d8:	7ebb      	ldrb	r3, [r7, #26]
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d112      	bne.n	8005a04 <HAL_I2C_ER_IRQHandler+0xd6>
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10f      	bne.n	8005a04 <HAL_I2C_ER_IRQHandler+0xd6>
 80059e4:	7cfb      	ldrb	r3, [r7, #19]
 80059e6:	2b21      	cmp	r3, #33	; 0x21
 80059e8:	d008      	beq.n	80059fc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80059ea:	7cfb      	ldrb	r3, [r7, #19]
 80059ec:	2b29      	cmp	r3, #41	; 0x29
 80059ee:	d005      	beq.n	80059fc <HAL_I2C_ER_IRQHandler+0xce>
 80059f0:	7cfb      	ldrb	r3, [r7, #19]
 80059f2:	2b28      	cmp	r3, #40	; 0x28
 80059f4:	d106      	bne.n	8005a04 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b21      	cmp	r3, #33	; 0x21
 80059fa:	d103      	bne.n	8005a04 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 f847 	bl	8006a90 <I2C_Slave_AF>
 8005a02:	e016      	b.n	8005a32 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a0c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	f043 0304 	orr.w	r3, r3, #4
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a16:	7efb      	ldrb	r3, [r7, #27]
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d002      	beq.n	8005a22 <HAL_I2C_ER_IRQHandler+0xf4>
 8005a1c:	7efb      	ldrb	r3, [r7, #27]
 8005a1e:	2b40      	cmp	r3, #64	; 0x40
 8005a20:	d107      	bne.n	8005a32 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a30:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	0adb      	lsrs	r3, r3, #11
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00e      	beq.n	8005a5c <HAL_I2C_ER_IRQHandler+0x12e>
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	0a1b      	lsrs	r3, r3, #8
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d008      	beq.n	8005a5c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	f043 0308 	orr.w	r3, r3, #8
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005a5a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d008      	beq.n	8005a74 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f001 f87e 	bl	8006b70 <I2C_ITError>
  }
}
 8005a74:	bf00      	nop
 8005a76:	3728      	adds	r7, #40	; 0x28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	70fb      	strb	r3, [r7, #3]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d150      	bne.n	8005c14 <I2C_MasterTransmit_TXE+0xc8>
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
 8005b74:	2b21      	cmp	r3, #33	; 0x21
 8005b76:	d14d      	bne.n	8005c14 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b08      	cmp	r3, #8
 8005b7c:	d01d      	beq.n	8005bba <I2C_MasterTransmit_TXE+0x6e>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d01a      	beq.n	8005bba <I2C_MasterTransmit_TXE+0x6e>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b8a:	d016      	beq.n	8005bba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b9a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2211      	movs	r2, #17
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff ff62 	bl	8005a7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bb8:	e060      	b.n	8005c7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bc8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b40      	cmp	r3, #64	; 0x40
 8005bf2:	d107      	bne.n	8005c04 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff ff7d 	bl	8005afc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c02:	e03b      	b.n	8005c7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff ff35 	bl	8005a7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c12:	e033      	b.n	8005c7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	2b21      	cmp	r3, #33	; 0x21
 8005c18:	d005      	beq.n	8005c26 <I2C_MasterTransmit_TXE+0xda>
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	2b40      	cmp	r3, #64	; 0x40
 8005c1e:	d12d      	bne.n	8005c7c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	2b22      	cmp	r3, #34	; 0x22
 8005c24:	d12a      	bne.n	8005c7c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d108      	bne.n	8005c42 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c3e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005c40:	e01c      	b.n	8005c7c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b40      	cmp	r3, #64	; 0x40
 8005c4c:	d103      	bne.n	8005c56 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f880 	bl	8005d54 <I2C_MemoryTransmit_TXE_BTF>
}
 8005c54:	e012      	b.n	8005c7c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	781a      	ldrb	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c7a:	e7ff      	b.n	8005c7c <I2C_MasterTransmit_TXE+0x130>
 8005c7c:	bf00      	nop
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b21      	cmp	r3, #33	; 0x21
 8005c9c:	d156      	bne.n	8005d4c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d012      	beq.n	8005cce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	781a      	ldrb	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005ccc:	e03e      	b.n	8005d4c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d01d      	beq.n	8005d10 <I2C_MasterTransmit_BTF+0x8c>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d01a      	beq.n	8005d10 <I2C_MasterTransmit_BTF+0x8c>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ce0:	d016      	beq.n	8005d10 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cf0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2211      	movs	r2, #17
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff feb7 	bl	8005a7c <HAL_I2C_MasterTxCpltCallback>
}
 8005d0e:	e01d      	b.n	8005d4c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d1e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d2e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff fe98 	bl	8005a7c <HAL_I2C_MasterTxCpltCallback>
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11d      	bne.n	8005da8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d10b      	bne.n	8005d8c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d84:	1c9a      	adds	r2, r3, #2
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005d8a:	e06e      	b.n	8005e6a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	121b      	asrs	r3, r3, #8
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005da6:	e060      	b.n	8005e6a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10b      	bne.n	8005dc8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005dc6:	e050      	b.n	8005e6a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d14c      	bne.n	8005e6a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b22      	cmp	r3, #34	; 0x22
 8005dd4:	d108      	bne.n	8005de8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005de4:	601a      	str	r2, [r3, #0]
}
 8005de6:	e040      	b.n	8005e6a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d015      	beq.n	8005e1e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	2b21      	cmp	r3, #33	; 0x21
 8005df6:	d112      	bne.n	8005e1e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	781a      	ldrb	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e1c:	e025      	b.n	8005e6a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d120      	bne.n	8005e6a <I2C_MemoryTransmit_TXE_BTF+0x116>
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	2b21      	cmp	r3, #33	; 0x21
 8005e2c:	d11d      	bne.n	8005e6a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e3c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e4c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7ff fe49 	bl	8005afc <HAL_I2C_MemTxCpltCallback>
}
 8005e6a:	bf00      	nop
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b22      	cmp	r3, #34	; 0x22
 8005e84:	f040 80a2 	bne.w	8005fcc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d921      	bls.n	8005eda <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	f040 8082 	bne.w	8005fcc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005ed8:	e078      	b.n	8005fcc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d074      	beq.n	8005fcc <I2C_MasterReceive_RXNE+0x15a>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d002      	beq.n	8005eee <I2C_MasterReceive_RXNE+0x7c>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d16e      	bne.n	8005fcc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f001 f818 	bl	8006f24 <I2C_WaitOnSTOPRequestThroughIT>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d142      	bne.n	8005f80 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f08:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f18:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b40      	cmp	r3, #64	; 0x40
 8005f52:	d10a      	bne.n	8005f6a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fdd4 	bl	8005b10 <HAL_I2C_MemRxCpltCallback>
}
 8005f68:	e030      	b.n	8005fcc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2212      	movs	r2, #18
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff fd89 	bl	8005a90 <HAL_I2C_MasterRxCpltCallback>
}
 8005f7e:	e025      	b.n	8005fcc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f8e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691a      	ldr	r2, [r3, #16]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff fdac 	bl	8005b24 <HAL_I2C_ErrorCallback>
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d11b      	bne.n	8006024 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ffa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006022:	e0bd      	b.n	80061a0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b03      	cmp	r3, #3
 800602c:	d129      	bne.n	8006082 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800603c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b04      	cmp	r3, #4
 8006042:	d00a      	beq.n	800605a <I2C_MasterReceive_BTF+0x86>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d007      	beq.n	800605a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006058:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006080:	e08e      	b.n	80061a0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d176      	bne.n	800617a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d002      	beq.n	8006098 <I2C_MasterReceive_BTF+0xc4>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b10      	cmp	r3, #16
 8006096:	d108      	bne.n	80060aa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	e019      	b.n	80060de <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d002      	beq.n	80060b6 <I2C_MasterReceive_BTF+0xe2>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d108      	bne.n	80060c8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	e00a      	b.n	80060de <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b10      	cmp	r3, #16
 80060cc:	d007      	beq.n	80060de <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691a      	ldr	r2, [r3, #16]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006120:	b29b      	uxth	r3, r3
 8006122:	3b01      	subs	r3, #1
 8006124:	b29a      	uxth	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006138:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d10a      	bne.n	8006164 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff fcd7 	bl	8005b10 <HAL_I2C_MemRxCpltCallback>
}
 8006162:	e01d      	b.n	80061a0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2212      	movs	r2, #18
 8006170:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7ff fc8c 	bl	8005a90 <HAL_I2C_MasterRxCpltCallback>
}
 8006178:	e012      	b.n	80061a0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b40      	cmp	r3, #64	; 0x40
 80061ba:	d117      	bne.n	80061ec <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d109      	bne.n	80061d8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061d4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80061d6:	e067      	b.n	80062a8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	f043 0301 	orr.w	r3, r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	611a      	str	r2, [r3, #16]
}
 80061ea:	e05d      	b.n	80062a8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061f4:	d133      	bne.n	800625e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b21      	cmp	r3, #33	; 0x21
 8006200:	d109      	bne.n	8006216 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006206:	b2db      	uxtb	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006212:	611a      	str	r2, [r3, #16]
 8006214:	e008      	b.n	8006228 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621a:	b2db      	uxtb	r3, r3
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	b2da      	uxtb	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622c:	2b00      	cmp	r3, #0
 800622e:	d004      	beq.n	800623a <I2C_Master_SB+0x92>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d108      	bne.n	800624c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	2b00      	cmp	r3, #0
 8006240:	d032      	beq.n	80062a8 <I2C_Master_SB+0x100>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d02d      	beq.n	80062a8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800625a:	605a      	str	r2, [r3, #4]
}
 800625c:	e024      	b.n	80062a8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10e      	bne.n	8006284 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626a:	b29b      	uxth	r3, r3
 800626c:	11db      	asrs	r3, r3, #7
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f003 0306 	and.w	r3, r3, #6
 8006274:	b2db      	uxtb	r3, r3
 8006276:	f063 030f 	orn	r3, r3, #15
 800627a:	b2da      	uxtb	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	611a      	str	r2, [r3, #16]
}
 8006282:	e011      	b.n	80062a8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006288:	2b01      	cmp	r3, #1
 800628a:	d10d      	bne.n	80062a8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006290:	b29b      	uxth	r3, r3
 8006292:	11db      	asrs	r3, r3, #7
 8006294:	b2db      	uxtb	r3, r3
 8006296:	f003 0306 	and.w	r3, r3, #6
 800629a:	b2db      	uxtb	r3, r3
 800629c:	f063 030e 	orn	r3, r3, #14
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	611a      	str	r2, [r3, #16]
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <I2C_Master_ADD10+0x26>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d108      	bne.n	80062ec <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00c      	beq.n	80062fc <I2C_Master_ADD10+0x48>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062fa:	605a      	str	r2, [r3, #4]
  }
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006308:	b480      	push	{r7}
 800630a:	b091      	sub	sp, #68	; 0x44
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006316:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b22      	cmp	r3, #34	; 0x22
 8006330:	f040 8169 	bne.w	8006606 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10f      	bne.n	800635c <I2C_Master_ADDR+0x54>
 800633c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006340:	2b40      	cmp	r3, #64	; 0x40
 8006342:	d10b      	bne.n	800635c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006344:	2300      	movs	r3, #0
 8006346:	633b      	str	r3, [r7, #48]	; 0x30
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	633b      	str	r3, [r7, #48]	; 0x30
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	633b      	str	r3, [r7, #48]	; 0x30
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	e160      	b.n	800661e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006360:	2b00      	cmp	r3, #0
 8006362:	d11d      	bne.n	80063a0 <I2C_Master_ADDR+0x98>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800636c:	d118      	bne.n	80063a0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800636e:	2300      	movs	r3, #0
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006392:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	651a      	str	r2, [r3, #80]	; 0x50
 800639e:	e13e      	b.n	800661e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d113      	bne.n	80063d2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063aa:	2300      	movs	r3, #0
 80063ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	e115      	b.n	80065fe <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	f040 808a 	bne.w	80064f2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063e4:	d137      	bne.n	8006456 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006404:	d113      	bne.n	800642e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006414:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006416:	2300      	movs	r3, #0
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	e0e7      	b.n	80065fe <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800642e:	2300      	movs	r3, #0
 8006430:	623b      	str	r3, [r7, #32]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	623b      	str	r3, [r7, #32]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	623b      	str	r3, [r7, #32]
 8006442:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	e0d3      	b.n	80065fe <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006458:	2b08      	cmp	r3, #8
 800645a:	d02e      	beq.n	80064ba <I2C_Master_ADDR+0x1b2>
 800645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645e:	2b20      	cmp	r3, #32
 8006460:	d02b      	beq.n	80064ba <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006464:	2b12      	cmp	r3, #18
 8006466:	d102      	bne.n	800646e <I2C_Master_ADDR+0x166>
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	2b01      	cmp	r3, #1
 800646c:	d125      	bne.n	80064ba <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	2b04      	cmp	r3, #4
 8006472:	d00e      	beq.n	8006492 <I2C_Master_ADDR+0x18a>
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	2b02      	cmp	r3, #2
 8006478:	d00b      	beq.n	8006492 <I2C_Master_ADDR+0x18a>
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	2b10      	cmp	r3, #16
 800647e:	d008      	beq.n	8006492 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	e007      	b.n	80064a2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064a2:	2300      	movs	r3, #0
 80064a4:	61fb      	str	r3, [r7, #28]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	61fb      	str	r3, [r7, #28]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	61fb      	str	r3, [r7, #28]
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	e0a1      	b.n	80065fe <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ca:	2300      	movs	r3, #0
 80064cc:	61bb      	str	r3, [r7, #24]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	61bb      	str	r3, [r7, #24]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	e085      	b.n	80065fe <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d14d      	bne.n	8006598 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d016      	beq.n	8006530 <I2C_Master_ADDR+0x228>
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	2b02      	cmp	r3, #2
 8006506:	d013      	beq.n	8006530 <I2C_Master_ADDR+0x228>
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	2b10      	cmp	r3, #16
 800650c:	d010      	beq.n	8006530 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800651c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	e007      	b.n	8006540 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800653e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800654a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800654e:	d117      	bne.n	8006580 <I2C_Master_ADDR+0x278>
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006556:	d00b      	beq.n	8006570 <I2C_Master_ADDR+0x268>
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	2b01      	cmp	r3, #1
 800655c:	d008      	beq.n	8006570 <I2C_Master_ADDR+0x268>
 800655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006560:	2b08      	cmp	r3, #8
 8006562:	d005      	beq.n	8006570 <I2C_Master_ADDR+0x268>
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	2b10      	cmp	r3, #16
 8006568:	d002      	beq.n	8006570 <I2C_Master_ADDR+0x268>
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	2b20      	cmp	r3, #32
 800656e:	d107      	bne.n	8006580 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800657e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006580:	2300      	movs	r3, #0
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	e032      	b.n	80065fe <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065a6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b6:	d117      	bne.n	80065e8 <I2C_Master_ADDR+0x2e0>
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065be:	d00b      	beq.n	80065d8 <I2C_Master_ADDR+0x2d0>
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d008      	beq.n	80065d8 <I2C_Master_ADDR+0x2d0>
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d005      	beq.n	80065d8 <I2C_Master_ADDR+0x2d0>
 80065cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d002      	beq.n	80065d8 <I2C_Master_ADDR+0x2d0>
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d107      	bne.n	80065e8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065e6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e8:	2300      	movs	r3, #0
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006604:	e00b      	b.n	800661e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	68fb      	ldr	r3, [r7, #12]
}
 800661c:	e7ff      	b.n	800661e <I2C_Master_ADDR+0x316>
 800661e:	bf00      	nop
 8006620:	3744      	adds	r7, #68	; 0x44
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006638:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d02b      	beq.n	800669c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	781a      	ldrb	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d114      	bne.n	800669c <I2C_SlaveTransmit_TXE+0x72>
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b29      	cmp	r3, #41	; 0x29
 8006676:	d111      	bne.n	800669c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006686:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2221      	movs	r2, #33	; 0x21
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2228      	movs	r2, #40	; 0x28
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff fa04 	bl	8005aa4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800669c:	bf00      	nop
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d011      	beq.n	80066da <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	781a      	ldrb	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d02c      	beq.n	800675a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691a      	ldr	r2, [r3, #16]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29a      	uxth	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672a:	b29b      	uxth	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d114      	bne.n	800675a <I2C_SlaveReceive_RXNE+0x74>
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	2b2a      	cmp	r3, #42	; 0x2a
 8006734:	d111      	bne.n	800675a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006744:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2222      	movs	r2, #34	; 0x22
 800674a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2228      	movs	r2, #40	; 0x28
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff f9af 	bl	8005ab8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800675a:	bf00      	nop
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d012      	beq.n	800679a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80067b0:	2300      	movs	r3, #0
 80067b2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067c0:	2b28      	cmp	r3, #40	; 0x28
 80067c2:	d127      	bne.n	8006814 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	089b      	lsrs	r3, r3, #2
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80067e0:	2301      	movs	r3, #1
 80067e2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	09db      	lsrs	r3, r3, #7
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d103      	bne.n	80067f8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	81bb      	strh	r3, [r7, #12]
 80067f6:	e002      	b.n	80067fe <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006806:	89ba      	ldrh	r2, [r7, #12]
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff f95d 	bl	8005acc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006812:	e008      	b.n	8006826 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f06f 0202 	mvn.w	r2, #2
 800681c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800684e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006850:	2300      	movs	r3, #0
 8006852:	60bb      	str	r3, [r7, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	60bb      	str	r3, [r7, #8]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f042 0201 	orr.w	r2, r2, #1
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800687c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800688c:	d172      	bne.n	8006974 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	2b22      	cmp	r3, #34	; 0x22
 8006892:	d002      	beq.n	800689a <I2C_Slave_STOPF+0x6a>
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	2b2a      	cmp	r3, #42	; 0x2a
 8006898:	d135      	bne.n	8006906 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	f043 0204 	orr.w	r2, r3, #4
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fa18 	bl	8004d08 <HAL_DMA_GetState>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d049      	beq.n	8006972 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	4a69      	ldr	r2, [pc, #420]	; (8006a88 <I2C_Slave_STOPF+0x258>)
 80068e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe f860 	bl	80049b0 <HAL_DMA_Abort_IT>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d03d      	beq.n	8006972 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006900:	4610      	mov	r0, r2
 8006902:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006904:	e035      	b.n	8006972 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	b29a      	uxth	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006918:	b29b      	uxth	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f043 0204 	orr.w	r2, r3, #4
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006938:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe f9e2 	bl	8004d08 <HAL_DMA_GetState>
 8006944:	4603      	mov	r3, r0
 8006946:	2b01      	cmp	r3, #1
 8006948:	d014      	beq.n	8006974 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694e:	4a4e      	ldr	r2, [pc, #312]	; (8006a88 <I2C_Slave_STOPF+0x258>)
 8006950:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe f82a 	bl	80049b0 <HAL_DMA_Abort_IT>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d008      	beq.n	8006974 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800696c:	4610      	mov	r0, r2
 800696e:	4798      	blx	r3
 8006970:	e000      	b.n	8006974 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006972:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d03e      	beq.n	80069fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b04      	cmp	r3, #4
 800698a:	d112      	bne.n	80069b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069bc:	2b40      	cmp	r3, #64	; 0x40
 80069be:	d112      	bne.n	80069e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691a      	ldr	r2, [r3, #16]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	f043 0204 	orr.w	r2, r3, #4
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f8b3 	bl	8006b70 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006a0a:	e039      	b.n	8006a80 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a10:	d109      	bne.n	8006a26 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2228      	movs	r2, #40	; 0x28
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff f849 	bl	8005ab8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b28      	cmp	r3, #40	; 0x28
 8006a30:	d111      	bne.n	8006a56 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a15      	ldr	r2, [pc, #84]	; (8006a8c <I2C_Slave_STOPF+0x25c>)
 8006a36:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff f84a 	bl	8005ae8 <HAL_I2C_ListenCpltCallback>
}
 8006a54:	e014      	b.n	8006a80 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	2b22      	cmp	r3, #34	; 0x22
 8006a5c:	d002      	beq.n	8006a64 <I2C_Slave_STOPF+0x234>
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	2b22      	cmp	r3, #34	; 0x22
 8006a62:	d10d      	bne.n	8006a80 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff f81c 	bl	8005ab8 <HAL_I2C_SlaveRxCpltCallback>
}
 8006a80:	bf00      	nop
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	08006dd5 	.word	0x08006dd5
 8006a8c:	ffff0000 	.word	0xffff0000

08006a90 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d002      	beq.n	8006ab2 <I2C_Slave_AF+0x22>
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d129      	bne.n	8006b06 <I2C_Slave_AF+0x76>
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b28      	cmp	r3, #40	; 0x28
 8006ab6:	d126      	bne.n	8006b06 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a2c      	ldr	r2, [pc, #176]	; (8006b6c <I2C_Slave_AF+0xdc>)
 8006abc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006acc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ad6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fe fff2 	bl	8005ae8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006b04:	e02e      	b.n	8006b64 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	2b21      	cmp	r3, #33	; 0x21
 8006b0a:	d126      	bne.n	8006b5a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a17      	ldr	r2, [pc, #92]	; (8006b6c <I2C_Slave_AF+0xdc>)
 8006b10:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2221      	movs	r2, #33	; 0x21
 8006b16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b36:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b40:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b50:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7fe ffa6 	bl	8005aa4 <HAL_I2C_SlaveTxCpltCallback>
}
 8006b58:	e004      	b.n	8006b64 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b62:	615a      	str	r2, [r3, #20]
}
 8006b64:	bf00      	nop
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	ffff0000 	.word	0xffff0000

08006b70 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b86:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	2b10      	cmp	r3, #16
 8006b8c:	d002      	beq.n	8006b94 <I2C_ITError+0x24>
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	2b40      	cmp	r3, #64	; 0x40
 8006b92:	d10a      	bne.n	8006baa <I2C_ITError+0x3a>
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	2b22      	cmp	r3, #34	; 0x22
 8006b98:	d107      	bne.n	8006baa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ba8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006bb0:	2b28      	cmp	r3, #40	; 0x28
 8006bb2:	d107      	bne.n	8006bc4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2228      	movs	r2, #40	; 0x28
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006bc2:	e015      	b.n	8006bf0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd2:	d00a      	beq.n	8006bea <I2C_ITError+0x7a>
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2b60      	cmp	r3, #96	; 0x60
 8006bd8:	d007      	beq.n	8006bea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bfe:	d162      	bne.n	8006cc6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c0e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d020      	beq.n	8006c60 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c22:	4a6a      	ldr	r2, [pc, #424]	; (8006dcc <I2C_ITError+0x25c>)
 8006c24:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fd fec0 	bl	80049b0 <HAL_DMA_Abort_IT>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 8089 	beq.w	8006d4a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0201 	bic.w	r2, r2, #1
 8006c46:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	4798      	blx	r3
 8006c5e:	e074      	b.n	8006d4a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	4a59      	ldr	r2, [pc, #356]	; (8006dcc <I2C_ITError+0x25c>)
 8006c66:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fd fe9f 	bl	80049b0 <HAL_DMA_Abort_IT>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d068      	beq.n	8006d4a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c82:	2b40      	cmp	r3, #64	; 0x40
 8006c84:	d10b      	bne.n	8006c9e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0201 	bic.w	r2, r2, #1
 8006cac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4798      	blx	r3
 8006cc4:	e041      	b.n	8006d4a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b60      	cmp	r3, #96	; 0x60
 8006cd0:	d125      	bne.n	8006d1e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d10b      	bne.n	8006d06 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0201 	bic.w	r2, r2, #1
 8006d14:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7fe ff0e 	bl	8005b38 <HAL_I2C_AbortCpltCallback>
 8006d1c:	e015      	b.n	8006d4a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d28:	2b40      	cmp	r3, #64	; 0x40
 8006d2a:	d10b      	bne.n	8006d44 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7fe feed 	bl	8005b24 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10e      	bne.n	8006d78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d109      	bne.n	8006d78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d104      	bne.n	8006d78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d86:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d113      	bne.n	8006dc4 <I2C_ITError+0x254>
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	2b28      	cmp	r3, #40	; 0x28
 8006da0:	d110      	bne.n	8006dc4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a0a      	ldr	r2, [pc, #40]	; (8006dd0 <I2C_ITError+0x260>)
 8006da6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fe fe92 	bl	8005ae8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006dc4:	bf00      	nop
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	08006dd5 	.word	0x08006dd5
 8006dd0:	ffff0000 	.word	0xffff0000

08006dd4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006dee:	4b4b      	ldr	r3, [pc, #300]	; (8006f1c <I2C_DMAAbort+0x148>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	08db      	lsrs	r3, r3, #3
 8006df4:	4a4a      	ldr	r2, [pc, #296]	; (8006f20 <I2C_DMAAbort+0x14c>)
 8006df6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfa:	0a1a      	lsrs	r2, r3, #8
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	00da      	lsls	r2, r3, #3
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	f043 0220 	orr.w	r2, r3, #32
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006e1a:	e00a      	b.n	8006e32 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e30:	d0ea      	beq.n	8006e08 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3e:	2200      	movs	r2, #0
 8006e40:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4e:	2200      	movs	r2, #0
 8006e50:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e60:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2200      	movs	r2, #0
 8006e66:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e74:	2200      	movs	r2, #0
 8006e76:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	2200      	movs	r2, #0
 8006e86:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0201 	bic.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b60      	cmp	r3, #96	; 0x60
 8006ea2:	d10e      	bne.n	8006ec2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006eba:	6978      	ldr	r0, [r7, #20]
 8006ebc:	f7fe fe3c 	bl	8005b38 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ec0:	e027      	b.n	8006f12 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ec2:	7cfb      	ldrb	r3, [r7, #19]
 8006ec4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ec8:	2b28      	cmp	r3, #40	; 0x28
 8006eca:	d117      	bne.n	8006efc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0201 	orr.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006eea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2228      	movs	r2, #40	; 0x28
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006efa:	e007      	b.n	8006f0c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006f0c:	6978      	ldr	r0, [r7, #20]
 8006f0e:	f7fe fe09 	bl	8005b24 <HAL_I2C_ErrorCallback>
}
 8006f12:	bf00      	nop
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000018 	.word	0x20000018
 8006f20:	14f8b589 	.word	0x14f8b589

08006f24 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f30:	4b13      	ldr	r3, [pc, #76]	; (8006f80 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	08db      	lsrs	r3, r3, #3
 8006f36:	4a13      	ldr	r2, [pc, #76]	; (8006f84 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006f38:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3c:	0a1a      	lsrs	r2, r3, #8
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d107      	bne.n	8006f62 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	f043 0220 	orr.w	r2, r3, #32
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e008      	b.n	8006f74 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f70:	d0e9      	beq.n	8006f46 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	20000018 	.word	0x20000018
 8006f84:	14f8b589 	.word	0x14f8b589

08006f88 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006f98:	d103      	bne.n	8006fa2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006fa0:	e007      	b.n	8006fb2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006faa:	d102      	bne.n	8006fb2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2208      	movs	r2, #8
 8006fb0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
	...

08006fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e264      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d075      	beq.n	80070ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fde:	4ba3      	ldr	r3, [pc, #652]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 030c 	and.w	r3, r3, #12
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d00c      	beq.n	8007004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fea:	4ba0      	ldr	r3, [pc, #640]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d112      	bne.n	800701c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ff6:	4b9d      	ldr	r3, [pc, #628]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007002:	d10b      	bne.n	800701c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007004:	4b99      	ldr	r3, [pc, #612]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d05b      	beq.n	80070c8 <HAL_RCC_OscConfig+0x108>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d157      	bne.n	80070c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e23f      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007024:	d106      	bne.n	8007034 <HAL_RCC_OscConfig+0x74>
 8007026:	4b91      	ldr	r3, [pc, #580]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a90      	ldr	r2, [pc, #576]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 800702c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	e01d      	b.n	8007070 <HAL_RCC_OscConfig+0xb0>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800703c:	d10c      	bne.n	8007058 <HAL_RCC_OscConfig+0x98>
 800703e:	4b8b      	ldr	r3, [pc, #556]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a8a      	ldr	r2, [pc, #552]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	4b88      	ldr	r3, [pc, #544]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a87      	ldr	r2, [pc, #540]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	e00b      	b.n	8007070 <HAL_RCC_OscConfig+0xb0>
 8007058:	4b84      	ldr	r3, [pc, #528]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a83      	ldr	r2, [pc, #524]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 800705e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	4b81      	ldr	r3, [pc, #516]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a80      	ldr	r2, [pc, #512]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 800706a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800706e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d013      	beq.n	80070a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007078:	f7fd fa06 	bl	8004488 <HAL_GetTick>
 800707c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007080:	f7fd fa02 	bl	8004488 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b64      	cmp	r3, #100	; 0x64
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e204      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007092:	4b76      	ldr	r3, [pc, #472]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d0f0      	beq.n	8007080 <HAL_RCC_OscConfig+0xc0>
 800709e:	e014      	b.n	80070ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a0:	f7fd f9f2 	bl	8004488 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070a8:	f7fd f9ee 	bl	8004488 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b64      	cmp	r3, #100	; 0x64
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e1f0      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ba:	4b6c      	ldr	r3, [pc, #432]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <HAL_RCC_OscConfig+0xe8>
 80070c6:	e000      	b.n	80070ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d063      	beq.n	800719e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070d6:	4b65      	ldr	r3, [pc, #404]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 030c 	and.w	r3, r3, #12
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070e2:	4b62      	ldr	r3, [pc, #392]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070ea:	2b08      	cmp	r3, #8
 80070ec:	d11c      	bne.n	8007128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070ee:	4b5f      	ldr	r3, [pc, #380]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d116      	bne.n	8007128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070fa:	4b5c      	ldr	r3, [pc, #368]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d005      	beq.n	8007112 <HAL_RCC_OscConfig+0x152>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d001      	beq.n	8007112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e1c4      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007112:	4b56      	ldr	r3, [pc, #344]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	4952      	ldr	r1, [pc, #328]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007122:	4313      	orrs	r3, r2
 8007124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007126:	e03a      	b.n	800719e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d020      	beq.n	8007172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007130:	4b4f      	ldr	r3, [pc, #316]	; (8007270 <HAL_RCC_OscConfig+0x2b0>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007136:	f7fd f9a7 	bl	8004488 <HAL_GetTick>
 800713a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800713e:	f7fd f9a3 	bl	8004488 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e1a5      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007150:	4b46      	ldr	r3, [pc, #280]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0f0      	beq.n	800713e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800715c:	4b43      	ldr	r3, [pc, #268]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	4940      	ldr	r1, [pc, #256]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 800716c:	4313      	orrs	r3, r2
 800716e:	600b      	str	r3, [r1, #0]
 8007170:	e015      	b.n	800719e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007172:	4b3f      	ldr	r3, [pc, #252]	; (8007270 <HAL_RCC_OscConfig+0x2b0>)
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007178:	f7fd f986 	bl	8004488 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007180:	f7fd f982 	bl	8004488 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e184      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007192:	4b36      	ldr	r3, [pc, #216]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f0      	bne.n	8007180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d030      	beq.n	800720c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d016      	beq.n	80071e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071b2:	4b30      	ldr	r3, [pc, #192]	; (8007274 <HAL_RCC_OscConfig+0x2b4>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b8:	f7fd f966 	bl	8004488 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071c0:	f7fd f962 	bl	8004488 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e164      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071d2:	4b26      	ldr	r3, [pc, #152]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 80071d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0f0      	beq.n	80071c0 <HAL_RCC_OscConfig+0x200>
 80071de:	e015      	b.n	800720c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071e0:	4b24      	ldr	r3, [pc, #144]	; (8007274 <HAL_RCC_OscConfig+0x2b4>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071e6:	f7fd f94f 	bl	8004488 <HAL_GetTick>
 80071ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071ec:	e008      	b.n	8007200 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071ee:	f7fd f94b 	bl	8004488 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d901      	bls.n	8007200 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e14d      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007200:	4b1a      	ldr	r3, [pc, #104]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1f0      	bne.n	80071ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 80a0 	beq.w	800735a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800721a:	2300      	movs	r3, #0
 800721c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800721e:	4b13      	ldr	r3, [pc, #76]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10f      	bne.n	800724a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800722a:	2300      	movs	r3, #0
 800722c:	60bb      	str	r3, [r7, #8]
 800722e:	4b0f      	ldr	r3, [pc, #60]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	4a0e      	ldr	r2, [pc, #56]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 8007234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007238:	6413      	str	r3, [r2, #64]	; 0x40
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <HAL_RCC_OscConfig+0x2ac>)
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007242:	60bb      	str	r3, [r7, #8]
 8007244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007246:	2301      	movs	r3, #1
 8007248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800724a:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <HAL_RCC_OscConfig+0x2b8>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007252:	2b00      	cmp	r3, #0
 8007254:	d121      	bne.n	800729a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007256:	4b08      	ldr	r3, [pc, #32]	; (8007278 <HAL_RCC_OscConfig+0x2b8>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a07      	ldr	r2, [pc, #28]	; (8007278 <HAL_RCC_OscConfig+0x2b8>)
 800725c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007262:	f7fd f911 	bl	8004488 <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007268:	e011      	b.n	800728e <HAL_RCC_OscConfig+0x2ce>
 800726a:	bf00      	nop
 800726c:	40023800 	.word	0x40023800
 8007270:	42470000 	.word	0x42470000
 8007274:	42470e80 	.word	0x42470e80
 8007278:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800727c:	f7fd f904 	bl	8004488 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d901      	bls.n	800728e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e106      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800728e:	4b85      	ldr	r3, [pc, #532]	; (80074a4 <HAL_RCC_OscConfig+0x4e4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0f0      	beq.n	800727c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d106      	bne.n	80072b0 <HAL_RCC_OscConfig+0x2f0>
 80072a2:	4b81      	ldr	r3, [pc, #516]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	4a80      	ldr	r2, [pc, #512]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 80072a8:	f043 0301 	orr.w	r3, r3, #1
 80072ac:	6713      	str	r3, [r2, #112]	; 0x70
 80072ae:	e01c      	b.n	80072ea <HAL_RCC_OscConfig+0x32a>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	2b05      	cmp	r3, #5
 80072b6:	d10c      	bne.n	80072d2 <HAL_RCC_OscConfig+0x312>
 80072b8:	4b7b      	ldr	r3, [pc, #492]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 80072ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072bc:	4a7a      	ldr	r2, [pc, #488]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 80072be:	f043 0304 	orr.w	r3, r3, #4
 80072c2:	6713      	str	r3, [r2, #112]	; 0x70
 80072c4:	4b78      	ldr	r3, [pc, #480]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 80072c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c8:	4a77      	ldr	r2, [pc, #476]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	6713      	str	r3, [r2, #112]	; 0x70
 80072d0:	e00b      	b.n	80072ea <HAL_RCC_OscConfig+0x32a>
 80072d2:	4b75      	ldr	r3, [pc, #468]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 80072d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d6:	4a74      	ldr	r2, [pc, #464]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 80072d8:	f023 0301 	bic.w	r3, r3, #1
 80072dc:	6713      	str	r3, [r2, #112]	; 0x70
 80072de:	4b72      	ldr	r3, [pc, #456]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 80072e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e2:	4a71      	ldr	r2, [pc, #452]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 80072e4:	f023 0304 	bic.w	r3, r3, #4
 80072e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d015      	beq.n	800731e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f2:	f7fd f8c9 	bl	8004488 <HAL_GetTick>
 80072f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072f8:	e00a      	b.n	8007310 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072fa:	f7fd f8c5 	bl	8004488 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	f241 3288 	movw	r2, #5000	; 0x1388
 8007308:	4293      	cmp	r3, r2
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e0c5      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007310:	4b65      	ldr	r3, [pc, #404]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 8007312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0ee      	beq.n	80072fa <HAL_RCC_OscConfig+0x33a>
 800731c:	e014      	b.n	8007348 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800731e:	f7fd f8b3 	bl	8004488 <HAL_GetTick>
 8007322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007324:	e00a      	b.n	800733c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007326:	f7fd f8af 	bl	8004488 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	f241 3288 	movw	r2, #5000	; 0x1388
 8007334:	4293      	cmp	r3, r2
 8007336:	d901      	bls.n	800733c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e0af      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800733c:	4b5a      	ldr	r3, [pc, #360]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 800733e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1ee      	bne.n	8007326 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007348:	7dfb      	ldrb	r3, [r7, #23]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d105      	bne.n	800735a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800734e:	4b56      	ldr	r3, [pc, #344]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	4a55      	ldr	r2, [pc, #340]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 8007354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007358:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 809b 	beq.w	800749a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007364:	4b50      	ldr	r3, [pc, #320]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 030c 	and.w	r3, r3, #12
 800736c:	2b08      	cmp	r3, #8
 800736e:	d05c      	beq.n	800742a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	2b02      	cmp	r3, #2
 8007376:	d141      	bne.n	80073fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007378:	4b4c      	ldr	r3, [pc, #304]	; (80074ac <HAL_RCC_OscConfig+0x4ec>)
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800737e:	f7fd f883 	bl	8004488 <HAL_GetTick>
 8007382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007384:	e008      	b.n	8007398 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007386:	f7fd f87f 	bl	8004488 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d901      	bls.n	8007398 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e081      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007398:	4b43      	ldr	r3, [pc, #268]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f0      	bne.n	8007386 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	69da      	ldr	r2, [r3, #28]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	019b      	lsls	r3, r3, #6
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	085b      	lsrs	r3, r3, #1
 80073bc:	3b01      	subs	r3, #1
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c6:	061b      	lsls	r3, r3, #24
 80073c8:	4937      	ldr	r1, [pc, #220]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073ce:	4b37      	ldr	r3, [pc, #220]	; (80074ac <HAL_RCC_OscConfig+0x4ec>)
 80073d0:	2201      	movs	r2, #1
 80073d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073d4:	f7fd f858 	bl	8004488 <HAL_GetTick>
 80073d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073da:	e008      	b.n	80073ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073dc:	f7fd f854 	bl	8004488 <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d901      	bls.n	80073ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e056      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ee:	4b2e      	ldr	r3, [pc, #184]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0f0      	beq.n	80073dc <HAL_RCC_OscConfig+0x41c>
 80073fa:	e04e      	b.n	800749a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073fc:	4b2b      	ldr	r3, [pc, #172]	; (80074ac <HAL_RCC_OscConfig+0x4ec>)
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007402:	f7fd f841 	bl	8004488 <HAL_GetTick>
 8007406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007408:	e008      	b.n	800741c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800740a:	f7fd f83d 	bl	8004488 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d901      	bls.n	800741c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e03f      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800741c:	4b22      	ldr	r3, [pc, #136]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1f0      	bne.n	800740a <HAL_RCC_OscConfig+0x44a>
 8007428:	e037      	b.n	800749a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d101      	bne.n	8007436 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e032      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007436:	4b1c      	ldr	r3, [pc, #112]	; (80074a8 <HAL_RCC_OscConfig+0x4e8>)
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d028      	beq.n	8007496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800744e:	429a      	cmp	r2, r3
 8007450:	d121      	bne.n	8007496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800745c:	429a      	cmp	r2, r3
 800745e:	d11a      	bne.n	8007496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007466:	4013      	ands	r3, r2
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800746c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800746e:	4293      	cmp	r3, r2
 8007470:	d111      	bne.n	8007496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	085b      	lsrs	r3, r3, #1
 800747e:	3b01      	subs	r3, #1
 8007480:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007482:	429a      	cmp	r2, r3
 8007484:	d107      	bne.n	8007496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007492:	429a      	cmp	r2, r3
 8007494:	d001      	beq.n	800749a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	40007000 	.word	0x40007000
 80074a8:	40023800 	.word	0x40023800
 80074ac:	42470060 	.word	0x42470060

080074b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0cc      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074c4:	4b68      	ldr	r3, [pc, #416]	; (8007668 <HAL_RCC_ClockConfig+0x1b8>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0307 	and.w	r3, r3, #7
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d90c      	bls.n	80074ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074d2:	4b65      	ldr	r3, [pc, #404]	; (8007668 <HAL_RCC_ClockConfig+0x1b8>)
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	b2d2      	uxtb	r2, r2
 80074d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074da:	4b63      	ldr	r3, [pc, #396]	; (8007668 <HAL_RCC_ClockConfig+0x1b8>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0307 	and.w	r3, r3, #7
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d001      	beq.n	80074ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e0b8      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d020      	beq.n	800753a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007504:	4b59      	ldr	r3, [pc, #356]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	4a58      	ldr	r2, [pc, #352]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 800750a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800750e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800751c:	4b53      	ldr	r3, [pc, #332]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4a52      	ldr	r2, [pc, #328]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007528:	4b50      	ldr	r3, [pc, #320]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	494d      	ldr	r1, [pc, #308]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007536:	4313      	orrs	r3, r2
 8007538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d044      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d107      	bne.n	800755e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800754e:	4b47      	ldr	r3, [pc, #284]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d119      	bne.n	800758e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e07f      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b02      	cmp	r3, #2
 8007564:	d003      	beq.n	800756e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800756a:	2b03      	cmp	r3, #3
 800756c:	d107      	bne.n	800757e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800756e:	4b3f      	ldr	r3, [pc, #252]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d109      	bne.n	800758e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e06f      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800757e:	4b3b      	ldr	r3, [pc, #236]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e067      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800758e:	4b37      	ldr	r3, [pc, #220]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f023 0203 	bic.w	r2, r3, #3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	4934      	ldr	r1, [pc, #208]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 800759c:	4313      	orrs	r3, r2
 800759e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075a0:	f7fc ff72 	bl	8004488 <HAL_GetTick>
 80075a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075a6:	e00a      	b.n	80075be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075a8:	f7fc ff6e 	bl	8004488 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d901      	bls.n	80075be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e04f      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075be:	4b2b      	ldr	r3, [pc, #172]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f003 020c 	and.w	r2, r3, #12
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d1eb      	bne.n	80075a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075d0:	4b25      	ldr	r3, [pc, #148]	; (8007668 <HAL_RCC_ClockConfig+0x1b8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d20c      	bcs.n	80075f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075de:	4b22      	ldr	r3, [pc, #136]	; (8007668 <HAL_RCC_ClockConfig+0x1b8>)
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075e6:	4b20      	ldr	r3, [pc, #128]	; (8007668 <HAL_RCC_ClockConfig+0x1b8>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0307 	and.w	r3, r3, #7
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d001      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e032      	b.n	800765e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d008      	beq.n	8007616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007604:	4b19      	ldr	r3, [pc, #100]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	4916      	ldr	r1, [pc, #88]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007612:	4313      	orrs	r3, r2
 8007614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007622:	4b12      	ldr	r3, [pc, #72]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	490e      	ldr	r1, [pc, #56]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 8007632:	4313      	orrs	r3, r2
 8007634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007636:	f000 f821 	bl	800767c <HAL_RCC_GetSysClockFreq>
 800763a:	4602      	mov	r2, r0
 800763c:	4b0b      	ldr	r3, [pc, #44]	; (800766c <HAL_RCC_ClockConfig+0x1bc>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	091b      	lsrs	r3, r3, #4
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	490a      	ldr	r1, [pc, #40]	; (8007670 <HAL_RCC_ClockConfig+0x1c0>)
 8007648:	5ccb      	ldrb	r3, [r1, r3]
 800764a:	fa22 f303 	lsr.w	r3, r2, r3
 800764e:	4a09      	ldr	r2, [pc, #36]	; (8007674 <HAL_RCC_ClockConfig+0x1c4>)
 8007650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <HAL_RCC_ClockConfig+0x1c8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f7fc fed2 	bl	8004400 <HAL_InitTick>

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40023c00 	.word	0x40023c00
 800766c:	40023800 	.word	0x40023800
 8007670:	08009d58 	.word	0x08009d58
 8007674:	20000018 	.word	0x20000018
 8007678:	2000001c 	.word	0x2000001c

0800767c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800767c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	607b      	str	r3, [r7, #4]
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	2300      	movs	r3, #0
 800768e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007694:	4b67      	ldr	r3, [pc, #412]	; (8007834 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f003 030c 	and.w	r3, r3, #12
 800769c:	2b08      	cmp	r3, #8
 800769e:	d00d      	beq.n	80076bc <HAL_RCC_GetSysClockFreq+0x40>
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	f200 80bd 	bhi.w	8007820 <HAL_RCC_GetSysClockFreq+0x1a4>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <HAL_RCC_GetSysClockFreq+0x34>
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d003      	beq.n	80076b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80076ae:	e0b7      	b.n	8007820 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076b0:	4b61      	ldr	r3, [pc, #388]	; (8007838 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80076b2:	60bb      	str	r3, [r7, #8]
       break;
 80076b4:	e0b7      	b.n	8007826 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076b6:	4b61      	ldr	r3, [pc, #388]	; (800783c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80076b8:	60bb      	str	r3, [r7, #8]
      break;
 80076ba:	e0b4      	b.n	8007826 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076bc:	4b5d      	ldr	r3, [pc, #372]	; (8007834 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076c6:	4b5b      	ldr	r3, [pc, #364]	; (8007834 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d04d      	beq.n	800776e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076d2:	4b58      	ldr	r3, [pc, #352]	; (8007834 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	099b      	lsrs	r3, r3, #6
 80076d8:	461a      	mov	r2, r3
 80076da:	f04f 0300 	mov.w	r3, #0
 80076de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80076e2:	f04f 0100 	mov.w	r1, #0
 80076e6:	ea02 0800 	and.w	r8, r2, r0
 80076ea:	ea03 0901 	and.w	r9, r3, r1
 80076ee:	4640      	mov	r0, r8
 80076f0:	4649      	mov	r1, r9
 80076f2:	f04f 0200 	mov.w	r2, #0
 80076f6:	f04f 0300 	mov.w	r3, #0
 80076fa:	014b      	lsls	r3, r1, #5
 80076fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007700:	0142      	lsls	r2, r0, #5
 8007702:	4610      	mov	r0, r2
 8007704:	4619      	mov	r1, r3
 8007706:	ebb0 0008 	subs.w	r0, r0, r8
 800770a:	eb61 0109 	sbc.w	r1, r1, r9
 800770e:	f04f 0200 	mov.w	r2, #0
 8007712:	f04f 0300 	mov.w	r3, #0
 8007716:	018b      	lsls	r3, r1, #6
 8007718:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800771c:	0182      	lsls	r2, r0, #6
 800771e:	1a12      	subs	r2, r2, r0
 8007720:	eb63 0301 	sbc.w	r3, r3, r1
 8007724:	f04f 0000 	mov.w	r0, #0
 8007728:	f04f 0100 	mov.w	r1, #0
 800772c:	00d9      	lsls	r1, r3, #3
 800772e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007732:	00d0      	lsls	r0, r2, #3
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	eb12 0208 	adds.w	r2, r2, r8
 800773c:	eb43 0309 	adc.w	r3, r3, r9
 8007740:	f04f 0000 	mov.w	r0, #0
 8007744:	f04f 0100 	mov.w	r1, #0
 8007748:	0259      	lsls	r1, r3, #9
 800774a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800774e:	0250      	lsls	r0, r2, #9
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4610      	mov	r0, r2
 8007756:	4619      	mov	r1, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	461a      	mov	r2, r3
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	f7f9 fb24 	bl	8000dac <__aeabi_uldivmod>
 8007764:	4602      	mov	r2, r0
 8007766:	460b      	mov	r3, r1
 8007768:	4613      	mov	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	e04a      	b.n	8007804 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800776e:	4b31      	ldr	r3, [pc, #196]	; (8007834 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	099b      	lsrs	r3, r3, #6
 8007774:	461a      	mov	r2, r3
 8007776:	f04f 0300 	mov.w	r3, #0
 800777a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800777e:	f04f 0100 	mov.w	r1, #0
 8007782:	ea02 0400 	and.w	r4, r2, r0
 8007786:	ea03 0501 	and.w	r5, r3, r1
 800778a:	4620      	mov	r0, r4
 800778c:	4629      	mov	r1, r5
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	f04f 0300 	mov.w	r3, #0
 8007796:	014b      	lsls	r3, r1, #5
 8007798:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800779c:	0142      	lsls	r2, r0, #5
 800779e:	4610      	mov	r0, r2
 80077a0:	4619      	mov	r1, r3
 80077a2:	1b00      	subs	r0, r0, r4
 80077a4:	eb61 0105 	sbc.w	r1, r1, r5
 80077a8:	f04f 0200 	mov.w	r2, #0
 80077ac:	f04f 0300 	mov.w	r3, #0
 80077b0:	018b      	lsls	r3, r1, #6
 80077b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80077b6:	0182      	lsls	r2, r0, #6
 80077b8:	1a12      	subs	r2, r2, r0
 80077ba:	eb63 0301 	sbc.w	r3, r3, r1
 80077be:	f04f 0000 	mov.w	r0, #0
 80077c2:	f04f 0100 	mov.w	r1, #0
 80077c6:	00d9      	lsls	r1, r3, #3
 80077c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077cc:	00d0      	lsls	r0, r2, #3
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	1912      	adds	r2, r2, r4
 80077d4:	eb45 0303 	adc.w	r3, r5, r3
 80077d8:	f04f 0000 	mov.w	r0, #0
 80077dc:	f04f 0100 	mov.w	r1, #0
 80077e0:	0299      	lsls	r1, r3, #10
 80077e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80077e6:	0290      	lsls	r0, r2, #10
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4610      	mov	r0, r2
 80077ee:	4619      	mov	r1, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	f7f9 fad8 	bl	8000dac <__aeabi_uldivmod>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4613      	mov	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007804:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	0c1b      	lsrs	r3, r3, #16
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	3301      	adds	r3, #1
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	fbb2 f3f3 	udiv	r3, r2, r3
 800781c:	60bb      	str	r3, [r7, #8]
      break;
 800781e:	e002      	b.n	8007826 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007820:	4b05      	ldr	r3, [pc, #20]	; (8007838 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007822:	60bb      	str	r3, [r7, #8]
      break;
 8007824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007826:	68bb      	ldr	r3, [r7, #8]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007832:	bf00      	nop
 8007834:	40023800 	.word	0x40023800
 8007838:	00f42400 	.word	0x00f42400
 800783c:	007a1200 	.word	0x007a1200

08007840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007840:	b480      	push	{r7}
 8007842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007844:	4b03      	ldr	r3, [pc, #12]	; (8007854 <HAL_RCC_GetHCLKFreq+0x14>)
 8007846:	681b      	ldr	r3, [r3, #0]
}
 8007848:	4618      	mov	r0, r3
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20000018 	.word	0x20000018

08007858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800785c:	f7ff fff0 	bl	8007840 <HAL_RCC_GetHCLKFreq>
 8007860:	4602      	mov	r2, r0
 8007862:	4b05      	ldr	r3, [pc, #20]	; (8007878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	0a9b      	lsrs	r3, r3, #10
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	4903      	ldr	r1, [pc, #12]	; (800787c <HAL_RCC_GetPCLK1Freq+0x24>)
 800786e:	5ccb      	ldrb	r3, [r1, r3]
 8007870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007874:	4618      	mov	r0, r3
 8007876:	bd80      	pop	{r7, pc}
 8007878:	40023800 	.word	0x40023800
 800787c:	08009d68 	.word	0x08009d68

08007880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007884:	f7ff ffdc 	bl	8007840 <HAL_RCC_GetHCLKFreq>
 8007888:	4602      	mov	r2, r0
 800788a:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	0b5b      	lsrs	r3, r3, #13
 8007890:	f003 0307 	and.w	r3, r3, #7
 8007894:	4903      	ldr	r1, [pc, #12]	; (80078a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007896:	5ccb      	ldrb	r3, [r1, r3]
 8007898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800789c:	4618      	mov	r0, r3
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	40023800 	.word	0x40023800
 80078a4:	08009d68 	.word	0x08009d68

080078a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e041      	b.n	800793e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fc fb58 	bl	8003f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4619      	mov	r1, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	f000 fdda 	bl	80084a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b01      	cmp	r3, #1
 800795a:	d001      	beq.n	8007960 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e03c      	b.n	80079da <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1e      	ldr	r2, [pc, #120]	; (80079e8 <HAL_TIM_Base_Start+0xa0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d018      	beq.n	80079a4 <HAL_TIM_Base_Start+0x5c>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800797a:	d013      	beq.n	80079a4 <HAL_TIM_Base_Start+0x5c>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a1a      	ldr	r2, [pc, #104]	; (80079ec <HAL_TIM_Base_Start+0xa4>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00e      	beq.n	80079a4 <HAL_TIM_Base_Start+0x5c>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a19      	ldr	r2, [pc, #100]	; (80079f0 <HAL_TIM_Base_Start+0xa8>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d009      	beq.n	80079a4 <HAL_TIM_Base_Start+0x5c>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a17      	ldr	r2, [pc, #92]	; (80079f4 <HAL_TIM_Base_Start+0xac>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d004      	beq.n	80079a4 <HAL_TIM_Base_Start+0x5c>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a16      	ldr	r2, [pc, #88]	; (80079f8 <HAL_TIM_Base_Start+0xb0>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d111      	bne.n	80079c8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b06      	cmp	r3, #6
 80079b4:	d010      	beq.n	80079d8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0201 	orr.w	r2, r2, #1
 80079c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c6:	e007      	b.n	80079d8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0201 	orr.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40010000 	.word	0x40010000
 80079ec:	40000400 	.word	0x40000400
 80079f0:	40000800 	.word	0x40000800
 80079f4:	40000c00 	.word	0x40000c00
 80079f8:	40014000 	.word	0x40014000

080079fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d001      	beq.n	8007a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e044      	b.n	8007a9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0201 	orr.w	r2, r2, #1
 8007a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a1e      	ldr	r2, [pc, #120]	; (8007aac <HAL_TIM_Base_Start_IT+0xb0>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d018      	beq.n	8007a68 <HAL_TIM_Base_Start_IT+0x6c>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a3e:	d013      	beq.n	8007a68 <HAL_TIM_Base_Start_IT+0x6c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a1a      	ldr	r2, [pc, #104]	; (8007ab0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00e      	beq.n	8007a68 <HAL_TIM_Base_Start_IT+0x6c>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a19      	ldr	r2, [pc, #100]	; (8007ab4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d009      	beq.n	8007a68 <HAL_TIM_Base_Start_IT+0x6c>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a17      	ldr	r2, [pc, #92]	; (8007ab8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d004      	beq.n	8007a68 <HAL_TIM_Base_Start_IT+0x6c>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a16      	ldr	r2, [pc, #88]	; (8007abc <HAL_TIM_Base_Start_IT+0xc0>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d111      	bne.n	8007a8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b06      	cmp	r3, #6
 8007a78:	d010      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f042 0201 	orr.w	r2, r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a8a:	e007      	b.n	8007a9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0201 	orr.w	r2, r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40000400 	.word	0x40000400
 8007ab4:	40000800 	.word	0x40000800
 8007ab8:	40000c00 	.word	0x40000c00
 8007abc:	40014000 	.word	0x40014000

08007ac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e041      	b.n	8007b56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f839 	bl	8007b5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3304      	adds	r3, #4
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	f000 fcce 	bl	80084a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d109      	bne.n	8007b98 <HAL_TIM_PWM_Start+0x24>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	bf14      	ite	ne
 8007b90:	2301      	movne	r3, #1
 8007b92:	2300      	moveq	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	e022      	b.n	8007bde <HAL_TIM_PWM_Start+0x6a>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d109      	bne.n	8007bb2 <HAL_TIM_PWM_Start+0x3e>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	bf14      	ite	ne
 8007baa:	2301      	movne	r3, #1
 8007bac:	2300      	moveq	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	e015      	b.n	8007bde <HAL_TIM_PWM_Start+0x6a>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d109      	bne.n	8007bcc <HAL_TIM_PWM_Start+0x58>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	bf14      	ite	ne
 8007bc4:	2301      	movne	r3, #1
 8007bc6:	2300      	moveq	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	e008      	b.n	8007bde <HAL_TIM_PWM_Start+0x6a>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	bf14      	ite	ne
 8007bd8:	2301      	movne	r3, #1
 8007bda:	2300      	moveq	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e068      	b.n	8007cb8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <HAL_TIM_PWM_Start+0x82>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bf4:	e013      	b.n	8007c1e <HAL_TIM_PWM_Start+0xaa>
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d104      	bne.n	8007c06 <HAL_TIM_PWM_Start+0x92>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c04:	e00b      	b.n	8007c1e <HAL_TIM_PWM_Start+0xaa>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d104      	bne.n	8007c16 <HAL_TIM_PWM_Start+0xa2>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c14:	e003      	b.n	8007c1e <HAL_TIM_PWM_Start+0xaa>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2201      	movs	r2, #1
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fee0 	bl	80089ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a23      	ldr	r2, [pc, #140]	; (8007cc0 <HAL_TIM_PWM_Start+0x14c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d107      	bne.n	8007c46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1d      	ldr	r2, [pc, #116]	; (8007cc0 <HAL_TIM_PWM_Start+0x14c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d018      	beq.n	8007c82 <HAL_TIM_PWM_Start+0x10e>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c58:	d013      	beq.n	8007c82 <HAL_TIM_PWM_Start+0x10e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a19      	ldr	r2, [pc, #100]	; (8007cc4 <HAL_TIM_PWM_Start+0x150>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00e      	beq.n	8007c82 <HAL_TIM_PWM_Start+0x10e>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a17      	ldr	r2, [pc, #92]	; (8007cc8 <HAL_TIM_PWM_Start+0x154>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d009      	beq.n	8007c82 <HAL_TIM_PWM_Start+0x10e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a16      	ldr	r2, [pc, #88]	; (8007ccc <HAL_TIM_PWM_Start+0x158>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d004      	beq.n	8007c82 <HAL_TIM_PWM_Start+0x10e>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a14      	ldr	r2, [pc, #80]	; (8007cd0 <HAL_TIM_PWM_Start+0x15c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d111      	bne.n	8007ca6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b06      	cmp	r3, #6
 8007c92:	d010      	beq.n	8007cb6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0201 	orr.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca4:	e007      	b.n	8007cb6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f042 0201 	orr.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	40010000 	.word	0x40010000
 8007cc4:	40000400 	.word	0x40000400
 8007cc8:	40000800 	.word	0x40000800
 8007ccc:	40000c00 	.word	0x40000c00
 8007cd0:	40014000 	.word	0x40014000

08007cd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e097      	b.n	8007e18 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d106      	bne.n	8007d02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7fc f8f9 	bl	8003ef4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2202      	movs	r2, #2
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d18:	f023 0307 	bic.w	r3, r3, #7
 8007d1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f000 fbb9 	bl	80084a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	4313      	orrs	r3, r2
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007d74:	f023 030c 	bic.w	r3, r3, #12
 8007d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	4313      	orrs	r3, r2
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	011a      	lsls	r2, r3, #4
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	031b      	lsls	r3, r3, #12
 8007da4:	4313      	orrs	r3, r2
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007db2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007dba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	011b      	lsls	r3, r3, #4
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d110      	bne.n	8007e72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d102      	bne.n	8007e5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e56:	7b7b      	ldrb	r3, [r7, #13]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d001      	beq.n	8007e60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e069      	b.n	8007f34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e70:	e031      	b.n	8007ed6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b04      	cmp	r3, #4
 8007e76:	d110      	bne.n	8007e9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d102      	bne.n	8007e84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e7e:	7b3b      	ldrb	r3, [r7, #12]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d001      	beq.n	8007e88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e055      	b.n	8007f34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e98:	e01d      	b.n	8007ed6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d108      	bne.n	8007eb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d105      	bne.n	8007eb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ea6:	7b7b      	ldrb	r3, [r7, #13]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d102      	bne.n	8007eb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007eac:	7b3b      	ldrb	r3, [r7, #12]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d001      	beq.n	8007eb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e03e      	b.n	8007f34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2202      	movs	r2, #2
 8007eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <HAL_TIM_Encoder_Start+0xc4>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	d008      	beq.n	8007ef4 <HAL_TIM_Encoder_Start+0xd4>
 8007ee2:	e00f      	b.n	8007f04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fd7d 	bl	80089ec <TIM_CCxChannelCmd>
      break;
 8007ef2:	e016      	b.n	8007f22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	2104      	movs	r1, #4
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fd75 	bl	80089ec <TIM_CCxChannelCmd>
      break;
 8007f02:	e00e      	b.n	8007f22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 fd6d 	bl	80089ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2201      	movs	r2, #1
 8007f18:	2104      	movs	r1, #4
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fd66 	bl	80089ec <TIM_CCxChannelCmd>
      break;
 8007f20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 0201 	orr.w	r2, r2, #1
 8007f30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d122      	bne.n	8007f98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d11b      	bne.n	8007f98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f06f 0202 	mvn.w	r2, #2
 8007f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fa70 	bl	8008464 <HAL_TIM_IC_CaptureCallback>
 8007f84:	e005      	b.n	8007f92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa62 	bl	8008450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fa73 	bl	8008478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	f003 0304 	and.w	r3, r3, #4
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d122      	bne.n	8007fec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d11b      	bne.n	8007fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f06f 0204 	mvn.w	r2, #4
 8007fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fa46 	bl	8008464 <HAL_TIM_IC_CaptureCallback>
 8007fd8:	e005      	b.n	8007fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fa38 	bl	8008450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fa49 	bl	8008478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f003 0308 	and.w	r3, r3, #8
 8007ff6:	2b08      	cmp	r3, #8
 8007ff8:	d122      	bne.n	8008040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f003 0308 	and.w	r3, r3, #8
 8008004:	2b08      	cmp	r3, #8
 8008006:	d11b      	bne.n	8008040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f06f 0208 	mvn.w	r2, #8
 8008010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2204      	movs	r2, #4
 8008016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	69db      	ldr	r3, [r3, #28]
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa1c 	bl	8008464 <HAL_TIM_IC_CaptureCallback>
 800802c:	e005      	b.n	800803a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fa0e 	bl	8008450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fa1f 	bl	8008478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f003 0310 	and.w	r3, r3, #16
 800804a:	2b10      	cmp	r3, #16
 800804c:	d122      	bne.n	8008094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f003 0310 	and.w	r3, r3, #16
 8008058:	2b10      	cmp	r3, #16
 800805a:	d11b      	bne.n	8008094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f06f 0210 	mvn.w	r2, #16
 8008064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2208      	movs	r2, #8
 800806a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f9f2 	bl	8008464 <HAL_TIM_IC_CaptureCallback>
 8008080:	e005      	b.n	800808e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f9e4 	bl	8008450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f9f5 	bl	8008478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d10e      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d107      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0201 	mvn.w	r2, #1
 80080b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7f9 fd7e 	bl	8001bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ca:	2b80      	cmp	r3, #128	; 0x80
 80080cc:	d10e      	bne.n	80080ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d8:	2b80      	cmp	r3, #128	; 0x80
 80080da:	d107      	bne.n	80080ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fd1e 	bl	8008b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f6:	2b40      	cmp	r3, #64	; 0x40
 80080f8:	d10e      	bne.n	8008118 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008104:	2b40      	cmp	r3, #64	; 0x40
 8008106:	d107      	bne.n	8008118 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f9ba 	bl	800848c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f003 0320 	and.w	r3, r3, #32
 8008122:	2b20      	cmp	r3, #32
 8008124:	d10e      	bne.n	8008144 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f003 0320 	and.w	r3, r3, #32
 8008130:	2b20      	cmp	r3, #32
 8008132:	d107      	bne.n	8008144 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0220 	mvn.w	r2, #32
 800813c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fce8 	bl	8008b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800815e:	2b01      	cmp	r3, #1
 8008160:	d101      	bne.n	8008166 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008162:	2302      	movs	r3, #2
 8008164:	e0ac      	b.n	80082c0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b0c      	cmp	r3, #12
 8008172:	f200 809f 	bhi.w	80082b4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	080081b1 	.word	0x080081b1
 8008180:	080082b5 	.word	0x080082b5
 8008184:	080082b5 	.word	0x080082b5
 8008188:	080082b5 	.word	0x080082b5
 800818c:	080081f1 	.word	0x080081f1
 8008190:	080082b5 	.word	0x080082b5
 8008194:	080082b5 	.word	0x080082b5
 8008198:	080082b5 	.word	0x080082b5
 800819c:	08008233 	.word	0x08008233
 80081a0:	080082b5 	.word	0x080082b5
 80081a4:	080082b5 	.word	0x080082b5
 80081a8:	080082b5 	.word	0x080082b5
 80081ac:	08008273 	.word	0x08008273
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 f9f2 	bl	80085a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0208 	orr.w	r2, r2, #8
 80081ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 0204 	bic.w	r2, r2, #4
 80081da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6999      	ldr	r1, [r3, #24]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	691a      	ldr	r2, [r3, #16]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	619a      	str	r2, [r3, #24]
      break;
 80081ee:	e062      	b.n	80082b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68b9      	ldr	r1, [r7, #8]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fa38 	bl	800866c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699a      	ldr	r2, [r3, #24]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800820a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800821a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6999      	ldr	r1, [r3, #24]
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	021a      	lsls	r2, r3, #8
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	619a      	str	r2, [r3, #24]
      break;
 8008230:	e041      	b.n	80082b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68b9      	ldr	r1, [r7, #8]
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fa83 	bl	8008744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69da      	ldr	r2, [r3, #28]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f042 0208 	orr.w	r2, r2, #8
 800824c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69da      	ldr	r2, [r3, #28]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f022 0204 	bic.w	r2, r2, #4
 800825c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69d9      	ldr	r1, [r3, #28]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	691a      	ldr	r2, [r3, #16]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	430a      	orrs	r2, r1
 800826e:	61da      	str	r2, [r3, #28]
      break;
 8008270:	e021      	b.n	80082b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68b9      	ldr	r1, [r7, #8]
 8008278:	4618      	mov	r0, r3
 800827a:	f000 facd 	bl	8008818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69da      	ldr	r2, [r3, #28]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800828c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69da      	ldr	r2, [r3, #28]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800829c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69d9      	ldr	r1, [r3, #28]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	021a      	lsls	r2, r3, #8
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	61da      	str	r2, [r3, #28]
      break;
 80082b2:	e000      	b.n	80082b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80082b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d101      	bne.n	80082e0 <HAL_TIM_ConfigClockSource+0x18>
 80082dc:	2302      	movs	r3, #2
 80082de:	e0b3      	b.n	8008448 <HAL_TIM_ConfigClockSource+0x180>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008306:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008318:	d03e      	beq.n	8008398 <HAL_TIM_ConfigClockSource+0xd0>
 800831a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800831e:	f200 8087 	bhi.w	8008430 <HAL_TIM_ConfigClockSource+0x168>
 8008322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008326:	f000 8085 	beq.w	8008434 <HAL_TIM_ConfigClockSource+0x16c>
 800832a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832e:	d87f      	bhi.n	8008430 <HAL_TIM_ConfigClockSource+0x168>
 8008330:	2b70      	cmp	r3, #112	; 0x70
 8008332:	d01a      	beq.n	800836a <HAL_TIM_ConfigClockSource+0xa2>
 8008334:	2b70      	cmp	r3, #112	; 0x70
 8008336:	d87b      	bhi.n	8008430 <HAL_TIM_ConfigClockSource+0x168>
 8008338:	2b60      	cmp	r3, #96	; 0x60
 800833a:	d050      	beq.n	80083de <HAL_TIM_ConfigClockSource+0x116>
 800833c:	2b60      	cmp	r3, #96	; 0x60
 800833e:	d877      	bhi.n	8008430 <HAL_TIM_ConfigClockSource+0x168>
 8008340:	2b50      	cmp	r3, #80	; 0x50
 8008342:	d03c      	beq.n	80083be <HAL_TIM_ConfigClockSource+0xf6>
 8008344:	2b50      	cmp	r3, #80	; 0x50
 8008346:	d873      	bhi.n	8008430 <HAL_TIM_ConfigClockSource+0x168>
 8008348:	2b40      	cmp	r3, #64	; 0x40
 800834a:	d058      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0x136>
 800834c:	2b40      	cmp	r3, #64	; 0x40
 800834e:	d86f      	bhi.n	8008430 <HAL_TIM_ConfigClockSource+0x168>
 8008350:	2b30      	cmp	r3, #48	; 0x30
 8008352:	d064      	beq.n	800841e <HAL_TIM_ConfigClockSource+0x156>
 8008354:	2b30      	cmp	r3, #48	; 0x30
 8008356:	d86b      	bhi.n	8008430 <HAL_TIM_ConfigClockSource+0x168>
 8008358:	2b20      	cmp	r3, #32
 800835a:	d060      	beq.n	800841e <HAL_TIM_ConfigClockSource+0x156>
 800835c:	2b20      	cmp	r3, #32
 800835e:	d867      	bhi.n	8008430 <HAL_TIM_ConfigClockSource+0x168>
 8008360:	2b00      	cmp	r3, #0
 8008362:	d05c      	beq.n	800841e <HAL_TIM_ConfigClockSource+0x156>
 8008364:	2b10      	cmp	r3, #16
 8008366:	d05a      	beq.n	800841e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008368:	e062      	b.n	8008430 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	6899      	ldr	r1, [r3, #8]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	f000 fb17 	bl	80089ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800838c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	609a      	str	r2, [r3, #8]
      break;
 8008396:	e04e      	b.n	8008436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	6899      	ldr	r1, [r3, #8]
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f000 fb00 	bl	80089ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083ba:	609a      	str	r2, [r3, #8]
      break;
 80083bc:	e03b      	b.n	8008436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	6859      	ldr	r1, [r3, #4]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	461a      	mov	r2, r3
 80083cc:	f000 fa74 	bl	80088b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2150      	movs	r1, #80	; 0x50
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 facd 	bl	8008976 <TIM_ITRx_SetConfig>
      break;
 80083dc:	e02b      	b.n	8008436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6818      	ldr	r0, [r3, #0]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	6859      	ldr	r1, [r3, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	461a      	mov	r2, r3
 80083ec:	f000 fa93 	bl	8008916 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2160      	movs	r1, #96	; 0x60
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fabd 	bl	8008976 <TIM_ITRx_SetConfig>
      break;
 80083fc:	e01b      	b.n	8008436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6859      	ldr	r1, [r3, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	461a      	mov	r2, r3
 800840c:	f000 fa54 	bl	80088b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2140      	movs	r1, #64	; 0x40
 8008416:	4618      	mov	r0, r3
 8008418:	f000 faad 	bl	8008976 <TIM_ITRx_SetConfig>
      break;
 800841c:	e00b      	b.n	8008436 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4619      	mov	r1, r3
 8008428:	4610      	mov	r0, r2
 800842a:	f000 faa4 	bl	8008976 <TIM_ITRx_SetConfig>
        break;
 800842e:	e002      	b.n	8008436 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008430:	bf00      	nop
 8008432:	e000      	b.n	8008436 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008434:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a34      	ldr	r2, [pc, #208]	; (8008584 <TIM_Base_SetConfig+0xe4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d00f      	beq.n	80084d8 <TIM_Base_SetConfig+0x38>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084be:	d00b      	beq.n	80084d8 <TIM_Base_SetConfig+0x38>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a31      	ldr	r2, [pc, #196]	; (8008588 <TIM_Base_SetConfig+0xe8>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d007      	beq.n	80084d8 <TIM_Base_SetConfig+0x38>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a30      	ldr	r2, [pc, #192]	; (800858c <TIM_Base_SetConfig+0xec>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d003      	beq.n	80084d8 <TIM_Base_SetConfig+0x38>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a2f      	ldr	r2, [pc, #188]	; (8008590 <TIM_Base_SetConfig+0xf0>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d108      	bne.n	80084ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a25      	ldr	r2, [pc, #148]	; (8008584 <TIM_Base_SetConfig+0xe4>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d01b      	beq.n	800852a <TIM_Base_SetConfig+0x8a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f8:	d017      	beq.n	800852a <TIM_Base_SetConfig+0x8a>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a22      	ldr	r2, [pc, #136]	; (8008588 <TIM_Base_SetConfig+0xe8>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d013      	beq.n	800852a <TIM_Base_SetConfig+0x8a>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a21      	ldr	r2, [pc, #132]	; (800858c <TIM_Base_SetConfig+0xec>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d00f      	beq.n	800852a <TIM_Base_SetConfig+0x8a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a20      	ldr	r2, [pc, #128]	; (8008590 <TIM_Base_SetConfig+0xf0>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d00b      	beq.n	800852a <TIM_Base_SetConfig+0x8a>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a1f      	ldr	r2, [pc, #124]	; (8008594 <TIM_Base_SetConfig+0xf4>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d007      	beq.n	800852a <TIM_Base_SetConfig+0x8a>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a1e      	ldr	r2, [pc, #120]	; (8008598 <TIM_Base_SetConfig+0xf8>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d003      	beq.n	800852a <TIM_Base_SetConfig+0x8a>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a1d      	ldr	r2, [pc, #116]	; (800859c <TIM_Base_SetConfig+0xfc>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d108      	bne.n	800853c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	4313      	orrs	r3, r2
 800853a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	4313      	orrs	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a08      	ldr	r2, [pc, #32]	; (8008584 <TIM_Base_SetConfig+0xe4>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d103      	bne.n	8008570 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	691a      	ldr	r2, [r3, #16]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	615a      	str	r2, [r3, #20]
}
 8008576:	bf00      	nop
 8008578:	3714      	adds	r7, #20
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	40010000 	.word	0x40010000
 8008588:	40000400 	.word	0x40000400
 800858c:	40000800 	.word	0x40000800
 8008590:	40000c00 	.word	0x40000c00
 8008594:	40014000 	.word	0x40014000
 8008598:	40014400 	.word	0x40014400
 800859c:	40014800 	.word	0x40014800

080085a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	f023 0201 	bic.w	r2, r3, #1
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f023 0303 	bic.w	r3, r3, #3
 80085d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f023 0302 	bic.w	r3, r3, #2
 80085e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a1c      	ldr	r2, [pc, #112]	; (8008668 <TIM_OC1_SetConfig+0xc8>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d10c      	bne.n	8008616 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f023 0308 	bic.w	r3, r3, #8
 8008602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f023 0304 	bic.w	r3, r3, #4
 8008614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a13      	ldr	r2, [pc, #76]	; (8008668 <TIM_OC1_SetConfig+0xc8>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d111      	bne.n	8008642 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800862c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	4313      	orrs	r3, r2
 8008636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	4313      	orrs	r3, r2
 8008640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	621a      	str	r2, [r3, #32]
}
 800865c:	bf00      	nop
 800865e:	371c      	adds	r7, #28
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	40010000 	.word	0x40010000

0800866c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	f023 0210 	bic.w	r2, r3, #16
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800869a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	021b      	lsls	r3, r3, #8
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f023 0320 	bic.w	r3, r3, #32
 80086b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a1e      	ldr	r2, [pc, #120]	; (8008740 <TIM_OC2_SetConfig+0xd4>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d10d      	bne.n	80086e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	4313      	orrs	r3, r2
 80086de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a15      	ldr	r2, [pc, #84]	; (8008740 <TIM_OC2_SetConfig+0xd4>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d113      	bne.n	8008718 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	4313      	orrs	r3, r2
 8008716:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	621a      	str	r2, [r3, #32]
}
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	40010000 	.word	0x40010000

08008744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0303 	bic.w	r3, r3, #3
 800877a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800878c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	021b      	lsls	r3, r3, #8
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	4313      	orrs	r3, r2
 8008798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a1d      	ldr	r2, [pc, #116]	; (8008814 <TIM_OC3_SetConfig+0xd0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d10d      	bne.n	80087be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	021b      	lsls	r3, r3, #8
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a14      	ldr	r2, [pc, #80]	; (8008814 <TIM_OC3_SetConfig+0xd0>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d113      	bne.n	80087ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	011b      	lsls	r3, r3, #4
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	4313      	orrs	r3, r2
 80087e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	011b      	lsls	r3, r3, #4
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	621a      	str	r2, [r3, #32]
}
 8008808:	bf00      	nop
 800880a:	371c      	adds	r7, #28
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	40010000 	.word	0x40010000

08008818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800884e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	021b      	lsls	r3, r3, #8
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	4313      	orrs	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	031b      	lsls	r3, r3, #12
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	4313      	orrs	r3, r2
 800886e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a10      	ldr	r2, [pc, #64]	; (80088b4 <TIM_OC4_SetConfig+0x9c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d109      	bne.n	800888c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800887e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	019b      	lsls	r3, r3, #6
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	4313      	orrs	r3, r2
 800888a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	693a      	ldr	r2, [r7, #16]
 80088a4:	621a      	str	r2, [r3, #32]
}
 80088a6:	bf00      	nop
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	40010000 	.word	0x40010000

080088b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	f023 0201 	bic.w	r2, r3, #1
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	011b      	lsls	r3, r3, #4
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f023 030a 	bic.w	r3, r3, #10
 80088f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	621a      	str	r2, [r3, #32]
}
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008916:	b480      	push	{r7}
 8008918:	b087      	sub	sp, #28
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	f023 0210 	bic.w	r2, r3, #16
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	031b      	lsls	r3, r3, #12
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	4313      	orrs	r3, r2
 800894a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008952:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	011b      	lsls	r3, r3, #4
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	4313      	orrs	r3, r2
 800895c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	621a      	str	r2, [r3, #32]
}
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008976:	b480      	push	{r7}
 8008978:	b085      	sub	sp, #20
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800898c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4313      	orrs	r3, r2
 8008994:	f043 0307 	orr.w	r3, r3, #7
 8008998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	609a      	str	r2, [r3, #8]
}
 80089a0:	bf00      	nop
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
 80089b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	021a      	lsls	r2, r3, #8
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	431a      	orrs	r2, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	609a      	str	r2, [r3, #8]
}
 80089e0:	bf00      	nop
 80089e2:	371c      	adds	r7, #28
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f003 031f 	and.w	r3, r3, #31
 80089fe:	2201      	movs	r2, #1
 8008a00:	fa02 f303 	lsl.w	r3, r2, r3
 8008a04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6a1a      	ldr	r2, [r3, #32]
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	43db      	mvns	r3, r3
 8008a0e:	401a      	ands	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6a1a      	ldr	r2, [r3, #32]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f003 031f 	and.w	r3, r3, #31
 8008a1e:	6879      	ldr	r1, [r7, #4]
 8008a20:	fa01 f303 	lsl.w	r3, r1, r3
 8008a24:	431a      	orrs	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	621a      	str	r2, [r3, #32]
}
 8008a2a:	bf00      	nop
 8008a2c:	371c      	adds	r7, #28
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
	...

08008a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d101      	bne.n	8008a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e050      	b.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a1c      	ldr	r2, [pc, #112]	; (8008b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d018      	beq.n	8008ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a9c:	d013      	beq.n	8008ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a18      	ldr	r2, [pc, #96]	; (8008b04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d00e      	beq.n	8008ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a16      	ldr	r2, [pc, #88]	; (8008b08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d009      	beq.n	8008ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a15      	ldr	r2, [pc, #84]	; (8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d004      	beq.n	8008ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a13      	ldr	r2, [pc, #76]	; (8008b10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d10c      	bne.n	8008ae0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3714      	adds	r7, #20
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	40010000 	.word	0x40010000
 8008b04:	40000400 	.word	0x40000400
 8008b08:	40000800 	.word	0x40000800
 8008b0c:	40000c00 	.word	0x40000c00
 8008b10:	40014000 	.word	0x40014000

08008b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e03f      	b.n	8008bce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d106      	bne.n	8008b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7fb fa84 	bl	8004070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2224      	movs	r2, #36	; 0x24
 8008b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fd51 	bl	8009628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	691a      	ldr	r2, [r3, #16]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	695a      	ldr	r2, [r3, #20]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68da      	ldr	r2, [r3, #12]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
	...

08008bd8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	4613      	mov	r3, r2
 8008be4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b20      	cmp	r3, #32
 8008bf0:	d153      	bne.n	8008c9a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <HAL_UART_Transmit_DMA+0x26>
 8008bf8:	88fb      	ldrh	r3, [r7, #6]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e04c      	b.n	8008c9c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d101      	bne.n	8008c10 <HAL_UART_Transmit_DMA+0x38>
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	e045      	b.n	8008c9c <HAL_UART_Transmit_DMA+0xc4>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	88fa      	ldrh	r2, [r7, #6]
 8008c22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	88fa      	ldrh	r2, [r7, #6]
 8008c28:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2221      	movs	r2, #33	; 0x21
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3c:	4a19      	ldr	r2, [pc, #100]	; (8008ca4 <HAL_UART_Transmit_DMA+0xcc>)
 8008c3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c44:	4a18      	ldr	r2, [pc, #96]	; (8008ca8 <HAL_UART_Transmit_DMA+0xd0>)
 8008c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c4c:	4a17      	ldr	r2, [pc, #92]	; (8008cac <HAL_UART_Transmit_DMA+0xd4>)
 8008c4e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c54:	2200      	movs	r2, #0
 8008c56:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008c58:	f107 0308 	add.w	r3, r7, #8
 8008c5c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	6819      	ldr	r1, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	88fb      	ldrh	r3, [r7, #6]
 8008c70:	f7fb fdd6 	bl	8004820 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c7c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	695a      	ldr	r2, [r3, #20]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c94:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	e000      	b.n	8008c9c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008c9a:	2302      	movs	r3, #2
  }
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	080090e5 	.word	0x080090e5
 8008ca8:	08009137 	.word	0x08009137
 8008cac:	0800921f 	.word	0x0800921f

08008cb0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b20      	cmp	r3, #32
 8008cc8:	d11d      	bne.n	8008d06 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <HAL_UART_Receive_DMA+0x26>
 8008cd0:	88fb      	ldrh	r3, [r7, #6]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e016      	b.n	8008d08 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d101      	bne.n	8008ce8 <HAL_UART_Receive_DMA+0x38>
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	e00f      	b.n	8008d08 <HAL_UART_Receive_DMA+0x58>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008cf6:	88fb      	ldrh	r3, [r7, #6]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	68b9      	ldr	r1, [r7, #8]
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 fad9 	bl	80092b4 <UART_Start_Receive_DMA>
 8008d02:	4603      	mov	r3, r0
 8008d04:	e000      	b.n	8008d08 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008d06:	2302      	movs	r3, #2
  }
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08a      	sub	sp, #40	; 0x28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	f003 030f 	and.w	r3, r3, #15
 8008d3e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10d      	bne.n	8008d62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	f003 0320 	and.w	r3, r3, #32
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d008      	beq.n	8008d62 <HAL_UART_IRQHandler+0x52>
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	f003 0320 	and.w	r3, r3, #32
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d003      	beq.n	8008d62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fbcd 	bl	80094fa <UART_Receive_IT>
      return;
 8008d60:	e17c      	b.n	800905c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 80b1 	beq.w	8008ecc <HAL_UART_IRQHandler+0x1bc>
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d105      	bne.n	8008d80 <HAL_UART_IRQHandler+0x70>
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 80a6 	beq.w	8008ecc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <HAL_UART_IRQHandler+0x90>
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d005      	beq.n	8008da0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d98:	f043 0201 	orr.w	r2, r3, #1
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	f003 0304 	and.w	r3, r3, #4
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00a      	beq.n	8008dc0 <HAL_UART_IRQHandler+0xb0>
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d005      	beq.n	8008dc0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db8:	f043 0202 	orr.w	r2, r3, #2
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <HAL_UART_IRQHandler+0xd0>
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd8:	f043 0204 	orr.w	r2, r3, #4
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00f      	beq.n	8008e0a <HAL_UART_IRQHandler+0xfa>
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	f003 0320 	and.w	r3, r3, #32
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d104      	bne.n	8008dfe <HAL_UART_IRQHandler+0xee>
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d005      	beq.n	8008e0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e02:	f043 0208 	orr.w	r2, r3, #8
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f000 811f 	beq.w	8009052 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	f003 0320 	and.w	r3, r3, #32
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d007      	beq.n	8008e2e <HAL_UART_IRQHandler+0x11e>
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	f003 0320 	and.w	r3, r3, #32
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fb66 	bl	80094fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e38:	2b40      	cmp	r3, #64	; 0x40
 8008e3a:	bf0c      	ite	eq
 8008e3c:	2301      	moveq	r3, #1
 8008e3e:	2300      	movne	r3, #0
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e48:	f003 0308 	and.w	r3, r3, #8
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d102      	bne.n	8008e56 <HAL_UART_IRQHandler+0x146>
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d031      	beq.n	8008eba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 faa6 	bl	80093a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e66:	2b40      	cmp	r3, #64	; 0x40
 8008e68:	d123      	bne.n	8008eb2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	695a      	ldr	r2, [r3, #20]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e78:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d013      	beq.n	8008eaa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	4a77      	ldr	r2, [pc, #476]	; (8009064 <HAL_UART_IRQHandler+0x354>)
 8008e88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fb fd8e 	bl	80049b0 <HAL_DMA_Abort_IT>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d016      	beq.n	8008ec8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea8:	e00e      	b.n	8008ec8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f904 	bl	80090b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb0:	e00a      	b.n	8008ec8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f900 	bl	80090b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb8:	e006      	b.n	8008ec8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f8fc 	bl	80090b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008ec6:	e0c4      	b.n	8009052 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec8:	bf00      	nop
    return;
 8008eca:	e0c2      	b.n	8009052 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	f040 80a2 	bne.w	800901a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	f003 0310 	and.w	r3, r3, #16
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 809c 	beq.w	800901a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	f003 0310 	and.w	r3, r3, #16
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 8096 	beq.w	800901a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	60fb      	str	r3, [r7, #12]
 8008f02:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0e:	2b40      	cmp	r3, #64	; 0x40
 8008f10:	d14f      	bne.n	8008fb2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008f1c:	8a3b      	ldrh	r3, [r7, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 8099 	beq.w	8009056 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f28:	8a3a      	ldrh	r2, [r7, #16]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	f080 8093 	bcs.w	8009056 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	8a3a      	ldrh	r2, [r7, #16]
 8008f34:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f40:	d02b      	beq.n	8008f9a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f50:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	695a      	ldr	r2, [r3, #20]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 0201 	bic.w	r2, r2, #1
 8008f60:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	695a      	ldr	r2, [r3, #20]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f70:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0210 	bic.w	r2, r2, #16
 8008f8e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fb fc9b 	bl	80048d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f88e 	bl	80090cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008fb0:	e051      	b.n	8009056 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d047      	beq.n	800905a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008fca:	8a7b      	ldrh	r3, [r7, #18]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d044      	beq.n	800905a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008fde:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	695a      	ldr	r2, [r3, #20]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f022 0201 	bic.w	r2, r2, #1
 8008fee:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f022 0210 	bic.w	r2, r2, #16
 800900c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800900e:	8a7b      	ldrh	r3, [r7, #18]
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f85a 	bl	80090cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009018:	e01f      	b.n	800905a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009020:	2b00      	cmp	r3, #0
 8009022:	d008      	beq.n	8009036 <HAL_UART_IRQHandler+0x326>
 8009024:	6a3b      	ldr	r3, [r7, #32]
 8009026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f9fb 	bl	800942a <UART_Transmit_IT>
    return;
 8009034:	e012      	b.n	800905c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00d      	beq.n	800905c <HAL_UART_IRQHandler+0x34c>
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009046:	2b00      	cmp	r3, #0
 8009048:	d008      	beq.n	800905c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa3d 	bl	80094ca <UART_EndTransmit_IT>
    return;
 8009050:	e004      	b.n	800905c <HAL_UART_IRQHandler+0x34c>
    return;
 8009052:	bf00      	nop
 8009054:	e002      	b.n	800905c <HAL_UART_IRQHandler+0x34c>
      return;
 8009056:	bf00      	nop
 8009058:	e000      	b.n	800905c <HAL_UART_IRQHandler+0x34c>
      return;
 800905a:	bf00      	nop
  }
}
 800905c:	3728      	adds	r7, #40	; 0x28
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	08009403 	.word	0x08009403

08009068 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d113      	bne.n	8009128 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	695a      	ldr	r2, [r3, #20]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009114:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68da      	ldr	r2, [r3, #12]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009124:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009126:	e002      	b.n	800912e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7ff ff9d 	bl	8009068 <HAL_UART_TxCpltCallback>
}
 800912e:	bf00      	nop
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009142:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f7ff ff99 	bl	800907c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800914a:	bf00      	nop
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b084      	sub	sp, #16
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800916a:	2b00      	cmp	r3, #0
 800916c:	d12a      	bne.n	80091c4 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009182:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	695a      	ldr	r2, [r3, #20]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f022 0201 	bic.w	r2, r2, #1
 8009192:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	695a      	ldr	r2, [r3, #20]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091a2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2220      	movs	r2, #32
 80091a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d107      	bne.n	80091c4 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f022 0210 	bic.w	r2, r2, #16
 80091c2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d106      	bne.n	80091da <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091d0:	4619      	mov	r1, r3
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f7ff ff7a 	bl	80090cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091d8:	e002      	b.n	80091e0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f7ff ff58 	bl	8009090 <HAL_UART_RxCpltCallback>
}
 80091e0:	bf00      	nop
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d108      	bne.n	8009210 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009202:	085b      	lsrs	r3, r3, #1
 8009204:	b29b      	uxth	r3, r3
 8009206:	4619      	mov	r1, r3
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f7ff ff5f 	bl	80090cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800920e:	e002      	b.n	8009216 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f7ff ff47 	bl	80090a4 <HAL_UART_RxHalfCpltCallback>
}
 8009216:	bf00      	nop
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009226:	2300      	movs	r3, #0
 8009228:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800923a:	2b80      	cmp	r3, #128	; 0x80
 800923c:	bf0c      	ite	eq
 800923e:	2301      	moveq	r3, #1
 8009240:	2300      	movne	r3, #0
 8009242:	b2db      	uxtb	r3, r3
 8009244:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b21      	cmp	r3, #33	; 0x21
 8009250:	d108      	bne.n	8009264 <UART_DMAError+0x46>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2200      	movs	r2, #0
 800925c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800925e:	68b8      	ldr	r0, [r7, #8]
 8009260:	f000 f88c 	bl	800937c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800926e:	2b40      	cmp	r3, #64	; 0x40
 8009270:	bf0c      	ite	eq
 8009272:	2301      	moveq	r3, #1
 8009274:	2300      	movne	r3, #0
 8009276:	b2db      	uxtb	r3, r3
 8009278:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b22      	cmp	r3, #34	; 0x22
 8009284:	d108      	bne.n	8009298 <UART_DMAError+0x7a>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d005      	beq.n	8009298 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2200      	movs	r2, #0
 8009290:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009292:	68b8      	ldr	r0, [r7, #8]
 8009294:	f000 f888 	bl	80093a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929c:	f043 0210 	orr.w	r2, r3, #16
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092a4:	68b8      	ldr	r0, [r7, #8]
 80092a6:	f7ff ff07 	bl	80090b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	4613      	mov	r3, r2
 80092c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	88fa      	ldrh	r2, [r7, #6]
 80092cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2222      	movs	r2, #34	; 0x22
 80092d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e0:	4a23      	ldr	r2, [pc, #140]	; (8009370 <UART_Start_Receive_DMA+0xbc>)
 80092e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e8:	4a22      	ldr	r2, [pc, #136]	; (8009374 <UART_Start_Receive_DMA+0xc0>)
 80092ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f0:	4a21      	ldr	r2, [pc, #132]	; (8009378 <UART_Start_Receive_DMA+0xc4>)
 80092f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f8:	2200      	movs	r2, #0
 80092fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80092fc:	f107 0308 	add.w	r3, r7, #8
 8009300:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3304      	adds	r3, #4
 800930c:	4619      	mov	r1, r3
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	88fb      	ldrh	r3, [r7, #6]
 8009314:	f7fb fa84 	bl	8004820 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009318:	2300      	movs	r3, #0
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	613b      	str	r3, [r7, #16]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	613b      	str	r3, [r7, #16]
 800932c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68da      	ldr	r2, [r3, #12]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009344:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	695a      	ldr	r2, [r3, #20]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f042 0201 	orr.w	r2, r2, #1
 8009354:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	695a      	ldr	r2, [r3, #20]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009364:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	08009153 	.word	0x08009153
 8009374:	080091e9 	.word	0x080091e9
 8009378:	0800921f 	.word	0x0800921f

0800937c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68da      	ldr	r2, [r3, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009392:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2220      	movs	r2, #32
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68da      	ldr	r2, [r3, #12]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80093be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	695a      	ldr	r2, [r3, #20]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f022 0201 	bic.w	r2, r2, #1
 80093ce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d107      	bne.n	80093e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68da      	ldr	r2, [r3, #12]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0210 	bic.w	r2, r2, #16
 80093e6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80093f6:	bf00      	nop
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b084      	sub	sp, #16
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7ff fe4b 	bl	80090b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009422:	bf00      	nop
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800942a:	b480      	push	{r7}
 800942c:	b085      	sub	sp, #20
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b21      	cmp	r3, #33	; 0x21
 800943c:	d13e      	bne.n	80094bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009446:	d114      	bne.n	8009472 <UART_Transmit_IT+0x48>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d110      	bne.n	8009472 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	881b      	ldrh	r3, [r3, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009464:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	1c9a      	adds	r2, r3, #2
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	621a      	str	r2, [r3, #32]
 8009470:	e008      	b.n	8009484 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	1c59      	adds	r1, r3, #1
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	6211      	str	r1, [r2, #32]
 800947c:	781a      	ldrb	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009488:	b29b      	uxth	r3, r3
 800948a:	3b01      	subs	r3, #1
 800948c:	b29b      	uxth	r3, r3
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	4619      	mov	r1, r3
 8009492:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10f      	bne.n	80094b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	e000      	b.n	80094be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80094bc:	2302      	movs	r3, #2
  }
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7ff fdbc 	bl	8009068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b22      	cmp	r3, #34	; 0x22
 800950c:	f040 8087 	bne.w	800961e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009518:	d117      	bne.n	800954a <UART_Receive_IT+0x50>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d113      	bne.n	800954a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009522:	2300      	movs	r3, #0
 8009524:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	b29b      	uxth	r3, r3
 8009534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009538:	b29a      	uxth	r2, r3
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009542:	1c9a      	adds	r2, r3, #2
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	629a      	str	r2, [r3, #40]	; 0x28
 8009548:	e026      	b.n	8009598 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009550:	2300      	movs	r3, #0
 8009552:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800955c:	d007      	beq.n	800956e <UART_Receive_IT+0x74>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10a      	bne.n	800957c <UART_Receive_IT+0x82>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d106      	bne.n	800957c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	b2da      	uxtb	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	701a      	strb	r2, [r3, #0]
 800957a:	e008      	b.n	800958e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009588:	b2da      	uxtb	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800959c:	b29b      	uxth	r3, r3
 800959e:	3b01      	subs	r3, #1
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	4619      	mov	r1, r3
 80095a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d136      	bne.n	800961a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68da      	ldr	r2, [r3, #12]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0220 	bic.w	r2, r2, #32
 80095ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	695a      	ldr	r2, [r3, #20]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 0201 	bic.w	r2, r2, #1
 80095da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2220      	movs	r2, #32
 80095e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d10e      	bne.n	800960a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f022 0210 	bic.w	r2, r2, #16
 80095fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7ff fd62 	bl	80090cc <HAL_UARTEx_RxEventCallback>
 8009608:	e002      	b.n	8009610 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff fd40 	bl	8009090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8009616:	2300      	movs	r3, #0
 8009618:	e002      	b.n	8009620 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	e000      	b.n	8009620 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800961e:	2302      	movs	r3, #2
  }
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	b09f      	sub	sp, #124	; 0x7c
 800962e:	af00      	add	r7, sp, #0
 8009630:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800963c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800963e:	68d9      	ldr	r1, [r3, #12]
 8009640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	ea40 0301 	orr.w	r3, r0, r1
 8009648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800964a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	431a      	orrs	r2, r3
 8009654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	431a      	orrs	r2, r3
 800965a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800965c:	69db      	ldr	r3, [r3, #28]
 800965e:	4313      	orrs	r3, r2
 8009660:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800966c:	f021 010c 	bic.w	r1, r1, #12
 8009670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009676:	430b      	orrs	r3, r1
 8009678:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800967a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009686:	6999      	ldr	r1, [r3, #24]
 8009688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	ea40 0301 	orr.w	r3, r0, r1
 8009690:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	4bc5      	ldr	r3, [pc, #788]	; (80099ac <UART_SetConfig+0x384>)
 8009698:	429a      	cmp	r2, r3
 800969a:	d004      	beq.n	80096a6 <UART_SetConfig+0x7e>
 800969c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	4bc3      	ldr	r3, [pc, #780]	; (80099b0 <UART_SetConfig+0x388>)
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d103      	bne.n	80096ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096a6:	f7fe f8eb 	bl	8007880 <HAL_RCC_GetPCLK2Freq>
 80096aa:	6778      	str	r0, [r7, #116]	; 0x74
 80096ac:	e002      	b.n	80096b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096ae:	f7fe f8d3 	bl	8007858 <HAL_RCC_GetPCLK1Freq>
 80096b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096bc:	f040 80b6 	bne.w	800982c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096c2:	461c      	mov	r4, r3
 80096c4:	f04f 0500 	mov.w	r5, #0
 80096c8:	4622      	mov	r2, r4
 80096ca:	462b      	mov	r3, r5
 80096cc:	1891      	adds	r1, r2, r2
 80096ce:	6439      	str	r1, [r7, #64]	; 0x40
 80096d0:	415b      	adcs	r3, r3
 80096d2:	647b      	str	r3, [r7, #68]	; 0x44
 80096d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096d8:	1912      	adds	r2, r2, r4
 80096da:	eb45 0303 	adc.w	r3, r5, r3
 80096de:	f04f 0000 	mov.w	r0, #0
 80096e2:	f04f 0100 	mov.w	r1, #0
 80096e6:	00d9      	lsls	r1, r3, #3
 80096e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80096ec:	00d0      	lsls	r0, r2, #3
 80096ee:	4602      	mov	r2, r0
 80096f0:	460b      	mov	r3, r1
 80096f2:	1911      	adds	r1, r2, r4
 80096f4:	6639      	str	r1, [r7, #96]	; 0x60
 80096f6:	416b      	adcs	r3, r5
 80096f8:	667b      	str	r3, [r7, #100]	; 0x64
 80096fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	461a      	mov	r2, r3
 8009700:	f04f 0300 	mov.w	r3, #0
 8009704:	1891      	adds	r1, r2, r2
 8009706:	63b9      	str	r1, [r7, #56]	; 0x38
 8009708:	415b      	adcs	r3, r3
 800970a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800970c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009710:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009714:	f7f7 fb4a 	bl	8000dac <__aeabi_uldivmod>
 8009718:	4602      	mov	r2, r0
 800971a:	460b      	mov	r3, r1
 800971c:	4ba5      	ldr	r3, [pc, #660]	; (80099b4 <UART_SetConfig+0x38c>)
 800971e:	fba3 2302 	umull	r2, r3, r3, r2
 8009722:	095b      	lsrs	r3, r3, #5
 8009724:	011e      	lsls	r6, r3, #4
 8009726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009728:	461c      	mov	r4, r3
 800972a:	f04f 0500 	mov.w	r5, #0
 800972e:	4622      	mov	r2, r4
 8009730:	462b      	mov	r3, r5
 8009732:	1891      	adds	r1, r2, r2
 8009734:	6339      	str	r1, [r7, #48]	; 0x30
 8009736:	415b      	adcs	r3, r3
 8009738:	637b      	str	r3, [r7, #52]	; 0x34
 800973a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800973e:	1912      	adds	r2, r2, r4
 8009740:	eb45 0303 	adc.w	r3, r5, r3
 8009744:	f04f 0000 	mov.w	r0, #0
 8009748:	f04f 0100 	mov.w	r1, #0
 800974c:	00d9      	lsls	r1, r3, #3
 800974e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009752:	00d0      	lsls	r0, r2, #3
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	1911      	adds	r1, r2, r4
 800975a:	65b9      	str	r1, [r7, #88]	; 0x58
 800975c:	416b      	adcs	r3, r5
 800975e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	461a      	mov	r2, r3
 8009766:	f04f 0300 	mov.w	r3, #0
 800976a:	1891      	adds	r1, r2, r2
 800976c:	62b9      	str	r1, [r7, #40]	; 0x28
 800976e:	415b      	adcs	r3, r3
 8009770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009772:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009776:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800977a:	f7f7 fb17 	bl	8000dac <__aeabi_uldivmod>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4b8c      	ldr	r3, [pc, #560]	; (80099b4 <UART_SetConfig+0x38c>)
 8009784:	fba3 1302 	umull	r1, r3, r3, r2
 8009788:	095b      	lsrs	r3, r3, #5
 800978a:	2164      	movs	r1, #100	; 0x64
 800978c:	fb01 f303 	mul.w	r3, r1, r3
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	00db      	lsls	r3, r3, #3
 8009794:	3332      	adds	r3, #50	; 0x32
 8009796:	4a87      	ldr	r2, [pc, #540]	; (80099b4 <UART_SetConfig+0x38c>)
 8009798:	fba2 2303 	umull	r2, r3, r2, r3
 800979c:	095b      	lsrs	r3, r3, #5
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097a4:	441e      	add	r6, r3
 80097a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097a8:	4618      	mov	r0, r3
 80097aa:	f04f 0100 	mov.w	r1, #0
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	1894      	adds	r4, r2, r2
 80097b4:	623c      	str	r4, [r7, #32]
 80097b6:	415b      	adcs	r3, r3
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
 80097ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097be:	1812      	adds	r2, r2, r0
 80097c0:	eb41 0303 	adc.w	r3, r1, r3
 80097c4:	f04f 0400 	mov.w	r4, #0
 80097c8:	f04f 0500 	mov.w	r5, #0
 80097cc:	00dd      	lsls	r5, r3, #3
 80097ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80097d2:	00d4      	lsls	r4, r2, #3
 80097d4:	4622      	mov	r2, r4
 80097d6:	462b      	mov	r3, r5
 80097d8:	1814      	adds	r4, r2, r0
 80097da:	653c      	str	r4, [r7, #80]	; 0x50
 80097dc:	414b      	adcs	r3, r1
 80097de:	657b      	str	r3, [r7, #84]	; 0x54
 80097e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	461a      	mov	r2, r3
 80097e6:	f04f 0300 	mov.w	r3, #0
 80097ea:	1891      	adds	r1, r2, r2
 80097ec:	61b9      	str	r1, [r7, #24]
 80097ee:	415b      	adcs	r3, r3
 80097f0:	61fb      	str	r3, [r7, #28]
 80097f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80097fa:	f7f7 fad7 	bl	8000dac <__aeabi_uldivmod>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4b6c      	ldr	r3, [pc, #432]	; (80099b4 <UART_SetConfig+0x38c>)
 8009804:	fba3 1302 	umull	r1, r3, r3, r2
 8009808:	095b      	lsrs	r3, r3, #5
 800980a:	2164      	movs	r1, #100	; 0x64
 800980c:	fb01 f303 	mul.w	r3, r1, r3
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	3332      	adds	r3, #50	; 0x32
 8009816:	4a67      	ldr	r2, [pc, #412]	; (80099b4 <UART_SetConfig+0x38c>)
 8009818:	fba2 2303 	umull	r2, r3, r2, r3
 800981c:	095b      	lsrs	r3, r3, #5
 800981e:	f003 0207 	and.w	r2, r3, #7
 8009822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4432      	add	r2, r6
 8009828:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800982a:	e0b9      	b.n	80099a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800982c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800982e:	461c      	mov	r4, r3
 8009830:	f04f 0500 	mov.w	r5, #0
 8009834:	4622      	mov	r2, r4
 8009836:	462b      	mov	r3, r5
 8009838:	1891      	adds	r1, r2, r2
 800983a:	6139      	str	r1, [r7, #16]
 800983c:	415b      	adcs	r3, r3
 800983e:	617b      	str	r3, [r7, #20]
 8009840:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009844:	1912      	adds	r2, r2, r4
 8009846:	eb45 0303 	adc.w	r3, r5, r3
 800984a:	f04f 0000 	mov.w	r0, #0
 800984e:	f04f 0100 	mov.w	r1, #0
 8009852:	00d9      	lsls	r1, r3, #3
 8009854:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009858:	00d0      	lsls	r0, r2, #3
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	eb12 0804 	adds.w	r8, r2, r4
 8009862:	eb43 0905 	adc.w	r9, r3, r5
 8009866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	4618      	mov	r0, r3
 800986c:	f04f 0100 	mov.w	r1, #0
 8009870:	f04f 0200 	mov.w	r2, #0
 8009874:	f04f 0300 	mov.w	r3, #0
 8009878:	008b      	lsls	r3, r1, #2
 800987a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800987e:	0082      	lsls	r2, r0, #2
 8009880:	4640      	mov	r0, r8
 8009882:	4649      	mov	r1, r9
 8009884:	f7f7 fa92 	bl	8000dac <__aeabi_uldivmod>
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	4b49      	ldr	r3, [pc, #292]	; (80099b4 <UART_SetConfig+0x38c>)
 800988e:	fba3 2302 	umull	r2, r3, r3, r2
 8009892:	095b      	lsrs	r3, r3, #5
 8009894:	011e      	lsls	r6, r3, #4
 8009896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009898:	4618      	mov	r0, r3
 800989a:	f04f 0100 	mov.w	r1, #0
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	1894      	adds	r4, r2, r2
 80098a4:	60bc      	str	r4, [r7, #8]
 80098a6:	415b      	adcs	r3, r3
 80098a8:	60fb      	str	r3, [r7, #12]
 80098aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098ae:	1812      	adds	r2, r2, r0
 80098b0:	eb41 0303 	adc.w	r3, r1, r3
 80098b4:	f04f 0400 	mov.w	r4, #0
 80098b8:	f04f 0500 	mov.w	r5, #0
 80098bc:	00dd      	lsls	r5, r3, #3
 80098be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80098c2:	00d4      	lsls	r4, r2, #3
 80098c4:	4622      	mov	r2, r4
 80098c6:	462b      	mov	r3, r5
 80098c8:	1814      	adds	r4, r2, r0
 80098ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80098cc:	414b      	adcs	r3, r1
 80098ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f04f 0100 	mov.w	r1, #0
 80098da:	f04f 0200 	mov.w	r2, #0
 80098de:	f04f 0300 	mov.w	r3, #0
 80098e2:	008b      	lsls	r3, r1, #2
 80098e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80098e8:	0082      	lsls	r2, r0, #2
 80098ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80098ee:	f7f7 fa5d 	bl	8000dac <__aeabi_uldivmod>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	4b2f      	ldr	r3, [pc, #188]	; (80099b4 <UART_SetConfig+0x38c>)
 80098f8:	fba3 1302 	umull	r1, r3, r3, r2
 80098fc:	095b      	lsrs	r3, r3, #5
 80098fe:	2164      	movs	r1, #100	; 0x64
 8009900:	fb01 f303 	mul.w	r3, r1, r3
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	011b      	lsls	r3, r3, #4
 8009908:	3332      	adds	r3, #50	; 0x32
 800990a:	4a2a      	ldr	r2, [pc, #168]	; (80099b4 <UART_SetConfig+0x38c>)
 800990c:	fba2 2303 	umull	r2, r3, r2, r3
 8009910:	095b      	lsrs	r3, r3, #5
 8009912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009916:	441e      	add	r6, r3
 8009918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800991a:	4618      	mov	r0, r3
 800991c:	f04f 0100 	mov.w	r1, #0
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	1894      	adds	r4, r2, r2
 8009926:	603c      	str	r4, [r7, #0]
 8009928:	415b      	adcs	r3, r3
 800992a:	607b      	str	r3, [r7, #4]
 800992c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009930:	1812      	adds	r2, r2, r0
 8009932:	eb41 0303 	adc.w	r3, r1, r3
 8009936:	f04f 0400 	mov.w	r4, #0
 800993a:	f04f 0500 	mov.w	r5, #0
 800993e:	00dd      	lsls	r5, r3, #3
 8009940:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009944:	00d4      	lsls	r4, r2, #3
 8009946:	4622      	mov	r2, r4
 8009948:	462b      	mov	r3, r5
 800994a:	eb12 0a00 	adds.w	sl, r2, r0
 800994e:	eb43 0b01 	adc.w	fp, r3, r1
 8009952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	4618      	mov	r0, r3
 8009958:	f04f 0100 	mov.w	r1, #0
 800995c:	f04f 0200 	mov.w	r2, #0
 8009960:	f04f 0300 	mov.w	r3, #0
 8009964:	008b      	lsls	r3, r1, #2
 8009966:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800996a:	0082      	lsls	r2, r0, #2
 800996c:	4650      	mov	r0, sl
 800996e:	4659      	mov	r1, fp
 8009970:	f7f7 fa1c 	bl	8000dac <__aeabi_uldivmod>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4b0e      	ldr	r3, [pc, #56]	; (80099b4 <UART_SetConfig+0x38c>)
 800997a:	fba3 1302 	umull	r1, r3, r3, r2
 800997e:	095b      	lsrs	r3, r3, #5
 8009980:	2164      	movs	r1, #100	; 0x64
 8009982:	fb01 f303 	mul.w	r3, r1, r3
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	011b      	lsls	r3, r3, #4
 800998a:	3332      	adds	r3, #50	; 0x32
 800998c:	4a09      	ldr	r2, [pc, #36]	; (80099b4 <UART_SetConfig+0x38c>)
 800998e:	fba2 2303 	umull	r2, r3, r2, r3
 8009992:	095b      	lsrs	r3, r3, #5
 8009994:	f003 020f 	and.w	r2, r3, #15
 8009998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4432      	add	r2, r6
 800999e:	609a      	str	r2, [r3, #8]
}
 80099a0:	bf00      	nop
 80099a2:	377c      	adds	r7, #124	; 0x7c
 80099a4:	46bd      	mov	sp, r7
 80099a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099aa:	bf00      	nop
 80099ac:	40011000 	.word	0x40011000
 80099b0:	40011400 	.word	0x40011400
 80099b4:	51eb851f 	.word	0x51eb851f

080099b8 <calloc>:
 80099b8:	4b02      	ldr	r3, [pc, #8]	; (80099c4 <calloc+0xc>)
 80099ba:	460a      	mov	r2, r1
 80099bc:	4601      	mov	r1, r0
 80099be:	6818      	ldr	r0, [r3, #0]
 80099c0:	f000 b842 	b.w	8009a48 <_calloc_r>
 80099c4:	20000024 	.word	0x20000024

080099c8 <__errno>:
 80099c8:	4b01      	ldr	r3, [pc, #4]	; (80099d0 <__errno+0x8>)
 80099ca:	6818      	ldr	r0, [r3, #0]
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	20000024 	.word	0x20000024

080099d4 <__libc_init_array>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	4d0d      	ldr	r5, [pc, #52]	; (8009a0c <__libc_init_array+0x38>)
 80099d8:	4c0d      	ldr	r4, [pc, #52]	; (8009a10 <__libc_init_array+0x3c>)
 80099da:	1b64      	subs	r4, r4, r5
 80099dc:	10a4      	asrs	r4, r4, #2
 80099de:	2600      	movs	r6, #0
 80099e0:	42a6      	cmp	r6, r4
 80099e2:	d109      	bne.n	80099f8 <__libc_init_array+0x24>
 80099e4:	4d0b      	ldr	r5, [pc, #44]	; (8009a14 <__libc_init_array+0x40>)
 80099e6:	4c0c      	ldr	r4, [pc, #48]	; (8009a18 <__libc_init_array+0x44>)
 80099e8:	f000 f99e 	bl	8009d28 <_init>
 80099ec:	1b64      	subs	r4, r4, r5
 80099ee:	10a4      	asrs	r4, r4, #2
 80099f0:	2600      	movs	r6, #0
 80099f2:	42a6      	cmp	r6, r4
 80099f4:	d105      	bne.n	8009a02 <__libc_init_array+0x2e>
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099fc:	4798      	blx	r3
 80099fe:	3601      	adds	r6, #1
 8009a00:	e7ee      	b.n	80099e0 <__libc_init_array+0xc>
 8009a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a06:	4798      	blx	r3
 8009a08:	3601      	adds	r6, #1
 8009a0a:	e7f2      	b.n	80099f2 <__libc_init_array+0x1e>
 8009a0c:	08009d80 	.word	0x08009d80
 8009a10:	08009d80 	.word	0x08009d80
 8009a14:	08009d80 	.word	0x08009d80
 8009a18:	08009d84 	.word	0x08009d84

08009a1c <memcpy>:
 8009a1c:	440a      	add	r2, r1
 8009a1e:	4291      	cmp	r1, r2
 8009a20:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a24:	d100      	bne.n	8009a28 <memcpy+0xc>
 8009a26:	4770      	bx	lr
 8009a28:	b510      	push	{r4, lr}
 8009a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a32:	4291      	cmp	r1, r2
 8009a34:	d1f9      	bne.n	8009a2a <memcpy+0xe>
 8009a36:	bd10      	pop	{r4, pc}

08009a38 <memset>:
 8009a38:	4402      	add	r2, r0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d100      	bne.n	8009a42 <memset+0xa>
 8009a40:	4770      	bx	lr
 8009a42:	f803 1b01 	strb.w	r1, [r3], #1
 8009a46:	e7f9      	b.n	8009a3c <memset+0x4>

08009a48 <_calloc_r>:
 8009a48:	b513      	push	{r0, r1, r4, lr}
 8009a4a:	434a      	muls	r2, r1
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	9201      	str	r2, [sp, #4]
 8009a50:	f000 f80a 	bl	8009a68 <_malloc_r>
 8009a54:	4604      	mov	r4, r0
 8009a56:	b118      	cbz	r0, 8009a60 <_calloc_r+0x18>
 8009a58:	9a01      	ldr	r2, [sp, #4]
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	f7ff ffec 	bl	8009a38 <memset>
 8009a60:	4620      	mov	r0, r4
 8009a62:	b002      	add	sp, #8
 8009a64:	bd10      	pop	{r4, pc}
	...

08009a68 <_malloc_r>:
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6a:	1ccd      	adds	r5, r1, #3
 8009a6c:	f025 0503 	bic.w	r5, r5, #3
 8009a70:	3508      	adds	r5, #8
 8009a72:	2d0c      	cmp	r5, #12
 8009a74:	bf38      	it	cc
 8009a76:	250c      	movcc	r5, #12
 8009a78:	2d00      	cmp	r5, #0
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	db01      	blt.n	8009a82 <_malloc_r+0x1a>
 8009a7e:	42a9      	cmp	r1, r5
 8009a80:	d903      	bls.n	8009a8a <_malloc_r+0x22>
 8009a82:	230c      	movs	r3, #12
 8009a84:	6033      	str	r3, [r6, #0]
 8009a86:	2000      	movs	r0, #0
 8009a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a8a:	f000 f857 	bl	8009b3c <__malloc_lock>
 8009a8e:	4921      	ldr	r1, [pc, #132]	; (8009b14 <_malloc_r+0xac>)
 8009a90:	680a      	ldr	r2, [r1, #0]
 8009a92:	4614      	mov	r4, r2
 8009a94:	b99c      	cbnz	r4, 8009abe <_malloc_r+0x56>
 8009a96:	4f20      	ldr	r7, [pc, #128]	; (8009b18 <_malloc_r+0xb0>)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	b923      	cbnz	r3, 8009aa6 <_malloc_r+0x3e>
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f000 f83c 	bl	8009b1c <_sbrk_r>
 8009aa4:	6038      	str	r0, [r7, #0]
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f000 f837 	bl	8009b1c <_sbrk_r>
 8009aae:	1c43      	adds	r3, r0, #1
 8009ab0:	d123      	bne.n	8009afa <_malloc_r+0x92>
 8009ab2:	230c      	movs	r3, #12
 8009ab4:	6033      	str	r3, [r6, #0]
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f000 f846 	bl	8009b48 <__malloc_unlock>
 8009abc:	e7e3      	b.n	8009a86 <_malloc_r+0x1e>
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	1b5b      	subs	r3, r3, r5
 8009ac2:	d417      	bmi.n	8009af4 <_malloc_r+0x8c>
 8009ac4:	2b0b      	cmp	r3, #11
 8009ac6:	d903      	bls.n	8009ad0 <_malloc_r+0x68>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	441c      	add	r4, r3
 8009acc:	6025      	str	r5, [r4, #0]
 8009ace:	e004      	b.n	8009ada <_malloc_r+0x72>
 8009ad0:	6863      	ldr	r3, [r4, #4]
 8009ad2:	42a2      	cmp	r2, r4
 8009ad4:	bf0c      	ite	eq
 8009ad6:	600b      	streq	r3, [r1, #0]
 8009ad8:	6053      	strne	r3, [r2, #4]
 8009ada:	4630      	mov	r0, r6
 8009adc:	f000 f834 	bl	8009b48 <__malloc_unlock>
 8009ae0:	f104 000b 	add.w	r0, r4, #11
 8009ae4:	1d23      	adds	r3, r4, #4
 8009ae6:	f020 0007 	bic.w	r0, r0, #7
 8009aea:	1ac2      	subs	r2, r0, r3
 8009aec:	d0cc      	beq.n	8009a88 <_malloc_r+0x20>
 8009aee:	1a1b      	subs	r3, r3, r0
 8009af0:	50a3      	str	r3, [r4, r2]
 8009af2:	e7c9      	b.n	8009a88 <_malloc_r+0x20>
 8009af4:	4622      	mov	r2, r4
 8009af6:	6864      	ldr	r4, [r4, #4]
 8009af8:	e7cc      	b.n	8009a94 <_malloc_r+0x2c>
 8009afa:	1cc4      	adds	r4, r0, #3
 8009afc:	f024 0403 	bic.w	r4, r4, #3
 8009b00:	42a0      	cmp	r0, r4
 8009b02:	d0e3      	beq.n	8009acc <_malloc_r+0x64>
 8009b04:	1a21      	subs	r1, r4, r0
 8009b06:	4630      	mov	r0, r6
 8009b08:	f000 f808 	bl	8009b1c <_sbrk_r>
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	d1dd      	bne.n	8009acc <_malloc_r+0x64>
 8009b10:	e7cf      	b.n	8009ab2 <_malloc_r+0x4a>
 8009b12:	bf00      	nop
 8009b14:	20000350 	.word	0x20000350
 8009b18:	20000354 	.word	0x20000354

08009b1c <_sbrk_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4d06      	ldr	r5, [pc, #24]	; (8009b38 <_sbrk_r+0x1c>)
 8009b20:	2300      	movs	r3, #0
 8009b22:	4604      	mov	r4, r0
 8009b24:	4608      	mov	r0, r1
 8009b26:	602b      	str	r3, [r5, #0]
 8009b28:	f7fa fbd2 	bl	80042d0 <_sbrk>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d102      	bne.n	8009b36 <_sbrk_r+0x1a>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	b103      	cbz	r3, 8009b36 <_sbrk_r+0x1a>
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
 8009b38:	2000058c 	.word	0x2000058c

08009b3c <__malloc_lock>:
 8009b3c:	4801      	ldr	r0, [pc, #4]	; (8009b44 <__malloc_lock+0x8>)
 8009b3e:	f000 b809 	b.w	8009b54 <__retarget_lock_acquire_recursive>
 8009b42:	bf00      	nop
 8009b44:	20000594 	.word	0x20000594

08009b48 <__malloc_unlock>:
 8009b48:	4801      	ldr	r0, [pc, #4]	; (8009b50 <__malloc_unlock+0x8>)
 8009b4a:	f000 b804 	b.w	8009b56 <__retarget_lock_release_recursive>
 8009b4e:	bf00      	nop
 8009b50:	20000594 	.word	0x20000594

08009b54 <__retarget_lock_acquire_recursive>:
 8009b54:	4770      	bx	lr

08009b56 <__retarget_lock_release_recursive>:
 8009b56:	4770      	bx	lr

08009b58 <sqrt>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	ed2d 8b02 	vpush	{d8}
 8009b5e:	ec55 4b10 	vmov	r4, r5, d0
 8009b62:	f000 f82d 	bl	8009bc0 <__ieee754_sqrt>
 8009b66:	4b15      	ldr	r3, [pc, #84]	; (8009bbc <sqrt+0x64>)
 8009b68:	eeb0 8a40 	vmov.f32	s16, s0
 8009b6c:	eef0 8a60 	vmov.f32	s17, s1
 8009b70:	f993 3000 	ldrsb.w	r3, [r3]
 8009b74:	3301      	adds	r3, #1
 8009b76:	d019      	beq.n	8009bac <sqrt+0x54>
 8009b78:	4622      	mov	r2, r4
 8009b7a:	462b      	mov	r3, r5
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	4629      	mov	r1, r5
 8009b80:	f7f6 ff80 	bl	8000a84 <__aeabi_dcmpun>
 8009b84:	b990      	cbnz	r0, 8009bac <sqrt+0x54>
 8009b86:	2200      	movs	r2, #0
 8009b88:	2300      	movs	r3, #0
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	f7f6 ff51 	bl	8000a34 <__aeabi_dcmplt>
 8009b92:	b158      	cbz	r0, 8009bac <sqrt+0x54>
 8009b94:	f7ff ff18 	bl	80099c8 <__errno>
 8009b98:	2321      	movs	r3, #33	; 0x21
 8009b9a:	6003      	str	r3, [r0, #0]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	f7f6 fdfe 	bl	80007a4 <__aeabi_ddiv>
 8009ba8:	ec41 0b18 	vmov	d8, r0, r1
 8009bac:	eeb0 0a48 	vmov.f32	s0, s16
 8009bb0:	eef0 0a68 	vmov.f32	s1, s17
 8009bb4:	ecbd 8b02 	vpop	{d8}
 8009bb8:	bd38      	pop	{r3, r4, r5, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000088 	.word	0x20000088

08009bc0 <__ieee754_sqrt>:
 8009bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc4:	ec55 4b10 	vmov	r4, r5, d0
 8009bc8:	4e56      	ldr	r6, [pc, #344]	; (8009d24 <__ieee754_sqrt+0x164>)
 8009bca:	43ae      	bics	r6, r5
 8009bcc:	ee10 0a10 	vmov	r0, s0
 8009bd0:	ee10 3a10 	vmov	r3, s0
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	462a      	mov	r2, r5
 8009bd8:	d110      	bne.n	8009bfc <__ieee754_sqrt+0x3c>
 8009bda:	ee10 2a10 	vmov	r2, s0
 8009bde:	462b      	mov	r3, r5
 8009be0:	f7f6 fcb6 	bl	8000550 <__aeabi_dmul>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4620      	mov	r0, r4
 8009bea:	4629      	mov	r1, r5
 8009bec:	f7f6 fafa 	bl	80001e4 <__adddf3>
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	460d      	mov	r5, r1
 8009bf4:	ec45 4b10 	vmov	d0, r4, r5
 8009bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bfc:	2d00      	cmp	r5, #0
 8009bfe:	dc10      	bgt.n	8009c22 <__ieee754_sqrt+0x62>
 8009c00:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009c04:	4330      	orrs	r0, r6
 8009c06:	d0f5      	beq.n	8009bf4 <__ieee754_sqrt+0x34>
 8009c08:	b15d      	cbz	r5, 8009c22 <__ieee754_sqrt+0x62>
 8009c0a:	ee10 2a10 	vmov	r2, s0
 8009c0e:	462b      	mov	r3, r5
 8009c10:	ee10 0a10 	vmov	r0, s0
 8009c14:	f7f6 fae4 	bl	80001e0 <__aeabi_dsub>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	f7f6 fdc2 	bl	80007a4 <__aeabi_ddiv>
 8009c20:	e7e6      	b.n	8009bf0 <__ieee754_sqrt+0x30>
 8009c22:	1509      	asrs	r1, r1, #20
 8009c24:	d076      	beq.n	8009d14 <__ieee754_sqrt+0x154>
 8009c26:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009c2a:	07ce      	lsls	r6, r1, #31
 8009c2c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009c30:	bf5e      	ittt	pl
 8009c32:	0fda      	lsrpl	r2, r3, #31
 8009c34:	005b      	lslpl	r3, r3, #1
 8009c36:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009c3a:	0fda      	lsrs	r2, r3, #31
 8009c3c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009c40:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009c44:	2000      	movs	r0, #0
 8009c46:	106d      	asrs	r5, r5, #1
 8009c48:	005b      	lsls	r3, r3, #1
 8009c4a:	f04f 0e16 	mov.w	lr, #22
 8009c4e:	4684      	mov	ip, r0
 8009c50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c54:	eb0c 0401 	add.w	r4, ip, r1
 8009c58:	4294      	cmp	r4, r2
 8009c5a:	bfde      	ittt	le
 8009c5c:	1b12      	suble	r2, r2, r4
 8009c5e:	eb04 0c01 	addle.w	ip, r4, r1
 8009c62:	1840      	addle	r0, r0, r1
 8009c64:	0052      	lsls	r2, r2, #1
 8009c66:	f1be 0e01 	subs.w	lr, lr, #1
 8009c6a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009c6e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009c72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c76:	d1ed      	bne.n	8009c54 <__ieee754_sqrt+0x94>
 8009c78:	4671      	mov	r1, lr
 8009c7a:	2720      	movs	r7, #32
 8009c7c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009c80:	4562      	cmp	r2, ip
 8009c82:	eb04 060e 	add.w	r6, r4, lr
 8009c86:	dc02      	bgt.n	8009c8e <__ieee754_sqrt+0xce>
 8009c88:	d113      	bne.n	8009cb2 <__ieee754_sqrt+0xf2>
 8009c8a:	429e      	cmp	r6, r3
 8009c8c:	d811      	bhi.n	8009cb2 <__ieee754_sqrt+0xf2>
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	eb06 0e04 	add.w	lr, r6, r4
 8009c94:	da43      	bge.n	8009d1e <__ieee754_sqrt+0x15e>
 8009c96:	f1be 0f00 	cmp.w	lr, #0
 8009c9a:	db40      	blt.n	8009d1e <__ieee754_sqrt+0x15e>
 8009c9c:	f10c 0801 	add.w	r8, ip, #1
 8009ca0:	eba2 020c 	sub.w	r2, r2, ip
 8009ca4:	429e      	cmp	r6, r3
 8009ca6:	bf88      	it	hi
 8009ca8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009cac:	1b9b      	subs	r3, r3, r6
 8009cae:	4421      	add	r1, r4
 8009cb0:	46c4      	mov	ip, r8
 8009cb2:	0052      	lsls	r2, r2, #1
 8009cb4:	3f01      	subs	r7, #1
 8009cb6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009cba:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009cbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009cc2:	d1dd      	bne.n	8009c80 <__ieee754_sqrt+0xc0>
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	d006      	beq.n	8009cd6 <__ieee754_sqrt+0x116>
 8009cc8:	1c4c      	adds	r4, r1, #1
 8009cca:	bf13      	iteet	ne
 8009ccc:	3101      	addne	r1, #1
 8009cce:	3001      	addeq	r0, #1
 8009cd0:	4639      	moveq	r1, r7
 8009cd2:	f021 0101 	bicne.w	r1, r1, #1
 8009cd6:	1043      	asrs	r3, r0, #1
 8009cd8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009cdc:	0849      	lsrs	r1, r1, #1
 8009cde:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009ce2:	07c2      	lsls	r2, r0, #31
 8009ce4:	bf48      	it	mi
 8009ce6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009cea:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009cee:	460c      	mov	r4, r1
 8009cf0:	463d      	mov	r5, r7
 8009cf2:	e77f      	b.n	8009bf4 <__ieee754_sqrt+0x34>
 8009cf4:	0ada      	lsrs	r2, r3, #11
 8009cf6:	3815      	subs	r0, #21
 8009cf8:	055b      	lsls	r3, r3, #21
 8009cfa:	2a00      	cmp	r2, #0
 8009cfc:	d0fa      	beq.n	8009cf4 <__ieee754_sqrt+0x134>
 8009cfe:	02d7      	lsls	r7, r2, #11
 8009d00:	d50a      	bpl.n	8009d18 <__ieee754_sqrt+0x158>
 8009d02:	f1c1 0420 	rsb	r4, r1, #32
 8009d06:	fa23 f404 	lsr.w	r4, r3, r4
 8009d0a:	1e4d      	subs	r5, r1, #1
 8009d0c:	408b      	lsls	r3, r1
 8009d0e:	4322      	orrs	r2, r4
 8009d10:	1b41      	subs	r1, r0, r5
 8009d12:	e788      	b.n	8009c26 <__ieee754_sqrt+0x66>
 8009d14:	4608      	mov	r0, r1
 8009d16:	e7f0      	b.n	8009cfa <__ieee754_sqrt+0x13a>
 8009d18:	0052      	lsls	r2, r2, #1
 8009d1a:	3101      	adds	r1, #1
 8009d1c:	e7ef      	b.n	8009cfe <__ieee754_sqrt+0x13e>
 8009d1e:	46e0      	mov	r8, ip
 8009d20:	e7be      	b.n	8009ca0 <__ieee754_sqrt+0xe0>
 8009d22:	bf00      	nop
 8009d24:	7ff00000 	.word	0x7ff00000

08009d28 <_init>:
 8009d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2a:	bf00      	nop
 8009d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d2e:	bc08      	pop	{r3}
 8009d30:	469e      	mov	lr, r3
 8009d32:	4770      	bx	lr

08009d34 <_fini>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	bf00      	nop
 8009d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3a:	bc08      	pop	{r3}
 8009d3c:	469e      	mov	lr, r3
 8009d3e:	4770      	bx	lr
