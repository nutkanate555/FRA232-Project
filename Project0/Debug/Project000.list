
Project000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f64  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080070fc  080070fc  000170fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007134  08007134  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007134  08007134  00017134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800713c  0800713c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800713c  0800713c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007140  08007140  00017140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000088  080071cc  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  080071cc  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddde  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d90  00000000  00000000  0002de96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0002fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00030938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016916  00000000  00000000  000315a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da7d  00000000  00000000  00047eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f348  00000000  00000000  00055933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4c7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c44  00000000  00000000  000e4cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080070e4 	.word	0x080070e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	080070e4 	.word	0x080070e4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96e 	b.w	80010a0 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468c      	mov	ip, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8083 	bne.w	8000ef2 <__udivmoddi4+0x116>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4617      	mov	r7, r2
 8000df0:	d947      	bls.n	8000e82 <__udivmoddi4+0xa6>
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b142      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	f1c2 0020 	rsb	r0, r2, #32
 8000dfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	ea40 0c01 	orr.w	ip, r0, r1
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fbbc f6f8 	udiv	r6, ip, r8
 8000e14:	fa1f fe87 	uxth.w	lr, r7
 8000e18:	fb08 c116 	mls	r1, r8, r6, ip
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f10e 	mul.w	r1, r6, lr
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x60>
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 8119 	bcs.w	8001064 <__udivmoddi4+0x288>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 8116 	bls.w	8001064 <__udivmoddi4+0x288>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	443b      	add	r3, r7
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x8c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	f080 8105 	bcs.w	8001068 <__udivmoddi4+0x28c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8102 	bls.w	8001068 <__udivmoddi4+0x28c>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6c:	eba4 040e 	sub.w	r4, r4, lr
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa0>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	b902      	cbnz	r2, 8000e86 <__udivmoddi4+0xaa>
 8000e84:	deff      	udf	#255	; 0xff
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d150      	bne.n	8000f30 <__udivmoddi4+0x154>
 8000e8e:	1bcb      	subs	r3, r1, r7
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	2601      	movs	r6, #1
 8000e9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb08 f30c 	mul.w	r3, r8, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0xe4>
 8000eb0:	1879      	adds	r1, r7, r1
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0xe2>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	f200 80e9 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ecc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x10c>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x10a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80d9 	bhi.w	8001098 <__udivmoddi4+0x2bc>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e7bf      	b.n	8000e72 <__udivmoddi4+0x96>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0x12e>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	f000 80b1 	beq.w	800105e <__udivmoddi4+0x282>
 8000efc:	2600      	movs	r6, #0
 8000efe:	e9c5 0100 	strd	r0, r1, [r5]
 8000f02:	4630      	mov	r0, r6
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f683 	clz	r6, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d14a      	bne.n	8000fa8 <__udivmoddi4+0x1cc>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0x140>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80b8 	bhi.w	800108c <__udivmoddi4+0x2b0>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d0a8      	beq.n	8000e7c <__udivmoddi4+0xa0>
 8000f2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0xa0>
 8000f30:	f1c2 0320 	rsb	r3, r2, #32
 8000f34:	fa20 f603 	lsr.w	r6, r0, r3
 8000f38:	4097      	lsls	r7, r2
 8000f3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	4330      	orrs	r0, r6
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f4c:	fa1f f887 	uxth.w	r8, r7
 8000f50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f58:	fb06 f108 	mul.w	r1, r6, r8
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x19c>
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f6a:	f080 808d 	bcs.w	8001088 <__udivmoddi4+0x2ac>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	f240 808a 	bls.w	8001088 <__udivmoddi4+0x2ac>
 8000f74:	3e02      	subs	r6, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	b281      	uxth	r1, r0
 8000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb00 f308 	mul.w	r3, r0, r8
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d907      	bls.n	8000fa0 <__udivmoddi4+0x1c4>
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f96:	d273      	bcs.n	8001080 <__udivmoddi4+0x2a4>
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d971      	bls.n	8001080 <__udivmoddi4+0x2a4>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4439      	add	r1, r7
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa6:	e778      	b.n	8000e9a <__udivmoddi4+0xbe>
 8000fa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000fac:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fba:	fa01 f306 	lsl.w	r3, r1, r6
 8000fbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	0c3b      	lsrs	r3, r7, #16
 8000fca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fce:	fa1f f884 	uxth.w	r8, r4
 8000fd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fda:	fb09 fa08 	mul.w	sl, r9, r8
 8000fde:	458a      	cmp	sl, r1
 8000fe0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x220>
 8000fea:	1861      	adds	r1, r4, r1
 8000fec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff0:	d248      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8000ff2:	458a      	cmp	sl, r1
 8000ff4:	d946      	bls.n	8001084 <__udivmoddi4+0x2a8>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4421      	add	r1, r4
 8000ffc:	eba1 010a 	sub.w	r1, r1, sl
 8001000:	b2bf      	uxth	r7, r7
 8001002:	fbb1 f0fe 	udiv	r0, r1, lr
 8001006:	fb0e 1110 	mls	r1, lr, r0, r1
 800100a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100e:	fb00 f808 	mul.w	r8, r0, r8
 8001012:	45b8      	cmp	r8, r7
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x24a>
 8001016:	19e7      	adds	r7, r4, r7
 8001018:	f100 31ff 	add.w	r1, r0, #4294967295
 800101c:	d22e      	bcs.n	800107c <__udivmoddi4+0x2a0>
 800101e:	45b8      	cmp	r8, r7
 8001020:	d92c      	bls.n	800107c <__udivmoddi4+0x2a0>
 8001022:	3802      	subs	r0, #2
 8001024:	4427      	add	r7, r4
 8001026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102a:	eba7 0708 	sub.w	r7, r7, r8
 800102e:	fba0 8902 	umull	r8, r9, r0, r2
 8001032:	454f      	cmp	r7, r9
 8001034:	46c6      	mov	lr, r8
 8001036:	4649      	mov	r1, r9
 8001038:	d31a      	bcc.n	8001070 <__udivmoddi4+0x294>
 800103a:	d017      	beq.n	800106c <__udivmoddi4+0x290>
 800103c:	b15d      	cbz	r5, 8001056 <__udivmoddi4+0x27a>
 800103e:	ebb3 020e 	subs.w	r2, r3, lr
 8001042:	eb67 0701 	sbc.w	r7, r7, r1
 8001046:	fa07 fc0c 	lsl.w	ip, r7, ip
 800104a:	40f2      	lsrs	r2, r6
 800104c:	ea4c 0202 	orr.w	r2, ip, r2
 8001050:	40f7      	lsrs	r7, r6
 8001052:	e9c5 2700 	strd	r2, r7, [r5]
 8001056:	2600      	movs	r6, #0
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	462e      	mov	r6, r5
 8001060:	4628      	mov	r0, r5
 8001062:	e70b      	b.n	8000e7c <__udivmoddi4+0xa0>
 8001064:	4606      	mov	r6, r0
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0x60>
 8001068:	4618      	mov	r0, r3
 800106a:	e6fd      	b.n	8000e68 <__udivmoddi4+0x8c>
 800106c:	4543      	cmp	r3, r8
 800106e:	d2e5      	bcs.n	800103c <__udivmoddi4+0x260>
 8001070:	ebb8 0e02 	subs.w	lr, r8, r2
 8001074:	eb69 0104 	sbc.w	r1, r9, r4
 8001078:	3801      	subs	r0, #1
 800107a:	e7df      	b.n	800103c <__udivmoddi4+0x260>
 800107c:	4608      	mov	r0, r1
 800107e:	e7d2      	b.n	8001026 <__udivmoddi4+0x24a>
 8001080:	4660      	mov	r0, ip
 8001082:	e78d      	b.n	8000fa0 <__udivmoddi4+0x1c4>
 8001084:	4681      	mov	r9, r0
 8001086:	e7b9      	b.n	8000ffc <__udivmoddi4+0x220>
 8001088:	4666      	mov	r6, ip
 800108a:	e775      	b.n	8000f78 <__udivmoddi4+0x19c>
 800108c:	4630      	mov	r0, r6
 800108e:	e74a      	b.n	8000f26 <__udivmoddi4+0x14a>
 8001090:	f1ac 0c02 	sub.w	ip, ip, #2
 8001094:	4439      	add	r1, r7
 8001096:	e713      	b.n	8000ec0 <__udivmoddi4+0xe4>
 8001098:	3802      	subs	r0, #2
 800109a:	443c      	add	r4, r7
 800109c:	e724      	b.n	8000ee8 <__udivmoddi4+0x10c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010aa:	f002 fa2b 	bl	8003504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ae:	f000 f963 	bl	8001378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b2:	f000 fb37 	bl	8001724 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b6:	f000 fb0d 	bl	80016d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010ba:	f000 fadf 	bl	800167c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010be:	f000 f9c3 	bl	8001448 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c2:	f000 fa19 	bl	80014f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010c6:	f000 fa63 	bl	8001590 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010ca:	489b      	ldr	r0, [pc, #620]	; (8001338 <main+0x294>)
 80010cc:	f003 fe74 	bl	8004db8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010d0:	213c      	movs	r1, #60	; 0x3c
 80010d2:	489a      	ldr	r0, [pc, #616]	; (800133c <main+0x298>)
 80010d4:	f004 f882 	bl	80051dc <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010d8:	4899      	ldr	r0, [pc, #612]	; (8001340 <main+0x29c>)
 80010da:	f003 fe13 	bl	8004d04 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010de:	2100      	movs	r1, #0
 80010e0:	4897      	ldr	r0, [pc, #604]	; (8001340 <main+0x29c>)
 80010e2:	f003 ff25 	bl	8004f30 <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);    /// Check 1 times and fix
 80010e6:	4897      	ldr	r0, [pc, #604]	; (8001344 <main+0x2a0>)
 80010e8:	f000 fc70 	bl	80019cc <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);    /// Check 1 times
 80010ec:	4995      	ldr	r1, [pc, #596]	; (8001344 <main+0x2a0>)
 80010ee:	4896      	ldr	r0, [pc, #600]	; (8001348 <main+0x2a4>)
 80010f0:	f000 fc82 	bl	80019f8 <TrajectoryGenerationStructureInit>

  VelocityControllerInit(&VelocityPIDController, &TrjStruc);  /// Check 1 times
 80010f4:	4994      	ldr	r1, [pc, #592]	; (8001348 <main+0x2a4>)
 80010f6:	4895      	ldr	r0, [pc, #596]	; (800134c <main+0x2a8>)
 80010f8:	f000 fcf6 	bl	8001ae8 <VelocityControllerInit>
  DisplacementControllerInit(&PositionPIDController, &TrjStruc);  /// Check 1 times
 80010fc:	4992      	ldr	r1, [pc, #584]	; (8001348 <main+0x2a4>)
 80010fe:	4894      	ldr	r0, [pc, #592]	; (8001350 <main+0x2ac>)
 8001100:	f000 fd26 	bl	8001b50 <DisplacementControllerInit>

  ///UART init
  UART2.huart = &huart2;
 8001104:	4b93      	ldr	r3, [pc, #588]	; (8001354 <main+0x2b0>)
 8001106:	4a94      	ldr	r2, [pc, #592]	; (8001358 <main+0x2b4>)
 8001108:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 800110a:	4b92      	ldr	r3, [pc, #584]	; (8001354 <main+0x2b0>)
 800110c:	22ff      	movs	r2, #255	; 0xff
 800110e:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8001110:	4b90      	ldr	r3, [pc, #576]	; (8001354 <main+0x2b0>)
 8001112:	22ff      	movs	r2, #255	; 0xff
 8001114:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 8001116:	488f      	ldr	r0, [pc, #572]	; (8001354 <main+0x2b0>)
 8001118:	f001 fa62 	bl	80025e0 <UARTInit>
  UARTResetStart(&UART2);
 800111c:	488d      	ldr	r0, [pc, #564]	; (8001354 <main+0x2b0>)
 800111e:	f001 fa87 	bl	8002630 <UARTResetStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 8001122:	488c      	ldr	r0, [pc, #560]	; (8001354 <main+0x2b0>)
 8001124:	f001 faa8 	bl	8002678 <UARTReadChar>
 8001128:	4603      	mov	r3, r0
 800112a:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 800112c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <main+0x9e>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	4986      	ldr	r1, [pc, #536]	; (8001354 <main+0x2b0>)
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fb83 	bl	8002848 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 8001142:	4b86      	ldr	r3, [pc, #536]	; (800135c <main+0x2b8>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b06      	cmp	r3, #6
 8001148:	d8eb      	bhi.n	8001122 <main+0x7e>
 800114a:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <main+0xac>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	08001123 	.word	0x08001123
 8001154:	08001123 	.word	0x08001123
 8001158:	0800116d 	.word	0x0800116d
 800115c:	08001173 	.word	0x08001173
 8001160:	0800117f 	.word	0x0800117f
 8001164:	08001123 	.word	0x08001123
 8001168:	080012a1 	.word	0x080012a1
	  		  break;
	  	  case STATE_Idle:
		  	  break;

	  	  case STATE_PrepareDATA:
	  		  TrajectoryGenerationPrepareDATA();
 800116c:	f000 fd68 	bl	8001c40 <TrajectoryGenerationPrepareDATA>
		  	  break;
 8001170:	e0e1      	b.n	8001336 <main+0x292>

	  	  case STATE_Calculation:
	  		  TrajectoryGenerationCalculation();
 8001172:	f000 fe5d 	bl	8001e30 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 8001176:	4b79      	ldr	r3, [pc, #484]	; (800135c <main+0x2b8>)
 8001178:	2204      	movs	r2, #4
 800117a:	701a      	strb	r2, [r3, #0]
	  		  break;
 800117c:	e0db      	b.n	8001336 <main+0x292>

	   	  case STATE_Link_Moving:
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 800117e:	f000 fc0b 	bl	8001998 <micros>
 8001182:	4b71      	ldr	r3, [pc, #452]	; (8001348 <main+0x2a4>)
 8001184:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001188:	1a84      	subs	r4, r0, r2
 800118a:	eb61 0503 	sbc.w	r5, r1, r3
 800118e:	4b6e      	ldr	r3, [pc, #440]	; (8001348 <main+0x2a4>)
 8001190:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001194:	429d      	cmp	r5, r3
 8001196:	bf08      	it	eq
 8001198:	4294      	cmpeq	r4, r2
 800119a:	f0c0 80c7 	bcc.w	800132c <main+0x288>
	   		  {
	   			  // GEN Trajectory
	   			  TrajectoryGenerationProcess();
 800119e:	f000 ff57 	bl	8002050 <TrajectoryGenerationProcess>
	   			  EncoderVelocityAndPosition_Update();
 80011a2:	f000 fb4d 	bl	8001840 <EncoderVelocityAndPosition_Update>
	   			  PIDController2in1();
 80011a6:	f001 f9a3 	bl	80024f0 <PIDController2in1>
	   			  Plant_input = PositionPIDController.ControllerOutput;
 80011aa:	4b69      	ldr	r3, [pc, #420]	; (8001350 <main+0x2ac>)
 80011ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b4:	ee17 2a90 	vmov	r2, s15
 80011b8:	4b69      	ldr	r3, [pc, #420]	; (8001360 <main+0x2bc>)
 80011ba:	601a      	str	r2, [r3, #0]
	   			  DCMotorStruc.PWMOut = abs(Plant_input);
 80011bc:	4b68      	ldr	r3, [pc, #416]	; (8001360 <main+0x2bc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	bfb8      	it	lt
 80011c4:	425b      	neglt	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b66      	ldr	r3, [pc, #408]	; (8001364 <main+0x2c0>)
 80011ca:	605a      	str	r2, [r3, #4]
	   			  if (DCMotorStruc.PWMOut > 10000)
 80011cc:	4b65      	ldr	r3, [pc, #404]	; (8001364 <main+0x2c0>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d903      	bls.n	80011e0 <main+0x13c>
	   			  {
	   				 DCMotorStruc.PWMOut = 10000;
 80011d8:	4b62      	ldr	r3, [pc, #392]	; (8001364 <main+0x2c0>)
 80011da:	f242 7210 	movw	r2, #10000	; 0x2710
 80011de:	605a      	str	r2, [r3, #4]
	   			  }
	   			  if (Plant_input >= 0)
	   			  {
	   				  DCMotorStruc.DIR = 1;
 80011e0:	4b60      	ldr	r3, [pc, #384]	; (8001364 <main+0x2c0>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
	   			  }
	   			  else if (Plant_input < 0)
	   			  {
	   				  DCMotorStruc.DIR = 0;
	   			  }
	   			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 80011e6:	4b5f      	ldr	r3, [pc, #380]	; (8001364 <main+0x2c0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	2180      	movs	r1, #128	; 0x80
 80011ee:	485e      	ldr	r0, [pc, #376]	; (8001368 <main+0x2c4>)
 80011f0:	f003 f8aa 	bl	8004348 <HAL_GPIO_WritePin>
	   			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut);
 80011f4:	4b52      	ldr	r3, [pc, #328]	; (8001340 <main+0x29c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a5a      	ldr	r2, [pc, #360]	; (8001364 <main+0x2c0>)
 80011fa:	6852      	ldr	r2, [r2, #4]
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
	   			  TrjStruc.Loop_Timestamp = micros();
 80011fe:	f000 fbcb 	bl	8001998 <micros>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4950      	ldr	r1, [pc, #320]	; (8001348 <main+0x2a4>)
 8001208:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 1) &&
 800120c:	4b50      	ldr	r3, [pc, #320]	; (8001350 <main+0x2ac>)
 800120e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001212:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <main+0x2a4>)
 8001214:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001218:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800121c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	d900      	bls.n	800122c <main+0x188>
	   				 Moving_Link_Task_Flag = 0;
	   			  }

	   		  }

	  		  break;
 800122a:	e07f      	b.n	800132c <main+0x288>
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 1) &&
 800122c:	4b48      	ldr	r3, [pc, #288]	; (8001350 <main+0x2ac>)
 800122e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001232:	4b45      	ldr	r3, [pc, #276]	; (8001348 <main+0x2a4>)
 8001234:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800123c:	ee77 7ae6 	vsub.f32	s15, s15, s13
	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 1) &&
 8001240:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	da00      	bge.n	800124c <main+0x1a8>
	  		  break;
 800124a:	e06f      	b.n	800132c <main+0x288>
						  (Moving_Link_Task_Flag == 1))
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <main+0x2c8>)
 800124e:	781b      	ldrb	r3, [r3, #0]
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 1) &&
 8001250:	2b01      	cmp	r3, #1
 8001252:	d16b      	bne.n	800132c <main+0x288>
	   				  if(MovingLinkMode == LMM_Set_Pos_Directly)
 8001254:	4b46      	ldr	r3, [pc, #280]	; (8001370 <main+0x2cc>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d10a      	bne.n	8001272 <main+0x1ce>
	   					Munmunbot_State = STATE_Idle;
 800125c:	4b3f      	ldr	r3, [pc, #252]	; (800135c <main+0x2b8>)
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001262:	4b37      	ldr	r3, [pc, #220]	; (8001340 <main+0x29c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2200      	movs	r2, #0
 8001268:	635a      	str	r2, [r3, #52]	; 0x34
	   					ACK2Return(&UART2);
 800126a:	483a      	ldr	r0, [pc, #232]	; (8001354 <main+0x2b0>)
 800126c:	f001 fad8 	bl	8002820 <ACK2Return>
 8001270:	e00e      	b.n	8001290 <main+0x1ec>
	   				  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 8001272:	4b3f      	ldr	r3, [pc, #252]	; (8001370 <main+0x2cc>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d003      	beq.n	8001282 <main+0x1de>
 800127a:	4b3d      	ldr	r3, [pc, #244]	; (8001370 <main+0x2cc>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b03      	cmp	r3, #3
 8001280:	d106      	bne.n	8001290 <main+0x1ec>
	   					Munmunbot_State = STATE_End_Effector_Working;
 8001282:	4b36      	ldr	r3, [pc, #216]	; (800135c <main+0x2b8>)
 8001284:	2205      	movs	r2, #5
 8001286:	701a      	strb	r2, [r3, #0]
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001288:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <main+0x29c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2200      	movs	r2, #0
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
	   				 TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8001290:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <main+0x2ac>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	4a2c      	ldr	r2, [pc, #176]	; (8001348 <main+0x2a4>)
 8001296:	65d3      	str	r3, [r2, #92]	; 0x5c
	   				 Moving_Link_Task_Flag = 0;
 8001298:	4b34      	ldr	r3, [pc, #208]	; (800136c <main+0x2c8>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
	  		  break;
 800129e:	e045      	b.n	800132c <main+0x288>

	  		  break;

	  	  case STATE_SetHome:

	  		  switch (SethomeMode)
 80012a0:	4b34      	ldr	r3, [pc, #208]	; (8001374 <main+0x2d0>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d02a      	beq.n	80012fe <main+0x25a>
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	f73f af3a 	bgt.w	8001122 <main+0x7e>
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <main+0x214>
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d00e      	beq.n	80012d4 <main+0x230>
 80012b6:	e734      	b.n	8001122 <main+0x7e>
	  		  {
				case SetHomeState_0:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	482a      	ldr	r0, [pc, #168]	; (8001368 <main+0x2c4>)
 80012be:	f003 f843 	bl	8004348 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <main+0x29c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012ca:	635a      	str	r2, [r3, #52]	; 0x34
					SethomeMode = SetHomeState_1;
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <main+0x2d0>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]

					break;
 80012d2:	e030      	b.n	8001336 <main+0x292>
				case SetHomeState_1:
					if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 1)
 80012d4:	2140      	movs	r1, #64	; 0x40
 80012d6:	4824      	ldr	r0, [pc, #144]	; (8001368 <main+0x2c4>)
 80012d8:	f003 f81e 	bl	8004318 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d126      	bne.n	8001330 <main+0x28c>
					{
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80012e2:	2201      	movs	r2, #1
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	4820      	ldr	r0, [pc, #128]	; (8001368 <main+0x2c4>)
 80012e8:	f003 f82e 	bl	8004348 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <main+0x29c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
						SethomeMode = SetHomeState_2;
 80012f6:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <main+0x2d0>)
 80012f8:	2202      	movs	r2, #2
 80012fa:	701a      	strb	r2, [r3, #0]
					}
					break;
 80012fc:	e018      	b.n	8001330 <main+0x28c>
				case SetHomeState_2:
					if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0)
 80012fe:	2140      	movs	r1, #64	; 0x40
 8001300:	4819      	ldr	r0, [pc, #100]	; (8001368 <main+0x2c4>)
 8001302:	f003 f809 	bl	8004318 <HAL_GPIO_ReadPin>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d113      	bne.n	8001334 <main+0x290>
					{
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <main+0x29c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
						Encoder_SetHome_Position();
 8001314:	f000 fb16 	bl	8001944 <Encoder_SetHome_Position>
						SethomeMode = SetHomeState_0;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <main+0x2d0>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
						Munmunbot_State = STATE_Idle;
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <main+0x2b8>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
						ACK1Return(&UART2);
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <main+0x2b0>)
 8001326:	f001 fa69 	bl	80027fc <ACK1Return>
					}
				    break;
 800132a:	e003      	b.n	8001334 <main+0x290>
	  		  break;
 800132c:	bf00      	nop
 800132e:	e6f8      	b.n	8001122 <main+0x7e>
					break;
 8001330:	bf00      	nop
 8001332:	e6f6      	b.n	8001122 <main+0x7e>
				    break;
 8001334:	bf00      	nop
  {
 8001336:	e6f4      	b.n	8001122 <main+0x7e>
 8001338:	20000548 	.word	0x20000548
 800133c:	20000500 	.word	0x20000500
 8001340:	20000458 	.word	0x20000458
 8001344:	200002b8 	.word	0x200002b8
 8001348:	20000248 	.word	0x20000248
 800134c:	20000218 	.word	0x20000218
 8001350:	200001e8 	.word	0x200001e8
 8001354:	200000b0 	.word	0x200000b0
 8001358:	20000590 	.word	0x20000590
 800135c:	200000d1 	.word	0x200000d1
 8001360:	200001dc 	.word	0x200001dc
 8001364:	200000c8 	.word	0x200000c8
 8001368:	40020800 	.word	0x40020800
 800136c:	200001e0 	.word	0x200001e0
 8001370:	200001d6 	.word	0x200001d6
 8001374:	200000d2 	.word	0x200000d2

08001378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b094      	sub	sp, #80	; 0x50
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 0320 	add.w	r3, r7, #32
 8001382:	2230      	movs	r2, #48	; 0x30
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f005 fd34 	bl	8006df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <SystemClock_Config+0xc8>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	4a26      	ldr	r2, [pc, #152]	; (8001440 <SystemClock_Config+0xc8>)
 80013a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <SystemClock_Config+0xc8>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <SystemClock_Config+0xcc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a20      	ldr	r2, [pc, #128]	; (8001444 <SystemClock_Config+0xcc>)
 80013c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <SystemClock_Config+0xcc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d4:	2302      	movs	r3, #2
 80013d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013dc:	2310      	movs	r3, #16
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e0:	2302      	movs	r3, #2
 80013e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013e8:	2308      	movs	r3, #8
 80013ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013ec:	2364      	movs	r3, #100	; 0x64
 80013ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013f4:	2304      	movs	r3, #4
 80013f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 ffbd 	bl	800437c <HAL_RCC_OscConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001408:	f001 fe12 	bl	8003030 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140c:	230f      	movs	r3, #15
 800140e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001410:	2302      	movs	r3, #2
 8001412:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2103      	movs	r1, #3
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fa1f 	bl	800486c <HAL_RCC_ClockConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001434:	f001 fdfc 	bl	8003030 <Error_Handler>
  }
}
 8001438:	bf00      	nop
 800143a:	3750      	adds	r7, #80	; 0x50
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40007000 	.word	0x40007000

08001448 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2224      	movs	r2, #36	; 0x24
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f005 fccc 	bl	8006df4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001464:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <MX_TIM1_Init+0xa8>)
 8001466:	4a23      	ldr	r2, [pc, #140]	; (80014f4 <MX_TIM1_Init+0xac>)
 8001468:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800146a:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <MX_TIM1_Init+0xa8>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_TIM1_Init+0xa8>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <MX_TIM1_Init+0xa8>)
 8001478:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800147c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_TIM1_Init+0xa8>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <MX_TIM1_Init+0xa8>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MX_TIM1_Init+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001490:	2303      	movs	r3, #3
 8001492:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001498:	2301      	movs	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014a8:	2301      	movs	r3, #1
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4619      	mov	r1, r3
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <MX_TIM1_Init+0xa8>)
 80014bc:	f003 fde8 	bl	8005090 <HAL_TIM_Encoder_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80014c6:	f001 fdb3 	bl	8003030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	4619      	mov	r1, r3
 80014d6:	4806      	ldr	r0, [pc, #24]	; (80014f0 <MX_TIM1_Init+0xa8>)
 80014d8:	f004 fc8c 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014e2:	f001 fda5 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	3730      	adds	r7, #48	; 0x30
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000500 	.word	0x20000500
 80014f4:	40010000 	.word	0x40010000

080014f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	463b      	mov	r3, r7
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_TIM2_Init+0x94>)
 8001516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_TIM2_Init+0x94>)
 800151e:	2263      	movs	r2, #99	; 0x63
 8001520:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <MX_TIM2_Init+0x94>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_TIM2_Init+0x94>)
 800152a:	f04f 32ff 	mov.w	r2, #4294967295
 800152e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_TIM2_Init+0x94>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_TIM2_Init+0x94>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800153c:	4813      	ldr	r0, [pc, #76]	; (800158c <MX_TIM2_Init+0x94>)
 800153e:	f003 fb91 	bl	8004c64 <HAL_TIM_Base_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001548:	f001 fd72 	bl	8003030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001550:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	4619      	mov	r1, r3
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <MX_TIM2_Init+0x94>)
 800155a:	f004 f893 	bl	8005684 <HAL_TIM_ConfigClockSource>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001564:	f001 fd64 	bl	8003030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_TIM2_Init+0x94>)
 8001576:	f004 fc3d 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001580:	f001 fd56 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000548 	.word	0x20000548

08001590 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08e      	sub	sp, #56	; 0x38
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a4:	f107 0320 	add.w	r3, r7, #32
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
 80015bc:	615a      	str	r2, [r3, #20]
 80015be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015c0:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <MX_TIM3_Init+0xe4>)
 80015c2:	4a2d      	ldr	r2, [pc, #180]	; (8001678 <MX_TIM3_Init+0xe8>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015c6:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <MX_TIM3_Init+0xe4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <MX_TIM3_Init+0xe4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80015d2:	4b28      	ldr	r3, [pc, #160]	; (8001674 <MX_TIM3_Init+0xe4>)
 80015d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80015d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b26      	ldr	r3, [pc, #152]	; (8001674 <MX_TIM3_Init+0xe4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b24      	ldr	r3, [pc, #144]	; (8001674 <MX_TIM3_Init+0xe4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015e6:	4823      	ldr	r0, [pc, #140]	; (8001674 <MX_TIM3_Init+0xe4>)
 80015e8:	f003 fb3c 	bl	8004c64 <HAL_TIM_Base_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015f2:	f001 fd1d 	bl	8003030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001600:	4619      	mov	r1, r3
 8001602:	481c      	ldr	r0, [pc, #112]	; (8001674 <MX_TIM3_Init+0xe4>)
 8001604:	f004 f83e 	bl	8005684 <HAL_TIM_ConfigClockSource>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800160e:	f001 fd0f 	bl	8003030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001612:	4818      	ldr	r0, [pc, #96]	; (8001674 <MX_TIM3_Init+0xe4>)
 8001614:	f003 fc32 	bl	8004e7c <HAL_TIM_PWM_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800161e:	f001 fd07 	bl	8003030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	4619      	mov	r1, r3
 8001630:	4810      	ldr	r0, [pc, #64]	; (8001674 <MX_TIM3_Init+0xe4>)
 8001632:	f004 fbdf 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800163c:	f001 fcf8 	bl	8003030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001640:	2360      	movs	r3, #96	; 0x60
 8001642:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	4619      	mov	r1, r3
 8001656:	4807      	ldr	r0, [pc, #28]	; (8001674 <MX_TIM3_Init+0xe4>)
 8001658:	f003 ff56 	bl	8005508 <HAL_TIM_PWM_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001662:	f001 fce5 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001666:	4803      	ldr	r0, [pc, #12]	; (8001674 <MX_TIM3_Init+0xe4>)
 8001668:	f001 fd94 	bl	8003194 <HAL_TIM_MspPostInit>

}
 800166c:	bf00      	nop
 800166e:	3738      	adds	r7, #56	; 0x38
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000458 	.word	0x20000458
 8001678:	40000400 	.word	0x40000400

0800167c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_USART2_UART_Init+0x50>)
 8001682:	4a13      	ldr	r2, [pc, #76]	; (80016d0 <MX_USART2_UART_Init+0x54>)
 8001684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_USART2_UART_Init+0x50>)
 8001688:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 800168c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_USART2_UART_Init+0x50>)
 8001690:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001694:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <MX_USART2_UART_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_USART2_UART_Init+0x50>)
 800169e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_USART2_UART_Init+0x50>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_USART2_UART_Init+0x50>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_USART2_UART_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_USART2_UART_Init+0x50>)
 80016b8:	f004 fc1e 	bl	8005ef8 <HAL_UART_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80016c2:	f001 fcb5 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000590 	.word	0x20000590
 80016d0:	40004400 	.word	0x40004400

080016d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_DMA_Init+0x4c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <MX_DMA_Init+0x4c>)
 80016e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <MX_DMA_Init+0x4c>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2010      	movs	r0, #16
 80016fc:	f002 f84f 	bl	800379e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001700:	2010      	movs	r0, #16
 8001702:	f002 f868 	bl	80037d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2011      	movs	r0, #17
 800170c:	f002 f847 	bl	800379e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001710:	2011      	movs	r0, #17
 8001712:	f002 f860 	bl	80037d6 <HAL_NVIC_EnableIRQ>

}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b3c      	ldr	r3, [pc, #240]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a3b      	ldr	r2, [pc, #236]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b39      	ldr	r3, [pc, #228]	; (8001830 <MX_GPIO_Init+0x10c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b35      	ldr	r3, [pc, #212]	; (8001830 <MX_GPIO_Init+0x10c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a34      	ldr	r2, [pc, #208]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b32      	ldr	r3, [pc, #200]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <MX_GPIO_Init+0x10c>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a26      	ldr	r2, [pc, #152]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <MX_GPIO_Init+0x10c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2120      	movs	r1, #32
 80017ae:	4821      	ldr	r0, [pc, #132]	; (8001834 <MX_GPIO_Init+0x110>)
 80017b0:	f002 fdca 	bl	8004348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	481f      	ldr	r0, [pc, #124]	; (8001838 <MX_GPIO_Init+0x114>)
 80017ba:	f002 fdc5 	bl	8004348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <MX_GPIO_Init+0x118>)
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4819      	ldr	r0, [pc, #100]	; (8001838 <MX_GPIO_Init+0x114>)
 80017d4:	f002 fc1c 	bl	8004010 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017d8:	2320      	movs	r3, #32
 80017da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4811      	ldr	r0, [pc, #68]	; (8001834 <MX_GPIO_Init+0x110>)
 80017f0:	f002 fc0e 	bl	8004010 <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitch_Signal_Pin */
  GPIO_InitStruct.Pin = LimitSwitch_Signal_Pin;
 80017f4:	2340      	movs	r3, #64	; 0x40
 80017f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitch_Signal_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	480c      	ldr	r0, [pc, #48]	; (8001838 <MX_GPIO_Init+0x114>)
 8001808:	f002 fc02 	bl	8004010 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_GPIO_Init+0x114>)
 8001824:	f002 fbf4 	bl	8004010 <HAL_GPIO_Init>

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020800 	.word	0x40020800
 800183c:	10210000 	.word	0x10210000

08001840 <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 4096
#define  MAX_ENCODER_PERIOD 8192

void EncoderVelocityAndPosition_Update()
{
 8001840:	b5b0      	push	{r4, r5, r7, lr}
 8001842:	ed2d 8b02 	vpush	{d8}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;
	static uint32_t Velocity_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 800184a:	4b35      	ldr	r3, [pc, #212]	; (8001920 <EncoderVelocityAndPosition_Update+0xe0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	613b      	str	r3, [r7, #16]

	uint64_t EncoderNowTimestamp = micros();
 8001852:	f000 f8a1 	bl	8001998 <micros>
 8001856:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <EncoderVelocityAndPosition_Update+0xe4>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001864:	1a84      	subs	r4, r0, r2
 8001866:	eb61 0503 	sbc.w	r5, r1, r3
 800186a:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 800186e:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <EncoderVelocityAndPosition_Update+0xe8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800187e:	db04      	blt.n	800188a <EncoderVelocityAndPosition_Update+0x4a>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e007      	b.n	800189a <EncoderVelocityAndPosition_Update+0x5a>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001890:	dc03      	bgt.n	800189a <EncoderVelocityAndPosition_Update+0x5a>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001898:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time

	EncoderLastPosition = EncoderNowPosition;
 800189a:	4a23      	ldr	r2, [pc, #140]	; (8001928 <EncoderVelocityAndPosition_Update+0xe8>)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80018a0:	4920      	ldr	r1, [pc, #128]	; (8001924 <EncoderVelocityAndPosition_Update+0xe4>)
 80018a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018a6:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <EncoderVelocityAndPosition_Update+0xec>)
 80018b6:	edc3 7a05 	vstr	s15, [r3, #20]

	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <EncoderVelocityAndPosition_Update+0xf0>)
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80018ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ce:	f7ff fa27 	bl	8000d20 <__aeabi_ul2f>
 80018d2:	ee07 0a10 	vmov	s14, r0
 80018d6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80018da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018de:	ee17 2a90 	vmov	r2, s15
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <EncoderVelocityAndPosition_Update+0xf4>)
 80018e4:	601a      	str	r2, [r3, #0]

	// LPF
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*249))/250.0;
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <EncoderVelocityAndPosition_Update+0xf4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <EncoderVelocityAndPosition_Update+0xf8>)
 80018f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80018f8:	eddf 6a10 	vldr	s13, [pc, #64]	; 800193c <EncoderVelocityAndPosition_Update+0xfc>
 80018fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001904:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001940 <EncoderVelocityAndPosition_Update+0x100>
 8001908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <EncoderVelocityAndPosition_Update+0xf8>)
 800190e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001912:	bf00      	nop
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	ecbd 8b02 	vpop	{d8}
 800191c:	bdb0      	pop	{r4, r5, r7, pc}
 800191e:	bf00      	nop
 8001920:	20000500 	.word	0x20000500
 8001924:	200002c8 	.word	0x200002c8
 8001928:	200002d0 	.word	0x200002d0
 800192c:	200001e8 	.word	0x200001e8
 8001930:	000f4240 	.word	0x000f4240
 8001934:	200002d4 	.word	0x200002d4
 8001938:	20000218 	.word	0x20000218
 800193c:	43790000 	.word	0x43790000
 8001940:	437a0000 	.word	0x437a0000

08001944 <Encoder_SetHome_Position>:

void Encoder_SetHome_Position()
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
	HTIM_ENCODER.Instance->CNT = 0;
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <Encoder_SetHome_Position+0x18>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2200      	movs	r2, #0
 800194e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000500 	.word	0x20000500

08001960 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001960:	b4b0      	push	{r4, r5, r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a09      	ldr	r2, [pc, #36]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d109      	bne.n	8001984 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f112 34ff 	adds.w	r4, r2, #4294967295
 800197a:	f143 0500 	adc.w	r5, r3, #0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001980:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bcb0      	pop	{r4, r5, r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000548 	.word	0x20000548
 8001994:	200000a8 	.word	0x200000a8

08001998 <micros>:

uint64_t micros()
{
 8001998:	b4b0      	push	{r4, r5, r7}
 800199a:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <micros+0x2c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	4618      	mov	r0, r3
 80019a4:	f04f 0100 	mov.w	r1, #0
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <micros+0x30>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	1884      	adds	r4, r0, r2
 80019b0:	eb41 0503 	adc.w	r5, r1, r3
 80019b4:	4622      	mov	r2, r4
 80019b6:	462b      	mov	r3, r5
}
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	bcb0      	pop	{r4, r5, r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000548 	.word	0x20000548
 80019c8:	200000a8 	.word	0x200000a8

080019cc <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019da:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	009a      	lsls	r2, r3, #2
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 255;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	22ff      	movs	r2, #255	; 0xff
 80019ea:	609a      	str	r2, [r3, #8]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.25*(CUSSvar->PPRxQEI))/3.141;  // (( 0.5 rad/s^2 ) * ppr) / (2*pi)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd28 	bl	800045c <__aeabi_ui2d>
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <TrajectoryGenerationStructureInit+0xe0>)
 8001a12:	f7fe fd9d 	bl	8000550 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	a32c      	add	r3, pc, #176	; (adr r3, 8001ad0 <TrajectoryGenerationStructureInit+0xd8>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe febe 	bl	80007a4 <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff f85e 	bl	8000af0 <__aeabi_d2f>
 8001a34:	4602      	mov	r2, r0
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	615a      	str	r2, [r3, #20]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd08 	bl	800045c <__aeabi_ui2d>
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b22      	ldr	r3, [pc, #136]	; (8001adc <TrajectoryGenerationStructureInit+0xe4>)
 8001a52:	f7fe fea7 	bl	80007a4 <__aeabi_ddiv>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff f847 	bl	8000af0 <__aeabi_d2f>
 8001a62:	4602      	mov	r2, r0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = 0;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	65da      	str	r2, [r3, #92]	; 0x5c
	TGSvar->Mode = 0;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	669a      	str	r2, [r3, #104]	; 0x68
	TGSvar->Submode = 0;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	66da      	str	r2, [r3, #108]	; 0x6c
	TGSvar->Loop_Freq = 10000; /// ??? I think it is too high freq to control !!!
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a82:	649a      	str	r2, [r3, #72]	; 0x48
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);  /// 1000000 micro sec = 1 sec !!!
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a88:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <TrajectoryGenerationStructureInit+0xe8>)
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	edd3 6a04 	vldr	s13, [r3, #16]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	ed93 7a05 	vldr	s14, [r3, #20]
 8001aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	9ba5e354 	.word	0x9ba5e354
 8001ad4:	400920c4 	.word	0x400920c4
 8001ad8:	3fd00000 	.word	0x3fd00000
 8001adc:	404e0000 	.word	0x404e0000
 8001ae0:	000f4240 	.word	0x000f4240
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <VelocityControllerInit>:

void VelocityControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <VelocityControllerInit+0x58>)
 8001af6:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 0.2;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <VelocityControllerInit+0x5c>)
 8001afc:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0.1;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <VelocityControllerInit+0x60>)
 8001b02:	609a      	str	r2, [r3, #8]
	VCvar->Integral_Value = 0;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7fe fce5 	bl	80004e4 <__aeabi_ul2d>
 8001b1a:	a307      	add	r3, pc, #28	; (adr r3, 8001b38 <VelocityControllerInit+0x50>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe fe40 	bl	80007a4 <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	412e8480 	.word	0x412e8480
 8001b40:	40a00000 	.word	0x40a00000
 8001b44:	3e4ccccd 	.word	0x3e4ccccd
 8001b48:	3dcccccd 	.word	0x3dcccccd
 8001b4c:	00000000 	.word	0x00000000

08001b50 <DisplacementControllerInit>:

void DisplacementControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <DisplacementControllerInit+0x58>)
 8001b5e:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 0.2;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <DisplacementControllerInit+0x5c>)
 8001b64:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
	VCvar->Integral_Value = 0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7fe fcb0 	bl	80004e4 <__aeabi_ul2d>
 8001b84:	a306      	add	r3, pc, #24	; (adr r3, 8001ba0 <DisplacementControllerInit+0x50>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f7fe fe0b 	bl	80007a4 <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	412e8480 	.word	0x412e8480
 8001ba8:	40a00000 	.word	0x40a00000
 8001bac:	3e4ccccd 	.word	0x3e4ccccd

08001bb0 <TrajectoryGenerationVelocityMaxSetting>:

void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp)*10.0)/(60.0*255.0);  ///Convert from RPMp (255) to pulse per sec
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	6892      	ldr	r2, [r2, #8]
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fc48 	bl	800045c <__aeabi_ui2d>
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <TrajectoryGenerationVelocityMaxSetting+0x88>)
 8001bd2:	f7fe fcbd 	bl	8000550 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	a314      	add	r3, pc, #80	; (adr r3, 8001c30 <TrajectoryGenerationVelocityMaxSetting+0x80>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7fe fdde 	bl	80007a4 <__aeabi_ddiv>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe ff7e 	bl	8000af0 <__aeabi_d2f>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	611a      	str	r2, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	00000000 	.word	0x00000000
 8001c34:	40cde200 	.word	0x40cde200
 8001c38:	40240000 	.word	0x40240000
 8001c3c:	00000000 	.word	0x00000000

08001c40 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
	if (MovingLinkMode == LMM_Set_Pos_Directly)
 8001c44:	4b6e      	ldr	r3, [pc, #440]	; (8001e00 <TrajectoryGenerationPrepareDATA+0x1c0>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d142      	bne.n	8001cd2 <TrajectoryGenerationPrepareDATA+0x92>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(65535.0));  ///pos scaled(65535) -> pulse
 8001c4c:	4b6d      	ldr	r3, [pc, #436]	; (8001e04 <TrajectoryGenerationPrepareDATA+0x1c4>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b6d      	ldr	r3, [pc, #436]	; (8001e08 <TrajectoryGenerationPrepareDATA+0x1c8>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	fb03 f302 	mul.w	r3, r3, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fbfe 	bl	800045c <__aeabi_ui2d>
 8001c60:	a365      	add	r3, pc, #404	; (adr r3, 8001df8 <TrajectoryGenerationPrepareDATA+0x1b8>)
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	f7fe fd9d 	bl	80007a4 <__aeabi_ddiv>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	f7fe ff3d 	bl	8000af0 <__aeabi_d2f>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4a64      	ldr	r2, [pc, #400]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001c7a:	6593      	str	r3, [r2, #88]	; 0x58
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI) //Saturation or Overflow -> Shouldn't have this case
 8001c7c:	4b63      	ldr	r3, [pc, #396]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001c7e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001c82:	4b61      	ldr	r3, [pc, #388]	; (8001e08 <TrajectoryGenerationPrepareDATA+0x1c8>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c96:	db0d      	blt.n	8001cb4 <TrajectoryGenerationPrepareDATA+0x74>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001c98:	4b5c      	ldr	r3, [pc, #368]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001c9a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <TrajectoryGenerationPrepareDATA+0x1c8>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cae:	4b57      	ldr	r3, [pc, #348]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001cb0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		  }
		  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta; //// No implement
 8001cb4:	4b55      	ldr	r3, [pc, #340]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001cb6:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001cba:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001cbc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc4:	4b51      	ldr	r3, [pc, #324]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001cc6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		  Munmunbot_State = STATE_Calculation;
 8001cca:	4b51      	ldr	r3, [pc, #324]	; (8001e10 <TrajectoryGenerationPrepareDATA+0x1d0>)
 8001ccc:	2203      	movs	r2, #3
 8001cce:	701a      	strb	r2, [r3, #0]
	  else
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
	  }
}
 8001cd0:	e08d      	b.n	8001dee <TrajectoryGenerationPrepareDATA+0x1ae>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 8001cd2:	4b4b      	ldr	r3, [pc, #300]	; (8001e00 <TrajectoryGenerationPrepareDATA+0x1c0>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d003      	beq.n	8001ce2 <TrajectoryGenerationPrepareDATA+0xa2>
 8001cda:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <TrajectoryGenerationPrepareDATA+0x1c0>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d17e      	bne.n	8001de0 <TrajectoryGenerationPrepareDATA+0x1a0>
		  if (NumberOfStationToGo == 0)
 8001ce2:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <TrajectoryGenerationPrepareDATA+0x1d4>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10f      	bne.n	8001d0a <TrajectoryGenerationPrepareDATA+0xca>
				Munmunbot_State = STATE_Idle;
 8001cea:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <TrajectoryGenerationPrepareDATA+0x1d0>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 8001cf0:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <TrajectoryGenerationPrepareDATA+0x1d8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 8001cf6:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <TrajectoryGenerationPrepareDATA+0x1d4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8001cfc:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <TrajectoryGenerationPrepareDATA+0x1c0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 8001d02:	4846      	ldr	r0, [pc, #280]	; (8001e1c <TrajectoryGenerationPrepareDATA+0x1dc>)
 8001d04:	f000 fd8c 	bl	8002820 <ACK2Return>
		  if (NumberOfStationToGo == 0)
 8001d08:	e071      	b.n	8001dee <TrajectoryGenerationPrepareDATA+0x1ae>
				Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 8001d0a:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <TrajectoryGenerationPrepareDATA+0x1d8>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <TrajectoryGenerationPrepareDATA+0x1e0>)
 8001d12:	5c9a      	ldrb	r2, [r3, r2]
 8001d14:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <TrajectoryGenerationPrepareDATA+0x1e4>)
 8001d16:	701a      	strb	r2, [r3, #0]
				if (Current_Station > 10)
 8001d18:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <TrajectoryGenerationPrepareDATA+0x1e4>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b0a      	cmp	r3, #10
 8001d1e:	d90c      	bls.n	8001d3a <TrajectoryGenerationPrepareDATA+0xfa>
					NumberOfStationPTR += 1;
 8001d20:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <TrajectoryGenerationPrepareDATA+0x1d8>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <TrajectoryGenerationPrepareDATA+0x1d8>)
 8001d2a:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8001d2c:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <TrajectoryGenerationPrepareDATA+0x1d4>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <TrajectoryGenerationPrepareDATA+0x1d4>)
 8001d36:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001d38:	e059      	b.n	8001dee <TrajectoryGenerationPrepareDATA+0x1ae>
					TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0));  // (StationPos == Degree) -> Position(Pulse)
 8001d3a:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <TrajectoryGenerationPrepareDATA+0x1e4>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	4a39      	ldr	r2, [pc, #228]	; (8001e28 <TrajectoryGenerationPrepareDATA+0x1e8>)
 8001d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <TrajectoryGenerationPrepareDATA+0x1c8>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	fb03 f302 	mul.w	r3, r3, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fb83 	bl	800045c <__aeabi_ui2d>
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <TrajectoryGenerationPrepareDATA+0x1ec>)
 8001d5c:	f7fe fd22 	bl	80007a4 <__aeabi_ddiv>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe fec2 	bl	8000af0 <__aeabi_d2f>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4a27      	ldr	r2, [pc, #156]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001d70:	6593      	str	r3, [r2, #88]	; 0x58
					if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001d74:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <TrajectoryGenerationPrepareDATA+0x1c8>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8c:	db0d      	blt.n	8001daa <TrajectoryGenerationPrepareDATA+0x16a>
						TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001d90:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001d94:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <TrajectoryGenerationPrepareDATA+0x1c8>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	ee07 3a90 	vmov	s15, r3
 8001d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001da6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta; //// No implement
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001dac:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001db2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001dbc:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
					Munmunbot_State = STATE_Calculation;
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <TrajectoryGenerationPrepareDATA+0x1d0>)
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <TrajectoryGenerationPrepareDATA+0x1d8>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <TrajectoryGenerationPrepareDATA+0x1d8>)
 8001dd0:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <TrajectoryGenerationPrepareDATA+0x1d4>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <TrajectoryGenerationPrepareDATA+0x1d4>)
 8001ddc:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001dde:	e006      	b.n	8001dee <TrajectoryGenerationPrepareDATA+0x1ae>
		MovingLinkMode = LMM_Not_Set;
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <TrajectoryGenerationPrepareDATA+0x1c0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <TrajectoryGenerationPrepareDATA+0x1d0>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
}
 8001dec:	e7ff      	b.n	8001dee <TrajectoryGenerationPrepareDATA+0x1ae>
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	f3af 8000 	nop.w
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	40efffe0 	.word	0x40efffe0
 8001e00:	200001d6 	.word	0x200001d6
 8001e04:	200001d4 	.word	0x200001d4
 8001e08:	200002b8 	.word	0x200002b8
 8001e0c:	20000248 	.word	0x20000248
 8001e10:	200000d1 	.word	0x200000d1
 8001e14:	200001d8 	.word	0x200001d8
 8001e18:	200001d9 	.word	0x200001d9
 8001e1c:	200000b0 	.word	0x200000b0
 8001e20:	200000d4 	.word	0x200000d4
 8001e24:	200001d7 	.word	0x200001d7
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	40768000 	.word	0x40768000

08001e30 <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 8001e34:	4b84      	ldr	r3, [pc, #528]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e36:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001e3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	d518      	bpl.n	8001e76 <TrajectoryGenerationCalculation+0x46>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 8001e44:	4b80      	ldr	r3, [pc, #512]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e46:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e4a:	eef1 7a67 	vneg.f32	s15, s15
 8001e4e:	4b7e      	ldr	r3, [pc, #504]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e50:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 8001e54:	4b7c      	ldr	r3, [pc, #496]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e56:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e5a:	eef1 7a67 	vneg.f32	s15, s15
 8001e5e:	4b7a      	ldr	r3, [pc, #488]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e60:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 8001e64:	4b78      	ldr	r3, [pc, #480]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e66:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001e6a:	eef1 7a67 	vneg.f32	s15, s15
 8001e6e:	4b76      	ldr	r3, [pc, #472]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e70:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8001e74:	e013      	b.n	8001e9e <TrajectoryGenerationCalculation+0x6e>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 8001e76:	4b74      	ldr	r3, [pc, #464]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e78:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001e7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e84:	dd0b      	ble.n	8001e9e <TrajectoryGenerationCalculation+0x6e>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 8001e86:	4b70      	ldr	r3, [pc, #448]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	4a6f      	ldr	r2, [pc, #444]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e8c:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 8001e8e:	4b6e      	ldr	r3, [pc, #440]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	4a6d      	ldr	r2, [pc, #436]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e94:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 8001e96:	4b6c      	ldr	r3, [pc, #432]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9a:	4a6b      	ldr	r2, [pc, #428]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001e9c:	6653      	str	r3, [r2, #100]	; 0x64
	  }
	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 8001e9e:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001ea0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001ea4:	4b68      	ldr	r3, [pc, #416]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001ea6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb2:	d554      	bpl.n	8001f5e <TrajectoryGenerationCalculation+0x12e>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 8001eb4:	4b64      	ldr	r3, [pc, #400]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001eb6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001ebc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ec0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ec4:	ee16 0a90 	vmov	r0, s13
 8001ec8:	f7fe faea 	bl	80004a0 <__aeabi_f2d>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	ec43 2b10 	vmov	d0, r2, r3
 8001ed4:	f005 f81e 	bl	8006f14 <sqrt>
 8001ed8:	ec53 2b10 	vmov	r2, r3, d0
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7fe fe06 	bl	8000af0 <__aeabi_d2f>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4a58      	ldr	r2, [pc, #352]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001ee8:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8001eea:	4b57      	ldr	r3, [pc, #348]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	4a56      	ldr	r2, [pc, #344]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001ef0:	6253      	str	r3, [r2, #36]	; 0x24
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 8001ef2:	4b55      	ldr	r3, [pc, #340]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001ef4:	ed93 7a07 	vldr	s14, [r3, #28]
 8001ef8:	4b53      	ldr	r3, [pc, #332]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001efa:	edd3 6a01 	vldr	s13, [r3, #4]
 8001efe:	4b52      	ldr	r3, [pc, #328]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f00:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0c:	ee17 0a90 	vmov	r0, s15
 8001f10:	f7fe fac6 	bl	80004a0 <__aeabi_f2d>
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f1c:	f7fe fc42 	bl	80007a4 <__aeabi_ddiv>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4614      	mov	r4, r2
 8001f26:	461d      	mov	r5, r3
 8001f28:	4b47      	ldr	r3, [pc, #284]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fab7 	bl	80004a0 <__aeabi_f2d>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4620      	mov	r0, r4
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f7fe f953 	bl	80001e4 <__adddf3>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f7fe fdd3 	bl	8000af0 <__aeabi_d2f>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4a3e      	ldr	r2, [pc, #248]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f4e:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Mode = 0;
 8001f50:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	669a      	str	r2, [r3, #104]	; 0x68
		 TrjStruc.Submode = 0;
 8001f56:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	66da      	str	r2, [r3, #108]	; 0x6c
 8001f5c:	e063      	b.n	8002026 <TrajectoryGenerationCalculation+0x1f6>
	  }

	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 8001f5e:	4b3a      	ldr	r3, [pc, #232]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f60:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001f64:	4b38      	ldr	r3, [pc, #224]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f66:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f72:	db58      	blt.n	8002026 <TrajectoryGenerationCalculation+0x1f6>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 8001f74:	4b34      	ldr	r3, [pc, #208]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f76:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001f7a:	4b33      	ldr	r3, [pc, #204]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f80:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f84:	4b30      	ldr	r3, [pc, #192]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f86:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f90:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8001f94:	4b2c      	ldr	r3, [pc, #176]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	4a2b      	ldr	r2, [pc, #172]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f9a:	6253      	str	r3, [r2, #36]	; 0x24
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001f9e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001fa2:	4b29      	ldr	r3, [pc, #164]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001fa4:	edd3 6a00 	vldr	s13, [r3]
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb6:	ee17 0a90 	vmov	r0, s15
 8001fba:	f7fe fa71 	bl	80004a0 <__aeabi_f2d>
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fc6:	f7fe fbed 	bl	80007a4 <__aeabi_ddiv>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4614      	mov	r4, r2
 8001fd0:	461d      	mov	r5, r3
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fa62 	bl	80004a0 <__aeabi_f2d>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	4629      	mov	r1, r5
 8001fe4:	f7fe f8fe 	bl	80001e4 <__adddf3>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f7fe fd7e 	bl	8000af0 <__aeabi_d2f>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4a14      	ldr	r2, [pc, #80]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001ff8:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8001ffc:	ed93 7a06 	vldr	s14, [r3, #24]
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8002002:	edd3 7a02 	vldr	s15, [r3, #8]
 8002006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 800200c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8002016:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		  TrjStruc.Mode = 1;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 800201c:	2201      	movs	r2, #1
 800201e:	669a      	str	r2, [r3, #104]	; 0x68
		  TrjStruc.Submode = 0;
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8002022:	2200      	movs	r2, #0
 8002024:	66da      	str	r2, [r3, #108]	; 0x6c
	  }
	 TrjStruc.Equation_Timestamp = micros();
 8002026:	f7ff fcb7 	bl	8001998 <micros>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4906      	ldr	r1, [pc, #24]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 8002030:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 TrjStruc.Loop_Timestamp = micros();
 8002034:	f7ff fcb0 	bl	8001998 <micros>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4902      	ldr	r1, [pc, #8]	; (8002048 <TrajectoryGenerationCalculation+0x218>)
 800203e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8002042:	bf00      	nop
 8002044:	bdb0      	pop	{r4, r5, r7, pc}
 8002046:	bf00      	nop
 8002048:	20000248 	.word	0x20000248
 800204c:	00000000 	.word	0x00000000

08002050 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 8002050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 8002058:	f7ff fc9e 	bl	8001998 <micros>
 800205c:	4bb2      	ldr	r3, [pc, #712]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 800205e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002062:	1a84      	subs	r4, r0, r2
 8002064:	eb61 0503 	sbc.w	r5, r1, r3
 8002068:	4620      	mov	r0, r4
 800206a:	4629      	mov	r1, r5
 800206c:	f7fe fa3a 	bl	80004e4 <__aeabi_ul2d>
 8002070:	a3ab      	add	r3, pc, #684	; (adr r3, 8002320 <TrajectoryGenerationProcess+0x2d0>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	f7fe fb95 	bl	80007a4 <__aeabi_ddiv>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	49aa      	ldr	r1, [pc, #680]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002080:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	 switch (TrjStruc.Mode)
 8002084:	4ba8      	ldr	r3, [pc, #672]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002088:	2b02      	cmp	r3, #2
 800208a:	f000 8218 	beq.w	80024be <TrajectoryGenerationProcess+0x46e>
 800208e:	2b02      	cmp	r3, #2
 8002090:	f200 8220 	bhi.w	80024d4 <TrajectoryGenerationProcess+0x484>
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <TrajectoryGenerationProcess+0x50>
 8002098:	2b01      	cmp	r3, #1
 800209a:	f000 80e0 	beq.w	800225e <TrajectoryGenerationProcess+0x20e>
		  case 2:
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  break;
		  }
}
 800209e:	e219      	b.n	80024d4 <TrajectoryGenerationProcess+0x484>
			  if (TrjStruc.Submode == 0)
 80020a0:	4ba1      	ldr	r3, [pc, #644]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 80020a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d15b      	bne.n	8002160 <TrajectoryGenerationProcess+0x110>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80020a8:	4b9f      	ldr	r3, [pc, #636]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe f9f7 	bl	80004a0 <__aeabi_f2d>
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4b9d      	ldr	r3, [pc, #628]	; (800232c <TrajectoryGenerationProcess+0x2dc>)
 80020b8:	f7fe fa4a 	bl	8000550 <__aeabi_dmul>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4614      	mov	r4, r2
 80020c2:	461d      	mov	r5, r3
 80020c4:	4b98      	ldr	r3, [pc, #608]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 80020c6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80020ca:	4b97      	ldr	r3, [pc, #604]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 80020cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80020d0:	f7fe fa3e 	bl	8000550 <__aeabi_dmul>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4620      	mov	r0, r4
 80020da:	4629      	mov	r1, r5
 80020dc:	f7fe fa38 	bl	8000550 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4614      	mov	r4, r2
 80020e6:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 80020e8:	4b8f      	ldr	r3, [pc, #572]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe f9d7 	bl	80004a0 <__aeabi_f2d>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4620      	mov	r0, r4
 80020f8:	4629      	mov	r1, r5
 80020fa:	f7fe f873 	bl	80001e4 <__adddf3>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fcf3 	bl	8000af0 <__aeabi_d2f>
 800210a:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 800210c:	4a86      	ldr	r2, [pc, #536]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 800210e:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 8002110:	f7ff fc42 	bl	8001998 <micros>
 8002114:	4b84      	ldr	r3, [pc, #528]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002116:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800211a:	1a84      	subs	r4, r0, r2
 800211c:	613c      	str	r4, [r7, #16]
 800211e:	eb61 0303 	sbc.w	r3, r1, r3
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002128:	f7fe fdfa 	bl	8000d20 <__aeabi_ul2f>
 800212c:	ee06 0a90 	vmov	s13, r0
 8002130:	4b7d      	ldr	r3, [pc, #500]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002132:	edd3 7a01 	vldr	s15, [r3, #4]
 8002136:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002330 <TrajectoryGenerationProcess+0x2e0>
 800213a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002146:	da00      	bge.n	800214a <TrajectoryGenerationProcess+0xfa>
			  break;
 8002148:	e1c1      	b.n	80024ce <TrajectoryGenerationProcess+0x47e>
					  TrjStruc.Equation_Timestamp = micros();
 800214a:	f7ff fc25 	bl	8001998 <micros>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4975      	ldr	r1, [pc, #468]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002154:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 1;
 8002158:	4b73      	ldr	r3, [pc, #460]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 800215a:	2201      	movs	r2, #1
 800215c:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 800215e:	e1b6      	b.n	80024ce <TrajectoryGenerationProcess+0x47e>
			  else if (TrjStruc.Submode == 1)
 8002160:	4b71      	ldr	r3, [pc, #452]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002164:	2b01      	cmp	r3, #1
 8002166:	f040 81b2 	bne.w	80024ce <TrajectoryGenerationProcess+0x47e>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 800216a:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f996 	bl	80004a0 <__aeabi_f2d>
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	4b6e      	ldr	r3, [pc, #440]	; (8002334 <TrajectoryGenerationProcess+0x2e4>)
 800217a:	f7fe f9e9 	bl	8000550 <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4614      	mov	r4, r2
 8002184:	461d      	mov	r5, r3
 8002186:	4b68      	ldr	r3, [pc, #416]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002188:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800218c:	4b66      	ldr	r3, [pc, #408]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 800218e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002192:	f7fe f9dd 	bl	8000550 <__aeabi_dmul>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4620      	mov	r0, r4
 800219c:	4629      	mov	r1, r5
 800219e:	f7fe f9d7 	bl	8000550 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4614      	mov	r4, r2
 80021a8:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 80021aa:	4b5f      	ldr	r3, [pc, #380]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 80021ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80021b0:	4b5d      	ldr	r3, [pc, #372]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 80021b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80021b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ba:	ee17 0a90 	vmov	r0, s15
 80021be:	f7fe f96f 	bl	80004a0 <__aeabi_f2d>
 80021c2:	4b59      	ldr	r3, [pc, #356]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 80021c4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80021c8:	f7fe f9c2 	bl	8000550 <__aeabi_dmul>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4620      	mov	r0, r4
 80021d2:	4629      	mov	r1, r5
 80021d4:	f7fe f806 	bl	80001e4 <__adddf3>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4614      	mov	r4, r2
 80021de:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 80021e0:	4b51      	ldr	r3, [pc, #324]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe f95b 	bl	80004a0 <__aeabi_f2d>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4620      	mov	r0, r4
 80021f0:	4629      	mov	r1, r5
 80021f2:	f7fd fff7 	bl	80001e4 <__adddf3>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7fe fc77 	bl	8000af0 <__aeabi_d2f>
 8002202:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002204:	4a48      	ldr	r2, [pc, #288]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002206:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 8002208:	f7ff fbc6 	bl	8001998 <micros>
 800220c:	4b46      	ldr	r3, [pc, #280]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 800220e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002212:	1a84      	subs	r4, r0, r2
 8002214:	60bc      	str	r4, [r7, #8]
 8002216:	eb61 0303 	sbc.w	r3, r1, r3
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002220:	f7fe fd7e 	bl	8000d20 <__aeabi_ul2f>
 8002224:	ee06 0a90 	vmov	s13, r0
 8002228:	4b3f      	ldr	r3, [pc, #252]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 800222a:	edd3 7a01 	vldr	s15, [r3, #4]
 800222e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002330 <TrajectoryGenerationProcess+0x2e0>
 8002232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002236:	eef4 6ae7 	vcmpe.f32	s13, s15
 800223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223e:	da00      	bge.n	8002242 <TrajectoryGenerationProcess+0x1f2>
			  break;
 8002240:	e145      	b.n	80024ce <TrajectoryGenerationProcess+0x47e>
					  TrjStruc.Equation_Timestamp = micros();
 8002242:	f7ff fba9 	bl	8001998 <micros>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4937      	ldr	r1, [pc, #220]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 800224c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 0;
 8002250:	4b35      	ldr	r3, [pc, #212]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002252:	2200      	movs	r2, #0
 8002254:	66da      	str	r2, [r3, #108]	; 0x6c
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002256:	4b34      	ldr	r3, [pc, #208]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002258:	2202      	movs	r2, #2
 800225a:	669a      	str	r2, [r3, #104]	; 0x68
			  break;
 800225c:	e137      	b.n	80024ce <TrajectoryGenerationProcess+0x47e>
			  if (TrjStruc.Submode == 0)
 800225e:	4b32      	ldr	r3, [pc, #200]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d168      	bne.n	8002338 <TrajectoryGenerationProcess+0x2e8>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002266:	4b30      	ldr	r3, [pc, #192]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f918 	bl	80004a0 <__aeabi_f2d>
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <TrajectoryGenerationProcess+0x2dc>)
 8002276:	f7fe f96b 	bl	8000550 <__aeabi_dmul>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4614      	mov	r4, r2
 8002280:	461d      	mov	r5, r3
 8002282:	4b29      	ldr	r3, [pc, #164]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002284:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 800228a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800228e:	f7fe f95f 	bl	8000550 <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4620      	mov	r0, r4
 8002298:	4629      	mov	r1, r5
 800229a:	f7fe f959 	bl	8000550 <__aeabi_dmul>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4614      	mov	r4, r2
 80022a4:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f8f8 	bl	80004a0 <__aeabi_f2d>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4620      	mov	r0, r4
 80022b6:	4629      	mov	r1, r5
 80022b8:	f7fd ff94 	bl	80001e4 <__adddf3>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7fe fc14 	bl	8000af0 <__aeabi_d2f>
 80022c8:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 80022cc:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 80022ce:	f7ff fb63 	bl	8001998 <micros>
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 80022d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80022d8:	1a84      	subs	r4, r0, r2
 80022da:	603c      	str	r4, [r7, #0]
 80022dc:	eb61 0303 	sbc.w	r3, r1, r3
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022e6:	f7fe fd1b 	bl	8000d20 <__aeabi_ul2f>
 80022ea:	ee06 0a90 	vmov	s13, r0
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002330 <TrajectoryGenerationProcess+0x2e0>
 80022f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022fc:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002304:	da00      	bge.n	8002308 <TrajectoryGenerationProcess+0x2b8>
			  break;
 8002306:	e0e4      	b.n	80024d2 <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 8002308:	f7ff fb46 	bl	8001998 <micros>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4905      	ldr	r1, [pc, #20]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002312:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 1;
 8002316:	4b04      	ldr	r3, [pc, #16]	; (8002328 <TrajectoryGenerationProcess+0x2d8>)
 8002318:	2201      	movs	r2, #1
 800231a:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 800231c:	e0d9      	b.n	80024d2 <TrajectoryGenerationProcess+0x482>
 800231e:	bf00      	nop
 8002320:	00000000 	.word	0x00000000
 8002324:	412e8480 	.word	0x412e8480
 8002328:	20000248 	.word	0x20000248
 800232c:	3fe00000 	.word	0x3fe00000
 8002330:	49742400 	.word	0x49742400
 8002334:	bfe00000 	.word	0xbfe00000
			  else if (TrjStruc.Submode == 1)
 8002338:	4b69      	ldr	r3, [pc, #420]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 800233a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800233c:	2b01      	cmp	r3, #1
 800233e:	d148      	bne.n	80023d2 <TrajectoryGenerationProcess+0x382>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002340:	4b67      	ldr	r3, [pc, #412]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f8ab 	bl	80004a0 <__aeabi_f2d>
 800234a:	4b65      	ldr	r3, [pc, #404]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 800234c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002350:	f7fe f8fe 	bl	8000550 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4614      	mov	r4, r2
 800235a:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 800235c:	4b60      	ldr	r3, [pc, #384]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe f89d 	bl	80004a0 <__aeabi_f2d>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4620      	mov	r0, r4
 800236c:	4629      	mov	r1, r5
 800236e:	f7fd ff39 	bl	80001e4 <__adddf3>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	f7fe fbb9 	bl	8000af0 <__aeabi_d2f>
 800237e:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002380:	4a57      	ldr	r2, [pc, #348]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 8002382:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 8002384:	f7ff fb08 	bl	8001998 <micros>
 8002388:	4b55      	ldr	r3, [pc, #340]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 800238a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800238e:	ebb0 0a02 	subs.w	sl, r0, r2
 8002392:	eb61 0b03 	sbc.w	fp, r1, r3
 8002396:	4650      	mov	r0, sl
 8002398:	4659      	mov	r1, fp
 800239a:	f7fe fcc1 	bl	8000d20 <__aeabi_ul2f>
 800239e:	ee06 0a90 	vmov	s13, r0
 80023a2:	4b4f      	ldr	r3, [pc, #316]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 80023a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80023a8:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80024e4 <TrajectoryGenerationProcess+0x494>
 80023ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80023b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b8:	da00      	bge.n	80023bc <TrajectoryGenerationProcess+0x36c>
			  break;
 80023ba:	e08a      	b.n	80024d2 <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 80023bc:	f7ff faec 	bl	8001998 <micros>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4946      	ldr	r1, [pc, #280]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 80023c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 2;
 80023ca:	4b45      	ldr	r3, [pc, #276]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 80023cc:	2202      	movs	r2, #2
 80023ce:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 80023d0:	e07f      	b.n	80024d2 <TrajectoryGenerationProcess+0x482>
			  else if (TrjStruc.Submode == 2)
 80023d2:	4b43      	ldr	r3, [pc, #268]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 80023d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d17b      	bne.n	80024d2 <TrajectoryGenerationProcess+0x482>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f85e 	bl	80004a0 <__aeabi_f2d>
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <TrajectoryGenerationProcess+0x498>)
 80023ea:	f7fe f8b1 	bl	8000550 <__aeabi_dmul>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4614      	mov	r4, r2
 80023f4:	461d      	mov	r5, r3
 80023f6:	4b3a      	ldr	r3, [pc, #232]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 80023f8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80023fc:	4b38      	ldr	r3, [pc, #224]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 80023fe:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002402:	f7fe f8a5 	bl	8000550 <__aeabi_dmul>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4620      	mov	r0, r4
 800240c:	4629      	mov	r1, r5
 800240e:	f7fe f89f 	bl	8000550 <__aeabi_dmul>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4614      	mov	r4, r2
 8002418:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 800241a:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f83e 	bl	80004a0 <__aeabi_f2d>
 8002424:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 8002426:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800242a:	f7fe f891 	bl	8000550 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4620      	mov	r0, r4
 8002434:	4629      	mov	r1, r5
 8002436:	f7fd fed5 	bl	80001e4 <__adddf3>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4614      	mov	r4, r2
 8002440:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 8002442:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe f82a 	bl	80004a0 <__aeabi_f2d>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4620      	mov	r0, r4
 8002452:	4629      	mov	r1, r5
 8002454:	f7fd fec6 	bl	80001e4 <__adddf3>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe fb46 	bl	8000af0 <__aeabi_d2f>
 8002464:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002466:	4a1e      	ldr	r2, [pc, #120]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 8002468:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 800246a:	f7ff fa95 	bl	8001998 <micros>
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 8002470:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002474:	ebb0 0802 	subs.w	r8, r0, r2
 8002478:	eb61 0903 	sbc.w	r9, r1, r3
 800247c:	4640      	mov	r0, r8
 800247e:	4649      	mov	r1, r9
 8002480:	f7fe fc4e 	bl	8000d20 <__aeabi_ul2f>
 8002484:	ee06 0a90 	vmov	s13, r0
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80024e4 <TrajectoryGenerationProcess+0x494>
 8002492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002496:	eef4 6ae7 	vcmpe.f32	s13, s15
 800249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249e:	da00      	bge.n	80024a2 <TrajectoryGenerationProcess+0x452>
			  break;
 80024a0:	e017      	b.n	80024d2 <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 80024a2:	f7ff fa79 	bl	8001998 <micros>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	490d      	ldr	r1, [pc, #52]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 80024ac:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 0;
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	66da      	str	r2, [r3, #108]	; 0x6c
					  TrjStruc.Mode = 2; ///Final Value Mode
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 80024b8:	2202      	movs	r2, #2
 80024ba:	669a      	str	r2, [r3, #104]	; 0x68
			  break;
 80024bc:	e009      	b.n	80024d2 <TrajectoryGenerationProcess+0x482>
			  Moving_Link_Task_Flag = 1;
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <TrajectoryGenerationProcess+0x49c>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <TrajectoryGenerationProcess+0x490>)
 80024ca:	6213      	str	r3, [r2, #32]
			  break;
 80024cc:	e002      	b.n	80024d4 <TrajectoryGenerationProcess+0x484>
			  break;
 80024ce:	bf00      	nop
 80024d0:	e000      	b.n	80024d4 <TrajectoryGenerationProcess+0x484>
			  break;
 80024d2:	bf00      	nop
}
 80024d4:	bf00      	nop
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024de:	bf00      	nop
 80024e0:	20000248 	.word	0x20000248
 80024e4:	49742400 	.word	0x49742400
 80024e8:	bfe00000 	.word	0xbfe00000
 80024ec:	200001e0 	.word	0x200001e0

080024f0 <PIDController2in1>:

void PIDController2in1()
{
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 80024f4:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <PIDController2in1+0xe8>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a38      	ldr	r2, [pc, #224]	; (80025dc <PIDController2in1+0xec>)
 80024fa:	6113      	str	r3, [r2, #16]
    PositionPIDController.NowError = PositionPIDController.OutputFeedback-PositionPIDController.OutputDesire;
 80024fc:	4b37      	ldr	r3, [pc, #220]	; (80025dc <PIDController2in1+0xec>)
 80024fe:	ed93 7a05 	vldr	s14, [r3, #20]
 8002502:	4b36      	ldr	r3, [pc, #216]	; (80025dc <PIDController2in1+0xec>)
 8002504:	edd3 7a04 	vldr	s15, [r3, #16]
 8002508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800250c:	4b33      	ldr	r3, [pc, #204]	; (80025dc <PIDController2in1+0xec>)
 800250e:	edc3 7a07 	vstr	s15, [r3, #28]
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 8002512:	4b32      	ldr	r3, [pc, #200]	; (80025dc <PIDController2in1+0xec>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd ffc2 	bl	80004a0 <__aeabi_f2d>
 800251c:	4604      	mov	r4, r0
 800251e:	460d      	mov	r5, r1
 8002520:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <PIDController2in1+0xec>)
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fd ffbb 	bl	80004a0 <__aeabi_f2d>
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <PIDController2in1+0xec>)
 800252c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002530:	f7fe f80e 	bl	8000550 <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4620      	mov	r0, r4
 800253a:	4629      	mov	r1, r5
 800253c:	f7fd fe52 	bl	80001e4 <__adddf3>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f7fe fad2 	bl	8000af0 <__aeabi_d2f>
 800254c:	4603      	mov	r3, r0
 800254e:	4a23      	ldr	r2, [pc, #140]	; (80025dc <PIDController2in1+0xec>)
 8002550:	6193      	str	r3, [r2, #24]
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <PIDController2in1+0xec>)
 8002554:	ed93 7a00 	vldr	s14, [r3]
 8002558:	4b20      	ldr	r3, [pc, #128]	; (80025dc <PIDController2in1+0xec>)
 800255a:	edd3 7a07 	vldr	s15, [r3, #28]
 800255e:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 8002562:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <PIDController2in1+0xec>)
 8002564:	edd3 6a01 	vldr	s13, [r3, #4]
 8002568:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <PIDController2in1+0xec>)
 800256a:	edd3 7a06 	vldr	s15, [r3, #24]
 800256e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002576:	ee17 0a90 	vmov	r0, s15
 800257a:	f7fd ff91 	bl	80004a0 <__aeabi_f2d>
 800257e:	4604      	mov	r4, r0
 8002580:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime);
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <PIDController2in1+0xec>)
 8002584:	ed93 7a02 	vldr	s14, [r3, #8]
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <PIDController2in1+0xec>)
 800258a:	edd3 6a07 	vldr	s13, [r3, #28]
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <PIDController2in1+0xec>)
 8002590:	edd3 7a08 	vldr	s15, [r3, #32]
 8002594:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259c:	ee17 0a90 	vmov	r0, s15
 80025a0:	f7fd ff7e 	bl	80004a0 <__aeabi_f2d>
 80025a4:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <PIDController2in1+0xec>)
 80025a6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80025aa:	f7fe f8fb 	bl	80007a4 <__aeabi_ddiv>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4620      	mov	r0, r4
 80025b4:	4629      	mov	r1, r5
 80025b6:	f7fd fe15 	bl	80001e4 <__adddf3>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f7fe fa95 	bl	8000af0 <__aeabi_d2f>
 80025c6:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 80025c8:	4a04      	ldr	r2, [pc, #16]	; (80025dc <PIDController2in1+0xec>)
 80025ca:	60d3      	str	r3, [r2, #12]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <PIDController2in1+0xec>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	4a02      	ldr	r2, [pc, #8]	; (80025dc <PIDController2in1+0xec>)
 80025d2:	6213      	str	r3, [r2, #32]
//    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
//					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
//					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime);
//    VelocityPIDController.PreviousError = VelocityPIDController.NowError;

}
 80025d4:	bf00      	nop
 80025d6:	bdb0      	pop	{r4, r5, r7, pc}
 80025d8:	20000248 	.word	0x20000248
 80025dc:	200001e8 	.word	0x200001e8

080025e0 <UARTInit>:



///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <UARTInit+0x4c>)
 80025ea:	88db      	ldrh	r3, [r3, #6]
 80025ec:	4619      	mov	r1, r3
 80025ee:	2001      	movs	r0, #1
 80025f0:	f004 fbc0 	bl	8006d74 <calloc>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <UARTInit+0x4c>)
 80025fe:	889b      	ldrh	r3, [r3, #4]
 8002600:	4619      	mov	r1, r3
 8002602:	2001      	movs	r0, #1
 8002604:	f004 fbb6 	bl	8006d74 <calloc>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	81da      	strh	r2, [r3, #14]
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200000b0 	.word	0x200000b0

08002630 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6919      	ldr	r1, [r3, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	88db      	ldrh	r3, [r3, #6]
 8002644:	461a      	mov	r2, r3
 8002646:	f003 fd11 	bl	800606c <HAL_UART_Receive_DMA>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	88db      	ldrh	r3, [r3, #6]
 800265e:	461a      	mov	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	1ad3      	subs	r3, r2, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8002680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002684:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	8a9b      	ldrh	r3, [r3, #20]
 800268a:	461c      	mov	r4, r3
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ffe0 	bl	8002652 <UARTGetRxHead>
 8002692:	4603      	mov	r3, r0
 8002694:	429c      	cmp	r4, r3
 8002696:	d013      	beq.n	80026c0 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	8a92      	ldrh	r2, [r2, #20]
 80026a0:	4413      	add	r3, r2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	8a9b      	ldrh	r3, [r3, #20]
 80026aa:	3301      	adds	r3, #1
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	88d2      	ldrh	r2, [r2, #6]
 80026b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80026b4:	fb02 f201 	mul.w	r2, r2, r1
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 80026c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd90      	pop	{r4, r7, pc}

080026cc <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d13d      	bne.n	800275e <UARTTxDumpBuffer+0x92>
 80026e2:	4b21      	ldr	r3, [pc, #132]	; (8002768 <UARTTxDumpBuffer+0x9c>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d139      	bne.n	800275e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 80026ea:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <UARTTxDumpBuffer+0x9c>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	89da      	ldrh	r2, [r3, #14]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	899b      	ldrh	r3, [r3, #12]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d02d      	beq.n	8002758 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	89da      	ldrh	r2, [r3, #14]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002704:	429a      	cmp	r2, r3
 8002706:	d906      	bls.n	8002716 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	89da      	ldrh	r2, [r3, #14]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	b29b      	uxth	r3, r3
 8002714:	e005      	b.n	8002722 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	889a      	ldrh	r2, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	b29b      	uxth	r3, r3
 8002722:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	8992      	ldrh	r2, [r2, #12]
 8002730:	4413      	add	r3, r2
 8002732:	89fa      	ldrh	r2, [r7, #14]
 8002734:	4619      	mov	r1, r3
 8002736:	f003 fc2d 	bl	8005f94 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	899b      	ldrh	r3, [r3, #12]
 800273e:	461a      	mov	r2, r3
 8002740:	89fb      	ldrh	r3, [r7, #14]
 8002742:	4413      	add	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	8892      	ldrh	r2, [r2, #4]
 8002748:	fb93 f1f2 	sdiv	r1, r3, r2
 800274c:	fb02 f201 	mul.w	r2, r2, r1
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	b29a      	uxth	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <UARTTxDumpBuffer+0x9c>)
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
	}
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200002d8 	.word	0x200002d8

0800276c <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	4613      	mov	r3, r2
 8002778:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	889b      	ldrh	r3, [r3, #4]
 800277e:	88fa      	ldrh	r2, [r7, #6]
 8002780:	4293      	cmp	r3, r2
 8002782:	bf28      	it	cs
 8002784:	4613      	movcs	r3, r2
 8002786:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002788:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	889b      	ldrh	r3, [r3, #4]
 800278e:	4619      	mov	r1, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	89db      	ldrh	r3, [r3, #14]
 8002794:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002796:	4293      	cmp	r3, r2
 8002798:	bfa8      	it	ge
 800279a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 800279c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	89d2      	ldrh	r2, [r2, #14]
 80027a6:	4413      	add	r3, r2
 80027a8:	8aba      	ldrh	r2, [r7, #20]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f004 fb13 	bl	8006dd8 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	89db      	ldrh	r3, [r3, #14]
 80027b6:	461a      	mov	r2, r3
 80027b8:	8afb      	ldrh	r3, [r7, #22]
 80027ba:	4413      	add	r3, r2
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	8892      	ldrh	r2, [r2, #4]
 80027c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80027c4:	fb02 f201 	mul.w	r2, r2, r1
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80027d0:	8afa      	ldrh	r2, [r7, #22]
 80027d2:	8abb      	ldrh	r3, [r7, #20]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d00a      	beq.n	80027ee <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6898      	ldr	r0, [r3, #8]
 80027dc:	8abb      	ldrh	r3, [r7, #20]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 80027e2:	8afa      	ldrh	r2, [r7, #22]
 80027e4:	8abb      	ldrh	r3, [r7, #20]
 80027e6:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80027e8:	461a      	mov	r2, r3
 80027ea:	f004 faf5 	bl	8006dd8 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7ff ff6c 	bl	80026cc <UARTTxDumpBuffer>

}
 80027f4:	bf00      	nop
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 8002804:	f247 5358 	movw	r3, #30040	; 0x7558
 8002808:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 800280a:	f107 030c 	add.w	r3, r7, #12
 800280e:	2202      	movs	r2, #2
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffaa 	bl	800276c <UARTTxWrite>
	}
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 8002828:	f646 6346 	movw	r3, #28230	; 0x6e46
 800282c:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 800282e:	f107 030c 	add.w	r3, r7, #12
 8002832:	2202      	movs	r2, #2
 8002834:	4619      	mov	r1, r3
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ff98 	bl	800276c <UARTTxWrite>
	}
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	0000      	movs	r0, r0
	...

08002848 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 8002848:	b5b0      	push	{r4, r5, r7, lr}
 800284a:	b08e      	sub	sp, #56	; 0x38
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 8002854:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <Munmunbot_Protocol+0x23c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b05      	cmp	r3, #5
 800285a:	f200 83bc 	bhi.w	8002fd6 <Munmunbot_Protocol+0x78e>
 800285e:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <Munmunbot_Protocol+0x1c>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	0800287d 	.word	0x0800287d
 8002868:	08002931 	.word	0x08002931
 800286c:	08002973 	.word	0x08002973
 8002870:	080029c1 	.word	0x080029c1
 8002874:	080029e5 	.word	0x080029e5
 8002878:	08002aa5 	.word	0x08002aa5
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 800287c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002880:	111b      	asrs	r3, r3, #4
 8002882:	b21b      	sxth	r3, r3
 8002884:	b29b      	uxth	r3, r3
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	2b09      	cmp	r3, #9
 800288c:	f040 83a0 	bne.w	8002fd0 <Munmunbot_Protocol+0x788>
			{
				CheckSum = dataIn;
 8002890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002894:	4a7c      	ldr	r2, [pc, #496]	; (8002a88 <Munmunbot_Protocol+0x240>)
 8002896:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4b7a      	ldr	r3, [pc, #488]	; (8002a8c <Munmunbot_Protocol+0x244>)
 80028a4:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 80028a6:	4b79      	ldr	r3, [pc, #484]	; (8002a8c <Munmunbot_Protocol+0x244>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b07      	cmp	r3, #7
 80028ac:	d103      	bne.n	80028b6 <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 80028ae:	4b75      	ldr	r3, [pc, #468]	; (8002a84 <Munmunbot_Protocol+0x23c>)
 80028b0:	2203      	movs	r2, #3
 80028b2:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 80028b4:	e38c      	b.n	8002fd0 <Munmunbot_Protocol+0x788>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 80028b6:	4b75      	ldr	r3, [pc, #468]	; (8002a8c <Munmunbot_Protocol+0x244>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d00b      	beq.n	80028d6 <Munmunbot_Protocol+0x8e>
 80028be:	4b73      	ldr	r3, [pc, #460]	; (8002a8c <Munmunbot_Protocol+0x244>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d007      	beq.n	80028d6 <Munmunbot_Protocol+0x8e>
 80028c6:	4b71      	ldr	r3, [pc, #452]	; (8002a8c <Munmunbot_Protocol+0x244>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d003      	beq.n	80028d6 <Munmunbot_Protocol+0x8e>
 80028ce:	4b6f      	ldr	r3, [pc, #444]	; (8002a8c <Munmunbot_Protocol+0x244>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d103      	bne.n	80028de <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 80028d6:	4b6b      	ldr	r3, [pc, #428]	; (8002a84 <Munmunbot_Protocol+0x23c>)
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
			break;
 80028dc:	e378      	b.n	8002fd0 <Munmunbot_Protocol+0x788>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 80028de:	4b6b      	ldr	r3, [pc, #428]	; (8002a8c <Munmunbot_Protocol+0x244>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d020      	beq.n	8002928 <Munmunbot_Protocol+0xe0>
 80028e6:	4b69      	ldr	r3, [pc, #420]	; (8002a8c <Munmunbot_Protocol+0x244>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d01c      	beq.n	8002928 <Munmunbot_Protocol+0xe0>
 80028ee:	4b67      	ldr	r3, [pc, #412]	; (8002a8c <Munmunbot_Protocol+0x244>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d018      	beq.n	8002928 <Munmunbot_Protocol+0xe0>
 80028f6:	4b65      	ldr	r3, [pc, #404]	; (8002a8c <Munmunbot_Protocol+0x244>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b09      	cmp	r3, #9
 80028fc:	d014      	beq.n	8002928 <Munmunbot_Protocol+0xe0>
 80028fe:	4b63      	ldr	r3, [pc, #396]	; (8002a8c <Munmunbot_Protocol+0x244>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b0a      	cmp	r3, #10
 8002904:	d010      	beq.n	8002928 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8002906:	4b61      	ldr	r3, [pc, #388]	; (8002a8c <Munmunbot_Protocol+0x244>)
 8002908:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 800290a:	2b0b      	cmp	r3, #11
 800290c:	d00c      	beq.n	8002928 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 800290e:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <Munmunbot_Protocol+0x244>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b0c      	cmp	r3, #12
 8002914:	d008      	beq.n	8002928 <Munmunbot_Protocol+0xe0>
 8002916:	4b5d      	ldr	r3, [pc, #372]	; (8002a8c <Munmunbot_Protocol+0x244>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b0d      	cmp	r3, #13
 800291c:	d004      	beq.n	8002928 <Munmunbot_Protocol+0xe0>
 800291e:	4b5b      	ldr	r3, [pc, #364]	; (8002a8c <Munmunbot_Protocol+0x244>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b0e      	cmp	r3, #14
 8002924:	f040 8354 	bne.w	8002fd0 <Munmunbot_Protocol+0x788>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 8002928:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <Munmunbot_Protocol+0x23c>)
 800292a:	2205      	movs	r2, #5
 800292c:	701a      	strb	r2, [r3, #0]
			break;
 800292e:	e34f      	b.n	8002fd0 <Munmunbot_Protocol+0x788>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 8002930:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002934:	4b54      	ldr	r3, [pc, #336]	; (8002a88 <Munmunbot_Protocol+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4413      	add	r3, r2
 800293a:	4a53      	ldr	r2, [pc, #332]	; (8002a88 <Munmunbot_Protocol+0x240>)
 800293c:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	b29a      	uxth	r2, r3
 8002944:	4b52      	ldr	r3, [pc, #328]	; (8002a90 <Munmunbot_Protocol+0x248>)
 8002946:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b50      	ldr	r3, [pc, #320]	; (8002a94 <Munmunbot_Protocol+0x24c>)
 8002954:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 8002956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800295a:	111b      	asrs	r3, r3, #4
 800295c:	b21b      	sxth	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <Munmunbot_Protocol+0x24c>)
 8002968:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 800296a:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <Munmunbot_Protocol+0x23c>)
 800296c:	2202      	movs	r2, #2
 800296e:	701a      	strb	r2, [r3, #0]

			 break;
 8002970:	e331      	b.n	8002fd6 <Munmunbot_Protocol+0x78e>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 8002972:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002976:	4b44      	ldr	r3, [pc, #272]	; (8002a88 <Munmunbot_Protocol+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4413      	add	r3, r2
 800297c:	4a42      	ldr	r2, [pc, #264]	; (8002a88 <Munmunbot_Protocol+0x240>)
 800297e:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	b21a      	sxth	r2, r3
 8002986:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <Munmunbot_Protocol+0x248>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b21b      	sxth	r3, r3
 800298c:	4313      	orrs	r3, r2
 800298e:	b21b      	sxth	r3, r3
 8002990:	b29a      	uxth	r2, r3
 8002992:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <Munmunbot_Protocol+0x248>)
 8002994:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	4b3c      	ldr	r3, [pc, #240]	; (8002a94 <Munmunbot_Protocol+0x24c>)
 80029a2:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 80029a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029a8:	111b      	asrs	r3, r3, #4
 80029aa:	b21b      	sxth	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <Munmunbot_Protocol+0x24c>)
 80029b6:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 80029b8:	4b32      	ldr	r3, [pc, #200]	; (8002a84 <Munmunbot_Protocol+0x23c>)
 80029ba:	2205      	movs	r2, #5
 80029bc:	701a      	strb	r2, [r3, #0]
			 break;
 80029be:	e30a      	b.n	8002fd6 <Munmunbot_Protocol+0x78e>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 80029c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029c4:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <Munmunbot_Protocol+0x240>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	4a2f      	ldr	r2, [pc, #188]	; (8002a88 <Munmunbot_Protocol+0x240>)
 80029cc:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 80029ce:	88fa      	ldrh	r2, [r7, #6]
 80029d0:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <Munmunbot_Protocol+0x250>)
 80029d2:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 80029d4:	4b30      	ldr	r3, [pc, #192]	; (8002a98 <Munmunbot_Protocol+0x250>)
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <Munmunbot_Protocol+0x254>)
 80029da:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 80029dc:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <Munmunbot_Protocol+0x23c>)
 80029de:	2204      	movs	r2, #4
 80029e0:	701a      	strb	r2, [r3, #0]

		   break;
 80029e2:	e2f8      	b.n	8002fd6 <Munmunbot_Protocol+0x78e>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 80029e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029e8:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <Munmunbot_Protocol+0x240>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	4a26      	ldr	r2, [pc, #152]	; (8002a88 <Munmunbot_Protocol+0x240>)
 80029f0:	6013      	str	r3, [r2, #0]
				if (n_station > 2)
 80029f2:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <Munmunbot_Protocol+0x250>)
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d927      	bls.n	8002a4a <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <Munmunbot_Protocol+0x258>)
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	b2d9      	uxtb	r1, r3
 8002a08:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <Munmunbot_Protocol+0x24c>)
 8002a0a:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <Munmunbot_Protocol+0x258>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <Munmunbot_Protocol+0x258>)
 8002a16:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 8002a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a1c:	111b      	asrs	r3, r3, #4
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <Munmunbot_Protocol+0x258>)
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	b2d9      	uxtb	r1, r3
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <Munmunbot_Protocol+0x24c>)
 8002a2e:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <Munmunbot_Protocol+0x258>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <Munmunbot_Protocol+0x258>)
 8002a3a:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 8002a3c:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <Munmunbot_Protocol+0x250>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	3b02      	subs	r3, #2
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <Munmunbot_Protocol+0x250>)
 8002a46:	801a      	strh	r2, [r3, #0]
 8002a48:	e012      	b.n	8002a70 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <Munmunbot_Protocol+0x250>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d10e      	bne.n	8002a70 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <Munmunbot_Protocol+0x258>)
 8002a58:	7812      	ldrb	r2, [r2, #0]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	b2d9      	uxtb	r1, r3
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <Munmunbot_Protocol+0x24c>)
 8002a62:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <Munmunbot_Protocol+0x250>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <Munmunbot_Protocol+0x250>)
 8002a6e:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <Munmunbot_Protocol+0x250>)
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f040 82ad 	bne.w	8002fd4 <Munmunbot_Protocol+0x78c>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 8002a7a:	4b02      	ldr	r3, [pc, #8]	; (8002a84 <Munmunbot_Protocol+0x23c>)
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002a80:	e2a8      	b.n	8002fd4 <Munmunbot_Protocol+0x78c>
 8002a82:	bf00      	nop
 8002a84:	200000d0 	.word	0x200000d0
 8002a88:	200002dc 	.word	0x200002dc
 8002a8c:	200002e0 	.word	0x200002e0
 8002a90:	200002e2 	.word	0x200002e2
 8002a94:	200002e4 	.word	0x200002e4
 8002a98:	200003e4 	.word	0x200003e4
 8002a9c:	200003e6 	.word	0x200003e6
 8002aa0:	200003e8 	.word	0x200003e8

		case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 8002aa4:	4ba6      	ldr	r3, [pc, #664]	; (8002d40 <Munmunbot_Protocol+0x4f8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	4aa4      	ldr	r2, [pc, #656]	; (8002d40 <Munmunbot_Protocol+0x4f8>)
 8002aae:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 8002ab0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ab4:	4ba2      	ldr	r3, [pc, #648]	; (8002d40 <Munmunbot_Protocol+0x4f8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	f040 8275 	bne.w	8002fa8 <Munmunbot_Protocol+0x760>
				{

					switch (ProtocolMode)
 8002abe:	4ba1      	ldr	r3, [pc, #644]	; (8002d44 <Munmunbot_Protocol+0x4fc>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	2b0d      	cmp	r3, #13
 8002ac6:	f200 8270 	bhi.w	8002faa <Munmunbot_Protocol+0x762>
 8002aca:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <Munmunbot_Protocol+0x288>)
 8002acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad0:	08002b09 	.word	0x08002b09
 8002ad4:	08002b7d 	.word	0x08002b7d
 8002ad8:	08002b93 	.word	0x08002b93
 8002adc:	08002ba9 	.word	0x08002ba9
 8002ae0:	08002bcb 	.word	0x08002bcb
 8002ae4:	08002be9 	.word	0x08002be9
 8002ae8:	08002c0d 	.word	0x08002c0d
 8002aec:	08002c5f 	.word	0x08002c5f
 8002af0:	08002c8f 	.word	0x08002c8f
 8002af4:	08002d85 	.word	0x08002d85
 8002af8:	08002e73 	.word	0x08002e73
 8002afc:	08002f7d 	.word	0x08002f7d
 8002b00:	08002f85 	.word	0x08002f85
 8002b04:	08002f8d 	.word	0x08002f8d
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 8002b08:	2391      	movs	r3, #145	; 0x91
 8002b0a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 8002b0e:	4b8e      	ldr	r3, [pc, #568]	; (8002d48 <Munmunbot_Protocol+0x500>)
 8002b10:	785b      	ldrb	r3, [r3, #1]
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	b25a      	sxtb	r2, r3
 8002b16:	4b8c      	ldr	r3, [pc, #560]	; (8002d48 <Munmunbot_Protocol+0x500>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	b25b      	sxtb	r3, r3
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	b25b      	sxtb	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8002b22:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 8002b26:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <Munmunbot_Protocol+0x500>)
 8002b28:	78db      	ldrb	r3, [r3, #3]
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	b25a      	sxtb	r2, r3
 8002b2e:	4b86      	ldr	r3, [pc, #536]	; (8002d48 <Munmunbot_Protocol+0x500>)
 8002b30:	789b      	ldrb	r3, [r3, #2]
 8002b32:	b25b      	sxtb	r3, r3
 8002b34:	4313      	orrs	r3, r2
 8002b36:	b25b      	sxtb	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8002b3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b44:	2358      	movs	r3, #88	; 0x58
 8002b46:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002b4a:	2375      	movs	r3, #117	; 0x75
 8002b4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 8002b50:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002b54:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002b58:	4413      	add	r3, r2
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002b60:	4413      	add	r3, r2
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						UARTTxWrite(uart, temp, 6);
 8002b6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b70:	2206      	movs	r2, #6
 8002b72:	4619      	mov	r1, r3
 8002b74:	6838      	ldr	r0, [r7, #0]
 8002b76:	f7ff fdf9 	bl	800276c <UARTTxWrite>
						}
						break;
 8002b7a:	e216      	b.n	8002faa <Munmunbot_Protocol+0x762>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 8002b7c:	4b73      	ldr	r3, [pc, #460]	; (8002d4c <Munmunbot_Protocol+0x504>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <Munmunbot_Protocol+0x342>
						{
							Munmunbot_State = STATE_Idle;
 8002b84:	4b71      	ldr	r3, [pc, #452]	; (8002d4c <Munmunbot_Protocol+0x504>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002b8a:	6838      	ldr	r0, [r7, #0]
 8002b8c:	f7ff fe36 	bl	80027fc <ACK1Return>
						break;
 8002b90:	e20b      	b.n	8002faa <Munmunbot_Protocol+0x762>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002b92:	4b6e      	ldr	r3, [pc, #440]	; (8002d4c <Munmunbot_Protocol+0x504>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d102      	bne.n	8002ba0 <Munmunbot_Protocol+0x358>
						{
							Munmunbot_State = STATE_Disconnected;
 8002b9a:	4b6c      	ldr	r3, [pc, #432]	; (8002d4c <Munmunbot_Protocol+0x504>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002ba0:	6838      	ldr	r0, [r7, #0]
 8002ba2:	f7ff fe2b 	bl	80027fc <ACK1Return>
						break;
 8002ba6:	e200      	b.n	8002faa <Munmunbot_Protocol+0x762>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002ba8:	4b68      	ldr	r3, [pc, #416]	; (8002d4c <Munmunbot_Protocol+0x504>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d108      	bne.n	8002bc2 <Munmunbot_Protocol+0x37a>
						{
							CUSSStruc.RPMp = Data_HAck;
 8002bb0:	4b67      	ldr	r3, [pc, #412]	; (8002d50 <Munmunbot_Protocol+0x508>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b67      	ldr	r3, [pc, #412]	; (8002d54 <Munmunbot_Protocol+0x50c>)
 8002bb8:	609a      	str	r2, [r3, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 8002bba:	4966      	ldr	r1, [pc, #408]	; (8002d54 <Munmunbot_Protocol+0x50c>)
 8002bbc:	4866      	ldr	r0, [pc, #408]	; (8002d58 <Munmunbot_Protocol+0x510>)
 8002bbe:	f7fe fff7 	bl	8001bb0 <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 8002bc2:	6838      	ldr	r0, [r7, #0]
 8002bc4:	f7ff fe1a 	bl	80027fc <ACK1Return>
						break;
 8002bc8:	e1ef      	b.n	8002faa <Munmunbot_Protocol+0x762>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002bca:	4b60      	ldr	r3, [pc, #384]	; (8002d4c <Munmunbot_Protocol+0x504>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d106      	bne.n	8002be0 <Munmunbot_Protocol+0x398>
						{
							Angularpos_InputNumber = Data_HAck;
 8002bd2:	4b5f      	ldr	r3, [pc, #380]	; (8002d50 <Munmunbot_Protocol+0x508>)
 8002bd4:	881a      	ldrh	r2, [r3, #0]
 8002bd6:	4b61      	ldr	r3, [pc, #388]	; (8002d5c <Munmunbot_Protocol+0x514>)
 8002bd8:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 8002bda:	4b61      	ldr	r3, [pc, #388]	; (8002d60 <Munmunbot_Protocol+0x518>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002be0:	6838      	ldr	r0, [r7, #0]
 8002be2:	f7ff fe0b 	bl	80027fc <ACK1Return>
						break;
 8002be6:	e1e0      	b.n	8002faa <Munmunbot_Protocol+0x762>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002be8:	4b58      	ldr	r3, [pc, #352]	; (8002d4c <Munmunbot_Protocol+0x504>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d109      	bne.n	8002c04 <Munmunbot_Protocol+0x3bc>
						{
							Angularpos_InputArray[0] = parameter[0];
 8002bf0:	4b55      	ldr	r3, [pc, #340]	; (8002d48 <Munmunbot_Protocol+0x500>)
 8002bf2:	781a      	ldrb	r2, [r3, #0]
 8002bf4:	4b5b      	ldr	r3, [pc, #364]	; (8002d64 <Munmunbot_Protocol+0x51c>)
 8002bf6:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 8002bf8:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <Munmunbot_Protocol+0x518>)
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 8002bfe:	4b5a      	ldr	r3, [pc, #360]	; (8002d68 <Munmunbot_Protocol+0x520>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002c04:	6838      	ldr	r0, [r7, #0]
 8002c06:	f7ff fdf9 	bl	80027fc <ACK1Return>
						break;
 8002c0a:	e1ce      	b.n	8002faa <Munmunbot_Protocol+0x762>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002c0c:	4b4f      	ldr	r3, [pc, #316]	; (8002d4c <Munmunbot_Protocol+0x504>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d120      	bne.n	8002c56 <Munmunbot_Protocol+0x40e>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 8002c14:	4b52      	ldr	r3, [pc, #328]	; (8002d60 <Munmunbot_Protocol+0x518>)
 8002c16:	2203      	movs	r2, #3
 8002c18:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1e:	e00b      	b.n	8002c38 <Munmunbot_Protocol+0x3f0>
							{
								Angularpos_InputArray[i] = parameter[i];
 8002c20:	4a49      	ldr	r2, [pc, #292]	; (8002d48 <Munmunbot_Protocol+0x500>)
 8002c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c24:	4413      	add	r3, r2
 8002c26:	7819      	ldrb	r1, [r3, #0]
 8002c28:	4a4e      	ldr	r2, [pc, #312]	; (8002d64 <Munmunbot_Protocol+0x51c>)
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2c:	4413      	add	r3, r2
 8002c2e:	460a      	mov	r2, r1
 8002c30:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8002c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c34:	3301      	adds	r3, #1
 8002c36:	637b      	str	r3, [r7, #52]	; 0x34
 8002c38:	4b4c      	ldr	r3, [pc, #304]	; (8002d6c <Munmunbot_Protocol+0x524>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	4293      	cmp	r3, r2
 8002c42:	dbed      	blt.n	8002c20 <Munmunbot_Protocol+0x3d8>
							}
							NumberOfStationToGo = n_station_mem;
 8002c44:	4b49      	ldr	r3, [pc, #292]	; (8002d6c <Munmunbot_Protocol+0x524>)
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <Munmunbot_Protocol+0x520>)
 8002c4c:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 8002c4e:	6838      	ldr	r0, [r7, #0]
 8002c50:	f7ff fdd4 	bl	80027fc <ACK1Return>
						}
						else
						{
							ACK1Return(uart);
						}
						break;
 8002c54:	e1a9      	b.n	8002faa <Munmunbot_Protocol+0x762>
							ACK1Return(uart);
 8002c56:	6838      	ldr	r0, [r7, #0]
 8002c58:	f7ff fdd0 	bl	80027fc <ACK1Return>
						break;
 8002c5c:	e1a5      	b.n	8002faa <Munmunbot_Protocol+0x762>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <Munmunbot_Protocol+0x504>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d109      	bne.n	8002c7a <Munmunbot_Protocol+0x432>
						{
							Munmunbot_State = STATE_PrepareDATA;
 8002c66:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <Munmunbot_Protocol+0x504>)
 8002c68:	2202      	movs	r2, #2
 8002c6a:	701a      	strb	r2, [r3, #0]
							NumberOfStationPTR = 0;
 8002c6c:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <Munmunbot_Protocol+0x528>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 8002c72:	6838      	ldr	r0, [r7, #0]
 8002c74:	f7ff fdc2 	bl	80027fc <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};   /// ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 8002c78:	e197      	b.n	8002faa <Munmunbot_Protocol+0x762>
								uint8_t temp[] =
 8002c7a:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <Munmunbot_Protocol+0x52c>)
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
								UARTTxWrite(uart, temp, 4);
 8002c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c82:	2204      	movs	r2, #4
 8002c84:	4619      	mov	r1, r3
 8002c86:	6838      	ldr	r0, [r7, #0]
 8002c88:	f7ff fd70 	bl	800276c <UARTTxWrite>
						break;
 8002c8c:	e18d      	b.n	8002faa <Munmunbot_Protocol+0x762>

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 8002c8e:	4a3a      	ldr	r2, [pc, #232]	; (8002d78 <Munmunbot_Protocol+0x530>)
 8002c90:	f107 031c 	add.w	r3, r7, #28
 8002c94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c98:	6018      	str	r0, [r3, #0]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0};  // ACK1 + Mode9 Return
							uint8_t Shift = 2;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
							DataForReturn = Current_Station&(0xff);
 8002ca4:	4b35      	ldr	r3, [pc, #212]	; (8002d7c <Munmunbot_Protocol+0x534>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <Munmunbot_Protocol+0x538>)
 8002cac:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8002cae:	4b34      	ldr	r3, [pc, #208]	; (8002d80 <Munmunbot_Protocol+0x538>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002cba:	3301      	adds	r3, #1
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f803 2c1c 	strb.w	r2, [r3, #-28]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8002cc8:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <Munmunbot_Protocol+0x538>)
 8002cca:	881a      	ldrh	r2, [r3, #0]
 8002ccc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002cd8:	440b      	add	r3, r1
 8002cda:	f803 2c1c 	strb.w	r2, [r3, #-28]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8002cde:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002ce2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8002cec:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002d04:	3302      	adds	r3, #2
 8002d06:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002d10:	4413      	add	r3, r2
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002d18:	3303      	adds	r3, #3
 8002d1a:	43d2      	mvns	r2, r2
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002d22:	440b      	add	r3, r1
 8002d24:	f803 2c1c 	strb.w	r2, [r3, #-28]
							UARTTxWrite(uart, temp, 4+Shift);
 8002d28:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3304      	adds	r3, #4
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	f107 031c 	add.w	r3, r7, #28
 8002d36:	4619      	mov	r1, r3
 8002d38:	6838      	ldr	r0, [r7, #0]
 8002d3a:	f7ff fd17 	bl	800276c <UARTTxWrite>
						}

						break;
 8002d3e:	e134      	b.n	8002faa <Munmunbot_Protocol+0x762>
 8002d40:	200002dc 	.word	0x200002dc
 8002d44:	200002e0 	.word	0x200002e0
 8002d48:	200002e4 	.word	0x200002e4
 8002d4c:	200000d1 	.word	0x200000d1
 8002d50:	200002e2 	.word	0x200002e2
 8002d54:	200002b8 	.word	0x200002b8
 8002d58:	20000248 	.word	0x20000248
 8002d5c:	200001d4 	.word	0x200001d4
 8002d60:	200001d6 	.word	0x200001d6
 8002d64:	200000d4 	.word	0x200000d4
 8002d68:	200001d8 	.word	0x200001d8
 8002d6c:	200003e6 	.word	0x200003e6
 8002d70:	200001d9 	.word	0x200001d9
 8002d74:	6e467558 	.word	0x6e467558
 8002d78:	080070fc 	.word	0x080070fc
 8002d7c:	200001d7 	.word	0x200001d7
 8002d80:	200003ea 	.word	0x200003ea

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 8002d84:	4a9a      	ldr	r2, [pc, #616]	; (8002ff0 <Munmunbot_Protocol+0x7a8>)
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d8e:	6018      	str	r0, [r3, #0]
 8002d90:	3304      	adds	r3, #4
 8002d92:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,
									154, 0b0,  0b0, 0b0}; // ACK1 + Mode10 Return
							uint8_t Shift = 2;
 8002d94:	2302      	movs	r3, #2
 8002d96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
							DataForReturn = (PositionPIDController.OutputFeedback*65535.0)/(CUSSStruc.PPRxQEI); //pulse -> 65535 Scaling
 8002d9a:	4b96      	ldr	r3, [pc, #600]	; (8002ff4 <Munmunbot_Protocol+0x7ac>)
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fb7e 	bl	80004a0 <__aeabi_f2d>
 8002da4:	a38e      	add	r3, pc, #568	; (adr r3, 8002fe0 <Munmunbot_Protocol+0x798>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f7fd fbd1 	bl	8000550 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4614      	mov	r4, r2
 8002db4:	461d      	mov	r5, r3
 8002db6:	4b90      	ldr	r3, [pc, #576]	; (8002ff8 <Munmunbot_Protocol+0x7b0>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fb4e 	bl	800045c <__aeabi_ui2d>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	f7fd fcec 	bl	80007a4 <__aeabi_ddiv>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f7fd fe6c 	bl	8000ab0 <__aeabi_d2uiz>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	4b87      	ldr	r3, [pc, #540]	; (8002ffc <Munmunbot_Protocol+0x7b4>)
 8002dde:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8002de0:	4b86      	ldr	r3, [pc, #536]	; (8002ffc <Munmunbot_Protocol+0x7b4>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002dec:	3301      	adds	r3, #1
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002df4:	440b      	add	r3, r1
 8002df6:	f803 2c24 	strb.w	r2, [r3, #-36]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8002dfa:	4b80      	ldr	r3, [pc, #512]	; (8002ffc <Munmunbot_Protocol+0x7b4>)
 8002dfc:	881a      	ldrh	r2, [r3, #0]
 8002dfe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e02:	3302      	adds	r3, #2
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f803 2c24 	strb.w	r2, [r3, #-36]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8002e10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e14:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e18:	4413      	add	r3, r2
 8002e1a:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8002e1e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e22:	3301      	adds	r3, #1
 8002e24:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002e28:	440b      	add	r3, r1
 8002e2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e2e:	4413      	add	r3, r2
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e36:	3302      	adds	r3, #2
 8002e38:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002e3c:	440b      	add	r3, r1
 8002e3e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e42:	4413      	add	r3, r2
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e4a:	3303      	adds	r3, #3
 8002e4c:	43d2      	mvns	r2, r2
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002e54:	440b      	add	r3, r1
 8002e56:	f803 2c24 	strb.w	r2, [r3, #-36]
							UARTTxWrite(uart, temp, 4+Shift);
 8002e5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3304      	adds	r3, #4
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6838      	ldr	r0, [r7, #0]
 8002e6c:	f7ff fc7e 	bl	800276c <UARTTxWrite>
						}

						break;
 8002e70:	e09b      	b.n	8002faa <Munmunbot_Protocol+0x762>

					case 11: /// Return Angular Velocity Max  ##Complete##
							{
								uint8_t temp[] =
 8002e72:	4a63      	ldr	r2, [pc, #396]	; (8003000 <Munmunbot_Protocol+0x7b8>)
 8002e74:	f107 030c 	add.w	r3, r7, #12
 8002e78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e7c:	6018      	str	r0, [r3, #0]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	8019      	strh	r1, [r3, #0]
								{0x58 , 0x75 ,155, 0b0,  0b0, 0b0};
								uint8_t Shift = 2;
 8002e82:	2302      	movs	r3, #2
 8002e84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
								DataForReturn = (TrjStruc.AngularVelocityMax_Setting*60.0*255.0)/(CUSSStruc.PPRxQEI*10.0); ///fix pps to RPM(Scale 255)
 8002e88:	4b5e      	ldr	r3, [pc, #376]	; (8003004 <Munmunbot_Protocol+0x7bc>)
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd fb07 	bl	80004a0 <__aeabi_f2d>
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	4b5c      	ldr	r3, [pc, #368]	; (8003008 <Munmunbot_Protocol+0x7c0>)
 8002e98:	f7fd fb5a 	bl	8000550 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	a350      	add	r3, pc, #320	; (adr r3, 8002fe8 <Munmunbot_Protocol+0x7a0>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f7fd fb51 	bl	8000550 <__aeabi_dmul>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4614      	mov	r4, r2
 8002eb4:	461d      	mov	r5, r3
 8002eb6:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <Munmunbot_Protocol+0x7b0>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd face 	bl	800045c <__aeabi_ui2d>
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	4b51      	ldr	r3, [pc, #324]	; (800300c <Munmunbot_Protocol+0x7c4>)
 8002ec6:	f7fd fb43 	bl	8000550 <__aeabi_dmul>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4620      	mov	r0, r4
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	f7fd fc67 	bl	80007a4 <__aeabi_ddiv>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	f7fd fde7 	bl	8000ab0 <__aeabi_d2uiz>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	4b45      	ldr	r3, [pc, #276]	; (8002ffc <Munmunbot_Protocol+0x7b4>)
 8002ee8:	801a      	strh	r2, [r3, #0]
								temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8002eea:	4b44      	ldr	r3, [pc, #272]	; (8002ffc <Munmunbot_Protocol+0x7b4>)
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002efe:	440b      	add	r3, r1
 8002f00:	f803 2c2c 	strb.w	r2, [r3, #-44]
								temp[2+Shift] = (DataForReturn)&(0xff);
 8002f04:	4b3d      	ldr	r3, [pc, #244]	; (8002ffc <Munmunbot_Protocol+0x7b4>)
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f14:	440b      	add	r3, r1
 8002f16:	f803 2c2c 	strb.w	r2, [r3, #-44]
								temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8002f1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f22:	4413      	add	r3, r2
 8002f24:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8002f28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f32:	440b      	add	r3, r1
 8002f34:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002f38:	4413      	add	r3, r2
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f40:	3302      	adds	r3, #2
 8002f42:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f46:	440b      	add	r3, r1
 8002f48:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f54:	3303      	adds	r3, #3
 8002f56:	43d2      	mvns	r2, r2
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f5e:	440b      	add	r3, r1
 8002f60:	f803 2c2c 	strb.w	r2, [r3, #-44]
								UARTTxWrite(uart, temp, 4+Shift);
 8002f64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	f107 030c 	add.w	r3, r7, #12
 8002f72:	4619      	mov	r1, r3
 8002f74:	6838      	ldr	r0, [r7, #0]
 8002f76:	f7ff fbf9 	bl	800276c <UARTTxWrite>
							}
						break;
 8002f7a:	e016      	b.n	8002faa <Munmunbot_Protocol+0x762>
					case 12:
						if (Munmunbot_State == STATE_Idle)
						{

						}
						ACK1Return(uart);
 8002f7c:	6838      	ldr	r0, [r7, #0]
 8002f7e:	f7ff fc3d 	bl	80027fc <ACK1Return>
						break;
 8002f82:	e012      	b.n	8002faa <Munmunbot_Protocol+0x762>
					case 13:
						if (Munmunbot_State == STATE_Idle)
						{

						}
						ACK1Return(uart);
 8002f84:	6838      	ldr	r0, [r7, #0]
 8002f86:	f7ff fc39 	bl	80027fc <ACK1Return>
						break;
 8002f8a:	e00e      	b.n	8002faa <Munmunbot_Protocol+0x762>

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002f8c:	4b20      	ldr	r3, [pc, #128]	; (8003010 <Munmunbot_Protocol+0x7c8>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d105      	bne.n	8002fa0 <Munmunbot_Protocol+0x758>
						{
							Munmunbot_State = STATE_SetHome;
 8002f94:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <Munmunbot_Protocol+0x7c8>)
 8002f96:	2206      	movs	r2, #6
 8002f98:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <Munmunbot_Protocol+0x7cc>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002fa0:	6838      	ldr	r0, [r7, #0]
 8002fa2:	f7ff fc2b 	bl	80027fc <ACK1Return>
						break;
 8002fa6:	e000      	b.n	8002faa <Munmunbot_Protocol+0x762>
				    }
			   }
 8002fa8:	bf00      	nop
			n_station = 0;
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <Munmunbot_Protocol+0x7d0>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <Munmunbot_Protocol+0x7d4>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 8002fb6:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <Munmunbot_Protocol+0x7d8>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <Munmunbot_Protocol+0x7dc>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 8002fc2:	4b19      	ldr	r3, [pc, #100]	; (8003028 <Munmunbot_Protocol+0x7e0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

			Munmunbot_Protocol_State = PP_STARTandMode;
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <Munmunbot_Protocol+0x7e4>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
			break;
 8002fce:	e002      	b.n	8002fd6 <Munmunbot_Protocol+0x78e>
			break;
 8002fd0:	bf00      	nop
 8002fd2:	e000      	b.n	8002fd6 <Munmunbot_Protocol+0x78e>
				break;
 8002fd4:	bf00      	nop
			}
	}
}
 8002fd6:	bf00      	nop
 8002fd8:	3738      	adds	r7, #56	; 0x38
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	40efffe0 	.word	0x40efffe0
 8002fe8:	00000000 	.word	0x00000000
 8002fec:	406fe000 	.word	0x406fe000
 8002ff0:	08007104 	.word	0x08007104
 8002ff4:	200001e8 	.word	0x200001e8
 8002ff8:	200002b8 	.word	0x200002b8
 8002ffc:	200003ea 	.word	0x200003ea
 8003000:	0800710c 	.word	0x0800710c
 8003004:	20000248 	.word	0x20000248
 8003008:	404e0000 	.word	0x404e0000
 800300c:	40240000 	.word	0x40240000
 8003010:	200000d1 	.word	0x200000d1
 8003014:	200000d2 	.word	0x200000d2
 8003018:	200003e4 	.word	0x200003e4
 800301c:	200002e0 	.word	0x200002e0
 8003020:	200003e8 	.word	0x200003e8
 8003024:	200002e2 	.word	0x200002e2
 8003028:	200002dc 	.word	0x200002dc
 800302c:	200000d0 	.word	0x200000d0

08003030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003034:	b672      	cpsid	i
}
 8003036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003038:	e7fe      	b.n	8003038 <Error_Handler+0x8>
	...

0800303c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_MspInit+0x4c>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <HAL_MspInit+0x4c>)
 800304c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003050:	6453      	str	r3, [r2, #68]	; 0x44
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <HAL_MspInit+0x4c>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_MspInit+0x4c>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a08      	ldr	r2, [pc, #32]	; (8003088 <HAL_MspInit+0x4c>)
 8003068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_MspInit+0x4c>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800307a:	2007      	movs	r0, #7
 800307c:	f000 fb84 	bl	8003788 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800

0800308c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a19      	ldr	r2, [pc, #100]	; (8003110 <HAL_TIM_Encoder_MspInit+0x84>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d12c      	bne.n	8003108 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	4b18      	ldr	r3, [pc, #96]	; (8003114 <HAL_TIM_Encoder_MspInit+0x88>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	4a17      	ldr	r2, [pc, #92]	; (8003114 <HAL_TIM_Encoder_MspInit+0x88>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6453      	str	r3, [r2, #68]	; 0x44
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <HAL_TIM_Encoder_MspInit+0x88>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_TIM_Encoder_MspInit+0x88>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a10      	ldr	r2, [pc, #64]	; (8003114 <HAL_TIM_Encoder_MspInit+0x88>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <HAL_TIM_Encoder_MspInit+0x88>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 80030e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f4:	2300      	movs	r3, #0
 80030f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030f8:	2301      	movs	r3, #1
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fc:	f107 0314 	add.w	r3, r7, #20
 8003100:	4619      	mov	r1, r3
 8003102:	4805      	ldr	r0, [pc, #20]	; (8003118 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003104:	f000 ff84 	bl	8004010 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003108:	bf00      	nop
 800310a:	3728      	adds	r7, #40	; 0x28
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40010000 	.word	0x40010000
 8003114:	40023800 	.word	0x40023800
 8003118:	40020000 	.word	0x40020000

0800311c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312c:	d116      	bne.n	800315c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b16      	ldr	r3, [pc, #88]	; (800318c <HAL_TIM_Base_MspInit+0x70>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a15      	ldr	r2, [pc, #84]	; (800318c <HAL_TIM_Base_MspInit+0x70>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <HAL_TIM_Base_MspInit+0x70>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2100      	movs	r1, #0
 800314e:	201c      	movs	r0, #28
 8003150:	f000 fb25 	bl	800379e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003154:	201c      	movs	r0, #28
 8003156:	f000 fb3e 	bl	80037d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800315a:	e012      	b.n	8003182 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0b      	ldr	r2, [pc, #44]	; (8003190 <HAL_TIM_Base_MspInit+0x74>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d10d      	bne.n	8003182 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <HAL_TIM_Base_MspInit+0x70>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a07      	ldr	r2, [pc, #28]	; (800318c <HAL_TIM_Base_MspInit+0x70>)
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_TIM_Base_MspInit+0x70>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	40000400 	.word	0x40000400

08003194 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	f107 030c 	add.w	r3, r7, #12
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a12      	ldr	r2, [pc, #72]	; (80031fc <HAL_TIM_MspPostInit+0x68>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d11d      	bne.n	80031f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <HAL_TIM_MspPostInit+0x6c>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	4a10      	ldr	r2, [pc, #64]	; (8003200 <HAL_TIM_MspPostInit+0x6c>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
 80031c6:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <HAL_TIM_MspPostInit+0x6c>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 80031d2:	2340      	movs	r3, #64	; 0x40
 80031d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031e2:	2302      	movs	r3, #2
 80031e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 80031e6:	f107 030c 	add.w	r3, r7, #12
 80031ea:	4619      	mov	r1, r3
 80031ec:	4805      	ldr	r0, [pc, #20]	; (8003204 <HAL_TIM_MspPostInit+0x70>)
 80031ee:	f000 ff0f 	bl	8004010 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031f2:	bf00      	nop
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40000400 	.word	0x40000400
 8003200:	40023800 	.word	0x40023800
 8003204:	40020000 	.word	0x40020000

08003208 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	; 0x28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a4c      	ldr	r2, [pc, #304]	; (8003358 <HAL_UART_MspInit+0x150>)
 8003226:	4293      	cmp	r3, r2
 8003228:	f040 8091 	bne.w	800334e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	4b4a      	ldr	r3, [pc, #296]	; (800335c <HAL_UART_MspInit+0x154>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	4a49      	ldr	r2, [pc, #292]	; (800335c <HAL_UART_MspInit+0x154>)
 8003236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323a:	6413      	str	r3, [r2, #64]	; 0x40
 800323c:	4b47      	ldr	r3, [pc, #284]	; (800335c <HAL_UART_MspInit+0x154>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	4b43      	ldr	r3, [pc, #268]	; (800335c <HAL_UART_MspInit+0x154>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	4a42      	ldr	r2, [pc, #264]	; (800335c <HAL_UART_MspInit+0x154>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6313      	str	r3, [r2, #48]	; 0x30
 8003258:	4b40      	ldr	r3, [pc, #256]	; (800335c <HAL_UART_MspInit+0x154>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003264:	230c      	movs	r3, #12
 8003266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003268:	2302      	movs	r3, #2
 800326a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003270:	2303      	movs	r3, #3
 8003272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003274:	2307      	movs	r3, #7
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	4619      	mov	r1, r3
 800327e:	4838      	ldr	r0, [pc, #224]	; (8003360 <HAL_UART_MspInit+0x158>)
 8003280:	f000 fec6 	bl	8004010 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003284:	4b37      	ldr	r3, [pc, #220]	; (8003364 <HAL_UART_MspInit+0x15c>)
 8003286:	4a38      	ldr	r2, [pc, #224]	; (8003368 <HAL_UART_MspInit+0x160>)
 8003288:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800328a:	4b36      	ldr	r3, [pc, #216]	; (8003364 <HAL_UART_MspInit+0x15c>)
 800328c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003290:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003292:	4b34      	ldr	r3, [pc, #208]	; (8003364 <HAL_UART_MspInit+0x15c>)
 8003294:	2240      	movs	r2, #64	; 0x40
 8003296:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003298:	4b32      	ldr	r3, [pc, #200]	; (8003364 <HAL_UART_MspInit+0x15c>)
 800329a:	2200      	movs	r2, #0
 800329c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800329e:	4b31      	ldr	r3, [pc, #196]	; (8003364 <HAL_UART_MspInit+0x15c>)
 80032a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032a6:	4b2f      	ldr	r3, [pc, #188]	; (8003364 <HAL_UART_MspInit+0x15c>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032ac:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_UART_MspInit+0x15c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <HAL_UART_MspInit+0x15c>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032b8:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <HAL_UART_MspInit+0x15c>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032be:	4b29      	ldr	r3, [pc, #164]	; (8003364 <HAL_UART_MspInit+0x15c>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80032c4:	4827      	ldr	r0, [pc, #156]	; (8003364 <HAL_UART_MspInit+0x15c>)
 80032c6:	f000 faa1 	bl	800380c <HAL_DMA_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80032d0:	f7ff feae 	bl	8003030 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a23      	ldr	r2, [pc, #140]	; (8003364 <HAL_UART_MspInit+0x15c>)
 80032d8:	635a      	str	r2, [r3, #52]	; 0x34
 80032da:	4a22      	ldr	r2, [pc, #136]	; (8003364 <HAL_UART_MspInit+0x15c>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80032e0:	4b22      	ldr	r3, [pc, #136]	; (800336c <HAL_UART_MspInit+0x164>)
 80032e2:	4a23      	ldr	r2, [pc, #140]	; (8003370 <HAL_UART_MspInit+0x168>)
 80032e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80032e6:	4b21      	ldr	r3, [pc, #132]	; (800336c <HAL_UART_MspInit+0x164>)
 80032e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032ee:	4b1f      	ldr	r3, [pc, #124]	; (800336c <HAL_UART_MspInit+0x164>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_UART_MspInit+0x164>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <HAL_UART_MspInit+0x164>)
 80032fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003300:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_UART_MspInit+0x164>)
 8003304:	2200      	movs	r2, #0
 8003306:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003308:	4b18      	ldr	r3, [pc, #96]	; (800336c <HAL_UART_MspInit+0x164>)
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800330e:	4b17      	ldr	r3, [pc, #92]	; (800336c <HAL_UART_MspInit+0x164>)
 8003310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003314:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003316:	4b15      	ldr	r3, [pc, #84]	; (800336c <HAL_UART_MspInit+0x164>)
 8003318:	2200      	movs	r2, #0
 800331a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <HAL_UART_MspInit+0x164>)
 800331e:	2200      	movs	r2, #0
 8003320:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003322:	4812      	ldr	r0, [pc, #72]	; (800336c <HAL_UART_MspInit+0x164>)
 8003324:	f000 fa72 	bl	800380c <HAL_DMA_Init>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800332e:	f7ff fe7f 	bl	8003030 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a0d      	ldr	r2, [pc, #52]	; (800336c <HAL_UART_MspInit+0x164>)
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
 8003338:	4a0c      	ldr	r2, [pc, #48]	; (800336c <HAL_UART_MspInit+0x164>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800333e:	2200      	movs	r2, #0
 8003340:	2100      	movs	r1, #0
 8003342:	2026      	movs	r0, #38	; 0x26
 8003344:	f000 fa2b 	bl	800379e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003348:	2026      	movs	r0, #38	; 0x26
 800334a:	f000 fa44 	bl	80037d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800334e:	bf00      	nop
 8003350:	3728      	adds	r7, #40	; 0x28
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40004400 	.word	0x40004400
 800335c:	40023800 	.word	0x40023800
 8003360:	40020000 	.word	0x40020000
 8003364:	200004a0 	.word	0x200004a0
 8003368:	400260a0 	.word	0x400260a0
 800336c:	200003f8 	.word	0x200003f8
 8003370:	40026088 	.word	0x40026088

08003374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003378:	e7fe      	b.n	8003378 <NMI_Handler+0x4>

0800337a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800337a:	b480      	push	{r7}
 800337c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800337e:	e7fe      	b.n	800337e <HardFault_Handler+0x4>

08003380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003384:	e7fe      	b.n	8003384 <MemManage_Handler+0x4>

08003386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003386:	b480      	push	{r7}
 8003388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800338a:	e7fe      	b.n	800338a <BusFault_Handler+0x4>

0800338c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003390:	e7fe      	b.n	8003390 <UsageFault_Handler+0x4>

08003392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ae:	b480      	push	{r7}
 80033b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033c0:	f000 f8f2 	bl	80035a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033c4:	bf00      	nop
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80033cc:	4802      	ldr	r0, [pc, #8]	; (80033d8 <DMA1_Stream5_IRQHandler+0x10>)
 80033ce:	f000 fbb5 	bl	8003b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200003f8 	.word	0x200003f8

080033dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80033e0:	4802      	ldr	r0, [pc, #8]	; (80033ec <DMA1_Stream6_IRQHandler+0x10>)
 80033e2:	f000 fbab 	bl	8003b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200004a0 	.word	0x200004a0

080033f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <TIM2_IRQHandler+0x10>)
 80033f6:	f001 ff7f 	bl	80052f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000548 	.word	0x20000548

08003404 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <USART2_IRQHandler+0x10>)
 800340a:	f002 fe5f 	bl	80060cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000590 	.word	0x20000590

08003418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003420:	4a14      	ldr	r2, [pc, #80]	; (8003474 <_sbrk+0x5c>)
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <_sbrk+0x60>)
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800342c:	4b13      	ldr	r3, [pc, #76]	; (800347c <_sbrk+0x64>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <_sbrk+0x64>)
 8003436:	4a12      	ldr	r2, [pc, #72]	; (8003480 <_sbrk+0x68>)
 8003438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800343a:	4b10      	ldr	r3, [pc, #64]	; (800347c <_sbrk+0x64>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4413      	add	r3, r2
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	429a      	cmp	r2, r3
 8003446:	d207      	bcs.n	8003458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003448:	f003 fc9c 	bl	8006d84 <__errno>
 800344c:	4603      	mov	r3, r0
 800344e:	220c      	movs	r2, #12
 8003450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
 8003456:	e009      	b.n	800346c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <_sbrk+0x64>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800345e:	4b07      	ldr	r3, [pc, #28]	; (800347c <_sbrk+0x64>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	4a05      	ldr	r2, [pc, #20]	; (800347c <_sbrk+0x64>)
 8003468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800346a:	68fb      	ldr	r3, [r7, #12]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20020000 	.word	0x20020000
 8003478:	00000400 	.word	0x00000400
 800347c:	200003ec 	.word	0x200003ec
 8003480:	200005e8 	.word	0x200005e8

08003484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <SystemInit+0x28>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	4a07      	ldr	r2, [pc, #28]	; (80034ac <SystemInit+0x28>)
 8003490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <SystemInit+0x28>)
 800349a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800349e:	609a      	str	r2, [r3, #8]
#endif
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	e000ed00 	.word	0xe000ed00

080034b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034b6:	e003      	b.n	80034c0 <LoopCopyDataInit>

080034b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034be:	3104      	adds	r1, #4

080034c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034c8:	d3f6      	bcc.n	80034b8 <CopyDataInit>
  ldr  r2, =_sbss
 80034ca:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034cc:	e002      	b.n	80034d4 <LoopFillZerobss>

080034ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034d0:	f842 3b04 	str.w	r3, [r2], #4

080034d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034d8:	d3f9      	bcc.n	80034ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034da:	f7ff ffd3 	bl	8003484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034de:	f003 fc57 	bl	8006d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034e2:	f7fd fddf 	bl	80010a4 <main>
  bx  lr    
 80034e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80034ec:	08007144 	.word	0x08007144
  ldr  r0, =_sdata
 80034f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80034f4:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80034f8:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80034fc:	200005e8 	.word	0x200005e8

08003500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003500:	e7fe      	b.n	8003500 <ADC_IRQHandler>
	...

08003504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003508:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_Init+0x40>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <HAL_Init+0x40>)
 800350e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_Init+0x40>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <HAL_Init+0x40>)
 800351a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800351e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <HAL_Init+0x40>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a07      	ldr	r2, [pc, #28]	; (8003544 <HAL_Init+0x40>)
 8003526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800352c:	2003      	movs	r0, #3
 800352e:	f000 f92b 	bl	8003788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003532:	2000      	movs	r0, #0
 8003534:	f000 f808 	bl	8003548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003538:	f7ff fd80 	bl	800303c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023c00 	.word	0x40023c00

08003548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003550:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_InitTick+0x54>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <HAL_InitTick+0x58>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800355e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f943 	bl	80037f2 <HAL_SYSTICK_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e00e      	b.n	8003594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b0f      	cmp	r3, #15
 800357a:	d80a      	bhi.n	8003592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800357c:	2200      	movs	r2, #0
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	f000 f90b 	bl	800379e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003588:	4a06      	ldr	r2, [pc, #24]	; (80035a4 <HAL_InitTick+0x5c>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000014 	.word	0x20000014
 80035a0:	2000001c 	.word	0x2000001c
 80035a4:	20000018 	.word	0x20000018

080035a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_IncTick+0x20>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_IncTick+0x24>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	4a04      	ldr	r2, [pc, #16]	; (80035cc <HAL_IncTick+0x24>)
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	2000001c 	.word	0x2000001c
 80035cc:	200005d4 	.word	0x200005d4

080035d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return uwTick;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_GetTick+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	200005d4 	.word	0x200005d4

080035e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <__NVIC_SetPriorityGrouping+0x44>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003604:	4013      	ands	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800361a:	4a04      	ldr	r2, [pc, #16]	; (800362c <__NVIC_SetPriorityGrouping+0x44>)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	60d3      	str	r3, [r2, #12]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003634:	4b04      	ldr	r3, [pc, #16]	; (8003648 <__NVIC_GetPriorityGrouping+0x18>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	f003 0307 	and.w	r3, r3, #7
}
 800363e:	4618      	mov	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	2b00      	cmp	r3, #0
 800365c:	db0b      	blt.n	8003676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	4907      	ldr	r1, [pc, #28]	; (8003684 <__NVIC_EnableIRQ+0x38>)
 8003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2001      	movs	r0, #1
 800366e:	fa00 f202 	lsl.w	r2, r0, r2
 8003672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	e000e100 	.word	0xe000e100

08003688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	6039      	str	r1, [r7, #0]
 8003692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003698:	2b00      	cmp	r3, #0
 800369a:	db0a      	blt.n	80036b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	490c      	ldr	r1, [pc, #48]	; (80036d4 <__NVIC_SetPriority+0x4c>)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	0112      	lsls	r2, r2, #4
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	440b      	add	r3, r1
 80036ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b0:	e00a      	b.n	80036c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	4908      	ldr	r1, [pc, #32]	; (80036d8 <__NVIC_SetPriority+0x50>)
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	3b04      	subs	r3, #4
 80036c0:	0112      	lsls	r2, r2, #4
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	440b      	add	r3, r1
 80036c6:	761a      	strb	r2, [r3, #24]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000e100 	.word	0xe000e100
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f1c3 0307 	rsb	r3, r3, #7
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	bf28      	it	cs
 80036fa:	2304      	movcs	r3, #4
 80036fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3304      	adds	r3, #4
 8003702:	2b06      	cmp	r3, #6
 8003704:	d902      	bls.n	800370c <NVIC_EncodePriority+0x30>
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3b03      	subs	r3, #3
 800370a:	e000      	b.n	800370e <NVIC_EncodePriority+0x32>
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	f04f 32ff 	mov.w	r2, #4294967295
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43da      	mvns	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	401a      	ands	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003724:	f04f 31ff 	mov.w	r1, #4294967295
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	43d9      	mvns	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003734:	4313      	orrs	r3, r2
         );
}
 8003736:	4618      	mov	r0, r3
 8003738:	3724      	adds	r7, #36	; 0x24
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3b01      	subs	r3, #1
 8003750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003754:	d301      	bcc.n	800375a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003756:	2301      	movs	r3, #1
 8003758:	e00f      	b.n	800377a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <SysTick_Config+0x40>)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003762:	210f      	movs	r1, #15
 8003764:	f04f 30ff 	mov.w	r0, #4294967295
 8003768:	f7ff ff8e 	bl	8003688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <SysTick_Config+0x40>)
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003772:	4b04      	ldr	r3, [pc, #16]	; (8003784 <SysTick_Config+0x40>)
 8003774:	2207      	movs	r2, #7
 8003776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	e000e010 	.word	0xe000e010

08003788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff29 	bl	80035e8 <__NVIC_SetPriorityGrouping>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800379e:	b580      	push	{r7, lr}
 80037a0:	b086      	sub	sp, #24
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4603      	mov	r3, r0
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037b0:	f7ff ff3e 	bl	8003630 <__NVIC_GetPriorityGrouping>
 80037b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	6978      	ldr	r0, [r7, #20]
 80037bc:	f7ff ff8e 	bl	80036dc <NVIC_EncodePriority>
 80037c0:	4602      	mov	r2, r0
 80037c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff5d 	bl	8003688 <__NVIC_SetPriority>
}
 80037ce:	bf00      	nop
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	4603      	mov	r3, r0
 80037de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ff31 	bl	800364c <__NVIC_EnableIRQ>
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ffa2 	bl	8003744 <SysTick_Config>
 8003800:	4603      	mov	r3, r0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003818:	f7ff feda 	bl	80035d0 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e099      	b.n	800395c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003848:	e00f      	b.n	800386a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800384a:	f7ff fec1 	bl	80035d0 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b05      	cmp	r3, #5
 8003856:	d908      	bls.n	800386a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2203      	movs	r2, #3
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e078      	b.n	800395c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e8      	bne.n	800384a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4b38      	ldr	r3, [pc, #224]	; (8003964 <HAL_DMA_Init+0x158>)
 8003884:	4013      	ands	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003896:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d107      	bne.n	80038d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	4313      	orrs	r3, r2
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f023 0307 	bic.w	r3, r3, #7
 80038ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d117      	bne.n	800392e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00e      	beq.n	800392e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fb01 	bl	8003f18 <DMA_CheckFifoParam>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2240      	movs	r2, #64	; 0x40
 8003920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800392a:	2301      	movs	r3, #1
 800392c:	e016      	b.n	800395c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fab8 	bl	8003eac <DMA_CalcBaseAndBitshift>
 800393c:	4603      	mov	r3, r0
 800393e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	223f      	movs	r2, #63	; 0x3f
 8003946:	409a      	lsls	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	f010803f 	.word	0xf010803f

08003968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_DMA_Start_IT+0x26>
 800398a:	2302      	movs	r3, #2
 800398c:	e040      	b.n	8003a10 <HAL_DMA_Start_IT+0xa8>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d12f      	bne.n	8003a02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fa4a 	bl	8003e50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	223f      	movs	r2, #63	; 0x3f
 80039c2:	409a      	lsls	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0216 	orr.w	r2, r2, #22
 80039d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0208 	orr.w	r2, r2, #8
 80039ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	e005      	b.n	8003a0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a26:	f7ff fdd3 	bl	80035d0 <HAL_GetTick>
 8003a2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d008      	beq.n	8003a4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2280      	movs	r2, #128	; 0x80
 8003a3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e052      	b.n	8003af0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0216 	bic.w	r2, r2, #22
 8003a58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d103      	bne.n	8003a7a <HAL_DMA_Abort+0x62>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d007      	beq.n	8003a8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0208 	bic.w	r2, r2, #8
 8003a88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a9a:	e013      	b.n	8003ac4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a9c:	f7ff fd98 	bl	80035d0 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b05      	cmp	r3, #5
 8003aa8:	d90c      	bls.n	8003ac4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2203      	movs	r2, #3
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e015      	b.n	8003af0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e4      	bne.n	8003a9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad6:	223f      	movs	r2, #63	; 0x3f
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d004      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2280      	movs	r2, #128	; 0x80
 8003b10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e00c      	b.n	8003b30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2205      	movs	r2, #5
 8003b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0201 	bic.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b48:	4b92      	ldr	r3, [pc, #584]	; (8003d94 <HAL_DMA_IRQHandler+0x258>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a92      	ldr	r2, [pc, #584]	; (8003d98 <HAL_DMA_IRQHandler+0x25c>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	0a9b      	lsrs	r3, r3, #10
 8003b54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b66:	2208      	movs	r2, #8
 8003b68:	409a      	lsls	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01a      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d013      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0204 	bic.w	r2, r2, #4
 8003b8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	2208      	movs	r2, #8
 8003b96:	409a      	lsls	r2, r3
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	f043 0201 	orr.w	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	2201      	movs	r2, #1
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d012      	beq.n	8003bde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bca:	2201      	movs	r2, #1
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd6:	f043 0202 	orr.w	r2, r3, #2
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be2:	2204      	movs	r2, #4
 8003be4:	409a      	lsls	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d012      	beq.n	8003c14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00b      	beq.n	8003c14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	2204      	movs	r2, #4
 8003c02:	409a      	lsls	r2, r3
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0c:	f043 0204 	orr.w	r2, r3, #4
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c18:	2210      	movs	r2, #16
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d043      	beq.n	8003cac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d03c      	beq.n	8003cac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	2210      	movs	r2, #16
 8003c38:	409a      	lsls	r2, r3
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d018      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d108      	bne.n	8003c6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d024      	beq.n	8003cac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4798      	blx	r3
 8003c6a:	e01f      	b.n	8003cac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01b      	beq.n	8003cac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
 8003c7c:	e016      	b.n	8003cac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d107      	bne.n	8003c9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0208 	bic.w	r2, r2, #8
 8003c9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 808e 	beq.w	8003dda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8086 	beq.w	8003dda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b05      	cmp	r3, #5
 8003ce4:	d136      	bne.n	8003d54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0216 	bic.w	r2, r2, #22
 8003cf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <HAL_DMA_IRQHandler+0x1da>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0208 	bic.w	r2, r2, #8
 8003d24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	223f      	movs	r2, #63	; 0x3f
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d07d      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
        }
        return;
 8003d52:	e078      	b.n	8003e46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d01c      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d108      	bne.n	8003d82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d030      	beq.n	8003dda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
 8003d80:	e02b      	b.n	8003dda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d027      	beq.n	8003dda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	4798      	blx	r3
 8003d92:	e022      	b.n	8003dda <HAL_DMA_IRQHandler+0x29e>
 8003d94:	20000014 	.word	0x20000014
 8003d98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10f      	bne.n	8003dca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0210 	bic.w	r2, r2, #16
 8003db8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d032      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d022      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2205      	movs	r2, #5
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d307      	bcc.n	8003e22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f2      	bne.n	8003e06 <HAL_DMA_IRQHandler+0x2ca>
 8003e20:	e000      	b.n	8003e24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003e22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
 8003e44:	e000      	b.n	8003e48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003e46:	bf00      	nop
    }
  }
}
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop

08003e50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b40      	cmp	r3, #64	; 0x40
 8003e7c:	d108      	bne.n	8003e90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e8e:	e007      	b.n	8003ea0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	60da      	str	r2, [r3, #12]
}
 8003ea0:	bf00      	nop
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	3b10      	subs	r3, #16
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <DMA_CalcBaseAndBitshift+0x64>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ec6:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <DMA_CalcBaseAndBitshift+0x68>)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d909      	bls.n	8003eee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	1d1a      	adds	r2, r3, #4
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	659a      	str	r2, [r3, #88]	; 0x58
 8003eec:	e007      	b.n	8003efe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	aaaaaaab 	.word	0xaaaaaaab
 8003f14:	0800712c 	.word	0x0800712c

08003f18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d11f      	bne.n	8003f72 <DMA_CheckFifoParam+0x5a>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d856      	bhi.n	8003fe6 <DMA_CheckFifoParam+0xce>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <DMA_CheckFifoParam+0x28>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f63 	.word	0x08003f63
 8003f48:	08003f51 	.word	0x08003f51
 8003f4c:	08003fe7 	.word	0x08003fe7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d046      	beq.n	8003fea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f60:	e043      	b.n	8003fea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f6a:	d140      	bne.n	8003fee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f70:	e03d      	b.n	8003fee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f7a:	d121      	bne.n	8003fc0 <DMA_CheckFifoParam+0xa8>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d837      	bhi.n	8003ff2 <DMA_CheckFifoParam+0xda>
 8003f82:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <DMA_CheckFifoParam+0x70>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003f99 	.word	0x08003f99
 8003f8c:	08003f9f 	.word	0x08003f9f
 8003f90:	08003f99 	.word	0x08003f99
 8003f94:	08003fb1 	.word	0x08003fb1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f9c:	e030      	b.n	8004000 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d025      	beq.n	8003ff6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fae:	e022      	b.n	8003ff6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fb8:	d11f      	bne.n	8003ffa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fbe:	e01c      	b.n	8003ffa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d903      	bls.n	8003fce <DMA_CheckFifoParam+0xb6>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d003      	beq.n	8003fd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fcc:	e018      	b.n	8004000 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd2:	e015      	b.n	8004000 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00e      	beq.n	8003ffe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe4:	e00b      	b.n	8003ffe <DMA_CheckFifoParam+0xe6>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e00a      	b.n	8004000 <DMA_CheckFifoParam+0xe8>
      break;
 8003fea:	bf00      	nop
 8003fec:	e008      	b.n	8004000 <DMA_CheckFifoParam+0xe8>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e006      	b.n	8004000 <DMA_CheckFifoParam+0xe8>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e004      	b.n	8004000 <DMA_CheckFifoParam+0xe8>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e002      	b.n	8004000 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <DMA_CheckFifoParam+0xe8>
      break;
 8003ffe:	bf00      	nop
    }
  } 
  
  return status; 
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop

08004010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004010:	b480      	push	{r7}
 8004012:	b089      	sub	sp, #36	; 0x24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	e159      	b.n	80042e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800402c:	2201      	movs	r2, #1
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4013      	ands	r3, r2
 800403e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	429a      	cmp	r2, r3
 8004046:	f040 8148 	bne.w	80042da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d005      	beq.n	8004062 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800405e:	2b02      	cmp	r3, #2
 8004060:	d130      	bne.n	80040c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2203      	movs	r2, #3
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004098:	2201      	movs	r2, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 0201 	and.w	r2, r3, #1
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d017      	beq.n	8004100 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	2203      	movs	r2, #3
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d123      	bne.n	8004154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	08da      	lsrs	r2, r3, #3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3208      	adds	r2, #8
 8004114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	220f      	movs	r2, #15
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	08da      	lsrs	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3208      	adds	r2, #8
 800414e:	69b9      	ldr	r1, [r7, #24]
 8004150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	2203      	movs	r2, #3
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0203 	and.w	r2, r3, #3
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80a2 	beq.w	80042da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	4b57      	ldr	r3, [pc, #348]	; (80042f8 <HAL_GPIO_Init+0x2e8>)
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	4a56      	ldr	r2, [pc, #344]	; (80042f8 <HAL_GPIO_Init+0x2e8>)
 80041a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a4:	6453      	str	r3, [r2, #68]	; 0x44
 80041a6:	4b54      	ldr	r3, [pc, #336]	; (80042f8 <HAL_GPIO_Init+0x2e8>)
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041b2:	4a52      	ldr	r2, [pc, #328]	; (80042fc <HAL_GPIO_Init+0x2ec>)
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	089b      	lsrs	r3, r3, #2
 80041b8:	3302      	adds	r3, #2
 80041ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	220f      	movs	r2, #15
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	4013      	ands	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a49      	ldr	r2, [pc, #292]	; (8004300 <HAL_GPIO_Init+0x2f0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d019      	beq.n	8004212 <HAL_GPIO_Init+0x202>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a48      	ldr	r2, [pc, #288]	; (8004304 <HAL_GPIO_Init+0x2f4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_GPIO_Init+0x1fe>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a47      	ldr	r2, [pc, #284]	; (8004308 <HAL_GPIO_Init+0x2f8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00d      	beq.n	800420a <HAL_GPIO_Init+0x1fa>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a46      	ldr	r2, [pc, #280]	; (800430c <HAL_GPIO_Init+0x2fc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d007      	beq.n	8004206 <HAL_GPIO_Init+0x1f6>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a45      	ldr	r2, [pc, #276]	; (8004310 <HAL_GPIO_Init+0x300>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <HAL_GPIO_Init+0x1f2>
 80041fe:	2304      	movs	r3, #4
 8004200:	e008      	b.n	8004214 <HAL_GPIO_Init+0x204>
 8004202:	2307      	movs	r3, #7
 8004204:	e006      	b.n	8004214 <HAL_GPIO_Init+0x204>
 8004206:	2303      	movs	r3, #3
 8004208:	e004      	b.n	8004214 <HAL_GPIO_Init+0x204>
 800420a:	2302      	movs	r3, #2
 800420c:	e002      	b.n	8004214 <HAL_GPIO_Init+0x204>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <HAL_GPIO_Init+0x204>
 8004212:	2300      	movs	r3, #0
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	f002 0203 	and.w	r2, r2, #3
 800421a:	0092      	lsls	r2, r2, #2
 800421c:	4093      	lsls	r3, r2
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4313      	orrs	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004224:	4935      	ldr	r1, [pc, #212]	; (80042fc <HAL_GPIO_Init+0x2ec>)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	089b      	lsrs	r3, r3, #2
 800422a:	3302      	adds	r3, #2
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004232:	4b38      	ldr	r3, [pc, #224]	; (8004314 <HAL_GPIO_Init+0x304>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004256:	4a2f      	ldr	r2, [pc, #188]	; (8004314 <HAL_GPIO_Init+0x304>)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800425c:	4b2d      	ldr	r3, [pc, #180]	; (8004314 <HAL_GPIO_Init+0x304>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004280:	4a24      	ldr	r2, [pc, #144]	; (8004314 <HAL_GPIO_Init+0x304>)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004286:	4b23      	ldr	r3, [pc, #140]	; (8004314 <HAL_GPIO_Init+0x304>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	43db      	mvns	r3, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4013      	ands	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042aa:	4a1a      	ldr	r2, [pc, #104]	; (8004314 <HAL_GPIO_Init+0x304>)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042b0:	4b18      	ldr	r3, [pc, #96]	; (8004314 <HAL_GPIO_Init+0x304>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042d4:	4a0f      	ldr	r2, [pc, #60]	; (8004314 <HAL_GPIO_Init+0x304>)
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3301      	adds	r3, #1
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	f67f aea2 	bls.w	800402c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042e8:	bf00      	nop
 80042ea:	bf00      	nop
 80042ec:	3724      	adds	r7, #36	; 0x24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40013800 	.word	0x40013800
 8004300:	40020000 	.word	0x40020000
 8004304:	40020400 	.word	0x40020400
 8004308:	40020800 	.word	0x40020800
 800430c:	40020c00 	.word	0x40020c00
 8004310:	40021000 	.word	0x40021000
 8004314:	40013c00 	.word	0x40013c00

08004318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	887b      	ldrh	r3, [r7, #2]
 800432a:	4013      	ands	r3, r2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
 8004334:	e001      	b.n	800433a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800433a:	7bfb      	ldrb	r3, [r7, #15]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	807b      	strh	r3, [r7, #2]
 8004354:	4613      	mov	r3, r2
 8004356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004358:	787b      	ldrb	r3, [r7, #1]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800435e:	887a      	ldrh	r2, [r7, #2]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004364:	e003      	b.n	800436e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004366:	887b      	ldrh	r3, [r7, #2]
 8004368:	041a      	lsls	r2, r3, #16
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	619a      	str	r2, [r3, #24]
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e264      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d075      	beq.n	8004486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800439a:	4ba3      	ldr	r3, [pc, #652]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d00c      	beq.n	80043c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a6:	4ba0      	ldr	r3, [pc, #640]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d112      	bne.n	80043d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043b2:	4b9d      	ldr	r3, [pc, #628]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043be:	d10b      	bne.n	80043d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c0:	4b99      	ldr	r3, [pc, #612]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d05b      	beq.n	8004484 <HAL_RCC_OscConfig+0x108>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d157      	bne.n	8004484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e23f      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e0:	d106      	bne.n	80043f0 <HAL_RCC_OscConfig+0x74>
 80043e2:	4b91      	ldr	r3, [pc, #580]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a90      	ldr	r2, [pc, #576]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e01d      	b.n	800442c <HAL_RCC_OscConfig+0xb0>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x98>
 80043fa:	4b8b      	ldr	r3, [pc, #556]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a8a      	ldr	r2, [pc, #552]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4b88      	ldr	r3, [pc, #544]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a87      	ldr	r2, [pc, #540]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0xb0>
 8004414:	4b84      	ldr	r3, [pc, #528]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a83      	ldr	r2, [pc, #524]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 800441a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b81      	ldr	r3, [pc, #516]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a80      	ldr	r2, [pc, #512]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 8004426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d013      	beq.n	800445c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7ff f8cc 	bl	80035d0 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800443c:	f7ff f8c8 	bl	80035d0 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	; 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e204      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444e:	4b76      	ldr	r3, [pc, #472]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0xc0>
 800445a:	e014      	b.n	8004486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7ff f8b8 	bl	80035d0 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004464:	f7ff f8b4 	bl	80035d0 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	; 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e1f0      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004476:	4b6c      	ldr	r3, [pc, #432]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0xe8>
 8004482:	e000      	b.n	8004486 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d063      	beq.n	800455a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004492:	4b65      	ldr	r3, [pc, #404]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00b      	beq.n	80044b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449e:	4b62      	ldr	r3, [pc, #392]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d11c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044aa:	4b5f      	ldr	r3, [pc, #380]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d116      	bne.n	80044e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b6:	4b5c      	ldr	r3, [pc, #368]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <HAL_RCC_OscConfig+0x152>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d001      	beq.n	80044ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e1c4      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ce:	4b56      	ldr	r3, [pc, #344]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4952      	ldr	r1, [pc, #328]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	e03a      	b.n	800455a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d020      	beq.n	800452e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ec:	4b4f      	ldr	r3, [pc, #316]	; (800462c <HAL_RCC_OscConfig+0x2b0>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f2:	f7ff f86d 	bl	80035d0 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044fa:	f7ff f869 	bl	80035d0 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e1a5      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450c:	4b46      	ldr	r3, [pc, #280]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0f0      	beq.n	80044fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004518:	4b43      	ldr	r3, [pc, #268]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4940      	ldr	r1, [pc, #256]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	4313      	orrs	r3, r2
 800452a:	600b      	str	r3, [r1, #0]
 800452c:	e015      	b.n	800455a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800452e:	4b3f      	ldr	r3, [pc, #252]	; (800462c <HAL_RCC_OscConfig+0x2b0>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7ff f84c 	bl	80035d0 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800453c:	f7ff f848 	bl	80035d0 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e184      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800454e:	4b36      	ldr	r3, [pc, #216]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d030      	beq.n	80045c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d016      	beq.n	800459c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800456e:	4b30      	ldr	r3, [pc, #192]	; (8004630 <HAL_RCC_OscConfig+0x2b4>)
 8004570:	2201      	movs	r2, #1
 8004572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004574:	f7ff f82c 	bl	80035d0 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800457c:	f7ff f828 	bl	80035d0 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e164      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800458e:	4b26      	ldr	r3, [pc, #152]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 8004590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x200>
 800459a:	e015      	b.n	80045c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800459c:	4b24      	ldr	r3, [pc, #144]	; (8004630 <HAL_RCC_OscConfig+0x2b4>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a2:	f7ff f815 	bl	80035d0 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045aa:	f7ff f811 	bl	80035d0 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e14d      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045bc:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80045be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f0      	bne.n	80045aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80a0 	beq.w	8004716 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d6:	2300      	movs	r3, #0
 80045d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045da:	4b13      	ldr	r3, [pc, #76]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10f      	bne.n	8004606 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	4a0e      	ldr	r2, [pc, #56]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80045f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f4:	6413      	str	r3, [r2, #64]	; 0x40
 80045f6:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004602:	2301      	movs	r3, #1
 8004604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004606:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCC_OscConfig+0x2b8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d121      	bne.n	8004656 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004612:	4b08      	ldr	r3, [pc, #32]	; (8004634 <HAL_RCC_OscConfig+0x2b8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a07      	ldr	r2, [pc, #28]	; (8004634 <HAL_RCC_OscConfig+0x2b8>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800461e:	f7fe ffd7 	bl	80035d0 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004624:	e011      	b.n	800464a <HAL_RCC_OscConfig+0x2ce>
 8004626:	bf00      	nop
 8004628:	40023800 	.word	0x40023800
 800462c:	42470000 	.word	0x42470000
 8004630:	42470e80 	.word	0x42470e80
 8004634:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004638:	f7fe ffca 	bl	80035d0 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e106      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464a:	4b85      	ldr	r3, [pc, #532]	; (8004860 <HAL_RCC_OscConfig+0x4e4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d106      	bne.n	800466c <HAL_RCC_OscConfig+0x2f0>
 800465e:	4b81      	ldr	r3, [pc, #516]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	4a80      	ldr	r2, [pc, #512]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6713      	str	r3, [r2, #112]	; 0x70
 800466a:	e01c      	b.n	80046a6 <HAL_RCC_OscConfig+0x32a>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b05      	cmp	r3, #5
 8004672:	d10c      	bne.n	800468e <HAL_RCC_OscConfig+0x312>
 8004674:	4b7b      	ldr	r3, [pc, #492]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a7a      	ldr	r2, [pc, #488]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 800467a:	f043 0304 	orr.w	r3, r3, #4
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
 8004680:	4b78      	ldr	r3, [pc, #480]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a77      	ldr	r2, [pc, #476]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
 800468c:	e00b      	b.n	80046a6 <HAL_RCC_OscConfig+0x32a>
 800468e:	4b75      	ldr	r3, [pc, #468]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4a74      	ldr	r2, [pc, #464]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	6713      	str	r3, [r2, #112]	; 0x70
 800469a:	4b72      	ldr	r3, [pc, #456]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	4a71      	ldr	r2, [pc, #452]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 80046a0:	f023 0304 	bic.w	r3, r3, #4
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d015      	beq.n	80046da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ae:	f7fe ff8f 	bl	80035d0 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b4:	e00a      	b.n	80046cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b6:	f7fe ff8b 	bl	80035d0 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e0c5      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046cc:	4b65      	ldr	r3, [pc, #404]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ee      	beq.n	80046b6 <HAL_RCC_OscConfig+0x33a>
 80046d8:	e014      	b.n	8004704 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046da:	f7fe ff79 	bl	80035d0 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fe ff75 	bl	80035d0 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e0af      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f8:	4b5a      	ldr	r3, [pc, #360]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1ee      	bne.n	80046e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d105      	bne.n	8004716 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800470a:	4b56      	ldr	r3, [pc, #344]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	4a55      	ldr	r2, [pc, #340]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 8004710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004714:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 809b 	beq.w	8004856 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004720:	4b50      	ldr	r3, [pc, #320]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 030c 	and.w	r3, r3, #12
 8004728:	2b08      	cmp	r3, #8
 800472a:	d05c      	beq.n	80047e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d141      	bne.n	80047b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004734:	4b4c      	ldr	r3, [pc, #304]	; (8004868 <HAL_RCC_OscConfig+0x4ec>)
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473a:	f7fe ff49 	bl	80035d0 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004742:	f7fe ff45 	bl	80035d0 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e081      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004754:	4b43      	ldr	r3, [pc, #268]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f0      	bne.n	8004742 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	019b      	lsls	r3, r3, #6
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	3b01      	subs	r3, #1
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	061b      	lsls	r3, r3, #24
 8004784:	4937      	ldr	r1, [pc, #220]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 8004786:	4313      	orrs	r3, r2
 8004788:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800478a:	4b37      	ldr	r3, [pc, #220]	; (8004868 <HAL_RCC_OscConfig+0x4ec>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7fe ff1e 	bl	80035d0 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004798:	f7fe ff1a 	bl	80035d0 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e056      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047aa:	4b2e      	ldr	r3, [pc, #184]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0x41c>
 80047b6:	e04e      	b.n	8004856 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b8:	4b2b      	ldr	r3, [pc, #172]	; (8004868 <HAL_RCC_OscConfig+0x4ec>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047be:	f7fe ff07 	bl	80035d0 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c6:	f7fe ff03 	bl	80035d0 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e03f      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d8:	4b22      	ldr	r3, [pc, #136]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f0      	bne.n	80047c6 <HAL_RCC_OscConfig+0x44a>
 80047e4:	e037      	b.n	8004856 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e032      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047f2:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d028      	beq.n	8004852 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d121      	bne.n	8004852 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004818:	429a      	cmp	r2, r3
 800481a:	d11a      	bne.n	8004852 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004822:	4013      	ands	r3, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004828:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800482a:	4293      	cmp	r3, r2
 800482c:	d111      	bne.n	8004852 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	3b01      	subs	r3, #1
 800483c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d107      	bne.n	8004852 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d001      	beq.n	8004856 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40007000 	.word	0x40007000
 8004864:	40023800 	.word	0x40023800
 8004868:	42470060 	.word	0x42470060

0800486c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0cc      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004880:	4b68      	ldr	r3, [pc, #416]	; (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d90c      	bls.n	80048a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b65      	ldr	r3, [pc, #404]	; (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b63      	ldr	r3, [pc, #396]	; (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0b8      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d020      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c0:	4b59      	ldr	r3, [pc, #356]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4a58      	ldr	r2, [pc, #352]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d8:	4b53      	ldr	r3, [pc, #332]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4a52      	ldr	r2, [pc, #328]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e4:	4b50      	ldr	r3, [pc, #320]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	494d      	ldr	r1, [pc, #308]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d044      	beq.n	800498c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d107      	bne.n	800491a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d119      	bne.n	800494a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07f      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d003      	beq.n	800492a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004926:	2b03      	cmp	r3, #3
 8004928:	d107      	bne.n	800493a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492a:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e06f      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493a:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e067      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800494a:	4b37      	ldr	r3, [pc, #220]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f023 0203 	bic.w	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4934      	ldr	r1, [pc, #208]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	4313      	orrs	r3, r2
 800495a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800495c:	f7fe fe38 	bl	80035d0 <HAL_GetTick>
 8004960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	e00a      	b.n	800497a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004964:	f7fe fe34 	bl	80035d0 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e04f      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	4b2b      	ldr	r3, [pc, #172]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 020c 	and.w	r2, r3, #12
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	429a      	cmp	r2, r3
 800498a:	d1eb      	bne.n	8004964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800498c:	4b25      	ldr	r3, [pc, #148]	; (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d20c      	bcs.n	80049b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499a:	4b22      	ldr	r3, [pc, #136]	; (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_RCC_ClockConfig+0x1b8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e032      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c0:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4916      	ldr	r1, [pc, #88]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	490e      	ldr	r1, [pc, #56]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049f2:	f000 f821 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 80049f6:	4602      	mov	r2, r0
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	091b      	lsrs	r3, r3, #4
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	490a      	ldr	r1, [pc, #40]	; (8004a2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a04:	5ccb      	ldrb	r3, [r1, r3]
 8004a06:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0a:	4a09      	ldr	r2, [pc, #36]	; (8004a30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_RCC_ClockConfig+0x1c8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe fd98 	bl	8003548 <HAL_InitTick>

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023c00 	.word	0x40023c00
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	08007114 	.word	0x08007114
 8004a30:	20000014 	.word	0x20000014
 8004a34:	20000018 	.word	0x20000018

08004a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a50:	4b67      	ldr	r3, [pc, #412]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 030c 	and.w	r3, r3, #12
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d00d      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x40>
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	f200 80bd 	bhi.w	8004bdc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x34>
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d003      	beq.n	8004a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a6a:	e0b7      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a6c:	4b61      	ldr	r3, [pc, #388]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a6e:	60bb      	str	r3, [r7, #8]
       break;
 8004a70:	e0b7      	b.n	8004be2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a72:	4b61      	ldr	r3, [pc, #388]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a74:	60bb      	str	r3, [r7, #8]
      break;
 8004a76:	e0b4      	b.n	8004be2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a78:	4b5d      	ldr	r3, [pc, #372]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a82:	4b5b      	ldr	r3, [pc, #364]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d04d      	beq.n	8004b2a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8e:	4b58      	ldr	r3, [pc, #352]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	461a      	mov	r2, r3
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	ea02 0800 	and.w	r8, r2, r0
 8004aa6:	ea03 0901 	and.w	r9, r3, r1
 8004aaa:	4640      	mov	r0, r8
 8004aac:	4649      	mov	r1, r9
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	014b      	lsls	r3, r1, #5
 8004ab8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004abc:	0142      	lsls	r2, r0, #5
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	ebb0 0008 	subs.w	r0, r0, r8
 8004ac6:	eb61 0109 	sbc.w	r1, r1, r9
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	018b      	lsls	r3, r1, #6
 8004ad4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ad8:	0182      	lsls	r2, r0, #6
 8004ada:	1a12      	subs	r2, r2, r0
 8004adc:	eb63 0301 	sbc.w	r3, r3, r1
 8004ae0:	f04f 0000 	mov.w	r0, #0
 8004ae4:	f04f 0100 	mov.w	r1, #0
 8004ae8:	00d9      	lsls	r1, r3, #3
 8004aea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004aee:	00d0      	lsls	r0, r2, #3
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	eb12 0208 	adds.w	r2, r2, r8
 8004af8:	eb43 0309 	adc.w	r3, r3, r9
 8004afc:	f04f 0000 	mov.w	r0, #0
 8004b00:	f04f 0100 	mov.w	r1, #0
 8004b04:	0259      	lsls	r1, r3, #9
 8004b06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b0a:	0250      	lsls	r0, r2, #9
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4610      	mov	r0, r2
 8004b12:	4619      	mov	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	f7fc f946 	bl	8000dac <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4613      	mov	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	e04a      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2a:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	099b      	lsrs	r3, r3, #6
 8004b30:	461a      	mov	r2, r3
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b3a:	f04f 0100 	mov.w	r1, #0
 8004b3e:	ea02 0400 	and.w	r4, r2, r0
 8004b42:	ea03 0501 	and.w	r5, r3, r1
 8004b46:	4620      	mov	r0, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	014b      	lsls	r3, r1, #5
 8004b54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b58:	0142      	lsls	r2, r0, #5
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	1b00      	subs	r0, r0, r4
 8004b60:	eb61 0105 	sbc.w	r1, r1, r5
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	018b      	lsls	r3, r1, #6
 8004b6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b72:	0182      	lsls	r2, r0, #6
 8004b74:	1a12      	subs	r2, r2, r0
 8004b76:	eb63 0301 	sbc.w	r3, r3, r1
 8004b7a:	f04f 0000 	mov.w	r0, #0
 8004b7e:	f04f 0100 	mov.w	r1, #0
 8004b82:	00d9      	lsls	r1, r3, #3
 8004b84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b88:	00d0      	lsls	r0, r2, #3
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	1912      	adds	r2, r2, r4
 8004b90:	eb45 0303 	adc.w	r3, r5, r3
 8004b94:	f04f 0000 	mov.w	r0, #0
 8004b98:	f04f 0100 	mov.w	r1, #0
 8004b9c:	0299      	lsls	r1, r3, #10
 8004b9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ba2:	0290      	lsls	r0, r2, #10
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4619      	mov	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	f7fc f8fa 	bl	8000dac <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	3301      	adds	r3, #1
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd8:	60bb      	str	r3, [r7, #8]
      break;
 8004bda:	e002      	b.n	8004be2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004bde:	60bb      	str	r3, [r7, #8]
      break;
 8004be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004be2:	68bb      	ldr	r3, [r7, #8]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	00f42400 	.word	0x00f42400
 8004bf8:	007a1200 	.word	0x007a1200

08004bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c00:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c02:	681b      	ldr	r3, [r3, #0]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	20000014 	.word	0x20000014

08004c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c18:	f7ff fff0 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	0a9b      	lsrs	r3, r3, #10
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	4903      	ldr	r1, [pc, #12]	; (8004c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40023800 	.word	0x40023800
 8004c38:	08007124 	.word	0x08007124

08004c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c40:	f7ff ffdc 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	0b5b      	lsrs	r3, r3, #13
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4903      	ldr	r1, [pc, #12]	; (8004c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	08007124 	.word	0x08007124

08004c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e041      	b.n	8004cfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fe fa46 	bl	800311c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f000 fdda 	bl	800585c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d001      	beq.n	8004d1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e03c      	b.n	8004d96 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1e      	ldr	r2, [pc, #120]	; (8004da4 <HAL_TIM_Base_Start+0xa0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d018      	beq.n	8004d60 <HAL_TIM_Base_Start+0x5c>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d013      	beq.n	8004d60 <HAL_TIM_Base_Start+0x5c>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1a      	ldr	r2, [pc, #104]	; (8004da8 <HAL_TIM_Base_Start+0xa4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00e      	beq.n	8004d60 <HAL_TIM_Base_Start+0x5c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a19      	ldr	r2, [pc, #100]	; (8004dac <HAL_TIM_Base_Start+0xa8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d009      	beq.n	8004d60 <HAL_TIM_Base_Start+0x5c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a17      	ldr	r2, [pc, #92]	; (8004db0 <HAL_TIM_Base_Start+0xac>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_TIM_Base_Start+0x5c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a16      	ldr	r2, [pc, #88]	; (8004db4 <HAL_TIM_Base_Start+0xb0>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d111      	bne.n	8004d84 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b06      	cmp	r3, #6
 8004d70:	d010      	beq.n	8004d94 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0201 	orr.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d82:	e007      	b.n	8004d94 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40010000 	.word	0x40010000
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800
 8004db0:	40000c00 	.word	0x40000c00
 8004db4:	40014000 	.word	0x40014000

08004db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d001      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e044      	b.n	8004e5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1e      	ldr	r2, [pc, #120]	; (8004e68 <HAL_TIM_Base_Start_IT+0xb0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d018      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x6c>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfa:	d013      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x6c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1a      	ldr	r2, [pc, #104]	; (8004e6c <HAL_TIM_Base_Start_IT+0xb4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00e      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x6c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x6c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x6c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d111      	bne.n	8004e48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b06      	cmp	r3, #6
 8004e34:	d010      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0201 	orr.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e46:	e007      	b.n	8004e58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40014000 	.word	0x40014000

08004e7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e041      	b.n	8004f12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f839 	bl	8004f1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f000 fcce 	bl	800585c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
	...

08004f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <HAL_TIM_PWM_Start+0x24>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	bf14      	ite	ne
 8004f4c:	2301      	movne	r3, #1
 8004f4e:	2300      	moveq	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	e022      	b.n	8004f9a <HAL_TIM_PWM_Start+0x6a>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d109      	bne.n	8004f6e <HAL_TIM_PWM_Start+0x3e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	bf14      	ite	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	2300      	moveq	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	e015      	b.n	8004f9a <HAL_TIM_PWM_Start+0x6a>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d109      	bne.n	8004f88 <HAL_TIM_PWM_Start+0x58>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	e008      	b.n	8004f9a <HAL_TIM_PWM_Start+0x6a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	bf14      	ite	ne
 8004f94:	2301      	movne	r3, #1
 8004f96:	2300      	moveq	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e068      	b.n	8005074 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d104      	bne.n	8004fb2 <HAL_TIM_PWM_Start+0x82>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fb0:	e013      	b.n	8004fda <HAL_TIM_PWM_Start+0xaa>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d104      	bne.n	8004fc2 <HAL_TIM_PWM_Start+0x92>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc0:	e00b      	b.n	8004fda <HAL_TIM_PWM_Start+0xaa>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d104      	bne.n	8004fd2 <HAL_TIM_PWM_Start+0xa2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd0:	e003      	b.n	8004fda <HAL_TIM_PWM_Start+0xaa>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	6839      	ldr	r1, [r7, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fee0 	bl	8005da8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a23      	ldr	r2, [pc, #140]	; (800507c <HAL_TIM_PWM_Start+0x14c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d107      	bne.n	8005002 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005000:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1d      	ldr	r2, [pc, #116]	; (800507c <HAL_TIM_PWM_Start+0x14c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d018      	beq.n	800503e <HAL_TIM_PWM_Start+0x10e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005014:	d013      	beq.n	800503e <HAL_TIM_PWM_Start+0x10e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a19      	ldr	r2, [pc, #100]	; (8005080 <HAL_TIM_PWM_Start+0x150>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00e      	beq.n	800503e <HAL_TIM_PWM_Start+0x10e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a17      	ldr	r2, [pc, #92]	; (8005084 <HAL_TIM_PWM_Start+0x154>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_TIM_PWM_Start+0x10e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a16      	ldr	r2, [pc, #88]	; (8005088 <HAL_TIM_PWM_Start+0x158>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_TIM_PWM_Start+0x10e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a14      	ldr	r2, [pc, #80]	; (800508c <HAL_TIM_PWM_Start+0x15c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d111      	bne.n	8005062 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b06      	cmp	r3, #6
 800504e:	d010      	beq.n	8005072 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005060:	e007      	b.n	8005072 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40010000 	.word	0x40010000
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800
 8005088:	40000c00 	.word	0x40000c00
 800508c:	40014000 	.word	0x40014000

08005090 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e097      	b.n	80051d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7fd ffe7 	bl	800308c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050d4:	f023 0307 	bic.w	r3, r3, #7
 80050d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f000 fbb9 	bl	800585c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005112:	f023 0303 	bic.w	r3, r3, #3
 8005116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	4313      	orrs	r3, r2
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005130:	f023 030c 	bic.w	r3, r3, #12
 8005134:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800513c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	4313      	orrs	r3, r2
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	011a      	lsls	r2, r3, #4
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	031b      	lsls	r3, r3, #12
 8005160:	4313      	orrs	r3, r2
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800516e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005176:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	4313      	orrs	r3, r2
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005204:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d110      	bne.n	800522e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d102      	bne.n	8005218 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005212:	7b7b      	ldrb	r3, [r7, #13]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d001      	beq.n	800521c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e069      	b.n	80052f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800522c:	e031      	b.n	8005292 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b04      	cmp	r3, #4
 8005232:	d110      	bne.n	8005256 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005234:	7bbb      	ldrb	r3, [r7, #14]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d102      	bne.n	8005240 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800523a:	7b3b      	ldrb	r3, [r7, #12]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d001      	beq.n	8005244 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e055      	b.n	80052f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005254:	e01d      	b.n	8005292 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d108      	bne.n	800526e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800525c:	7bbb      	ldrb	r3, [r7, #14]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d105      	bne.n	800526e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005262:	7b7b      	ldrb	r3, [r7, #13]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d102      	bne.n	800526e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005268:	7b3b      	ldrb	r3, [r7, #12]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d001      	beq.n	8005272 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e03e      	b.n	80052f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2202      	movs	r2, #2
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_TIM_Encoder_Start+0xc4>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b04      	cmp	r3, #4
 800529c:	d008      	beq.n	80052b0 <HAL_TIM_Encoder_Start+0xd4>
 800529e:	e00f      	b.n	80052c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2201      	movs	r2, #1
 80052a6:	2100      	movs	r1, #0
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fd7d 	bl	8005da8 <TIM_CCxChannelCmd>
      break;
 80052ae:	e016      	b.n	80052de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2201      	movs	r2, #1
 80052b6:	2104      	movs	r1, #4
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fd75 	bl	8005da8 <TIM_CCxChannelCmd>
      break;
 80052be:	e00e      	b.n	80052de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2201      	movs	r2, #1
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fd6d 	bl	8005da8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2201      	movs	r2, #1
 80052d4:	2104      	movs	r1, #4
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fd66 	bl	8005da8 <TIM_CCxChannelCmd>
      break;
 80052dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0201 	orr.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b02      	cmp	r3, #2
 800530c:	d122      	bne.n	8005354 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b02      	cmp	r3, #2
 800531a:	d11b      	bne.n	8005354 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0202 	mvn.w	r2, #2
 8005324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fa70 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 8005340:	e005      	b.n	800534e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fa62 	bl	800580c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fa73 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b04      	cmp	r3, #4
 8005360:	d122      	bne.n	80053a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b04      	cmp	r3, #4
 800536e:	d11b      	bne.n	80053a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0204 	mvn.w	r2, #4
 8005378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa46 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 8005394:	e005      	b.n	80053a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fa38 	bl	800580c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fa49 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d122      	bne.n	80053fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d11b      	bne.n	80053fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0208 	mvn.w	r2, #8
 80053cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2204      	movs	r2, #4
 80053d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa1c 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa0e 	bl	800580c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fa1f 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b10      	cmp	r3, #16
 8005408:	d122      	bne.n	8005450 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b10      	cmp	r3, #16
 8005416:	d11b      	bne.n	8005450 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0210 	mvn.w	r2, #16
 8005420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2208      	movs	r2, #8
 8005426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f9f2 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f9e4 	bl	800580c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f9f5 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b01      	cmp	r3, #1
 800545c:	d10e      	bne.n	800547c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d107      	bne.n	800547c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0201 	mvn.w	r2, #1
 8005474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fc fa72 	bl	8001960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005486:	2b80      	cmp	r3, #128	; 0x80
 8005488:	d10e      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005494:	2b80      	cmp	r3, #128	; 0x80
 8005496:	d107      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fd1e 	bl	8005ee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d10e      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c0:	2b40      	cmp	r3, #64	; 0x40
 80054c2:	d107      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f9ba 	bl	8005848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d10e      	bne.n	8005500 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d107      	bne.n	8005500 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0220 	mvn.w	r2, #32
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fce8 	bl	8005ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800551e:	2302      	movs	r3, #2
 8005520:	e0ac      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b0c      	cmp	r3, #12
 800552e:	f200 809f 	bhi.w	8005670 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005532:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	0800556d 	.word	0x0800556d
 800553c:	08005671 	.word	0x08005671
 8005540:	08005671 	.word	0x08005671
 8005544:	08005671 	.word	0x08005671
 8005548:	080055ad 	.word	0x080055ad
 800554c:	08005671 	.word	0x08005671
 8005550:	08005671 	.word	0x08005671
 8005554:	08005671 	.word	0x08005671
 8005558:	080055ef 	.word	0x080055ef
 800555c:	08005671 	.word	0x08005671
 8005560:	08005671 	.word	0x08005671
 8005564:	08005671 	.word	0x08005671
 8005568:	0800562f 	.word	0x0800562f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f9f2 	bl	800595c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0208 	orr.w	r2, r2, #8
 8005586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0204 	bic.w	r2, r2, #4
 8005596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6999      	ldr	r1, [r3, #24]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	619a      	str	r2, [r3, #24]
      break;
 80055aa:	e062      	b.n	8005672 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fa38 	bl	8005a28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6999      	ldr	r1, [r3, #24]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	021a      	lsls	r2, r3, #8
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	619a      	str	r2, [r3, #24]
      break;
 80055ec:	e041      	b.n	8005672 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fa83 	bl	8005b00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0208 	orr.w	r2, r2, #8
 8005608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0204 	bic.w	r2, r2, #4
 8005618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69d9      	ldr	r1, [r3, #28]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	61da      	str	r2, [r3, #28]
      break;
 800562c:	e021      	b.n	8005672 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	4618      	mov	r0, r3
 8005636:	f000 facd 	bl	8005bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69d9      	ldr	r1, [r3, #28]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	021a      	lsls	r2, r3, #8
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	61da      	str	r2, [r3, #28]
      break;
 800566e:	e000      	b.n	8005672 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005670:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_TIM_ConfigClockSource+0x18>
 8005698:	2302      	movs	r3, #2
 800569a:	e0b3      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x180>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d4:	d03e      	beq.n	8005754 <HAL_TIM_ConfigClockSource+0xd0>
 80056d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056da:	f200 8087 	bhi.w	80057ec <HAL_TIM_ConfigClockSource+0x168>
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e2:	f000 8085 	beq.w	80057f0 <HAL_TIM_ConfigClockSource+0x16c>
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ea:	d87f      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x168>
 80056ec:	2b70      	cmp	r3, #112	; 0x70
 80056ee:	d01a      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0xa2>
 80056f0:	2b70      	cmp	r3, #112	; 0x70
 80056f2:	d87b      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x168>
 80056f4:	2b60      	cmp	r3, #96	; 0x60
 80056f6:	d050      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x116>
 80056f8:	2b60      	cmp	r3, #96	; 0x60
 80056fa:	d877      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x168>
 80056fc:	2b50      	cmp	r3, #80	; 0x50
 80056fe:	d03c      	beq.n	800577a <HAL_TIM_ConfigClockSource+0xf6>
 8005700:	2b50      	cmp	r3, #80	; 0x50
 8005702:	d873      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x168>
 8005704:	2b40      	cmp	r3, #64	; 0x40
 8005706:	d058      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x136>
 8005708:	2b40      	cmp	r3, #64	; 0x40
 800570a:	d86f      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x168>
 800570c:	2b30      	cmp	r3, #48	; 0x30
 800570e:	d064      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x156>
 8005710:	2b30      	cmp	r3, #48	; 0x30
 8005712:	d86b      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x168>
 8005714:	2b20      	cmp	r3, #32
 8005716:	d060      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x156>
 8005718:	2b20      	cmp	r3, #32
 800571a:	d867      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x168>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d05c      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x156>
 8005720:	2b10      	cmp	r3, #16
 8005722:	d05a      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005724:	e062      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	6899      	ldr	r1, [r3, #8]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f000 fb17 	bl	8005d68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005748:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	609a      	str	r2, [r3, #8]
      break;
 8005752:	e04e      	b.n	80057f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	6899      	ldr	r1, [r3, #8]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f000 fb00 	bl	8005d68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005776:	609a      	str	r2, [r3, #8]
      break;
 8005778:	e03b      	b.n	80057f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6859      	ldr	r1, [r3, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	461a      	mov	r2, r3
 8005788:	f000 fa74 	bl	8005c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2150      	movs	r1, #80	; 0x50
 8005792:	4618      	mov	r0, r3
 8005794:	f000 facd 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 8005798:	e02b      	b.n	80057f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6859      	ldr	r1, [r3, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f000 fa93 	bl	8005cd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2160      	movs	r1, #96	; 0x60
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fabd 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 80057b8:	e01b      	b.n	80057f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6859      	ldr	r1, [r3, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f000 fa54 	bl	8005c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2140      	movs	r1, #64	; 0x40
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 faad 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 80057d8:	e00b      	b.n	80057f2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f000 faa4 	bl	8005d32 <TIM_ITRx_SetConfig>
        break;
 80057ea:	e002      	b.n	80057f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80057ec:	bf00      	nop
 80057ee:	e000      	b.n	80057f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80057f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a34      	ldr	r2, [pc, #208]	; (8005940 <TIM_Base_SetConfig+0xe4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00f      	beq.n	8005894 <TIM_Base_SetConfig+0x38>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587a:	d00b      	beq.n	8005894 <TIM_Base_SetConfig+0x38>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a31      	ldr	r2, [pc, #196]	; (8005944 <TIM_Base_SetConfig+0xe8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d007      	beq.n	8005894 <TIM_Base_SetConfig+0x38>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a30      	ldr	r2, [pc, #192]	; (8005948 <TIM_Base_SetConfig+0xec>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_Base_SetConfig+0x38>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a2f      	ldr	r2, [pc, #188]	; (800594c <TIM_Base_SetConfig+0xf0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d108      	bne.n	80058a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a25      	ldr	r2, [pc, #148]	; (8005940 <TIM_Base_SetConfig+0xe4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01b      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b4:	d017      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a22      	ldr	r2, [pc, #136]	; (8005944 <TIM_Base_SetConfig+0xe8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a21      	ldr	r2, [pc, #132]	; (8005948 <TIM_Base_SetConfig+0xec>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00f      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a20      	ldr	r2, [pc, #128]	; (800594c <TIM_Base_SetConfig+0xf0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00b      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a1f      	ldr	r2, [pc, #124]	; (8005950 <TIM_Base_SetConfig+0xf4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d007      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a1e      	ldr	r2, [pc, #120]	; (8005954 <TIM_Base_SetConfig+0xf8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a1d      	ldr	r2, [pc, #116]	; (8005958 <TIM_Base_SetConfig+0xfc>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d108      	bne.n	80058f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a08      	ldr	r2, [pc, #32]	; (8005940 <TIM_Base_SetConfig+0xe4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d103      	bne.n	800592c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	615a      	str	r2, [r3, #20]
}
 8005932:	bf00      	nop
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40010000 	.word	0x40010000
 8005944:	40000400 	.word	0x40000400
 8005948:	40000800 	.word	0x40000800
 800594c:	40000c00 	.word	0x40000c00
 8005950:	40014000 	.word	0x40014000
 8005954:	40014400 	.word	0x40014400
 8005958:	40014800 	.word	0x40014800

0800595c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f023 0201 	bic.w	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f023 0302 	bic.w	r3, r3, #2
 80059a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a1c      	ldr	r2, [pc, #112]	; (8005a24 <TIM_OC1_SetConfig+0xc8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d10c      	bne.n	80059d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f023 0308 	bic.w	r3, r3, #8
 80059be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f023 0304 	bic.w	r3, r3, #4
 80059d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <TIM_OC1_SetConfig+0xc8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d111      	bne.n	80059fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	621a      	str	r2, [r3, #32]
}
 8005a18:	bf00      	nop
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	40010000 	.word	0x40010000

08005a28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f023 0210 	bic.w	r2, r3, #16
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f023 0320 	bic.w	r3, r3, #32
 8005a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a1e      	ldr	r2, [pc, #120]	; (8005afc <TIM_OC2_SetConfig+0xd4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d10d      	bne.n	8005aa4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a15      	ldr	r2, [pc, #84]	; (8005afc <TIM_OC2_SetConfig+0xd4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d113      	bne.n	8005ad4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	621a      	str	r2, [r3, #32]
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40010000 	.word	0x40010000

08005b00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0303 	bic.w	r3, r3, #3
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	021b      	lsls	r3, r3, #8
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1d      	ldr	r2, [pc, #116]	; (8005bd0 <TIM_OC3_SetConfig+0xd0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d10d      	bne.n	8005b7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a14      	ldr	r2, [pc, #80]	; (8005bd0 <TIM_OC3_SetConfig+0xd0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d113      	bne.n	8005baa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	621a      	str	r2, [r3, #32]
}
 8005bc4:	bf00      	nop
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	40010000 	.word	0x40010000

08005bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	021b      	lsls	r3, r3, #8
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	031b      	lsls	r3, r3, #12
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a10      	ldr	r2, [pc, #64]	; (8005c70 <TIM_OC4_SetConfig+0x9c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d109      	bne.n	8005c48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	019b      	lsls	r3, r3, #6
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40010000 	.word	0x40010000

08005c74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f023 0201 	bic.w	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f023 030a 	bic.w	r3, r3, #10
 8005cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b087      	sub	sp, #28
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f023 0210 	bic.w	r2, r3, #16
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	031b      	lsls	r3, r3, #12
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f043 0307 	orr.w	r3, r3, #7
 8005d54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	609a      	str	r2, [r3, #8]
}
 8005d5c:	bf00      	nop
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	021a      	lsls	r2, r3, #8
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	609a      	str	r2, [r3, #8]
}
 8005d9c:	bf00      	nop
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f003 031f 	and.w	r3, r3, #31
 8005dba:	2201      	movs	r2, #1
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1a      	ldr	r2, [r3, #32]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	401a      	ands	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1a      	ldr	r2, [r3, #32]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8005de0:	431a      	orrs	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e050      	b.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d018      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e58:	d013      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a18      	ldr	r2, [pc, #96]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00e      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a16      	ldr	r2, [pc, #88]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d009      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a15      	ldr	r2, [pc, #84]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d004      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a13      	ldr	r2, [pc, #76]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d10c      	bne.n	8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40010000 	.word	0x40010000
 8005ec0:	40000400 	.word	0x40000400
 8005ec4:	40000800 	.word	0x40000800
 8005ec8:	40000c00 	.word	0x40000c00
 8005ecc:	40014000 	.word	0x40014000

08005ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e03f      	b.n	8005f8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fd f972 	bl	8003208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2224      	movs	r2, #36	; 0x24
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fd51 	bl	80069e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695a      	ldr	r2, [r3, #20]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d153      	bne.n	8006056 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <HAL_UART_Transmit_DMA+0x26>
 8005fb4:	88fb      	ldrh	r3, [r7, #6]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e04c      	b.n	8006058 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_UART_Transmit_DMA+0x38>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e045      	b.n	8006058 <HAL_UART_Transmit_DMA+0xc4>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	88fa      	ldrh	r2, [r7, #6]
 8005fde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	88fa      	ldrh	r2, [r7, #6]
 8005fe4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2221      	movs	r2, #33	; 0x21
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff8:	4a19      	ldr	r2, [pc, #100]	; (8006060 <HAL_UART_Transmit_DMA+0xcc>)
 8005ffa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006000:	4a18      	ldr	r2, [pc, #96]	; (8006064 <HAL_UART_Transmit_DMA+0xd0>)
 8006002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006008:	4a17      	ldr	r2, [pc, #92]	; (8006068 <HAL_UART_Transmit_DMA+0xd4>)
 800600a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006010:	2200      	movs	r2, #0
 8006012:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006014:	f107 0308 	add.w	r3, r7, #8
 8006018:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	6819      	ldr	r1, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3304      	adds	r3, #4
 8006028:	461a      	mov	r2, r3
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	f7fd fc9c 	bl	8003968 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006038:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695a      	ldr	r2, [r3, #20]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006050:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	e000      	b.n	8006058 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006056:	2302      	movs	r3, #2
  }
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	080064a1 	.word	0x080064a1
 8006064:	080064f3 	.word	0x080064f3
 8006068:	080065db 	.word	0x080065db

0800606c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b20      	cmp	r3, #32
 8006084:	d11d      	bne.n	80060c2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <HAL_UART_Receive_DMA+0x26>
 800608c:	88fb      	ldrh	r3, [r7, #6]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e016      	b.n	80060c4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_UART_Receive_DMA+0x38>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e00f      	b.n	80060c4 <HAL_UART_Receive_DMA+0x58>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80060b2:	88fb      	ldrh	r3, [r7, #6]
 80060b4:	461a      	mov	r2, r3
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 fad9 	bl	8006670 <UART_Start_Receive_DMA>
 80060be:	4603      	mov	r3, r0
 80060c0:	e000      	b.n	80060c4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80060c2:	2302      	movs	r3, #2
  }
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10d      	bne.n	800611e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	f003 0320 	and.w	r3, r3, #32
 8006108:	2b00      	cmp	r3, #0
 800610a:	d008      	beq.n	800611e <HAL_UART_IRQHandler+0x52>
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fbcd 	bl	80068b6 <UART_Receive_IT>
      return;
 800611c:	e17c      	b.n	8006418 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 80b1 	beq.w	8006288 <HAL_UART_IRQHandler+0x1bc>
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d105      	bne.n	800613c <HAL_UART_IRQHandler+0x70>
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 80a6 	beq.w	8006288 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <HAL_UART_IRQHandler+0x90>
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	f043 0201 	orr.w	r2, r3, #1
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <HAL_UART_IRQHandler+0xb0>
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	f043 0202 	orr.w	r2, r3, #2
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <HAL_UART_IRQHandler+0xd0>
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d005      	beq.n	800619c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	f043 0204 	orr.w	r2, r3, #4
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00f      	beq.n	80061c6 <HAL_UART_IRQHandler+0xfa>
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <HAL_UART_IRQHandler+0xee>
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f043 0208 	orr.w	r2, r3, #8
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 811f 	beq.w	800640e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d007      	beq.n	80061ea <HAL_UART_IRQHandler+0x11e>
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fb66 	bl	80068b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	bf0c      	ite	eq
 80061f8:	2301      	moveq	r3, #1
 80061fa:	2300      	movne	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <HAL_UART_IRQHandler+0x146>
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d031      	beq.n	8006276 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 faa6 	bl	8006764 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006222:	2b40      	cmp	r3, #64	; 0x40
 8006224:	d123      	bne.n	800626e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695a      	ldr	r2, [r3, #20]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006234:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	2b00      	cmp	r3, #0
 800623c:	d013      	beq.n	8006266 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	4a77      	ldr	r2, [pc, #476]	; (8006420 <HAL_UART_IRQHandler+0x354>)
 8006244:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	4618      	mov	r0, r3
 800624c:	f7fd fc54 	bl	8003af8 <HAL_DMA_Abort_IT>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d016      	beq.n	8006284 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006260:	4610      	mov	r0, r2
 8006262:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006264:	e00e      	b.n	8006284 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f904 	bl	8006474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626c:	e00a      	b.n	8006284 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f900 	bl	8006474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006274:	e006      	b.n	8006284 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f8fc 	bl	8006474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006282:	e0c4      	b.n	800640e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006284:	bf00      	nop
    return;
 8006286:	e0c2      	b.n	800640e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628c:	2b01      	cmp	r3, #1
 800628e:	f040 80a2 	bne.w	80063d6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 809c 	beq.w	80063d6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 8096 	beq.w	80063d6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b40      	cmp	r3, #64	; 0x40
 80062cc:	d14f      	bne.n	800636e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80062d8:	8a3b      	ldrh	r3, [r7, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8099 	beq.w	8006412 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062e4:	8a3a      	ldrh	r2, [r7, #16]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	f080 8093 	bcs.w	8006412 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	8a3a      	ldrh	r2, [r7, #16]
 80062f0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062fc:	d02b      	beq.n	8006356 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800630c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695a      	ldr	r2, [r3, #20]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0201 	bic.w	r2, r2, #1
 800631c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	695a      	ldr	r2, [r3, #20]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800632c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2220      	movs	r2, #32
 8006332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0210 	bic.w	r2, r2, #16
 800634a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	4618      	mov	r0, r3
 8006352:	f7fd fb61 	bl	8003a18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800635e:	b29b      	uxth	r3, r3
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	b29b      	uxth	r3, r3
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f88e 	bl	8006488 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800636c:	e051      	b.n	8006412 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006376:	b29b      	uxth	r3, r3
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d047      	beq.n	8006416 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006386:	8a7b      	ldrh	r3, [r7, #18]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d044      	beq.n	8006416 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800639a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695a      	ldr	r2, [r3, #20]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0201 	bic.w	r2, r2, #1
 80063aa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0210 	bic.w	r2, r2, #16
 80063c8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063ca:	8a7b      	ldrh	r3, [r7, #18]
 80063cc:	4619      	mov	r1, r3
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f85a 	bl	8006488 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80063d4:	e01f      	b.n	8006416 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <HAL_UART_IRQHandler+0x326>
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f9fb 	bl	80067e6 <UART_Transmit_IT>
    return;
 80063f0:	e012      	b.n	8006418 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00d      	beq.n	8006418 <HAL_UART_IRQHandler+0x34c>
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d008      	beq.n	8006418 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa3d 	bl	8006886 <UART_EndTransmit_IT>
    return;
 800640c:	e004      	b.n	8006418 <HAL_UART_IRQHandler+0x34c>
    return;
 800640e:	bf00      	nop
 8006410:	e002      	b.n	8006418 <HAL_UART_IRQHandler+0x34c>
      return;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <HAL_UART_IRQHandler+0x34c>
      return;
 8006416:	bf00      	nop
  }
}
 8006418:	3728      	adds	r7, #40	; 0x28
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	080067bf 	.word	0x080067bf

08006424 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d113      	bne.n	80064e4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	695a      	ldr	r2, [r3, #20]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064d0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064e2:	e002      	b.n	80064ea <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f7ff ff9d 	bl	8006424 <HAL_UART_TxCpltCallback>
}
 80064ea:	bf00      	nop
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f7ff ff99 	bl	8006438 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006526:	2b00      	cmp	r3, #0
 8006528:	d12a      	bne.n	8006580 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800653e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695a      	ldr	r2, [r3, #20]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695a      	ldr	r2, [r3, #20]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	2b01      	cmp	r3, #1
 800656e:	d107      	bne.n	8006580 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0210 	bic.w	r2, r2, #16
 800657e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	2b01      	cmp	r3, #1
 8006586:	d106      	bne.n	8006596 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800658c:	4619      	mov	r1, r3
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff ff7a 	bl	8006488 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006594:	e002      	b.n	800659c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7ff ff58 	bl	800644c <HAL_UART_RxCpltCallback>
}
 800659c:	bf00      	nop
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d108      	bne.n	80065cc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065be:	085b      	lsrs	r3, r3, #1
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	4619      	mov	r1, r3
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f7ff ff5f 	bl	8006488 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065ca:	e002      	b.n	80065d2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff ff47 	bl	8006460 <HAL_UART_RxHalfCpltCallback>
}
 80065d2:	bf00      	nop
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b80      	cmp	r3, #128	; 0x80
 80065f8:	bf0c      	ite	eq
 80065fa:	2301      	moveq	r3, #1
 80065fc:	2300      	movne	r3, #0
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b21      	cmp	r3, #33	; 0x21
 800660c:	d108      	bne.n	8006620 <UART_DMAError+0x46>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2200      	movs	r2, #0
 8006618:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800661a:	68b8      	ldr	r0, [r7, #8]
 800661c:	f000 f88c 	bl	8006738 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	bf0c      	ite	eq
 800662e:	2301      	moveq	r3, #1
 8006630:	2300      	movne	r3, #0
 8006632:	b2db      	uxtb	r3, r3
 8006634:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b22      	cmp	r3, #34	; 0x22
 8006640:	d108      	bne.n	8006654 <UART_DMAError+0x7a>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2200      	movs	r2, #0
 800664c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800664e:	68b8      	ldr	r0, [r7, #8]
 8006650:	f000 f888 	bl	8006764 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006658:	f043 0210 	orr.w	r2, r3, #16
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006660:	68b8      	ldr	r0, [r7, #8]
 8006662:	f7ff ff07 	bl	8006474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006666:	bf00      	nop
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	88fa      	ldrh	r2, [r7, #6]
 8006688:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2222      	movs	r2, #34	; 0x22
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	4a23      	ldr	r2, [pc, #140]	; (800672c <UART_Start_Receive_DMA+0xbc>)
 800669e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	4a22      	ldr	r2, [pc, #136]	; (8006730 <UART_Start_Receive_DMA+0xc0>)
 80066a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	4a21      	ldr	r2, [pc, #132]	; (8006734 <UART_Start_Receive_DMA+0xc4>)
 80066ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	2200      	movs	r2, #0
 80066b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80066b8:	f107 0308 	add.w	r3, r7, #8
 80066bc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4619      	mov	r1, r3
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	f7fd f94a 	bl	8003968 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80066d4:	2300      	movs	r3, #0
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006700:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695a      	ldr	r2, [r3, #20]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 0201 	orr.w	r2, r2, #1
 8006710:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695a      	ldr	r2, [r3, #20]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006720:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	0800650f 	.word	0x0800650f
 8006730:	080065a5 	.word	0x080065a5
 8006734:	080065db 	.word	0x080065db

08006738 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800674e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800677a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695a      	ldr	r2, [r3, #20]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	2b01      	cmp	r3, #1
 8006792:	d107      	bne.n	80067a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0210 	bic.w	r2, r2, #16
 80067a2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f7ff fe4b 	bl	8006474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b085      	sub	sp, #20
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b21      	cmp	r3, #33	; 0x21
 80067f8:	d13e      	bne.n	8006878 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006802:	d114      	bne.n	800682e <UART_Transmit_IT+0x48>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d110      	bne.n	800682e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006820:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	1c9a      	adds	r2, r3, #2
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	621a      	str	r2, [r3, #32]
 800682c:	e008      	b.n	8006840 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	1c59      	adds	r1, r3, #1
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6211      	str	r1, [r2, #32]
 8006838:	781a      	ldrb	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29b      	uxth	r3, r3
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	4619      	mov	r1, r3
 800684e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10f      	bne.n	8006874 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006862:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006872:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	e000      	b.n	800687a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006878:	2302      	movs	r3, #2
  }
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800689c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff fdbc 	bl	8006424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b22      	cmp	r3, #34	; 0x22
 80068c8:	f040 8087 	bne.w	80069da <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d4:	d117      	bne.n	8006906 <UART_Receive_IT+0x50>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d113      	bne.n	8006906 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	1c9a      	adds	r2, r3, #2
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	629a      	str	r2, [r3, #40]	; 0x28
 8006904:	e026      	b.n	8006954 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800690c:	2300      	movs	r3, #0
 800690e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006918:	d007      	beq.n	800692a <UART_Receive_IT+0x74>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10a      	bne.n	8006938 <UART_Receive_IT+0x82>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d106      	bne.n	8006938 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	b2da      	uxtb	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	e008      	b.n	800694a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	b2db      	uxtb	r3, r3
 8006940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006944:	b2da      	uxtb	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	b29b      	uxth	r3, r3
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	4619      	mov	r1, r3
 8006962:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006964:	2b00      	cmp	r3, #0
 8006966:	d136      	bne.n	80069d6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0220 	bic.w	r2, r2, #32
 8006976:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695a      	ldr	r2, [r3, #20]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0201 	bic.w	r2, r2, #1
 8006996:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d10e      	bne.n	80069c6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0210 	bic.w	r2, r2, #16
 80069b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff fd62 	bl	8006488 <HAL_UARTEx_RxEventCallback>
 80069c4:	e002      	b.n	80069cc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff fd40 	bl	800644c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	e002      	b.n	80069dc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e000      	b.n	80069dc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80069da:	2302      	movs	r3, #2
  }
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	b09f      	sub	sp, #124	; 0x7c
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fa:	68d9      	ldr	r1, [r3, #12]
 80069fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	ea40 0301 	orr.w	r3, r0, r1
 8006a04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	431a      	orrs	r2, r3
 8006a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a28:	f021 010c 	bic.w	r1, r1, #12
 8006a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a32:	430b      	orrs	r3, r1
 8006a34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a42:	6999      	ldr	r1, [r3, #24]
 8006a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	ea40 0301 	orr.w	r3, r0, r1
 8006a4c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4bc5      	ldr	r3, [pc, #788]	; (8006d68 <UART_SetConfig+0x384>)
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d004      	beq.n	8006a62 <UART_SetConfig+0x7e>
 8006a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	4bc3      	ldr	r3, [pc, #780]	; (8006d6c <UART_SetConfig+0x388>)
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d103      	bne.n	8006a6a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a62:	f7fe f8eb 	bl	8004c3c <HAL_RCC_GetPCLK2Freq>
 8006a66:	6778      	str	r0, [r7, #116]	; 0x74
 8006a68:	e002      	b.n	8006a70 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a6a:	f7fe f8d3 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
 8006a6e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a78:	f040 80b6 	bne.w	8006be8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a7e:	461c      	mov	r4, r3
 8006a80:	f04f 0500 	mov.w	r5, #0
 8006a84:	4622      	mov	r2, r4
 8006a86:	462b      	mov	r3, r5
 8006a88:	1891      	adds	r1, r2, r2
 8006a8a:	6439      	str	r1, [r7, #64]	; 0x40
 8006a8c:	415b      	adcs	r3, r3
 8006a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a94:	1912      	adds	r2, r2, r4
 8006a96:	eb45 0303 	adc.w	r3, r5, r3
 8006a9a:	f04f 0000 	mov.w	r0, #0
 8006a9e:	f04f 0100 	mov.w	r1, #0
 8006aa2:	00d9      	lsls	r1, r3, #3
 8006aa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006aa8:	00d0      	lsls	r0, r2, #3
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	1911      	adds	r1, r2, r4
 8006ab0:	6639      	str	r1, [r7, #96]	; 0x60
 8006ab2:	416b      	adcs	r3, r5
 8006ab4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	461a      	mov	r2, r3
 8006abc:	f04f 0300 	mov.w	r3, #0
 8006ac0:	1891      	adds	r1, r2, r2
 8006ac2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ac4:	415b      	adcs	r3, r3
 8006ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ac8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006acc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006ad0:	f7fa f96c 	bl	8000dac <__aeabi_uldivmod>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4ba5      	ldr	r3, [pc, #660]	; (8006d70 <UART_SetConfig+0x38c>)
 8006ada:	fba3 2302 	umull	r2, r3, r3, r2
 8006ade:	095b      	lsrs	r3, r3, #5
 8006ae0:	011e      	lsls	r6, r3, #4
 8006ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae4:	461c      	mov	r4, r3
 8006ae6:	f04f 0500 	mov.w	r5, #0
 8006aea:	4622      	mov	r2, r4
 8006aec:	462b      	mov	r3, r5
 8006aee:	1891      	adds	r1, r2, r2
 8006af0:	6339      	str	r1, [r7, #48]	; 0x30
 8006af2:	415b      	adcs	r3, r3
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
 8006af6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006afa:	1912      	adds	r2, r2, r4
 8006afc:	eb45 0303 	adc.w	r3, r5, r3
 8006b00:	f04f 0000 	mov.w	r0, #0
 8006b04:	f04f 0100 	mov.w	r1, #0
 8006b08:	00d9      	lsls	r1, r3, #3
 8006b0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b0e:	00d0      	lsls	r0, r2, #3
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	1911      	adds	r1, r2, r4
 8006b16:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b18:	416b      	adcs	r3, r5
 8006b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	461a      	mov	r2, r3
 8006b22:	f04f 0300 	mov.w	r3, #0
 8006b26:	1891      	adds	r1, r2, r2
 8006b28:	62b9      	str	r1, [r7, #40]	; 0x28
 8006b2a:	415b      	adcs	r3, r3
 8006b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006b36:	f7fa f939 	bl	8000dac <__aeabi_uldivmod>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4b8c      	ldr	r3, [pc, #560]	; (8006d70 <UART_SetConfig+0x38c>)
 8006b40:	fba3 1302 	umull	r1, r3, r3, r2
 8006b44:	095b      	lsrs	r3, r3, #5
 8006b46:	2164      	movs	r1, #100	; 0x64
 8006b48:	fb01 f303 	mul.w	r3, r1, r3
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	3332      	adds	r3, #50	; 0x32
 8006b52:	4a87      	ldr	r2, [pc, #540]	; (8006d70 <UART_SetConfig+0x38c>)
 8006b54:	fba2 2303 	umull	r2, r3, r2, r3
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b60:	441e      	add	r6, r3
 8006b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b64:	4618      	mov	r0, r3
 8006b66:	f04f 0100 	mov.w	r1, #0
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	1894      	adds	r4, r2, r2
 8006b70:	623c      	str	r4, [r7, #32]
 8006b72:	415b      	adcs	r3, r3
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
 8006b76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b7a:	1812      	adds	r2, r2, r0
 8006b7c:	eb41 0303 	adc.w	r3, r1, r3
 8006b80:	f04f 0400 	mov.w	r4, #0
 8006b84:	f04f 0500 	mov.w	r5, #0
 8006b88:	00dd      	lsls	r5, r3, #3
 8006b8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b8e:	00d4      	lsls	r4, r2, #3
 8006b90:	4622      	mov	r2, r4
 8006b92:	462b      	mov	r3, r5
 8006b94:	1814      	adds	r4, r2, r0
 8006b96:	653c      	str	r4, [r7, #80]	; 0x50
 8006b98:	414b      	adcs	r3, r1
 8006b9a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f04f 0300 	mov.w	r3, #0
 8006ba6:	1891      	adds	r1, r2, r2
 8006ba8:	61b9      	str	r1, [r7, #24]
 8006baa:	415b      	adcs	r3, r3
 8006bac:	61fb      	str	r3, [r7, #28]
 8006bae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bb2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006bb6:	f7fa f8f9 	bl	8000dac <__aeabi_uldivmod>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4b6c      	ldr	r3, [pc, #432]	; (8006d70 <UART_SetConfig+0x38c>)
 8006bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	2164      	movs	r1, #100	; 0x64
 8006bc8:	fb01 f303 	mul.w	r3, r1, r3
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	3332      	adds	r3, #50	; 0x32
 8006bd2:	4a67      	ldr	r2, [pc, #412]	; (8006d70 <UART_SetConfig+0x38c>)
 8006bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd8:	095b      	lsrs	r3, r3, #5
 8006bda:	f003 0207 	and.w	r2, r3, #7
 8006bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4432      	add	r2, r6
 8006be4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006be6:	e0b9      	b.n	8006d5c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bea:	461c      	mov	r4, r3
 8006bec:	f04f 0500 	mov.w	r5, #0
 8006bf0:	4622      	mov	r2, r4
 8006bf2:	462b      	mov	r3, r5
 8006bf4:	1891      	adds	r1, r2, r2
 8006bf6:	6139      	str	r1, [r7, #16]
 8006bf8:	415b      	adcs	r3, r3
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c00:	1912      	adds	r2, r2, r4
 8006c02:	eb45 0303 	adc.w	r3, r5, r3
 8006c06:	f04f 0000 	mov.w	r0, #0
 8006c0a:	f04f 0100 	mov.w	r1, #0
 8006c0e:	00d9      	lsls	r1, r3, #3
 8006c10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c14:	00d0      	lsls	r0, r2, #3
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	eb12 0804 	adds.w	r8, r2, r4
 8006c1e:	eb43 0905 	adc.w	r9, r3, r5
 8006c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f04f 0100 	mov.w	r1, #0
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	f04f 0300 	mov.w	r3, #0
 8006c34:	008b      	lsls	r3, r1, #2
 8006c36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c3a:	0082      	lsls	r2, r0, #2
 8006c3c:	4640      	mov	r0, r8
 8006c3e:	4649      	mov	r1, r9
 8006c40:	f7fa f8b4 	bl	8000dac <__aeabi_uldivmod>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4b49      	ldr	r3, [pc, #292]	; (8006d70 <UART_SetConfig+0x38c>)
 8006c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	011e      	lsls	r6, r3, #4
 8006c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c54:	4618      	mov	r0, r3
 8006c56:	f04f 0100 	mov.w	r1, #0
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	1894      	adds	r4, r2, r2
 8006c60:	60bc      	str	r4, [r7, #8]
 8006c62:	415b      	adcs	r3, r3
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c6a:	1812      	adds	r2, r2, r0
 8006c6c:	eb41 0303 	adc.w	r3, r1, r3
 8006c70:	f04f 0400 	mov.w	r4, #0
 8006c74:	f04f 0500 	mov.w	r5, #0
 8006c78:	00dd      	lsls	r5, r3, #3
 8006c7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c7e:	00d4      	lsls	r4, r2, #3
 8006c80:	4622      	mov	r2, r4
 8006c82:	462b      	mov	r3, r5
 8006c84:	1814      	adds	r4, r2, r0
 8006c86:	64bc      	str	r4, [r7, #72]	; 0x48
 8006c88:	414b      	adcs	r3, r1
 8006c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f04f 0100 	mov.w	r1, #0
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	f04f 0300 	mov.w	r3, #0
 8006c9e:	008b      	lsls	r3, r1, #2
 8006ca0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ca4:	0082      	lsls	r2, r0, #2
 8006ca6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006caa:	f7fa f87f 	bl	8000dac <__aeabi_uldivmod>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4b2f      	ldr	r3, [pc, #188]	; (8006d70 <UART_SetConfig+0x38c>)
 8006cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb8:	095b      	lsrs	r3, r3, #5
 8006cba:	2164      	movs	r1, #100	; 0x64
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	3332      	adds	r3, #50	; 0x32
 8006cc6:	4a2a      	ldr	r2, [pc, #168]	; (8006d70 <UART_SetConfig+0x38c>)
 8006cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cd2:	441e      	add	r6, r3
 8006cd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f04f 0100 	mov.w	r1, #0
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	1894      	adds	r4, r2, r2
 8006ce2:	603c      	str	r4, [r7, #0]
 8006ce4:	415b      	adcs	r3, r3
 8006ce6:	607b      	str	r3, [r7, #4]
 8006ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cec:	1812      	adds	r2, r2, r0
 8006cee:	eb41 0303 	adc.w	r3, r1, r3
 8006cf2:	f04f 0400 	mov.w	r4, #0
 8006cf6:	f04f 0500 	mov.w	r5, #0
 8006cfa:	00dd      	lsls	r5, r3, #3
 8006cfc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d00:	00d4      	lsls	r4, r2, #3
 8006d02:	4622      	mov	r2, r4
 8006d04:	462b      	mov	r3, r5
 8006d06:	eb12 0a00 	adds.w	sl, r2, r0
 8006d0a:	eb43 0b01 	adc.w	fp, r3, r1
 8006d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f04f 0100 	mov.w	r1, #0
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	008b      	lsls	r3, r1, #2
 8006d22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d26:	0082      	lsls	r2, r0, #2
 8006d28:	4650      	mov	r0, sl
 8006d2a:	4659      	mov	r1, fp
 8006d2c:	f7fa f83e 	bl	8000dac <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4b0e      	ldr	r3, [pc, #56]	; (8006d70 <UART_SetConfig+0x38c>)
 8006d36:	fba3 1302 	umull	r1, r3, r3, r2
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	2164      	movs	r1, #100	; 0x64
 8006d3e:	fb01 f303 	mul.w	r3, r1, r3
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	3332      	adds	r3, #50	; 0x32
 8006d48:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <UART_SetConfig+0x38c>)
 8006d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	f003 020f 	and.w	r2, r3, #15
 8006d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4432      	add	r2, r6
 8006d5a:	609a      	str	r2, [r3, #8]
}
 8006d5c:	bf00      	nop
 8006d5e:	377c      	adds	r7, #124	; 0x7c
 8006d60:	46bd      	mov	sp, r7
 8006d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d66:	bf00      	nop
 8006d68:	40011000 	.word	0x40011000
 8006d6c:	40011400 	.word	0x40011400
 8006d70:	51eb851f 	.word	0x51eb851f

08006d74 <calloc>:
 8006d74:	4b02      	ldr	r3, [pc, #8]	; (8006d80 <calloc+0xc>)
 8006d76:	460a      	mov	r2, r1
 8006d78:	4601      	mov	r1, r0
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	f000 b842 	b.w	8006e04 <_calloc_r>
 8006d80:	20000020 	.word	0x20000020

08006d84 <__errno>:
 8006d84:	4b01      	ldr	r3, [pc, #4]	; (8006d8c <__errno+0x8>)
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	20000020 	.word	0x20000020

08006d90 <__libc_init_array>:
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	4d0d      	ldr	r5, [pc, #52]	; (8006dc8 <__libc_init_array+0x38>)
 8006d94:	4c0d      	ldr	r4, [pc, #52]	; (8006dcc <__libc_init_array+0x3c>)
 8006d96:	1b64      	subs	r4, r4, r5
 8006d98:	10a4      	asrs	r4, r4, #2
 8006d9a:	2600      	movs	r6, #0
 8006d9c:	42a6      	cmp	r6, r4
 8006d9e:	d109      	bne.n	8006db4 <__libc_init_array+0x24>
 8006da0:	4d0b      	ldr	r5, [pc, #44]	; (8006dd0 <__libc_init_array+0x40>)
 8006da2:	4c0c      	ldr	r4, [pc, #48]	; (8006dd4 <__libc_init_array+0x44>)
 8006da4:	f000 f99e 	bl	80070e4 <_init>
 8006da8:	1b64      	subs	r4, r4, r5
 8006daa:	10a4      	asrs	r4, r4, #2
 8006dac:	2600      	movs	r6, #0
 8006dae:	42a6      	cmp	r6, r4
 8006db0:	d105      	bne.n	8006dbe <__libc_init_array+0x2e>
 8006db2:	bd70      	pop	{r4, r5, r6, pc}
 8006db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006db8:	4798      	blx	r3
 8006dba:	3601      	adds	r6, #1
 8006dbc:	e7ee      	b.n	8006d9c <__libc_init_array+0xc>
 8006dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dc2:	4798      	blx	r3
 8006dc4:	3601      	adds	r6, #1
 8006dc6:	e7f2      	b.n	8006dae <__libc_init_array+0x1e>
 8006dc8:	0800713c 	.word	0x0800713c
 8006dcc:	0800713c 	.word	0x0800713c
 8006dd0:	0800713c 	.word	0x0800713c
 8006dd4:	08007140 	.word	0x08007140

08006dd8 <memcpy>:
 8006dd8:	440a      	add	r2, r1
 8006dda:	4291      	cmp	r1, r2
 8006ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006de0:	d100      	bne.n	8006de4 <memcpy+0xc>
 8006de2:	4770      	bx	lr
 8006de4:	b510      	push	{r4, lr}
 8006de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dee:	4291      	cmp	r1, r2
 8006df0:	d1f9      	bne.n	8006de6 <memcpy+0xe>
 8006df2:	bd10      	pop	{r4, pc}

08006df4 <memset>:
 8006df4:	4402      	add	r2, r0
 8006df6:	4603      	mov	r3, r0
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d100      	bne.n	8006dfe <memset+0xa>
 8006dfc:	4770      	bx	lr
 8006dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8006e02:	e7f9      	b.n	8006df8 <memset+0x4>

08006e04 <_calloc_r>:
 8006e04:	b513      	push	{r0, r1, r4, lr}
 8006e06:	434a      	muls	r2, r1
 8006e08:	4611      	mov	r1, r2
 8006e0a:	9201      	str	r2, [sp, #4]
 8006e0c:	f000 f80a 	bl	8006e24 <_malloc_r>
 8006e10:	4604      	mov	r4, r0
 8006e12:	b118      	cbz	r0, 8006e1c <_calloc_r+0x18>
 8006e14:	9a01      	ldr	r2, [sp, #4]
 8006e16:	2100      	movs	r1, #0
 8006e18:	f7ff ffec 	bl	8006df4 <memset>
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	b002      	add	sp, #8
 8006e20:	bd10      	pop	{r4, pc}
	...

08006e24 <_malloc_r>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	1ccd      	adds	r5, r1, #3
 8006e28:	f025 0503 	bic.w	r5, r5, #3
 8006e2c:	3508      	adds	r5, #8
 8006e2e:	2d0c      	cmp	r5, #12
 8006e30:	bf38      	it	cc
 8006e32:	250c      	movcc	r5, #12
 8006e34:	2d00      	cmp	r5, #0
 8006e36:	4606      	mov	r6, r0
 8006e38:	db01      	blt.n	8006e3e <_malloc_r+0x1a>
 8006e3a:	42a9      	cmp	r1, r5
 8006e3c:	d903      	bls.n	8006e46 <_malloc_r+0x22>
 8006e3e:	230c      	movs	r3, #12
 8006e40:	6033      	str	r3, [r6, #0]
 8006e42:	2000      	movs	r0, #0
 8006e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e46:	f000 f857 	bl	8006ef8 <__malloc_lock>
 8006e4a:	4921      	ldr	r1, [pc, #132]	; (8006ed0 <_malloc_r+0xac>)
 8006e4c:	680a      	ldr	r2, [r1, #0]
 8006e4e:	4614      	mov	r4, r2
 8006e50:	b99c      	cbnz	r4, 8006e7a <_malloc_r+0x56>
 8006e52:	4f20      	ldr	r7, [pc, #128]	; (8006ed4 <_malloc_r+0xb0>)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	b923      	cbnz	r3, 8006e62 <_malloc_r+0x3e>
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	f000 f83c 	bl	8006ed8 <_sbrk_r>
 8006e60:	6038      	str	r0, [r7, #0]
 8006e62:	4629      	mov	r1, r5
 8006e64:	4630      	mov	r0, r6
 8006e66:	f000 f837 	bl	8006ed8 <_sbrk_r>
 8006e6a:	1c43      	adds	r3, r0, #1
 8006e6c:	d123      	bne.n	8006eb6 <_malloc_r+0x92>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	6033      	str	r3, [r6, #0]
 8006e72:	4630      	mov	r0, r6
 8006e74:	f000 f846 	bl	8006f04 <__malloc_unlock>
 8006e78:	e7e3      	b.n	8006e42 <_malloc_r+0x1e>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	1b5b      	subs	r3, r3, r5
 8006e7e:	d417      	bmi.n	8006eb0 <_malloc_r+0x8c>
 8006e80:	2b0b      	cmp	r3, #11
 8006e82:	d903      	bls.n	8006e8c <_malloc_r+0x68>
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	441c      	add	r4, r3
 8006e88:	6025      	str	r5, [r4, #0]
 8006e8a:	e004      	b.n	8006e96 <_malloc_r+0x72>
 8006e8c:	6863      	ldr	r3, [r4, #4]
 8006e8e:	42a2      	cmp	r2, r4
 8006e90:	bf0c      	ite	eq
 8006e92:	600b      	streq	r3, [r1, #0]
 8006e94:	6053      	strne	r3, [r2, #4]
 8006e96:	4630      	mov	r0, r6
 8006e98:	f000 f834 	bl	8006f04 <__malloc_unlock>
 8006e9c:	f104 000b 	add.w	r0, r4, #11
 8006ea0:	1d23      	adds	r3, r4, #4
 8006ea2:	f020 0007 	bic.w	r0, r0, #7
 8006ea6:	1ac2      	subs	r2, r0, r3
 8006ea8:	d0cc      	beq.n	8006e44 <_malloc_r+0x20>
 8006eaa:	1a1b      	subs	r3, r3, r0
 8006eac:	50a3      	str	r3, [r4, r2]
 8006eae:	e7c9      	b.n	8006e44 <_malloc_r+0x20>
 8006eb0:	4622      	mov	r2, r4
 8006eb2:	6864      	ldr	r4, [r4, #4]
 8006eb4:	e7cc      	b.n	8006e50 <_malloc_r+0x2c>
 8006eb6:	1cc4      	adds	r4, r0, #3
 8006eb8:	f024 0403 	bic.w	r4, r4, #3
 8006ebc:	42a0      	cmp	r0, r4
 8006ebe:	d0e3      	beq.n	8006e88 <_malloc_r+0x64>
 8006ec0:	1a21      	subs	r1, r4, r0
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f000 f808 	bl	8006ed8 <_sbrk_r>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d1dd      	bne.n	8006e88 <_malloc_r+0x64>
 8006ecc:	e7cf      	b.n	8006e6e <_malloc_r+0x4a>
 8006ece:	bf00      	nop
 8006ed0:	200003f0 	.word	0x200003f0
 8006ed4:	200003f4 	.word	0x200003f4

08006ed8 <_sbrk_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d06      	ldr	r5, [pc, #24]	; (8006ef4 <_sbrk_r+0x1c>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	602b      	str	r3, [r5, #0]
 8006ee4:	f7fc fa98 	bl	8003418 <_sbrk>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_sbrk_r+0x1a>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_sbrk_r+0x1a>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	200005d8 	.word	0x200005d8

08006ef8 <__malloc_lock>:
 8006ef8:	4801      	ldr	r0, [pc, #4]	; (8006f00 <__malloc_lock+0x8>)
 8006efa:	f000 b809 	b.w	8006f10 <__retarget_lock_acquire_recursive>
 8006efe:	bf00      	nop
 8006f00:	200005e0 	.word	0x200005e0

08006f04 <__malloc_unlock>:
 8006f04:	4801      	ldr	r0, [pc, #4]	; (8006f0c <__malloc_unlock+0x8>)
 8006f06:	f000 b804 	b.w	8006f12 <__retarget_lock_release_recursive>
 8006f0a:	bf00      	nop
 8006f0c:	200005e0 	.word	0x200005e0

08006f10 <__retarget_lock_acquire_recursive>:
 8006f10:	4770      	bx	lr

08006f12 <__retarget_lock_release_recursive>:
 8006f12:	4770      	bx	lr

08006f14 <sqrt>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	ed2d 8b02 	vpush	{d8}
 8006f1a:	ec55 4b10 	vmov	r4, r5, d0
 8006f1e:	f000 f82d 	bl	8006f7c <__ieee754_sqrt>
 8006f22:	4b15      	ldr	r3, [pc, #84]	; (8006f78 <sqrt+0x64>)
 8006f24:	eeb0 8a40 	vmov.f32	s16, s0
 8006f28:	eef0 8a60 	vmov.f32	s17, s1
 8006f2c:	f993 3000 	ldrsb.w	r3, [r3]
 8006f30:	3301      	adds	r3, #1
 8006f32:	d019      	beq.n	8006f68 <sqrt+0x54>
 8006f34:	4622      	mov	r2, r4
 8006f36:	462b      	mov	r3, r5
 8006f38:	4620      	mov	r0, r4
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	f7f9 fda2 	bl	8000a84 <__aeabi_dcmpun>
 8006f40:	b990      	cbnz	r0, 8006f68 <sqrt+0x54>
 8006f42:	2200      	movs	r2, #0
 8006f44:	2300      	movs	r3, #0
 8006f46:	4620      	mov	r0, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	f7f9 fd73 	bl	8000a34 <__aeabi_dcmplt>
 8006f4e:	b158      	cbz	r0, 8006f68 <sqrt+0x54>
 8006f50:	f7ff ff18 	bl	8006d84 <__errno>
 8006f54:	2321      	movs	r3, #33	; 0x21
 8006f56:	6003      	str	r3, [r0, #0]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4619      	mov	r1, r3
 8006f60:	f7f9 fc20 	bl	80007a4 <__aeabi_ddiv>
 8006f64:	ec41 0b18 	vmov	d8, r0, r1
 8006f68:	eeb0 0a48 	vmov.f32	s0, s16
 8006f6c:	eef0 0a68 	vmov.f32	s1, s17
 8006f70:	ecbd 8b02 	vpop	{d8}
 8006f74:	bd38      	pop	{r3, r4, r5, pc}
 8006f76:	bf00      	nop
 8006f78:	20000084 	.word	0x20000084

08006f7c <__ieee754_sqrt>:
 8006f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f80:	ec55 4b10 	vmov	r4, r5, d0
 8006f84:	4e56      	ldr	r6, [pc, #344]	; (80070e0 <__ieee754_sqrt+0x164>)
 8006f86:	43ae      	bics	r6, r5
 8006f88:	ee10 0a10 	vmov	r0, s0
 8006f8c:	ee10 3a10 	vmov	r3, s0
 8006f90:	4629      	mov	r1, r5
 8006f92:	462a      	mov	r2, r5
 8006f94:	d110      	bne.n	8006fb8 <__ieee754_sqrt+0x3c>
 8006f96:	ee10 2a10 	vmov	r2, s0
 8006f9a:	462b      	mov	r3, r5
 8006f9c:	f7f9 fad8 	bl	8000550 <__aeabi_dmul>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f7f9 f91c 	bl	80001e4 <__adddf3>
 8006fac:	4604      	mov	r4, r0
 8006fae:	460d      	mov	r5, r1
 8006fb0:	ec45 4b10 	vmov	d0, r4, r5
 8006fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb8:	2d00      	cmp	r5, #0
 8006fba:	dc10      	bgt.n	8006fde <__ieee754_sqrt+0x62>
 8006fbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006fc0:	4330      	orrs	r0, r6
 8006fc2:	d0f5      	beq.n	8006fb0 <__ieee754_sqrt+0x34>
 8006fc4:	b15d      	cbz	r5, 8006fde <__ieee754_sqrt+0x62>
 8006fc6:	ee10 2a10 	vmov	r2, s0
 8006fca:	462b      	mov	r3, r5
 8006fcc:	ee10 0a10 	vmov	r0, s0
 8006fd0:	f7f9 f906 	bl	80001e0 <__aeabi_dsub>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	f7f9 fbe4 	bl	80007a4 <__aeabi_ddiv>
 8006fdc:	e7e6      	b.n	8006fac <__ieee754_sqrt+0x30>
 8006fde:	1509      	asrs	r1, r1, #20
 8006fe0:	d076      	beq.n	80070d0 <__ieee754_sqrt+0x154>
 8006fe2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006fe6:	07ce      	lsls	r6, r1, #31
 8006fe8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006fec:	bf5e      	ittt	pl
 8006fee:	0fda      	lsrpl	r2, r3, #31
 8006ff0:	005b      	lslpl	r3, r3, #1
 8006ff2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006ff6:	0fda      	lsrs	r2, r3, #31
 8006ff8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006ffc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007000:	2000      	movs	r0, #0
 8007002:	106d      	asrs	r5, r5, #1
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	f04f 0e16 	mov.w	lr, #22
 800700a:	4684      	mov	ip, r0
 800700c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007010:	eb0c 0401 	add.w	r4, ip, r1
 8007014:	4294      	cmp	r4, r2
 8007016:	bfde      	ittt	le
 8007018:	1b12      	suble	r2, r2, r4
 800701a:	eb04 0c01 	addle.w	ip, r4, r1
 800701e:	1840      	addle	r0, r0, r1
 8007020:	0052      	lsls	r2, r2, #1
 8007022:	f1be 0e01 	subs.w	lr, lr, #1
 8007026:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800702a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800702e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007032:	d1ed      	bne.n	8007010 <__ieee754_sqrt+0x94>
 8007034:	4671      	mov	r1, lr
 8007036:	2720      	movs	r7, #32
 8007038:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800703c:	4562      	cmp	r2, ip
 800703e:	eb04 060e 	add.w	r6, r4, lr
 8007042:	dc02      	bgt.n	800704a <__ieee754_sqrt+0xce>
 8007044:	d113      	bne.n	800706e <__ieee754_sqrt+0xf2>
 8007046:	429e      	cmp	r6, r3
 8007048:	d811      	bhi.n	800706e <__ieee754_sqrt+0xf2>
 800704a:	2e00      	cmp	r6, #0
 800704c:	eb06 0e04 	add.w	lr, r6, r4
 8007050:	da43      	bge.n	80070da <__ieee754_sqrt+0x15e>
 8007052:	f1be 0f00 	cmp.w	lr, #0
 8007056:	db40      	blt.n	80070da <__ieee754_sqrt+0x15e>
 8007058:	f10c 0801 	add.w	r8, ip, #1
 800705c:	eba2 020c 	sub.w	r2, r2, ip
 8007060:	429e      	cmp	r6, r3
 8007062:	bf88      	it	hi
 8007064:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007068:	1b9b      	subs	r3, r3, r6
 800706a:	4421      	add	r1, r4
 800706c:	46c4      	mov	ip, r8
 800706e:	0052      	lsls	r2, r2, #1
 8007070:	3f01      	subs	r7, #1
 8007072:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007076:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800707a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800707e:	d1dd      	bne.n	800703c <__ieee754_sqrt+0xc0>
 8007080:	4313      	orrs	r3, r2
 8007082:	d006      	beq.n	8007092 <__ieee754_sqrt+0x116>
 8007084:	1c4c      	adds	r4, r1, #1
 8007086:	bf13      	iteet	ne
 8007088:	3101      	addne	r1, #1
 800708a:	3001      	addeq	r0, #1
 800708c:	4639      	moveq	r1, r7
 800708e:	f021 0101 	bicne.w	r1, r1, #1
 8007092:	1043      	asrs	r3, r0, #1
 8007094:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007098:	0849      	lsrs	r1, r1, #1
 800709a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800709e:	07c2      	lsls	r2, r0, #31
 80070a0:	bf48      	it	mi
 80070a2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80070a6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80070aa:	460c      	mov	r4, r1
 80070ac:	463d      	mov	r5, r7
 80070ae:	e77f      	b.n	8006fb0 <__ieee754_sqrt+0x34>
 80070b0:	0ada      	lsrs	r2, r3, #11
 80070b2:	3815      	subs	r0, #21
 80070b4:	055b      	lsls	r3, r3, #21
 80070b6:	2a00      	cmp	r2, #0
 80070b8:	d0fa      	beq.n	80070b0 <__ieee754_sqrt+0x134>
 80070ba:	02d7      	lsls	r7, r2, #11
 80070bc:	d50a      	bpl.n	80070d4 <__ieee754_sqrt+0x158>
 80070be:	f1c1 0420 	rsb	r4, r1, #32
 80070c2:	fa23 f404 	lsr.w	r4, r3, r4
 80070c6:	1e4d      	subs	r5, r1, #1
 80070c8:	408b      	lsls	r3, r1
 80070ca:	4322      	orrs	r2, r4
 80070cc:	1b41      	subs	r1, r0, r5
 80070ce:	e788      	b.n	8006fe2 <__ieee754_sqrt+0x66>
 80070d0:	4608      	mov	r0, r1
 80070d2:	e7f0      	b.n	80070b6 <__ieee754_sqrt+0x13a>
 80070d4:	0052      	lsls	r2, r2, #1
 80070d6:	3101      	adds	r1, #1
 80070d8:	e7ef      	b.n	80070ba <__ieee754_sqrt+0x13e>
 80070da:	46e0      	mov	r8, ip
 80070dc:	e7be      	b.n	800705c <__ieee754_sqrt+0xe0>
 80070de:	bf00      	nop
 80070e0:	7ff00000 	.word	0x7ff00000

080070e4 <_init>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	bf00      	nop
 80070e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ea:	bc08      	pop	{r3}
 80070ec:	469e      	mov	lr, r3
 80070ee:	4770      	bx	lr

080070f0 <_fini>:
 80070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f2:	bf00      	nop
 80070f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f6:	bc08      	pop	{r3}
 80070f8:	469e      	mov	lr, r3
 80070fa:	4770      	bx	lr
