
Project000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098b8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08009a50  08009a50  00019a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a88  08009a88  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a88  08009a88  00019a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a90  08009a90  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a90  08009a90  00019a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a94  08009a94  00019a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000090  08009b24  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08009b24  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010eb5  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  00030f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00032f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00033fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f71  00000000  00000000  00034f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bb8  00000000  00000000  0004beb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d1d  00000000  00000000  0005da69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef786  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a5c  00000000  00000000  000ef7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009a38 	.word	0x08009a38

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08009a38 	.word	0x08009a38

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96e 	b.w	80010a0 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468c      	mov	ip, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8083 	bne.w	8000ef2 <__udivmoddi4+0x116>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4617      	mov	r7, r2
 8000df0:	d947      	bls.n	8000e82 <__udivmoddi4+0xa6>
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b142      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	f1c2 0020 	rsb	r0, r2, #32
 8000dfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	ea40 0c01 	orr.w	ip, r0, r1
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fbbc f6f8 	udiv	r6, ip, r8
 8000e14:	fa1f fe87 	uxth.w	lr, r7
 8000e18:	fb08 c116 	mls	r1, r8, r6, ip
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f10e 	mul.w	r1, r6, lr
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x60>
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 8119 	bcs.w	8001064 <__udivmoddi4+0x288>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 8116 	bls.w	8001064 <__udivmoddi4+0x288>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	443b      	add	r3, r7
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x8c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	f080 8105 	bcs.w	8001068 <__udivmoddi4+0x28c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8102 	bls.w	8001068 <__udivmoddi4+0x28c>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6c:	eba4 040e 	sub.w	r4, r4, lr
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa0>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	b902      	cbnz	r2, 8000e86 <__udivmoddi4+0xaa>
 8000e84:	deff      	udf	#255	; 0xff
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d150      	bne.n	8000f30 <__udivmoddi4+0x154>
 8000e8e:	1bcb      	subs	r3, r1, r7
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	2601      	movs	r6, #1
 8000e9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb08 f30c 	mul.w	r3, r8, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0xe4>
 8000eb0:	1879      	adds	r1, r7, r1
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0xe2>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	f200 80e9 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ecc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x10c>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x10a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80d9 	bhi.w	8001098 <__udivmoddi4+0x2bc>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e7bf      	b.n	8000e72 <__udivmoddi4+0x96>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0x12e>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	f000 80b1 	beq.w	800105e <__udivmoddi4+0x282>
 8000efc:	2600      	movs	r6, #0
 8000efe:	e9c5 0100 	strd	r0, r1, [r5]
 8000f02:	4630      	mov	r0, r6
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f683 	clz	r6, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d14a      	bne.n	8000fa8 <__udivmoddi4+0x1cc>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0x140>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80b8 	bhi.w	800108c <__udivmoddi4+0x2b0>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d0a8      	beq.n	8000e7c <__udivmoddi4+0xa0>
 8000f2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0xa0>
 8000f30:	f1c2 0320 	rsb	r3, r2, #32
 8000f34:	fa20 f603 	lsr.w	r6, r0, r3
 8000f38:	4097      	lsls	r7, r2
 8000f3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	4330      	orrs	r0, r6
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f4c:	fa1f f887 	uxth.w	r8, r7
 8000f50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f58:	fb06 f108 	mul.w	r1, r6, r8
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x19c>
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f6a:	f080 808d 	bcs.w	8001088 <__udivmoddi4+0x2ac>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	f240 808a 	bls.w	8001088 <__udivmoddi4+0x2ac>
 8000f74:	3e02      	subs	r6, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	b281      	uxth	r1, r0
 8000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb00 f308 	mul.w	r3, r0, r8
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d907      	bls.n	8000fa0 <__udivmoddi4+0x1c4>
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f96:	d273      	bcs.n	8001080 <__udivmoddi4+0x2a4>
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d971      	bls.n	8001080 <__udivmoddi4+0x2a4>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4439      	add	r1, r7
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa6:	e778      	b.n	8000e9a <__udivmoddi4+0xbe>
 8000fa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000fac:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fba:	fa01 f306 	lsl.w	r3, r1, r6
 8000fbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	0c3b      	lsrs	r3, r7, #16
 8000fca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fce:	fa1f f884 	uxth.w	r8, r4
 8000fd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fda:	fb09 fa08 	mul.w	sl, r9, r8
 8000fde:	458a      	cmp	sl, r1
 8000fe0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x220>
 8000fea:	1861      	adds	r1, r4, r1
 8000fec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff0:	d248      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8000ff2:	458a      	cmp	sl, r1
 8000ff4:	d946      	bls.n	8001084 <__udivmoddi4+0x2a8>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4421      	add	r1, r4
 8000ffc:	eba1 010a 	sub.w	r1, r1, sl
 8001000:	b2bf      	uxth	r7, r7
 8001002:	fbb1 f0fe 	udiv	r0, r1, lr
 8001006:	fb0e 1110 	mls	r1, lr, r0, r1
 800100a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100e:	fb00 f808 	mul.w	r8, r0, r8
 8001012:	45b8      	cmp	r8, r7
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x24a>
 8001016:	19e7      	adds	r7, r4, r7
 8001018:	f100 31ff 	add.w	r1, r0, #4294967295
 800101c:	d22e      	bcs.n	800107c <__udivmoddi4+0x2a0>
 800101e:	45b8      	cmp	r8, r7
 8001020:	d92c      	bls.n	800107c <__udivmoddi4+0x2a0>
 8001022:	3802      	subs	r0, #2
 8001024:	4427      	add	r7, r4
 8001026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102a:	eba7 0708 	sub.w	r7, r7, r8
 800102e:	fba0 8902 	umull	r8, r9, r0, r2
 8001032:	454f      	cmp	r7, r9
 8001034:	46c6      	mov	lr, r8
 8001036:	4649      	mov	r1, r9
 8001038:	d31a      	bcc.n	8001070 <__udivmoddi4+0x294>
 800103a:	d017      	beq.n	800106c <__udivmoddi4+0x290>
 800103c:	b15d      	cbz	r5, 8001056 <__udivmoddi4+0x27a>
 800103e:	ebb3 020e 	subs.w	r2, r3, lr
 8001042:	eb67 0701 	sbc.w	r7, r7, r1
 8001046:	fa07 fc0c 	lsl.w	ip, r7, ip
 800104a:	40f2      	lsrs	r2, r6
 800104c:	ea4c 0202 	orr.w	r2, ip, r2
 8001050:	40f7      	lsrs	r7, r6
 8001052:	e9c5 2700 	strd	r2, r7, [r5]
 8001056:	2600      	movs	r6, #0
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	462e      	mov	r6, r5
 8001060:	4628      	mov	r0, r5
 8001062:	e70b      	b.n	8000e7c <__udivmoddi4+0xa0>
 8001064:	4606      	mov	r6, r0
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0x60>
 8001068:	4618      	mov	r0, r3
 800106a:	e6fd      	b.n	8000e68 <__udivmoddi4+0x8c>
 800106c:	4543      	cmp	r3, r8
 800106e:	d2e5      	bcs.n	800103c <__udivmoddi4+0x260>
 8001070:	ebb8 0e02 	subs.w	lr, r8, r2
 8001074:	eb69 0104 	sbc.w	r1, r9, r4
 8001078:	3801      	subs	r0, #1
 800107a:	e7df      	b.n	800103c <__udivmoddi4+0x260>
 800107c:	4608      	mov	r0, r1
 800107e:	e7d2      	b.n	8001026 <__udivmoddi4+0x24a>
 8001080:	4660      	mov	r0, ip
 8001082:	e78d      	b.n	8000fa0 <__udivmoddi4+0x1c4>
 8001084:	4681      	mov	r9, r0
 8001086:	e7b9      	b.n	8000ffc <__udivmoddi4+0x220>
 8001088:	4666      	mov	r6, ip
 800108a:	e775      	b.n	8000f78 <__udivmoddi4+0x19c>
 800108c:	4630      	mov	r0, r6
 800108e:	e74a      	b.n	8000f26 <__udivmoddi4+0x14a>
 8001090:	f1ac 0c02 	sub.w	ip, ip, #2
 8001094:	4439      	add	r1, r7
 8001096:	e713      	b.n	8000ec0 <__udivmoddi4+0xe4>
 8001098:	3802      	subs	r0, #2
 800109a:	443c      	add	r4, r7
 800109c:	e724      	b.n	8000ee8 <__udivmoddi4+0x10c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	0000      	movs	r0, r0
	...

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f003 f80c 	bl	80040cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 f998 	bl	80013e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 fb9a 	bl	80017f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010bc:	f000 fb70 	bl	80017a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010c0:	f000 fb42 	bl	8001748 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010c4:	f000 fa26 	bl	8001514 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c8:	f000 fa7c 	bl	80015c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010cc:	f000 fac6 	bl	800165c <MX_TIM3_Init>
  MX_I2C1_Init();
 80010d0:	f000 f9f2 	bl	80014b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010d4:	48b2      	ldr	r0, [pc, #712]	; (80013a0 <main+0x2f8>)
 80010d6:	f006 fb19 	bl	800770c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010da:	213c      	movs	r1, #60	; 0x3c
 80010dc:	48b1      	ldr	r0, [pc, #708]	; (80013a4 <main+0x2fc>)
 80010de:	f006 fd27 	bl	8007b30 <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010e2:	48b1      	ldr	r0, [pc, #708]	; (80013a8 <main+0x300>)
 80010e4:	f006 fab8 	bl	8007658 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	48af      	ldr	r0, [pc, #700]	; (80013a8 <main+0x300>)
 80010ec:	f006 fbca 	bl	8007884 <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010f0:	48ae      	ldr	r0, [pc, #696]	; (80013ac <main+0x304>)
 80010f2:	f000 fd55 	bl	8001ba0 <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010f6:	49ad      	ldr	r1, [pc, #692]	; (80013ac <main+0x304>)
 80010f8:	48ad      	ldr	r0, [pc, #692]	; (80013b0 <main+0x308>)
 80010fa:	f000 fd69 	bl	8001bd0 <TrajectoryGenerationStructureInit>

  VelocityControllerInit(&VelocityPIDController, &TrjStruc);
 80010fe:	49ac      	ldr	r1, [pc, #688]	; (80013b0 <main+0x308>)
 8001100:	48ac      	ldr	r0, [pc, #688]	; (80013b4 <main+0x30c>)
 8001102:	f000 fde1 	bl	8001cc8 <VelocityControllerInit>
  DisplacementControllerInit(&PositionPIDController, &TrjStruc);
 8001106:	49aa      	ldr	r1, [pc, #680]	; (80013b0 <main+0x308>)
 8001108:	48ab      	ldr	r0, [pc, #684]	; (80013b8 <main+0x310>)
 800110a:	f000 fe15 	bl	8001d38 <DisplacementControllerInit>

  htim1.Instance->CNT = CUSSStruc.PPRxQEI;
 800110e:	4ba5      	ldr	r3, [pc, #660]	; (80013a4 <main+0x2fc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4aa6      	ldr	r2, [pc, #664]	; (80013ac <main+0x304>)
 8001114:	6852      	ldr	r2, [r2, #4]
 8001116:	625a      	str	r2, [r3, #36]	; 0x24

  ///UART init
  UART2.huart = &huart2;
 8001118:	4ba8      	ldr	r3, [pc, #672]	; (80013bc <main+0x314>)
 800111a:	4aa9      	ldr	r2, [pc, #676]	; (80013c0 <main+0x318>)
 800111c:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 800111e:	4ba7      	ldr	r3, [pc, #668]	; (80013bc <main+0x314>)
 8001120:	22ff      	movs	r2, #255	; 0xff
 8001122:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8001124:	4ba5      	ldr	r3, [pc, #660]	; (80013bc <main+0x314>)
 8001126:	22ff      	movs	r2, #255	; 0xff
 8001128:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 800112a:	48a4      	ldr	r0, [pc, #656]	; (80013bc <main+0x314>)
 800112c:	f001 fcb8 	bl	8002aa0 <UARTInit>
  UARTResetStart(&UART2);
 8001130:	48a2      	ldr	r0, [pc, #648]	; (80013bc <main+0x314>)
 8001132:	f001 fcdd 	bl	8002af0 <UARTResetStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 8001136:	48a1      	ldr	r0, [pc, #644]	; (80013bc <main+0x314>)
 8001138:	f001 fcfe 	bl	8002b38 <UARTReadChar>
 800113c:	4603      	mov	r3, r0
 800113e:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 8001140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <main+0xae>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	499b      	ldr	r1, [pc, #620]	; (80013bc <main+0x314>)
 8001150:	4618      	mov	r0, r3
 8001152:	f001 fdd9 	bl	8002d08 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 8001156:	4b9b      	ldr	r3, [pc, #620]	; (80013c4 <main+0x31c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b07      	cmp	r3, #7
 800115c:	f200 8102 	bhi.w	8001364 <main+0x2bc>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <main+0xc0>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001189 	.word	0x08001189
 800116c:	08001195 	.word	0x08001195
 8001170:	080011a1 	.word	0x080011a1
 8001174:	080011b1 	.word	0x080011b1
 8001178:	080011c7 	.word	0x080011c7
 800117c:	080012b3 	.word	0x080012b3
 8001180:	08001345 	.word	0x08001345
 8001184:	08001355 	.word	0x08001355
	  {
	  	  case STATE_Disconnected:
	  		  LAMP_ON(2);
 8001188:	2002      	movs	r0, #2
 800118a:	f002 fa13 	bl	80035b4 <LAMP_ON>
	  		  Emergency_switch_trigger();
 800118e:	f002 fa5d 	bl	800364c <Emergency_switch_trigger>
	  		  break;
 8001192:	e0e7      	b.n	8001364 <main+0x2bc>

	  	  case STATE_Idle:
	  		  LAMP_ON(2);
 8001194:	2002      	movs	r0, #2
 8001196:	f002 fa0d 	bl	80035b4 <LAMP_ON>
	  		  Emergency_switch_trigger();
 800119a:	f002 fa57 	bl	800364c <Emergency_switch_trigger>
		  	  break;
 800119e:	e0e1      	b.n	8001364 <main+0x2bc>

	  	  case STATE_PrepareDATA:
	  		  LAMP_ON(3);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f002 fa07 	bl	80035b4 <LAMP_ON>
	  		  TrajectoryGenerationPrepareDATA();
 80011a6:	f000 fe33 	bl	8001e10 <TrajectoryGenerationPrepareDATA>
	  		  Emergency_switch_trigger();
 80011aa:	f002 fa4f 	bl	800364c <Emergency_switch_trigger>
		  	  break;
 80011ae:	e0d9      	b.n	8001364 <main+0x2bc>

	  	  case STATE_Calculation:
	  		  LAMP_ON(3);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f002 f9ff 	bl	80035b4 <LAMP_ON>
	  		  TrajectoryGenerationCalculation();
 80011b6:	f000 ff79 	bl	80020ac <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 80011ba:	4b82      	ldr	r3, [pc, #520]	; (80013c4 <main+0x31c>)
 80011bc:	2204      	movs	r2, #4
 80011be:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 80011c0:	f002 fa44 	bl	800364c <Emergency_switch_trigger>
	  		  break;
 80011c4:	e0ce      	b.n	8001364 <main+0x2bc>

	   	  case STATE_Link_Moving:
	   		  LAMP_ON(3);
 80011c6:	2003      	movs	r0, #3
 80011c8:	f002 f9f4 	bl	80035b4 <LAMP_ON>
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 80011cc:	f000 fcce 	bl	8001b6c <micros>
 80011d0:	4b77      	ldr	r3, [pc, #476]	; (80013b0 <main+0x308>)
 80011d2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80011d6:	1a84      	subs	r4, r0, r2
 80011d8:	eb61 0503 	sbc.w	r5, r1, r3
 80011dc:	4b74      	ldr	r3, [pc, #464]	; (80013b0 <main+0x308>)
 80011de:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80011e2:	429d      	cmp	r5, r3
 80011e4:	bf08      	it	eq
 80011e6:	4294      	cmpeq	r4, r2
 80011e8:	d360      	bcc.n	80012ac <main+0x204>
	   		  {
	   			  Controlling_the_LINK();
 80011ea:	f002 fa5f 	bl	80036ac <Controlling_the_LINK>

	   			  ///////////////////////////////////////////////////////////////////
//	   			  PositionPIDController.OutputFeedback = TrjStruc.AngularDisplacementDesire;
	   			  ///////////////////////////////////////////////////////////////////

	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 80011ee:	4b72      	ldr	r3, [pc, #456]	; (80013b8 <main+0x310>)
 80011f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80011f4:	4b6e      	ldr	r3, [pc, #440]	; (80013b0 <main+0x308>)
 80011f6:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80011fa:	4b73      	ldr	r3, [pc, #460]	; (80013c8 <main+0x320>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800120a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	d84b      	bhi.n	80012ac <main+0x204>
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8001214:	4b68      	ldr	r3, [pc, #416]	; (80013b8 <main+0x310>)
 8001216:	ed93 7a06 	vldr	s14, [r3, #24]
 800121a:	4b65      	ldr	r3, [pc, #404]	; (80013b0 <main+0x308>)
 800121c:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8001220:	4b69      	ldr	r3, [pc, #420]	; (80013c8 <main+0x320>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122c:	ee76 7ae7 	vsub.f32	s15, s13, s15
	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	db38      	blt.n	80012ac <main+0x204>
						  (Moving_Link_Task_Flag == 1))
 800123a:	4b64      	ldr	r3, [pc, #400]	; (80013cc <main+0x324>)
 800123c:	781b      	ldrb	r3, [r3, #0]
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 800123e:	2b01      	cmp	r3, #1
 8001240:	d134      	bne.n	80012ac <main+0x204>
	   			  {
	   				  if(MovingLinkMode == LMM_Set_Pos_Directly)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <main+0x328>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d111      	bne.n	800126e <main+0x1c6>
	   				  {
	   					Munmunbot_State = STATE_Idle;
 800124a:	4b5e      	ldr	r3, [pc, #376]	; (80013c4 <main+0x31c>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
	   					MovingLinkMode = LMM_Not_Set;
 8001250:	4b5f      	ldr	r3, [pc, #380]	; (80013d0 <main+0x328>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
	   					TrjStruc.Start_Theta =  PositionPIDController.OutputFeedback;
 8001256:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <main+0x310>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4a55      	ldr	r2, [pc, #340]	; (80013b0 <main+0x308>)
 800125c:	6653      	str	r3, [r2, #100]	; 0x64
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800125e:	4b52      	ldr	r3, [pc, #328]	; (80013a8 <main+0x300>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
	   					ACK2Return(&UART2);
 8001266:	4855      	ldr	r0, [pc, #340]	; (80013bc <main+0x314>)
 8001268:	f001 fd3a 	bl	8002ce0 <ACK2Return>
 800126c:	e011      	b.n	8001292 <main+0x1ea>
	   				  }

	   				  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 800126e:	4b58      	ldr	r3, [pc, #352]	; (80013d0 <main+0x328>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d003      	beq.n	800127e <main+0x1d6>
 8001276:	4b56      	ldr	r3, [pc, #344]	; (80013d0 <main+0x328>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d109      	bne.n	8001292 <main+0x1ea>
	   				  {
	   					Munmunbot_State = STATE_End_Effector_Working;
 800127e:	4b51      	ldr	r3, [pc, #324]	; (80013c4 <main+0x31c>)
 8001280:	2205      	movs	r2, #5
 8001282:	701a      	strb	r2, [r3, #0]
	   					GripperState = 0;
 8001284:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <main+0x32c>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800128a:	4b47      	ldr	r3, [pc, #284]	; (80013a8 <main+0x300>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
	   				  }
	   				 TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8001292:	4b49      	ldr	r3, [pc, #292]	; (80013b8 <main+0x310>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <main+0x308>)
 8001298:	6653      	str	r3, [r2, #100]	; 0x64
	   				 VelocityPIDController.OutputFeedback = 0;
 800129a:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <main+0x30c>)
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
	   				 Moving_Link_Task_Flag = 0;
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <main+0x324>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
	   				 PID_Reset();
 80012a8:	f002 f960 	bl	800356c <PID_Reset>
//	   				 Moving_Link_Task_Flag = 0;
//	   				 PID_Reset();
//	   			  }

	   		  }
	  		  Emergency_switch_trigger();
 80012ac:	f002 f9ce 	bl	800364c <Emergency_switch_trigger>
	  		  break;
 80012b0:	e058      	b.n	8001364 <main+0x2bc>

	  	  case STATE_End_Effector_Working:
	  		  LAMP_ON(3);
 80012b2:	2003      	movs	r0, #3
 80012b4:	f002 f97e 	bl	80035b4 <LAMP_ON>
	  		  ///I2C implement
	  		  if(GripperEnable == 1)
 80012b8:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <main+0x330>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d137      	bne.n	8001330 <main+0x288>
	  		  {
	  			if ((hi2c1.State == HAL_I2C_STATE_READY) && (GripperState == 0))
 80012c0:	4b46      	ldr	r3, [pc, #280]	; (80013dc <main+0x334>)
 80012c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b20      	cmp	r3, #32
 80012ca:	d116      	bne.n	80012fa <main+0x252>
 80012cc:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <main+0x32c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d112      	bne.n	80012fa <main+0x252>
	  			{
	  				{
	  					uint8_t temp[1] = {0x45};
 80012d4:	2345      	movs	r3, #69	; 0x45
 80012d6:	713b      	strb	r3, [r7, #4]
	  					HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 80012d8:	1d3a      	adds	r2, r7, #4
 80012da:	2301      	movs	r3, #1
 80012dc:	2146      	movs	r1, #70	; 0x46
 80012de:	483f      	ldr	r0, [pc, #252]	; (80013dc <main+0x334>)
 80012e0:	f003 ff9a 	bl	8005218 <HAL_I2C_Master_Transmit_IT>
	  				}
	  				GripperState = 1;
 80012e4:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <main+0x32c>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
	  				Timestamp_Gripper = micros();
 80012ea:	f000 fc3f 	bl	8001b6c <micros>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	493b      	ldr	r1, [pc, #236]	; (80013e0 <main+0x338>)
 80012f4:	e9c1 2300 	strd	r2, r3, [r1]
 80012f8:	e021      	b.n	800133e <main+0x296>
	  			}
	  			else if ((micros() - Timestamp_Gripper >= 5100000) && (GripperState == 1))
 80012fa:	f000 fc37 	bl	8001b6c <micros>
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <main+0x338>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	ebb0 0802 	subs.w	r8, r0, r2
 8001308:	eb61 0903 	sbc.w	r9, r1, r3
 800130c:	a322      	add	r3, pc, #136	; (adr r3, 8001398 <main+0x2f0>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	454b      	cmp	r3, r9
 8001314:	bf08      	it	eq
 8001316:	4542      	cmpeq	r2, r8
 8001318:	d211      	bcs.n	800133e <main+0x296>
 800131a:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <main+0x32c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d10d      	bne.n	800133e <main+0x296>
	  			{
	  				GripperState = 0;
 8001322:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <main+0x32c>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
	  				Munmunbot_State = STATE_PrepareDATA;
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <main+0x31c>)
 800132a:	2202      	movs	r2, #2
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e006      	b.n	800133e <main+0x296>
	  			}
	  		  }
	  		  else if(GripperEnable == 0)
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <main+0x330>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <main+0x296>
			  {
		  		 Munmunbot_State = STATE_PrepareDATA;
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <main+0x31c>)
 800133a:	2202      	movs	r2, #2
 800133c:	701a      	strb	r2, [r3, #0]
			  }
	  		  Emergency_switch_trigger();
 800133e:	f002 f985 	bl	800364c <Emergency_switch_trigger>
	  		  break;
 8001342:	e00f      	b.n	8001364 <main+0x2bc>

	  	  case STATE_SetHome:
	  		  LAMP_ON(3);
 8001344:	2003      	movs	r0, #3
 8001346:	f002 f935 	bl	80035b4 <LAMP_ON>
	  		  SETHOME_StateMachine_Function();
 800134a:	f002 fa17 	bl	800377c <SETHOME_StateMachine_Function>
	  		  Emergency_switch_trigger();
 800134e:	f002 f97d 	bl	800364c <Emergency_switch_trigger>
	  		  break;
 8001352:	e007      	b.n	8001364 <main+0x2bc>

	  		case STATE_PreSetHome:
			  LAMP_ON(1);
 8001354:	2001      	movs	r0, #1
 8001356:	f002 f92d 	bl	80035b4 <LAMP_ON>
			  PRESETHOME_StateMachine_Function();
 800135a:	f002 fab9 	bl	80038d0 <PRESETHOME_StateMachine_Function>
			  Emergency_switch_trigger();
 800135e:	f002 f975 	bl	800364c <Emergency_switch_trigger>
			  break;
 8001362:	bf00      	nop
	  }

	  if ( pidSetZeroFlag != 0 )
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <main+0x33c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d010      	beq.n	800138e <main+0x2e6>
	  {
		  pidSetZeroFlag = 0;
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <main+0x33c>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <main+0x300>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
		  TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <main+0x310>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <main+0x308>)
 8001380:	6653      	str	r3, [r2, #100]	; 0x64
		  TrjStruc.AngularVelocityDesire = 0;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <main+0x308>)
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
		  PID_Reset();
 800138a:	f002 f8ef 	bl	800356c <PID_Reset>
	  }



	  UARTTxDumpBuffer(&UART2);
 800138e:	480b      	ldr	r0, [pc, #44]	; (80013bc <main+0x314>)
 8001390:	f001 fbfc 	bl	8002b8c <UARTTxDumpBuffer>
  {
 8001394:	e6cf      	b.n	8001136 <main+0x8e>
 8001396:	bf00      	nop
 8001398:	004dd1df 	.word	0x004dd1df
 800139c:	00000000 	.word	0x00000000
 80013a0:	200004c4 	.word	0x200004c4
 80013a4:	2000047c 	.word	0x2000047c
 80013a8:	200003d4 	.word	0x200003d4
 80013ac:	200001e0 	.word	0x200001e0
 80013b0:	20000168 	.word	0x20000168
 80013b4:	20000138 	.word	0x20000138
 80013b8:	20000108 	.word	0x20000108
 80013bc:	200000b8 	.word	0x200000b8
 80013c0:	2000050c 	.word	0x2000050c
 80013c4:	200000d9 	.word	0x200000d9
 80013c8:	20000015 	.word	0x20000015
 80013cc:	200000f8 	.word	0x200000f8
 80013d0:	200000ee 	.word	0x200000ee
 80013d4:	200000f9 	.word	0x200000f9
 80013d8:	20000014 	.word	0x20000014
 80013dc:	20000380 	.word	0x20000380
 80013e0:	20000100 	.word	0x20000100
 80013e4:	200000ac 	.word	0x200000ac

080013e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b094      	sub	sp, #80	; 0x50
 80013ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	2230      	movs	r2, #48	; 0x30
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f008 f9a6 	bl	8009748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <SystemClock_Config+0xc8>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <SystemClock_Config+0xc8>)
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <SystemClock_Config+0xc8>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <SystemClock_Config+0xcc>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a20      	ldr	r2, [pc, #128]	; (80014b4 <SystemClock_Config+0xcc>)
 8001432:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <SystemClock_Config+0xcc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001444:	2302      	movs	r3, #2
 8001446:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001448:	2301      	movs	r3, #1
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144c:	2310      	movs	r3, #16
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001450:	2302      	movs	r3, #2
 8001452:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001454:	2300      	movs	r3, #0
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001458:	2308      	movs	r3, #8
 800145a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800145c:	2364      	movs	r3, #100	; 0x64
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001460:	2302      	movs	r3, #2
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001464:	2304      	movs	r3, #4
 8001466:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4618      	mov	r0, r3
 800146e:	f005 fc2f 	bl	8006cd0 <HAL_RCC_OscConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001478:	f002 fb3e 	bl	8003af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147c:	230f      	movs	r3, #15
 800147e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001480:	2302      	movs	r3, #2
 8001482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2103      	movs	r1, #3
 8001498:	4618      	mov	r0, r3
 800149a:	f005 fe91 	bl	80071c0 <HAL_RCC_ClockConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014a4:	f002 fb28 	bl	8003af8 <Error_Handler>
  }
}
 80014a8:	bf00      	nop
 80014aa:	3750      	adds	r7, #80	; 0x50
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40007000 	.word	0x40007000

080014b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <MX_I2C1_Init+0x54>)
 80014be:	4a14      	ldr	r2, [pc, #80]	; (8001510 <MX_I2C1_Init+0x58>)
 80014c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_I2C1_Init+0x54>)
 80014c4:	f242 7210 	movw	r2, #10000	; 0x2710
 80014c8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_I2C1_Init+0x54>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_I2C1_Init+0x54>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <MX_I2C1_Init+0x54>)
 80014d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_I2C1_Init+0x54>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_I2C1_Init+0x54>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_I2C1_Init+0x54>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_I2C1_Init+0x54>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_I2C1_Init+0x54>)
 80014f8:	f003 fd4a 	bl	8004f90 <HAL_I2C_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001502:	f002 faf9 	bl	8003af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000380 	.word	0x20000380
 8001510:	40005400 	.word	0x40005400

08001514 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	2224      	movs	r2, #36	; 0x24
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f008 f910 	bl	8009748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <MX_TIM1_Init+0xa8>)
 8001532:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <MX_TIM1_Init+0xac>)
 8001534:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <MX_TIM1_Init+0xa8>)
 8001538:	2200      	movs	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <MX_TIM1_Init+0xa8>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24575;
 8001542:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <MX_TIM1_Init+0xa8>)
 8001544:	f645 72ff 	movw	r2, #24575	; 0x5fff
 8001548:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <MX_TIM1_Init+0xa8>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_TIM1_Init+0xa8>)
 8001552:	2200      	movs	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <MX_TIM1_Init+0xa8>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800155c:	2303      	movs	r3, #3
 800155e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001564:	2301      	movs	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800156c:	2302      	movs	r3, #2
 800156e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001574:	2301      	movs	r3, #1
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	4619      	mov	r1, r3
 8001586:	480d      	ldr	r0, [pc, #52]	; (80015bc <MX_TIM1_Init+0xa8>)
 8001588:	f006 fa2c 	bl	80079e4 <HAL_TIM_Encoder_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001592:	f002 fab1 	bl	8003af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <MX_TIM1_Init+0xa8>)
 80015a4:	f007 f8d0 	bl	8008748 <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80015ae:	f002 faa3 	bl	8003af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	3730      	adds	r7, #48	; 0x30
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000047c 	.word	0x2000047c
 80015c0:	40010000 	.word	0x40010000

080015c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_TIM2_Init+0x94>)
 80015e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <MX_TIM2_Init+0x94>)
 80015ea:	2263      	movs	r2, #99	; 0x63
 80015ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM2_Init+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_TIM2_Init+0x94>)
 80015f6:	f04f 32ff 	mov.w	r2, #4294967295
 80015fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_TIM2_Init+0x94>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_TIM2_Init+0x94>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001608:	4813      	ldr	r0, [pc, #76]	; (8001658 <MX_TIM2_Init+0x94>)
 800160a:	f005 ffd5 	bl	80075b8 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001614:	f002 fa70 	bl	8003af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4619      	mov	r1, r3
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <MX_TIM2_Init+0x94>)
 8001626:	f006 fcd7 	bl	8007fd8 <HAL_TIM_ConfigClockSource>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001630:	f002 fa62 	bl	8003af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_TIM2_Init+0x94>)
 8001642:	f007 f881 	bl	8008748 <HAL_TIMEx_MasterConfigSynchronization>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800164c:	f002 fa54 	bl	8003af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200004c4 	.word	0x200004c4

0800165c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08e      	sub	sp, #56	; 0x38
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800168c:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <MX_TIM3_Init+0xe4>)
 800168e:	4a2d      	ldr	r2, [pc, #180]	; (8001744 <MX_TIM3_Init+0xe8>)
 8001690:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <MX_TIM3_Init+0xe4>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <MX_TIM3_Init+0xe4>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800169e:	4b28      	ldr	r3, [pc, #160]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80016a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016b2:	4823      	ldr	r0, [pc, #140]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016b4:	f005 ff80 	bl	80075b8 <HAL_TIM_Base_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016be:	f002 fa1b 	bl	8003af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016cc:	4619      	mov	r1, r3
 80016ce:	481c      	ldr	r0, [pc, #112]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016d0:	f006 fc82 	bl	8007fd8 <HAL_TIM_ConfigClockSource>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016da:	f002 fa0d 	bl	8003af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016de:	4818      	ldr	r0, [pc, #96]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016e0:	f006 f876 	bl	80077d0 <HAL_TIM_PWM_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016ea:	f002 fa05 	bl	8003af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	4619      	mov	r1, r3
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016fe:	f007 f823 	bl	8008748 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001708:	f002 f9f6 	bl	8003af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170c:	2360      	movs	r3, #96	; 0x60
 800170e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	4619      	mov	r1, r3
 8001722:	4807      	ldr	r0, [pc, #28]	; (8001740 <MX_TIM3_Init+0xe4>)
 8001724:	f006 fb9a 	bl	8007e5c <HAL_TIM_PWM_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800172e:	f002 f9e3 	bl	8003af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <MX_TIM3_Init+0xe4>)
 8001734:	f002 faea 	bl	8003d0c <HAL_TIM_MspPostInit>

}
 8001738:	bf00      	nop
 800173a:	3738      	adds	r7, #56	; 0x38
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200003d4 	.word	0x200003d4
 8001744:	40000400 	.word	0x40000400

08001748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_USART2_UART_Init+0x50>)
 800174e:	4a13      	ldr	r2, [pc, #76]	; (800179c <MX_USART2_UART_Init+0x54>)
 8001750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_USART2_UART_Init+0x50>)
 8001754:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_USART2_UART_Init+0x50>)
 800175c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001760:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <MX_USART2_UART_Init+0x50>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_USART2_UART_Init+0x50>)
 800176a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_USART2_UART_Init+0x50>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_USART2_UART_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_USART2_UART_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_USART2_UART_Init+0x50>)
 8001784:	f007 f862 	bl	800884c <HAL_UART_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800178e:	f002 f9b3 	bl	8003af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000050c 	.word	0x2000050c
 800179c:	40004400 	.word	0x40004400

080017a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_DMA_Init+0x4c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <MX_DMA_Init+0x4c>)
 80017b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_DMA_Init+0x4c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	2010      	movs	r0, #16
 80017c8:	f002 fdcd 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017cc:	2010      	movs	r0, #16
 80017ce:	f002 fde6 	bl	800439e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2011      	movs	r0, #17
 80017d8:	f002 fdc5 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017dc:	2011      	movs	r0, #17
 80017de:	f002 fdde 	bl	800439e <HAL_NVIC_EnableIRQ>

}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800

080017f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b60      	ldr	r3, [pc, #384]	; (800198c <MX_GPIO_Init+0x19c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a5f      	ldr	r2, [pc, #380]	; (800198c <MX_GPIO_Init+0x19c>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b5d      	ldr	r3, [pc, #372]	; (800198c <MX_GPIO_Init+0x19c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b59      	ldr	r3, [pc, #356]	; (800198c <MX_GPIO_Init+0x19c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a58      	ldr	r2, [pc, #352]	; (800198c <MX_GPIO_Init+0x19c>)
 800182c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b56      	ldr	r3, [pc, #344]	; (800198c <MX_GPIO_Init+0x19c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	4b52      	ldr	r3, [pc, #328]	; (800198c <MX_GPIO_Init+0x19c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a51      	ldr	r2, [pc, #324]	; (800198c <MX_GPIO_Init+0x19c>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b4f      	ldr	r3, [pc, #316]	; (800198c <MX_GPIO_Init+0x19c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b4b      	ldr	r3, [pc, #300]	; (800198c <MX_GPIO_Init+0x19c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a4a      	ldr	r2, [pc, #296]	; (800198c <MX_GPIO_Init+0x19c>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b48      	ldr	r3, [pc, #288]	; (800198c <MX_GPIO_Init+0x19c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	2120      	movs	r1, #32
 800187a:	4845      	ldr	r0, [pc, #276]	; (8001990 <MX_GPIO_Init+0x1a0>)
 800187c:	f003 fb56 	bl	8004f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay_ch_2_Pin|Relay_ch_3_Pin, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	f241 0104 	movw	r1, #4100	; 0x1004
 8001886:	4843      	ldr	r0, [pc, #268]	; (8001994 <MX_GPIO_Init+0x1a4>)
 8001888:	f003 fb50 	bl	8004f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	2180      	movs	r1, #128	; 0x80
 8001890:	4841      	ldr	r0, [pc, #260]	; (8001998 <MX_GPIO_Init+0x1a8>)
 8001892:	f003 fb4b 	bl	8004f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_ch_4_GPIO_Port, Relay_ch_4_Pin, GPIO_PIN_SET);
 8001896:	2201      	movs	r2, #1
 8001898:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800189c:	483c      	ldr	r0, [pc, #240]	; (8001990 <MX_GPIO_Init+0x1a0>)
 800189e:	f003 fb45 	bl	8004f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018a8:	4b3c      	ldr	r3, [pc, #240]	; (800199c <MX_GPIO_Init+0x1ac>)
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4838      	ldr	r0, [pc, #224]	; (8001998 <MX_GPIO_Init+0x1a8>)
 80018b8:	f003 f99c 	bl	8004bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Relay_ch_4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Relay_ch_4_Pin;
 80018bc:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	482e      	ldr	r0, [pc, #184]	; (8001990 <MX_GPIO_Init+0x1a0>)
 80018d6:	f003 f98d 	bl	8004bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_ch_2_Pin Relay_ch_3_Pin */
  GPIO_InitStruct.Pin = Relay_ch_2_Pin|Relay_ch_3_Pin;
 80018da:	f241 0304 	movw	r3, #4100	; 0x1004
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4828      	ldr	r0, [pc, #160]	; (8001994 <MX_GPIO_Init+0x1a4>)
 80018f4:	f003 f97e 	bl	8004bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Switch_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Signal_Pin;
 80018f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001902:	2302      	movs	r3, #2
 8001904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Switch_Signal_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4821      	ldr	r0, [pc, #132]	; (8001994 <MX_GPIO_Init+0x1a4>)
 800190e:	f003 f971 	bl	8004bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Index_Signal_Pin */
  GPIO_InitStruct.Pin = Index_Signal_Pin;
 8001912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <MX_GPIO_Init+0x1b0>)
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Index_Signal_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	481b      	ldr	r0, [pc, #108]	; (8001994 <MX_GPIO_Init+0x1a4>)
 8001928:	f003 f964 	bl	8004bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4815      	ldr	r0, [pc, #84]	; (8001998 <MX_GPIO_Init+0x1a8>)
 8001944:	f003 f956 	bl	8004bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitchSignal_Pin */
  GPIO_InitStruct.Pin = LimitSwitchSignal_Pin;
 8001948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <MX_GPIO_Init+0x1b0>)
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitchSignal_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	480e      	ldr	r0, [pc, #56]	; (8001998 <MX_GPIO_Init+0x1a8>)
 800195e:	f003 f949 	bl	8004bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	2017      	movs	r0, #23
 8001968:	f002 fcfd 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800196c:	2017      	movs	r0, #23
 800196e:	f002 fd16 	bl	800439e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	2028      	movs	r0, #40	; 0x28
 8001978:	f002 fcf5 	bl	8004366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800197c:	2028      	movs	r0, #40	; 0x28
 800197e:	f002 fd0e 	bl	800439e <HAL_NVIC_EnableIRQ>

}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000
 8001994:	40020400 	.word	0x40020400
 8001998:	40020800 	.word	0x40020800
 800199c:	10210000 	.word	0x10210000
 80019a0:	10110000 	.word	0x10110000

080019a4 <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 12288
#define  MAX_ENCODER_PERIOD 24576

void EncoderVelocityAndPosition_Update()
{
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	ed2d 8b02 	vpush	{d8}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;
	static int32_t Velocity_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <EncoderVelocityAndPosition_Update+0xbc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	61fb      	str	r3, [r7, #28]

	uint64_t EncoderNowTimestamp = micros();
 80019b6:	f000 f8d9 	bl	8001b6c <micros>
 80019ba:	e9c7 0104 	strd	r0, r1, [r7, #16]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 80019be:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <EncoderVelocityAndPosition_Update+0xc0>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019c8:	1a84      	subs	r4, r0, r2
 80019ca:	eb61 0503 	sbc.w	r5, r1, r3
 80019ce:	e9c7 4502 	strd	r4, r5, [r7, #8]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80019d2:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <EncoderVelocityAndPosition_Update+0xc4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	607b      	str	r3, [r7, #4]

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80019dc:	4a22      	ldr	r2, [pc, #136]	; (8001a68 <EncoderVelocityAndPosition_Update+0xc4>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80019e2:	4920      	ldr	r1, [pc, #128]	; (8001a64 <EncoderVelocityAndPosition_Update+0xc0>)
 80019e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019e8:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <EncoderVelocityAndPosition_Update+0xc8>)
 80019f8:	edc3 7a06 	vstr	s15, [r3, #24]

	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <EncoderVelocityAndPosition_Update+0xcc>)
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001a0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a10:	f7ff f986 	bl	8000d20 <__aeabi_ul2f>
 8001a14:	ee07 0a10 	vmov	s14, r0
 8001a18:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a20:	ee17 2a90 	vmov	r2, s15
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <EncoderVelocityAndPosition_Update+0xd0>)
 8001a26:	601a      	str	r2, [r3, #0]

	// LPF
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*249))/250.0;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <EncoderVelocityAndPosition_Update+0xd0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <EncoderVelocityAndPosition_Update+0xd4>)
 8001a36:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a3a:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a7c <EncoderVelocityAndPosition_Update+0xd8>
 8001a3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a46:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001a80 <EncoderVelocityAndPosition_Update+0xdc>
 8001a4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <EncoderVelocityAndPosition_Update+0xd4>)
 8001a50:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	ecbd 8b02 	vpop	{d8}
 8001a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a60:	2000047c 	.word	0x2000047c
 8001a64:	200001f0 	.word	0x200001f0
 8001a68:	200001f8 	.word	0x200001f8
 8001a6c:	20000108 	.word	0x20000108
 8001a70:	000f4240 	.word	0x000f4240
 8001a74:	200001fc 	.word	0x200001fc
 8001a78:	20000138 	.word	0x20000138
 8001a7c:	43790000 	.word	0x43790000
 8001a80:	437a0000 	.word	0x437a0000

08001a84 <HAL_TIM_PeriodElapsedCallback>:
{
	HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a84:	b4b0      	push	{r4, r5, r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d109      	bne.n	8001aa8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001a9e:	f143 0500 	adc.w	r5, r3, #0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001aa4:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bcb0      	pop	{r4, r5, r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200004c4 	.word	0x200004c4
 8001ab8:	200000b0 	.word	0x200000b0

08001abc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13) // If The INT Source Is EXTI Line15 -> index  ///13 for test
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001acc:	d11c      	bne.n	8001b08 <HAL_GPIO_EXTI_Callback+0x4c>
	{
    	if ((Munmunbot_State == STATE_SetHome) || (Munmunbot_State == STATE_PreSetHome))
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x98>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_EXTI_Callback+0x22>
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x98>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b07      	cmp	r3, #7
 8001adc:	d114      	bne.n	8001b08 <HAL_GPIO_EXTI_Callback+0x4c>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d110      	bne.n	8001b08 <HAL_GPIO_EXTI_Callback+0x4c>
    		{
    			HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001aec:	6852      	ldr	r2, [r2, #4]
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
    			SethomeMode = SetHomeState_2;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001af2:	2202      	movs	r2, #2
 8001af4:	701a      	strb	r2, [r3, #0]
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	481a      	ldr	r0, [pc, #104]	; (8001b64 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001afc:	f003 fa16 	bl	8004f2c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_GPIO_EXTI_Callback+0xac>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2200      	movs	r2, #0
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34
    		}
    	}
	}

    if(GPIO_Pin == GPIO_PIN_8) // LimitSwitch
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b0e:	d11c      	bne.n	8001b4a <HAL_GPIO_EXTI_Callback+0x8e>
	{
    	if ((Munmunbot_State == STATE_SetHome) || (Munmunbot_State == STATE_PreSetHome))
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x98>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b06      	cmp	r3, #6
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_EXTI_Callback+0x64>
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x98>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b07      	cmp	r3, #7
 8001b1e:	d114      	bne.n	8001b4a <HAL_GPIO_EXTI_Callback+0x8e>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d110      	bne.n	8001b4a <HAL_GPIO_EXTI_Callback+0x8e>
    		{
    			HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001b2e:	6852      	ldr	r2, [r2, #4]
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
    			SethomeMode = SetHomeState_2;
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001b34:	2202      	movs	r2, #2
 8001b36:	701a      	strb	r2, [r3, #0]
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	4809      	ldr	r0, [pc, #36]	; (8001b64 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001b3e:	f003 f9f5 	bl	8004f2c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_GPIO_EXTI_Callback+0xac>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34
//    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
//				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
//    		}
//    	}
//	}
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200000d9 	.word	0x200000d9
 8001b58:	200000da 	.word	0x200000da
 8001b5c:	2000047c 	.word	0x2000047c
 8001b60:	200001e0 	.word	0x200001e0
 8001b64:	40020800 	.word	0x40020800
 8001b68:	200003d4 	.word	0x200003d4

08001b6c <micros>:

uint64_t micros()
{
 8001b6c:	b4b0      	push	{r4, r5, r7}
 8001b6e:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <micros+0x2c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	4618      	mov	r0, r3
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <micros+0x30>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	1884      	adds	r4, r0, r2
 8001b84:	eb41 0503 	adc.w	r5, r1, r3
 8001b88:	4622      	mov	r2, r4
 8001b8a:	462b      	mov	r3, r5
}
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bcb0      	pop	{r4, r5, r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	200004c4 	.word	0x200004c4
 8001b9c:	200000b0 	.word	0x200000b0

08001ba0 <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bae:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	009a      	lsls	r2, r3, #2
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 10;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	220a      	movs	r2, #10
 8001bbe:	609a      	str	r2, [r3, #8]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	0000      	movs	r0, r0
	...

08001bd0 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.25*(CUSSvar->PPRxQEI))/3.141;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fc3c 	bl	800045c <__aeabi_ui2d>
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <TrajectoryGenerationStructureInit+0xe8>)
 8001bea:	f7fe fcb1 	bl	8000550 <__aeabi_dmul>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	a32e      	add	r3, pc, #184	; (adr r3, 8001cb0 <TrajectoryGenerationStructureInit+0xe0>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fdd2 	bl	80007a4 <__aeabi_ddiv>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f7fe ff72 	bl	8000af0 <__aeabi_d2f>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	615a      	str	r2, [r3, #20]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fc1c 	bl	800045c <__aeabi_ui2d>
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <TrajectoryGenerationStructureInit+0xec>)
 8001c2a:	f7fe fdbb 	bl	80007a4 <__aeabi_ddiv>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4610      	mov	r0, r2
 8001c34:	4619      	mov	r1, r3
 8001c36:	f7fe ff5b 	bl	8000af0 <__aeabi_d2f>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = CUSSStruc.PPRxQEI;  /// PPRxQEI == 0 degree
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <TrajectoryGenerationStructureInit+0xf0>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	TGSvar->Mode = 0;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	671a      	str	r2, [r3, #112]	; 0x70
	TGSvar->Submode = 0;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	675a      	str	r2, [r3, #116]	; 0x74
	TGSvar->Loop_Freq = 10000;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c64:	651a      	str	r2, [r3, #80]	; 0x50
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c6a:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <TrajectoryGenerationStructureInit+0xf4>)
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	9ba5e354 	.word	0x9ba5e354
 8001cb4:	400920c4 	.word	0x400920c4
 8001cb8:	3fd00000 	.word	0x3fd00000
 8001cbc:	404e0000 	.word	0x404e0000
 8001cc0:	200001e0 	.word	0x200001e0
 8001cc4:	000f4240 	.word	0x000f4240

08001cc8 <VelocityControllerInit>:

void VelocityControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <VelocityControllerInit+0x60>)
 8001cd6:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 10;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <VelocityControllerInit+0x64>)
 8001cdc:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0.15;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <VelocityControllerInit+0x68>)
 8001ce2:	609a      	str	r2, [r3, #8]
	VCvar->offSet = 0;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
	VCvar->Integral_Value = 0;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	61da      	str	r2, [r3, #28]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7fe fbf1 	bl	80004e4 <__aeabi_ul2d>
 8001d02:	a307      	add	r3, pc, #28	; (adr r3, 8001d20 <VelocityControllerInit+0x58>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fd4c 	bl	80007a4 <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	00000000 	.word	0x00000000
 8001d24:	412e8480 	.word	0x412e8480
 8001d28:	40a00000 	.word	0x40a00000
 8001d2c:	41200000 	.word	0x41200000
 8001d30:	3e19999a 	.word	0x3e19999a
 8001d34:	00000000 	.word	0x00000000

08001d38 <DisplacementControllerInit>:

void DisplacementControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d48:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d50:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
	VCvar->offSet = 0;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
	VCvar->Integral_Value = 0;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f7fe fbb6 	bl	80004e4 <__aeabi_ul2d>
 8001d78:	a307      	add	r3, pc, #28	; (adr r3, 8001d98 <DisplacementControllerInit+0x60>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe fd11 	bl	80007a4 <__aeabi_ddiv>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	f3af 8000 	nop.w
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	412e8480 	.word	0x412e8480

08001da0 <TrajectoryGenerationVelocityMaxSetting>:

void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp))/(60.0);   ///RPM to pps
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	6892      	ldr	r2, [r2, #8]
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fb50 	bl	800045c <__aeabi_ui2d>
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <TrajectoryGenerationVelocityMaxSetting+0x6c>)
 8001dc2:	f7fe fcef 	bl	80007a4 <__aeabi_ddiv>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe fe8f 	bl	8000af0 <__aeabi_d2f>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	611a      	str	r2, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	edd3 6a04 	vldr	s13, [r3, #16]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	ed93 7a05 	vldr	s14, [r3, #20]
 8001de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	ed93 7a04 	vldr	s14, [r3, #16]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	404e0000 	.word	0x404e0000

08001e10 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	if (MovingLinkMode == LMM_Set_Pos_Directly)
 8001e14:	4b98      	ldr	r3, [pc, #608]	; (8002078 <TrajectoryGenerationPrepareDATA+0x268>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d165      	bne.n	8001ee8 <TrajectoryGenerationPrepareDATA+0xd8>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 8001e1c:	4b97      	ldr	r3, [pc, #604]	; (800207c <TrajectoryGenerationPrepareDATA+0x26c>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b97      	ldr	r3, [pc, #604]	; (8002080 <TrajectoryGenerationPrepareDATA+0x270>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	fb03 f302 	mul.w	r3, r3, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fb16 	bl	800045c <__aeabi_ui2d>
 8001e30:	a38f      	add	r3, pc, #572	; (adr r3, 8002070 <TrajectoryGenerationPrepareDATA+0x260>)
 8001e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e36:	f7fe fcb5 	bl	80007a4 <__aeabi_ddiv>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7fe fe55 	bl	8000af0 <__aeabi_d2f>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a8e      	ldr	r2, [pc, #568]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001e4a:	6613      	str	r3, [r2, #96]	; 0x60
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 8001e4c:	4b8d      	ldr	r3, [pc, #564]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001e4e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001e52:	4b8b      	ldr	r3, [pc, #556]	; (8002080 <TrajectoryGenerationPrepareDATA+0x270>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e66:	db0d      	blt.n	8001e84 <TrajectoryGenerationPrepareDATA+0x74>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001e68:	4b86      	ldr	r3, [pc, #536]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001e6a:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001e6e:	4b84      	ldr	r3, [pc, #528]	; (8002080 <TrajectoryGenerationPrepareDATA+0x270>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7e:	4b81      	ldr	r3, [pc, #516]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001e80:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		  }
		  TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8001e84:	4b7f      	ldr	r3, [pc, #508]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001e86:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001e8a:	4b7d      	ldr	r3, [pc, #500]	; (8002080 <TrajectoryGenerationPrepareDATA+0x270>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	4b7a      	ldr	r3, [pc, #488]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001e9c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

		  if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 8001ea0:	4b78      	ldr	r3, [pc, #480]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001ea2:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001ea6:	4b77      	ldr	r3, [pc, #476]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001ea8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001eac:	eeb4 7a67 	vcmp.f32	s14, s15
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb4:	d00e      	beq.n	8001ed4 <TrajectoryGenerationPrepareDATA+0xc4>
		  {
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8001eb6:	4b73      	ldr	r3, [pc, #460]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001eb8:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001ebc:	4b71      	ldr	r3, [pc, #452]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001ebe:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec6:	4b6f      	ldr	r3, [pc, #444]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001ec8:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			  Munmunbot_State = STATE_Calculation;
 8001ecc:	4b6e      	ldr	r3, [pc, #440]	; (8002088 <TrajectoryGenerationPrepareDATA+0x278>)
 8001ece:	2203      	movs	r2, #3
 8001ed0:	701a      	strb	r2, [r3, #0]
	  else  ///shouldn't happen
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
	  }
}
 8001ed2:	e0ca      	b.n	800206a <TrajectoryGenerationPrepareDATA+0x25a>
			Munmunbot_State = STATE_Idle;
 8001ed4:	4b6c      	ldr	r3, [pc, #432]	; (8002088 <TrajectoryGenerationPrepareDATA+0x278>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8001eda:	4b67      	ldr	r3, [pc, #412]	; (8002078 <TrajectoryGenerationPrepareDATA+0x268>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
			ACK2Return(&UART2);
 8001ee0:	486a      	ldr	r0, [pc, #424]	; (800208c <TrajectoryGenerationPrepareDATA+0x27c>)
 8001ee2:	f000 fefd 	bl	8002ce0 <ACK2Return>
}
 8001ee6:	e0c0      	b.n	800206a <TrajectoryGenerationPrepareDATA+0x25a>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 8001ee8:	4b63      	ldr	r3, [pc, #396]	; (8002078 <TrajectoryGenerationPrepareDATA+0x268>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d004      	beq.n	8001efa <TrajectoryGenerationPrepareDATA+0xea>
 8001ef0:	4b61      	ldr	r3, [pc, #388]	; (8002078 <TrajectoryGenerationPrepareDATA+0x268>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	f040 80b1 	bne.w	800205c <TrajectoryGenerationPrepareDATA+0x24c>
		  if (NumberOfStationToGo == 0)
 8001efa:	4b65      	ldr	r3, [pc, #404]	; (8002090 <TrajectoryGenerationPrepareDATA+0x280>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10f      	bne.n	8001f22 <TrajectoryGenerationPrepareDATA+0x112>
				Munmunbot_State = STATE_Idle;
 8001f02:	4b61      	ldr	r3, [pc, #388]	; (8002088 <TrajectoryGenerationPrepareDATA+0x278>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 8001f08:	4b62      	ldr	r3, [pc, #392]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 8001f0e:	4b60      	ldr	r3, [pc, #384]	; (8002090 <TrajectoryGenerationPrepareDATA+0x280>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8001f14:	4b58      	ldr	r3, [pc, #352]	; (8002078 <TrajectoryGenerationPrepareDATA+0x268>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 8001f1a:	485c      	ldr	r0, [pc, #368]	; (800208c <TrajectoryGenerationPrepareDATA+0x27c>)
 8001f1c:	f000 fee0 	bl	8002ce0 <ACK2Return>
		  if (NumberOfStationToGo == 0)
 8001f20:	e0a3      	b.n	800206a <TrajectoryGenerationPrepareDATA+0x25a>
			Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 8001f22:	4b5c      	ldr	r3, [pc, #368]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <TrajectoryGenerationPrepareDATA+0x288>)
 8001f2a:	5c9a      	ldrb	r2, [r3, r2]
 8001f2c:	4b5b      	ldr	r3, [pc, #364]	; (800209c <TrajectoryGenerationPrepareDATA+0x28c>)
 8001f2e:	701a      	strb	r2, [r3, #0]
			if (Current_Station > 10)   //pass input
 8001f30:	4b5a      	ldr	r3, [pc, #360]	; (800209c <TrajectoryGenerationPrepareDATA+0x28c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b0a      	cmp	r3, #10
 8001f36:	d90c      	bls.n	8001f52 <TrajectoryGenerationPrepareDATA+0x142>
				NumberOfStationPTR += 1;
 8001f38:	4b56      	ldr	r3, [pc, #344]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b54      	ldr	r3, [pc, #336]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001f42:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 8001f44:	4b52      	ldr	r3, [pc, #328]	; (8002090 <TrajectoryGenerationPrepareDATA+0x280>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b50      	ldr	r3, [pc, #320]	; (8002090 <TrajectoryGenerationPrepareDATA+0x280>)
 8001f4e:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001f50:	e08b      	b.n	800206a <TrajectoryGenerationPrepareDATA+0x25a>
				TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0))*5.0;   ///fix this if change algorithm
 8001f52:	4b52      	ldr	r3, [pc, #328]	; (800209c <TrajectoryGenerationPrepareDATA+0x28c>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	4a51      	ldr	r2, [pc, #324]	; (80020a0 <TrajectoryGenerationPrepareDATA+0x290>)
 8001f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b47      	ldr	r3, [pc, #284]	; (8002080 <TrajectoryGenerationPrepareDATA+0x270>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	fb03 f302 	mul.w	r3, r3, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fa77 	bl	800045c <__aeabi_ui2d>
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	4b4c      	ldr	r3, [pc, #304]	; (80020a4 <TrajectoryGenerationPrepareDATA+0x294>)
 8001f74:	f7fe fc16 	bl	80007a4 <__aeabi_ddiv>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	4b48      	ldr	r3, [pc, #288]	; (80020a8 <TrajectoryGenerationPrepareDATA+0x298>)
 8001f86:	f7fe fae3 	bl	8000550 <__aeabi_dmul>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7fe fdad 	bl	8000af0 <__aeabi_d2f>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4a3a      	ldr	r2, [pc, #232]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001f9a:	6613      	str	r3, [r2, #96]	; 0x60
				if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)  ///wrap input into 1 revolute. ///shouldn't happen
 8001f9c:	4b39      	ldr	r3, [pc, #228]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001f9e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <TrajectoryGenerationPrepareDATA+0x270>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb6:	db0d      	blt.n	8001fd4 <TrajectoryGenerationPrepareDATA+0x1c4>
					TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001fb8:	4b32      	ldr	r3, [pc, #200]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001fba:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <TrajectoryGenerationPrepareDATA+0x270>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fce:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001fd0:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001fd6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <TrajectoryGenerationPrepareDATA+0x270>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fea:	4b26      	ldr	r3, [pc, #152]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001fec:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				if (TrjStruc.Desire_Theta == TrjStruc.Start_Theta)
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001ff2:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001ff6:	4b23      	ldr	r3, [pc, #140]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8001ff8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001ffc:	eeb4 7a67 	vcmp.f32	s14, s15
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	d10f      	bne.n	8002026 <TrajectoryGenerationPrepareDATA+0x216>
					NumberOfStationPTR += 1;
 8002006:	4b23      	ldr	r3, [pc, #140]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4b21      	ldr	r3, [pc, #132]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8002010:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8002012:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <TrajectoryGenerationPrepareDATA+0x280>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	3b01      	subs	r3, #1
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <TrajectoryGenerationPrepareDATA+0x280>)
 800201c:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_End_Effector_Working;
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <TrajectoryGenerationPrepareDATA+0x278>)
 8002020:	2205      	movs	r2, #5
 8002022:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8002024:	e021      	b.n	800206a <TrajectoryGenerationPrepareDATA+0x25a>
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8002028:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 800202e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <TrajectoryGenerationPrepareDATA+0x274>)
 8002038:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
					Munmunbot_State = STATE_Calculation;
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <TrajectoryGenerationPrepareDATA+0x278>)
 800203e:	2203      	movs	r2, #3
 8002040:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 800204c:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <TrajectoryGenerationPrepareDATA+0x280>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	3b01      	subs	r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <TrajectoryGenerationPrepareDATA+0x280>)
 8002058:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 800205a:	e006      	b.n	800206a <TrajectoryGenerationPrepareDATA+0x25a>
		MovingLinkMode = LMM_Not_Set;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <TrajectoryGenerationPrepareDATA+0x268>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <TrajectoryGenerationPrepareDATA+0x278>)
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
}
 8002068:	e7ff      	b.n	800206a <TrajectoryGenerationPrepareDATA+0x25a>
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	99999999 	.word	0x99999999
 8002074:	40eeadf9 	.word	0x40eeadf9
 8002078:	200000ee 	.word	0x200000ee
 800207c:	200000ec 	.word	0x200000ec
 8002080:	200001e0 	.word	0x200001e0
 8002084:	20000168 	.word	0x20000168
 8002088:	200000d9 	.word	0x200000d9
 800208c:	200000b8 	.word	0x200000b8
 8002090:	200000f0 	.word	0x200000f0
 8002094:	200000f1 	.word	0x200000f1
 8002098:	200000dc 	.word	0x200000dc
 800209c:	200000ef 	.word	0x200000ef
 80020a0:	20000000 	.word	0x20000000
 80020a4:	40768000 	.word	0x40768000
 80020a8:	40140000 	.word	0x40140000

080020ac <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 80020ac:	b5b0      	push	{r4, r5, r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 80020b0:	4b84      	ldr	r3, [pc, #528]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80020b2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80020b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020be:	d518      	bpl.n	80020f2 <TrajectoryGenerationCalculation+0x46>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 80020c0:	4b80      	ldr	r3, [pc, #512]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80020c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80020c6:	eef1 7a67 	vneg.f32	s15, s15
 80020ca:	4b7e      	ldr	r3, [pc, #504]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80020cc:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 80020d0:	4b7c      	ldr	r3, [pc, #496]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80020d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80020d6:	eef1 7a67 	vneg.f32	s15, s15
 80020da:	4b7a      	ldr	r3, [pc, #488]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80020dc:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 80020e0:	4b78      	ldr	r3, [pc, #480]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80020e2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80020e6:	eef1 7a67 	vneg.f32	s15, s15
 80020ea:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80020ec:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 80020f0:	e013      	b.n	800211a <TrajectoryGenerationCalculation+0x6e>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 80020f2:	4b74      	ldr	r3, [pc, #464]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80020f4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80020f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	dd0b      	ble.n	800211a <TrajectoryGenerationCalculation+0x6e>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 8002102:	4b70      	ldr	r3, [pc, #448]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	4a6f      	ldr	r2, [pc, #444]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002108:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 800210a:	4b6e      	ldr	r3, [pc, #440]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	4a6d      	ldr	r2, [pc, #436]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002110:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 8002112:	4b6c      	ldr	r3, [pc, #432]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002116:	4a6b      	ldr	r2, [pc, #428]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002118:	66d3      	str	r3, [r2, #108]	; 0x6c
	  }

	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 800211a:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 800211c:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8002120:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002122:	edd3 7a03 	vldr	s15, [r3, #12]
 8002126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800212a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212e:	d554      	bpl.n	80021da <TrajectoryGenerationCalculation+0x12e>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 8002130:	4b64      	ldr	r3, [pc, #400]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002132:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8002136:	4b63      	ldr	r3, [pc, #396]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002138:	edd3 7a05 	vldr	s15, [r3, #20]
 800213c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002140:	ee16 0a90 	vmov	r0, s13
 8002144:	f7fe f9ac 	bl	80004a0 <__aeabi_f2d>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	ec43 2b10 	vmov	d0, r2, r3
 8002150:	f007 fb8a 	bl	8009868 <sqrt>
 8002154:	ec53 2b10 	vmov	r2, r3, d0
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fcc8 	bl	8000af0 <__aeabi_d2f>
 8002160:	4603      	mov	r3, r0
 8002162:	4a58      	ldr	r2, [pc, #352]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002164:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8002166:	4b57      	ldr	r3, [pc, #348]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800216a:	4a56      	ldr	r2, [pc, #344]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 800216c:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 800216e:	4b55      	ldr	r3, [pc, #340]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002170:	ed93 7a07 	vldr	s14, [r3, #28]
 8002174:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002176:	edd3 6a01 	vldr	s13, [r3, #4]
 800217a:	4b52      	ldr	r3, [pc, #328]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 800217c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002188:	ee17 0a90 	vmov	r0, s15
 800218c:	f7fe f988 	bl	80004a0 <__aeabi_f2d>
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002198:	f7fe fb04 	bl	80007a4 <__aeabi_ddiv>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4614      	mov	r4, r2
 80021a2:	461d      	mov	r5, r3
 80021a4:	4b47      	ldr	r3, [pc, #284]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f979 	bl	80004a0 <__aeabi_f2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4620      	mov	r0, r4
 80021b4:	4629      	mov	r1, r5
 80021b6:	f7fe f815 	bl	80001e4 <__adddf3>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7fe fc95 	bl	8000af0 <__aeabi_d2f>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4a3e      	ldr	r2, [pc, #248]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80021ca:	62d3      	str	r3, [r2, #44]	; 0x2c
		 TrjStruc.Mode = 0;
 80021cc:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	671a      	str	r2, [r3, #112]	; 0x70
		 TrjStruc.Submode = 0;
 80021d2:	4b3c      	ldr	r3, [pc, #240]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	675a      	str	r2, [r3, #116]	; 0x74
 80021d8:	e063      	b.n	80022a2 <TrajectoryGenerationCalculation+0x1f6>
	  }
	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 80021da:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80021dc:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80021e0:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80021e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80021e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ee:	db58      	blt.n	80022a2 <TrajectoryGenerationCalculation+0x1f6>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 80021f0:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80021f2:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80021f6:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80021f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80021fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002202:	ed93 7a04 	vldr	s14, [r3, #16]
 8002206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800220a:	4b2e      	ldr	r3, [pc, #184]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 800220c:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8002210:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002214:	4a2b      	ldr	r2, [pc, #172]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002216:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 8002218:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 800221a:	ed93 7a07 	vldr	s14, [r3, #28]
 800221e:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002220:	edd3 6a00 	vldr	s13, [r3]
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002232:	ee17 0a90 	vmov	r0, s15
 8002236:	f7fe f933 	bl	80004a0 <__aeabi_f2d>
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002242:	f7fe faaf 	bl	80007a4 <__aeabi_ddiv>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4614      	mov	r4, r2
 800224c:	461d      	mov	r5, r3
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f924 	bl	80004a0 <__aeabi_f2d>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4620      	mov	r0, r4
 800225e:	4629      	mov	r1, r5
 8002260:	f7fd ffc0 	bl	80001e4 <__adddf3>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fc40 	bl	8000af0 <__aeabi_d2f>
 8002270:	4603      	mov	r3, r0
 8002272:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002274:	62d3      	str	r3, [r2, #44]	; 0x2c
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002278:	ed93 7a06 	vldr	s14, [r3, #24]
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 800227e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002288:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800228c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002292:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  TrjStruc.Mode = 1;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 8002298:	2201      	movs	r2, #1
 800229a:	671a      	str	r2, [r3, #112]	; 0x70
		  TrjStruc.Submode = 0;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 800229e:	2200      	movs	r2, #0
 80022a0:	675a      	str	r2, [r3, #116]	; 0x74
	  }
	 TrjStruc.Equation_Timestamp = micros();
 80022a2:	f7ff fc63 	bl	8001b6c <micros>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4906      	ldr	r1, [pc, #24]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80022ac:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 TrjStruc.Loop_Timestamp = micros();
 80022b0:	f7ff fc5c 	bl	8001b6c <micros>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4902      	ldr	r1, [pc, #8]	; (80022c4 <TrajectoryGenerationCalculation+0x218>)
 80022ba:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80022be:	bf00      	nop
 80022c0:	bdb0      	pop	{r4, r5, r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000168 	.word	0x20000168

080022c8 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	b088      	sub	sp, #32
 80022ce:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 80022d0:	f7ff fc4c 	bl	8001b6c <micros>
 80022d4:	4ba6      	ldr	r3, [pc, #664]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 80022d6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80022da:	1a84      	subs	r4, r0, r2
 80022dc:	eb61 0503 	sbc.w	r5, r1, r3
 80022e0:	4620      	mov	r0, r4
 80022e2:	4629      	mov	r1, r5
 80022e4:	f7fe f8fe 	bl	80004e4 <__aeabi_ul2d>
 80022e8:	a39f      	add	r3, pc, #636	; (adr r3, 8002568 <TrajectoryGenerationProcess+0x2a0>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fe fa59 	bl	80007a4 <__aeabi_ddiv>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	4b9d      	ldr	r3, [pc, #628]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 80022fc:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38

	 switch (TrjStruc.Mode)
 8002300:	4b9b      	ldr	r3, [pc, #620]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002304:	2b02      	cmp	r3, #2
 8002306:	f000 829d 	beq.w	8002844 <TrajectoryGenerationProcess+0x57c>
 800230a:	2b02      	cmp	r3, #2
 800230c:	f200 82a9 	bhi.w	8002862 <TrajectoryGenerationProcess+0x59a>
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <TrajectoryGenerationProcess+0x54>
 8002314:	2b01      	cmp	r3, #1
 8002316:	f000 8133 	beq.w	8002580 <TrajectoryGenerationProcess+0x2b8>
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  TrjStruc.AngularVelocityDesire = 0;
			  break;
		  }
}
 800231a:	e2a2      	b.n	8002862 <TrajectoryGenerationProcess+0x59a>
			  if (TrjStruc.Submode == 0)
 800231c:	4b94      	ldr	r3, [pc, #592]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 800231e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002320:	2b00      	cmp	r3, #0
 8002322:	d16e      	bne.n	8002402 <TrajectoryGenerationProcess+0x13a>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002324:	4b92      	ldr	r3, [pc, #584]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f8b9 	bl	80004a0 <__aeabi_f2d>
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	4b90      	ldr	r3, [pc, #576]	; (8002574 <TrajectoryGenerationProcess+0x2ac>)
 8002334:	f7fe f90c 	bl	8000550 <__aeabi_dmul>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4614      	mov	r4, r2
 800233e:	461d      	mov	r5, r3
 8002340:	4b8b      	ldr	r3, [pc, #556]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002342:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002346:	4b8a      	ldr	r3, [pc, #552]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002348:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800234c:	f7fe f900 	bl	8000550 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4620      	mov	r0, r4
 8002356:	4629      	mov	r1, r5
 8002358:	f7fe f8fa 	bl	8000550 <__aeabi_dmul>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4614      	mov	r4, r2
 8002362:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 8002364:	4b82      	ldr	r3, [pc, #520]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f899 	bl	80004a0 <__aeabi_f2d>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7fd ff35 	bl	80001e4 <__adddf3>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f7fe fbb5 	bl	8000af0 <__aeabi_d2f>
 8002386:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002388:	4a79      	ldr	r2, [pc, #484]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 800238a:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 800238c:	4b78      	ldr	r3, [pc, #480]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f885 	bl	80004a0 <__aeabi_f2d>
 8002396:	4b76      	ldr	r3, [pc, #472]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002398:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800239c:	f7fe f8d8 	bl	8000550 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	f7fe fba2 	bl	8000af0 <__aeabi_d2f>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4a70      	ldr	r2, [pc, #448]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 80023b0:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80023b2:	f7ff fbdb 	bl	8001b6c <micros>
 80023b6:	4b6e      	ldr	r3, [pc, #440]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 80023b8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80023bc:	1a84      	subs	r4, r0, r2
 80023be:	61bc      	str	r4, [r7, #24]
 80023c0:	eb61 0303 	sbc.w	r3, r1, r3
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023ca:	f7fe fca9 	bl	8000d20 <__aeabi_ul2f>
 80023ce:	ee06 0a90 	vmov	s13, r0
 80023d2:	4b67      	ldr	r3, [pc, #412]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 80023d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80023d8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002578 <TrajectoryGenerationProcess+0x2b0>
 80023dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	da00      	bge.n	80023ec <TrajectoryGenerationProcess+0x124>
			  break;
 80023ea:	e237      	b.n	800285c <TrajectoryGenerationProcess+0x594>
					  TrjStruc.Equation_Timestamp = micros();
 80023ec:	f7ff fbbe 	bl	8001b6c <micros>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	495e      	ldr	r1, [pc, #376]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 80023f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 80023fa:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	675a      	str	r2, [r3, #116]	; 0x74
			  break;
 8002400:	e22c      	b.n	800285c <TrajectoryGenerationProcess+0x594>
			  else if (TrjStruc.Submode == 1)
 8002402:	4b5b      	ldr	r3, [pc, #364]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002406:	2b01      	cmp	r3, #1
 8002408:	f040 8228 	bne.w	800285c <TrajectoryGenerationProcess+0x594>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 800240c:	4b58      	ldr	r3, [pc, #352]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f845 	bl	80004a0 <__aeabi_f2d>
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	4b58      	ldr	r3, [pc, #352]	; (800257c <TrajectoryGenerationProcess+0x2b4>)
 800241c:	f7fe f898 	bl	8000550 <__aeabi_dmul>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4614      	mov	r4, r2
 8002426:	461d      	mov	r5, r3
 8002428:	4b51      	ldr	r3, [pc, #324]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 800242a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800242e:	4b50      	ldr	r3, [pc, #320]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002430:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002434:	f7fe f88c 	bl	8000550 <__aeabi_dmul>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4620      	mov	r0, r4
 800243e:	4629      	mov	r1, r5
 8002440:	f7fe f886 	bl	8000550 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4614      	mov	r4, r2
 800244a:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 800244c:	4b48      	ldr	r3, [pc, #288]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 800244e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002452:	4b47      	ldr	r3, [pc, #284]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002454:	edd3 7a01 	vldr	s15, [r3, #4]
 8002458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245c:	ee17 0a90 	vmov	r0, s15
 8002460:	f7fe f81e 	bl	80004a0 <__aeabi_f2d>
 8002464:	4b42      	ldr	r3, [pc, #264]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002466:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800246a:	f7fe f871 	bl	8000550 <__aeabi_dmul>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	f7fd feb5 	bl	80001e4 <__adddf3>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4614      	mov	r4, r2
 8002480:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 8002482:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f80a 	bl	80004a0 <__aeabi_f2d>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4620      	mov	r0, r4
 8002492:	4629      	mov	r1, r5
 8002494:	f7fd fea6 	bl	80001e4 <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fb26 	bl	8000af0 <__aeabi_d2f>
 80024a4:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80024a6:	4a32      	ldr	r2, [pc, #200]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 80024a8:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 80024aa:	4b31      	ldr	r3, [pc, #196]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd fff6 	bl	80004a0 <__aeabi_f2d>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	613a      	str	r2, [r7, #16]
 80024ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 80024c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80024c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ca:	f7fe f841 	bl	8000550 <__aeabi_dmul>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4614      	mov	r4, r2
 80024d4:	461d      	mov	r5, r3
						  	  	  	  	  	  	   (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular);
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 80024d8:	ed93 7a07 	vldr	s14, [r3, #28]
 80024dc:	4b24      	ldr	r3, [pc, #144]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 80024de:	edd3 7a01 	vldr	s15, [r3, #4]
 80024e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e6:	ee17 0a90 	vmov	r0, s15
 80024ea:	f7fd ffd9 	bl	80004a0 <__aeabi_f2d>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
				  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 80024f2:	4620      	mov	r0, r4
 80024f4:	4629      	mov	r1, r5
 80024f6:	f7fd fe75 	bl	80001e4 <__adddf3>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	f7fe faf5 	bl	8000af0 <__aeabi_d2f>
 8002506:	4603      	mov	r3, r0
 8002508:	4a19      	ldr	r2, [pc, #100]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 800250a:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 800250c:	f7ff fb2e 	bl	8001b6c <micros>
 8002510:	4b17      	ldr	r3, [pc, #92]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002512:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002516:	1a84      	subs	r4, r0, r2
 8002518:	60bc      	str	r4, [r7, #8]
 800251a:	eb61 0303 	sbc.w	r3, r1, r3
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002524:	f7fe fbfc 	bl	8000d20 <__aeabi_ul2f>
 8002528:	ee06 0a90 	vmov	s13, r0
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 800252e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002532:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002578 <TrajectoryGenerationProcess+0x2b0>
 8002536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800253a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	da00      	bge.n	8002546 <TrajectoryGenerationProcess+0x27e>
			  break;
 8002544:	e18a      	b.n	800285c <TrajectoryGenerationProcess+0x594>
					  TrjStruc.Equation_Timestamp = micros();
 8002546:	f7ff fb11 	bl	8001b6c <micros>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002550:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 8002556:	2200      	movs	r2, #0
 8002558:	675a      	str	r2, [r3, #116]	; 0x74
					  TrjStruc.Mode = 2; ///Final Value Mode
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <TrajectoryGenerationProcess+0x2a8>)
 800255c:	2202      	movs	r2, #2
 800255e:	671a      	str	r2, [r3, #112]	; 0x70
			  break;
 8002560:	e17c      	b.n	800285c <TrajectoryGenerationProcess+0x594>
 8002562:	bf00      	nop
 8002564:	f3af 8000 	nop.w
 8002568:	00000000 	.word	0x00000000
 800256c:	412e8480 	.word	0x412e8480
 8002570:	20000168 	.word	0x20000168
 8002574:	3fe00000 	.word	0x3fe00000
 8002578:	49742400 	.word	0x49742400
 800257c:	bfe00000 	.word	0xbfe00000
			  if (TrjStruc.Submode == 0)
 8002580:	4bba      	ldr	r3, [pc, #744]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002584:	2b00      	cmp	r3, #0
 8002586:	d16e      	bne.n	8002666 <TrajectoryGenerationProcess+0x39e>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002588:	4bb8      	ldr	r3, [pc, #736]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fd ff87 	bl	80004a0 <__aeabi_f2d>
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	4bb6      	ldr	r3, [pc, #728]	; (8002870 <TrajectoryGenerationProcess+0x5a8>)
 8002598:	f7fd ffda 	bl	8000550 <__aeabi_dmul>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4614      	mov	r4, r2
 80025a2:	461d      	mov	r5, r3
 80025a4:	4bb1      	ldr	r3, [pc, #708]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80025a6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80025aa:	4bb0      	ldr	r3, [pc, #704]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80025ac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80025b0:	f7fd ffce 	bl	8000550 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4620      	mov	r0, r4
 80025ba:	4629      	mov	r1, r5
 80025bc:	f7fd ffc8 	bl	8000550 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4614      	mov	r4, r2
 80025c6:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 80025c8:	4ba8      	ldr	r3, [pc, #672]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd ff67 	bl	80004a0 <__aeabi_f2d>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4620      	mov	r0, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	f7fd fe03 	bl	80001e4 <__adddf3>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7fe fa83 	bl	8000af0 <__aeabi_d2f>
 80025ea:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80025ec:	4a9f      	ldr	r2, [pc, #636]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80025ee:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 80025f0:	4b9e      	ldr	r3, [pc, #632]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ff53 	bl	80004a0 <__aeabi_f2d>
 80025fa:	4b9c      	ldr	r3, [pc, #624]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80025fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002600:	f7fd ffa6 	bl	8000550 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	f7fe fa70 	bl	8000af0 <__aeabi_d2f>
 8002610:	4603      	mov	r3, r0
 8002612:	4a96      	ldr	r2, [pc, #600]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002614:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002616:	f7ff faa9 	bl	8001b6c <micros>
 800261a:	4b94      	ldr	r3, [pc, #592]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 800261c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002620:	1a84      	subs	r4, r0, r2
 8002622:	603c      	str	r4, [r7, #0]
 8002624:	eb61 0303 	sbc.w	r3, r1, r3
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800262e:	f7fe fb77 	bl	8000d20 <__aeabi_ul2f>
 8002632:	ee06 0a90 	vmov	s13, r0
 8002636:	4b8d      	ldr	r3, [pc, #564]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8002874 <TrajectoryGenerationProcess+0x5ac>
 8002640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002644:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264c:	da00      	bge.n	8002650 <TrajectoryGenerationProcess+0x388>
			  break;
 800264e:	e107      	b.n	8002860 <TrajectoryGenerationProcess+0x598>
					  TrjStruc.Equation_Timestamp = micros();
 8002650:	f7ff fa8c 	bl	8001b6c <micros>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4984      	ldr	r1, [pc, #528]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 800265a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 800265e:	4b83      	ldr	r3, [pc, #524]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002660:	2201      	movs	r2, #1
 8002662:	675a      	str	r2, [r3, #116]	; 0x74
			  break;
 8002664:	e0fc      	b.n	8002860 <TrajectoryGenerationProcess+0x598>
			  else if (TrjStruc.Submode == 1)
 8002666:	4b81      	ldr	r3, [pc, #516]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266a:	2b01      	cmp	r3, #1
 800266c:	d14c      	bne.n	8002708 <TrajectoryGenerationProcess+0x440>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 800266e:	4b7f      	ldr	r3, [pc, #508]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff14 	bl	80004a0 <__aeabi_f2d>
 8002678:	4b7c      	ldr	r3, [pc, #496]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 800267a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800267e:	f7fd ff67 	bl	8000550 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4614      	mov	r4, r2
 8002688:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 800268a:	4b78      	ldr	r3, [pc, #480]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd ff06 	bl	80004a0 <__aeabi_f2d>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4620      	mov	r0, r4
 800269a:	4629      	mov	r1, r5
 800269c:	f7fd fda2 	bl	80001e4 <__adddf3>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7fe fa22 	bl	8000af0 <__aeabi_d2f>
 80026ac:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80026ae:	4a6f      	ldr	r2, [pc, #444]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80026b0:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularVelocity;
 80026b2:	4b6e      	ldr	r3, [pc, #440]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	4a6d      	ldr	r2, [pc, #436]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80026b8:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 80026ba:	f7ff fa57 	bl	8001b6c <micros>
 80026be:	4b6b      	ldr	r3, [pc, #428]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80026c0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80026c4:	ebb0 0a02 	subs.w	sl, r0, r2
 80026c8:	eb61 0b03 	sbc.w	fp, r1, r3
 80026cc:	4650      	mov	r0, sl
 80026ce:	4659      	mov	r1, fp
 80026d0:	f7fe fb26 	bl	8000d20 <__aeabi_ul2f>
 80026d4:	ee06 0a90 	vmov	s13, r0
 80026d8:	4b64      	ldr	r3, [pc, #400]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80026da:	edd3 7a02 	vldr	s15, [r3, #8]
 80026de:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002874 <TrajectoryGenerationProcess+0x5ac>
 80026e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80026ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ee:	da00      	bge.n	80026f2 <TrajectoryGenerationProcess+0x42a>
			  break;
 80026f0:	e0b6      	b.n	8002860 <TrajectoryGenerationProcess+0x598>
					  TrjStruc.Equation_Timestamp = micros();
 80026f2:	f7ff fa3b 	bl	8001b6c <micros>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	495c      	ldr	r1, [pc, #368]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80026fc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 2;
 8002700:	4b5a      	ldr	r3, [pc, #360]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002702:	2202      	movs	r2, #2
 8002704:	675a      	str	r2, [r3, #116]	; 0x74
			  break;
 8002706:	e0ab      	b.n	8002860 <TrajectoryGenerationProcess+0x598>
			  else if (TrjStruc.Submode == 2)
 8002708:	4b58      	ldr	r3, [pc, #352]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 800270a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270c:	2b02      	cmp	r3, #2
 800270e:	f040 80a7 	bne.w	8002860 <TrajectoryGenerationProcess+0x598>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002712:	4b56      	ldr	r3, [pc, #344]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd fec2 	bl	80004a0 <__aeabi_f2d>
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	4b55      	ldr	r3, [pc, #340]	; (8002878 <TrajectoryGenerationProcess+0x5b0>)
 8002722:	f7fd ff15 	bl	8000550 <__aeabi_dmul>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4614      	mov	r4, r2
 800272c:	461d      	mov	r5, r3
 800272e:	4b4f      	ldr	r3, [pc, #316]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002730:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002734:	4b4d      	ldr	r3, [pc, #308]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002736:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800273a:	f7fd ff09 	bl	8000550 <__aeabi_dmul>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4620      	mov	r0, r4
 8002744:	4629      	mov	r1, r5
 8002746:	f7fd ff03 	bl	8000550 <__aeabi_dmul>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4614      	mov	r4, r2
 8002750:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002752:	4b46      	ldr	r3, [pc, #280]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	4618      	mov	r0, r3
 8002758:	f7fd fea2 	bl	80004a0 <__aeabi_f2d>
 800275c:	4b43      	ldr	r3, [pc, #268]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 800275e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002762:	f7fd fef5 	bl	8000550 <__aeabi_dmul>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4620      	mov	r0, r4
 800276c:	4629      	mov	r1, r5
 800276e:	f7fd fd39 	bl	80001e4 <__adddf3>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4614      	mov	r4, r2
 8002778:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 800277a:	4b3c      	ldr	r3, [pc, #240]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fe8e 	bl	80004a0 <__aeabi_f2d>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4620      	mov	r0, r4
 800278a:	4629      	mov	r1, r5
 800278c:	f7fd fd2a 	bl	80001e4 <__adddf3>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	f7fe f9aa 	bl	8000af0 <__aeabi_d2f>
 800279c:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 800279e:	4a33      	ldr	r2, [pc, #204]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80027a0:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 80027a2:	4b32      	ldr	r3, [pc, #200]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80027a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80027a8:	eef1 7a67 	vneg.f32	s15, s15
 80027ac:	ee17 3a90 	vmov	r3, s15
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fe75 	bl	80004a0 <__aeabi_f2d>
 80027b6:	4b2d      	ldr	r3, [pc, #180]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80027b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80027bc:	f7fd fec8 	bl	8000550 <__aeabi_dmul>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4614      	mov	r4, r2
 80027c6:	461d      	mov	r5, r3
						                           + ( TrjStruc.AngularVelocity );
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fe67 	bl	80004a0 <__aeabi_f2d>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4620      	mov	r0, r4
 80027d8:	4629      	mov	r1, r5
 80027da:	f7fd fd03 	bl	80001e4 <__adddf3>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4610      	mov	r0, r2
 80027e4:	4619      	mov	r1, r3
 80027e6:	f7fe f983 	bl	8000af0 <__aeabi_d2f>
 80027ea:	4603      	mov	r3, r0
				  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 80027ec:	4a1f      	ldr	r2, [pc, #124]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80027ee:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 80027f0:	f7ff f9bc 	bl	8001b6c <micros>
 80027f4:	4b1d      	ldr	r3, [pc, #116]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 80027f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80027fa:	ebb0 0802 	subs.w	r8, r0, r2
 80027fe:	eb61 0903 	sbc.w	r9, r1, r3
 8002802:	4640      	mov	r0, r8
 8002804:	4649      	mov	r1, r9
 8002806:	f7fe fa8b 	bl	8000d20 <__aeabi_ul2f>
 800280a:	ee06 0a90 	vmov	s13, r0
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002874 <TrajectoryGenerationProcess+0x5ac>
 8002818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800281c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002824:	da00      	bge.n	8002828 <TrajectoryGenerationProcess+0x560>
			  break;
 8002826:	e01b      	b.n	8002860 <TrajectoryGenerationProcess+0x598>
					  TrjStruc.Equation_Timestamp = micros();
 8002828:	f7ff f9a0 	bl	8001b6c <micros>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	490e      	ldr	r1, [pc, #56]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002832:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002838:	2200      	movs	r2, #0
 800283a:	675a      	str	r2, [r3, #116]	; 0x74
					  TrjStruc.Mode = 2; ///Final Value Mode
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 800283e:	2202      	movs	r2, #2
 8002840:	671a      	str	r2, [r3, #112]	; 0x70
			  break;
 8002842:	e00d      	b.n	8002860 <TrajectoryGenerationProcess+0x598>
			  Moving_Link_Task_Flag = 1;
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <TrajectoryGenerationProcess+0x5b4>)
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 800284c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284e:	4a07      	ldr	r2, [pc, #28]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002850:	6213      	str	r3, [r2, #32]
			  TrjStruc.AngularVelocityDesire = 0;
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <TrajectoryGenerationProcess+0x5a4>)
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
			  break;
 800285a:	e002      	b.n	8002862 <TrajectoryGenerationProcess+0x59a>
			  break;
 800285c:	bf00      	nop
 800285e:	e000      	b.n	8002862 <TrajectoryGenerationProcess+0x59a>
			  break;
 8002860:	bf00      	nop
}
 8002862:	bf00      	nop
 8002864:	3720      	adds	r7, #32
 8002866:	46bd      	mov	sp, r7
 8002868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800286c:	20000168 	.word	0x20000168
 8002870:	3fe00000 	.word	0x3fe00000
 8002874:	49742400 	.word	0x49742400
 8002878:	bfe00000 	.word	0xbfe00000
 800287c:	200000f8 	.word	0x200000f8

08002880 <PIDController2in1>:

void PIDController2in1()
{
 8002880:	b5b0      	push	{r4, r5, r7, lr}
 8002882:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 8002884:	4b83      	ldr	r3, [pc, #524]	; (8002a94 <PIDController2in1+0x214>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a83      	ldr	r2, [pc, #524]	; (8002a98 <PIDController2in1+0x218>)
 800288a:	6153      	str	r3, [r2, #20]
    PositionPIDController.NowError = PositionPIDController.OutputDesire - PositionPIDController.OutputFeedback;
 800288c:	4b82      	ldr	r3, [pc, #520]	; (8002a98 <PIDController2in1+0x218>)
 800288e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002892:	4b81      	ldr	r3, [pc, #516]	; (8002a98 <PIDController2in1+0x218>)
 8002894:	edd3 7a06 	vldr	s15, [r3, #24]
 8002898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800289c:	4b7e      	ldr	r3, [pc, #504]	; (8002a98 <PIDController2in1+0x218>)
 800289e:	edc3 7a08 	vstr	s15, [r3, #32]
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 80028a2:	4b7d      	ldr	r3, [pc, #500]	; (8002a98 <PIDController2in1+0x218>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fdfa 	bl	80004a0 <__aeabi_f2d>
 80028ac:	4604      	mov	r4, r0
 80028ae:	460d      	mov	r5, r1
 80028b0:	4b79      	ldr	r3, [pc, #484]	; (8002a98 <PIDController2in1+0x218>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fd fdf3 	bl	80004a0 <__aeabi_f2d>
 80028ba:	4b77      	ldr	r3, [pc, #476]	; (8002a98 <PIDController2in1+0x218>)
 80028bc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80028c0:	f7fd fe46 	bl	8000550 <__aeabi_dmul>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4620      	mov	r0, r4
 80028ca:	4629      	mov	r1, r5
 80028cc:	f7fd fc8a 	bl	80001e4 <__adddf3>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7fe f90a 	bl	8000af0 <__aeabi_d2f>
 80028dc:	4603      	mov	r3, r0
 80028de:	4a6e      	ldr	r2, [pc, #440]	; (8002a98 <PIDController2in1+0x218>)
 80028e0:	61d3      	str	r3, [r2, #28]
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 80028e2:	4b6d      	ldr	r3, [pc, #436]	; (8002a98 <PIDController2in1+0x218>)
 80028e4:	ed93 7a00 	vldr	s14, [r3]
 80028e8:	4b6b      	ldr	r3, [pc, #428]	; (8002a98 <PIDController2in1+0x218>)
 80028ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80028ee:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 80028f2:	4b69      	ldr	r3, [pc, #420]	; (8002a98 <PIDController2in1+0x218>)
 80028f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80028f8:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <PIDController2in1+0x218>)
 80028fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80028fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002906:	ee17 0a90 	vmov	r0, s15
 800290a:	f7fd fdc9 	bl	80004a0 <__aeabi_f2d>
 800290e:	4604      	mov	r4, r0
 8002910:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime)
 8002912:	4b61      	ldr	r3, [pc, #388]	; (8002a98 <PIDController2in1+0x218>)
 8002914:	ed93 7a02 	vldr	s14, [r3, #8]
 8002918:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <PIDController2in1+0x218>)
 800291a:	edd3 6a08 	vldr	s13, [r3, #32]
 800291e:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <PIDController2in1+0x218>)
 8002920:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002924:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292c:	ee17 0a90 	vmov	r0, s15
 8002930:	f7fd fdb6 	bl	80004a0 <__aeabi_f2d>
 8002934:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <PIDController2in1+0x218>)
 8002936:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800293a:	f7fd ff33 	bl	80007a4 <__aeabi_ddiv>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4620      	mov	r0, r4
 8002944:	4629      	mov	r1, r5
 8002946:	f7fd fc4d 	bl	80001e4 <__adddf3>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4614      	mov	r4, r2
 8002950:	461d      	mov	r5, r3
					  +(PositionPIDController.offSet);
 8002952:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <PIDController2in1+0x218>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fda2 	bl	80004a0 <__aeabi_f2d>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4620      	mov	r0, r4
 8002962:	4629      	mov	r1, r5
 8002964:	f7fd fc3e 	bl	80001e4 <__adddf3>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f7fe f8be 	bl	8000af0 <__aeabi_d2f>
 8002974:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002976:	4a48      	ldr	r2, [pc, #288]	; (8002a98 <PIDController2in1+0x218>)
 8002978:	6113      	str	r3, [r2, #16]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <PIDController2in1+0x218>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a46      	ldr	r2, [pc, #280]	; (8002a98 <PIDController2in1+0x218>)
 8002980:	6253      	str	r3, [r2, #36]	; 0x24

    VelocityPIDController.OutputDesire = PositionPIDController.ControllerOutput + TrjStruc.AngularVelocityDesire;
 8002982:	4b45      	ldr	r3, [pc, #276]	; (8002a98 <PIDController2in1+0x218>)
 8002984:	ed93 7a04 	vldr	s14, [r3, #16]
 8002988:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <PIDController2in1+0x214>)
 800298a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800298e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002992:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <PIDController2in1+0x21c>)
 8002994:	edc3 7a05 	vstr	s15, [r3, #20]
//    VelocityPIDController.OutputDesire = PositionPIDController.ControllerOutput;
    VelocityPIDController.NowError = VelocityPIDController.OutputDesire - VelocityPIDController.OutputFeedback;
 8002998:	4b40      	ldr	r3, [pc, #256]	; (8002a9c <PIDController2in1+0x21c>)
 800299a:	ed93 7a05 	vldr	s14, [r3, #20]
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <PIDController2in1+0x21c>)
 80029a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80029a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a8:	4b3c      	ldr	r3, [pc, #240]	; (8002a9c <PIDController2in1+0x21c>)
 80029aa:	edc3 7a08 	vstr	s15, [r3, #32]
    VelocityPIDController.Integral_Value += VelocityPIDController.NowError*VelocityPIDController.SamplingTime;
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <PIDController2in1+0x21c>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd fd74 	bl	80004a0 <__aeabi_f2d>
 80029b8:	4604      	mov	r4, r0
 80029ba:	460d      	mov	r5, r1
 80029bc:	4b37      	ldr	r3, [pc, #220]	; (8002a9c <PIDController2in1+0x21c>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fd6d 	bl	80004a0 <__aeabi_f2d>
 80029c6:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <PIDController2in1+0x21c>)
 80029c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80029cc:	f7fd fdc0 	bl	8000550 <__aeabi_dmul>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4620      	mov	r0, r4
 80029d6:	4629      	mov	r1, r5
 80029d8:	f7fd fc04 	bl	80001e4 <__adddf3>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	f7fe f884 	bl	8000af0 <__aeabi_d2f>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4a2c      	ldr	r2, [pc, #176]	; (8002a9c <PIDController2in1+0x21c>)
 80029ec:	61d3      	str	r3, [r2, #28]
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 80029ee:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <PIDController2in1+0x21c>)
 80029f0:	ed93 7a00 	vldr	s14, [r3]
 80029f4:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <PIDController2in1+0x21c>)
 80029f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80029fa:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
 80029fe:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <PIDController2in1+0x21c>)
 8002a00:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a04:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <PIDController2in1+0x21c>)
 8002a06:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a12:	ee17 0a90 	vmov	r0, s15
 8002a16:	f7fd fd43 	bl	80004a0 <__aeabi_f2d>
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	460d      	mov	r5, r1
					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime)
 8002a1e:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <PIDController2in1+0x21c>)
 8002a20:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <PIDController2in1+0x21c>)
 8002a26:	edd3 6a08 	vldr	s13, [r3, #32]
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <PIDController2in1+0x21c>)
 8002a2c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a30:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a38:	ee17 0a90 	vmov	r0, s15
 8002a3c:	f7fd fd30 	bl	80004a0 <__aeabi_f2d>
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <PIDController2in1+0x21c>)
 8002a42:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002a46:	f7fd fead 	bl	80007a4 <__aeabi_ddiv>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4620      	mov	r0, r4
 8002a50:	4629      	mov	r1, r5
 8002a52:	f7fd fbc7 	bl	80001e4 <__adddf3>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4614      	mov	r4, r2
 8002a5c:	461d      	mov	r5, r3
					  +(VelocityPIDController.offSet);
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <PIDController2in1+0x21c>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fd1c 	bl	80004a0 <__aeabi_f2d>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	4629      	mov	r1, r5
 8002a70:	f7fd fbb8 	bl	80001e4 <__adddf3>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f7fe f838 	bl	8000af0 <__aeabi_d2f>
 8002a80:	4603      	mov	r3, r0
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 8002a82:	4a06      	ldr	r2, [pc, #24]	; (8002a9c <PIDController2in1+0x21c>)
 8002a84:	6113      	str	r3, [r2, #16]
    VelocityPIDController.PreviousError = VelocityPIDController.NowError;
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <PIDController2in1+0x21c>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <PIDController2in1+0x21c>)
 8002a8c:	6253      	str	r3, [r2, #36]	; 0x24

}
 8002a8e:	bf00      	nop
 8002a90:	bdb0      	pop	{r4, r5, r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000168 	.word	0x20000168
 8002a98:	20000108 	.word	0x20000108
 8002a9c:	20000138 	.word	0x20000138

08002aa0 <UARTInit>:



///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002aa8:	4b10      	ldr	r3, [pc, #64]	; (8002aec <UARTInit+0x4c>)
 8002aaa:	88db      	ldrh	r3, [r3, #6]
 8002aac:	4619      	mov	r1, r3
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f006 fe0a 	bl	80096c8 <calloc>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <UARTInit+0x4c>)
 8002abe:	889b      	ldrh	r3, [r3, #4]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f006 fe00 	bl	80096c8 <calloc>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461a      	mov	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	81da      	strh	r2, [r3, #14]
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200000b8 	.word	0x200000b8

08002af0 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6919      	ldr	r1, [r3, #16]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	88db      	ldrh	r3, [r3, #6]
 8002b04:	461a      	mov	r2, r3
 8002b06:	f005 ff5b 	bl	80089c0 <HAL_UART_Receive_DMA>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	88db      	ldrh	r3, [r3, #6]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	1ad3      	subs	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8002b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b44:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8a9b      	ldrh	r3, [r3, #20]
 8002b4a:	461c      	mov	r4, r3
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff ffe0 	bl	8002b12 <UARTGetRxHead>
 8002b52:	4603      	mov	r3, r0
 8002b54:	429c      	cmp	r4, r3
 8002b56:	d013      	beq.n	8002b80 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	8a92      	ldrh	r2, [r2, #20]
 8002b60:	4413      	add	r3, r2
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8a9b      	ldrh	r3, [r3, #20]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	88d2      	ldrh	r2, [r2, #6]
 8002b70:	fb93 f1f2 	sdiv	r1, r3, r2
 8002b74:	fb02 f201 	mul.w	r2, r2, r1
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8002b80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd90      	pop	{r4, r7, pc}

08002b8c <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	d13d      	bne.n	8002c1e <UARTTxDumpBuffer+0x92>
 8002ba2:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <UARTTxDumpBuffer+0x9c>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d139      	bne.n	8002c1e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8002baa:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <UARTTxDumpBuffer+0x9c>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	89da      	ldrh	r2, [r3, #14]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	899b      	ldrh	r3, [r3, #12]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d02d      	beq.n	8002c18 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	89da      	ldrh	r2, [r3, #14]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d906      	bls.n	8002bd6 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	89da      	ldrh	r2, [r3, #14]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	e005      	b.n	8002be2 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	889a      	ldrh	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	8992      	ldrh	r2, [r2, #12]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	89fa      	ldrh	r2, [r7, #14]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f005 fe77 	bl	80088e8 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	899b      	ldrh	r3, [r3, #12]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	89fb      	ldrh	r3, [r7, #14]
 8002c02:	4413      	add	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	8892      	ldrh	r2, [r2, #4]
 8002c08:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c0c:	fb02 f201 	mul.w	r2, r2, r1
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <UARTTxDumpBuffer+0x9c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
	}
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000200 	.word	0x20000200

08002c2c <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	4613      	mov	r3, r2
 8002c38:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	889b      	ldrh	r3, [r3, #4]
 8002c3e:	88fa      	ldrh	r2, [r7, #6]
 8002c40:	4293      	cmp	r3, r2
 8002c42:	bf28      	it	cs
 8002c44:	4613      	movcs	r3, r2
 8002c46:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002c48:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	889b      	ldrh	r3, [r3, #4]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	89db      	ldrh	r3, [r3, #14]
 8002c54:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002c56:	4293      	cmp	r3, r2
 8002c58:	bfa8      	it	ge
 8002c5a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8002c5c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	89d2      	ldrh	r2, [r2, #14]
 8002c66:	4413      	add	r3, r2
 8002c68:	8aba      	ldrh	r2, [r7, #20]
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f006 fd5d 	bl	800972c <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	89db      	ldrh	r3, [r3, #14]
 8002c76:	461a      	mov	r2, r3
 8002c78:	8afb      	ldrh	r3, [r7, #22]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	8892      	ldrh	r2, [r2, #4]
 8002c80:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c84:	fb02 f201 	mul.w	r2, r2, r1
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8002c90:	8afa      	ldrh	r2, [r7, #22]
 8002c92:	8abb      	ldrh	r3, [r7, #20]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d00a      	beq.n	8002cae <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6898      	ldr	r0, [r3, #8]
 8002c9c:	8abb      	ldrh	r3, [r7, #20]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8002ca2:	8afa      	ldrh	r2, [r7, #22]
 8002ca4:	8abb      	ldrh	r3, [r7, #20]
 8002ca6:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f006 fd3f 	bl	800972c <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff ff6c 	bl	8002b8c <UARTTxDumpBuffer>

}
 8002cb4:	bf00      	nop
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 8002cc4:	f247 5358 	movw	r3, #30040	; 0x7558
 8002cc8:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 8002cca:	f107 030c 	add.w	r3, r7, #12
 8002cce:	2202      	movs	r2, #2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ffaa 	bl	8002c2c <UARTTxWrite>
	}
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 8002ce8:	f646 6346 	movw	r3, #28230	; 0x6e46
 8002cec:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ff98 	bl	8002c2c <UARTTxWrite>
	}
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	0000      	movs	r0, r0
	...

08002d08 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 8002d08:	b5b0      	push	{r4, r5, r7, lr}
 8002d0a:	b08e      	sub	sp, #56	; 0x38
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 8002d14:	4b8b      	ldr	r3, [pc, #556]	; (8002f44 <Munmunbot_Protocol+0x23c>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	f200 83f2 	bhi.w	8003502 <Munmunbot_Protocol+0x7fa>
 8002d1e:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <Munmunbot_Protocol+0x1c>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d3d 	.word	0x08002d3d
 8002d28:	08002df1 	.word	0x08002df1
 8002d2c:	08002e33 	.word	0x08002e33
 8002d30:	08002e81 	.word	0x08002e81
 8002d34:	08002ea5 	.word	0x08002ea5
 8002d38:	08002f65 	.word	0x08002f65
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 8002d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d40:	111b      	asrs	r3, r3, #4
 8002d42:	b21b      	sxth	r3, r3
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	2b09      	cmp	r3, #9
 8002d4c:	f040 83d6 	bne.w	80034fc <Munmunbot_Protocol+0x7f4>
			{
				CheckSum = dataIn;
 8002d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d54:	4a7c      	ldr	r2, [pc, #496]	; (8002f48 <Munmunbot_Protocol+0x240>)
 8002d56:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4b7a      	ldr	r3, [pc, #488]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002d64:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 8002d66:	4b79      	ldr	r3, [pc, #484]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b07      	cmp	r3, #7
 8002d6c:	d103      	bne.n	8002d76 <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 8002d6e:	4b75      	ldr	r3, [pc, #468]	; (8002f44 <Munmunbot_Protocol+0x23c>)
 8002d70:	2203      	movs	r2, #3
 8002d72:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 8002d74:	e3c2      	b.n	80034fc <Munmunbot_Protocol+0x7f4>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 8002d76:	4b75      	ldr	r3, [pc, #468]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d00b      	beq.n	8002d96 <Munmunbot_Protocol+0x8e>
 8002d7e:	4b73      	ldr	r3, [pc, #460]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d007      	beq.n	8002d96 <Munmunbot_Protocol+0x8e>
 8002d86:	4b71      	ldr	r3, [pc, #452]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b05      	cmp	r3, #5
 8002d8c:	d003      	beq.n	8002d96 <Munmunbot_Protocol+0x8e>
 8002d8e:	4b6f      	ldr	r3, [pc, #444]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d103      	bne.n	8002d9e <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 8002d96:	4b6b      	ldr	r3, [pc, #428]	; (8002f44 <Munmunbot_Protocol+0x23c>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
			break;
 8002d9c:	e3ae      	b.n	80034fc <Munmunbot_Protocol+0x7f4>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8002d9e:	4b6b      	ldr	r3, [pc, #428]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d020      	beq.n	8002de8 <Munmunbot_Protocol+0xe0>
 8002da6:	4b69      	ldr	r3, [pc, #420]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d01c      	beq.n	8002de8 <Munmunbot_Protocol+0xe0>
 8002dae:	4b67      	ldr	r3, [pc, #412]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d018      	beq.n	8002de8 <Munmunbot_Protocol+0xe0>
 8002db6:	4b65      	ldr	r3, [pc, #404]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b09      	cmp	r3, #9
 8002dbc:	d014      	beq.n	8002de8 <Munmunbot_Protocol+0xe0>
 8002dbe:	4b63      	ldr	r3, [pc, #396]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b0a      	cmp	r3, #10
 8002dc4:	d010      	beq.n	8002de8 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8002dc6:	4b61      	ldr	r3, [pc, #388]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8002dca:	2b0b      	cmp	r3, #11
 8002dcc:	d00c      	beq.n	8002de8 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8002dce:	4b5f      	ldr	r3, [pc, #380]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d008      	beq.n	8002de8 <Munmunbot_Protocol+0xe0>
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b0d      	cmp	r3, #13
 8002ddc:	d004      	beq.n	8002de8 <Munmunbot_Protocol+0xe0>
 8002dde:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <Munmunbot_Protocol+0x244>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b0e      	cmp	r3, #14
 8002de4:	f040 838a 	bne.w	80034fc <Munmunbot_Protocol+0x7f4>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 8002de8:	4b56      	ldr	r3, [pc, #344]	; (8002f44 <Munmunbot_Protocol+0x23c>)
 8002dea:	2205      	movs	r2, #5
 8002dec:	701a      	strb	r2, [r3, #0]
			break;
 8002dee:	e385      	b.n	80034fc <Munmunbot_Protocol+0x7f4>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 8002df0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002df4:	4b54      	ldr	r3, [pc, #336]	; (8002f48 <Munmunbot_Protocol+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4413      	add	r3, r2
 8002dfa:	4a53      	ldr	r2, [pc, #332]	; (8002f48 <Munmunbot_Protocol+0x240>)
 8002dfc:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	4b52      	ldr	r3, [pc, #328]	; (8002f50 <Munmunbot_Protocol+0x248>)
 8002e06:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4b50      	ldr	r3, [pc, #320]	; (8002f54 <Munmunbot_Protocol+0x24c>)
 8002e14:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 8002e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e1a:	111b      	asrs	r3, r3, #4
 8002e1c:	b21b      	sxth	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4b4b      	ldr	r3, [pc, #300]	; (8002f54 <Munmunbot_Protocol+0x24c>)
 8002e28:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 8002e2a:	4b46      	ldr	r3, [pc, #280]	; (8002f44 <Munmunbot_Protocol+0x23c>)
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	701a      	strb	r2, [r3, #0]

			 break;
 8002e30:	e367      	b.n	8003502 <Munmunbot_Protocol+0x7fa>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 8002e32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e36:	4b44      	ldr	r3, [pc, #272]	; (8002f48 <Munmunbot_Protocol+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4a42      	ldr	r2, [pc, #264]	; (8002f48 <Munmunbot_Protocol+0x240>)
 8002e3e:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	b21a      	sxth	r2, r3
 8002e46:	4b42      	ldr	r3, [pc, #264]	; (8002f50 <Munmunbot_Protocol+0x248>)
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b21b      	sxth	r3, r3
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	b21b      	sxth	r3, r3
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	4b3f      	ldr	r3, [pc, #252]	; (8002f50 <Munmunbot_Protocol+0x248>)
 8002e54:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	4b3c      	ldr	r3, [pc, #240]	; (8002f54 <Munmunbot_Protocol+0x24c>)
 8002e62:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 8002e64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e68:	111b      	asrs	r3, r3, #4
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <Munmunbot_Protocol+0x24c>)
 8002e76:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 8002e78:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <Munmunbot_Protocol+0x23c>)
 8002e7a:	2205      	movs	r2, #5
 8002e7c:	701a      	strb	r2, [r3, #0]
			 break;
 8002e7e:	e340      	b.n	8003502 <Munmunbot_Protocol+0x7fa>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 8002e80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e84:	4b30      	ldr	r3, [pc, #192]	; (8002f48 <Munmunbot_Protocol+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4413      	add	r3, r2
 8002e8a:	4a2f      	ldr	r2, [pc, #188]	; (8002f48 <Munmunbot_Protocol+0x240>)
 8002e8c:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <Munmunbot_Protocol+0x250>)
 8002e92:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 8002e94:	4b30      	ldr	r3, [pc, #192]	; (8002f58 <Munmunbot_Protocol+0x250>)
 8002e96:	881a      	ldrh	r2, [r3, #0]
 8002e98:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <Munmunbot_Protocol+0x254>)
 8002e9a:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 8002e9c:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <Munmunbot_Protocol+0x23c>)
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	701a      	strb	r2, [r3, #0]

		   break;
 8002ea2:	e32e      	b.n	8003502 <Munmunbot_Protocol+0x7fa>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 8002ea4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <Munmunbot_Protocol+0x240>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4413      	add	r3, r2
 8002eae:	4a26      	ldr	r2, [pc, #152]	; (8002f48 <Munmunbot_Protocol+0x240>)
 8002eb0:	6013      	str	r3, [r2, #0]
				if (n_station >= 2)
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <Munmunbot_Protocol+0x250>)
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d927      	bls.n	8002f0a <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	4a28      	ldr	r2, [pc, #160]	; (8002f60 <Munmunbot_Protocol+0x258>)
 8002ec0:	7812      	ldrb	r2, [r2, #0]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	b2d9      	uxtb	r1, r3
 8002ec8:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <Munmunbot_Protocol+0x24c>)
 8002eca:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002ecc:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <Munmunbot_Protocol+0x258>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <Munmunbot_Protocol+0x258>)
 8002ed6:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 8002ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002edc:	111b      	asrs	r3, r3, #4
 8002ede:	b21b      	sxth	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	4a1f      	ldr	r2, [pc, #124]	; (8002f60 <Munmunbot_Protocol+0x258>)
 8002ee4:	7812      	ldrb	r2, [r2, #0]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	b2d9      	uxtb	r1, r3
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <Munmunbot_Protocol+0x24c>)
 8002eee:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002ef0:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <Munmunbot_Protocol+0x258>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <Munmunbot_Protocol+0x258>)
 8002efa:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 8002efc:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <Munmunbot_Protocol+0x250>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	3b02      	subs	r3, #2
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <Munmunbot_Protocol+0x250>)
 8002f06:	801a      	strh	r2, [r3, #0]
 8002f08:	e012      	b.n	8002f30 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <Munmunbot_Protocol+0x250>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d10e      	bne.n	8002f30 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <Munmunbot_Protocol+0x258>)
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	b2d9      	uxtb	r1, r3
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <Munmunbot_Protocol+0x24c>)
 8002f22:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <Munmunbot_Protocol+0x250>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <Munmunbot_Protocol+0x250>)
 8002f2e:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <Munmunbot_Protocol+0x250>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 82e3 	bne.w	8003500 <Munmunbot_Protocol+0x7f8>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 8002f3a:	4b02      	ldr	r3, [pc, #8]	; (8002f44 <Munmunbot_Protocol+0x23c>)
 8002f3c:	2205      	movs	r2, #5
 8002f3e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002f40:	e2de      	b.n	8003500 <Munmunbot_Protocol+0x7f8>
 8002f42:	bf00      	nop
 8002f44:	200000d8 	.word	0x200000d8
 8002f48:	20000204 	.word	0x20000204
 8002f4c:	20000208 	.word	0x20000208
 8002f50:	2000020a 	.word	0x2000020a
 8002f54:	2000020c 	.word	0x2000020c
 8002f58:	2000030c 	.word	0x2000030c
 8002f5c:	2000030e 	.word	0x2000030e
 8002f60:	20000310 	.word	0x20000310

			case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 8002f64:	4bb0      	ldr	r3, [pc, #704]	; (8003228 <Munmunbot_Protocol+0x520>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	4aae      	ldr	r2, [pc, #696]	; (8003228 <Munmunbot_Protocol+0x520>)
 8002f6e:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 8002f70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f74:	4bac      	ldr	r3, [pc, #688]	; (8003228 <Munmunbot_Protocol+0x520>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	f040 82ab 	bne.w	80034d4 <Munmunbot_Protocol+0x7cc>
				{

					switch (ProtocolMode)
 8002f7e:	4bab      	ldr	r3, [pc, #684]	; (800322c <Munmunbot_Protocol+0x524>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	2b0d      	cmp	r3, #13
 8002f86:	f200 82a6 	bhi.w	80034d6 <Munmunbot_Protocol+0x7ce>
 8002f8a:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <Munmunbot_Protocol+0x288>)
 8002f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f90:	08002fc9 	.word	0x08002fc9
 8002f94:	0800303d 	.word	0x0800303d
 8002f98:	08003053 	.word	0x08003053
 8002f9c:	08003069 	.word	0x08003069
 8002fa0:	080030b9 	.word	0x080030b9
 8002fa4:	080030d7 	.word	0x080030d7
 8002fa8:	080030fb 	.word	0x080030fb
 8002fac:	08003145 	.word	0x08003145
 8002fb0:	0800316f 	.word	0x0800316f
 8002fb4:	0800326d 	.word	0x0800326d
 8002fb8:	0800337f 	.word	0x0800337f
 8002fbc:	0800348d 	.word	0x0800348d
 8002fc0:	080034a3 	.word	0x080034a3
 8002fc4:	080034b9 	.word	0x080034b9
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 8002fc8:	2391      	movs	r3, #145	; 0x91
 8002fca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 8002fce:	4b98      	ldr	r3, [pc, #608]	; (8003230 <Munmunbot_Protocol+0x528>)
 8002fd0:	785b      	ldrb	r3, [r3, #1]
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	b25a      	sxtb	r2, r3
 8002fd6:	4b96      	ldr	r3, [pc, #600]	; (8003230 <Munmunbot_Protocol+0x528>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	b25b      	sxtb	r3, r3
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	b25b      	sxtb	r3, r3
 8002fe0:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8002fe2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 8002fe6:	4b92      	ldr	r3, [pc, #584]	; (8003230 <Munmunbot_Protocol+0x528>)
 8002fe8:	78db      	ldrb	r3, [r3, #3]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	b25a      	sxtb	r2, r3
 8002fee:	4b90      	ldr	r3, [pc, #576]	; (8003230 <Munmunbot_Protocol+0x528>)
 8002ff0:	789b      	ldrb	r3, [r3, #2]
 8002ff2:	b25b      	sxtb	r3, r3
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	b25b      	sxtb	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8002ffa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003004:	2358      	movs	r3, #88	; 0x58
 8003006:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800300a:	2375      	movs	r3, #117	; 0x75
 800300c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 8003010:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003014:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003018:	4413      	add	r3, r2
 800301a:	b2da      	uxtb	r2, r3
 800301c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003020:	4413      	add	r3, r2
 8003022:	b2db      	uxtb	r3, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						UARTTxWrite(uart, temp, 6);
 800302c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003030:	2206      	movs	r2, #6
 8003032:	4619      	mov	r1, r3
 8003034:	6838      	ldr	r0, [r7, #0]
 8003036:	f7ff fdf9 	bl	8002c2c <UARTTxWrite>
						}
						break;
 800303a:	e24c      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 800303c:	4b7d      	ldr	r3, [pc, #500]	; (8003234 <Munmunbot_Protocol+0x52c>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <Munmunbot_Protocol+0x342>
						{
							Munmunbot_State = STATE_Idle;
 8003044:	4b7b      	ldr	r3, [pc, #492]	; (8003234 <Munmunbot_Protocol+0x52c>)
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 800304a:	6838      	ldr	r0, [r7, #0]
 800304c:	f7ff fe36 	bl	8002cbc <ACK1Return>
						break;
 8003050:	e241      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003052:	4b78      	ldr	r3, [pc, #480]	; (8003234 <Munmunbot_Protocol+0x52c>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d102      	bne.n	8003060 <Munmunbot_Protocol+0x358>
						{
							Munmunbot_State = STATE_Disconnected;
 800305a:	4b76      	ldr	r3, [pc, #472]	; (8003234 <Munmunbot_Protocol+0x52c>)
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003060:	6838      	ldr	r0, [r7, #0]
 8003062:	f7ff fe2b 	bl	8002cbc <ACK1Return>
						break;
 8003066:	e236      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003068:	4b72      	ldr	r3, [pc, #456]	; (8003234 <Munmunbot_Protocol+0x52c>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d11f      	bne.n	80030b0 <Munmunbot_Protocol+0x3a8>
						{
							CUSSStruc.RPMp = (Data_HAck*10.0)/255.0;
 8003070:	4b71      	ldr	r3, [pc, #452]	; (8003238 <Munmunbot_Protocol+0x530>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd fa01 	bl	800047c <__aeabi_i2d>
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	4b6f      	ldr	r3, [pc, #444]	; (800323c <Munmunbot_Protocol+0x534>)
 8003080:	f7fd fa66 	bl	8000550 <__aeabi_dmul>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	a364      	add	r3, pc, #400	; (adr r3, 8003220 <Munmunbot_Protocol+0x518>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd fb87 	bl	80007a4 <__aeabi_ddiv>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f7fd fd07 	bl	8000ab0 <__aeabi_d2uiz>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4a66      	ldr	r2, [pc, #408]	; (8003240 <Munmunbot_Protocol+0x538>)
 80030a6:	6093      	str	r3, [r2, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 80030a8:	4965      	ldr	r1, [pc, #404]	; (8003240 <Munmunbot_Protocol+0x538>)
 80030aa:	4866      	ldr	r0, [pc, #408]	; (8003244 <Munmunbot_Protocol+0x53c>)
 80030ac:	f7fe fe78 	bl	8001da0 <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 80030b0:	6838      	ldr	r0, [r7, #0]
 80030b2:	f7ff fe03 	bl	8002cbc <ACK1Return>
						break;
 80030b6:	e20e      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80030b8:	4b5e      	ldr	r3, [pc, #376]	; (8003234 <Munmunbot_Protocol+0x52c>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d106      	bne.n	80030ce <Munmunbot_Protocol+0x3c6>
						{
							Angularpos_InputNumber = Data_HAck;
 80030c0:	4b5d      	ldr	r3, [pc, #372]	; (8003238 <Munmunbot_Protocol+0x530>)
 80030c2:	881a      	ldrh	r2, [r3, #0]
 80030c4:	4b60      	ldr	r3, [pc, #384]	; (8003248 <Munmunbot_Protocol+0x540>)
 80030c6:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 80030c8:	4b60      	ldr	r3, [pc, #384]	; (800324c <Munmunbot_Protocol+0x544>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80030ce:	6838      	ldr	r0, [r7, #0]
 80030d0:	f7ff fdf4 	bl	8002cbc <ACK1Return>
						break;
 80030d4:	e1ff      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80030d6:	4b57      	ldr	r3, [pc, #348]	; (8003234 <Munmunbot_Protocol+0x52c>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d109      	bne.n	80030f2 <Munmunbot_Protocol+0x3ea>
						{
//							Angularpos_InputArray[0] = parameter[0];
							Angularpos_InputArray[0] = parameter[2];    //150 0x00 0x0A Checksum
 80030de:	4b54      	ldr	r3, [pc, #336]	; (8003230 <Munmunbot_Protocol+0x528>)
 80030e0:	789a      	ldrb	r2, [r3, #2]
 80030e2:	4b5b      	ldr	r3, [pc, #364]	; (8003250 <Munmunbot_Protocol+0x548>)
 80030e4:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 80030e6:	4b59      	ldr	r3, [pc, #356]	; (800324c <Munmunbot_Protocol+0x544>)
 80030e8:	2202      	movs	r2, #2
 80030ea:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 80030ec:	4b59      	ldr	r3, [pc, #356]	; (8003254 <Munmunbot_Protocol+0x54c>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80030f2:	6838      	ldr	r0, [r7, #0]
 80030f4:	f7ff fde2 	bl	8002cbc <ACK1Return>
						break;
 80030f8:	e1ed      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80030fa:	4b4e      	ldr	r3, [pc, #312]	; (8003234 <Munmunbot_Protocol+0x52c>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d11c      	bne.n	800313c <Munmunbot_Protocol+0x434>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 8003102:	4b52      	ldr	r3, [pc, #328]	; (800324c <Munmunbot_Protocol+0x544>)
 8003104:	2203      	movs	r2, #3
 8003106:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8003108:	2300      	movs	r3, #0
 800310a:	637b      	str	r3, [r7, #52]	; 0x34
 800310c:	e00b      	b.n	8003126 <Munmunbot_Protocol+0x41e>
							{
								Angularpos_InputArray[i] = parameter[i];
 800310e:	4a48      	ldr	r2, [pc, #288]	; (8003230 <Munmunbot_Protocol+0x528>)
 8003110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003112:	4413      	add	r3, r2
 8003114:	7819      	ldrb	r1, [r3, #0]
 8003116:	4a4e      	ldr	r2, [pc, #312]	; (8003250 <Munmunbot_Protocol+0x548>)
 8003118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311a:	4413      	add	r3, r2
 800311c:	460a      	mov	r2, r1
 800311e:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8003120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003122:	3301      	adds	r3, #1
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
 8003126:	4b4c      	ldr	r3, [pc, #304]	; (8003258 <Munmunbot_Protocol+0x550>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312e:	4293      	cmp	r3, r2
 8003130:	dbed      	blt.n	800310e <Munmunbot_Protocol+0x406>
							}
							NumberOfStationToGo = n_station_mem;
 8003132:	4b49      	ldr	r3, [pc, #292]	; (8003258 <Munmunbot_Protocol+0x550>)
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b2da      	uxtb	r2, r3
 8003138:	4b46      	ldr	r3, [pc, #280]	; (8003254 <Munmunbot_Protocol+0x54c>)
 800313a:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 800313c:	6838      	ldr	r0, [r7, #0]
 800313e:	f7ff fdbd 	bl	8002cbc <ACK1Return>
						break;
 8003142:	e1c8      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 8003144:	4b3b      	ldr	r3, [pc, #236]	; (8003234 <Munmunbot_Protocol+0x52c>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d106      	bne.n	800315a <Munmunbot_Protocol+0x452>
						{
							Munmunbot_State = STATE_PrepareDATA;
 800314c:	4b39      	ldr	r3, [pc, #228]	; (8003234 <Munmunbot_Protocol+0x52c>)
 800314e:	2202      	movs	r2, #2
 8003150:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 8003152:	6838      	ldr	r0, [r7, #0]
 8003154:	f7ff fdb2 	bl	8002cbc <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};  ///ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 8003158:	e1bd      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>
								uint8_t temp[] =
 800315a:	4b40      	ldr	r3, [pc, #256]	; (800325c <Munmunbot_Protocol+0x554>)
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
								UARTTxWrite(uart, temp, 4);
 800315e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003162:	2204      	movs	r2, #4
 8003164:	4619      	mov	r1, r3
 8003166:	6838      	ldr	r0, [r7, #0]
 8003168:	f7ff fd60 	bl	8002c2c <UARTTxWrite>
						break;
 800316c:	e1b3      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 800316e:	4a3c      	ldr	r2, [pc, #240]	; (8003260 <Munmunbot_Protocol+0x558>)
 8003170:	f107 031c 	add.w	r3, r7, #28
 8003174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003178:	6018      	str	r0, [r3, #0]
 800317a:	3304      	adds	r3, #4
 800317c:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0}; ///ACK1 + Mode 9
							uint8_t Shift = 2;
 800317e:	2302      	movs	r3, #2
 8003180:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
							DataForReturn = Current_Station&(0xff);
 8003184:	4b37      	ldr	r3, [pc, #220]	; (8003264 <Munmunbot_Protocol+0x55c>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	b29a      	uxth	r2, r3
 800318a:	4b37      	ldr	r3, [pc, #220]	; (8003268 <Munmunbot_Protocol+0x560>)
 800318c:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 800318e:	4b36      	ldr	r3, [pc, #216]	; (8003268 <Munmunbot_Protocol+0x560>)
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	b29a      	uxth	r2, r3
 8003196:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800319a:	3301      	adds	r3, #1
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80031a2:	440b      	add	r3, r1
 80031a4:	f803 2c1c 	strb.w	r2, [r3, #-28]
							temp[2+Shift] = (DataForReturn)&(0xff);
 80031a8:	4b2f      	ldr	r3, [pc, #188]	; (8003268 <Munmunbot_Protocol+0x560>)
 80031aa:	881a      	ldrh	r2, [r3, #0]
 80031ac:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80031b0:	3302      	adds	r3, #2
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80031b8:	440b      	add	r3, r1
 80031ba:	f803 2c1c 	strb.w	r2, [r3, #-28]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 80031be:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80031c2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031c6:	4413      	add	r3, r2
 80031c8:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 80031cc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80031d0:	3301      	adds	r3, #1
 80031d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80031d6:	440b      	add	r3, r1
 80031d8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80031dc:	4413      	add	r3, r2
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80031e4:	3302      	adds	r3, #2
 80031e6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80031ea:	440b      	add	r3, r1
 80031ec:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80031f0:	4413      	add	r3, r2
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80031f8:	3303      	adds	r3, #3
 80031fa:	43d2      	mvns	r2, r2
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003202:	440b      	add	r3, r1
 8003204:	f803 2c1c 	strb.w	r2, [r3, #-28]
							UARTTxWrite(uart, temp, 4+Shift);
 8003208:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800320c:	b29b      	uxth	r3, r3
 800320e:	3304      	adds	r3, #4
 8003210:	b29a      	uxth	r2, r3
 8003212:	f107 031c 	add.w	r3, r7, #28
 8003216:	4619      	mov	r1, r3
 8003218:	6838      	ldr	r0, [r7, #0]
 800321a:	f7ff fd07 	bl	8002c2c <UARTTxWrite>
						}

						break;
 800321e:	e15a      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>
 8003220:	00000000 	.word	0x00000000
 8003224:	406fe000 	.word	0x406fe000
 8003228:	20000204 	.word	0x20000204
 800322c:	20000208 	.word	0x20000208
 8003230:	2000020c 	.word	0x2000020c
 8003234:	200000d9 	.word	0x200000d9
 8003238:	2000020a 	.word	0x2000020a
 800323c:	40240000 	.word	0x40240000
 8003240:	200001e0 	.word	0x200001e0
 8003244:	20000168 	.word	0x20000168
 8003248:	200000ec 	.word	0x200000ec
 800324c:	200000ee 	.word	0x200000ee
 8003250:	200000dc 	.word	0x200000dc
 8003254:	200000f0 	.word	0x200000f0
 8003258:	2000030e 	.word	0x2000030e
 800325c:	6e467558 	.word	0x6e467558
 8003260:	08009a50 	.word	0x08009a50
 8003264:	200000ef 	.word	0x200000ef
 8003268:	20000312 	.word	0x20000312

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 800326c:	4aae      	ldr	r2, [pc, #696]	; (8003528 <Munmunbot_Protocol+0x820>)
 800326e:	f107 0314 	add.w	r3, r7, #20
 8003272:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003276:	6018      	str	r0, [r3, #0]
 8003278:	3304      	adds	r3, #4
 800327a:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,154, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 800327c:	2302      	movs	r3, #2
 800327e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
							DataForReturn = ((((int) htim1.Instance->CNT) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
 8003282:	4baa      	ldr	r3, [pc, #680]	; (800352c <Munmunbot_Protocol+0x824>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	4aa9      	ldr	r2, [pc, #676]	; (8003530 <Munmunbot_Protocol+0x828>)
 800328a:	6852      	ldr	r2, [r2, #4]
 800328c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003290:	fb02 f201 	mul.w	r2, r2, r1
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd f8df 	bl	800045c <__aeabi_ui2d>
 800329e:	a39c      	add	r3, pc, #624	; (adr r3, 8003510 <Munmunbot_Protocol+0x808>)
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	f7fd f954 	bl	8000550 <__aeabi_dmul>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4610      	mov	r0, r2
 80032ae:	4619      	mov	r1, r3
 80032b0:	a399      	add	r3, pc, #612	; (adr r3, 8003518 <Munmunbot_Protocol+0x810>)
 80032b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b6:	f7fd f94b 	bl	8000550 <__aeabi_dmul>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4614      	mov	r4, r2
 80032c0:	461d      	mov	r5, r3
 80032c2:	4b9b      	ldr	r3, [pc, #620]	; (8003530 <Munmunbot_Protocol+0x828>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd f8c8 	bl	800045c <__aeabi_ui2d>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4620      	mov	r0, r4
 80032d2:	4629      	mov	r1, r5
 80032d4:	f7fd fa66 	bl	80007a4 <__aeabi_ddiv>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	f7fd fbe6 	bl	8000ab0 <__aeabi_d2uiz>
 80032e4:	4603      	mov	r3, r0
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	4b92      	ldr	r3, [pc, #584]	; (8003534 <Munmunbot_Protocol+0x82c>)
 80032ea:	801a      	strh	r2, [r3, #0]
//							DataForReturn = ((((int) PositionPIDController.OutputFeedback) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 80032ec:	4b91      	ldr	r3, [pc, #580]	; (8003534 <Munmunbot_Protocol+0x82c>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	0a1b      	lsrs	r3, r3, #8
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80032f8:	3301      	adds	r3, #1
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003300:	440b      	add	r3, r1
 8003302:	f803 2c24 	strb.w	r2, [r3, #-36]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8003306:	4b8b      	ldr	r3, [pc, #556]	; (8003534 <Munmunbot_Protocol+0x82c>)
 8003308:	881a      	ldrh	r2, [r3, #0]
 800330a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800330e:	3302      	adds	r3, #2
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003316:	440b      	add	r3, r1
 8003318:	f803 2c24 	strb.w	r2, [r3, #-36]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 800331c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003320:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003324:	4413      	add	r3, r2
 8003326:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 800332a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800332e:	3301      	adds	r3, #1
 8003330:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003334:	440b      	add	r3, r1
 8003336:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800333a:	4413      	add	r3, r2
 800333c:	b2da      	uxtb	r2, r3
 800333e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003342:	3302      	adds	r3, #2
 8003344:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003348:	440b      	add	r3, r1
 800334a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800334e:	4413      	add	r3, r2
 8003350:	b2da      	uxtb	r2, r3
 8003352:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003356:	3303      	adds	r3, #3
 8003358:	43d2      	mvns	r2, r2
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003360:	440b      	add	r3, r1
 8003362:	f803 2c24 	strb.w	r2, [r3, #-36]
							UARTTxWrite(uart, temp, 4+Shift);
 8003366:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800336a:	b29b      	uxth	r3, r3
 800336c:	3304      	adds	r3, #4
 800336e:	b29a      	uxth	r2, r3
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	4619      	mov	r1, r3
 8003376:	6838      	ldr	r0, [r7, #0]
 8003378:	f7ff fc58 	bl	8002c2c <UARTTxWrite>
						}
						break;
 800337c:	e0ab      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>

					case 11: /// Return Angular Velocity Max  ##Complete##
						{
							uint8_t temp[] =
 800337e:	4a6e      	ldr	r2, [pc, #440]	; (8003538 <Munmunbot_Protocol+0x830>)
 8003380:	f107 030c 	add.w	r3, r7, #12
 8003384:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003388:	6018      	str	r0, [r3, #0]
 800338a:	3304      	adds	r3, #4
 800338c:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,155, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 800338e:	2302      	movs	r3, #2
 8003390:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							DataForReturn = (TrjStruc.AngularVelocityMax_Setting*60)/(CUSSStruc.PPRxQEI);  ///pps to RPM
 8003394:	4b69      	ldr	r3, [pc, #420]	; (800353c <Munmunbot_Protocol+0x834>)
 8003396:	edd3 7a04 	vldr	s15, [r3, #16]
 800339a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003540 <Munmunbot_Protocol+0x838>
 800339e:	ee67 6a87 	vmul.f32	s13, s15, s14
 80033a2:	4b63      	ldr	r3, [pc, #396]	; (8003530 <Munmunbot_Protocol+0x828>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b6:	ee17 3a90 	vmov	r3, s15
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <Munmunbot_Protocol+0x82c>)
 80033be:	801a      	strh	r2, [r3, #0]
							DataForReturn = (DataForReturn * 255.0)/10.0;
 80033c0:	4b5c      	ldr	r3, [pc, #368]	; (8003534 <Munmunbot_Protocol+0x82c>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd f859 	bl	800047c <__aeabi_i2d>
 80033ca:	a355      	add	r3, pc, #340	; (adr r3, 8003520 <Munmunbot_Protocol+0x818>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fd f8be 	bl	8000550 <__aeabi_dmul>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	4b58      	ldr	r3, [pc, #352]	; (8003544 <Munmunbot_Protocol+0x83c>)
 80033e2:	f7fd f9df 	bl	80007a4 <__aeabi_ddiv>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7fd fb5f 	bl	8000ab0 <__aeabi_d2uiz>
 80033f2:	4603      	mov	r3, r0
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	4b4f      	ldr	r3, [pc, #316]	; (8003534 <Munmunbot_Protocol+0x82c>)
 80033f8:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 80033fa:	4b4e      	ldr	r3, [pc, #312]	; (8003534 <Munmunbot_Protocol+0x82c>)
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	b29a      	uxth	r2, r3
 8003402:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003406:	3301      	adds	r3, #1
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800340e:	440b      	add	r3, r1
 8003410:	f803 2c2c 	strb.w	r2, [r3, #-44]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8003414:	4b47      	ldr	r3, [pc, #284]	; (8003534 <Munmunbot_Protocol+0x82c>)
 8003416:	881a      	ldrh	r2, [r3, #0]
 8003418:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800341c:	3302      	adds	r3, #2
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003424:	440b      	add	r3, r1
 8003426:	f803 2c2c 	strb.w	r2, [r3, #-44]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 800342a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800342e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003432:	4413      	add	r3, r2
 8003434:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8003438:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800343c:	3301      	adds	r3, #1
 800343e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003442:	440b      	add	r3, r1
 8003444:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003448:	4413      	add	r3, r2
 800344a:	b2da      	uxtb	r2, r3
 800344c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003450:	3302      	adds	r3, #2
 8003452:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003456:	440b      	add	r3, r1
 8003458:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800345c:	4413      	add	r3, r2
 800345e:	b2da      	uxtb	r2, r3
 8003460:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003464:	3303      	adds	r3, #3
 8003466:	43d2      	mvns	r2, r2
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800346e:	440b      	add	r3, r1
 8003470:	f803 2c2c 	strb.w	r2, [r3, #-44]
							UARTTxWrite(uart, temp, 4+Shift);
 8003474:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003478:	b29b      	uxth	r3, r3
 800347a:	3304      	adds	r3, #4
 800347c:	b29a      	uxth	r2, r3
 800347e:	f107 030c 	add.w	r3, r7, #12
 8003482:	4619      	mov	r1, r3
 8003484:	6838      	ldr	r0, [r7, #0]
 8003486:	f7ff fbd1 	bl	8002c2c <UARTTxWrite>
						}
						break;
 800348a:	e024      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>

					case 12:  //Enable Gripper
						if (Munmunbot_State == STATE_Idle)
 800348c:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <Munmunbot_Protocol+0x840>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d102      	bne.n	800349a <Munmunbot_Protocol+0x792>
						{
							GripperEnable = 1;
 8003494:	4b2d      	ldr	r3, [pc, #180]	; (800354c <Munmunbot_Protocol+0x844>)
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 800349a:	6838      	ldr	r0, [r7, #0]
 800349c:	f7ff fc0e 	bl	8002cbc <ACK1Return>
						break;
 80034a0:	e019      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>
					case 13: //Disable Gripper
						if (Munmunbot_State == STATE_Idle)
 80034a2:	4b29      	ldr	r3, [pc, #164]	; (8003548 <Munmunbot_Protocol+0x840>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <Munmunbot_Protocol+0x7a8>
						{
							GripperEnable = 0;
 80034aa:	4b28      	ldr	r3, [pc, #160]	; (800354c <Munmunbot_Protocol+0x844>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80034b0:	6838      	ldr	r0, [r7, #0]
 80034b2:	f7ff fc03 	bl	8002cbc <ACK1Return>
						break;
 80034b6:	e00e      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80034b8:	4b23      	ldr	r3, [pc, #140]	; (8003548 <Munmunbot_Protocol+0x840>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d105      	bne.n	80034cc <Munmunbot_Protocol+0x7c4>
						{
							Munmunbot_State = STATE_SetHome;
 80034c0:	4b21      	ldr	r3, [pc, #132]	; (8003548 <Munmunbot_Protocol+0x840>)
 80034c2:	2206      	movs	r2, #6
 80034c4:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 80034c6:	4b22      	ldr	r3, [pc, #136]	; (8003550 <Munmunbot_Protocol+0x848>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80034cc:	6838      	ldr	r0, [r7, #0]
 80034ce:	f7ff fbf5 	bl	8002cbc <ACK1Return>
						break;
 80034d2:	e000      	b.n	80034d6 <Munmunbot_Protocol+0x7ce>
				    }
			   }
 80034d4:	bf00      	nop
			n_station = 0;
 80034d6:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <Munmunbot_Protocol+0x84c>)
 80034d8:	2200      	movs	r2, #0
 80034da:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <Munmunbot_Protocol+0x850>)
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 80034e2:	4b1e      	ldr	r3, [pc, #120]	; (800355c <Munmunbot_Protocol+0x854>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 80034e8:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <Munmunbot_Protocol+0x858>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 80034ee:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <Munmunbot_Protocol+0x85c>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
			Munmunbot_Protocol_State = PP_STARTandMode;
 80034f4:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <Munmunbot_Protocol+0x860>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
			break;
 80034fa:	e002      	b.n	8003502 <Munmunbot_Protocol+0x7fa>
			break;
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <Munmunbot_Protocol+0x7fa>
				break;
 8003500:	bf00      	nop
			}
	}
}
 8003502:	bf00      	nop
 8003504:	3738      	adds	r7, #56	; 0x38
 8003506:	46bd      	mov	sp, r7
 8003508:	bdb0      	pop	{r4, r5, r7, pc}
 800350a:	bf00      	nop
 800350c:	f3af 8000 	nop.w
 8003510:	9ba5e354 	.word	0x9ba5e354
 8003514:	400920c4 	.word	0x400920c4
 8003518:	00000000 	.word	0x00000000
 800351c:	40c38800 	.word	0x40c38800
 8003520:	00000000 	.word	0x00000000
 8003524:	406fe000 	.word	0x406fe000
 8003528:	08009a58 	.word	0x08009a58
 800352c:	2000047c 	.word	0x2000047c
 8003530:	200001e0 	.word	0x200001e0
 8003534:	20000312 	.word	0x20000312
 8003538:	08009a60 	.word	0x08009a60
 800353c:	20000168 	.word	0x20000168
 8003540:	42700000 	.word	0x42700000
 8003544:	40240000 	.word	0x40240000
 8003548:	200000d9 	.word	0x200000d9
 800354c:	20000014 	.word	0x20000014
 8003550:	200000da 	.word	0x200000da
 8003554:	2000030c 	.word	0x2000030c
 8003558:	20000208 	.word	0x20000208
 800355c:	20000310 	.word	0x20000310
 8003560:	2000020a 	.word	0x2000020a
 8003564:	20000204 	.word	0x20000204
 8003568:	200000d8 	.word	0x200000d8

0800356c <PID_Reset>:

void PID_Reset()
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
	PositionPIDController.PreviousError = 0;
 8003570:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <PID_Reset+0x40>)
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	625a      	str	r2, [r3, #36]	; 0x24
	PositionPIDController.Integral_Value = 0;
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <PID_Reset+0x40>)
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	61da      	str	r2, [r3, #28]
	PositionPIDController.ControllerOutput = 0;
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <PID_Reset+0x40>)
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	611a      	str	r2, [r3, #16]

	VelocityPIDController.PreviousError = 0;
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <PID_Reset+0x44>)
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	625a      	str	r2, [r3, #36]	; 0x24
	VelocityPIDController.Integral_Value = 0;
 8003590:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <PID_Reset+0x44>)
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	61da      	str	r2, [r3, #28]
	VelocityPIDController.ControllerOutput = 0;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <PID_Reset+0x44>)
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	611a      	str	r2, [r3, #16]
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000108 	.word	0x20000108
 80035b0:	20000138 	.word	0x20000138

080035b4 <LAMP_ON>:

void LAMP_ON(uint8_t lampnumber)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
	if (lampnumber == 1)
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d111      	bne.n	80035e8 <LAMP_ON+0x34>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80035c4:	2200      	movs	r2, #0
 80035c6:	2104      	movs	r1, #4
 80035c8:	481e      	ldr	r0, [pc, #120]	; (8003644 <LAMP_ON+0x90>)
 80035ca:	f001 fcaf 	bl	8004f2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80035ce:	2201      	movs	r2, #1
 80035d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035d4:	481b      	ldr	r0, [pc, #108]	; (8003644 <LAMP_ON+0x90>)
 80035d6:	f001 fca9 	bl	8004f2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80035da:	2201      	movs	r2, #1
 80035dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035e0:	4819      	ldr	r0, [pc, #100]	; (8003648 <LAMP_ON+0x94>)
 80035e2:	f001 fca3 	bl	8004f2c <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
	}
}
 80035e6:	e028      	b.n	800363a <LAMP_ON+0x86>
	else if (lampnumber == 2)
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d111      	bne.n	8003612 <LAMP_ON+0x5e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80035ee:	2201      	movs	r2, #1
 80035f0:	2104      	movs	r1, #4
 80035f2:	4814      	ldr	r0, [pc, #80]	; (8003644 <LAMP_ON+0x90>)
 80035f4:	f001 fc9a 	bl	8004f2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80035f8:	2200      	movs	r2, #0
 80035fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035fe:	4811      	ldr	r0, [pc, #68]	; (8003644 <LAMP_ON+0x90>)
 8003600:	f001 fc94 	bl	8004f2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003604:	2201      	movs	r2, #1
 8003606:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800360a:	480f      	ldr	r0, [pc, #60]	; (8003648 <LAMP_ON+0x94>)
 800360c:	f001 fc8e 	bl	8004f2c <HAL_GPIO_WritePin>
}
 8003610:	e013      	b.n	800363a <LAMP_ON+0x86>
	else if (lampnumber == 3)
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d110      	bne.n	800363a <LAMP_ON+0x86>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003618:	2201      	movs	r2, #1
 800361a:	2104      	movs	r1, #4
 800361c:	4809      	ldr	r0, [pc, #36]	; (8003644 <LAMP_ON+0x90>)
 800361e:	f001 fc85 	bl	8004f2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8003622:	2201      	movs	r2, #1
 8003624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003628:	4806      	ldr	r0, [pc, #24]	; (8003644 <LAMP_ON+0x90>)
 800362a:	f001 fc7f 	bl	8004f2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 800362e:	2200      	movs	r2, #0
 8003630:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003634:	4804      	ldr	r0, [pc, #16]	; (8003648 <LAMP_ON+0x94>)
 8003636:	f001 fc79 	bl	8004f2c <HAL_GPIO_WritePin>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40020400 	.word	0x40020400
 8003648:	40020000 	.word	0x40020000

0800364c <Emergency_switch_trigger>:

void Emergency_switch_trigger()
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1)
 8003650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003654:	480e      	ldr	r0, [pc, #56]	; (8003690 <Emergency_switch_trigger+0x44>)
 8003656:	f001 fc51 	bl	8004efc <HAL_GPIO_ReadPin>
 800365a:	4603      	mov	r3, r0
 800365c:	2b01      	cmp	r3, #1
 800365e:	d114      	bne.n	800368a <Emergency_switch_trigger+0x3e>
	{
		Munmunbot_State = STATE_Disconnected;
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <Emergency_switch_trigger+0x48>)
 8003662:	2200      	movs	r2, #0
 8003664:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8003666:	2201      	movs	r2, #1
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	480b      	ldr	r0, [pc, #44]	; (8003698 <Emergency_switch_trigger+0x4c>)
 800366c:	f001 fc5e 	bl	8004f2c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <Emergency_switch_trigger+0x50>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2200      	movs	r2, #0
 8003676:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <Emergency_switch_trigger+0x54>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <Emergency_switch_trigger+0x58>)
 800367e:	6653      	str	r3, [r2, #100]	; 0x64
		Moving_Link_Task_Flag = 0;
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <Emergency_switch_trigger+0x5c>)
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]
		PID_Reset();
 8003686:	f7ff ff71 	bl	800356c <PID_Reset>
	}
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40020400 	.word	0x40020400
 8003694:	200000d9 	.word	0x200000d9
 8003698:	40020800 	.word	0x40020800
 800369c:	200003d4 	.word	0x200003d4
 80036a0:	20000108 	.word	0x20000108
 80036a4:	20000168 	.word	0x20000168
 80036a8:	200000f8 	.word	0x200000f8

080036ac <Controlling_the_LINK>:

void Controlling_the_LINK()
{
 80036ac:	b5b0      	push	{r4, r5, r7, lr}
 80036ae:	af00      	add	r7, sp, #0
	  // GEN Trajectory
	  TrajectoryGenerationProcess();
 80036b0:	f7fe fe0a 	bl	80022c8 <TrajectoryGenerationProcess>
	  EncoderVelocityAndPosition_Update();
 80036b4:	f7fe f976 	bl	80019a4 <EncoderVelocityAndPosition_Update>
	  PIDController2in1();  ///use only position
 80036b8:	f7ff f8e2 	bl	8002880 <PIDController2in1>
//	  Plant_input = PositionPIDController.ControllerOutput;
	  Plant_input = VelocityPIDController.ControllerOutput;
 80036bc:	4b29      	ldr	r3, [pc, #164]	; (8003764 <Controlling_the_LINK+0xb8>)
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	4a29      	ldr	r2, [pc, #164]	; (8003768 <Controlling_the_LINK+0xbc>)
 80036c2:	6013      	str	r3, [r2, #0]

	  if (Plant_input >= 0) /// Setting DIR
 80036c4:	4b28      	ldr	r3, [pc, #160]	; (8003768 <Controlling_the_LINK+0xbc>)
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d2:	db0c      	blt.n	80036ee <Controlling_the_LINK+0x42>
	  {
		  DCMotorStruc.DIR = 1;
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <Controlling_the_LINK+0xc0>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 80036da:	4b23      	ldr	r3, [pc, #140]	; (8003768 <Controlling_the_LINK+0xbc>)
 80036dc:	edd3 7a00 	vldr	s15, [r3]
 80036e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036e4:	ee17 2a90 	vmov	r2, s15
 80036e8:	4b20      	ldr	r3, [pc, #128]	; (800376c <Controlling_the_LINK+0xc0>)
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	e01b      	b.n	8003726 <Controlling_the_LINK+0x7a>
	  }
	  else if (Plant_input < 0)
 80036ee:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <Controlling_the_LINK+0xbc>)
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fc:	d513      	bpl.n	8003726 <Controlling_the_LINK+0x7a>
	  {
		  DCMotorStruc.DIR = 0;
 80036fe:	4b1b      	ldr	r3, [pc, #108]	; (800376c <Controlling_the_LINK+0xc0>)
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 8003704:	4b18      	ldr	r3, [pc, #96]	; (8003768 <Controlling_the_LINK+0xbc>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc fec9 	bl	80004a0 <__aeabi_f2d>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4614      	mov	r4, r2
 8003714:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003718:	4620      	mov	r0, r4
 800371a:	4629      	mov	r1, r5
 800371c:	f7fd f9c8 	bl	8000ab0 <__aeabi_d2uiz>
 8003720:	4603      	mov	r3, r0
 8003722:	4a12      	ldr	r2, [pc, #72]	; (800376c <Controlling_the_LINK+0xc0>)
 8003724:	6053      	str	r3, [r2, #4]
	  }

	  if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8003726:	4b11      	ldr	r3, [pc, #68]	; (800376c <Controlling_the_LINK+0xc0>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f242 7210 	movw	r2, #10000	; 0x2710
 800372e:	4293      	cmp	r3, r2
 8003730:	d903      	bls.n	800373a <Controlling_the_LINK+0x8e>
	  {
		 DCMotorStruc.PWMOut = 10000;
 8003732:	4b0e      	ldr	r3, [pc, #56]	; (800376c <Controlling_the_LINK+0xc0>)
 8003734:	f242 7210 	movw	r2, #10000	; 0x2710
 8003738:	605a      	str	r2, [r3, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 800373a:	4b0c      	ldr	r3, [pc, #48]	; (800376c <Controlling_the_LINK+0xc0>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	480b      	ldr	r0, [pc, #44]	; (8003770 <Controlling_the_LINK+0xc4>)
 8003744:	f001 fbf2 	bl	8004f2c <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <Controlling_the_LINK+0xc8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a07      	ldr	r2, [pc, #28]	; (800376c <Controlling_the_LINK+0xc0>)
 800374e:	6852      	ldr	r2, [r2, #4]
 8003750:	635a      	str	r2, [r3, #52]	; 0x34
	  TrjStruc.Loop_Timestamp = micros();
 8003752:	f7fe fa0b 	bl	8001b6c <micros>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4907      	ldr	r1, [pc, #28]	; (8003778 <Controlling_the_LINK+0xcc>)
 800375c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8003760:	bf00      	nop
 8003762:	bdb0      	pop	{r4, r5, r7, pc}
 8003764:	20000138 	.word	0x20000138
 8003768:	200000f4 	.word	0x200000f4
 800376c:	200000d0 	.word	0x200000d0
 8003770:	40020800 	.word	0x40020800
 8003774:	200003d4 	.word	0x200003d4
 8003778:	20000168 	.word	0x20000168

0800377c <SETHOME_StateMachine_Function>:

void SETHOME_StateMachine_Function()
{
 800377c:	b5b0      	push	{r4, r5, r7, lr}
 800377e:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 8003780:	4b49      	ldr	r3, [pc, #292]	; (80038a8 <SETHOME_StateMachine_Function+0x12c>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b03      	cmp	r3, #3
 8003786:	f200 808d 	bhi.w	80038a4 <SETHOME_StateMachine_Function+0x128>
 800378a:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <SETHOME_StateMachine_Function+0x14>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037a1 	.word	0x080037a1
 8003794:	0800389f 	.word	0x0800389f
 8003798:	080037bd 	.word	0x080037bd
 800379c:	080037f7 	.word	0x080037f7
	{
		case SetHomeState_0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80037a0:	2200      	movs	r2, #0
 80037a2:	2180      	movs	r1, #128	; 0x80
 80037a4:	4841      	ldr	r0, [pc, #260]	; (80038ac <SETHOME_StateMachine_Function+0x130>)
 80037a6:	f001 fbc1 	bl	8004f2c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 80037aa:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <SETHOME_StateMachine_Function+0x134>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80037b2:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 80037b4:	4b3c      	ldr	r3, [pc, #240]	; (80038a8 <SETHOME_StateMachine_Function+0x12c>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
			break;
 80037ba:	e073      	b.n	80038a4 <SETHOME_StateMachine_Function+0x128>
		case SetHomeState_1:
			break;
		case SetHomeState_2:

			SethomeMode = SetHomeState_0;
 80037bc:	4b3a      	ldr	r3, [pc, #232]	; (80038a8 <SETHOME_StateMachine_Function+0x12c>)
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
			Munmunbot_State = STATE_Idle;
 80037c2:	4b3c      	ldr	r3, [pc, #240]	; (80038b4 <SETHOME_StateMachine_Function+0x138>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 80037c8:	4b3b      	ldr	r3, [pc, #236]	; (80038b8 <SETHOME_StateMachine_Function+0x13c>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80037ce:	4b38      	ldr	r3, [pc, #224]	; (80038b0 <SETHOME_StateMachine_Function+0x134>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2200      	movs	r2, #0
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34
			TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
 80037d6:	4b39      	ldr	r3, [pc, #228]	; (80038bc <SETHOME_StateMachine_Function+0x140>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	ee07 3a90 	vmov	s15, r3
 80037e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e4:	4b36      	ldr	r3, [pc, #216]	; (80038c0 <SETHOME_StateMachine_Function+0x144>)
 80037e6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			Moving_Link_Task_Flag = 0;
 80037ea:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <SETHOME_StateMachine_Function+0x148>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
			PID_Reset();
 80037f0:	f7ff febc 	bl	800356c <PID_Reset>
//				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
//				TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
//				Moving_Link_Task_Flag = 0;
//				PID_Reset();
//			}
			break;
 80037f4:	e056      	b.n	80038a4 <SETHOME_StateMachine_Function+0x128>
		case SetHomeState_3:
		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 80037f6:	f7fe f9b9 	bl	8001b6c <micros>
 80037fa:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <SETHOME_StateMachine_Function+0x144>)
 80037fc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003800:	1a84      	subs	r4, r0, r2
 8003802:	eb61 0503 	sbc.w	r5, r1, r3
 8003806:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <SETHOME_StateMachine_Function+0x144>)
 8003808:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800380c:	429d      	cmp	r5, r3
 800380e:	bf08      	it	eq
 8003810:	4294      	cmpeq	r4, r2
 8003812:	d346      	bcc.n	80038a2 <SETHOME_StateMachine_Function+0x126>
		  {
			  Controlling_the_LINK();
 8003814:	f7ff ff4a 	bl	80036ac <Controlling_the_LINK>

			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8003818:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <SETHOME_StateMachine_Function+0x14c>)
 800381a:	ed93 7a06 	vldr	s14, [r3, #24]
 800381e:	4b28      	ldr	r3, [pc, #160]	; (80038c0 <SETHOME_StateMachine_Function+0x144>)
 8003820:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003824:	4b29      	ldr	r3, [pc, #164]	; (80038cc <SETHOME_StateMachine_Function+0x150>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003834:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383c:	d900      	bls.n	8003840 <SETHOME_StateMachine_Function+0xc4>
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
					Moving_Link_Task_Flag = 0;
					PID_Reset();
			  }
		  }
		  break;
 800383e:	e030      	b.n	80038a2 <SETHOME_StateMachine_Function+0x126>
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8003840:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <SETHOME_StateMachine_Function+0x14c>)
 8003842:	ed93 7a06 	vldr	s14, [r3, #24]
 8003846:	4b1e      	ldr	r3, [pc, #120]	; (80038c0 <SETHOME_StateMachine_Function+0x144>)
 8003848:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800384c:	4b1f      	ldr	r3, [pc, #124]	; (80038cc <SETHOME_StateMachine_Function+0x150>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003858:	ee76 7ae7 	vsub.f32	s15, s13, s15
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 800385c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003864:	da00      	bge.n	8003868 <SETHOME_StateMachine_Function+0xec>
		  break;
 8003866:	e01c      	b.n	80038a2 <SETHOME_StateMachine_Function+0x126>
					  (Moving_Link_Task_Flag == 1))
 8003868:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <SETHOME_StateMachine_Function+0x148>)
 800386a:	781b      	ldrb	r3, [r3, #0]
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 800386c:	2b01      	cmp	r3, #1
 800386e:	d118      	bne.n	80038a2 <SETHOME_StateMachine_Function+0x126>
					SethomeMode = SetHomeState_0;
 8003870:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <SETHOME_StateMachine_Function+0x12c>)
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_Idle;
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <SETHOME_StateMachine_Function+0x138>)
 8003878:	2201      	movs	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
					MovingLinkMode = LMM_Not_Set;
 800387c:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <SETHOME_StateMachine_Function+0x13c>)
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <SETHOME_StateMachine_Function+0x134>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2200      	movs	r2, #0
 8003888:	635a      	str	r2, [r3, #52]	; 0x34
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <SETHOME_StateMachine_Function+0x14c>)
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	4a0c      	ldr	r2, [pc, #48]	; (80038c0 <SETHOME_StateMachine_Function+0x144>)
 8003890:	6653      	str	r3, [r2, #100]	; 0x64
					Moving_Link_Task_Flag = 0;
 8003892:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <SETHOME_StateMachine_Function+0x148>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
					PID_Reset();
 8003898:	f7ff fe68 	bl	800356c <PID_Reset>
		  break;
 800389c:	e001      	b.n	80038a2 <SETHOME_StateMachine_Function+0x126>
			break;
 800389e:	bf00      	nop
 80038a0:	e000      	b.n	80038a4 <SETHOME_StateMachine_Function+0x128>
		  break;
 80038a2:	bf00      	nop
     }

}
 80038a4:	bf00      	nop
 80038a6:	bdb0      	pop	{r4, r5, r7, pc}
 80038a8:	200000da 	.word	0x200000da
 80038ac:	40020800 	.word	0x40020800
 80038b0:	200003d4 	.word	0x200003d4
 80038b4:	200000d9 	.word	0x200000d9
 80038b8:	200000ee 	.word	0x200000ee
 80038bc:	2000047c 	.word	0x2000047c
 80038c0:	20000168 	.word	0x20000168
 80038c4:	200000f8 	.word	0x200000f8
 80038c8:	20000108 	.word	0x20000108
 80038cc:	20000015 	.word	0x20000015

080038d0 <PRESETHOME_StateMachine_Function>:

void PRESETHOME_StateMachine_Function()
{
 80038d0:	b5b0      	push	{r4, r5, r7, lr}
 80038d2:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 80038d4:	4b7c      	ldr	r3, [pc, #496]	; (8003ac8 <PRESETHOME_StateMachine_Function+0x1f8>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	f200 80ee 	bhi.w	8003aba <PRESETHOME_StateMachine_Function+0x1ea>
 80038de:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <PRESETHOME_StateMachine_Function+0x14>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	080038f5 	.word	0x080038f5
 80038e8:	08003ab5 	.word	0x08003ab5
 80038ec:	08003911 	.word	0x08003911
 80038f0:	08003a0d 	.word	0x08003a0d
	{
		case SetHomeState_0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80038f4:	2200      	movs	r2, #0
 80038f6:	2180      	movs	r1, #128	; 0x80
 80038f8:	4874      	ldr	r0, [pc, #464]	; (8003acc <PRESETHOME_StateMachine_Function+0x1fc>)
 80038fa:	f001 fb17 	bl	8004f2c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 80038fe:	4b74      	ldr	r3, [pc, #464]	; (8003ad0 <PRESETHOME_StateMachine_Function+0x200>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003906:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 8003908:	4b6f      	ldr	r3, [pc, #444]	; (8003ac8 <PRESETHOME_StateMachine_Function+0x1f8>)
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
			break;
 800390e:	e0d4      	b.n	8003aba <PRESETHOME_StateMachine_Function+0x1ea>
		case SetHomeState_1:
			break;
		case SetHomeState_2:
			Angularpos_InputNumber = 0;
 8003910:	4b70      	ldr	r3, [pc, #448]	; (8003ad4 <PRESETHOME_StateMachine_Function+0x204>)
 8003912:	2200      	movs	r2, #0
 8003914:	801a      	strh	r2, [r3, #0]
			TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 8003916:	4b6f      	ldr	r3, [pc, #444]	; (8003ad4 <PRESETHOME_StateMachine_Function+0x204>)
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	4b6e      	ldr	r3, [pc, #440]	; (8003ad8 <PRESETHOME_StateMachine_Function+0x208>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	fb03 f302 	mul.w	r3, r3, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f7fc fd99 	bl	800045c <__aeabi_ui2d>
 800392a:	a365      	add	r3, pc, #404	; (adr r3, 8003ac0 <PRESETHOME_StateMachine_Function+0x1f0>)
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	f7fc ff38 	bl	80007a4 <__aeabi_ddiv>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	f7fd f8d8 	bl	8000af0 <__aeabi_d2f>
 8003940:	4603      	mov	r3, r0
 8003942:	4a66      	ldr	r2, [pc, #408]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 8003944:	6613      	str	r3, [r2, #96]	; 0x60
			if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 8003946:	4b65      	ldr	r3, [pc, #404]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 8003948:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800394c:	4b62      	ldr	r3, [pc, #392]	; (8003ad8 <PRESETHOME_StateMachine_Function+0x208>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	ee07 3a90 	vmov	s15, r3
 8003954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003958:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800395c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003960:	db0d      	blt.n	800397e <PRESETHOME_StateMachine_Function+0xae>
			{
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8003962:	4b5e      	ldr	r3, [pc, #376]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 8003964:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8003968:	4b5b      	ldr	r3, [pc, #364]	; (8003ad8 <PRESETHOME_StateMachine_Function+0x208>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003978:	4b58      	ldr	r3, [pc, #352]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 800397a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			}
			TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 800397e:	4b57      	ldr	r3, [pc, #348]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 8003980:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8003984:	4b54      	ldr	r3, [pc, #336]	; (8003ad8 <PRESETHOME_StateMachine_Function+0x208>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003994:	4b51      	ldr	r3, [pc, #324]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 8003996:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

			if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 800399a:	4b50      	ldr	r3, [pc, #320]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 800399c:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80039a0:	4b4e      	ldr	r3, [pc, #312]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 80039a2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80039a6:	eeb4 7a67 	vcmp.f32	s14, s15
 80039aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ae:	d010      	beq.n	80039d2 <PRESETHOME_StateMachine_Function+0x102>
			{
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 80039b0:	4b4a      	ldr	r3, [pc, #296]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 80039b2:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80039b6:	4b49      	ldr	r3, [pc, #292]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 80039b8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80039bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039c0:	4b46      	ldr	r3, [pc, #280]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 80039c2:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			  SethomeMode = SetHomeState_3;
 80039c6:	4b40      	ldr	r3, [pc, #256]	; (8003ac8 <PRESETHOME_StateMachine_Function+0x1f8>)
 80039c8:	2203      	movs	r2, #3
 80039ca:	701a      	strb	r2, [r3, #0]
			  TrajectoryGenerationCalculation();
 80039cc:	f7fe fb6e 	bl	80020ac <TrajectoryGenerationCalculation>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
				TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
				Moving_Link_Task_Flag = 0;
				PID_Reset();
			}
			break;
 80039d0:	e073      	b.n	8003aba <PRESETHOME_StateMachine_Function+0x1ea>
				SethomeMode = SetHomeState_0;
 80039d2:	4b3d      	ldr	r3, [pc, #244]	; (8003ac8 <PRESETHOME_StateMachine_Function+0x1f8>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
				Munmunbot_State = STATE_Disconnected;
 80039d8:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <PRESETHOME_StateMachine_Function+0x210>)
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 80039de:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <PRESETHOME_StateMachine_Function+0x214>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80039e4:	4b3a      	ldr	r3, [pc, #232]	; (8003ad0 <PRESETHOME_StateMachine_Function+0x200>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2200      	movs	r2, #0
 80039ea:	635a      	str	r2, [r3, #52]	; 0x34
				TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
 80039ec:	4b3e      	ldr	r3, [pc, #248]	; (8003ae8 <PRESETHOME_StateMachine_Function+0x218>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fa:	4b38      	ldr	r3, [pc, #224]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 80039fc:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				Moving_Link_Task_Flag = 0;
 8003a00:	4b3a      	ldr	r3, [pc, #232]	; (8003aec <PRESETHOME_StateMachine_Function+0x21c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]
				PID_Reset();
 8003a06:	f7ff fdb1 	bl	800356c <PID_Reset>
			break;
 8003a0a:	e056      	b.n	8003aba <PRESETHOME_StateMachine_Function+0x1ea>
		case SetHomeState_3:
		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8003a0c:	f7fe f8ae 	bl	8001b6c <micros>
 8003a10:	4b32      	ldr	r3, [pc, #200]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 8003a12:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003a16:	1a84      	subs	r4, r0, r2
 8003a18:	eb61 0503 	sbc.w	r5, r1, r3
 8003a1c:	4b2f      	ldr	r3, [pc, #188]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 8003a1e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003a22:	429d      	cmp	r5, r3
 8003a24:	bf08      	it	eq
 8003a26:	4294      	cmpeq	r4, r2
 8003a28:	d346      	bcc.n	8003ab8 <PRESETHOME_StateMachine_Function+0x1e8>
		  {
			  Controlling_the_LINK();
 8003a2a:	f7ff fe3f 	bl	80036ac <Controlling_the_LINK>

			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8003a2e:	4b30      	ldr	r3, [pc, #192]	; (8003af0 <PRESETHOME_StateMachine_Function+0x220>)
 8003a30:	ed93 7a06 	vldr	s14, [r3, #24]
 8003a34:	4b29      	ldr	r3, [pc, #164]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 8003a36:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003a3a:	4b2e      	ldr	r3, [pc, #184]	; (8003af4 <PRESETHOME_StateMachine_Function+0x224>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a52:	d900      	bls.n	8003a56 <PRESETHOME_StateMachine_Function+0x186>
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
					Moving_Link_Task_Flag = 0;
					PID_Reset();
			  }
		  }
		  break;
 8003a54:	e030      	b.n	8003ab8 <PRESETHOME_StateMachine_Function+0x1e8>
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8003a56:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <PRESETHOME_StateMachine_Function+0x220>)
 8003a58:	ed93 7a06 	vldr	s14, [r3, #24]
 8003a5c:	4b1f      	ldr	r3, [pc, #124]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 8003a5e:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003a62:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <PRESETHOME_StateMachine_Function+0x224>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8003a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7a:	da00      	bge.n	8003a7e <PRESETHOME_StateMachine_Function+0x1ae>
		  break;
 8003a7c:	e01c      	b.n	8003ab8 <PRESETHOME_StateMachine_Function+0x1e8>
					  (Moving_Link_Task_Flag == 1))
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <PRESETHOME_StateMachine_Function+0x21c>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d118      	bne.n	8003ab8 <PRESETHOME_StateMachine_Function+0x1e8>
					SethomeMode = SetHomeState_0;
 8003a86:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <PRESETHOME_StateMachine_Function+0x1f8>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_Disconnected;
 8003a8c:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <PRESETHOME_StateMachine_Function+0x210>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
					MovingLinkMode = LMM_Not_Set;
 8003a92:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <PRESETHOME_StateMachine_Function+0x214>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003a98:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <PRESETHOME_StateMachine_Function+0x200>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	635a      	str	r2, [r3, #52]	; 0x34
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8003aa0:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <PRESETHOME_StateMachine_Function+0x220>)
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <PRESETHOME_StateMachine_Function+0x20c>)
 8003aa6:	6653      	str	r3, [r2, #100]	; 0x64
					Moving_Link_Task_Flag = 0;
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <PRESETHOME_StateMachine_Function+0x21c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
					PID_Reset();
 8003aae:	f7ff fd5d 	bl	800356c <PID_Reset>
		  break;
 8003ab2:	e001      	b.n	8003ab8 <PRESETHOME_StateMachine_Function+0x1e8>
			break;
 8003ab4:	bf00      	nop
 8003ab6:	e000      	b.n	8003aba <PRESETHOME_StateMachine_Function+0x1ea>
		  break;
 8003ab8:	bf00      	nop
     }
}
 8003aba:	bf00      	nop
 8003abc:	bdb0      	pop	{r4, r5, r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	99999999 	.word	0x99999999
 8003ac4:	40eeadf9 	.word	0x40eeadf9
 8003ac8:	200000da 	.word	0x200000da
 8003acc:	40020800 	.word	0x40020800
 8003ad0:	200003d4 	.word	0x200003d4
 8003ad4:	200000ec 	.word	0x200000ec
 8003ad8:	200001e0 	.word	0x200001e0
 8003adc:	20000168 	.word	0x20000168
 8003ae0:	200000d9 	.word	0x200000d9
 8003ae4:	200000ee 	.word	0x200000ee
 8003ae8:	2000047c 	.word	0x2000047c
 8003aec:	200000f8 	.word	0x200000f8
 8003af0:	20000108 	.word	0x20000108
 8003af4:	20000015 	.word	0x20000015

08003af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003afc:	b672      	cpsid	i
}
 8003afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b00:	e7fe      	b.n	8003b00 <Error_Handler+0x8>
	...

08003b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	607b      	str	r3, [r7, #4]
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_MspInit+0x4c>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	4a0f      	ldr	r2, [pc, #60]	; (8003b50 <HAL_MspInit+0x4c>)
 8003b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b18:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <HAL_MspInit+0x4c>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b22:	607b      	str	r3, [r7, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_MspInit+0x4c>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	4a08      	ldr	r2, [pc, #32]	; (8003b50 <HAL_MspInit+0x4c>)
 8003b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b34:	6413      	str	r3, [r2, #64]	; 0x40
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_MspInit+0x4c>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003b42:	2007      	movs	r0, #7
 8003b44:	f000 fc04 	bl	8004350 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40023800 	.word	0x40023800

08003b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5c:	f107 0314 	add.w	r3, r7, #20
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <HAL_I2C_MspInit+0xa4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d13c      	bne.n	8003bf0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <HAL_I2C_MspInit+0xa8>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <HAL_I2C_MspInit+0xa8>)
 8003b80:	f043 0302 	orr.w	r3, r3, #2
 8003b84:	6313      	str	r3, [r2, #48]	; 0x30
 8003b86:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <HAL_I2C_MspInit+0xa8>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003b92:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b98:	2312      	movs	r3, #18
 8003b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba8:	f107 0314 	add.w	r3, r7, #20
 8003bac:	4619      	mov	r1, r3
 8003bae:	4814      	ldr	r0, [pc, #80]	; (8003c00 <HAL_I2C_MspInit+0xac>)
 8003bb0:	f001 f820 	bl	8004bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <HAL_I2C_MspInit+0xa8>)
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	4a0f      	ldr	r2, [pc, #60]	; (8003bfc <HAL_I2C_MspInit+0xa8>)
 8003bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <HAL_I2C_MspInit+0xa8>)
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	201f      	movs	r0, #31
 8003bd6:	f000 fbc6 	bl	8004366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003bda:	201f      	movs	r0, #31
 8003bdc:	f000 fbdf 	bl	800439e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003be0:	2200      	movs	r2, #0
 8003be2:	2100      	movs	r1, #0
 8003be4:	2020      	movs	r0, #32
 8003be6:	f000 fbbe 	bl	8004366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003bea:	2020      	movs	r0, #32
 8003bec:	f000 fbd7 	bl	800439e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003bf0:	bf00      	nop
 8003bf2:	3728      	adds	r7, #40	; 0x28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40005400 	.word	0x40005400
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40020400 	.word	0x40020400

08003c04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_TIM_Encoder_MspInit+0x84>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d12c      	bne.n	8003c80 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <HAL_TIM_Encoder_MspInit+0x88>)
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	4a17      	ldr	r2, [pc, #92]	; (8003c8c <HAL_TIM_Encoder_MspInit+0x88>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6453      	str	r3, [r2, #68]	; 0x44
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <HAL_TIM_Encoder_MspInit+0x88>)
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <HAL_TIM_Encoder_MspInit+0x88>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	4a10      	ldr	r2, [pc, #64]	; (8003c8c <HAL_TIM_Encoder_MspInit+0x88>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6313      	str	r3, [r2, #48]	; 0x30
 8003c52:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <HAL_TIM_Encoder_MspInit+0x88>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 8003c5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c64:	2302      	movs	r3, #2
 8003c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c70:	2301      	movs	r3, #1
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4805      	ldr	r0, [pc, #20]	; (8003c90 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003c7c:	f000 ffba 	bl	8004bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003c80:	bf00      	nop
 8003c82:	3728      	adds	r7, #40	; 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40020000 	.word	0x40020000

08003c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca4:	d116      	bne.n	8003cd4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <HAL_TIM_Base_MspInit+0x70>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <HAL_TIM_Base_MspInit+0x70>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb6:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <HAL_TIM_Base_MspInit+0x70>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	201c      	movs	r0, #28
 8003cc8:	f000 fb4d 	bl	8004366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ccc:	201c      	movs	r0, #28
 8003cce:	f000 fb66 	bl	800439e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003cd2:	e012      	b.n	8003cfa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0b      	ldr	r2, [pc, #44]	; (8003d08 <HAL_TIM_Base_MspInit+0x74>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d10d      	bne.n	8003cfa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_TIM_Base_MspInit+0x70>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <HAL_TIM_Base_MspInit+0x70>)
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_TIM_Base_MspInit+0x70>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40000400 	.word	0x40000400

08003d0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 030c 	add.w	r3, r7, #12
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <HAL_TIM_MspPostInit+0x68>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d11d      	bne.n	8003d6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_TIM_MspPostInit+0x6c>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	4a10      	ldr	r2, [pc, #64]	; (8003d78 <HAL_TIM_MspPostInit+0x6c>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_TIM_MspPostInit+0x6c>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 8003d4a:	2340      	movs	r3, #64	; 0x40
 8003d4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 8003d5e:	f107 030c 	add.w	r3, r7, #12
 8003d62:	4619      	mov	r1, r3
 8003d64:	4805      	ldr	r0, [pc, #20]	; (8003d7c <HAL_TIM_MspPostInit+0x70>)
 8003d66:	f000 ff45 	bl	8004bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003d6a:	bf00      	nop
 8003d6c:	3720      	adds	r7, #32
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40020000 	.word	0x40020000

08003d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08a      	sub	sp, #40	; 0x28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d88:	f107 0314 	add.w	r3, r7, #20
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a4c      	ldr	r2, [pc, #304]	; (8003ed0 <HAL_UART_MspInit+0x150>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	f040 8091 	bne.w	8003ec6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003da4:	2300      	movs	r3, #0
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	4b4a      	ldr	r3, [pc, #296]	; (8003ed4 <HAL_UART_MspInit+0x154>)
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	4a49      	ldr	r2, [pc, #292]	; (8003ed4 <HAL_UART_MspInit+0x154>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db2:	6413      	str	r3, [r2, #64]	; 0x40
 8003db4:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <HAL_UART_MspInit+0x154>)
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	4b43      	ldr	r3, [pc, #268]	; (8003ed4 <HAL_UART_MspInit+0x154>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	4a42      	ldr	r2, [pc, #264]	; (8003ed4 <HAL_UART_MspInit+0x154>)
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd0:	4b40      	ldr	r3, [pc, #256]	; (8003ed4 <HAL_UART_MspInit+0x154>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ddc:	230c      	movs	r3, #12
 8003dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de0:	2302      	movs	r3, #2
 8003de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de8:	2303      	movs	r3, #3
 8003dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dec:	2307      	movs	r3, #7
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	4619      	mov	r1, r3
 8003df6:	4838      	ldr	r0, [pc, #224]	; (8003ed8 <HAL_UART_MspInit+0x158>)
 8003df8:	f000 fefc 	bl	8004bf4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003dfc:	4b37      	ldr	r3, [pc, #220]	; (8003edc <HAL_UART_MspInit+0x15c>)
 8003dfe:	4a38      	ldr	r2, [pc, #224]	; (8003ee0 <HAL_UART_MspInit+0x160>)
 8003e00:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003e02:	4b36      	ldr	r3, [pc, #216]	; (8003edc <HAL_UART_MspInit+0x15c>)
 8003e04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e08:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e0a:	4b34      	ldr	r3, [pc, #208]	; (8003edc <HAL_UART_MspInit+0x15c>)
 8003e0c:	2240      	movs	r2, #64	; 0x40
 8003e0e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e10:	4b32      	ldr	r3, [pc, #200]	; (8003edc <HAL_UART_MspInit+0x15c>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e16:	4b31      	ldr	r3, [pc, #196]	; (8003edc <HAL_UART_MspInit+0x15c>)
 8003e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e1c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e1e:	4b2f      	ldr	r3, [pc, #188]	; (8003edc <HAL_UART_MspInit+0x15c>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e24:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <HAL_UART_MspInit+0x15c>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <HAL_UART_MspInit+0x15c>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e30:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <HAL_UART_MspInit+0x15c>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e36:	4b29      	ldr	r3, [pc, #164]	; (8003edc <HAL_UART_MspInit+0x15c>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003e3c:	4827      	ldr	r0, [pc, #156]	; (8003edc <HAL_UART_MspInit+0x15c>)
 8003e3e:	f000 fac9 	bl	80043d4 <HAL_DMA_Init>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003e48:	f7ff fe56 	bl	8003af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a23      	ldr	r2, [pc, #140]	; (8003edc <HAL_UART_MspInit+0x15c>)
 8003e50:	635a      	str	r2, [r3, #52]	; 0x34
 8003e52:	4a22      	ldr	r2, [pc, #136]	; (8003edc <HAL_UART_MspInit+0x15c>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003e58:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <HAL_UART_MspInit+0x164>)
 8003e5a:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <HAL_UART_MspInit+0x168>)
 8003e5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003e5e:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_UART_MspInit+0x164>)
 8003e60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e64:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e66:	4b1f      	ldr	r3, [pc, #124]	; (8003ee4 <HAL_UART_MspInit+0x164>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <HAL_UART_MspInit+0x164>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e72:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <HAL_UART_MspInit+0x164>)
 8003e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e78:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <HAL_UART_MspInit+0x164>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e80:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_UART_MspInit+0x164>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003e86:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <HAL_UART_MspInit+0x164>)
 8003e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e8c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <HAL_UART_MspInit+0x164>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e94:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <HAL_UART_MspInit+0x164>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e9a:	4812      	ldr	r0, [pc, #72]	; (8003ee4 <HAL_UART_MspInit+0x164>)
 8003e9c:	f000 fa9a 	bl	80043d4 <HAL_DMA_Init>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003ea6:	f7ff fe27 	bl	8003af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a0d      	ldr	r2, [pc, #52]	; (8003ee4 <HAL_UART_MspInit+0x164>)
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
 8003eb0:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <HAL_UART_MspInit+0x164>)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2100      	movs	r1, #0
 8003eba:	2026      	movs	r0, #38	; 0x26
 8003ebc:	f000 fa53 	bl	8004366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ec0:	2026      	movs	r0, #38	; 0x26
 8003ec2:	f000 fa6c 	bl	800439e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ec6:	bf00      	nop
 8003ec8:	3728      	adds	r7, #40	; 0x28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40004400 	.word	0x40004400
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	2000041c 	.word	0x2000041c
 8003ee0:	400260a0 	.word	0x400260a0
 8003ee4:	20000320 	.word	0x20000320
 8003ee8:	40026088 	.word	0x40026088

08003eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <NMI_Handler+0x4>

08003ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ef6:	e7fe      	b.n	8003ef6 <HardFault_Handler+0x4>

08003ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003efc:	e7fe      	b.n	8003efc <MemManage_Handler+0x4>

08003efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f02:	e7fe      	b.n	8003f02 <BusFault_Handler+0x4>

08003f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f08:	e7fe      	b.n	8003f08 <UsageFault_Handler+0x4>

08003f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f38:	f000 f91a 	bl	8004170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f3c:	bf00      	nop
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <DMA1_Stream5_IRQHandler+0x10>)
 8003f46:	f000 fbdd 	bl	8004704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000320 	.word	0x20000320

08003f54 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003f58:	4802      	ldr	r0, [pc, #8]	; (8003f64 <DMA1_Stream6_IRQHandler+0x10>)
 8003f5a:	f000 fbd3 	bl	8004704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	2000041c 	.word	0x2000041c

08003f68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003f6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f70:	f000 fff6 	bl	8004f60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f7c:	4802      	ldr	r0, [pc, #8]	; (8003f88 <TIM2_IRQHandler+0x10>)
 8003f7e:	f003 fe65 	bl	8007c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	200004c4 	.word	0x200004c4

08003f8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f90:	4802      	ldr	r0, [pc, #8]	; (8003f9c <I2C1_EV_IRQHandler+0x10>)
 8003f92:	f001 f9e7 	bl	8005364 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000380 	.word	0x20000380

08003fa0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003fa4:	4802      	ldr	r0, [pc, #8]	; (8003fb0 <I2C1_ER_IRQHandler+0x10>)
 8003fa6:	f001 fb4a 	bl	800563e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003faa:	bf00      	nop
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000380 	.word	0x20000380

08003fb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003fb8:	4802      	ldr	r0, [pc, #8]	; (8003fc4 <USART2_IRQHandler+0x10>)
 8003fba:	f004 fd31 	bl	8008a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	2000050c 	.word	0x2000050c

08003fc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003fcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003fd0:	f000 ffc6 	bl	8004f60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003fd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003fd8:	f000 ffc2 	bl	8004f60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fe8:	4a14      	ldr	r2, [pc, #80]	; (800403c <_sbrk+0x5c>)
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <_sbrk+0x60>)
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ff4:	4b13      	ldr	r3, [pc, #76]	; (8004044 <_sbrk+0x64>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <_sbrk+0x64>)
 8003ffe:	4a12      	ldr	r2, [pc, #72]	; (8004048 <_sbrk+0x68>)
 8004000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004002:	4b10      	ldr	r3, [pc, #64]	; (8004044 <_sbrk+0x64>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4413      	add	r3, r2
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	429a      	cmp	r2, r3
 800400e:	d207      	bcs.n	8004020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004010:	f005 fb62 	bl	80096d8 <__errno>
 8004014:	4603      	mov	r3, r0
 8004016:	220c      	movs	r2, #12
 8004018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800401a:	f04f 33ff 	mov.w	r3, #4294967295
 800401e:	e009      	b.n	8004034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <_sbrk+0x64>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <_sbrk+0x64>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	4a05      	ldr	r2, [pc, #20]	; (8004044 <_sbrk+0x64>)
 8004030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004032:	68fb      	ldr	r3, [r7, #12]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20020000 	.word	0x20020000
 8004040:	00000400 	.word	0x00000400
 8004044:	20000314 	.word	0x20000314
 8004048:	20000568 	.word	0x20000568

0800404c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <SystemInit+0x28>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	4a07      	ldr	r2, [pc, #28]	; (8004074 <SystemInit+0x28>)
 8004058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800405c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004060:	4b04      	ldr	r3, [pc, #16]	; (8004074 <SystemInit+0x28>)
 8004062:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004066:	609a      	str	r2, [r3, #8]
#endif
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800407c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800407e:	e003      	b.n	8004088 <LoopCopyDataInit>

08004080 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004082:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004084:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004086:	3104      	adds	r1, #4

08004088 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004088:	480b      	ldr	r0, [pc, #44]	; (80040b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800408c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800408e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004090:	d3f6      	bcc.n	8004080 <CopyDataInit>
  ldr  r2, =_sbss
 8004092:	4a0b      	ldr	r2, [pc, #44]	; (80040c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004094:	e002      	b.n	800409c <LoopFillZerobss>

08004096 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004096:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004098:	f842 3b04 	str.w	r3, [r2], #4

0800409c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800409c:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800409e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80040a0:	d3f9      	bcc.n	8004096 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80040a2:	f7ff ffd3 	bl	800404c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040a6:	f005 fb1d 	bl	80096e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040aa:	f7fc fffd 	bl	80010a8 <main>
  bx  lr    
 80040ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80040b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80040b4:	08009a98 	.word	0x08009a98
  ldr  r0, =_sdata
 80040b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80040bc:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80040c0:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80040c4:	20000564 	.word	0x20000564

080040c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040c8:	e7fe      	b.n	80040c8 <ADC_IRQHandler>
	...

080040cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040d0:	4b0e      	ldr	r3, [pc, #56]	; (800410c <HAL_Init+0x40>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0d      	ldr	r2, [pc, #52]	; (800410c <HAL_Init+0x40>)
 80040d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_Init+0x40>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a0a      	ldr	r2, [pc, #40]	; (800410c <HAL_Init+0x40>)
 80040e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <HAL_Init+0x40>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a07      	ldr	r2, [pc, #28]	; (800410c <HAL_Init+0x40>)
 80040ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f4:	2003      	movs	r0, #3
 80040f6:	f000 f92b 	bl	8004350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040fa:	2000      	movs	r0, #0
 80040fc:	f000 f808 	bl	8004110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004100:	f7ff fd00 	bl	8003b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40023c00 	.word	0x40023c00

08004110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004118:	4b12      	ldr	r3, [pc, #72]	; (8004164 <HAL_InitTick+0x54>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_InitTick+0x58>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	4619      	mov	r1, r3
 8004122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004126:	fbb3 f3f1 	udiv	r3, r3, r1
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f943 	bl	80043ba <HAL_SYSTICK_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e00e      	b.n	800415c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b0f      	cmp	r3, #15
 8004142:	d80a      	bhi.n	800415a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004144:	2200      	movs	r2, #0
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	f000 f90b 	bl	8004366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004150:	4a06      	ldr	r2, [pc, #24]	; (800416c <HAL_InitTick+0x5c>)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e000      	b.n	800415c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000018 	.word	0x20000018
 8004168:	20000020 	.word	0x20000020
 800416c:	2000001c 	.word	0x2000001c

08004170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <HAL_IncTick+0x20>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_IncTick+0x24>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4413      	add	r3, r2
 8004180:	4a04      	ldr	r2, [pc, #16]	; (8004194 <HAL_IncTick+0x24>)
 8004182:	6013      	str	r3, [r2, #0]
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000020 	.word	0x20000020
 8004194:	20000550 	.word	0x20000550

08004198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return uwTick;
 800419c:	4b03      	ldr	r3, [pc, #12]	; (80041ac <HAL_GetTick+0x14>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000550 	.word	0x20000550

080041b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041c0:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <__NVIC_SetPriorityGrouping+0x44>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041cc:	4013      	ands	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041e2:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <__NVIC_SetPriorityGrouping+0x44>)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	60d3      	str	r3, [r2, #12]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <__NVIC_GetPriorityGrouping+0x18>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	f003 0307 	and.w	r3, r3, #7
}
 8004206:	4618      	mov	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	2b00      	cmp	r3, #0
 8004224:	db0b      	blt.n	800423e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	f003 021f 	and.w	r2, r3, #31
 800422c:	4907      	ldr	r1, [pc, #28]	; (800424c <__NVIC_EnableIRQ+0x38>)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2001      	movs	r0, #1
 8004236:	fa00 f202 	lsl.w	r2, r0, r2
 800423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	e000e100 	.word	0xe000e100

08004250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	6039      	str	r1, [r7, #0]
 800425a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004260:	2b00      	cmp	r3, #0
 8004262:	db0a      	blt.n	800427a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	490c      	ldr	r1, [pc, #48]	; (800429c <__NVIC_SetPriority+0x4c>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	0112      	lsls	r2, r2, #4
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	440b      	add	r3, r1
 8004274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004278:	e00a      	b.n	8004290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	4908      	ldr	r1, [pc, #32]	; (80042a0 <__NVIC_SetPriority+0x50>)
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	3b04      	subs	r3, #4
 8004288:	0112      	lsls	r2, r2, #4
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	440b      	add	r3, r1
 800428e:	761a      	strb	r2, [r3, #24]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000e100 	.word	0xe000e100
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b089      	sub	sp, #36	; 0x24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f1c3 0307 	rsb	r3, r3, #7
 80042be:	2b04      	cmp	r3, #4
 80042c0:	bf28      	it	cs
 80042c2:	2304      	movcs	r3, #4
 80042c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3304      	adds	r3, #4
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d902      	bls.n	80042d4 <NVIC_EncodePriority+0x30>
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	3b03      	subs	r3, #3
 80042d2:	e000      	b.n	80042d6 <NVIC_EncodePriority+0x32>
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d8:	f04f 32ff 	mov.w	r2, #4294967295
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43da      	mvns	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	401a      	ands	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042ec:	f04f 31ff 	mov.w	r1, #4294967295
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	43d9      	mvns	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042fc:	4313      	orrs	r3, r2
         );
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3724      	adds	r7, #36	; 0x24
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3b01      	subs	r3, #1
 8004318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800431c:	d301      	bcc.n	8004322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800431e:	2301      	movs	r3, #1
 8004320:	e00f      	b.n	8004342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004322:	4a0a      	ldr	r2, [pc, #40]	; (800434c <SysTick_Config+0x40>)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800432a:	210f      	movs	r1, #15
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	f7ff ff8e 	bl	8004250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <SysTick_Config+0x40>)
 8004336:	2200      	movs	r2, #0
 8004338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800433a:	4b04      	ldr	r3, [pc, #16]	; (800434c <SysTick_Config+0x40>)
 800433c:	2207      	movs	r2, #7
 800433e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	e000e010 	.word	0xe000e010

08004350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff29 	bl	80041b0 <__NVIC_SetPriorityGrouping>
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	4603      	mov	r3, r0
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004378:	f7ff ff3e 	bl	80041f8 <__NVIC_GetPriorityGrouping>
 800437c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	6978      	ldr	r0, [r7, #20]
 8004384:	f7ff ff8e 	bl	80042a4 <NVIC_EncodePriority>
 8004388:	4602      	mov	r2, r0
 800438a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff5d 	bl	8004250 <__NVIC_SetPriority>
}
 8004396:	bf00      	nop
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	4603      	mov	r3, r0
 80043a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff ff31 	bl	8004214 <__NVIC_EnableIRQ>
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b082      	sub	sp, #8
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff ffa2 	bl	800430c <SysTick_Config>
 80043c8:	4603      	mov	r3, r0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043e0:	f7ff feda 	bl	8004198 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e099      	b.n	8004524 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004410:	e00f      	b.n	8004432 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004412:	f7ff fec1 	bl	8004198 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b05      	cmp	r3, #5
 800441e:	d908      	bls.n	8004432 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2203      	movs	r2, #3
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e078      	b.n	8004524 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e8      	bne.n	8004412 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4b38      	ldr	r3, [pc, #224]	; (800452c <HAL_DMA_Init+0x158>)
 800444c:	4013      	ands	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800445e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800446a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	2b04      	cmp	r3, #4
 800448a:	d107      	bne.n	800449c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	4313      	orrs	r3, r2
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f023 0307 	bic.w	r3, r3, #7
 80044b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d117      	bne.n	80044f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00e      	beq.n	80044f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fb0f 	bl	8004afc <DMA_CheckFifoParam>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2240      	movs	r2, #64	; 0x40
 80044e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044f2:	2301      	movs	r3, #1
 80044f4:	e016      	b.n	8004524 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fac6 	bl	8004a90 <DMA_CalcBaseAndBitshift>
 8004504:	4603      	mov	r3, r0
 8004506:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450c:	223f      	movs	r2, #63	; 0x3f
 800450e:	409a      	lsls	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	f010803f 	.word	0xf010803f

08004530 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004546:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_DMA_Start_IT+0x26>
 8004552:	2302      	movs	r3, #2
 8004554:	e040      	b.n	80045d8 <HAL_DMA_Start_IT+0xa8>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b01      	cmp	r3, #1
 8004568:	d12f      	bne.n	80045ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fa58 	bl	8004a34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	223f      	movs	r2, #63	; 0x3f
 800458a:	409a      	lsls	r2, r3
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0216 	orr.w	r2, r2, #22
 800459e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0208 	orr.w	r2, r2, #8
 80045b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	e005      	b.n	80045d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
 80045d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045ee:	f7ff fdd3 	bl	8004198 <HAL_GetTick>
 80045f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d008      	beq.n	8004612 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2280      	movs	r2, #128	; 0x80
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e052      	b.n	80046b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0216 	bic.w	r2, r2, #22
 8004620:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004630:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <HAL_DMA_Abort+0x62>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463e:	2b00      	cmp	r3, #0
 8004640:	d007      	beq.n	8004652 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0208 	bic.w	r2, r2, #8
 8004650:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0201 	bic.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004662:	e013      	b.n	800468c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004664:	f7ff fd98 	bl	8004198 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b05      	cmp	r3, #5
 8004670:	d90c      	bls.n	800468c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2203      	movs	r2, #3
 8004684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e015      	b.n	80046b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e4      	bne.n	8004664 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469e:	223f      	movs	r2, #63	; 0x3f
 80046a0:	409a      	lsls	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d004      	beq.n	80046de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2280      	movs	r2, #128	; 0x80
 80046d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e00c      	b.n	80046f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2205      	movs	r2, #5
 80046e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0201 	bic.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004710:	4b92      	ldr	r3, [pc, #584]	; (800495c <HAL_DMA_IRQHandler+0x258>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a92      	ldr	r2, [pc, #584]	; (8004960 <HAL_DMA_IRQHandler+0x25c>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	0a9b      	lsrs	r3, r3, #10
 800471c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004722:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472e:	2208      	movs	r2, #8
 8004730:	409a      	lsls	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4013      	ands	r3, r2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01a      	beq.n	8004770 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d013      	beq.n	8004770 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0204 	bic.w	r2, r2, #4
 8004756:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475c:	2208      	movs	r2, #8
 800475e:	409a      	lsls	r2, r3
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	f043 0201 	orr.w	r2, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004774:	2201      	movs	r2, #1
 8004776:	409a      	lsls	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d012      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004792:	2201      	movs	r2, #1
 8004794:	409a      	lsls	r2, r3
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	f043 0202 	orr.w	r2, r3, #2
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047aa:	2204      	movs	r2, #4
 80047ac:	409a      	lsls	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d012      	beq.n	80047dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00b      	beq.n	80047dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c8:	2204      	movs	r2, #4
 80047ca:	409a      	lsls	r2, r3
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	f043 0204 	orr.w	r2, r3, #4
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e0:	2210      	movs	r2, #16
 80047e2:	409a      	lsls	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d043      	beq.n	8004874 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d03c      	beq.n	8004874 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fe:	2210      	movs	r2, #16
 8004800:	409a      	lsls	r2, r3
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d018      	beq.n	8004846 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d108      	bne.n	8004834 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	d024      	beq.n	8004874 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
 8004832:	e01f      	b.n	8004874 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01b      	beq.n	8004874 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
 8004844:	e016      	b.n	8004874 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d107      	bne.n	8004864 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0208 	bic.w	r2, r2, #8
 8004862:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004878:	2220      	movs	r2, #32
 800487a:	409a      	lsls	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4013      	ands	r3, r2
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 808e 	beq.w	80049a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8086 	beq.w	80049a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489a:	2220      	movs	r2, #32
 800489c:	409a      	lsls	r2, r3
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d136      	bne.n	800491c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0216 	bic.w	r2, r2, #22
 80048bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695a      	ldr	r2, [r3, #20]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d103      	bne.n	80048de <HAL_DMA_IRQHandler+0x1da>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d007      	beq.n	80048ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0208 	bic.w	r2, r2, #8
 80048ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f2:	223f      	movs	r2, #63	; 0x3f
 80048f4:	409a      	lsls	r2, r3
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490e:	2b00      	cmp	r3, #0
 8004910:	d07d      	beq.n	8004a0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	4798      	blx	r3
        }
        return;
 800491a:	e078      	b.n	8004a0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01c      	beq.n	8004964 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d108      	bne.n	800494a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493c:	2b00      	cmp	r3, #0
 800493e:	d030      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
 8004948:	e02b      	b.n	80049a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d027      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
 800495a:	e022      	b.n	80049a2 <HAL_DMA_IRQHandler+0x29e>
 800495c:	20000018 	.word	0x20000018
 8004960:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0210 	bic.w	r2, r2, #16
 8004980:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d032      	beq.n	8004a10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d022      	beq.n	80049fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2205      	movs	r2, #5
 80049ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	3301      	adds	r3, #1
 80049d2:	60bb      	str	r3, [r7, #8]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d307      	bcc.n	80049ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f2      	bne.n	80049ce <HAL_DMA_IRQHandler+0x2ca>
 80049e8:	e000      	b.n	80049ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80049ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
 8004a0c:	e000      	b.n	8004a10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004a0e:	bf00      	nop
    }
  }
}
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop

08004a18 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a26:	b2db      	uxtb	r3, r3
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d108      	bne.n	8004a74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a72:	e007      	b.n	8004a84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	60da      	str	r2, [r3, #12]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	3b10      	subs	r3, #16
 8004aa0:	4a14      	ldr	r2, [pc, #80]	; (8004af4 <DMA_CalcBaseAndBitshift+0x64>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004aaa:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <DMA_CalcBaseAndBitshift+0x68>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d909      	bls.n	8004ad2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ac6:	f023 0303 	bic.w	r3, r3, #3
 8004aca:	1d1a      	adds	r2, r3, #4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	659a      	str	r2, [r3, #88]	; 0x58
 8004ad0:	e007      	b.n	8004ae2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	aaaaaaab 	.word	0xaaaaaaab
 8004af8:	08009a80 	.word	0x08009a80

08004afc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11f      	bne.n	8004b56 <DMA_CheckFifoParam+0x5a>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d856      	bhi.n	8004bca <DMA_CheckFifoParam+0xce>
 8004b1c:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <DMA_CheckFifoParam+0x28>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b47 	.word	0x08004b47
 8004b2c:	08004b35 	.word	0x08004b35
 8004b30:	08004bcb 	.word	0x08004bcb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d046      	beq.n	8004bce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b44:	e043      	b.n	8004bce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b4e:	d140      	bne.n	8004bd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b54:	e03d      	b.n	8004bd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5e:	d121      	bne.n	8004ba4 <DMA_CheckFifoParam+0xa8>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d837      	bhi.n	8004bd6 <DMA_CheckFifoParam+0xda>
 8004b66:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <DMA_CheckFifoParam+0x70>)
 8004b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6c:	08004b7d 	.word	0x08004b7d
 8004b70:	08004b83 	.word	0x08004b83
 8004b74:	08004b7d 	.word	0x08004b7d
 8004b78:	08004b95 	.word	0x08004b95
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b80:	e030      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d025      	beq.n	8004bda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b92:	e022      	b.n	8004bda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b9c:	d11f      	bne.n	8004bde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ba2:	e01c      	b.n	8004bde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d903      	bls.n	8004bb2 <DMA_CheckFifoParam+0xb6>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d003      	beq.n	8004bb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bb0:	e018      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb6:	e015      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00e      	beq.n	8004be2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc8:	e00b      	b.n	8004be2 <DMA_CheckFifoParam+0xe6>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e00a      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bce:	bf00      	nop
 8004bd0:	e008      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bd2:	bf00      	nop
 8004bd4:	e006      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bd6:	bf00      	nop
 8004bd8:	e004      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e002      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004bde:	bf00      	nop
 8004be0:	e000      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004be2:	bf00      	nop
    }
  } 
  
  return status; 
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop

08004bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b089      	sub	sp, #36	; 0x24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	e159      	b.n	8004ec4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c10:	2201      	movs	r2, #1
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4013      	ands	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	f040 8148 	bne.w	8004ebe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d005      	beq.n	8004c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d130      	bne.n	8004ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	2203      	movs	r2, #3
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 0201 	and.w	r2, r3, #1
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d017      	beq.n	8004ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	2203      	movs	r2, #3
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d123      	bne.n	8004d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	08da      	lsrs	r2, r3, #3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3208      	adds	r2, #8
 8004cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	220f      	movs	r2, #15
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	08da      	lsrs	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3208      	adds	r2, #8
 8004d32:	69b9      	ldr	r1, [r7, #24]
 8004d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	2203      	movs	r2, #3
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 0203 	and.w	r2, r3, #3
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 80a2 	beq.w	8004ebe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	4b57      	ldr	r3, [pc, #348]	; (8004edc <HAL_GPIO_Init+0x2e8>)
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	4a56      	ldr	r2, [pc, #344]	; (8004edc <HAL_GPIO_Init+0x2e8>)
 8004d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d88:	6453      	str	r3, [r2, #68]	; 0x44
 8004d8a:	4b54      	ldr	r3, [pc, #336]	; (8004edc <HAL_GPIO_Init+0x2e8>)
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d96:	4a52      	ldr	r2, [pc, #328]	; (8004ee0 <HAL_GPIO_Init+0x2ec>)
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	089b      	lsrs	r3, r3, #2
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	220f      	movs	r2, #15
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43db      	mvns	r3, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4013      	ands	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a49      	ldr	r2, [pc, #292]	; (8004ee4 <HAL_GPIO_Init+0x2f0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d019      	beq.n	8004df6 <HAL_GPIO_Init+0x202>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a48      	ldr	r2, [pc, #288]	; (8004ee8 <HAL_GPIO_Init+0x2f4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <HAL_GPIO_Init+0x1fe>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a47      	ldr	r2, [pc, #284]	; (8004eec <HAL_GPIO_Init+0x2f8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00d      	beq.n	8004dee <HAL_GPIO_Init+0x1fa>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a46      	ldr	r2, [pc, #280]	; (8004ef0 <HAL_GPIO_Init+0x2fc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <HAL_GPIO_Init+0x1f6>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a45      	ldr	r2, [pc, #276]	; (8004ef4 <HAL_GPIO_Init+0x300>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d101      	bne.n	8004de6 <HAL_GPIO_Init+0x1f2>
 8004de2:	2304      	movs	r3, #4
 8004de4:	e008      	b.n	8004df8 <HAL_GPIO_Init+0x204>
 8004de6:	2307      	movs	r3, #7
 8004de8:	e006      	b.n	8004df8 <HAL_GPIO_Init+0x204>
 8004dea:	2303      	movs	r3, #3
 8004dec:	e004      	b.n	8004df8 <HAL_GPIO_Init+0x204>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e002      	b.n	8004df8 <HAL_GPIO_Init+0x204>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <HAL_GPIO_Init+0x204>
 8004df6:	2300      	movs	r3, #0
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	f002 0203 	and.w	r2, r2, #3
 8004dfe:	0092      	lsls	r2, r2, #2
 8004e00:	4093      	lsls	r3, r2
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e08:	4935      	ldr	r1, [pc, #212]	; (8004ee0 <HAL_GPIO_Init+0x2ec>)
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	089b      	lsrs	r3, r3, #2
 8004e0e:	3302      	adds	r3, #2
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e16:	4b38      	ldr	r3, [pc, #224]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4013      	ands	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e3a:	4a2f      	ldr	r2, [pc, #188]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e40:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e64:	4a24      	ldr	r2, [pc, #144]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e6a:	4b23      	ldr	r3, [pc, #140]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	43db      	mvns	r3, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4013      	ands	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e8e:	4a1a      	ldr	r2, [pc, #104]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e94:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004eb8:	4a0f      	ldr	r2, [pc, #60]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	2b0f      	cmp	r3, #15
 8004ec8:	f67f aea2 	bls.w	8004c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	3724      	adds	r7, #36	; 0x24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	40013800 	.word	0x40013800
 8004ee4:	40020000 	.word	0x40020000
 8004ee8:	40020400 	.word	0x40020400
 8004eec:	40020800 	.word	0x40020800
 8004ef0:	40020c00 	.word	0x40020c00
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	40013c00 	.word	0x40013c00

08004efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	887b      	ldrh	r3, [r7, #2]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
 8004f18:	e001      	b.n	8004f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	807b      	strh	r3, [r7, #2]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f3c:	787b      	ldrb	r3, [r7, #1]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f42:	887a      	ldrh	r2, [r7, #2]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f48:	e003      	b.n	8004f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f4a:	887b      	ldrh	r3, [r7, #2]
 8004f4c:	041a      	lsls	r2, r3, #16
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	619a      	str	r2, [r3, #24]
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
	...

08004f60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	4603      	mov	r3, r0
 8004f68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f6a:	4b08      	ldr	r3, [pc, #32]	; (8004f8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f6c:	695a      	ldr	r2, [r3, #20]
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d006      	beq.n	8004f84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f76:	4a05      	ldr	r2, [pc, #20]	; (8004f8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f7c:	88fb      	ldrh	r3, [r7, #6]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fc fd9c 	bl	8001abc <HAL_GPIO_EXTI_Callback>
  }
}
 8004f84:	bf00      	nop
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40013c00 	.word	0x40013c00

08004f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e12b      	b.n	80051fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fe fdcc 	bl	8003b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2224      	movs	r2, #36	; 0x24
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0201 	bic.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ff4:	f002 fab8 	bl	8007568 <HAL_RCC_GetPCLK1Freq>
 8004ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4a81      	ldr	r2, [pc, #516]	; (8005204 <HAL_I2C_Init+0x274>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d807      	bhi.n	8005014 <HAL_I2C_Init+0x84>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4a80      	ldr	r2, [pc, #512]	; (8005208 <HAL_I2C_Init+0x278>)
 8005008:	4293      	cmp	r3, r2
 800500a:	bf94      	ite	ls
 800500c:	2301      	movls	r3, #1
 800500e:	2300      	movhi	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	e006      	b.n	8005022 <HAL_I2C_Init+0x92>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4a7d      	ldr	r2, [pc, #500]	; (800520c <HAL_I2C_Init+0x27c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	bf94      	ite	ls
 800501c:	2301      	movls	r3, #1
 800501e:	2300      	movhi	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e0e7      	b.n	80051fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4a78      	ldr	r2, [pc, #480]	; (8005210 <HAL_I2C_Init+0x280>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	0c9b      	lsrs	r3, r3, #18
 8005034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4a6a      	ldr	r2, [pc, #424]	; (8005204 <HAL_I2C_Init+0x274>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d802      	bhi.n	8005064 <HAL_I2C_Init+0xd4>
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	3301      	adds	r3, #1
 8005062:	e009      	b.n	8005078 <HAL_I2C_Init+0xe8>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800506a:	fb02 f303 	mul.w	r3, r2, r3
 800506e:	4a69      	ldr	r2, [pc, #420]	; (8005214 <HAL_I2C_Init+0x284>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	099b      	lsrs	r3, r3, #6
 8005076:	3301      	adds	r3, #1
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	430b      	orrs	r3, r1
 800507e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800508a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	495c      	ldr	r1, [pc, #368]	; (8005204 <HAL_I2C_Init+0x274>)
 8005094:	428b      	cmp	r3, r1
 8005096:	d819      	bhi.n	80050cc <HAL_I2C_Init+0x13c>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1e59      	subs	r1, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80050a6:	1c59      	adds	r1, r3, #1
 80050a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050ac:	400b      	ands	r3, r1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_I2C_Init+0x138>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1e59      	subs	r1, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80050c0:	3301      	adds	r3, #1
 80050c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050c6:	e051      	b.n	800516c <HAL_I2C_Init+0x1dc>
 80050c8:	2304      	movs	r3, #4
 80050ca:	e04f      	b.n	800516c <HAL_I2C_Init+0x1dc>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d111      	bne.n	80050f8 <HAL_I2C_Init+0x168>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	1e58      	subs	r0, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6859      	ldr	r1, [r3, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	440b      	add	r3, r1
 80050e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80050e6:	3301      	adds	r3, #1
 80050e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	e012      	b.n	800511e <HAL_I2C_Init+0x18e>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	1e58      	subs	r0, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6859      	ldr	r1, [r3, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	0099      	lsls	r1, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	fbb0 f3f3 	udiv	r3, r0, r3
 800510e:	3301      	adds	r3, #1
 8005110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005114:	2b00      	cmp	r3, #0
 8005116:	bf0c      	ite	eq
 8005118:	2301      	moveq	r3, #1
 800511a:	2300      	movne	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_I2C_Init+0x196>
 8005122:	2301      	movs	r3, #1
 8005124:	e022      	b.n	800516c <HAL_I2C_Init+0x1dc>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10e      	bne.n	800514c <HAL_I2C_Init+0x1bc>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1e58      	subs	r0, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6859      	ldr	r1, [r3, #4]
 8005136:	460b      	mov	r3, r1
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	440b      	add	r3, r1
 800513c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005140:	3301      	adds	r3, #1
 8005142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800514a:	e00f      	b.n	800516c <HAL_I2C_Init+0x1dc>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	1e58      	subs	r0, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6859      	ldr	r1, [r3, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	0099      	lsls	r1, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005162:	3301      	adds	r3, #1
 8005164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	6809      	ldr	r1, [r1, #0]
 8005170:	4313      	orrs	r3, r2
 8005172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69da      	ldr	r2, [r3, #28]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800519a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6911      	ldr	r1, [r2, #16]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	68d2      	ldr	r2, [r2, #12]
 80051a6:	4311      	orrs	r1, r2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6812      	ldr	r2, [r2, #0]
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	000186a0 	.word	0x000186a0
 8005208:	001e847f 	.word	0x001e847f
 800520c:	003d08ff 	.word	0x003d08ff
 8005210:	431bde83 	.word	0x431bde83
 8005214:	10624dd3 	.word	0x10624dd3

08005218 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	607a      	str	r2, [r7, #4]
 8005222:	461a      	mov	r2, r3
 8005224:	460b      	mov	r3, r1
 8005226:	817b      	strh	r3, [r7, #10]
 8005228:	4613      	mov	r3, r2
 800522a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b20      	cmp	r3, #32
 800523a:	f040 8085 	bne.w	8005348 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800523e:	4b46      	ldr	r3, [pc, #280]	; (8005358 <HAL_I2C_Master_Transmit_IT+0x140>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	08db      	lsrs	r3, r3, #3
 8005244:	4a45      	ldr	r2, [pc, #276]	; (800535c <HAL_I2C_Master_Transmit_IT+0x144>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	0a1a      	lsrs	r2, r3, #8
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009a      	lsls	r2, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	3b01      	subs	r3, #1
 800525c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d116      	bne.n	8005292 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f043 0220 	orr.w	r2, r3, #32
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e05b      	b.n	800534a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b02      	cmp	r3, #2
 800529e:	d0db      	beq.n	8005258 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_I2C_Master_Transmit_IT+0x96>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e04d      	b.n	800534a <HAL_I2C_Master_Transmit_IT+0x132>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d007      	beq.n	80052d4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2221      	movs	r2, #33	; 0x21
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2210      	movs	r2, #16
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	893a      	ldrh	r2, [r7, #8]
 8005304:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a13      	ldr	r2, [pc, #76]	; (8005360 <HAL_I2C_Master_Transmit_IT+0x148>)
 8005314:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005316:	897a      	ldrh	r2, [r7, #10]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800532a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005342:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	e000      	b.n	800534a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005348:	2302      	movs	r3, #2
  }
}
 800534a:	4618      	mov	r0, r3
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	20000018 	.word	0x20000018
 800535c:	14f8b589 	.word	0x14f8b589
 8005360:	ffff0000 	.word	0xffff0000

08005364 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005384:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	2b10      	cmp	r3, #16
 8005392:	d003      	beq.n	800539c <HAL_I2C_EV_IRQHandler+0x38>
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	f040 80bd 	bne.w	8005516 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10d      	bne.n	80053d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80053bc:	d003      	beq.n	80053c6 <HAL_I2C_EV_IRQHandler+0x62>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80053c4:	d101      	bne.n	80053ca <HAL_I2C_EV_IRQHandler+0x66>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <HAL_I2C_EV_IRQHandler+0x68>
 80053ca:	2300      	movs	r3, #0
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	f000 812e 	beq.w	800562e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00c      	beq.n	80053f6 <HAL_I2C_EV_IRQHandler+0x92>
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	0a5b      	lsrs	r3, r3, #9
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d006      	beq.n	80053f6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 fc55 	bl	8006c98 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fd62 	bl	8005eb8 <I2C_Master_SB>
 80053f4:	e08e      	b.n	8005514 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	08db      	lsrs	r3, r3, #3
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_I2C_EV_IRQHandler+0xb2>
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	0a5b      	lsrs	r3, r3, #9
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fdd8 	bl	8005fc4 <I2C_Master_ADD10>
 8005414:	e07e      	b.n	8005514 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <HAL_I2C_EV_IRQHandler+0xd2>
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	0a5b      	lsrs	r3, r3, #9
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fdf2 	bl	8006018 <I2C_Master_ADDR>
 8005434:	e06e      	b.n	8005514 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	089b      	lsrs	r3, r3, #2
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d037      	beq.n	80054b2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005450:	f000 80ef 	beq.w	8005632 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	09db      	lsrs	r3, r3, #7
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00f      	beq.n	8005480 <HAL_I2C_EV_IRQHandler+0x11c>
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	0a9b      	lsrs	r3, r3, #10
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d009      	beq.n	8005480 <HAL_I2C_EV_IRQHandler+0x11c>
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	089b      	lsrs	r3, r3, #2
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d103      	bne.n	8005480 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f9ef 	bl	800585c <I2C_MasterTransmit_TXE>
 800547e:	e049      	b.n	8005514 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	089b      	lsrs	r3, r3, #2
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 80d2 	beq.w	8005632 <HAL_I2C_EV_IRQHandler+0x2ce>
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	0a5b      	lsrs	r3, r3, #9
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80cb 	beq.w	8005632 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d103      	bne.n	80054aa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fa76 	bl	8005994 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054a8:	e0c3      	b.n	8005632 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fada 	bl	8005a64 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054b0:	e0bf      	b.n	8005632 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c0:	f000 80b7 	beq.w	8005632 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	099b      	lsrs	r3, r3, #6
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00f      	beq.n	80054f0 <HAL_I2C_EV_IRQHandler+0x18c>
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	0a9b      	lsrs	r3, r3, #10
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d009      	beq.n	80054f0 <HAL_I2C_EV_IRQHandler+0x18c>
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	089b      	lsrs	r3, r3, #2
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d103      	bne.n	80054f0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fb4a 	bl	8005b82 <I2C_MasterReceive_RXNE>
 80054ee:	e011      	b.n	8005514 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	089b      	lsrs	r3, r3, #2
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 809a 	beq.w	8005632 <HAL_I2C_EV_IRQHandler+0x2ce>
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	0a5b      	lsrs	r3, r3, #9
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 8093 	beq.w	8005632 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fbe9 	bl	8005ce4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005512:	e08e      	b.n	8005632 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005514:	e08d      	b.n	8005632 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d004      	beq.n	8005528 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	e007      	b.n	8005538 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	085b      	lsrs	r3, r3, #1
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d012      	beq.n	800556a <HAL_I2C_EV_IRQHandler+0x206>
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	0a5b      	lsrs	r3, r3, #9
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00c      	beq.n	800556a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005560:	69b9      	ldr	r1, [r7, #24]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 ffa7 	bl	80064b6 <I2C_Slave_ADDR>
 8005568:	e066      	b.n	8005638 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <HAL_I2C_EV_IRQHandler+0x226>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	0a5b      	lsrs	r3, r3, #9
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 ffdc 	bl	8006540 <I2C_Slave_STOPF>
 8005588:	e056      	b.n	8005638 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800558a:	7bbb      	ldrb	r3, [r7, #14]
 800558c:	2b21      	cmp	r3, #33	; 0x21
 800558e:	d002      	beq.n	8005596 <HAL_I2C_EV_IRQHandler+0x232>
 8005590:	7bbb      	ldrb	r3, [r7, #14]
 8005592:	2b29      	cmp	r3, #41	; 0x29
 8005594:	d125      	bne.n	80055e2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	09db      	lsrs	r3, r3, #7
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00f      	beq.n	80055c2 <HAL_I2C_EV_IRQHandler+0x25e>
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	0a9b      	lsrs	r3, r3, #10
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <HAL_I2C_EV_IRQHandler+0x25e>
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	089b      	lsrs	r3, r3, #2
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d103      	bne.n	80055c2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 febd 	bl	800633a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055c0:	e039      	b.n	8005636 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	089b      	lsrs	r3, r3, #2
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d033      	beq.n	8005636 <HAL_I2C_EV_IRQHandler+0x2d2>
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	0a5b      	lsrs	r3, r3, #9
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d02d      	beq.n	8005636 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 feea 	bl	80063b4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055e0:	e029      	b.n	8005636 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	099b      	lsrs	r3, r3, #6
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00f      	beq.n	800560e <HAL_I2C_EV_IRQHandler+0x2aa>
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	0a9b      	lsrs	r3, r3, #10
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <HAL_I2C_EV_IRQHandler+0x2aa>
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	089b      	lsrs	r3, r3, #2
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d103      	bne.n	800560e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fef5 	bl	80063f6 <I2C_SlaveReceive_RXNE>
 800560c:	e014      	b.n	8005638 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	089b      	lsrs	r3, r3, #2
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00e      	beq.n	8005638 <HAL_I2C_EV_IRQHandler+0x2d4>
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	0a5b      	lsrs	r3, r3, #9
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d008      	beq.n	8005638 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 ff23 	bl	8006472 <I2C_SlaveReceive_BTF>
 800562c:	e004      	b.n	8005638 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800562e:	bf00      	nop
 8005630:	e002      	b.n	8005638 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005632:	bf00      	nop
 8005634:	e000      	b.n	8005638 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005636:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005638:	3720      	adds	r7, #32
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b08a      	sub	sp, #40	; 0x28
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005656:	2300      	movs	r3, #0
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005660:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	0a1b      	lsrs	r3, r3, #8
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00e      	beq.n	800568c <HAL_I2C_ER_IRQHandler+0x4e>
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	0a1b      	lsrs	r3, r3, #8
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800568a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	0a5b      	lsrs	r3, r3, #9
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00e      	beq.n	80056b6 <HAL_I2C_ER_IRQHandler+0x78>
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	0a1b      	lsrs	r3, r3, #8
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d008      	beq.n	80056b6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	f043 0302 	orr.w	r3, r3, #2
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80056b4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	0a9b      	lsrs	r3, r3, #10
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d03f      	beq.n	8005742 <HAL_I2C_ER_IRQHandler+0x104>
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	0a1b      	lsrs	r3, r3, #8
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d039      	beq.n	8005742 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80056ce:	7efb      	ldrb	r3, [r7, #27]
 80056d0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80056e8:	7ebb      	ldrb	r3, [r7, #26]
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d112      	bne.n	8005714 <HAL_I2C_ER_IRQHandler+0xd6>
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10f      	bne.n	8005714 <HAL_I2C_ER_IRQHandler+0xd6>
 80056f4:	7cfb      	ldrb	r3, [r7, #19]
 80056f6:	2b21      	cmp	r3, #33	; 0x21
 80056f8:	d008      	beq.n	800570c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80056fa:	7cfb      	ldrb	r3, [r7, #19]
 80056fc:	2b29      	cmp	r3, #41	; 0x29
 80056fe:	d005      	beq.n	800570c <HAL_I2C_ER_IRQHandler+0xce>
 8005700:	7cfb      	ldrb	r3, [r7, #19]
 8005702:	2b28      	cmp	r3, #40	; 0x28
 8005704:	d106      	bne.n	8005714 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b21      	cmp	r3, #33	; 0x21
 800570a:	d103      	bne.n	8005714 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 f847 	bl	80067a0 <I2C_Slave_AF>
 8005712:	e016      	b.n	8005742 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800571c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	f043 0304 	orr.w	r3, r3, #4
 8005724:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005726:	7efb      	ldrb	r3, [r7, #27]
 8005728:	2b10      	cmp	r3, #16
 800572a:	d002      	beq.n	8005732 <HAL_I2C_ER_IRQHandler+0xf4>
 800572c:	7efb      	ldrb	r3, [r7, #27]
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d107      	bne.n	8005742 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005740:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	0adb      	lsrs	r3, r3, #11
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00e      	beq.n	800576c <HAL_I2C_ER_IRQHandler+0x12e>
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	0a1b      	lsrs	r3, r3, #8
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d008      	beq.n	800576c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	f043 0308 	orr.w	r3, r3, #8
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800576a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	2b00      	cmp	r3, #0
 8005770:	d008      	beq.n	8005784 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f001 f87e 	bl	8006880 <I2C_ITError>
  }
}
 8005784:	bf00      	nop
 8005786:	3728      	adds	r7, #40	; 0x28
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	70fb      	strb	r3, [r7, #3]
 80057e8:	4613      	mov	r3, r2
 80057ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005872:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587e:	2b00      	cmp	r3, #0
 8005880:	d150      	bne.n	8005924 <I2C_MasterTransmit_TXE+0xc8>
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	2b21      	cmp	r3, #33	; 0x21
 8005886:	d14d      	bne.n	8005924 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b08      	cmp	r3, #8
 800588c:	d01d      	beq.n	80058ca <I2C_MasterTransmit_TXE+0x6e>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b20      	cmp	r3, #32
 8005892:	d01a      	beq.n	80058ca <I2C_MasterTransmit_TXE+0x6e>
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800589a:	d016      	beq.n	80058ca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058aa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2211      	movs	r2, #17
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff ff62 	bl	800578c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058c8:	e060      	b.n	800598c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058d8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b40      	cmp	r3, #64	; 0x40
 8005902:	d107      	bne.n	8005914 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff ff7d 	bl	800580c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005912:	e03b      	b.n	800598c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff ff35 	bl	800578c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005922:	e033      	b.n	800598c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	2b21      	cmp	r3, #33	; 0x21
 8005928:	d005      	beq.n	8005936 <I2C_MasterTransmit_TXE+0xda>
 800592a:	7bbb      	ldrb	r3, [r7, #14]
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d12d      	bne.n	800598c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b22      	cmp	r3, #34	; 0x22
 8005934:	d12a      	bne.n	800598c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d108      	bne.n	8005952 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800594e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005950:	e01c      	b.n	800598c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d103      	bne.n	8005966 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f880 	bl	8005a64 <I2C_MemoryTransmit_TXE_BTF>
}
 8005964:	e012      	b.n	800598c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	781a      	ldrb	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800598a:	e7ff      	b.n	800598c <I2C_MasterTransmit_TXE+0x130>
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b21      	cmp	r3, #33	; 0x21
 80059ac:	d156      	bne.n	8005a5c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d012      	beq.n	80059de <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	781a      	ldrb	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80059dc:	e03e      	b.n	8005a5c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d01d      	beq.n	8005a20 <I2C_MasterTransmit_BTF+0x8c>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d01a      	beq.n	8005a20 <I2C_MasterTransmit_BTF+0x8c>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059f0:	d016      	beq.n	8005a20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2211      	movs	r2, #17
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff feb7 	bl	800578c <HAL_I2C_MasterTxCpltCallback>
}
 8005a1e:	e01d      	b.n	8005a5c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff fe98 	bl	800578c <HAL_I2C_MasterTxCpltCallback>
}
 8005a5c:	bf00      	nop
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11d      	bne.n	8005ab8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d10b      	bne.n	8005a9c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a94:	1c9a      	adds	r2, r3, #2
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005a9a:	e06e      	b.n	8005b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	121b      	asrs	r3, r3, #8
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ab6:	e060      	b.n	8005b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d10b      	bne.n	8005ad8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ad6:	e050      	b.n	8005b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d14c      	bne.n	8005b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b22      	cmp	r3, #34	; 0x22
 8005ae4:	d108      	bne.n	8005af8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005af4:	601a      	str	r2, [r3, #0]
}
 8005af6:	e040      	b.n	8005b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d015      	beq.n	8005b2e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	2b21      	cmp	r3, #33	; 0x21
 8005b06:	d112      	bne.n	8005b2e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b2c:	e025      	b.n	8005b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d120      	bne.n	8005b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	2b21      	cmp	r3, #33	; 0x21
 8005b3c:	d11d      	bne.n	8005b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b4c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b5c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff fe49 	bl	800580c <HAL_I2C_MemTxCpltCallback>
}
 8005b7a:	bf00      	nop
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b22      	cmp	r3, #34	; 0x22
 8005b94:	f040 80a2 	bne.w	8005cdc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d921      	bls.n	8005bea <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	f040 8082 	bne.w	8005cdc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005be8:	e078      	b.n	8005cdc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d074      	beq.n	8005cdc <I2C_MasterReceive_RXNE+0x15a>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d002      	beq.n	8005bfe <I2C_MasterReceive_RXNE+0x7c>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d16e      	bne.n	8005cdc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 f818 	bl	8006c34 <I2C_WaitOnSTOPRequestThroughIT>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d142      	bne.n	8005c90 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c18:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c28:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691a      	ldr	r2, [r3, #16]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d10a      	bne.n	8005c7a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7ff fdd4 	bl	8005820 <HAL_I2C_MemRxCpltCallback>
}
 8005c78:	e030      	b.n	8005cdc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2212      	movs	r2, #18
 8005c86:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff fd89 	bl	80057a0 <HAL_I2C_MasterRxCpltCallback>
}
 8005c8e:	e025      	b.n	8005cdc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c9e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff fdac 	bl	8005834 <HAL_I2C_ErrorCallback>
}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d11b      	bne.n	8005d34 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d0a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691a      	ldr	r2, [r3, #16]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005d32:	e0bd      	b.n	8005eb0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d129      	bne.n	8005d92 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d00a      	beq.n	8005d6a <I2C_MasterReceive_BTF+0x86>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d007      	beq.n	8005d6a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d68:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d90:	e08e      	b.n	8005eb0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d176      	bne.n	8005e8a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d002      	beq.n	8005da8 <I2C_MasterReceive_BTF+0xc4>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d108      	bne.n	8005dba <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	e019      	b.n	8005dee <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d002      	beq.n	8005dc6 <I2C_MasterReceive_BTF+0xe2>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d108      	bne.n	8005dd8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e00a      	b.n	8005dee <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b10      	cmp	r3, #16
 8005ddc:	d007      	beq.n	8005dee <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e48:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b40      	cmp	r3, #64	; 0x40
 8005e5c:	d10a      	bne.n	8005e74 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff fcd7 	bl	8005820 <HAL_I2C_MemRxCpltCallback>
}
 8005e72:	e01d      	b.n	8005eb0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2212      	movs	r2, #18
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7ff fc8c 	bl	80057a0 <HAL_I2C_MasterRxCpltCallback>
}
 8005e88:	e012      	b.n	8005eb0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005eb0:	bf00      	nop
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d117      	bne.n	8005efc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d109      	bne.n	8005ee8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ee4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005ee6:	e067      	b.n	8005fb8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	611a      	str	r2, [r3, #16]
}
 8005efa:	e05d      	b.n	8005fb8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f04:	d133      	bne.n	8005f6e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b21      	cmp	r3, #33	; 0x21
 8005f10:	d109      	bne.n	8005f26 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f22:	611a      	str	r2, [r3, #16]
 8005f24:	e008      	b.n	8005f38 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <I2C_Master_SB+0x92>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d108      	bne.n	8005f5c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d032      	beq.n	8005fb8 <I2C_Master_SB+0x100>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d02d      	beq.n	8005fb8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f6a:	605a      	str	r2, [r3, #4]
}
 8005f6c:	e024      	b.n	8005fb8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10e      	bne.n	8005f94 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	11db      	asrs	r3, r3, #7
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f003 0306 	and.w	r3, r3, #6
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	f063 030f 	orn	r3, r3, #15
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	611a      	str	r2, [r3, #16]
}
 8005f92:	e011      	b.n	8005fb8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d10d      	bne.n	8005fb8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	11db      	asrs	r3, r3, #7
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	f003 0306 	and.w	r3, r3, #6
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f063 030e 	orn	r3, r3, #14
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	611a      	str	r2, [r3, #16]
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <I2C_Master_ADD10+0x26>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d108      	bne.n	8005ffc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00c      	beq.n	800600c <I2C_Master_ADD10+0x48>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800600a:	605a      	str	r2, [r3, #4]
  }
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006018:	b480      	push	{r7}
 800601a:	b091      	sub	sp, #68	; 0x44
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006026:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006034:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b22      	cmp	r3, #34	; 0x22
 8006040:	f040 8169 	bne.w	8006316 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10f      	bne.n	800606c <I2C_Master_ADDR+0x54>
 800604c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006050:	2b40      	cmp	r3, #64	; 0x40
 8006052:	d10b      	bne.n	800606c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006054:	2300      	movs	r3, #0
 8006056:	633b      	str	r3, [r7, #48]	; 0x30
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	633b      	str	r3, [r7, #48]	; 0x30
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	633b      	str	r3, [r7, #48]	; 0x30
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	e160      	b.n	800632e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11d      	bne.n	80060b0 <I2C_Master_ADDR+0x98>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800607c:	d118      	bne.n	80060b0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800607e:	2300      	movs	r3, #0
 8006080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006092:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	651a      	str	r2, [r3, #80]	; 0x50
 80060ae:	e13e      	b.n	800632e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d113      	bne.n	80060e2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ba:	2300      	movs	r3, #0
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	e115      	b.n	800630e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	f040 808a 	bne.w	8006202 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060f4:	d137      	bne.n	8006166 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006104:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006114:	d113      	bne.n	800613e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006124:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006126:	2300      	movs	r3, #0
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	e0e7      	b.n	800630e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800613e:	2300      	movs	r3, #0
 8006140:	623b      	str	r3, [r7, #32]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	623b      	str	r3, [r7, #32]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	623b      	str	r3, [r7, #32]
 8006152:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	e0d3      	b.n	800630e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	2b08      	cmp	r3, #8
 800616a:	d02e      	beq.n	80061ca <I2C_Master_ADDR+0x1b2>
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	2b20      	cmp	r3, #32
 8006170:	d02b      	beq.n	80061ca <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006174:	2b12      	cmp	r3, #18
 8006176:	d102      	bne.n	800617e <I2C_Master_ADDR+0x166>
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	2b01      	cmp	r3, #1
 800617c:	d125      	bne.n	80061ca <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800617e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006180:	2b04      	cmp	r3, #4
 8006182:	d00e      	beq.n	80061a2 <I2C_Master_ADDR+0x18a>
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	2b02      	cmp	r3, #2
 8006188:	d00b      	beq.n	80061a2 <I2C_Master_ADDR+0x18a>
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618c:	2b10      	cmp	r3, #16
 800618e:	d008      	beq.n	80061a2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	e007      	b.n	80061b2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b2:	2300      	movs	r3, #0
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	e0a1      	b.n	800630e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	e085      	b.n	800630e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006206:	b29b      	uxth	r3, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d14d      	bne.n	80062a8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	2b04      	cmp	r3, #4
 8006210:	d016      	beq.n	8006240 <I2C_Master_ADDR+0x228>
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	2b02      	cmp	r3, #2
 8006216:	d013      	beq.n	8006240 <I2C_Master_ADDR+0x228>
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	2b10      	cmp	r3, #16
 800621c:	d010      	beq.n	8006240 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800622c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	e007      	b.n	8006250 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800624e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800625a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800625e:	d117      	bne.n	8006290 <I2C_Master_ADDR+0x278>
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006266:	d00b      	beq.n	8006280 <I2C_Master_ADDR+0x268>
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	2b01      	cmp	r3, #1
 800626c:	d008      	beq.n	8006280 <I2C_Master_ADDR+0x268>
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	2b08      	cmp	r3, #8
 8006272:	d005      	beq.n	8006280 <I2C_Master_ADDR+0x268>
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	2b10      	cmp	r3, #16
 8006278:	d002      	beq.n	8006280 <I2C_Master_ADDR+0x268>
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	2b20      	cmp	r3, #32
 800627e:	d107      	bne.n	8006290 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800628e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006290:	2300      	movs	r3, #0
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	e032      	b.n	800630e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062b6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062c6:	d117      	bne.n	80062f8 <I2C_Master_ADDR+0x2e0>
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062ce:	d00b      	beq.n	80062e8 <I2C_Master_ADDR+0x2d0>
 80062d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d008      	beq.n	80062e8 <I2C_Master_ADDR+0x2d0>
 80062d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d005      	beq.n	80062e8 <I2C_Master_ADDR+0x2d0>
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	2b10      	cmp	r3, #16
 80062e0:	d002      	beq.n	80062e8 <I2C_Master_ADDR+0x2d0>
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d107      	bne.n	80062f8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f8:	2300      	movs	r3, #0
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006314:	e00b      	b.n	800632e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	60fb      	str	r3, [r7, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]
}
 800632c:	e7ff      	b.n	800632e <I2C_Master_ADDR+0x316>
 800632e:	bf00      	nop
 8006330:	3744      	adds	r7, #68	; 0x44
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006348:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d02b      	beq.n	80063ac <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d114      	bne.n	80063ac <I2C_SlaveTransmit_TXE+0x72>
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b29      	cmp	r3, #41	; 0x29
 8006386:	d111      	bne.n	80063ac <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006396:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2221      	movs	r2, #33	; 0x21
 800639c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2228      	movs	r2, #40	; 0x28
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff fa04 	bl	80057b4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d011      	beq.n	80063ea <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	781a      	ldrb	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006404:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d02c      	beq.n	800646a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d114      	bne.n	800646a <I2C_SlaveReceive_RXNE+0x74>
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	2b2a      	cmp	r3, #42	; 0x2a
 8006444:	d111      	bne.n	800646a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006454:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2222      	movs	r2, #34	; 0x22
 800645a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2228      	movs	r2, #40	; 0x28
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff f9af 	bl	80057c8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800646a:	bf00      	nop
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d012      	beq.n	80064aa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064d0:	2b28      	cmp	r3, #40	; 0x28
 80064d2:	d127      	bne.n	8006524 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	089b      	lsrs	r3, r3, #2
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80064f0:	2301      	movs	r3, #1
 80064f2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	09db      	lsrs	r3, r3, #7
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d103      	bne.n	8006508 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	81bb      	strh	r3, [r7, #12]
 8006506:	e002      	b.n	800650e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006516:	89ba      	ldrh	r2, [r7, #12]
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff f95d 	bl	80057dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006522:	e008      	b.n	8006536 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0202 	mvn.w	r2, #2
 800652c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006536:	bf00      	nop
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800655e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006560:	2300      	movs	r3, #0
 8006562:	60bb      	str	r3, [r7, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	60bb      	str	r3, [r7, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800658c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800659c:	d172      	bne.n	8006684 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	2b22      	cmp	r3, #34	; 0x22
 80065a2:	d002      	beq.n	80065aa <I2C_Slave_STOPF+0x6a>
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	2b2a      	cmp	r3, #42	; 0x2a
 80065a8:	d135      	bne.n	8006616 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f043 0204 	orr.w	r2, r3, #4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe fa18 	bl	8004a18 <HAL_DMA_GetState>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d049      	beq.n	8006682 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	4a69      	ldr	r2, [pc, #420]	; (8006798 <I2C_Slave_STOPF+0x258>)
 80065f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe f860 	bl	80046c0 <HAL_DMA_Abort_IT>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d03d      	beq.n	8006682 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006610:	4610      	mov	r0, r2
 8006612:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006614:	e035      	b.n	8006682 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	f043 0204 	orr.w	r2, r3, #4
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006648:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe f9e2 	bl	8004a18 <HAL_DMA_GetState>
 8006654:	4603      	mov	r3, r0
 8006656:	2b01      	cmp	r3, #1
 8006658:	d014      	beq.n	8006684 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665e:	4a4e      	ldr	r2, [pc, #312]	; (8006798 <I2C_Slave_STOPF+0x258>)
 8006660:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe f82a 	bl	80046c0 <HAL_DMA_Abort_IT>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d008      	beq.n	8006684 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800667c:	4610      	mov	r0, r2
 800667e:	4798      	blx	r3
 8006680:	e000      	b.n	8006684 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006682:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d03e      	beq.n	800670c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b04      	cmp	r3, #4
 800669a:	d112      	bne.n	80066c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691a      	ldr	r2, [r3, #16]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066cc:	2b40      	cmp	r3, #64	; 0x40
 80066ce:	d112      	bne.n	80066f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691a      	ldr	r2, [r3, #16]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	f043 0204 	orr.w	r2, r3, #4
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f8b3 	bl	8006880 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800671a:	e039      	b.n	8006790 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	2b2a      	cmp	r3, #42	; 0x2a
 8006720:	d109      	bne.n	8006736 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2228      	movs	r2, #40	; 0x28
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff f849 	bl	80057c8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b28      	cmp	r3, #40	; 0x28
 8006740:	d111      	bne.n	8006766 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a15      	ldr	r2, [pc, #84]	; (800679c <I2C_Slave_STOPF+0x25c>)
 8006746:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2220      	movs	r2, #32
 8006752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff f84a 	bl	80057f8 <HAL_I2C_ListenCpltCallback>
}
 8006764:	e014      	b.n	8006790 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	2b22      	cmp	r3, #34	; 0x22
 800676c:	d002      	beq.n	8006774 <I2C_Slave_STOPF+0x234>
 800676e:	7bfb      	ldrb	r3, [r7, #15]
 8006770:	2b22      	cmp	r3, #34	; 0x22
 8006772:	d10d      	bne.n	8006790 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff f81c 	bl	80057c8 <HAL_I2C_SlaveRxCpltCallback>
}
 8006790:	bf00      	nop
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	08006ae5 	.word	0x08006ae5
 800679c:	ffff0000 	.word	0xffff0000

080067a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d002      	beq.n	80067c2 <I2C_Slave_AF+0x22>
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d129      	bne.n	8006816 <I2C_Slave_AF+0x76>
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	2b28      	cmp	r3, #40	; 0x28
 80067c6:	d126      	bne.n	8006816 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a2c      	ldr	r2, [pc, #176]	; (800687c <I2C_Slave_AF+0xdc>)
 80067cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fe fff2 	bl	80057f8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006814:	e02e      	b.n	8006874 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	2b21      	cmp	r3, #33	; 0x21
 800681a:	d126      	bne.n	800686a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a17      	ldr	r2, [pc, #92]	; (800687c <I2C_Slave_AF+0xdc>)
 8006820:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2221      	movs	r2, #33	; 0x21
 8006826:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006846:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006850:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006860:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fe ffa6 	bl	80057b4 <HAL_I2C_SlaveTxCpltCallback>
}
 8006868:	e004      	b.n	8006874 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006872:	615a      	str	r2, [r3, #20]
}
 8006874:	bf00      	nop
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	ffff0000 	.word	0xffff0000

08006880 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800688e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006896:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006898:	7bbb      	ldrb	r3, [r7, #14]
 800689a:	2b10      	cmp	r3, #16
 800689c:	d002      	beq.n	80068a4 <I2C_ITError+0x24>
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	2b40      	cmp	r3, #64	; 0x40
 80068a2:	d10a      	bne.n	80068ba <I2C_ITError+0x3a>
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	2b22      	cmp	r3, #34	; 0x22
 80068a8:	d107      	bne.n	80068ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80068c0:	2b28      	cmp	r3, #40	; 0x28
 80068c2:	d107      	bne.n	80068d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2228      	movs	r2, #40	; 0x28
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068d2:	e015      	b.n	8006900 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e2:	d00a      	beq.n	80068fa <I2C_ITError+0x7a>
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	2b60      	cmp	r3, #96	; 0x60
 80068e8:	d007      	beq.n	80068fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800690a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690e:	d162      	bne.n	80069d6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800691e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b01      	cmp	r3, #1
 800692c:	d020      	beq.n	8006970 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006932:	4a6a      	ldr	r2, [pc, #424]	; (8006adc <I2C_ITError+0x25c>)
 8006934:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693a:	4618      	mov	r0, r3
 800693c:	f7fd fec0 	bl	80046c0 <HAL_DMA_Abort_IT>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 8089 	beq.w	8006a5a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0201 	bic.w	r2, r2, #1
 8006956:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2220      	movs	r2, #32
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800696a:	4610      	mov	r0, r2
 800696c:	4798      	blx	r3
 800696e:	e074      	b.n	8006a5a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	4a59      	ldr	r2, [pc, #356]	; (8006adc <I2C_ITError+0x25c>)
 8006976:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	4618      	mov	r0, r3
 800697e:	f7fd fe9f 	bl	80046c0 <HAL_DMA_Abort_IT>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d068      	beq.n	8006a5a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d10b      	bne.n	80069ae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	b2d2      	uxtb	r2, r2
 80069a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0201 	bic.w	r2, r2, #1
 80069bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069d0:	4610      	mov	r0, r2
 80069d2:	4798      	blx	r3
 80069d4:	e041      	b.n	8006a5a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b60      	cmp	r3, #96	; 0x60
 80069e0:	d125      	bne.n	8006a2e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d10b      	bne.n	8006a16 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fe ff0e 	bl	8005848 <HAL_I2C_AbortCpltCallback>
 8006a2c:	e015      	b.n	8006a5a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	d10b      	bne.n	8006a54 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7fe feed 	bl	8005834 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10e      	bne.n	8006a88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d109      	bne.n	8006a88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d104      	bne.n	8006a88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d007      	beq.n	8006a98 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a96:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a9e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d113      	bne.n	8006ad4 <I2C_ITError+0x254>
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	2b28      	cmp	r3, #40	; 0x28
 8006ab0:	d110      	bne.n	8006ad4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a0a      	ldr	r2, [pc, #40]	; (8006ae0 <I2C_ITError+0x260>)
 8006ab6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7fe fe92 	bl	80057f8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	08006ae5 	.word	0x08006ae5
 8006ae0:	ffff0000 	.word	0xffff0000

08006ae4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006afe:	4b4b      	ldr	r3, [pc, #300]	; (8006c2c <I2C_DMAAbort+0x148>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	08db      	lsrs	r3, r3, #3
 8006b04:	4a4a      	ldr	r2, [pc, #296]	; (8006c30 <I2C_DMAAbort+0x14c>)
 8006b06:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0a:	0a1a      	lsrs	r2, r3, #8
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	00da      	lsls	r2, r3, #3
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f043 0220 	orr.w	r2, r3, #32
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006b2a:	e00a      	b.n	8006b42 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b40:	d0ea      	beq.n	8006b18 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4e:	2200      	movs	r2, #0
 8006b50:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	2200      	movs	r2, #0
 8006b60:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b70:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2200      	movs	r2, #0
 8006b76:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b84:	2200      	movs	r2, #0
 8006b86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	2200      	movs	r2, #0
 8006b96:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0201 	bic.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b60      	cmp	r3, #96	; 0x60
 8006bb2:	d10e      	bne.n	8006bd2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006bca:	6978      	ldr	r0, [r7, #20]
 8006bcc:	f7fe fe3c 	bl	8005848 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006bd0:	e027      	b.n	8006c22 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bd2:	7cfb      	ldrb	r3, [r7, #19]
 8006bd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006bd8:	2b28      	cmp	r3, #40	; 0x28
 8006bda:	d117      	bne.n	8006c0c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0201 	orr.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bfa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2228      	movs	r2, #40	; 0x28
 8006c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c0a:	e007      	b.n	8006c1c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006c1c:	6978      	ldr	r0, [r7, #20]
 8006c1e:	f7fe fe09 	bl	8005834 <HAL_I2C_ErrorCallback>
}
 8006c22:	bf00      	nop
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000018 	.word	0x20000018
 8006c30:	14f8b589 	.word	0x14f8b589

08006c34 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c40:	4b13      	ldr	r3, [pc, #76]	; (8006c90 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	08db      	lsrs	r3, r3, #3
 8006c46:	4a13      	ldr	r2, [pc, #76]	; (8006c94 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	0a1a      	lsrs	r2, r3, #8
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d107      	bne.n	8006c72 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	f043 0220 	orr.w	r2, r3, #32
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e008      	b.n	8006c84 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c80:	d0e9      	beq.n	8006c56 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	20000018 	.word	0x20000018
 8006c94:	14f8b589 	.word	0x14f8b589

08006c98 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006ca8:	d103      	bne.n	8006cb2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cb0:	e007      	b.n	8006cc2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006cba:	d102      	bne.n	8006cc2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2208      	movs	r2, #8
 8006cc0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
	...

08006cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e264      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d075      	beq.n	8006dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cee:	4ba3      	ldr	r3, [pc, #652]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 030c 	and.w	r3, r3, #12
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d00c      	beq.n	8006d14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cfa:	4ba0      	ldr	r3, [pc, #640]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d02:	2b08      	cmp	r3, #8
 8006d04:	d112      	bne.n	8006d2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d06:	4b9d      	ldr	r3, [pc, #628]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d12:	d10b      	bne.n	8006d2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d14:	4b99      	ldr	r3, [pc, #612]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d05b      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x108>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d157      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e23f      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d34:	d106      	bne.n	8006d44 <HAL_RCC_OscConfig+0x74>
 8006d36:	4b91      	ldr	r3, [pc, #580]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a90      	ldr	r2, [pc, #576]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	e01d      	b.n	8006d80 <HAL_RCC_OscConfig+0xb0>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d4c:	d10c      	bne.n	8006d68 <HAL_RCC_OscConfig+0x98>
 8006d4e:	4b8b      	ldr	r3, [pc, #556]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a8a      	ldr	r2, [pc, #552]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	4b88      	ldr	r3, [pc, #544]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a87      	ldr	r2, [pc, #540]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	e00b      	b.n	8006d80 <HAL_RCC_OscConfig+0xb0>
 8006d68:	4b84      	ldr	r3, [pc, #528]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a83      	ldr	r2, [pc, #524]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	4b81      	ldr	r3, [pc, #516]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a80      	ldr	r2, [pc, #512]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d013      	beq.n	8006db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d88:	f7fd fa06 	bl	8004198 <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d8e:	e008      	b.n	8006da2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d90:	f7fd fa02 	bl	8004198 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b64      	cmp	r3, #100	; 0x64
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e204      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006da2:	4b76      	ldr	r3, [pc, #472]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0f0      	beq.n	8006d90 <HAL_RCC_OscConfig+0xc0>
 8006dae:	e014      	b.n	8006dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db0:	f7fd f9f2 	bl	8004198 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006db8:	f7fd f9ee 	bl	8004198 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b64      	cmp	r3, #100	; 0x64
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e1f0      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dca:	4b6c      	ldr	r3, [pc, #432]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <HAL_RCC_OscConfig+0xe8>
 8006dd6:	e000      	b.n	8006dda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d063      	beq.n	8006eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006de6:	4b65      	ldr	r3, [pc, #404]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 030c 	and.w	r3, r3, #12
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00b      	beq.n	8006e0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006df2:	4b62      	ldr	r3, [pc, #392]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dfa:	2b08      	cmp	r3, #8
 8006dfc:	d11c      	bne.n	8006e38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dfe:	4b5f      	ldr	r3, [pc, #380]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d116      	bne.n	8006e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e0a:	4b5c      	ldr	r3, [pc, #368]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <HAL_RCC_OscConfig+0x152>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d001      	beq.n	8006e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e1c4      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e22:	4b56      	ldr	r3, [pc, #344]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	4952      	ldr	r1, [pc, #328]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e36:	e03a      	b.n	8006eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d020      	beq.n	8006e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e40:	4b4f      	ldr	r3, [pc, #316]	; (8006f80 <HAL_RCC_OscConfig+0x2b0>)
 8006e42:	2201      	movs	r2, #1
 8006e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e46:	f7fd f9a7 	bl	8004198 <HAL_GetTick>
 8006e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e4c:	e008      	b.n	8006e60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e4e:	f7fd f9a3 	bl	8004198 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e1a5      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e60:	4b46      	ldr	r3, [pc, #280]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0f0      	beq.n	8006e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e6c:	4b43      	ldr	r3, [pc, #268]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	4940      	ldr	r1, [pc, #256]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	600b      	str	r3, [r1, #0]
 8006e80:	e015      	b.n	8006eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e82:	4b3f      	ldr	r3, [pc, #252]	; (8006f80 <HAL_RCC_OscConfig+0x2b0>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e88:	f7fd f986 	bl	8004198 <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e8e:	e008      	b.n	8006ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e90:	f7fd f982 	bl	8004198 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e184      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ea2:	4b36      	ldr	r3, [pc, #216]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f0      	bne.n	8006e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0308 	and.w	r3, r3, #8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d030      	beq.n	8006f1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d016      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ec2:	4b30      	ldr	r3, [pc, #192]	; (8006f84 <HAL_RCC_OscConfig+0x2b4>)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec8:	f7fd f966 	bl	8004198 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ed0:	f7fd f962 	bl	8004198 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e164      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ee2:	4b26      	ldr	r3, [pc, #152]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0f0      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x200>
 8006eee:	e015      	b.n	8006f1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ef0:	4b24      	ldr	r3, [pc, #144]	; (8006f84 <HAL_RCC_OscConfig+0x2b4>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ef6:	f7fd f94f 	bl	8004198 <HAL_GetTick>
 8006efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006efc:	e008      	b.n	8006f10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006efe:	f7fd f94b 	bl	8004198 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e14d      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f10:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1f0      	bne.n	8006efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80a0 	beq.w	800706a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f2e:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10f      	bne.n	8006f5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60bb      	str	r3, [r7, #8]
 8006f3e:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	4a0e      	ldr	r2, [pc, #56]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f48:	6413      	str	r3, [r2, #64]	; 0x40
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f52:	60bb      	str	r3, [r7, #8]
 8006f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f56:	2301      	movs	r3, #1
 8006f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f5a:	4b0b      	ldr	r3, [pc, #44]	; (8006f88 <HAL_RCC_OscConfig+0x2b8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d121      	bne.n	8006faa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f66:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <HAL_RCC_OscConfig+0x2b8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a07      	ldr	r2, [pc, #28]	; (8006f88 <HAL_RCC_OscConfig+0x2b8>)
 8006f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f72:	f7fd f911 	bl	8004198 <HAL_GetTick>
 8006f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f78:	e011      	b.n	8006f9e <HAL_RCC_OscConfig+0x2ce>
 8006f7a:	bf00      	nop
 8006f7c:	40023800 	.word	0x40023800
 8006f80:	42470000 	.word	0x42470000
 8006f84:	42470e80 	.word	0x42470e80
 8006f88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f8c:	f7fd f904 	bl	8004198 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e106      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f9e:	4b85      	ldr	r3, [pc, #532]	; (80071b4 <HAL_RCC_OscConfig+0x4e4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f0      	beq.n	8006f8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d106      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x2f0>
 8006fb2:	4b81      	ldr	r3, [pc, #516]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8006fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb6:	4a80      	ldr	r2, [pc, #512]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8006fb8:	f043 0301 	orr.w	r3, r3, #1
 8006fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006fbe:	e01c      	b.n	8006ffa <HAL_RCC_OscConfig+0x32a>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	2b05      	cmp	r3, #5
 8006fc6:	d10c      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x312>
 8006fc8:	4b7b      	ldr	r3, [pc, #492]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8006fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fcc:	4a7a      	ldr	r2, [pc, #488]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8006fce:	f043 0304 	orr.w	r3, r3, #4
 8006fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006fd4:	4b78      	ldr	r3, [pc, #480]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8006fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd8:	4a77      	ldr	r2, [pc, #476]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe0:	e00b      	b.n	8006ffa <HAL_RCC_OscConfig+0x32a>
 8006fe2:	4b75      	ldr	r3, [pc, #468]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe6:	4a74      	ldr	r2, [pc, #464]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8006fe8:	f023 0301 	bic.w	r3, r3, #1
 8006fec:	6713      	str	r3, [r2, #112]	; 0x70
 8006fee:	4b72      	ldr	r3, [pc, #456]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff2:	4a71      	ldr	r2, [pc, #452]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8006ff4:	f023 0304 	bic.w	r3, r3, #4
 8006ff8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d015      	beq.n	800702e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007002:	f7fd f8c9 	bl	8004198 <HAL_GetTick>
 8007006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007008:	e00a      	b.n	8007020 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800700a:	f7fd f8c5 	bl	8004198 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	f241 3288 	movw	r2, #5000	; 0x1388
 8007018:	4293      	cmp	r3, r2
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e0c5      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007020:	4b65      	ldr	r3, [pc, #404]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8007022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0ee      	beq.n	800700a <HAL_RCC_OscConfig+0x33a>
 800702c:	e014      	b.n	8007058 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800702e:	f7fd f8b3 	bl	8004198 <HAL_GetTick>
 8007032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007034:	e00a      	b.n	800704c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007036:	f7fd f8af 	bl	8004198 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	f241 3288 	movw	r2, #5000	; 0x1388
 8007044:	4293      	cmp	r3, r2
 8007046:	d901      	bls.n	800704c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e0af      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800704c:	4b5a      	ldr	r3, [pc, #360]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 800704e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1ee      	bne.n	8007036 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007058:	7dfb      	ldrb	r3, [r7, #23]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d105      	bne.n	800706a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800705e:	4b56      	ldr	r3, [pc, #344]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	4a55      	ldr	r2, [pc, #340]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8007064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007068:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 809b 	beq.w	80071aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007074:	4b50      	ldr	r3, [pc, #320]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 030c 	and.w	r3, r3, #12
 800707c:	2b08      	cmp	r3, #8
 800707e:	d05c      	beq.n	800713a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d141      	bne.n	800710c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007088:	4b4c      	ldr	r3, [pc, #304]	; (80071bc <HAL_RCC_OscConfig+0x4ec>)
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800708e:	f7fd f883 	bl	8004198 <HAL_GetTick>
 8007092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007094:	e008      	b.n	80070a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007096:	f7fd f87f 	bl	8004198 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e081      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070a8:	4b43      	ldr	r3, [pc, #268]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1f0      	bne.n	8007096 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	019b      	lsls	r3, r3, #6
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	085b      	lsrs	r3, r3, #1
 80070cc:	3b01      	subs	r3, #1
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	061b      	lsls	r3, r3, #24
 80070d8:	4937      	ldr	r1, [pc, #220]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070de:	4b37      	ldr	r3, [pc, #220]	; (80071bc <HAL_RCC_OscConfig+0x4ec>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e4:	f7fd f858 	bl	8004198 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070ec:	f7fd f854 	bl	8004198 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e056      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070fe:	4b2e      	ldr	r3, [pc, #184]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0f0      	beq.n	80070ec <HAL_RCC_OscConfig+0x41c>
 800710a:	e04e      	b.n	80071aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800710c:	4b2b      	ldr	r3, [pc, #172]	; (80071bc <HAL_RCC_OscConfig+0x4ec>)
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007112:	f7fd f841 	bl	8004198 <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800711a:	f7fd f83d 	bl	8004198 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e03f      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800712c:	4b22      	ldr	r3, [pc, #136]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f0      	bne.n	800711a <HAL_RCC_OscConfig+0x44a>
 8007138:	e037      	b.n	80071aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d101      	bne.n	8007146 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e032      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007146:	4b1c      	ldr	r3, [pc, #112]	; (80071b8 <HAL_RCC_OscConfig+0x4e8>)
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d028      	beq.n	80071a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800715e:	429a      	cmp	r2, r3
 8007160:	d121      	bne.n	80071a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800716c:	429a      	cmp	r2, r3
 800716e:	d11a      	bne.n	80071a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007176:	4013      	ands	r3, r2
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800717c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800717e:	4293      	cmp	r3, r2
 8007180:	d111      	bne.n	80071a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718c:	085b      	lsrs	r3, r3, #1
 800718e:	3b01      	subs	r3, #1
 8007190:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007192:	429a      	cmp	r2, r3
 8007194:	d107      	bne.n	80071a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d001      	beq.n	80071aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e000      	b.n	80071ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40007000 	.word	0x40007000
 80071b8:	40023800 	.word	0x40023800
 80071bc:	42470060 	.word	0x42470060

080071c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e0cc      	b.n	800736e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071d4:	4b68      	ldr	r3, [pc, #416]	; (8007378 <HAL_RCC_ClockConfig+0x1b8>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0307 	and.w	r3, r3, #7
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d90c      	bls.n	80071fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071e2:	4b65      	ldr	r3, [pc, #404]	; (8007378 <HAL_RCC_ClockConfig+0x1b8>)
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ea:	4b63      	ldr	r3, [pc, #396]	; (8007378 <HAL_RCC_ClockConfig+0x1b8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d001      	beq.n	80071fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e0b8      	b.n	800736e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d020      	beq.n	800724a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d005      	beq.n	8007220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007214:	4b59      	ldr	r3, [pc, #356]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	4a58      	ldr	r2, [pc, #352]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 800721a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800721e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	2b00      	cmp	r3, #0
 800722a:	d005      	beq.n	8007238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800722c:	4b53      	ldr	r3, [pc, #332]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	4a52      	ldr	r2, [pc, #328]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 8007232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007238:	4b50      	ldr	r3, [pc, #320]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	494d      	ldr	r1, [pc, #308]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 8007246:	4313      	orrs	r3, r2
 8007248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d044      	beq.n	80072e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d107      	bne.n	800726e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800725e:	4b47      	ldr	r3, [pc, #284]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d119      	bne.n	800729e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e07f      	b.n	800736e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2b02      	cmp	r3, #2
 8007274:	d003      	beq.n	800727e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800727a:	2b03      	cmp	r3, #3
 800727c:	d107      	bne.n	800728e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800727e:	4b3f      	ldr	r3, [pc, #252]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d109      	bne.n	800729e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e06f      	b.n	800736e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800728e:	4b3b      	ldr	r3, [pc, #236]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e067      	b.n	800736e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800729e:	4b37      	ldr	r3, [pc, #220]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f023 0203 	bic.w	r2, r3, #3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	4934      	ldr	r1, [pc, #208]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072b0:	f7fc ff72 	bl	8004198 <HAL_GetTick>
 80072b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072b6:	e00a      	b.n	80072ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072b8:	f7fc ff6e 	bl	8004198 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e04f      	b.n	800736e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ce:	4b2b      	ldr	r3, [pc, #172]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f003 020c 	and.w	r2, r3, #12
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	429a      	cmp	r2, r3
 80072de:	d1eb      	bne.n	80072b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072e0:	4b25      	ldr	r3, [pc, #148]	; (8007378 <HAL_RCC_ClockConfig+0x1b8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d20c      	bcs.n	8007308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ee:	4b22      	ldr	r3, [pc, #136]	; (8007378 <HAL_RCC_ClockConfig+0x1b8>)
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072f6:	4b20      	ldr	r3, [pc, #128]	; (8007378 <HAL_RCC_ClockConfig+0x1b8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	429a      	cmp	r2, r3
 8007302:	d001      	beq.n	8007308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e032      	b.n	800736e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d008      	beq.n	8007326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007314:	4b19      	ldr	r3, [pc, #100]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	4916      	ldr	r1, [pc, #88]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 8007322:	4313      	orrs	r3, r2
 8007324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0308 	and.w	r3, r3, #8
 800732e:	2b00      	cmp	r3, #0
 8007330:	d009      	beq.n	8007346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007332:	4b12      	ldr	r3, [pc, #72]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	490e      	ldr	r1, [pc, #56]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 8007342:	4313      	orrs	r3, r2
 8007344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007346:	f000 f821 	bl	800738c <HAL_RCC_GetSysClockFreq>
 800734a:	4602      	mov	r2, r0
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <HAL_RCC_ClockConfig+0x1bc>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	091b      	lsrs	r3, r3, #4
 8007352:	f003 030f 	and.w	r3, r3, #15
 8007356:	490a      	ldr	r1, [pc, #40]	; (8007380 <HAL_RCC_ClockConfig+0x1c0>)
 8007358:	5ccb      	ldrb	r3, [r1, r3]
 800735a:	fa22 f303 	lsr.w	r3, r2, r3
 800735e:	4a09      	ldr	r2, [pc, #36]	; (8007384 <HAL_RCC_ClockConfig+0x1c4>)
 8007360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007362:	4b09      	ldr	r3, [pc, #36]	; (8007388 <HAL_RCC_ClockConfig+0x1c8>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f7fc fed2 	bl	8004110 <HAL_InitTick>

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	40023c00 	.word	0x40023c00
 800737c:	40023800 	.word	0x40023800
 8007380:	08009a68 	.word	0x08009a68
 8007384:	20000018 	.word	0x20000018
 8007388:	2000001c 	.word	0x2000001c

0800738c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800738c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	2300      	movs	r3, #0
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	2300      	movs	r3, #0
 800739e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073a4:	4b67      	ldr	r3, [pc, #412]	; (8007544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f003 030c 	and.w	r3, r3, #12
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d00d      	beq.n	80073cc <HAL_RCC_GetSysClockFreq+0x40>
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	f200 80bd 	bhi.w	8007530 <HAL_RCC_GetSysClockFreq+0x1a4>
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <HAL_RCC_GetSysClockFreq+0x34>
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d003      	beq.n	80073c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80073be:	e0b7      	b.n	8007530 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073c0:	4b61      	ldr	r3, [pc, #388]	; (8007548 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073c2:	60bb      	str	r3, [r7, #8]
       break;
 80073c4:	e0b7      	b.n	8007536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073c6:	4b61      	ldr	r3, [pc, #388]	; (800754c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80073c8:	60bb      	str	r3, [r7, #8]
      break;
 80073ca:	e0b4      	b.n	8007536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073cc:	4b5d      	ldr	r3, [pc, #372]	; (8007544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073d6:	4b5b      	ldr	r3, [pc, #364]	; (8007544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d04d      	beq.n	800747e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073e2:	4b58      	ldr	r3, [pc, #352]	; (8007544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	099b      	lsrs	r3, r3, #6
 80073e8:	461a      	mov	r2, r3
 80073ea:	f04f 0300 	mov.w	r3, #0
 80073ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80073f2:	f04f 0100 	mov.w	r1, #0
 80073f6:	ea02 0800 	and.w	r8, r2, r0
 80073fa:	ea03 0901 	and.w	r9, r3, r1
 80073fe:	4640      	mov	r0, r8
 8007400:	4649      	mov	r1, r9
 8007402:	f04f 0200 	mov.w	r2, #0
 8007406:	f04f 0300 	mov.w	r3, #0
 800740a:	014b      	lsls	r3, r1, #5
 800740c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007410:	0142      	lsls	r2, r0, #5
 8007412:	4610      	mov	r0, r2
 8007414:	4619      	mov	r1, r3
 8007416:	ebb0 0008 	subs.w	r0, r0, r8
 800741a:	eb61 0109 	sbc.w	r1, r1, r9
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	018b      	lsls	r3, r1, #6
 8007428:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800742c:	0182      	lsls	r2, r0, #6
 800742e:	1a12      	subs	r2, r2, r0
 8007430:	eb63 0301 	sbc.w	r3, r3, r1
 8007434:	f04f 0000 	mov.w	r0, #0
 8007438:	f04f 0100 	mov.w	r1, #0
 800743c:	00d9      	lsls	r1, r3, #3
 800743e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007442:	00d0      	lsls	r0, r2, #3
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	eb12 0208 	adds.w	r2, r2, r8
 800744c:	eb43 0309 	adc.w	r3, r3, r9
 8007450:	f04f 0000 	mov.w	r0, #0
 8007454:	f04f 0100 	mov.w	r1, #0
 8007458:	0259      	lsls	r1, r3, #9
 800745a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800745e:	0250      	lsls	r0, r2, #9
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4610      	mov	r0, r2
 8007466:	4619      	mov	r1, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	461a      	mov	r2, r3
 800746c:	f04f 0300 	mov.w	r3, #0
 8007470:	f7f9 fc9c 	bl	8000dac <__aeabi_uldivmod>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4613      	mov	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	e04a      	b.n	8007514 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800747e:	4b31      	ldr	r3, [pc, #196]	; (8007544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	099b      	lsrs	r3, r3, #6
 8007484:	461a      	mov	r2, r3
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800748e:	f04f 0100 	mov.w	r1, #0
 8007492:	ea02 0400 	and.w	r4, r2, r0
 8007496:	ea03 0501 	and.w	r5, r3, r1
 800749a:	4620      	mov	r0, r4
 800749c:	4629      	mov	r1, r5
 800749e:	f04f 0200 	mov.w	r2, #0
 80074a2:	f04f 0300 	mov.w	r3, #0
 80074a6:	014b      	lsls	r3, r1, #5
 80074a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074ac:	0142      	lsls	r2, r0, #5
 80074ae:	4610      	mov	r0, r2
 80074b0:	4619      	mov	r1, r3
 80074b2:	1b00      	subs	r0, r0, r4
 80074b4:	eb61 0105 	sbc.w	r1, r1, r5
 80074b8:	f04f 0200 	mov.w	r2, #0
 80074bc:	f04f 0300 	mov.w	r3, #0
 80074c0:	018b      	lsls	r3, r1, #6
 80074c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074c6:	0182      	lsls	r2, r0, #6
 80074c8:	1a12      	subs	r2, r2, r0
 80074ca:	eb63 0301 	sbc.w	r3, r3, r1
 80074ce:	f04f 0000 	mov.w	r0, #0
 80074d2:	f04f 0100 	mov.w	r1, #0
 80074d6:	00d9      	lsls	r1, r3, #3
 80074d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074dc:	00d0      	lsls	r0, r2, #3
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	1912      	adds	r2, r2, r4
 80074e4:	eb45 0303 	adc.w	r3, r5, r3
 80074e8:	f04f 0000 	mov.w	r0, #0
 80074ec:	f04f 0100 	mov.w	r1, #0
 80074f0:	0299      	lsls	r1, r3, #10
 80074f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80074f6:	0290      	lsls	r0, r2, #10
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	4610      	mov	r0, r2
 80074fe:	4619      	mov	r1, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	461a      	mov	r2, r3
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	f7f9 fc50 	bl	8000dac <__aeabi_uldivmod>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4613      	mov	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007514:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	0c1b      	lsrs	r3, r3, #16
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	3301      	adds	r3, #1
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	fbb2 f3f3 	udiv	r3, r2, r3
 800752c:	60bb      	str	r3, [r7, #8]
      break;
 800752e:	e002      	b.n	8007536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007530:	4b05      	ldr	r3, [pc, #20]	; (8007548 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007532:	60bb      	str	r3, [r7, #8]
      break;
 8007534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007536:	68bb      	ldr	r3, [r7, #8]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007542:	bf00      	nop
 8007544:	40023800 	.word	0x40023800
 8007548:	00f42400 	.word	0x00f42400
 800754c:	007a1200 	.word	0x007a1200

08007550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007550:	b480      	push	{r7}
 8007552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007554:	4b03      	ldr	r3, [pc, #12]	; (8007564 <HAL_RCC_GetHCLKFreq+0x14>)
 8007556:	681b      	ldr	r3, [r3, #0]
}
 8007558:	4618      	mov	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	20000018 	.word	0x20000018

08007568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800756c:	f7ff fff0 	bl	8007550 <HAL_RCC_GetHCLKFreq>
 8007570:	4602      	mov	r2, r0
 8007572:	4b05      	ldr	r3, [pc, #20]	; (8007588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	0a9b      	lsrs	r3, r3, #10
 8007578:	f003 0307 	and.w	r3, r3, #7
 800757c:	4903      	ldr	r1, [pc, #12]	; (800758c <HAL_RCC_GetPCLK1Freq+0x24>)
 800757e:	5ccb      	ldrb	r3, [r1, r3]
 8007580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007584:	4618      	mov	r0, r3
 8007586:	bd80      	pop	{r7, pc}
 8007588:	40023800 	.word	0x40023800
 800758c:	08009a78 	.word	0x08009a78

08007590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007594:	f7ff ffdc 	bl	8007550 <HAL_RCC_GetHCLKFreq>
 8007598:	4602      	mov	r2, r0
 800759a:	4b05      	ldr	r3, [pc, #20]	; (80075b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	0b5b      	lsrs	r3, r3, #13
 80075a0:	f003 0307 	and.w	r3, r3, #7
 80075a4:	4903      	ldr	r1, [pc, #12]	; (80075b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075a6:	5ccb      	ldrb	r3, [r1, r3]
 80075a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	40023800 	.word	0x40023800
 80075b4:	08009a78 	.word	0x08009a78

080075b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e041      	b.n	800764e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d106      	bne.n	80075e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fc fb58 	bl	8003c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f000 fdda 	bl	80081b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b01      	cmp	r3, #1
 800766a:	d001      	beq.n	8007670 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e03c      	b.n	80076ea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a1e      	ldr	r2, [pc, #120]	; (80076f8 <HAL_TIM_Base_Start+0xa0>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d018      	beq.n	80076b4 <HAL_TIM_Base_Start+0x5c>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800768a:	d013      	beq.n	80076b4 <HAL_TIM_Base_Start+0x5c>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a1a      	ldr	r2, [pc, #104]	; (80076fc <HAL_TIM_Base_Start+0xa4>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d00e      	beq.n	80076b4 <HAL_TIM_Base_Start+0x5c>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a19      	ldr	r2, [pc, #100]	; (8007700 <HAL_TIM_Base_Start+0xa8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d009      	beq.n	80076b4 <HAL_TIM_Base_Start+0x5c>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a17      	ldr	r2, [pc, #92]	; (8007704 <HAL_TIM_Base_Start+0xac>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d004      	beq.n	80076b4 <HAL_TIM_Base_Start+0x5c>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a16      	ldr	r2, [pc, #88]	; (8007708 <HAL_TIM_Base_Start+0xb0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d111      	bne.n	80076d8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b06      	cmp	r3, #6
 80076c4:	d010      	beq.n	80076e8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0201 	orr.w	r2, r2, #1
 80076d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d6:	e007      	b.n	80076e8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0201 	orr.w	r2, r2, #1
 80076e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40010000 	.word	0x40010000
 80076fc:	40000400 	.word	0x40000400
 8007700:	40000800 	.word	0x40000800
 8007704:	40000c00 	.word	0x40000c00
 8007708:	40014000 	.word	0x40014000

0800770c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b01      	cmp	r3, #1
 800771e:	d001      	beq.n	8007724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e044      	b.n	80077ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0201 	orr.w	r2, r2, #1
 800773a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a1e      	ldr	r2, [pc, #120]	; (80077bc <HAL_TIM_Base_Start_IT+0xb0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d018      	beq.n	8007778 <HAL_TIM_Base_Start_IT+0x6c>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774e:	d013      	beq.n	8007778 <HAL_TIM_Base_Start_IT+0x6c>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a1a      	ldr	r2, [pc, #104]	; (80077c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00e      	beq.n	8007778 <HAL_TIM_Base_Start_IT+0x6c>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a19      	ldr	r2, [pc, #100]	; (80077c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d009      	beq.n	8007778 <HAL_TIM_Base_Start_IT+0x6c>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d004      	beq.n	8007778 <HAL_TIM_Base_Start_IT+0x6c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a16      	ldr	r2, [pc, #88]	; (80077cc <HAL_TIM_Base_Start_IT+0xc0>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d111      	bne.n	800779c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b06      	cmp	r3, #6
 8007788:	d010      	beq.n	80077ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f042 0201 	orr.w	r2, r2, #1
 8007798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800779a:	e007      	b.n	80077ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f042 0201 	orr.w	r2, r2, #1
 80077aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	40010000 	.word	0x40010000
 80077c0:	40000400 	.word	0x40000400
 80077c4:	40000800 	.word	0x40000800
 80077c8:	40000c00 	.word	0x40000c00
 80077cc:	40014000 	.word	0x40014000

080077d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e041      	b.n	8007866 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f839 	bl	800786e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3304      	adds	r3, #4
 800780c:	4619      	mov	r1, r3
 800780e:	4610      	mov	r0, r2
 8007810:	f000 fcce 	bl	80081b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
	...

08007884 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d109      	bne.n	80078a8 <HAL_TIM_PWM_Start+0x24>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b01      	cmp	r3, #1
 800789e:	bf14      	ite	ne
 80078a0:	2301      	movne	r3, #1
 80078a2:	2300      	moveq	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	e022      	b.n	80078ee <HAL_TIM_PWM_Start+0x6a>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d109      	bne.n	80078c2 <HAL_TIM_PWM_Start+0x3e>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	bf14      	ite	ne
 80078ba:	2301      	movne	r3, #1
 80078bc:	2300      	moveq	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	e015      	b.n	80078ee <HAL_TIM_PWM_Start+0x6a>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d109      	bne.n	80078dc <HAL_TIM_PWM_Start+0x58>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	bf14      	ite	ne
 80078d4:	2301      	movne	r3, #1
 80078d6:	2300      	moveq	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	e008      	b.n	80078ee <HAL_TIM_PWM_Start+0x6a>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	bf14      	ite	ne
 80078e8:	2301      	movne	r3, #1
 80078ea:	2300      	moveq	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e068      	b.n	80079c8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d104      	bne.n	8007906 <HAL_TIM_PWM_Start+0x82>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007904:	e013      	b.n	800792e <HAL_TIM_PWM_Start+0xaa>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b04      	cmp	r3, #4
 800790a:	d104      	bne.n	8007916 <HAL_TIM_PWM_Start+0x92>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007914:	e00b      	b.n	800792e <HAL_TIM_PWM_Start+0xaa>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b08      	cmp	r3, #8
 800791a:	d104      	bne.n	8007926 <HAL_TIM_PWM_Start+0xa2>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007924:	e003      	b.n	800792e <HAL_TIM_PWM_Start+0xaa>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2202      	movs	r2, #2
 800792a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2201      	movs	r2, #1
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	4618      	mov	r0, r3
 8007938:	f000 fee0 	bl	80086fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a23      	ldr	r2, [pc, #140]	; (80079d0 <HAL_TIM_PWM_Start+0x14c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d107      	bne.n	8007956 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007954:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a1d      	ldr	r2, [pc, #116]	; (80079d0 <HAL_TIM_PWM_Start+0x14c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d018      	beq.n	8007992 <HAL_TIM_PWM_Start+0x10e>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007968:	d013      	beq.n	8007992 <HAL_TIM_PWM_Start+0x10e>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a19      	ldr	r2, [pc, #100]	; (80079d4 <HAL_TIM_PWM_Start+0x150>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00e      	beq.n	8007992 <HAL_TIM_PWM_Start+0x10e>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <HAL_TIM_PWM_Start+0x154>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d009      	beq.n	8007992 <HAL_TIM_PWM_Start+0x10e>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a16      	ldr	r2, [pc, #88]	; (80079dc <HAL_TIM_PWM_Start+0x158>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d004      	beq.n	8007992 <HAL_TIM_PWM_Start+0x10e>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a14      	ldr	r2, [pc, #80]	; (80079e0 <HAL_TIM_PWM_Start+0x15c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d111      	bne.n	80079b6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b06      	cmp	r3, #6
 80079a2:	d010      	beq.n	80079c6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0201 	orr.w	r2, r2, #1
 80079b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b4:	e007      	b.n	80079c6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0201 	orr.w	r2, r2, #1
 80079c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	40010000 	.word	0x40010000
 80079d4:	40000400 	.word	0x40000400
 80079d8:	40000800 	.word	0x40000800
 80079dc:	40000c00 	.word	0x40000c00
 80079e0:	40014000 	.word	0x40014000

080079e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e097      	b.n	8007b28 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d106      	bne.n	8007a12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7fc f8f9 	bl	8003c04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2202      	movs	r2, #2
 8007a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6812      	ldr	r2, [r2, #0]
 8007a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a28:	f023 0307 	bic.w	r3, r3, #7
 8007a2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	3304      	adds	r3, #4
 8007a36:	4619      	mov	r1, r3
 8007a38:	4610      	mov	r0, r2
 8007a3a:	f000 fbb9 	bl	80081b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a66:	f023 0303 	bic.w	r3, r3, #3
 8007a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	021b      	lsls	r3, r3, #8
 8007a76:	4313      	orrs	r3, r2
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007a84:	f023 030c 	bic.w	r3, r3, #12
 8007a88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	021b      	lsls	r3, r3, #8
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	011a      	lsls	r2, r3, #4
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	031b      	lsls	r3, r3, #12
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007ac2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007aca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d110      	bne.n	8007b82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d102      	bne.n	8007b6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b66:	7b7b      	ldrb	r3, [r7, #13]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d001      	beq.n	8007b70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e069      	b.n	8007c44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b80:	e031      	b.n	8007be6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d110      	bne.n	8007baa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d102      	bne.n	8007b94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b8e:	7b3b      	ldrb	r3, [r7, #12]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d001      	beq.n	8007b98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e055      	b.n	8007c44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ba8:	e01d      	b.n	8007be6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d108      	bne.n	8007bc2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d105      	bne.n	8007bc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bb6:	7b7b      	ldrb	r3, [r7, #13]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d102      	bne.n	8007bc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007bbc:	7b3b      	ldrb	r3, [r7, #12]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d001      	beq.n	8007bc6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e03e      	b.n	8007c44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2202      	movs	r2, #2
 8007be2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <HAL_TIM_Encoder_Start+0xc4>
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d008      	beq.n	8007c04 <HAL_TIM_Encoder_Start+0xd4>
 8007bf2:	e00f      	b.n	8007c14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 fd7d 	bl	80086fc <TIM_CCxChannelCmd>
      break;
 8007c02:	e016      	b.n	8007c32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	2104      	movs	r1, #4
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 fd75 	bl	80086fc <TIM_CCxChannelCmd>
      break;
 8007c12:	e00e      	b.n	8007c32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fd6d 	bl	80086fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2201      	movs	r2, #1
 8007c28:	2104      	movs	r1, #4
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fd66 	bl	80086fc <TIM_CCxChannelCmd>
      break;
 8007c30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0201 	orr.w	r2, r2, #1
 8007c40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d122      	bne.n	8007ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d11b      	bne.n	8007ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f06f 0202 	mvn.w	r2, #2
 8007c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa70 	bl	8008174 <HAL_TIM_IC_CaptureCallback>
 8007c94:	e005      	b.n	8007ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fa62 	bl	8008160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fa73 	bl	8008188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	d122      	bne.n	8007cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d11b      	bne.n	8007cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f06f 0204 	mvn.w	r2, #4
 8007ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa46 	bl	8008174 <HAL_TIM_IC_CaptureCallback>
 8007ce8:	e005      	b.n	8007cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa38 	bl	8008160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fa49 	bl	8008188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f003 0308 	and.w	r3, r3, #8
 8007d06:	2b08      	cmp	r3, #8
 8007d08:	d122      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f003 0308 	and.w	r3, r3, #8
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d11b      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f06f 0208 	mvn.w	r2, #8
 8007d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2204      	movs	r2, #4
 8007d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	f003 0303 	and.w	r3, r3, #3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fa1c 	bl	8008174 <HAL_TIM_IC_CaptureCallback>
 8007d3c:	e005      	b.n	8007d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fa0e 	bl	8008160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fa1f 	bl	8008188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	f003 0310 	and.w	r3, r3, #16
 8007d5a:	2b10      	cmp	r3, #16
 8007d5c:	d122      	bne.n	8007da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	f003 0310 	and.w	r3, r3, #16
 8007d68:	2b10      	cmp	r3, #16
 8007d6a:	d11b      	bne.n	8007da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f06f 0210 	mvn.w	r2, #16
 8007d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2208      	movs	r2, #8
 8007d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f9f2 	bl	8008174 <HAL_TIM_IC_CaptureCallback>
 8007d90:	e005      	b.n	8007d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f9e4 	bl	8008160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f9f5 	bl	8008188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d10e      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d107      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f06f 0201 	mvn.w	r2, #1
 8007dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7f9 fe5a 	bl	8001a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dda:	2b80      	cmp	r3, #128	; 0x80
 8007ddc:	d10e      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de8:	2b80      	cmp	r3, #128	; 0x80
 8007dea:	d107      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fd1e 	bl	8008838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e06:	2b40      	cmp	r3, #64	; 0x40
 8007e08:	d10e      	bne.n	8007e28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e14:	2b40      	cmp	r3, #64	; 0x40
 8007e16:	d107      	bne.n	8007e28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f9ba 	bl	800819c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b20      	cmp	r3, #32
 8007e34:	d10e      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f003 0320 	and.w	r3, r3, #32
 8007e40:	2b20      	cmp	r3, #32
 8007e42:	d107      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f06f 0220 	mvn.w	r2, #32
 8007e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fce8 	bl	8008824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d101      	bne.n	8007e76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007e72:	2302      	movs	r3, #2
 8007e74:	e0ac      	b.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b0c      	cmp	r3, #12
 8007e82:	f200 809f 	bhi.w	8007fc4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007e86:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8c:	08007ec1 	.word	0x08007ec1
 8007e90:	08007fc5 	.word	0x08007fc5
 8007e94:	08007fc5 	.word	0x08007fc5
 8007e98:	08007fc5 	.word	0x08007fc5
 8007e9c:	08007f01 	.word	0x08007f01
 8007ea0:	08007fc5 	.word	0x08007fc5
 8007ea4:	08007fc5 	.word	0x08007fc5
 8007ea8:	08007fc5 	.word	0x08007fc5
 8007eac:	08007f43 	.word	0x08007f43
 8007eb0:	08007fc5 	.word	0x08007fc5
 8007eb4:	08007fc5 	.word	0x08007fc5
 8007eb8:	08007fc5 	.word	0x08007fc5
 8007ebc:	08007f83 	.word	0x08007f83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68b9      	ldr	r1, [r7, #8]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 f9f2 	bl	80082b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	699a      	ldr	r2, [r3, #24]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0208 	orr.w	r2, r2, #8
 8007eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	699a      	ldr	r2, [r3, #24]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0204 	bic.w	r2, r2, #4
 8007eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6999      	ldr	r1, [r3, #24]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	691a      	ldr	r2, [r3, #16]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	619a      	str	r2, [r3, #24]
      break;
 8007efe:	e062      	b.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68b9      	ldr	r1, [r7, #8]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fa38 	bl	800837c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	699a      	ldr	r2, [r3, #24]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	699a      	ldr	r2, [r3, #24]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6999      	ldr	r1, [r3, #24]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	021a      	lsls	r2, r3, #8
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	619a      	str	r2, [r3, #24]
      break;
 8007f40:	e041      	b.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fa83 	bl	8008454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69da      	ldr	r2, [r3, #28]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f042 0208 	orr.w	r2, r2, #8
 8007f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	69da      	ldr	r2, [r3, #28]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0204 	bic.w	r2, r2, #4
 8007f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	69d9      	ldr	r1, [r3, #28]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	691a      	ldr	r2, [r3, #16]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	61da      	str	r2, [r3, #28]
      break;
 8007f80:	e021      	b.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68b9      	ldr	r1, [r7, #8]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 facd 	bl	8008528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	69da      	ldr	r2, [r3, #28]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	69da      	ldr	r2, [r3, #28]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69d9      	ldr	r1, [r3, #28]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	021a      	lsls	r2, r3, #8
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	61da      	str	r2, [r3, #28]
      break;
 8007fc2:	e000      	b.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007fc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <HAL_TIM_ConfigClockSource+0x18>
 8007fec:	2302      	movs	r3, #2
 8007fee:	e0b3      	b.n	8008158 <HAL_TIM_ConfigClockSource+0x180>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800800e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008016:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008028:	d03e      	beq.n	80080a8 <HAL_TIM_ConfigClockSource+0xd0>
 800802a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800802e:	f200 8087 	bhi.w	8008140 <HAL_TIM_ConfigClockSource+0x168>
 8008032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008036:	f000 8085 	beq.w	8008144 <HAL_TIM_ConfigClockSource+0x16c>
 800803a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800803e:	d87f      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x168>
 8008040:	2b70      	cmp	r3, #112	; 0x70
 8008042:	d01a      	beq.n	800807a <HAL_TIM_ConfigClockSource+0xa2>
 8008044:	2b70      	cmp	r3, #112	; 0x70
 8008046:	d87b      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x168>
 8008048:	2b60      	cmp	r3, #96	; 0x60
 800804a:	d050      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0x116>
 800804c:	2b60      	cmp	r3, #96	; 0x60
 800804e:	d877      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x168>
 8008050:	2b50      	cmp	r3, #80	; 0x50
 8008052:	d03c      	beq.n	80080ce <HAL_TIM_ConfigClockSource+0xf6>
 8008054:	2b50      	cmp	r3, #80	; 0x50
 8008056:	d873      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x168>
 8008058:	2b40      	cmp	r3, #64	; 0x40
 800805a:	d058      	beq.n	800810e <HAL_TIM_ConfigClockSource+0x136>
 800805c:	2b40      	cmp	r3, #64	; 0x40
 800805e:	d86f      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x168>
 8008060:	2b30      	cmp	r3, #48	; 0x30
 8008062:	d064      	beq.n	800812e <HAL_TIM_ConfigClockSource+0x156>
 8008064:	2b30      	cmp	r3, #48	; 0x30
 8008066:	d86b      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x168>
 8008068:	2b20      	cmp	r3, #32
 800806a:	d060      	beq.n	800812e <HAL_TIM_ConfigClockSource+0x156>
 800806c:	2b20      	cmp	r3, #32
 800806e:	d867      	bhi.n	8008140 <HAL_TIM_ConfigClockSource+0x168>
 8008070:	2b00      	cmp	r3, #0
 8008072:	d05c      	beq.n	800812e <HAL_TIM_ConfigClockSource+0x156>
 8008074:	2b10      	cmp	r3, #16
 8008076:	d05a      	beq.n	800812e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008078:	e062      	b.n	8008140 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	6899      	ldr	r1, [r3, #8]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	f000 fb17 	bl	80086bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800809c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	609a      	str	r2, [r3, #8]
      break;
 80080a6:	e04e      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	6899      	ldr	r1, [r3, #8]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	f000 fb00 	bl	80086bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689a      	ldr	r2, [r3, #8]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080ca:	609a      	str	r2, [r3, #8]
      break;
 80080cc:	e03b      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	6859      	ldr	r1, [r3, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	461a      	mov	r2, r3
 80080dc:	f000 fa74 	bl	80085c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2150      	movs	r1, #80	; 0x50
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 facd 	bl	8008686 <TIM_ITRx_SetConfig>
      break;
 80080ec:	e02b      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6818      	ldr	r0, [r3, #0]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	6859      	ldr	r1, [r3, #4]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f000 fa93 	bl	8008626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2160      	movs	r1, #96	; 0x60
 8008106:	4618      	mov	r0, r3
 8008108:	f000 fabd 	bl	8008686 <TIM_ITRx_SetConfig>
      break;
 800810c:	e01b      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6818      	ldr	r0, [r3, #0]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	6859      	ldr	r1, [r3, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	461a      	mov	r2, r3
 800811c:	f000 fa54 	bl	80085c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2140      	movs	r1, #64	; 0x40
 8008126:	4618      	mov	r0, r3
 8008128:	f000 faad 	bl	8008686 <TIM_ITRx_SetConfig>
      break;
 800812c:	e00b      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4619      	mov	r1, r3
 8008138:	4610      	mov	r0, r2
 800813a:	f000 faa4 	bl	8008686 <TIM_ITRx_SetConfig>
        break;
 800813e:	e002      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008140:	bf00      	nop
 8008142:	e000      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008144:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a34      	ldr	r2, [pc, #208]	; (8008294 <TIM_Base_SetConfig+0xe4>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d00f      	beq.n	80081e8 <TIM_Base_SetConfig+0x38>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ce:	d00b      	beq.n	80081e8 <TIM_Base_SetConfig+0x38>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a31      	ldr	r2, [pc, #196]	; (8008298 <TIM_Base_SetConfig+0xe8>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d007      	beq.n	80081e8 <TIM_Base_SetConfig+0x38>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a30      	ldr	r2, [pc, #192]	; (800829c <TIM_Base_SetConfig+0xec>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d003      	beq.n	80081e8 <TIM_Base_SetConfig+0x38>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a2f      	ldr	r2, [pc, #188]	; (80082a0 <TIM_Base_SetConfig+0xf0>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d108      	bne.n	80081fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a25      	ldr	r2, [pc, #148]	; (8008294 <TIM_Base_SetConfig+0xe4>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d01b      	beq.n	800823a <TIM_Base_SetConfig+0x8a>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008208:	d017      	beq.n	800823a <TIM_Base_SetConfig+0x8a>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a22      	ldr	r2, [pc, #136]	; (8008298 <TIM_Base_SetConfig+0xe8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d013      	beq.n	800823a <TIM_Base_SetConfig+0x8a>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a21      	ldr	r2, [pc, #132]	; (800829c <TIM_Base_SetConfig+0xec>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d00f      	beq.n	800823a <TIM_Base_SetConfig+0x8a>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a20      	ldr	r2, [pc, #128]	; (80082a0 <TIM_Base_SetConfig+0xf0>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d00b      	beq.n	800823a <TIM_Base_SetConfig+0x8a>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a1f      	ldr	r2, [pc, #124]	; (80082a4 <TIM_Base_SetConfig+0xf4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d007      	beq.n	800823a <TIM_Base_SetConfig+0x8a>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a1e      	ldr	r2, [pc, #120]	; (80082a8 <TIM_Base_SetConfig+0xf8>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d003      	beq.n	800823a <TIM_Base_SetConfig+0x8a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a1d      	ldr	r2, [pc, #116]	; (80082ac <TIM_Base_SetConfig+0xfc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d108      	bne.n	800824c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a08      	ldr	r2, [pc, #32]	; (8008294 <TIM_Base_SetConfig+0xe4>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d103      	bne.n	8008280 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	691a      	ldr	r2, [r3, #16]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	615a      	str	r2, [r3, #20]
}
 8008286:	bf00      	nop
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	40010000 	.word	0x40010000
 8008298:	40000400 	.word	0x40000400
 800829c:	40000800 	.word	0x40000800
 80082a0:	40000c00 	.word	0x40000c00
 80082a4:	40014000 	.word	0x40014000
 80082a8:	40014400 	.word	0x40014400
 80082ac:	40014800 	.word	0x40014800

080082b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	f023 0201 	bic.w	r2, r3, #1
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f023 0303 	bic.w	r3, r3, #3
 80082e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f023 0302 	bic.w	r3, r3, #2
 80082f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	4313      	orrs	r3, r2
 8008302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a1c      	ldr	r2, [pc, #112]	; (8008378 <TIM_OC1_SetConfig+0xc8>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d10c      	bne.n	8008326 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f023 0308 	bic.w	r3, r3, #8
 8008312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	4313      	orrs	r3, r2
 800831c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f023 0304 	bic.w	r3, r3, #4
 8008324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a13      	ldr	r2, [pc, #76]	; (8008378 <TIM_OC1_SetConfig+0xc8>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d111      	bne.n	8008352 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800833c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	4313      	orrs	r3, r2
 8008350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	621a      	str	r2, [r3, #32]
}
 800836c:	bf00      	nop
 800836e:	371c      	adds	r7, #28
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	40010000 	.word	0x40010000

0800837c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	f023 0210 	bic.w	r2, r3, #16
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f023 0320 	bic.w	r3, r3, #32
 80083c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a1e      	ldr	r2, [pc, #120]	; (8008450 <TIM_OC2_SetConfig+0xd4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d10d      	bne.n	80083f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	011b      	lsls	r3, r3, #4
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a15      	ldr	r2, [pc, #84]	; (8008450 <TIM_OC2_SetConfig+0xd4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d113      	bne.n	8008428 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800840e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4313      	orrs	r3, r2
 800841a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	4313      	orrs	r3, r2
 8008426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	621a      	str	r2, [r3, #32]
}
 8008442:	bf00      	nop
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	40010000 	.word	0x40010000

08008454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008454:	b480      	push	{r7}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 0303 	bic.w	r3, r3, #3
 800848a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800849c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	021b      	lsls	r3, r3, #8
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a1d      	ldr	r2, [pc, #116]	; (8008524 <TIM_OC3_SetConfig+0xd0>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d10d      	bne.n	80084ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	021b      	lsls	r3, r3, #8
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a14      	ldr	r2, [pc, #80]	; (8008524 <TIM_OC3_SetConfig+0xd0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d113      	bne.n	80084fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	621a      	str	r2, [r3, #32]
}
 8008518:	bf00      	nop
 800851a:	371c      	adds	r7, #28
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	40010000 	.word	0x40010000

08008528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800855e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	021b      	lsls	r3, r3, #8
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	4313      	orrs	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	031b      	lsls	r3, r3, #12
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	4313      	orrs	r3, r2
 800857e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a10      	ldr	r2, [pc, #64]	; (80085c4 <TIM_OC4_SetConfig+0x9c>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d109      	bne.n	800859c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800858e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	019b      	lsls	r3, r3, #6
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	4313      	orrs	r3, r2
 800859a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	621a      	str	r2, [r3, #32]
}
 80085b6:	bf00      	nop
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	40010000 	.word	0x40010000

080085c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	f023 0201 	bic.w	r2, r3, #1
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f023 030a 	bic.w	r3, r3, #10
 8008604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	621a      	str	r2, [r3, #32]
}
 800861a:	bf00      	nop
 800861c:	371c      	adds	r7, #28
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008626:	b480      	push	{r7}
 8008628:	b087      	sub	sp, #28
 800862a:	af00      	add	r7, sp, #0
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	60b9      	str	r1, [r7, #8]
 8008630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	f023 0210 	bic.w	r2, r3, #16
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6a1b      	ldr	r3, [r3, #32]
 8008648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	031b      	lsls	r3, r3, #12
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4313      	orrs	r3, r2
 800865a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008662:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	011b      	lsls	r3, r3, #4
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	4313      	orrs	r3, r2
 800866c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	621a      	str	r2, [r3, #32]
}
 800867a:	bf00      	nop
 800867c:	371c      	adds	r7, #28
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008686:	b480      	push	{r7}
 8008688:	b085      	sub	sp, #20
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f043 0307 	orr.w	r3, r3, #7
 80086a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	609a      	str	r2, [r3, #8]
}
 80086b0:	bf00      	nop
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	021a      	lsls	r2, r3, #8
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	431a      	orrs	r2, r3
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	609a      	str	r2, [r3, #8]
}
 80086f0:	bf00      	nop
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f003 031f 	and.w	r3, r3, #31
 800870e:	2201      	movs	r2, #1
 8008710:	fa02 f303 	lsl.w	r3, r2, r3
 8008714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a1a      	ldr	r2, [r3, #32]
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	43db      	mvns	r3, r3
 800871e:	401a      	ands	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a1a      	ldr	r2, [r3, #32]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f003 031f 	and.w	r3, r3, #31
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	fa01 f303 	lsl.w	r3, r1, r3
 8008734:	431a      	orrs	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	621a      	str	r2, [r3, #32]
}
 800873a:	bf00      	nop
 800873c:	371c      	adds	r7, #28
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
	...

08008748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008758:	2b01      	cmp	r3, #1
 800875a:	d101      	bne.n	8008760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800875c:	2302      	movs	r3, #2
 800875e:	e050      	b.n	8008802 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a1c      	ldr	r2, [pc, #112]	; (8008810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d018      	beq.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ac:	d013      	beq.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a18      	ldr	r2, [pc, #96]	; (8008814 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00e      	beq.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a16      	ldr	r2, [pc, #88]	; (8008818 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d009      	beq.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a15      	ldr	r2, [pc, #84]	; (800881c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d004      	beq.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a13      	ldr	r2, [pc, #76]	; (8008820 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d10c      	bne.n	80087f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	40010000 	.word	0x40010000
 8008814:	40000400 	.word	0x40000400
 8008818:	40000800 	.word	0x40000800
 800881c:	40000c00 	.word	0x40000c00
 8008820:	40014000 	.word	0x40014000

08008824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e03f      	b.n	80088de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d106      	bne.n	8008878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7fb fa84 	bl	8003d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2224      	movs	r2, #36	; 0x24
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800888e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fd51 	bl	8009338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	691a      	ldr	r2, [r3, #16]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	695a      	ldr	r2, [r3, #20]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68da      	ldr	r2, [r3, #12]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2220      	movs	r2, #32
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2220      	movs	r2, #32
 80088d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	4613      	mov	r3, r2
 80088f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b20      	cmp	r3, #32
 8008900:	d153      	bne.n	80089aa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <HAL_UART_Transmit_DMA+0x26>
 8008908:	88fb      	ldrh	r3, [r7, #6]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e04c      	b.n	80089ac <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008918:	2b01      	cmp	r3, #1
 800891a:	d101      	bne.n	8008920 <HAL_UART_Transmit_DMA+0x38>
 800891c:	2302      	movs	r3, #2
 800891e:	e045      	b.n	80089ac <HAL_UART_Transmit_DMA+0xc4>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	88fa      	ldrh	r2, [r7, #6]
 8008932:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	88fa      	ldrh	r2, [r7, #6]
 8008938:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2221      	movs	r2, #33	; 0x21
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894c:	4a19      	ldr	r2, [pc, #100]	; (80089b4 <HAL_UART_Transmit_DMA+0xcc>)
 800894e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008954:	4a18      	ldr	r2, [pc, #96]	; (80089b8 <HAL_UART_Transmit_DMA+0xd0>)
 8008956:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895c:	4a17      	ldr	r2, [pc, #92]	; (80089bc <HAL_UART_Transmit_DMA+0xd4>)
 800895e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008964:	2200      	movs	r2, #0
 8008966:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008968:	f107 0308 	add.w	r3, r7, #8
 800896c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	6819      	ldr	r1, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3304      	adds	r3, #4
 800897c:	461a      	mov	r2, r3
 800897e:	88fb      	ldrh	r3, [r7, #6]
 8008980:	f7fb fdd6 	bl	8004530 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800898c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	695a      	ldr	r2, [r3, #20]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089a4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e000      	b.n	80089ac <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80089aa:	2302      	movs	r3, #2
  }
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	08008df5 	.word	0x08008df5
 80089b8:	08008e47 	.word	0x08008e47
 80089bc:	08008f2f 	.word	0x08008f2f

080089c0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	4613      	mov	r3, r2
 80089cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b20      	cmp	r3, #32
 80089d8:	d11d      	bne.n	8008a16 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <HAL_UART_Receive_DMA+0x26>
 80089e0:	88fb      	ldrh	r3, [r7, #6]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e016      	b.n	8008a18 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_UART_Receive_DMA+0x38>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e00f      	b.n	8008a18 <HAL_UART_Receive_DMA+0x58>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008a06:	88fb      	ldrh	r3, [r7, #6]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	68b9      	ldr	r1, [r7, #8]
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 fad9 	bl	8008fc4 <UART_Start_Receive_DMA>
 8008a12:	4603      	mov	r3, r0
 8008a14:	e000      	b.n	8008a18 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008a16:	2302      	movs	r3, #2
  }
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08a      	sub	sp, #40	; 0x28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008a40:	2300      	movs	r3, #0
 8008a42:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	f003 030f 	and.w	r3, r3, #15
 8008a4e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10d      	bne.n	8008a72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	f003 0320 	and.w	r3, r3, #32
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d008      	beq.n	8008a72 <HAL_UART_IRQHandler+0x52>
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	f003 0320 	and.w	r3, r3, #32
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fbcd 	bl	800920a <UART_Receive_IT>
      return;
 8008a70:	e17c      	b.n	8008d6c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 80b1 	beq.w	8008bdc <HAL_UART_IRQHandler+0x1bc>
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d105      	bne.n	8008a90 <HAL_UART_IRQHandler+0x70>
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 80a6 	beq.w	8008bdc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00a      	beq.n	8008ab0 <HAL_UART_IRQHandler+0x90>
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa8:	f043 0201 	orr.w	r2, r3, #1
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	f003 0304 	and.w	r3, r3, #4
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <HAL_UART_IRQHandler+0xb0>
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac8:	f043 0202 	orr.w	r2, r3, #2
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00a      	beq.n	8008af0 <HAL_UART_IRQHandler+0xd0>
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d005      	beq.n	8008af0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae8:	f043 0204 	orr.w	r2, r3, #4
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	f003 0308 	and.w	r3, r3, #8
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00f      	beq.n	8008b1a <HAL_UART_IRQHandler+0xfa>
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d104      	bne.n	8008b0e <HAL_UART_IRQHandler+0xee>
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	f043 0208 	orr.w	r2, r3, #8
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 811f 	beq.w	8008d62 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	f003 0320 	and.w	r3, r3, #32
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d007      	beq.n	8008b3e <HAL_UART_IRQHandler+0x11e>
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	f003 0320 	and.w	r3, r3, #32
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fb66 	bl	800920a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b48:	2b40      	cmp	r3, #64	; 0x40
 8008b4a:	bf0c      	ite	eq
 8008b4c:	2301      	moveq	r3, #1
 8008b4e:	2300      	movne	r3, #0
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b58:	f003 0308 	and.w	r3, r3, #8
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d102      	bne.n	8008b66 <HAL_UART_IRQHandler+0x146>
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d031      	beq.n	8008bca <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 faa6 	bl	80090b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b76:	2b40      	cmp	r3, #64	; 0x40
 8008b78:	d123      	bne.n	8008bc2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695a      	ldr	r2, [r3, #20]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b88:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d013      	beq.n	8008bba <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b96:	4a77      	ldr	r2, [pc, #476]	; (8008d74 <HAL_UART_IRQHandler+0x354>)
 8008b98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fb fd8e 	bl	80046c0 <HAL_DMA_Abort_IT>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d016      	beq.n	8008bd8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb8:	e00e      	b.n	8008bd8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f904 	bl	8008dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc0:	e00a      	b.n	8008bd8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f900 	bl	8008dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc8:	e006      	b.n	8008bd8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f8fc 	bl	8008dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008bd6:	e0c4      	b.n	8008d62 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd8:	bf00      	nop
    return;
 8008bda:	e0c2      	b.n	8008d62 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	f040 80a2 	bne.w	8008d2a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	f003 0310 	and.w	r3, r3, #16
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 809c 	beq.w	8008d2a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	f003 0310 	and.w	r3, r3, #16
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 8096 	beq.w	8008d2a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60fb      	str	r3, [r7, #12]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	60fb      	str	r3, [r7, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1e:	2b40      	cmp	r3, #64	; 0x40
 8008c20:	d14f      	bne.n	8008cc2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008c2c:	8a3b      	ldrh	r3, [r7, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 8099 	beq.w	8008d66 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c38:	8a3a      	ldrh	r2, [r7, #16]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	f080 8093 	bcs.w	8008d66 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	8a3a      	ldrh	r2, [r7, #16]
 8008c44:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c50:	d02b      	beq.n	8008caa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68da      	ldr	r2, [r3, #12]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c60:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	695a      	ldr	r2, [r3, #20]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f022 0201 	bic.w	r2, r2, #1
 8008c70:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	695a      	ldr	r2, [r3, #20]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c80:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2220      	movs	r2, #32
 8008c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68da      	ldr	r2, [r3, #12]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0210 	bic.w	r2, r2, #16
 8008c9e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7fb fc9b 	bl	80045e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f88e 	bl	8008ddc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008cc0:	e051      	b.n	8008d66 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d047      	beq.n	8008d6a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008cda:	8a7b      	ldrh	r3, [r7, #18]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d044      	beq.n	8008d6a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68da      	ldr	r2, [r3, #12]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008cee:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	695a      	ldr	r2, [r3, #20]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 0201 	bic.w	r2, r2, #1
 8008cfe:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68da      	ldr	r2, [r3, #12]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f022 0210 	bic.w	r2, r2, #16
 8008d1c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d1e:	8a7b      	ldrh	r3, [r7, #18]
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f85a 	bl	8008ddc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008d28:	e01f      	b.n	8008d6a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d008      	beq.n	8008d46 <HAL_UART_IRQHandler+0x326>
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f9fb 	bl	800913a <UART_Transmit_IT>
    return;
 8008d44:	e012      	b.n	8008d6c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00d      	beq.n	8008d6c <HAL_UART_IRQHandler+0x34c>
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d008      	beq.n	8008d6c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fa3d 	bl	80091da <UART_EndTransmit_IT>
    return;
 8008d60:	e004      	b.n	8008d6c <HAL_UART_IRQHandler+0x34c>
    return;
 8008d62:	bf00      	nop
 8008d64:	e002      	b.n	8008d6c <HAL_UART_IRQHandler+0x34c>
      return;
 8008d66:	bf00      	nop
 8008d68:	e000      	b.n	8008d6c <HAL_UART_IRQHandler+0x34c>
      return;
 8008d6a:	bf00      	nop
  }
}
 8008d6c:	3728      	adds	r7, #40	; 0x28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	08009113 	.word	0x08009113

08008d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e00:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d113      	bne.n	8008e38 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	695a      	ldr	r2, [r3, #20]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e24:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e34:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e36:	e002      	b.n	8008e3e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f7ff ff9d 	bl	8008d78 <HAL_UART_TxCpltCallback>
}
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f7ff ff99 	bl	8008d8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e5a:	bf00      	nop
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d12a      	bne.n	8008ed4 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68da      	ldr	r2, [r3, #12]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e92:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	695a      	ldr	r2, [r3, #20]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f022 0201 	bic.w	r2, r2, #1
 8008ea2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	695a      	ldr	r2, [r3, #20]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eb2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d107      	bne.n	8008ed4 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 0210 	bic.w	r2, r2, #16
 8008ed2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d106      	bne.n	8008eea <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f7ff ff7a 	bl	8008ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ee8:	e002      	b.n	8008ef0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f7ff ff58 	bl	8008da0 <HAL_UART_RxCpltCallback>
}
 8008ef0:	bf00      	nop
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f04:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d108      	bne.n	8008f20 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	4619      	mov	r1, r3
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f7ff ff5f 	bl	8008ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f1e:	e002      	b.n	8008f26 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7ff ff47 	bl	8008db4 <HAL_UART_RxHalfCpltCallback>
}
 8008f26:	bf00      	nop
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f4a:	2b80      	cmp	r3, #128	; 0x80
 8008f4c:	bf0c      	ite	eq
 8008f4e:	2301      	moveq	r3, #1
 8008f50:	2300      	movne	r3, #0
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b21      	cmp	r3, #33	; 0x21
 8008f60:	d108      	bne.n	8008f74 <UART_DMAError+0x46>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008f6e:	68b8      	ldr	r0, [r7, #8]
 8008f70:	f000 f88c 	bl	800908c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7e:	2b40      	cmp	r3, #64	; 0x40
 8008f80:	bf0c      	ite	eq
 8008f82:	2301      	moveq	r3, #1
 8008f84:	2300      	movne	r3, #0
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b22      	cmp	r3, #34	; 0x22
 8008f94:	d108      	bne.n	8008fa8 <UART_DMAError+0x7a>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d005      	beq.n	8008fa8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008fa2:	68b8      	ldr	r0, [r7, #8]
 8008fa4:	f000 f888 	bl	80090b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	f043 0210 	orr.w	r2, r3, #16
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fb4:	68b8      	ldr	r0, [r7, #8]
 8008fb6:	f7ff ff07 	bl	8008dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fba:	bf00      	nop
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
	...

08008fc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	88fa      	ldrh	r2, [r7, #6]
 8008fdc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2222      	movs	r2, #34	; 0x22
 8008fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff0:	4a23      	ldr	r2, [pc, #140]	; (8009080 <UART_Start_Receive_DMA+0xbc>)
 8008ff2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff8:	4a22      	ldr	r2, [pc, #136]	; (8009084 <UART_Start_Receive_DMA+0xc0>)
 8008ffa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009000:	4a21      	ldr	r2, [pc, #132]	; (8009088 <UART_Start_Receive_DMA+0xc4>)
 8009002:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009008:	2200      	movs	r2, #0
 800900a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800900c:	f107 0308 	add.w	r3, r7, #8
 8009010:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3304      	adds	r3, #4
 800901c:	4619      	mov	r1, r3
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	88fb      	ldrh	r3, [r7, #6]
 8009024:	f7fb fa84 	bl	8004530 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009028:	2300      	movs	r3, #0
 800902a:	613b      	str	r3, [r7, #16]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	613b      	str	r3, [r7, #16]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	613b      	str	r3, [r7, #16]
 800903c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68da      	ldr	r2, [r3, #12]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009054:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	695a      	ldr	r2, [r3, #20]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f042 0201 	orr.w	r2, r2, #1
 8009064:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	695a      	ldr	r2, [r3, #20]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009074:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	08008e63 	.word	0x08008e63
 8009084:	08008ef9 	.word	0x08008ef9
 8009088:	08008f2f 	.word	0x08008f2f

0800908c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68da      	ldr	r2, [r3, #12]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80090a2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68da      	ldr	r2, [r3, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80090ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	695a      	ldr	r2, [r3, #20]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f022 0201 	bic.w	r2, r2, #1
 80090de:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d107      	bne.n	80090f8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0210 	bic.w	r2, r2, #16
 80090f6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009106:	bf00      	nop
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f7ff fe4b 	bl	8008dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009132:	bf00      	nop
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800913a:	b480      	push	{r7}
 800913c:	b085      	sub	sp, #20
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b21      	cmp	r3, #33	; 0x21
 800914c:	d13e      	bne.n	80091cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009156:	d114      	bne.n	8009182 <UART_Transmit_IT+0x48>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d110      	bne.n	8009182 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009174:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	1c9a      	adds	r2, r3, #2
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	621a      	str	r2, [r3, #32]
 8009180:	e008      	b.n	8009194 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	1c59      	adds	r1, r3, #1
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	6211      	str	r1, [r2, #32]
 800918c:	781a      	ldrb	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009198:	b29b      	uxth	r3, r3
 800919a:	3b01      	subs	r3, #1
 800919c:	b29b      	uxth	r3, r3
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	4619      	mov	r1, r3
 80091a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10f      	bne.n	80091c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	e000      	b.n	80091ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091cc:	2302      	movs	r3, #2
  }
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2220      	movs	r2, #32
 80091f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff fdbc 	bl	8008d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b22      	cmp	r3, #34	; 0x22
 800921c:	f040 8087 	bne.w	800932e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009228:	d117      	bne.n	800925a <UART_Receive_IT+0x50>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d113      	bne.n	800925a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009232:	2300      	movs	r3, #0
 8009234:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	b29b      	uxth	r3, r3
 8009244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009248:	b29a      	uxth	r2, r3
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	1c9a      	adds	r2, r3, #2
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	629a      	str	r2, [r3, #40]	; 0x28
 8009258:	e026      	b.n	80092a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009260:	2300      	movs	r3, #0
 8009262:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800926c:	d007      	beq.n	800927e <UART_Receive_IT+0x74>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10a      	bne.n	800928c <UART_Receive_IT+0x82>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d106      	bne.n	800928c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	b2da      	uxtb	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	701a      	strb	r2, [r3, #0]
 800928a:	e008      	b.n	800929e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	b2db      	uxtb	r3, r3
 8009294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009298:	b2da      	uxtb	r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	3b01      	subs	r3, #1
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	4619      	mov	r1, r3
 80092b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d136      	bne.n	800932a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f022 0220 	bic.w	r2, r2, #32
 80092ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	695a      	ldr	r2, [r3, #20]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f022 0201 	bic.w	r2, r2, #1
 80092ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2220      	movs	r2, #32
 80092f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d10e      	bne.n	800931a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 0210 	bic.w	r2, r2, #16
 800930a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff fd62 	bl	8008ddc <HAL_UARTEx_RxEventCallback>
 8009318:	e002      	b.n	8009320 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff fd40 	bl	8008da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	e002      	b.n	8009330 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	e000      	b.n	8009330 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800932e:	2302      	movs	r3, #2
  }
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	b09f      	sub	sp, #124	; 0x7c
 800933e:	af00      	add	r7, sp, #0
 8009340:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800934c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934e:	68d9      	ldr	r1, [r3, #12]
 8009350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	ea40 0301 	orr.w	r3, r0, r1
 8009358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800935a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	431a      	orrs	r2, r3
 8009364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	431a      	orrs	r2, r3
 800936a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	4313      	orrs	r3, r2
 8009370:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800937c:	f021 010c 	bic.w	r1, r1, #12
 8009380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009386:	430b      	orrs	r3, r1
 8009388:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800938a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	695b      	ldr	r3, [r3, #20]
 8009390:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009396:	6999      	ldr	r1, [r3, #24]
 8009398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	ea40 0301 	orr.w	r3, r0, r1
 80093a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	4bc5      	ldr	r3, [pc, #788]	; (80096bc <UART_SetConfig+0x384>)
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d004      	beq.n	80093b6 <UART_SetConfig+0x7e>
 80093ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	4bc3      	ldr	r3, [pc, #780]	; (80096c0 <UART_SetConfig+0x388>)
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d103      	bne.n	80093be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093b6:	f7fe f8eb 	bl	8007590 <HAL_RCC_GetPCLK2Freq>
 80093ba:	6778      	str	r0, [r7, #116]	; 0x74
 80093bc:	e002      	b.n	80093c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093be:	f7fe f8d3 	bl	8007568 <HAL_RCC_GetPCLK1Freq>
 80093c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093cc:	f040 80b6 	bne.w	800953c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093d2:	461c      	mov	r4, r3
 80093d4:	f04f 0500 	mov.w	r5, #0
 80093d8:	4622      	mov	r2, r4
 80093da:	462b      	mov	r3, r5
 80093dc:	1891      	adds	r1, r2, r2
 80093de:	6439      	str	r1, [r7, #64]	; 0x40
 80093e0:	415b      	adcs	r3, r3
 80093e2:	647b      	str	r3, [r7, #68]	; 0x44
 80093e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80093e8:	1912      	adds	r2, r2, r4
 80093ea:	eb45 0303 	adc.w	r3, r5, r3
 80093ee:	f04f 0000 	mov.w	r0, #0
 80093f2:	f04f 0100 	mov.w	r1, #0
 80093f6:	00d9      	lsls	r1, r3, #3
 80093f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093fc:	00d0      	lsls	r0, r2, #3
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
 8009402:	1911      	adds	r1, r2, r4
 8009404:	6639      	str	r1, [r7, #96]	; 0x60
 8009406:	416b      	adcs	r3, r5
 8009408:	667b      	str	r3, [r7, #100]	; 0x64
 800940a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	461a      	mov	r2, r3
 8009410:	f04f 0300 	mov.w	r3, #0
 8009414:	1891      	adds	r1, r2, r2
 8009416:	63b9      	str	r1, [r7, #56]	; 0x38
 8009418:	415b      	adcs	r3, r3
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800941c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009420:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009424:	f7f7 fcc2 	bl	8000dac <__aeabi_uldivmod>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4ba5      	ldr	r3, [pc, #660]	; (80096c4 <UART_SetConfig+0x38c>)
 800942e:	fba3 2302 	umull	r2, r3, r3, r2
 8009432:	095b      	lsrs	r3, r3, #5
 8009434:	011e      	lsls	r6, r3, #4
 8009436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009438:	461c      	mov	r4, r3
 800943a:	f04f 0500 	mov.w	r5, #0
 800943e:	4622      	mov	r2, r4
 8009440:	462b      	mov	r3, r5
 8009442:	1891      	adds	r1, r2, r2
 8009444:	6339      	str	r1, [r7, #48]	; 0x30
 8009446:	415b      	adcs	r3, r3
 8009448:	637b      	str	r3, [r7, #52]	; 0x34
 800944a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800944e:	1912      	adds	r2, r2, r4
 8009450:	eb45 0303 	adc.w	r3, r5, r3
 8009454:	f04f 0000 	mov.w	r0, #0
 8009458:	f04f 0100 	mov.w	r1, #0
 800945c:	00d9      	lsls	r1, r3, #3
 800945e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009462:	00d0      	lsls	r0, r2, #3
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	1911      	adds	r1, r2, r4
 800946a:	65b9      	str	r1, [r7, #88]	; 0x58
 800946c:	416b      	adcs	r3, r5
 800946e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	461a      	mov	r2, r3
 8009476:	f04f 0300 	mov.w	r3, #0
 800947a:	1891      	adds	r1, r2, r2
 800947c:	62b9      	str	r1, [r7, #40]	; 0x28
 800947e:	415b      	adcs	r3, r3
 8009480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009486:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800948a:	f7f7 fc8f 	bl	8000dac <__aeabi_uldivmod>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4b8c      	ldr	r3, [pc, #560]	; (80096c4 <UART_SetConfig+0x38c>)
 8009494:	fba3 1302 	umull	r1, r3, r3, r2
 8009498:	095b      	lsrs	r3, r3, #5
 800949a:	2164      	movs	r1, #100	; 0x64
 800949c:	fb01 f303 	mul.w	r3, r1, r3
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	3332      	adds	r3, #50	; 0x32
 80094a6:	4a87      	ldr	r2, [pc, #540]	; (80096c4 <UART_SetConfig+0x38c>)
 80094a8:	fba2 2303 	umull	r2, r3, r2, r3
 80094ac:	095b      	lsrs	r3, r3, #5
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094b4:	441e      	add	r6, r3
 80094b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094b8:	4618      	mov	r0, r3
 80094ba:	f04f 0100 	mov.w	r1, #0
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	1894      	adds	r4, r2, r2
 80094c4:	623c      	str	r4, [r7, #32]
 80094c6:	415b      	adcs	r3, r3
 80094c8:	627b      	str	r3, [r7, #36]	; 0x24
 80094ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094ce:	1812      	adds	r2, r2, r0
 80094d0:	eb41 0303 	adc.w	r3, r1, r3
 80094d4:	f04f 0400 	mov.w	r4, #0
 80094d8:	f04f 0500 	mov.w	r5, #0
 80094dc:	00dd      	lsls	r5, r3, #3
 80094de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094e2:	00d4      	lsls	r4, r2, #3
 80094e4:	4622      	mov	r2, r4
 80094e6:	462b      	mov	r3, r5
 80094e8:	1814      	adds	r4, r2, r0
 80094ea:	653c      	str	r4, [r7, #80]	; 0x50
 80094ec:	414b      	adcs	r3, r1
 80094ee:	657b      	str	r3, [r7, #84]	; 0x54
 80094f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	461a      	mov	r2, r3
 80094f6:	f04f 0300 	mov.w	r3, #0
 80094fa:	1891      	adds	r1, r2, r2
 80094fc:	61b9      	str	r1, [r7, #24]
 80094fe:	415b      	adcs	r3, r3
 8009500:	61fb      	str	r3, [r7, #28]
 8009502:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009506:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800950a:	f7f7 fc4f 	bl	8000dac <__aeabi_uldivmod>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4b6c      	ldr	r3, [pc, #432]	; (80096c4 <UART_SetConfig+0x38c>)
 8009514:	fba3 1302 	umull	r1, r3, r3, r2
 8009518:	095b      	lsrs	r3, r3, #5
 800951a:	2164      	movs	r1, #100	; 0x64
 800951c:	fb01 f303 	mul.w	r3, r1, r3
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	3332      	adds	r3, #50	; 0x32
 8009526:	4a67      	ldr	r2, [pc, #412]	; (80096c4 <UART_SetConfig+0x38c>)
 8009528:	fba2 2303 	umull	r2, r3, r2, r3
 800952c:	095b      	lsrs	r3, r3, #5
 800952e:	f003 0207 	and.w	r2, r3, #7
 8009532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4432      	add	r2, r6
 8009538:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800953a:	e0b9      	b.n	80096b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800953c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800953e:	461c      	mov	r4, r3
 8009540:	f04f 0500 	mov.w	r5, #0
 8009544:	4622      	mov	r2, r4
 8009546:	462b      	mov	r3, r5
 8009548:	1891      	adds	r1, r2, r2
 800954a:	6139      	str	r1, [r7, #16]
 800954c:	415b      	adcs	r3, r3
 800954e:	617b      	str	r3, [r7, #20]
 8009550:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009554:	1912      	adds	r2, r2, r4
 8009556:	eb45 0303 	adc.w	r3, r5, r3
 800955a:	f04f 0000 	mov.w	r0, #0
 800955e:	f04f 0100 	mov.w	r1, #0
 8009562:	00d9      	lsls	r1, r3, #3
 8009564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009568:	00d0      	lsls	r0, r2, #3
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	eb12 0804 	adds.w	r8, r2, r4
 8009572:	eb43 0905 	adc.w	r9, r3, r5
 8009576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	4618      	mov	r0, r3
 800957c:	f04f 0100 	mov.w	r1, #0
 8009580:	f04f 0200 	mov.w	r2, #0
 8009584:	f04f 0300 	mov.w	r3, #0
 8009588:	008b      	lsls	r3, r1, #2
 800958a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800958e:	0082      	lsls	r2, r0, #2
 8009590:	4640      	mov	r0, r8
 8009592:	4649      	mov	r1, r9
 8009594:	f7f7 fc0a 	bl	8000dac <__aeabi_uldivmod>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4b49      	ldr	r3, [pc, #292]	; (80096c4 <UART_SetConfig+0x38c>)
 800959e:	fba3 2302 	umull	r2, r3, r3, r2
 80095a2:	095b      	lsrs	r3, r3, #5
 80095a4:	011e      	lsls	r6, r3, #4
 80095a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095a8:	4618      	mov	r0, r3
 80095aa:	f04f 0100 	mov.w	r1, #0
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	1894      	adds	r4, r2, r2
 80095b4:	60bc      	str	r4, [r7, #8]
 80095b6:	415b      	adcs	r3, r3
 80095b8:	60fb      	str	r3, [r7, #12]
 80095ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095be:	1812      	adds	r2, r2, r0
 80095c0:	eb41 0303 	adc.w	r3, r1, r3
 80095c4:	f04f 0400 	mov.w	r4, #0
 80095c8:	f04f 0500 	mov.w	r5, #0
 80095cc:	00dd      	lsls	r5, r3, #3
 80095ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80095d2:	00d4      	lsls	r4, r2, #3
 80095d4:	4622      	mov	r2, r4
 80095d6:	462b      	mov	r3, r5
 80095d8:	1814      	adds	r4, r2, r0
 80095da:	64bc      	str	r4, [r7, #72]	; 0x48
 80095dc:	414b      	adcs	r3, r1
 80095de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f04f 0100 	mov.w	r1, #0
 80095ea:	f04f 0200 	mov.w	r2, #0
 80095ee:	f04f 0300 	mov.w	r3, #0
 80095f2:	008b      	lsls	r3, r1, #2
 80095f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095f8:	0082      	lsls	r2, r0, #2
 80095fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80095fe:	f7f7 fbd5 	bl	8000dac <__aeabi_uldivmod>
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	4b2f      	ldr	r3, [pc, #188]	; (80096c4 <UART_SetConfig+0x38c>)
 8009608:	fba3 1302 	umull	r1, r3, r3, r2
 800960c:	095b      	lsrs	r3, r3, #5
 800960e:	2164      	movs	r1, #100	; 0x64
 8009610:	fb01 f303 	mul.w	r3, r1, r3
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	011b      	lsls	r3, r3, #4
 8009618:	3332      	adds	r3, #50	; 0x32
 800961a:	4a2a      	ldr	r2, [pc, #168]	; (80096c4 <UART_SetConfig+0x38c>)
 800961c:	fba2 2303 	umull	r2, r3, r2, r3
 8009620:	095b      	lsrs	r3, r3, #5
 8009622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009626:	441e      	add	r6, r3
 8009628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800962a:	4618      	mov	r0, r3
 800962c:	f04f 0100 	mov.w	r1, #0
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	1894      	adds	r4, r2, r2
 8009636:	603c      	str	r4, [r7, #0]
 8009638:	415b      	adcs	r3, r3
 800963a:	607b      	str	r3, [r7, #4]
 800963c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009640:	1812      	adds	r2, r2, r0
 8009642:	eb41 0303 	adc.w	r3, r1, r3
 8009646:	f04f 0400 	mov.w	r4, #0
 800964a:	f04f 0500 	mov.w	r5, #0
 800964e:	00dd      	lsls	r5, r3, #3
 8009650:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009654:	00d4      	lsls	r4, r2, #3
 8009656:	4622      	mov	r2, r4
 8009658:	462b      	mov	r3, r5
 800965a:	eb12 0a00 	adds.w	sl, r2, r0
 800965e:	eb43 0b01 	adc.w	fp, r3, r1
 8009662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	4618      	mov	r0, r3
 8009668:	f04f 0100 	mov.w	r1, #0
 800966c:	f04f 0200 	mov.w	r2, #0
 8009670:	f04f 0300 	mov.w	r3, #0
 8009674:	008b      	lsls	r3, r1, #2
 8009676:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800967a:	0082      	lsls	r2, r0, #2
 800967c:	4650      	mov	r0, sl
 800967e:	4659      	mov	r1, fp
 8009680:	f7f7 fb94 	bl	8000dac <__aeabi_uldivmod>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	4b0e      	ldr	r3, [pc, #56]	; (80096c4 <UART_SetConfig+0x38c>)
 800968a:	fba3 1302 	umull	r1, r3, r3, r2
 800968e:	095b      	lsrs	r3, r3, #5
 8009690:	2164      	movs	r1, #100	; 0x64
 8009692:	fb01 f303 	mul.w	r3, r1, r3
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	011b      	lsls	r3, r3, #4
 800969a:	3332      	adds	r3, #50	; 0x32
 800969c:	4a09      	ldr	r2, [pc, #36]	; (80096c4 <UART_SetConfig+0x38c>)
 800969e:	fba2 2303 	umull	r2, r3, r2, r3
 80096a2:	095b      	lsrs	r3, r3, #5
 80096a4:	f003 020f 	and.w	r2, r3, #15
 80096a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4432      	add	r2, r6
 80096ae:	609a      	str	r2, [r3, #8]
}
 80096b0:	bf00      	nop
 80096b2:	377c      	adds	r7, #124	; 0x7c
 80096b4:	46bd      	mov	sp, r7
 80096b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ba:	bf00      	nop
 80096bc:	40011000 	.word	0x40011000
 80096c0:	40011400 	.word	0x40011400
 80096c4:	51eb851f 	.word	0x51eb851f

080096c8 <calloc>:
 80096c8:	4b02      	ldr	r3, [pc, #8]	; (80096d4 <calloc+0xc>)
 80096ca:	460a      	mov	r2, r1
 80096cc:	4601      	mov	r1, r0
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	f000 b842 	b.w	8009758 <_calloc_r>
 80096d4:	20000024 	.word	0x20000024

080096d8 <__errno>:
 80096d8:	4b01      	ldr	r3, [pc, #4]	; (80096e0 <__errno+0x8>)
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	20000024 	.word	0x20000024

080096e4 <__libc_init_array>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	4d0d      	ldr	r5, [pc, #52]	; (800971c <__libc_init_array+0x38>)
 80096e8:	4c0d      	ldr	r4, [pc, #52]	; (8009720 <__libc_init_array+0x3c>)
 80096ea:	1b64      	subs	r4, r4, r5
 80096ec:	10a4      	asrs	r4, r4, #2
 80096ee:	2600      	movs	r6, #0
 80096f0:	42a6      	cmp	r6, r4
 80096f2:	d109      	bne.n	8009708 <__libc_init_array+0x24>
 80096f4:	4d0b      	ldr	r5, [pc, #44]	; (8009724 <__libc_init_array+0x40>)
 80096f6:	4c0c      	ldr	r4, [pc, #48]	; (8009728 <__libc_init_array+0x44>)
 80096f8:	f000 f99e 	bl	8009a38 <_init>
 80096fc:	1b64      	subs	r4, r4, r5
 80096fe:	10a4      	asrs	r4, r4, #2
 8009700:	2600      	movs	r6, #0
 8009702:	42a6      	cmp	r6, r4
 8009704:	d105      	bne.n	8009712 <__libc_init_array+0x2e>
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	f855 3b04 	ldr.w	r3, [r5], #4
 800970c:	4798      	blx	r3
 800970e:	3601      	adds	r6, #1
 8009710:	e7ee      	b.n	80096f0 <__libc_init_array+0xc>
 8009712:	f855 3b04 	ldr.w	r3, [r5], #4
 8009716:	4798      	blx	r3
 8009718:	3601      	adds	r6, #1
 800971a:	e7f2      	b.n	8009702 <__libc_init_array+0x1e>
 800971c:	08009a90 	.word	0x08009a90
 8009720:	08009a90 	.word	0x08009a90
 8009724:	08009a90 	.word	0x08009a90
 8009728:	08009a94 	.word	0x08009a94

0800972c <memcpy>:
 800972c:	440a      	add	r2, r1
 800972e:	4291      	cmp	r1, r2
 8009730:	f100 33ff 	add.w	r3, r0, #4294967295
 8009734:	d100      	bne.n	8009738 <memcpy+0xc>
 8009736:	4770      	bx	lr
 8009738:	b510      	push	{r4, lr}
 800973a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800973e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009742:	4291      	cmp	r1, r2
 8009744:	d1f9      	bne.n	800973a <memcpy+0xe>
 8009746:	bd10      	pop	{r4, pc}

08009748 <memset>:
 8009748:	4402      	add	r2, r0
 800974a:	4603      	mov	r3, r0
 800974c:	4293      	cmp	r3, r2
 800974e:	d100      	bne.n	8009752 <memset+0xa>
 8009750:	4770      	bx	lr
 8009752:	f803 1b01 	strb.w	r1, [r3], #1
 8009756:	e7f9      	b.n	800974c <memset+0x4>

08009758 <_calloc_r>:
 8009758:	b513      	push	{r0, r1, r4, lr}
 800975a:	434a      	muls	r2, r1
 800975c:	4611      	mov	r1, r2
 800975e:	9201      	str	r2, [sp, #4]
 8009760:	f000 f80a 	bl	8009778 <_malloc_r>
 8009764:	4604      	mov	r4, r0
 8009766:	b118      	cbz	r0, 8009770 <_calloc_r+0x18>
 8009768:	9a01      	ldr	r2, [sp, #4]
 800976a:	2100      	movs	r1, #0
 800976c:	f7ff ffec 	bl	8009748 <memset>
 8009770:	4620      	mov	r0, r4
 8009772:	b002      	add	sp, #8
 8009774:	bd10      	pop	{r4, pc}
	...

08009778 <_malloc_r>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	1ccd      	adds	r5, r1, #3
 800977c:	f025 0503 	bic.w	r5, r5, #3
 8009780:	3508      	adds	r5, #8
 8009782:	2d0c      	cmp	r5, #12
 8009784:	bf38      	it	cc
 8009786:	250c      	movcc	r5, #12
 8009788:	2d00      	cmp	r5, #0
 800978a:	4606      	mov	r6, r0
 800978c:	db01      	blt.n	8009792 <_malloc_r+0x1a>
 800978e:	42a9      	cmp	r1, r5
 8009790:	d903      	bls.n	800979a <_malloc_r+0x22>
 8009792:	230c      	movs	r3, #12
 8009794:	6033      	str	r3, [r6, #0]
 8009796:	2000      	movs	r0, #0
 8009798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800979a:	f000 f857 	bl	800984c <__malloc_lock>
 800979e:	4921      	ldr	r1, [pc, #132]	; (8009824 <_malloc_r+0xac>)
 80097a0:	680a      	ldr	r2, [r1, #0]
 80097a2:	4614      	mov	r4, r2
 80097a4:	b99c      	cbnz	r4, 80097ce <_malloc_r+0x56>
 80097a6:	4f20      	ldr	r7, [pc, #128]	; (8009828 <_malloc_r+0xb0>)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	b923      	cbnz	r3, 80097b6 <_malloc_r+0x3e>
 80097ac:	4621      	mov	r1, r4
 80097ae:	4630      	mov	r0, r6
 80097b0:	f000 f83c 	bl	800982c <_sbrk_r>
 80097b4:	6038      	str	r0, [r7, #0]
 80097b6:	4629      	mov	r1, r5
 80097b8:	4630      	mov	r0, r6
 80097ba:	f000 f837 	bl	800982c <_sbrk_r>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	d123      	bne.n	800980a <_malloc_r+0x92>
 80097c2:	230c      	movs	r3, #12
 80097c4:	6033      	str	r3, [r6, #0]
 80097c6:	4630      	mov	r0, r6
 80097c8:	f000 f846 	bl	8009858 <__malloc_unlock>
 80097cc:	e7e3      	b.n	8009796 <_malloc_r+0x1e>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	1b5b      	subs	r3, r3, r5
 80097d2:	d417      	bmi.n	8009804 <_malloc_r+0x8c>
 80097d4:	2b0b      	cmp	r3, #11
 80097d6:	d903      	bls.n	80097e0 <_malloc_r+0x68>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	441c      	add	r4, r3
 80097dc:	6025      	str	r5, [r4, #0]
 80097de:	e004      	b.n	80097ea <_malloc_r+0x72>
 80097e0:	6863      	ldr	r3, [r4, #4]
 80097e2:	42a2      	cmp	r2, r4
 80097e4:	bf0c      	ite	eq
 80097e6:	600b      	streq	r3, [r1, #0]
 80097e8:	6053      	strne	r3, [r2, #4]
 80097ea:	4630      	mov	r0, r6
 80097ec:	f000 f834 	bl	8009858 <__malloc_unlock>
 80097f0:	f104 000b 	add.w	r0, r4, #11
 80097f4:	1d23      	adds	r3, r4, #4
 80097f6:	f020 0007 	bic.w	r0, r0, #7
 80097fa:	1ac2      	subs	r2, r0, r3
 80097fc:	d0cc      	beq.n	8009798 <_malloc_r+0x20>
 80097fe:	1a1b      	subs	r3, r3, r0
 8009800:	50a3      	str	r3, [r4, r2]
 8009802:	e7c9      	b.n	8009798 <_malloc_r+0x20>
 8009804:	4622      	mov	r2, r4
 8009806:	6864      	ldr	r4, [r4, #4]
 8009808:	e7cc      	b.n	80097a4 <_malloc_r+0x2c>
 800980a:	1cc4      	adds	r4, r0, #3
 800980c:	f024 0403 	bic.w	r4, r4, #3
 8009810:	42a0      	cmp	r0, r4
 8009812:	d0e3      	beq.n	80097dc <_malloc_r+0x64>
 8009814:	1a21      	subs	r1, r4, r0
 8009816:	4630      	mov	r0, r6
 8009818:	f000 f808 	bl	800982c <_sbrk_r>
 800981c:	3001      	adds	r0, #1
 800981e:	d1dd      	bne.n	80097dc <_malloc_r+0x64>
 8009820:	e7cf      	b.n	80097c2 <_malloc_r+0x4a>
 8009822:	bf00      	nop
 8009824:	20000318 	.word	0x20000318
 8009828:	2000031c 	.word	0x2000031c

0800982c <_sbrk_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d06      	ldr	r5, [pc, #24]	; (8009848 <_sbrk_r+0x1c>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	602b      	str	r3, [r5, #0]
 8009838:	f7fa fbd2 	bl	8003fe0 <_sbrk>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d102      	bne.n	8009846 <_sbrk_r+0x1a>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	b103      	cbz	r3, 8009846 <_sbrk_r+0x1a>
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	20000554 	.word	0x20000554

0800984c <__malloc_lock>:
 800984c:	4801      	ldr	r0, [pc, #4]	; (8009854 <__malloc_lock+0x8>)
 800984e:	f000 b809 	b.w	8009864 <__retarget_lock_acquire_recursive>
 8009852:	bf00      	nop
 8009854:	2000055c 	.word	0x2000055c

08009858 <__malloc_unlock>:
 8009858:	4801      	ldr	r0, [pc, #4]	; (8009860 <__malloc_unlock+0x8>)
 800985a:	f000 b804 	b.w	8009866 <__retarget_lock_release_recursive>
 800985e:	bf00      	nop
 8009860:	2000055c 	.word	0x2000055c

08009864 <__retarget_lock_acquire_recursive>:
 8009864:	4770      	bx	lr

08009866 <__retarget_lock_release_recursive>:
 8009866:	4770      	bx	lr

08009868 <sqrt>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	ed2d 8b02 	vpush	{d8}
 800986e:	ec55 4b10 	vmov	r4, r5, d0
 8009872:	f000 f82d 	bl	80098d0 <__ieee754_sqrt>
 8009876:	4b15      	ldr	r3, [pc, #84]	; (80098cc <sqrt+0x64>)
 8009878:	eeb0 8a40 	vmov.f32	s16, s0
 800987c:	eef0 8a60 	vmov.f32	s17, s1
 8009880:	f993 3000 	ldrsb.w	r3, [r3]
 8009884:	3301      	adds	r3, #1
 8009886:	d019      	beq.n	80098bc <sqrt+0x54>
 8009888:	4622      	mov	r2, r4
 800988a:	462b      	mov	r3, r5
 800988c:	4620      	mov	r0, r4
 800988e:	4629      	mov	r1, r5
 8009890:	f7f7 f8f8 	bl	8000a84 <__aeabi_dcmpun>
 8009894:	b990      	cbnz	r0, 80098bc <sqrt+0x54>
 8009896:	2200      	movs	r2, #0
 8009898:	2300      	movs	r3, #0
 800989a:	4620      	mov	r0, r4
 800989c:	4629      	mov	r1, r5
 800989e:	f7f7 f8c9 	bl	8000a34 <__aeabi_dcmplt>
 80098a2:	b158      	cbz	r0, 80098bc <sqrt+0x54>
 80098a4:	f7ff ff18 	bl	80096d8 <__errno>
 80098a8:	2321      	movs	r3, #33	; 0x21
 80098aa:	6003      	str	r3, [r0, #0]
 80098ac:	2200      	movs	r2, #0
 80098ae:	2300      	movs	r3, #0
 80098b0:	4610      	mov	r0, r2
 80098b2:	4619      	mov	r1, r3
 80098b4:	f7f6 ff76 	bl	80007a4 <__aeabi_ddiv>
 80098b8:	ec41 0b18 	vmov	d8, r0, r1
 80098bc:	eeb0 0a48 	vmov.f32	s0, s16
 80098c0:	eef0 0a68 	vmov.f32	s1, s17
 80098c4:	ecbd 8b02 	vpop	{d8}
 80098c8:	bd38      	pop	{r3, r4, r5, pc}
 80098ca:	bf00      	nop
 80098cc:	20000088 	.word	0x20000088

080098d0 <__ieee754_sqrt>:
 80098d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d4:	ec55 4b10 	vmov	r4, r5, d0
 80098d8:	4e56      	ldr	r6, [pc, #344]	; (8009a34 <__ieee754_sqrt+0x164>)
 80098da:	43ae      	bics	r6, r5
 80098dc:	ee10 0a10 	vmov	r0, s0
 80098e0:	ee10 3a10 	vmov	r3, s0
 80098e4:	4629      	mov	r1, r5
 80098e6:	462a      	mov	r2, r5
 80098e8:	d110      	bne.n	800990c <__ieee754_sqrt+0x3c>
 80098ea:	ee10 2a10 	vmov	r2, s0
 80098ee:	462b      	mov	r3, r5
 80098f0:	f7f6 fe2e 	bl	8000550 <__aeabi_dmul>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4620      	mov	r0, r4
 80098fa:	4629      	mov	r1, r5
 80098fc:	f7f6 fc72 	bl	80001e4 <__adddf3>
 8009900:	4604      	mov	r4, r0
 8009902:	460d      	mov	r5, r1
 8009904:	ec45 4b10 	vmov	d0, r4, r5
 8009908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990c:	2d00      	cmp	r5, #0
 800990e:	dc10      	bgt.n	8009932 <__ieee754_sqrt+0x62>
 8009910:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009914:	4330      	orrs	r0, r6
 8009916:	d0f5      	beq.n	8009904 <__ieee754_sqrt+0x34>
 8009918:	b15d      	cbz	r5, 8009932 <__ieee754_sqrt+0x62>
 800991a:	ee10 2a10 	vmov	r2, s0
 800991e:	462b      	mov	r3, r5
 8009920:	ee10 0a10 	vmov	r0, s0
 8009924:	f7f6 fc5c 	bl	80001e0 <__aeabi_dsub>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	f7f6 ff3a 	bl	80007a4 <__aeabi_ddiv>
 8009930:	e7e6      	b.n	8009900 <__ieee754_sqrt+0x30>
 8009932:	1509      	asrs	r1, r1, #20
 8009934:	d076      	beq.n	8009a24 <__ieee754_sqrt+0x154>
 8009936:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800993a:	07ce      	lsls	r6, r1, #31
 800993c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009940:	bf5e      	ittt	pl
 8009942:	0fda      	lsrpl	r2, r3, #31
 8009944:	005b      	lslpl	r3, r3, #1
 8009946:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800994a:	0fda      	lsrs	r2, r3, #31
 800994c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009950:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009954:	2000      	movs	r0, #0
 8009956:	106d      	asrs	r5, r5, #1
 8009958:	005b      	lsls	r3, r3, #1
 800995a:	f04f 0e16 	mov.w	lr, #22
 800995e:	4684      	mov	ip, r0
 8009960:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009964:	eb0c 0401 	add.w	r4, ip, r1
 8009968:	4294      	cmp	r4, r2
 800996a:	bfde      	ittt	le
 800996c:	1b12      	suble	r2, r2, r4
 800996e:	eb04 0c01 	addle.w	ip, r4, r1
 8009972:	1840      	addle	r0, r0, r1
 8009974:	0052      	lsls	r2, r2, #1
 8009976:	f1be 0e01 	subs.w	lr, lr, #1
 800997a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800997e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009982:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009986:	d1ed      	bne.n	8009964 <__ieee754_sqrt+0x94>
 8009988:	4671      	mov	r1, lr
 800998a:	2720      	movs	r7, #32
 800998c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009990:	4562      	cmp	r2, ip
 8009992:	eb04 060e 	add.w	r6, r4, lr
 8009996:	dc02      	bgt.n	800999e <__ieee754_sqrt+0xce>
 8009998:	d113      	bne.n	80099c2 <__ieee754_sqrt+0xf2>
 800999a:	429e      	cmp	r6, r3
 800999c:	d811      	bhi.n	80099c2 <__ieee754_sqrt+0xf2>
 800999e:	2e00      	cmp	r6, #0
 80099a0:	eb06 0e04 	add.w	lr, r6, r4
 80099a4:	da43      	bge.n	8009a2e <__ieee754_sqrt+0x15e>
 80099a6:	f1be 0f00 	cmp.w	lr, #0
 80099aa:	db40      	blt.n	8009a2e <__ieee754_sqrt+0x15e>
 80099ac:	f10c 0801 	add.w	r8, ip, #1
 80099b0:	eba2 020c 	sub.w	r2, r2, ip
 80099b4:	429e      	cmp	r6, r3
 80099b6:	bf88      	it	hi
 80099b8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80099bc:	1b9b      	subs	r3, r3, r6
 80099be:	4421      	add	r1, r4
 80099c0:	46c4      	mov	ip, r8
 80099c2:	0052      	lsls	r2, r2, #1
 80099c4:	3f01      	subs	r7, #1
 80099c6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80099ca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80099ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099d2:	d1dd      	bne.n	8009990 <__ieee754_sqrt+0xc0>
 80099d4:	4313      	orrs	r3, r2
 80099d6:	d006      	beq.n	80099e6 <__ieee754_sqrt+0x116>
 80099d8:	1c4c      	adds	r4, r1, #1
 80099da:	bf13      	iteet	ne
 80099dc:	3101      	addne	r1, #1
 80099de:	3001      	addeq	r0, #1
 80099e0:	4639      	moveq	r1, r7
 80099e2:	f021 0101 	bicne.w	r1, r1, #1
 80099e6:	1043      	asrs	r3, r0, #1
 80099e8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80099ec:	0849      	lsrs	r1, r1, #1
 80099ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80099f2:	07c2      	lsls	r2, r0, #31
 80099f4:	bf48      	it	mi
 80099f6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80099fa:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80099fe:	460c      	mov	r4, r1
 8009a00:	463d      	mov	r5, r7
 8009a02:	e77f      	b.n	8009904 <__ieee754_sqrt+0x34>
 8009a04:	0ada      	lsrs	r2, r3, #11
 8009a06:	3815      	subs	r0, #21
 8009a08:	055b      	lsls	r3, r3, #21
 8009a0a:	2a00      	cmp	r2, #0
 8009a0c:	d0fa      	beq.n	8009a04 <__ieee754_sqrt+0x134>
 8009a0e:	02d7      	lsls	r7, r2, #11
 8009a10:	d50a      	bpl.n	8009a28 <__ieee754_sqrt+0x158>
 8009a12:	f1c1 0420 	rsb	r4, r1, #32
 8009a16:	fa23 f404 	lsr.w	r4, r3, r4
 8009a1a:	1e4d      	subs	r5, r1, #1
 8009a1c:	408b      	lsls	r3, r1
 8009a1e:	4322      	orrs	r2, r4
 8009a20:	1b41      	subs	r1, r0, r5
 8009a22:	e788      	b.n	8009936 <__ieee754_sqrt+0x66>
 8009a24:	4608      	mov	r0, r1
 8009a26:	e7f0      	b.n	8009a0a <__ieee754_sqrt+0x13a>
 8009a28:	0052      	lsls	r2, r2, #1
 8009a2a:	3101      	adds	r1, #1
 8009a2c:	e7ef      	b.n	8009a0e <__ieee754_sqrt+0x13e>
 8009a2e:	46e0      	mov	r8, ip
 8009a30:	e7be      	b.n	80099b0 <__ieee754_sqrt+0xe0>
 8009a32:	bf00      	nop
 8009a34:	7ff00000 	.word	0x7ff00000

08009a38 <_init>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	bf00      	nop
 8009a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3e:	bc08      	pop	{r3}
 8009a40:	469e      	mov	lr, r3
 8009a42:	4770      	bx	lr

08009a44 <_fini>:
 8009a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a46:	bf00      	nop
 8009a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a4a:	bc08      	pop	{r3}
 8009a4c:	469e      	mov	lr, r3
 8009a4e:	4770      	bx	lr
