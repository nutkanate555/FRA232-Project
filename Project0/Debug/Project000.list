
Project000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009268  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08009400  08009400  00019400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009438  08009438  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009438  08009438  00019438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009440  08009440  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009440  08009440  00019440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009444  08009444  00019444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  20000090  080094d8  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  080094d8  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e51  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  00030f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00032f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00033f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f6b  00000000  00000000  00034ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011935  00000000  00000000  0004be2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091cb1  00000000  00000000  0005d760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef411  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a1c  00000000  00000000  000ef464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080093e8 	.word	0x080093e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	080093e8 	.word	0x080093e8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96e 	b.w	80010a0 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468c      	mov	ip, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8083 	bne.w	8000ef2 <__udivmoddi4+0x116>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4617      	mov	r7, r2
 8000df0:	d947      	bls.n	8000e82 <__udivmoddi4+0xa6>
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b142      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	f1c2 0020 	rsb	r0, r2, #32
 8000dfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	ea40 0c01 	orr.w	ip, r0, r1
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fbbc f6f8 	udiv	r6, ip, r8
 8000e14:	fa1f fe87 	uxth.w	lr, r7
 8000e18:	fb08 c116 	mls	r1, r8, r6, ip
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f10e 	mul.w	r1, r6, lr
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x60>
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 8119 	bcs.w	8001064 <__udivmoddi4+0x288>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 8116 	bls.w	8001064 <__udivmoddi4+0x288>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	443b      	add	r3, r7
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x8c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	f080 8105 	bcs.w	8001068 <__udivmoddi4+0x28c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8102 	bls.w	8001068 <__udivmoddi4+0x28c>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6c:	eba4 040e 	sub.w	r4, r4, lr
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa0>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	b902      	cbnz	r2, 8000e86 <__udivmoddi4+0xaa>
 8000e84:	deff      	udf	#255	; 0xff
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d150      	bne.n	8000f30 <__udivmoddi4+0x154>
 8000e8e:	1bcb      	subs	r3, r1, r7
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	2601      	movs	r6, #1
 8000e9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb08 f30c 	mul.w	r3, r8, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0xe4>
 8000eb0:	1879      	adds	r1, r7, r1
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0xe2>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	f200 80e9 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ecc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x10c>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x10a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80d9 	bhi.w	8001098 <__udivmoddi4+0x2bc>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e7bf      	b.n	8000e72 <__udivmoddi4+0x96>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0x12e>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	f000 80b1 	beq.w	800105e <__udivmoddi4+0x282>
 8000efc:	2600      	movs	r6, #0
 8000efe:	e9c5 0100 	strd	r0, r1, [r5]
 8000f02:	4630      	mov	r0, r6
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f683 	clz	r6, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d14a      	bne.n	8000fa8 <__udivmoddi4+0x1cc>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0x140>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80b8 	bhi.w	800108c <__udivmoddi4+0x2b0>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d0a8      	beq.n	8000e7c <__udivmoddi4+0xa0>
 8000f2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0xa0>
 8000f30:	f1c2 0320 	rsb	r3, r2, #32
 8000f34:	fa20 f603 	lsr.w	r6, r0, r3
 8000f38:	4097      	lsls	r7, r2
 8000f3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	4330      	orrs	r0, r6
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f4c:	fa1f f887 	uxth.w	r8, r7
 8000f50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f58:	fb06 f108 	mul.w	r1, r6, r8
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x19c>
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f6a:	f080 808d 	bcs.w	8001088 <__udivmoddi4+0x2ac>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	f240 808a 	bls.w	8001088 <__udivmoddi4+0x2ac>
 8000f74:	3e02      	subs	r6, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	b281      	uxth	r1, r0
 8000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb00 f308 	mul.w	r3, r0, r8
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d907      	bls.n	8000fa0 <__udivmoddi4+0x1c4>
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f96:	d273      	bcs.n	8001080 <__udivmoddi4+0x2a4>
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d971      	bls.n	8001080 <__udivmoddi4+0x2a4>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4439      	add	r1, r7
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa6:	e778      	b.n	8000e9a <__udivmoddi4+0xbe>
 8000fa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000fac:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fba:	fa01 f306 	lsl.w	r3, r1, r6
 8000fbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	0c3b      	lsrs	r3, r7, #16
 8000fca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fce:	fa1f f884 	uxth.w	r8, r4
 8000fd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fda:	fb09 fa08 	mul.w	sl, r9, r8
 8000fde:	458a      	cmp	sl, r1
 8000fe0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x220>
 8000fea:	1861      	adds	r1, r4, r1
 8000fec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff0:	d248      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8000ff2:	458a      	cmp	sl, r1
 8000ff4:	d946      	bls.n	8001084 <__udivmoddi4+0x2a8>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4421      	add	r1, r4
 8000ffc:	eba1 010a 	sub.w	r1, r1, sl
 8001000:	b2bf      	uxth	r7, r7
 8001002:	fbb1 f0fe 	udiv	r0, r1, lr
 8001006:	fb0e 1110 	mls	r1, lr, r0, r1
 800100a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100e:	fb00 f808 	mul.w	r8, r0, r8
 8001012:	45b8      	cmp	r8, r7
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x24a>
 8001016:	19e7      	adds	r7, r4, r7
 8001018:	f100 31ff 	add.w	r1, r0, #4294967295
 800101c:	d22e      	bcs.n	800107c <__udivmoddi4+0x2a0>
 800101e:	45b8      	cmp	r8, r7
 8001020:	d92c      	bls.n	800107c <__udivmoddi4+0x2a0>
 8001022:	3802      	subs	r0, #2
 8001024:	4427      	add	r7, r4
 8001026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102a:	eba7 0708 	sub.w	r7, r7, r8
 800102e:	fba0 8902 	umull	r8, r9, r0, r2
 8001032:	454f      	cmp	r7, r9
 8001034:	46c6      	mov	lr, r8
 8001036:	4649      	mov	r1, r9
 8001038:	d31a      	bcc.n	8001070 <__udivmoddi4+0x294>
 800103a:	d017      	beq.n	800106c <__udivmoddi4+0x290>
 800103c:	b15d      	cbz	r5, 8001056 <__udivmoddi4+0x27a>
 800103e:	ebb3 020e 	subs.w	r2, r3, lr
 8001042:	eb67 0701 	sbc.w	r7, r7, r1
 8001046:	fa07 fc0c 	lsl.w	ip, r7, ip
 800104a:	40f2      	lsrs	r2, r6
 800104c:	ea4c 0202 	orr.w	r2, ip, r2
 8001050:	40f7      	lsrs	r7, r6
 8001052:	e9c5 2700 	strd	r2, r7, [r5]
 8001056:	2600      	movs	r6, #0
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	462e      	mov	r6, r5
 8001060:	4628      	mov	r0, r5
 8001062:	e70b      	b.n	8000e7c <__udivmoddi4+0xa0>
 8001064:	4606      	mov	r6, r0
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0x60>
 8001068:	4618      	mov	r0, r3
 800106a:	e6fd      	b.n	8000e68 <__udivmoddi4+0x8c>
 800106c:	4543      	cmp	r3, r8
 800106e:	d2e5      	bcs.n	800103c <__udivmoddi4+0x260>
 8001070:	ebb8 0e02 	subs.w	lr, r8, r2
 8001074:	eb69 0104 	sbc.w	r1, r9, r4
 8001078:	3801      	subs	r0, #1
 800107a:	e7df      	b.n	800103c <__udivmoddi4+0x260>
 800107c:	4608      	mov	r0, r1
 800107e:	e7d2      	b.n	8001026 <__udivmoddi4+0x24a>
 8001080:	4660      	mov	r0, ip
 8001082:	e78d      	b.n	8000fa0 <__udivmoddi4+0x1c4>
 8001084:	4681      	mov	r9, r0
 8001086:	e7b9      	b.n	8000ffc <__udivmoddi4+0x220>
 8001088:	4666      	mov	r6, ip
 800108a:	e775      	b.n	8000f78 <__udivmoddi4+0x19c>
 800108c:	4630      	mov	r0, r6
 800108e:	e74a      	b.n	8000f26 <__udivmoddi4+0x14a>
 8001090:	f1ac 0c02 	sub.w	ip, ip, #2
 8001094:	4439      	add	r1, r7
 8001096:	e713      	b.n	8000ec0 <__udivmoddi4+0xe4>
 8001098:	3802      	subs	r0, #2
 800109a:	443c      	add	r4, r7
 800109c:	e724      	b.n	8000ee8 <__udivmoddi4+0x10c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	0000      	movs	r0, r0
	...

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f002 fce4 	bl	8003a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 f968 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 fb6a 	bl	8001790 <MX_GPIO_Init>
  MX_DMA_Init();
 80010bc:	f000 fb40 	bl	8001740 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010c0:	f000 fb12 	bl	80016e8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010c4:	f000 f9f6 	bl	80014b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c8:	f000 fa4c 	bl	8001564 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010cc:	f000 fa96 	bl	80015fc <MX_TIM3_Init>
  MX_I2C1_Init();
 80010d0:	f000 f9c2 	bl	8001458 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010d4:	489c      	ldr	r0, [pc, #624]	; (8001348 <main+0x2a0>)
 80010d6:	f005 fff1 	bl	80070bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010da:	213c      	movs	r1, #60	; 0x3c
 80010dc:	489b      	ldr	r0, [pc, #620]	; (800134c <main+0x2a4>)
 80010de:	f006 f9ff 	bl	80074e0 <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010e2:	489b      	ldr	r0, [pc, #620]	; (8001350 <main+0x2a8>)
 80010e4:	f005 ff90 	bl	8007008 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	4899      	ldr	r0, [pc, #612]	; (8001350 <main+0x2a8>)
 80010ec:	f006 f8a2 	bl	8007234 <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010f0:	4898      	ldr	r0, [pc, #608]	; (8001354 <main+0x2ac>)
 80010f2:	f000 fcf9 	bl	8001ae8 <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010f6:	4997      	ldr	r1, [pc, #604]	; (8001354 <main+0x2ac>)
 80010f8:	4897      	ldr	r0, [pc, #604]	; (8001358 <main+0x2b0>)
 80010fa:	f000 fd0d 	bl	8001b18 <TrajectoryGenerationStructureInit>

  VelocityControllerInit(&VelocityPIDController, &TrjStruc);
 80010fe:	4996      	ldr	r1, [pc, #600]	; (8001358 <main+0x2b0>)
 8001100:	4896      	ldr	r0, [pc, #600]	; (800135c <main+0x2b4>)
 8001102:	f000 fd85 	bl	8001c10 <VelocityControllerInit>
  DisplacementControllerInit(&PositionPIDController, &TrjStruc);
 8001106:	4994      	ldr	r1, [pc, #592]	; (8001358 <main+0x2b0>)
 8001108:	4895      	ldr	r0, [pc, #596]	; (8001360 <main+0x2b8>)
 800110a:	f000 fdb5 	bl	8001c78 <DisplacementControllerInit>

  ///UART init
  UART2.huart = &huart2;
 800110e:	4b95      	ldr	r3, [pc, #596]	; (8001364 <main+0x2bc>)
 8001110:	4a95      	ldr	r2, [pc, #596]	; (8001368 <main+0x2c0>)
 8001112:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 8001114:	4b93      	ldr	r3, [pc, #588]	; (8001364 <main+0x2bc>)
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 800111a:	4b92      	ldr	r3, [pc, #584]	; (8001364 <main+0x2bc>)
 800111c:	22ff      	movs	r2, #255	; 0xff
 800111e:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 8001120:	4890      	ldr	r0, [pc, #576]	; (8001364 <main+0x2bc>)
 8001122:	f001 fb2d 	bl	8002780 <UARTInit>
  UARTResetStart(&UART2);
 8001126:	488f      	ldr	r0, [pc, #572]	; (8001364 <main+0x2bc>)
 8001128:	f001 fb52 	bl	80027d0 <UARTResetStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 800112c:	488d      	ldr	r0, [pc, #564]	; (8001364 <main+0x2bc>)
 800112e:	f001 fb73 	bl	8002818 <UARTReadChar>
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113e:	d005      	beq.n	800114c <main+0xa4>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 8001140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001144:	4987      	ldr	r1, [pc, #540]	; (8001364 <main+0x2bc>)
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fc4e 	bl	80029e8 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 800114c:	4b87      	ldr	r3, [pc, #540]	; (800136c <main+0x2c4>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b07      	cmp	r3, #7
 8001152:	d8eb      	bhi.n	800112c <main+0x84>
 8001154:	a201      	add	r2, pc, #4	; (adr r2, 800115c <main+0xb4>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	0800117d 	.word	0x0800117d
 8001160:	08001189 	.word	0x08001189
 8001164:	08001195 	.word	0x08001195
 8001168:	080011a5 	.word	0x080011a5
 800116c:	080011bb 	.word	0x080011bb
 8001170:	08001287 	.word	0x08001287
 8001174:	08001319 	.word	0x08001319
 8001178:	08001329 	.word	0x08001329
	  {
	  	  case STATE_Disconnected:
	  		  LAMP_ON(2);
 800117c:	2002      	movs	r0, #2
 800117e:	f002 f83d 	bl	80031fc <LAMP_ON>
	  		  Emergency_switch_trigger();
 8001182:	f002 f887 	bl	8003294 <Emergency_switch_trigger>
	  		  break;
 8001186:	e0d7      	b.n	8001338 <main+0x290>

	  	  case STATE_Idle:
	  		  LAMP_ON(2);
 8001188:	2002      	movs	r0, #2
 800118a:	f002 f837 	bl	80031fc <LAMP_ON>
	  		  Emergency_switch_trigger();
 800118e:	f002 f881 	bl	8003294 <Emergency_switch_trigger>
		  	  break;
 8001192:	e0d1      	b.n	8001338 <main+0x290>

	  	  case STATE_PrepareDATA:
	  		  LAMP_ON(3);
 8001194:	2003      	movs	r0, #3
 8001196:	f002 f831 	bl	80031fc <LAMP_ON>
	  		  TrajectoryGenerationPrepareDATA();
 800119a:	f000 fdd5 	bl	8001d48 <TrajectoryGenerationPrepareDATA>
	  		  Emergency_switch_trigger();
 800119e:	f002 f879 	bl	8003294 <Emergency_switch_trigger>
		  	  break;
 80011a2:	e0c9      	b.n	8001338 <main+0x290>

	  	  case STATE_Calculation:
	  		  LAMP_ON(3);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f002 f829 	bl	80031fc <LAMP_ON>
	  		  TrajectoryGenerationCalculation();
 80011aa:	f000 ff11 	bl	8001fd0 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 80011ae:	4b6f      	ldr	r3, [pc, #444]	; (800136c <main+0x2c4>)
 80011b0:	2204      	movs	r2, #4
 80011b2:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 80011b4:	f002 f86e 	bl	8003294 <Emergency_switch_trigger>
	  		  break;
 80011b8:	e0be      	b.n	8001338 <main+0x290>

	   	  case STATE_Link_Moving:
	   		  LAMP_ON(3);
 80011ba:	2003      	movs	r0, #3
 80011bc:	f002 f81e 	bl	80031fc <LAMP_ON>
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 80011c0:	f000 fc78 	bl	8001ab4 <micros>
 80011c4:	4b64      	ldr	r3, [pc, #400]	; (8001358 <main+0x2b0>)
 80011c6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80011ca:	1a84      	subs	r4, r0, r2
 80011cc:	eb61 0503 	sbc.w	r5, r1, r3
 80011d0:	4b61      	ldr	r3, [pc, #388]	; (8001358 <main+0x2b0>)
 80011d2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80011d6:	429d      	cmp	r5, r3
 80011d8:	bf08      	it	eq
 80011da:	4294      	cmpeq	r4, r2
 80011dc:	d350      	bcc.n	8001280 <main+0x1d8>
	   		  {
	   			  Controlling_the_LINK();
 80011de:	f002 f889 	bl	80032f4 <Controlling_the_LINK>

	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 3) &&
 80011e2:	4b5f      	ldr	r3, [pc, #380]	; (8001360 <main+0x2b8>)
 80011e4:	ed93 7a05 	vldr	s14, [r3, #20]
 80011e8:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <main+0x2b0>)
 80011ea:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80011ee:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80011f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80011f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d83f      	bhi.n	8001280 <main+0x1d8>
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 3) &&
 8001200:	4b57      	ldr	r3, [pc, #348]	; (8001360 <main+0x2b8>)
 8001202:	ed93 7a05 	vldr	s14, [r3, #20]
 8001206:	4b54      	ldr	r3, [pc, #336]	; (8001358 <main+0x2b0>)
 8001208:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800120c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001210:	ee77 7ae6 	vsub.f32	s15, s15, s13
	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 3) &&
 8001214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	db30      	blt.n	8001280 <main+0x1d8>
						  (Moving_Link_Task_Flag == 1))
 800121e:	4b54      	ldr	r3, [pc, #336]	; (8001370 <main+0x2c8>)
 8001220:	781b      	ldrb	r3, [r3, #0]
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 3) &&
 8001222:	2b01      	cmp	r3, #1
 8001224:	d12c      	bne.n	8001280 <main+0x1d8>
	   			  {
	   				  if(MovingLinkMode == LMM_Set_Pos_Directly)
 8001226:	4b53      	ldr	r3, [pc, #332]	; (8001374 <main+0x2cc>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10d      	bne.n	800124a <main+0x1a2>
	   				  {
	   					Munmunbot_State = STATE_Idle;
 800122e:	4b4f      	ldr	r3, [pc, #316]	; (800136c <main+0x2c4>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
	   					MovingLinkMode = LMM_Not_Set;
 8001234:	4b4f      	ldr	r3, [pc, #316]	; (8001374 <main+0x2cc>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800123a:	4b45      	ldr	r3, [pc, #276]	; (8001350 <main+0x2a8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
	   					ACK2Return(&UART2);
 8001242:	4848      	ldr	r0, [pc, #288]	; (8001364 <main+0x2bc>)
 8001244:	f001 fbbc 	bl	80029c0 <ACK2Return>
 8001248:	e011      	b.n	800126e <main+0x1c6>
	   				  }

	   				  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 800124a:	4b4a      	ldr	r3, [pc, #296]	; (8001374 <main+0x2cc>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d003      	beq.n	800125a <main+0x1b2>
 8001252:	4b48      	ldr	r3, [pc, #288]	; (8001374 <main+0x2cc>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d109      	bne.n	800126e <main+0x1c6>
	   				  {
	   					Munmunbot_State = STATE_End_Effector_Working;
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <main+0x2c4>)
 800125c:	2205      	movs	r2, #5
 800125e:	701a      	strb	r2, [r3, #0]
	   					GripperState = 0;
 8001260:	4b45      	ldr	r3, [pc, #276]	; (8001378 <main+0x2d0>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <main+0x2a8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
	   				  }
	   				 TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 800126e:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <main+0x2b8>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	4a39      	ldr	r2, [pc, #228]	; (8001358 <main+0x2b0>)
 8001274:	65d3      	str	r3, [r2, #92]	; 0x5c
	   				 Moving_Link_Task_Flag = 0;
 8001276:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <main+0x2c8>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
	   				 PID_Reset();
 800127c:	f001 ffa8 	bl	80031d0 <PID_Reset>
	   			  }
	   		  }
	  		  Emergency_switch_trigger();
 8001280:	f002 f808 	bl	8003294 <Emergency_switch_trigger>
	  		  break;
 8001284:	e058      	b.n	8001338 <main+0x290>

	  	  case STATE_End_Effector_Working:
	  		  LAMP_ON(3);
 8001286:	2003      	movs	r0, #3
 8001288:	f001 ffb8 	bl	80031fc <LAMP_ON>
	  		  ///I2C implement
	  		  if(GripperEnable == 1)
 800128c:	4b3b      	ldr	r3, [pc, #236]	; (800137c <main+0x2d4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d137      	bne.n	8001304 <main+0x25c>
	  		  {
	  			if ((hi2c1.State == HAL_I2C_STATE_READY) && (GripperState == 0))
 8001294:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <main+0x2d8>)
 8001296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b20      	cmp	r3, #32
 800129e:	d116      	bne.n	80012ce <main+0x226>
 80012a0:	4b35      	ldr	r3, [pc, #212]	; (8001378 <main+0x2d0>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d112      	bne.n	80012ce <main+0x226>
	  			{
	  				{
	  					uint8_t temp[1] = {0x45};
 80012a8:	2345      	movs	r3, #69	; 0x45
 80012aa:	713b      	strb	r3, [r7, #4]
	  					HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 80012ac:	1d3a      	adds	r2, r7, #4
 80012ae:	2301      	movs	r3, #1
 80012b0:	2146      	movs	r1, #70	; 0x46
 80012b2:	4833      	ldr	r0, [pc, #204]	; (8001380 <main+0x2d8>)
 80012b4:	f003 fc88 	bl	8004bc8 <HAL_I2C_Master_Transmit_IT>
	  				}
	  				GripperState = 1;
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <main+0x2d0>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
	  				Timestamp_Gripper = micros();
 80012be:	f000 fbf9 	bl	8001ab4 <micros>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	492f      	ldr	r1, [pc, #188]	; (8001384 <main+0x2dc>)
 80012c8:	e9c1 2300 	strd	r2, r3, [r1]
 80012cc:	e021      	b.n	8001312 <main+0x26a>
	  			}
	  			else if ((micros() - Timestamp_Gripper >= 5100000) && (GripperState == 1))
 80012ce:	f000 fbf1 	bl	8001ab4 <micros>
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <main+0x2dc>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	ebb0 0802 	subs.w	r8, r0, r2
 80012dc:	eb61 0903 	sbc.w	r9, r1, r3
 80012e0:	a317      	add	r3, pc, #92	; (adr r3, 8001340 <main+0x298>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	454b      	cmp	r3, r9
 80012e8:	bf08      	it	eq
 80012ea:	4542      	cmpeq	r2, r8
 80012ec:	d211      	bcs.n	8001312 <main+0x26a>
 80012ee:	4b22      	ldr	r3, [pc, #136]	; (8001378 <main+0x2d0>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10d      	bne.n	8001312 <main+0x26a>
	  			{
	  				GripperState = 0;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <main+0x2d0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
	  				Munmunbot_State = STATE_PrepareDATA;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <main+0x2c4>)
 80012fe:	2202      	movs	r2, #2
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	e006      	b.n	8001312 <main+0x26a>
	  			}
	  		  }
	  		  else if(GripperEnable == 0)
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <main+0x2d4>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <main+0x26a>
			  {
		  		 Munmunbot_State = STATE_PrepareDATA;
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <main+0x2c4>)
 800130e:	2202      	movs	r2, #2
 8001310:	701a      	strb	r2, [r3, #0]
			  }
	  		  Emergency_switch_trigger();
 8001312:	f001 ffbf 	bl	8003294 <Emergency_switch_trigger>
	  		  break;
 8001316:	e00f      	b.n	8001338 <main+0x290>

	  	  case STATE_SetHome:
	  		  LAMP_ON(3);
 8001318:	2003      	movs	r0, #3
 800131a:	f001 ff6f 	bl	80031fc <LAMP_ON>
	  		  SETHOME_StateMachine_Function();
 800131e:	f002 f831 	bl	8003384 <SETHOME_StateMachine_Function>
	  		  Emergency_switch_trigger();
 8001322:	f001 ffb7 	bl	8003294 <Emergency_switch_trigger>
	  		  break;
 8001326:	e007      	b.n	8001338 <main+0x290>

	  		case STATE_PreSetHome:
			  LAMP_ON(1);
 8001328:	2001      	movs	r0, #1
 800132a:	f001 ff67 	bl	80031fc <LAMP_ON>
			  SETHOME_StateMachine_Function();
 800132e:	f002 f829 	bl	8003384 <SETHOME_StateMachine_Function>
			  Emergency_switch_trigger();
 8001332:	f001 ffaf 	bl	8003294 <Emergency_switch_trigger>
			  break;
 8001336:	bf00      	nop
  {
 8001338:	e6f8      	b.n	800112c <main+0x84>
 800133a:	bf00      	nop
 800133c:	f3af 8000 	nop.w
 8001340:	004dd1df 	.word	0x004dd1df
 8001344:	00000000 	.word	0x00000000
 8001348:	200004bc 	.word	0x200004bc
 800134c:	20000474 	.word	0x20000474
 8001350:	200003cc 	.word	0x200003cc
 8001354:	200001d8 	.word	0x200001d8
 8001358:	20000168 	.word	0x20000168
 800135c:	20000138 	.word	0x20000138
 8001360:	20000108 	.word	0x20000108
 8001364:	200000b8 	.word	0x200000b8
 8001368:	20000504 	.word	0x20000504
 800136c:	20000000 	.word	0x20000000
 8001370:	200000f8 	.word	0x200000f8
 8001374:	200000ee 	.word	0x200000ee
 8001378:	200000f9 	.word	0x200000f9
 800137c:	20000018 	.word	0x20000018
 8001380:	20000378 	.word	0x20000378
 8001384:	20000100 	.word	0x20000100

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b094      	sub	sp, #80	; 0x50
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	2230      	movs	r2, #48	; 0x30
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f007 feae 	bl	80090f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <SystemClock_Config+0xc8>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	4a26      	ldr	r2, [pc, #152]	; (8001450 <SystemClock_Config+0xc8>)
 80013b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	; 0x40
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <SystemClock_Config+0xc8>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <SystemClock_Config+0xcc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a20      	ldr	r2, [pc, #128]	; (8001454 <SystemClock_Config+0xcc>)
 80013d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <SystemClock_Config+0xcc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e4:	2302      	movs	r3, #2
 80013e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ec:	2310      	movs	r3, #16
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f0:	2302      	movs	r3, #2
 80013f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013f8:	2308      	movs	r3, #8
 80013fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013fc:	2364      	movs	r3, #100	; 0x64
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001404:	2304      	movs	r3, #4
 8001406:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	4618      	mov	r0, r3
 800140e:	f005 f937 	bl	8006680 <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001418:	f002 f84e 	bl	80034b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	230f      	movs	r3, #15
 800141e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001420:	2302      	movs	r3, #2
 8001422:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2103      	movs	r1, #3
 8001438:	4618      	mov	r0, r3
 800143a:	f005 fb99 	bl	8006b70 <HAL_RCC_ClockConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001444:	f002 f838 	bl	80034b8 <Error_Handler>
  }
}
 8001448:	bf00      	nop
 800144a:	3750      	adds	r7, #80	; 0x50
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40007000 	.word	0x40007000

08001458 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_I2C1_Init+0x54>)
 800145e:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <MX_I2C1_Init+0x58>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_I2C1_Init+0x54>)
 8001464:	f242 7210 	movw	r2, #10000	; 0x2710
 8001468:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_I2C1_Init+0x54>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_I2C1_Init+0x54>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <MX_I2C1_Init+0x54>)
 8001478:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800147c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_I2C1_Init+0x54>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_I2C1_Init+0x54>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_I2C1_Init+0x54>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_I2C1_Init+0x54>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_I2C1_Init+0x54>)
 8001498:	f003 fa52 	bl	8004940 <HAL_I2C_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80014a2:	f002 f809 	bl	80034b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000378 	.word	0x20000378
 80014b0:	40005400 	.word	0x40005400

080014b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	; 0x30
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	2224      	movs	r2, #36	; 0x24
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f007 fe18 	bl	80090f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <MX_TIM1_Init+0xa8>)
 80014d2:	4a23      	ldr	r2, [pc, #140]	; (8001560 <MX_TIM1_Init+0xac>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <MX_TIM1_Init+0xa8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_TIM1_Init+0xa8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24575;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_TIM1_Init+0xa8>)
 80014e4:	f645 72ff 	movw	r2, #24575	; 0x5fff
 80014e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_TIM1_Init+0xa8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_TIM1_Init+0xa8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_TIM1_Init+0xa8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014fc:	2303      	movs	r3, #3
 80014fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001504:	2301      	movs	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800150c:	2302      	movs	r3, #2
 800150e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001514:	2301      	movs	r3, #1
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <MX_TIM1_Init+0xa8>)
 8001528:	f005 ff34 	bl	8007394 <HAL_TIM_Encoder_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001532:	f001 ffc1 	bl	80034b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	4619      	mov	r1, r3
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <MX_TIM1_Init+0xa8>)
 8001544:	f006 fdd8 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800154e:	f001 ffb3 	bl	80034b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	3730      	adds	r7, #48	; 0x30
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000474 	.word	0x20000474
 8001560:	40010000 	.word	0x40010000

08001564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_TIM2_Init+0x94>)
 8001582:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001586:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_TIM2_Init+0x94>)
 800158a:	2263      	movs	r2, #99	; 0x63
 800158c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_TIM2_Init+0x94>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_TIM2_Init+0x94>)
 8001596:	f04f 32ff 	mov.w	r2, #4294967295
 800159a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_TIM2_Init+0x94>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <MX_TIM2_Init+0x94>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a8:	4813      	ldr	r0, [pc, #76]	; (80015f8 <MX_TIM2_Init+0x94>)
 80015aa:	f005 fcdd 	bl	8006f68 <HAL_TIM_Base_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015b4:	f001 ff80 	bl	80034b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	4619      	mov	r1, r3
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <MX_TIM2_Init+0x94>)
 80015c6:	f006 f9df 	bl	8007988 <HAL_TIM_ConfigClockSource>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015d0:	f001 ff72 	bl	80034b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d4:	2300      	movs	r3, #0
 80015d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_TIM2_Init+0x94>)
 80015e2:	f006 fd89 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015ec:	f001 ff64 	bl	80034b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200004bc 	.word	0x200004bc

080015fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	f107 0320 	add.w	r3, r7, #32
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	615a      	str	r2, [r3, #20]
 800162a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <MX_TIM3_Init+0xe4>)
 800162e:	4a2d      	ldr	r2, [pc, #180]	; (80016e4 <MX_TIM3_Init+0xe8>)
 8001630:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001632:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <MX_TIM3_Init+0xe4>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <MX_TIM3_Init+0xe4>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800163e:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <MX_TIM3_Init+0xe4>)
 8001640:	f242 7210 	movw	r2, #10000	; 0x2710
 8001644:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <MX_TIM3_Init+0xe4>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <MX_TIM3_Init+0xe4>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001652:	4823      	ldr	r0, [pc, #140]	; (80016e0 <MX_TIM3_Init+0xe4>)
 8001654:	f005 fc88 	bl	8006f68 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800165e:	f001 ff2b 	bl	80034b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166c:	4619      	mov	r1, r3
 800166e:	481c      	ldr	r0, [pc, #112]	; (80016e0 <MX_TIM3_Init+0xe4>)
 8001670:	f006 f98a 	bl	8007988 <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800167a:	f001 ff1d 	bl	80034b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800167e:	4818      	ldr	r0, [pc, #96]	; (80016e0 <MX_TIM3_Init+0xe4>)
 8001680:	f005 fd7e 	bl	8007180 <HAL_TIM_PWM_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800168a:	f001 ff15 	bl	80034b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001696:	f107 0320 	add.w	r3, r7, #32
 800169a:	4619      	mov	r1, r3
 800169c:	4810      	ldr	r0, [pc, #64]	; (80016e0 <MX_TIM3_Init+0xe4>)
 800169e:	f006 fd2b 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016a8:	f001 ff06 	bl	80034b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ac:	2360      	movs	r3, #96	; 0x60
 80016ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_TIM3_Init+0xe4>)
 80016c4:	f006 f8a2 	bl	800780c <HAL_TIM_PWM_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016ce:	f001 fef3 	bl	80034b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016d2:	4803      	ldr	r0, [pc, #12]	; (80016e0 <MX_TIM3_Init+0xe4>)
 80016d4:	f001 fffa 	bl	80036cc <HAL_TIM_MspPostInit>

}
 80016d8:	bf00      	nop
 80016da:	3738      	adds	r7, #56	; 0x38
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200003cc 	.word	0x200003cc
 80016e4:	40000400 	.word	0x40000400

080016e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_USART2_UART_Init+0x50>)
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <MX_USART2_UART_Init+0x54>)
 80016f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_USART2_UART_Init+0x50>)
 80016f4:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80016f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_USART2_UART_Init+0x50>)
 80016fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001700:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <MX_USART2_UART_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_USART2_UART_Init+0x50>)
 800170a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_USART2_UART_Init+0x50>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_USART2_UART_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_USART2_UART_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_USART2_UART_Init+0x50>)
 8001724:	f006 fd6a 	bl	80081fc <HAL_UART_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800172e:	f001 fec3 	bl	80034b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000504 	.word	0x20000504
 800173c:	40004400 	.word	0x40004400

08001740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_DMA_Init+0x4c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <MX_DMA_Init+0x4c>)
 8001750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <MX_DMA_Init+0x4c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2010      	movs	r0, #16
 8001768:	f002 fad5 	bl	8003d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800176c:	2010      	movs	r0, #16
 800176e:	f002 faee 	bl	8003d4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	2011      	movs	r0, #17
 8001778:	f002 facd 	bl	8003d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800177c:	2011      	movs	r0, #17
 800177e:	f002 fae6 	bl	8003d4e <HAL_NVIC_EnableIRQ>

}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b5b      	ldr	r3, [pc, #364]	; (8001918 <MX_GPIO_Init+0x188>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a5a      	ldr	r2, [pc, #360]	; (8001918 <MX_GPIO_Init+0x188>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b58      	ldr	r3, [pc, #352]	; (8001918 <MX_GPIO_Init+0x188>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b54      	ldr	r3, [pc, #336]	; (8001918 <MX_GPIO_Init+0x188>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a53      	ldr	r2, [pc, #332]	; (8001918 <MX_GPIO_Init+0x188>)
 80017cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b51      	ldr	r3, [pc, #324]	; (8001918 <MX_GPIO_Init+0x188>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <MX_GPIO_Init+0x188>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <MX_GPIO_Init+0x188>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b4a      	ldr	r3, [pc, #296]	; (8001918 <MX_GPIO_Init+0x188>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4b46      	ldr	r3, [pc, #280]	; (8001918 <MX_GPIO_Init+0x188>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a45      	ldr	r2, [pc, #276]	; (8001918 <MX_GPIO_Init+0x188>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b43      	ldr	r3, [pc, #268]	; (8001918 <MX_GPIO_Init+0x188>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2120      	movs	r1, #32
 800181a:	4840      	ldr	r0, [pc, #256]	; (800191c <MX_GPIO_Init+0x18c>)
 800181c:	f003 f85e 	bl	80048dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay_ch_2_Pin|Relay_ch_3_Pin, GPIO_PIN_SET);
 8001820:	2201      	movs	r2, #1
 8001822:	f241 0104 	movw	r1, #4100	; 0x1004
 8001826:	483e      	ldr	r0, [pc, #248]	; (8001920 <MX_GPIO_Init+0x190>)
 8001828:	f003 f858 	bl	80048dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	483c      	ldr	r0, [pc, #240]	; (8001924 <MX_GPIO_Init+0x194>)
 8001832:	f003 f853 	bl	80048dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_ch_4_GPIO_Port, Relay_ch_4_Pin, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183c:	4837      	ldr	r0, [pc, #220]	; (800191c <MX_GPIO_Init+0x18c>)
 800183e:	f003 f84d 	bl	80048dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001848:	4b37      	ldr	r3, [pc, #220]	; (8001928 <MX_GPIO_Init+0x198>)
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	4833      	ldr	r0, [pc, #204]	; (8001924 <MX_GPIO_Init+0x194>)
 8001858:	f002 fea4 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Relay_ch_4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Relay_ch_4_Pin;
 800185c:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	2301      	movs	r3, #1
 8001864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4829      	ldr	r0, [pc, #164]	; (800191c <MX_GPIO_Init+0x18c>)
 8001876:	f002 fe95 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_ch_2_Pin Relay_ch_3_Pin */
  GPIO_InitStruct.Pin = Relay_ch_2_Pin|Relay_ch_3_Pin;
 800187a:	f241 0304 	movw	r3, #4100	; 0x1004
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	4823      	ldr	r0, [pc, #140]	; (8001920 <MX_GPIO_Init+0x190>)
 8001894:	f002 fe86 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Switch_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Signal_Pin;
 8001898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Switch_Signal_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	481c      	ldr	r0, [pc, #112]	; (8001920 <MX_GPIO_Init+0x190>)
 80018ae:	f002 fe79 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Index_Signal_Pin */
  GPIO_InitStruct.Pin = Index_Signal_Pin;
 80018b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <MX_GPIO_Init+0x19c>)
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Index_Signal_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	4816      	ldr	r0, [pc, #88]	; (8001920 <MX_GPIO_Init+0x190>)
 80018c8:	f002 fe6c 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitch_Signal_Pin */
  GPIO_InitStruct.Pin = LimitSwitch_Signal_Pin;
 80018cc:	2340      	movs	r3, #64	; 0x40
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitch_Signal_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	4811      	ldr	r0, [pc, #68]	; (8001924 <MX_GPIO_Init+0x194>)
 80018e0:	f002 fe60 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	480a      	ldr	r0, [pc, #40]	; (8001924 <MX_GPIO_Init+0x194>)
 80018fc:	f002 fe52 	bl	80045a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	2028      	movs	r0, #40	; 0x28
 8001906:	f002 fa06 	bl	8003d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800190a:	2028      	movs	r0, #40	; 0x28
 800190c:	f002 fa1f 	bl	8003d4e <HAL_NVIC_EnableIRQ>

}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400
 8001924:	40020800 	.word	0x40020800
 8001928:	10210000 	.word	0x10210000
 800192c:	10110000 	.word	0x10110000

08001930 <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 12288
#define  MAX_ENCODER_PERIOD 24576

void EncoderVelocityAndPosition_Update()
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	ed2d 8b02 	vpush	{d8}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;
	static uint32_t Velocity_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 800193a:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <EncoderVelocityAndPosition_Update+0xbc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	61fb      	str	r3, [r7, #28]

	uint64_t EncoderNowTimestamp = micros();
 8001942:	f000 f8b7 	bl	8001ab4 <micros>
 8001946:	e9c7 0104 	strd	r0, r1, [r7, #16]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <EncoderVelocityAndPosition_Update+0xc0>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001954:	1a84      	subs	r4, r0, r2
 8001956:	eb61 0503 	sbc.w	r5, r1, r3
 800195a:	e9c7 4502 	strd	r4, r5, [r7, #8]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 800195e:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <EncoderVelocityAndPosition_Update+0xc4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	607b      	str	r3, [r7, #4]

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8001968:	4a22      	ldr	r2, [pc, #136]	; (80019f4 <EncoderVelocityAndPosition_Update+0xc4>)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 800196e:	4920      	ldr	r1, [pc, #128]	; (80019f0 <EncoderVelocityAndPosition_Update+0xc0>)
 8001970:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001974:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <EncoderVelocityAndPosition_Update+0xc8>)
 8001984:	edc3 7a05 	vstr	s15, [r3, #20]

	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a1c      	ldr	r2, [pc, #112]	; (80019fc <EncoderVelocityAndPosition_Update+0xcc>)
 800198c:	fb02 f303 	mul.w	r3, r2, r3
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001998:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800199c:	f7ff f9c0 	bl	8000d20 <__aeabi_ul2f>
 80019a0:	ee07 0a10 	vmov	s14, r0
 80019a4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80019a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ac:	ee17 2a90 	vmov	r2, s15
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <EncoderVelocityAndPosition_Update+0xd0>)
 80019b2:	601a      	str	r2, [r3, #0]

	// LPF
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*249))/250.0;
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <EncoderVelocityAndPosition_Update+0xd0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	ee07 3a90 	vmov	s15, r3
 80019bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <EncoderVelocityAndPosition_Update+0xd4>)
 80019c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80019c6:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a08 <EncoderVelocityAndPosition_Update+0xd8>
 80019ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001a0c <EncoderVelocityAndPosition_Update+0xdc>
 80019d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <EncoderVelocityAndPosition_Update+0xd4>)
 80019dc:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80019e0:	bf00      	nop
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	ecbd 8b02 	vpop	{d8}
 80019ea:	bdb0      	pop	{r4, r5, r7, pc}
 80019ec:	20000474 	.word	0x20000474
 80019f0:	200001e8 	.word	0x200001e8
 80019f4:	200001f0 	.word	0x200001f0
 80019f8:	20000108 	.word	0x20000108
 80019fc:	000f4240 	.word	0x000f4240
 8001a00:	200001f4 	.word	0x200001f4
 8001a04:	20000138 	.word	0x20000138
 8001a08:	43790000 	.word	0x43790000
 8001a0c:	437a0000 	.word	0x437a0000

08001a10 <HAL_TIM_PeriodElapsedCallback>:
{
	HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a10:	b4b0      	push	{r4, r5, r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d109      	bne.n	8001a34 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001a2a:	f143 0500 	adc.w	r5, r3, #0
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a30:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bcb0      	pop	{r4, r5, r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200004bc 	.word	0x200004bc
 8001a44:	200000b0 	.word	0x200000b0

08001a48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13) // If The INT Source Is EXTI Line15 -> index  ///13 for test
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a58:	d11c      	bne.n	8001a94 <HAL_GPIO_EXTI_Callback+0x4c>
	{
    	if ((Munmunbot_State == STATE_PreSetHome) || (Munmunbot_State == STATE_PreSetHome))
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <HAL_GPIO_EXTI_Callback+0x54>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b07      	cmp	r3, #7
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_EXTI_Callback+0x22>
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_GPIO_EXTI_Callback+0x54>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b07      	cmp	r3, #7
 8001a68:	d114      	bne.n	8001a94 <HAL_GPIO_EXTI_Callback+0x4c>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d110      	bne.n	8001a94 <HAL_GPIO_EXTI_Callback+0x4c>
    		{
    			HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001a78:	6852      	ldr	r2, [r2, #4]
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
    			SethomeMode = SetHomeState_2;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	701a      	strb	r2, [r3, #0]
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	4809      	ldr	r0, [pc, #36]	; (8001aac <HAL_GPIO_EXTI_Callback+0x64>)
 8001a88:	f002 ff28 	bl	80048dc <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_GPIO_EXTI_Callback+0x68>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	635a      	str	r2, [r3, #52]	; 0x34
    		}
    	}
	}
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	200000d9 	.word	0x200000d9
 8001aa4:	20000474 	.word	0x20000474
 8001aa8:	200001d8 	.word	0x200001d8
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	200003cc 	.word	0x200003cc

08001ab4 <micros>:

uint64_t micros()
{
 8001ab4:	b4b0      	push	{r4, r5, r7}
 8001ab6:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <micros+0x2c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f04f 0100 	mov.w	r1, #0
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <micros+0x30>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	1884      	adds	r4, r0, r2
 8001acc:	eb41 0503 	adc.w	r5, r1, r3
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	462b      	mov	r3, r5
}
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bcb0      	pop	{r4, r5, r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	200004bc 	.word	0x200004bc
 8001ae4:	200000b0 	.word	0x200000b0

08001ae8 <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001af6:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	009a      	lsls	r2, r3, #2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 10;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	220a      	movs	r2, #10
 8001b06:	609a      	str	r2, [r3, #8]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	0000      	movs	r0, r0
	...

08001b18 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.25*(CUSSvar->PPRxQEI))/3.141;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fc98 	bl	800045c <__aeabi_ui2d>
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <TrajectoryGenerationStructureInit+0xe8>)
 8001b32:	f7fe fd0d 	bl	8000550 <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	a32e      	add	r3, pc, #184	; (adr r3, 8001bf8 <TrajectoryGenerationStructureInit+0xe0>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fe2e 	bl	80007a4 <__aeabi_ddiv>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7fe ffce 	bl	8000af0 <__aeabi_d2f>
 8001b54:	4602      	mov	r2, r0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	615a      	str	r2, [r3, #20]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fc78 	bl	800045c <__aeabi_ui2d>
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <TrajectoryGenerationStructureInit+0xec>)
 8001b72:	f7fe fe17 	bl	80007a4 <__aeabi_ddiv>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7fe ffb7 	bl	8000af0 <__aeabi_d2f>
 8001b82:	4602      	mov	r2, r0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = CUSSStruc.PPRxQEI;  /// PPRxQEI == 0 degree
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <TrajectoryGenerationStructureInit+0xf0>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	TGSvar->Mode = 0;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	669a      	str	r2, [r3, #104]	; 0x68
	TGSvar->Submode = 0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	66da      	str	r2, [r3, #108]	; 0x6c
	TGSvar->Loop_Freq = 10000;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bac:	649a      	str	r2, [r3, #72]	; 0x48
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb2:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <TrajectoryGenerationStructureInit+0xf4>)
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	edd3 6a04 	vldr	s13, [r3, #16]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	ed93 7a05 	vldr	s14, [r3, #20]
 8001bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	9ba5e354 	.word	0x9ba5e354
 8001bfc:	400920c4 	.word	0x400920c4
 8001c00:	3fd00000 	.word	0x3fd00000
 8001c04:	404e0000 	.word	0x404e0000
 8001c08:	200001d8 	.word	0x200001d8
 8001c0c:	000f4240 	.word	0x000f4240

08001c10 <VelocityControllerInit>:

void VelocityControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <VelocityControllerInit+0x58>)
 8001c1e:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 0.2;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <VelocityControllerInit+0x5c>)
 8001c24:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0.1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <VelocityControllerInit+0x60>)
 8001c2a:	609a      	str	r2, [r3, #8]
	VCvar->Integral_Value = 0;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7fe fc51 	bl	80004e4 <__aeabi_ul2d>
 8001c42:	a307      	add	r3, pc, #28	; (adr r3, 8001c60 <VelocityControllerInit+0x50>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	f7fe fdac 	bl	80007a4 <__aeabi_ddiv>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	00000000 	.word	0x00000000
 8001c64:	412e8480 	.word	0x412e8480
 8001c68:	40a00000 	.word	0x40a00000
 8001c6c:	3e4ccccd 	.word	0x3e4ccccd
 8001c70:	3dcccccd 	.word	0x3dcccccd
 8001c74:	00000000 	.word	0x00000000

08001c78 <DisplacementControllerInit>:

void DisplacementControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <DisplacementControllerInit+0x58>)
 8001c86:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 0.2;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <DisplacementControllerInit+0x5c>)
 8001c8c:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
	VCvar->Integral_Value = 0;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe fc1c 	bl	80004e4 <__aeabi_ul2d>
 8001cac:	a306      	add	r3, pc, #24	; (adr r3, 8001cc8 <DisplacementControllerInit+0x50>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	f7fe fd77 	bl	80007a4 <__aeabi_ddiv>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	412e8480 	.word	0x412e8480
 8001cd0:	40a00000 	.word	0x40a00000
 8001cd4:	3e4ccccd 	.word	0x3e4ccccd

08001cd8 <TrajectoryGenerationVelocityMaxSetting>:

void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp))/(60.0);   ///RPM to pps
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	6892      	ldr	r2, [r2, #8]
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fbb4 	bl	800045c <__aeabi_ui2d>
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <TrajectoryGenerationVelocityMaxSetting+0x6c>)
 8001cfa:	f7fe fd53 	bl	80007a4 <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe fef3 	bl	8000af0 <__aeabi_d2f>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	611a      	str	r2, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	edd3 6a04 	vldr	s13, [r3, #16]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	404e0000 	.word	0x404e0000

08001d48 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	if (MovingLinkMode == LMM_Set_Pos_Directly)
 8001d4c:	4b94      	ldr	r3, [pc, #592]	; (8001fa0 <TrajectoryGenerationPrepareDATA+0x258>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d165      	bne.n	8001e20 <TrajectoryGenerationPrepareDATA+0xd8>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 8001d54:	4b93      	ldr	r3, [pc, #588]	; (8001fa4 <TrajectoryGenerationPrepareDATA+0x25c>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b93      	ldr	r3, [pc, #588]	; (8001fa8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	fb03 f302 	mul.w	r3, r3, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fb7a 	bl	800045c <__aeabi_ui2d>
 8001d68:	a38b      	add	r3, pc, #556	; (adr r3, 8001f98 <TrajectoryGenerationPrepareDATA+0x250>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fd19 	bl	80007a4 <__aeabi_ddiv>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7fe feb9 	bl	8000af0 <__aeabi_d2f>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4a8a      	ldr	r2, [pc, #552]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001d82:	6593      	str	r3, [r2, #88]	; 0x58
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 8001d84:	4b89      	ldr	r3, [pc, #548]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001d86:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001d8a:	4b87      	ldr	r3, [pc, #540]	; (8001fa8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	ee07 3a90 	vmov	s15, r3
 8001d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	db0d      	blt.n	8001dbc <TrajectoryGenerationPrepareDATA+0x74>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001da0:	4b82      	ldr	r3, [pc, #520]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001da2:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001da6:	4b80      	ldr	r3, [pc, #512]	; (8001fa8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db6:	4b7d      	ldr	r3, [pc, #500]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001db8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		  }
		  TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8001dbc:	4b7b      	ldr	r3, [pc, #492]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001dbe:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001dc2:	4b79      	ldr	r3, [pc, #484]	; (8001fa8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd2:	4b76      	ldr	r3, [pc, #472]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001dd4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

		  if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 8001dd8:	4b74      	ldr	r3, [pc, #464]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001dda:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001dde:	4b73      	ldr	r3, [pc, #460]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001de0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001de4:	eeb4 7a67 	vcmp.f32	s14, s15
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	d00e      	beq.n	8001e0c <TrajectoryGenerationPrepareDATA+0xc4>
		  {
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8001dee:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001df0:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001df4:	4b6d      	ldr	r3, [pc, #436]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001df6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfe:	4b6b      	ldr	r3, [pc, #428]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001e00:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			  Munmunbot_State = STATE_Calculation;
 8001e04:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <TrajectoryGenerationPrepareDATA+0x268>)
 8001e06:	2203      	movs	r2, #3
 8001e08:	701a      	strb	r2, [r3, #0]
	  else  ///shouldn't happen
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
	  }
}
 8001e0a:	e0c1      	b.n	8001f90 <TrajectoryGenerationPrepareDATA+0x248>
			Munmunbot_State = STATE_Idle;
 8001e0c:	4b68      	ldr	r3, [pc, #416]	; (8001fb0 <TrajectoryGenerationPrepareDATA+0x268>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8001e12:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <TrajectoryGenerationPrepareDATA+0x258>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
			ACK2Return(&UART2);
 8001e18:	4866      	ldr	r0, [pc, #408]	; (8001fb4 <TrajectoryGenerationPrepareDATA+0x26c>)
 8001e1a:	f000 fdd1 	bl	80029c0 <ACK2Return>
}
 8001e1e:	e0b7      	b.n	8001f90 <TrajectoryGenerationPrepareDATA+0x248>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 8001e20:	4b5f      	ldr	r3, [pc, #380]	; (8001fa0 <TrajectoryGenerationPrepareDATA+0x258>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d004      	beq.n	8001e32 <TrajectoryGenerationPrepareDATA+0xea>
 8001e28:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <TrajectoryGenerationPrepareDATA+0x258>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	f040 80a8 	bne.w	8001f82 <TrajectoryGenerationPrepareDATA+0x23a>
		  if (NumberOfStationToGo == 0)
 8001e32:	4b61      	ldr	r3, [pc, #388]	; (8001fb8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10f      	bne.n	8001e5a <TrajectoryGenerationPrepareDATA+0x112>
				Munmunbot_State = STATE_Idle;
 8001e3a:	4b5d      	ldr	r3, [pc, #372]	; (8001fb0 <TrajectoryGenerationPrepareDATA+0x268>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 8001e40:	4b5e      	ldr	r3, [pc, #376]	; (8001fbc <TrajectoryGenerationPrepareDATA+0x274>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 8001e46:	4b5c      	ldr	r3, [pc, #368]	; (8001fb8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8001e4c:	4b54      	ldr	r3, [pc, #336]	; (8001fa0 <TrajectoryGenerationPrepareDATA+0x258>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 8001e52:	4858      	ldr	r0, [pc, #352]	; (8001fb4 <TrajectoryGenerationPrepareDATA+0x26c>)
 8001e54:	f000 fdb4 	bl	80029c0 <ACK2Return>
		  if (NumberOfStationToGo == 0)
 8001e58:	e09a      	b.n	8001f90 <TrajectoryGenerationPrepareDATA+0x248>
			Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 8001e5a:	4b58      	ldr	r3, [pc, #352]	; (8001fbc <TrajectoryGenerationPrepareDATA+0x274>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b57      	ldr	r3, [pc, #348]	; (8001fc0 <TrajectoryGenerationPrepareDATA+0x278>)
 8001e62:	5c9a      	ldrb	r2, [r3, r2]
 8001e64:	4b57      	ldr	r3, [pc, #348]	; (8001fc4 <TrajectoryGenerationPrepareDATA+0x27c>)
 8001e66:	701a      	strb	r2, [r3, #0]
			if (Current_Station > 10)   //pass input
 8001e68:	4b56      	ldr	r3, [pc, #344]	; (8001fc4 <TrajectoryGenerationPrepareDATA+0x27c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b0a      	cmp	r3, #10
 8001e6e:	d90c      	bls.n	8001e8a <TrajectoryGenerationPrepareDATA+0x142>
				NumberOfStationPTR += 1;
 8001e70:	4b52      	ldr	r3, [pc, #328]	; (8001fbc <TrajectoryGenerationPrepareDATA+0x274>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <TrajectoryGenerationPrepareDATA+0x274>)
 8001e7a:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 8001e7c:	4b4e      	ldr	r3, [pc, #312]	; (8001fb8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001e86:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001e88:	e082      	b.n	8001f90 <TrajectoryGenerationPrepareDATA+0x248>
				TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0));   ///fix this if change algorithm
 8001e8a:	4b4e      	ldr	r3, [pc, #312]	; (8001fc4 <TrajectoryGenerationPrepareDATA+0x27c>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	4a4d      	ldr	r2, [pc, #308]	; (8001fc8 <TrajectoryGenerationPrepareDATA+0x280>)
 8001e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	fb03 f302 	mul.w	r3, r3, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fadb 	bl	800045c <__aeabi_ui2d>
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	4b48      	ldr	r3, [pc, #288]	; (8001fcc <TrajectoryGenerationPrepareDATA+0x284>)
 8001eac:	f7fe fc7a 	bl	80007a4 <__aeabi_ddiv>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7fe fe1a 	bl	8000af0 <__aeabi_d2f>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4a3b      	ldr	r2, [pc, #236]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001ec0:	6593      	str	r3, [r2, #88]	; 0x58
				if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)  ///wrap input into 1 revolute. ///shouldn't happen
 8001ec2:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001ec4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001ec8:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	ee07 3a90 	vmov	s15, r3
 8001ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001edc:	db0d      	blt.n	8001efa <TrajectoryGenerationPrepareDATA+0x1b2>
					TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001ede:	4b33      	ldr	r3, [pc, #204]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001ee0:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001ee4:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001ef6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8001efa:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001efc:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001f00:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001f12:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				if (TrjStruc.Desire_Theta == TrjStruc.Start_Theta)
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001f18:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001f1c:	4b23      	ldr	r3, [pc, #140]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001f1e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001f22:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2a:	d10f      	bne.n	8001f4c <TrajectoryGenerationPrepareDATA+0x204>
					NumberOfStationPTR += 1;
 8001f2c:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <TrajectoryGenerationPrepareDATA+0x274>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <TrajectoryGenerationPrepareDATA+0x274>)
 8001f36:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001f42:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_End_Effector_Working;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <TrajectoryGenerationPrepareDATA+0x268>)
 8001f46:	2205      	movs	r2, #5
 8001f48:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001f4a:	e021      	b.n	8001f90 <TrajectoryGenerationPrepareDATA+0x248>
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8001f4c:	4b17      	ldr	r3, [pc, #92]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001f4e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001f54:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <TrajectoryGenerationPrepareDATA+0x264>)
 8001f5e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
					Munmunbot_State = STATE_Calculation;
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <TrajectoryGenerationPrepareDATA+0x268>)
 8001f64:	2203      	movs	r2, #3
 8001f66:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <TrajectoryGenerationPrepareDATA+0x274>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <TrajectoryGenerationPrepareDATA+0x274>)
 8001f72:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001f7e:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001f80:	e006      	b.n	8001f90 <TrajectoryGenerationPrepareDATA+0x248>
		MovingLinkMode = LMM_Not_Set;
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <TrajectoryGenerationPrepareDATA+0x258>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <TrajectoryGenerationPrepareDATA+0x268>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
}
 8001f8e:	e7ff      	b.n	8001f90 <TrajectoryGenerationPrepareDATA+0x248>
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	f3af 8000 	nop.w
 8001f98:	99999999 	.word	0x99999999
 8001f9c:	40eeadf9 	.word	0x40eeadf9
 8001fa0:	200000ee 	.word	0x200000ee
 8001fa4:	200000ec 	.word	0x200000ec
 8001fa8:	200001d8 	.word	0x200001d8
 8001fac:	20000168 	.word	0x20000168
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	200000b8 	.word	0x200000b8
 8001fb8:	200000f0 	.word	0x200000f0
 8001fbc:	200000f1 	.word	0x200000f1
 8001fc0:	200000dc 	.word	0x200000dc
 8001fc4:	200000ef 	.word	0x200000ef
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	40768000 	.word	0x40768000

08001fd0 <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 8001fd0:	b5b0      	push	{r4, r5, r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 8001fd4:	4b84      	ldr	r3, [pc, #528]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8001fd6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001fda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe2:	d518      	bpl.n	8002016 <TrajectoryGenerationCalculation+0x46>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 8001fe4:	4b80      	ldr	r3, [pc, #512]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8001fe6:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fea:	eef1 7a67 	vneg.f32	s15, s15
 8001fee:	4b7e      	ldr	r3, [pc, #504]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8001ff0:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 8001ff4:	4b7c      	ldr	r3, [pc, #496]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8001ff6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ffa:	eef1 7a67 	vneg.f32	s15, s15
 8001ffe:	4b7a      	ldr	r3, [pc, #488]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002000:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 8002004:	4b78      	ldr	r3, [pc, #480]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002006:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800200a:	eef1 7a67 	vneg.f32	s15, s15
 800200e:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002010:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8002014:	e013      	b.n	800203e <TrajectoryGenerationCalculation+0x6e>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 8002016:	4b74      	ldr	r3, [pc, #464]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002018:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800201c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002024:	dd0b      	ble.n	800203e <TrajectoryGenerationCalculation+0x6e>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 8002026:	4b70      	ldr	r3, [pc, #448]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	4a6f      	ldr	r2, [pc, #444]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 800202c:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 800202e:	4b6e      	ldr	r3, [pc, #440]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	4a6d      	ldr	r2, [pc, #436]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002034:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 8002036:	4b6c      	ldr	r3, [pc, #432]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203a:	4a6b      	ldr	r2, [pc, #428]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 800203c:	6653      	str	r3, [r2, #100]	; 0x64
	  }

	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 800203e:	4b6a      	ldr	r3, [pc, #424]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002040:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002044:	4b68      	ldr	r3, [pc, #416]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002046:	edd3 7a03 	vldr	s15, [r3, #12]
 800204a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	d554      	bpl.n	80020fe <TrajectoryGenerationCalculation+0x12e>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 8002054:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002056:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800205a:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 800205c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002060:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002064:	ee16 0a90 	vmov	r0, s13
 8002068:	f7fe fa1a 	bl	80004a0 <__aeabi_f2d>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	ec43 2b10 	vmov	d0, r2, r3
 8002074:	f007 f8d0 	bl	8009218 <sqrt>
 8002078:	ec53 2b10 	vmov	r2, r3, d0
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fd36 	bl	8000af0 <__aeabi_d2f>
 8002084:	4603      	mov	r3, r0
 8002086:	4a58      	ldr	r2, [pc, #352]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002088:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 800208a:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	4a56      	ldr	r2, [pc, #344]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002090:	6253      	str	r3, [r2, #36]	; 0x24
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 8002092:	4b55      	ldr	r3, [pc, #340]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002094:	ed93 7a07 	vldr	s14, [r3, #28]
 8002098:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 800209a:	edd3 6a01 	vldr	s13, [r3, #4]
 800209e:	4b52      	ldr	r3, [pc, #328]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 80020a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80020a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ac:	ee17 0a90 	vmov	r0, s15
 80020b0:	f7fe f9f6 	bl	80004a0 <__aeabi_f2d>
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020bc:	f7fe fb72 	bl	80007a4 <__aeabi_ddiv>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4614      	mov	r4, r2
 80020c6:	461d      	mov	r5, r3
 80020c8:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe f9e7 	bl	80004a0 <__aeabi_f2d>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4620      	mov	r0, r4
 80020d8:	4629      	mov	r1, r5
 80020da:	f7fe f883 	bl	80001e4 <__adddf3>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7fe fd03 	bl	8000af0 <__aeabi_d2f>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4a3e      	ldr	r2, [pc, #248]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 80020ee:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Mode = 0;
 80020f0:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	669a      	str	r2, [r3, #104]	; 0x68
		 TrjStruc.Submode = 0;
 80020f6:	4b3c      	ldr	r3, [pc, #240]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80020fc:	e063      	b.n	80021c6 <TrajectoryGenerationCalculation+0x1f6>
	  }
	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 80020fe:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002100:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002104:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002106:	edd3 7a03 	vldr	s15, [r3, #12]
 800210a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800210e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002112:	db58      	blt.n	80021c6 <TrajectoryGenerationCalculation+0x1f6>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 8002114:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002116:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800211a:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 800211c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002120:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002124:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002126:	ed93 7a04 	vldr	s14, [r3, #16]
 800212a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800212e:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002130:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8002134:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002138:	4a2b      	ldr	r2, [pc, #172]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 800213a:	6253      	str	r3, [r2, #36]	; 0x24
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 800213c:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 800213e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002142:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002144:	edd3 6a00 	vldr	s13, [r3]
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002156:	ee17 0a90 	vmov	r0, s15
 800215a:	f7fe f9a1 	bl	80004a0 <__aeabi_f2d>
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002166:	f7fe fb1d 	bl	80007a4 <__aeabi_ddiv>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4614      	mov	r4, r2
 8002170:	461d      	mov	r5, r3
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f992 	bl	80004a0 <__aeabi_f2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4620      	mov	r0, r4
 8002182:	4629      	mov	r1, r5
 8002184:	f7fe f82e 	bl	80001e4 <__adddf3>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fcae 	bl	8000af0 <__aeabi_d2f>
 8002194:	4603      	mov	r3, r0
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 8002198:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 800219c:	ed93 7a06 	vldr	s14, [r3, #24]
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 80021a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80021a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 80021ac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80021b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 80021b6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		  TrjStruc.Mode = 1;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 80021bc:	2201      	movs	r2, #1
 80021be:	669a      	str	r2, [r3, #104]	; 0x68
		  TrjStruc.Submode = 0;
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	66da      	str	r2, [r3, #108]	; 0x6c
	  }
	 TrjStruc.Equation_Timestamp = micros();
 80021c6:	f7ff fc75 	bl	8001ab4 <micros>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4906      	ldr	r1, [pc, #24]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 80021d0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 TrjStruc.Loop_Timestamp = micros();
 80021d4:	f7ff fc6e 	bl	8001ab4 <micros>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4902      	ldr	r1, [pc, #8]	; (80021e8 <TrajectoryGenerationCalculation+0x218>)
 80021de:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 80021e2:	bf00      	nop
 80021e4:	bdb0      	pop	{r4, r5, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000168 	.word	0x20000168
 80021ec:	00000000 	.word	0x00000000

080021f0 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 80021f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 80021f8:	f7ff fc5c 	bl	8001ab4 <micros>
 80021fc:	4bb2      	ldr	r3, [pc, #712]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80021fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002202:	1a84      	subs	r4, r0, r2
 8002204:	eb61 0503 	sbc.w	r5, r1, r3
 8002208:	4620      	mov	r0, r4
 800220a:	4629      	mov	r1, r5
 800220c:	f7fe f96a 	bl	80004e4 <__aeabi_ul2d>
 8002210:	a3ab      	add	r3, pc, #684	; (adr r3, 80024c0 <TrajectoryGenerationProcess+0x2d0>)
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	f7fe fac5 	bl	80007a4 <__aeabi_ddiv>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	49aa      	ldr	r1, [pc, #680]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002220:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	 switch (TrjStruc.Mode)
 8002224:	4ba8      	ldr	r3, [pc, #672]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002228:	2b02      	cmp	r3, #2
 800222a:	f000 8218 	beq.w	800265e <TrajectoryGenerationProcess+0x46e>
 800222e:	2b02      	cmp	r3, #2
 8002230:	f200 8220 	bhi.w	8002674 <TrajectoryGenerationProcess+0x484>
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <TrajectoryGenerationProcess+0x50>
 8002238:	2b01      	cmp	r3, #1
 800223a:	f000 80e0 	beq.w	80023fe <TrajectoryGenerationProcess+0x20e>
		  case 2:
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  break;
		  }
}
 800223e:	e219      	b.n	8002674 <TrajectoryGenerationProcess+0x484>
			  if (TrjStruc.Submode == 0)
 8002240:	4ba1      	ldr	r3, [pc, #644]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d15b      	bne.n	8002300 <TrajectoryGenerationProcess+0x110>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002248:	4b9f      	ldr	r3, [pc, #636]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f927 	bl	80004a0 <__aeabi_f2d>
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	4b9d      	ldr	r3, [pc, #628]	; (80024cc <TrajectoryGenerationProcess+0x2dc>)
 8002258:	f7fe f97a 	bl	8000550 <__aeabi_dmul>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4614      	mov	r4, r2
 8002262:	461d      	mov	r5, r3
 8002264:	4b98      	ldr	r3, [pc, #608]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002266:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800226a:	4b97      	ldr	r3, [pc, #604]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 800226c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002270:	f7fe f96e 	bl	8000550 <__aeabi_dmul>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4620      	mov	r0, r4
 800227a:	4629      	mov	r1, r5
 800227c:	f7fe f968 	bl	8000550 <__aeabi_dmul>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4614      	mov	r4, r2
 8002286:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 8002288:	4b8f      	ldr	r3, [pc, #572]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f907 	bl	80004a0 <__aeabi_f2d>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4620      	mov	r0, r4
 8002298:	4629      	mov	r1, r5
 800229a:	f7fd ffa3 	bl	80001e4 <__adddf3>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	f7fe fc23 	bl	8000af0 <__aeabi_d2f>
 80022aa:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80022ac:	4a86      	ldr	r2, [pc, #536]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80022ae:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80022b0:	f7ff fc00 	bl	8001ab4 <micros>
 80022b4:	4b84      	ldr	r3, [pc, #528]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80022b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80022ba:	1a84      	subs	r4, r0, r2
 80022bc:	613c      	str	r4, [r7, #16]
 80022be:	eb61 0303 	sbc.w	r3, r1, r3
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022c8:	f7fe fd2a 	bl	8000d20 <__aeabi_ul2f>
 80022cc:	ee06 0a90 	vmov	s13, r0
 80022d0:	4b7d      	ldr	r3, [pc, #500]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80022d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80022d6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80024d0 <TrajectoryGenerationProcess+0x2e0>
 80022da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022de:	eef4 6ae7 	vcmpe.f32	s13, s15
 80022e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e6:	da00      	bge.n	80022ea <TrajectoryGenerationProcess+0xfa>
			  break;
 80022e8:	e1c1      	b.n	800266e <TrajectoryGenerationProcess+0x47e>
					  TrjStruc.Equation_Timestamp = micros();
 80022ea:	f7ff fbe3 	bl	8001ab4 <micros>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4975      	ldr	r1, [pc, #468]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80022f4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 1;
 80022f8:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 80022fe:	e1b6      	b.n	800266e <TrajectoryGenerationProcess+0x47e>
			  else if (TrjStruc.Submode == 1)
 8002300:	4b71      	ldr	r3, [pc, #452]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 81b2 	bne.w	800266e <TrajectoryGenerationProcess+0x47e>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 800230a:	4b6f      	ldr	r3, [pc, #444]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f8c6 	bl	80004a0 <__aeabi_f2d>
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	4b6e      	ldr	r3, [pc, #440]	; (80024d4 <TrajectoryGenerationProcess+0x2e4>)
 800231a:	f7fe f919 	bl	8000550 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4614      	mov	r4, r2
 8002324:	461d      	mov	r5, r3
 8002326:	4b68      	ldr	r3, [pc, #416]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002328:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800232c:	4b66      	ldr	r3, [pc, #408]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 800232e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002332:	f7fe f90d 	bl	8000550 <__aeabi_dmul>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4620      	mov	r0, r4
 800233c:	4629      	mov	r1, r5
 800233e:	f7fe f907 	bl	8000550 <__aeabi_dmul>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4614      	mov	r4, r2
 8002348:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 800234a:	4b5f      	ldr	r3, [pc, #380]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 800234c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002350:	4b5d      	ldr	r3, [pc, #372]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002352:	edd3 7a01 	vldr	s15, [r3, #4]
 8002356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235a:	ee17 0a90 	vmov	r0, s15
 800235e:	f7fe f89f 	bl	80004a0 <__aeabi_f2d>
 8002362:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002364:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002368:	f7fe f8f2 	bl	8000550 <__aeabi_dmul>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4620      	mov	r0, r4
 8002372:	4629      	mov	r1, r5
 8002374:	f7fd ff36 	bl	80001e4 <__adddf3>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4614      	mov	r4, r2
 800237e:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 8002380:	4b51      	ldr	r3, [pc, #324]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f88b 	bl	80004a0 <__aeabi_f2d>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4620      	mov	r0, r4
 8002390:	4629      	mov	r1, r5
 8002392:	f7fd ff27 	bl	80001e4 <__adddf3>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	f7fe fba7 	bl	8000af0 <__aeabi_d2f>
 80023a2:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80023a4:	4a48      	ldr	r2, [pc, #288]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80023a6:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80023a8:	f7ff fb84 	bl	8001ab4 <micros>
 80023ac:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80023ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80023b2:	1a84      	subs	r4, r0, r2
 80023b4:	60bc      	str	r4, [r7, #8]
 80023b6:	eb61 0303 	sbc.w	r3, r1, r3
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023c0:	f7fe fcae 	bl	8000d20 <__aeabi_ul2f>
 80023c4:	ee06 0a90 	vmov	s13, r0
 80023c8:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80023ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80023ce:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80024d0 <TrajectoryGenerationProcess+0x2e0>
 80023d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80023da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023de:	da00      	bge.n	80023e2 <TrajectoryGenerationProcess+0x1f2>
			  break;
 80023e0:	e145      	b.n	800266e <TrajectoryGenerationProcess+0x47e>
					  TrjStruc.Equation_Timestamp = micros();
 80023e2:	f7ff fb67 	bl	8001ab4 <micros>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4937      	ldr	r1, [pc, #220]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80023ec:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 0;
 80023f0:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	66da      	str	r2, [r3, #108]	; 0x6c
					  TrjStruc.Mode = 2; ///Final Value Mode
 80023f6:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80023f8:	2202      	movs	r2, #2
 80023fa:	669a      	str	r2, [r3, #104]	; 0x68
			  break;
 80023fc:	e137      	b.n	800266e <TrajectoryGenerationProcess+0x47e>
			  if (TrjStruc.Submode == 0)
 80023fe:	4b32      	ldr	r3, [pc, #200]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d168      	bne.n	80024d8 <TrajectoryGenerationProcess+0x2e8>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002406:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe f848 	bl	80004a0 <__aeabi_f2d>
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <TrajectoryGenerationProcess+0x2dc>)
 8002416:	f7fe f89b 	bl	8000550 <__aeabi_dmul>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4614      	mov	r4, r2
 8002420:	461d      	mov	r5, r3
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002424:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 800242a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800242e:	f7fe f88f 	bl	8000550 <__aeabi_dmul>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4620      	mov	r0, r4
 8002438:	4629      	mov	r1, r5
 800243a:	f7fe f889 	bl	8000550 <__aeabi_dmul>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4614      	mov	r4, r2
 8002444:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe f828 	bl	80004a0 <__aeabi_f2d>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4620      	mov	r0, r4
 8002456:	4629      	mov	r1, r5
 8002458:	f7fd fec4 	bl	80001e4 <__adddf3>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fb44 	bl	8000af0 <__aeabi_d2f>
 8002468:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 800246a:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 800246c:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 800246e:	f7ff fb21 	bl	8001ab4 <micros>
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002474:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002478:	1a84      	subs	r4, r0, r2
 800247a:	603c      	str	r4, [r7, #0]
 800247c:	eb61 0303 	sbc.w	r3, r1, r3
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002486:	f7fe fc4b 	bl	8000d20 <__aeabi_ul2f>
 800248a:	ee06 0a90 	vmov	s13, r0
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80024d0 <TrajectoryGenerationProcess+0x2e0>
 8002498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249c:	eef4 6ae7 	vcmpe.f32	s13, s15
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	da00      	bge.n	80024a8 <TrajectoryGenerationProcess+0x2b8>
			  break;
 80024a6:	e0e4      	b.n	8002672 <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 80024a8:	f7ff fb04 	bl	8001ab4 <micros>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4905      	ldr	r1, [pc, #20]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80024b2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 1;
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <TrajectoryGenerationProcess+0x2d8>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 80024bc:	e0d9      	b.n	8002672 <TrajectoryGenerationProcess+0x482>
 80024be:	bf00      	nop
 80024c0:	00000000 	.word	0x00000000
 80024c4:	412e8480 	.word	0x412e8480
 80024c8:	20000168 	.word	0x20000168
 80024cc:	3fe00000 	.word	0x3fe00000
 80024d0:	49742400 	.word	0x49742400
 80024d4:	bfe00000 	.word	0xbfe00000
			  else if (TrjStruc.Submode == 1)
 80024d8:	4b69      	ldr	r3, [pc, #420]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 80024da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d148      	bne.n	8002572 <TrajectoryGenerationProcess+0x382>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 80024e0:	4b67      	ldr	r3, [pc, #412]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd ffdb 	bl	80004a0 <__aeabi_f2d>
 80024ea:	4b65      	ldr	r3, [pc, #404]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 80024ec:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80024f0:	f7fe f82e 	bl	8000550 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4614      	mov	r4, r2
 80024fa:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 80024fc:	4b60      	ldr	r3, [pc, #384]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	4618      	mov	r0, r3
 8002502:	f7fd ffcd 	bl	80004a0 <__aeabi_f2d>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4620      	mov	r0, r4
 800250c:	4629      	mov	r1, r5
 800250e:	f7fd fe69 	bl	80001e4 <__adddf3>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f7fe fae9 	bl	8000af0 <__aeabi_d2f>
 800251e:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002520:	4a57      	ldr	r2, [pc, #348]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 8002522:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 8002524:	f7ff fac6 	bl	8001ab4 <micros>
 8002528:	4b55      	ldr	r3, [pc, #340]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 800252a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800252e:	ebb0 0a02 	subs.w	sl, r0, r2
 8002532:	eb61 0b03 	sbc.w	fp, r1, r3
 8002536:	4650      	mov	r0, sl
 8002538:	4659      	mov	r1, fp
 800253a:	f7fe fbf1 	bl	8000d20 <__aeabi_ul2f>
 800253e:	ee06 0a90 	vmov	s13, r0
 8002542:	4b4f      	ldr	r3, [pc, #316]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 8002544:	edd3 7a02 	vldr	s15, [r3, #8]
 8002548:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002684 <TrajectoryGenerationProcess+0x494>
 800254c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002550:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	da00      	bge.n	800255c <TrajectoryGenerationProcess+0x36c>
			  break;
 800255a:	e08a      	b.n	8002672 <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 800255c:	f7ff faaa 	bl	8001ab4 <micros>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4946      	ldr	r1, [pc, #280]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 8002566:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 2;
 800256a:	4b45      	ldr	r3, [pc, #276]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 800256c:	2202      	movs	r2, #2
 800256e:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 8002570:	e07f      	b.n	8002672 <TrajectoryGenerationProcess+0x482>
			  else if (TrjStruc.Submode == 2)
 8002572:	4b43      	ldr	r3, [pc, #268]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 8002574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002576:	2b02      	cmp	r3, #2
 8002578:	d17b      	bne.n	8002672 <TrajectoryGenerationProcess+0x482>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fd ff8e 	bl	80004a0 <__aeabi_f2d>
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <TrajectoryGenerationProcess+0x498>)
 800258a:	f7fd ffe1 	bl	8000550 <__aeabi_dmul>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4614      	mov	r4, r2
 8002594:	461d      	mov	r5, r3
 8002596:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 8002598:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800259c:	4b38      	ldr	r3, [pc, #224]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 800259e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80025a2:	f7fd ffd5 	bl	8000550 <__aeabi_dmul>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4620      	mov	r0, r4
 80025ac:	4629      	mov	r1, r5
 80025ae:	f7fd ffcf 	bl	8000550 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4614      	mov	r4, r2
 80025b8:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ff6e 	bl	80004a0 <__aeabi_f2d>
 80025c4:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 80025c6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80025ca:	f7fd ffc1 	bl	8000550 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fd fe05 	bl	80001e4 <__adddf3>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4614      	mov	r4, r2
 80025e0:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 80025e2:	4b27      	ldr	r3, [pc, #156]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ff5a 	bl	80004a0 <__aeabi_f2d>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4620      	mov	r0, r4
 80025f2:	4629      	mov	r1, r5
 80025f4:	f7fd fdf6 	bl	80001e4 <__adddf3>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4610      	mov	r0, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	f7fe fa76 	bl	8000af0 <__aeabi_d2f>
 8002604:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002606:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 8002608:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 800260a:	f7ff fa53 	bl	8001ab4 <micros>
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 8002610:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002614:	ebb0 0802 	subs.w	r8, r0, r2
 8002618:	eb61 0903 	sbc.w	r9, r1, r3
 800261c:	4640      	mov	r0, r8
 800261e:	4649      	mov	r1, r9
 8002620:	f7fe fb7e 	bl	8000d20 <__aeabi_ul2f>
 8002624:	ee06 0a90 	vmov	s13, r0
 8002628:	4b15      	ldr	r3, [pc, #84]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002684 <TrajectoryGenerationProcess+0x494>
 8002632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002636:	eef4 6ae7 	vcmpe.f32	s13, s15
 800263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263e:	da00      	bge.n	8002642 <TrajectoryGenerationProcess+0x452>
			  break;
 8002640:	e017      	b.n	8002672 <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 8002642:	f7ff fa37 	bl	8001ab4 <micros>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	490d      	ldr	r1, [pc, #52]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 800264c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 0;
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 8002652:	2200      	movs	r2, #0
 8002654:	66da      	str	r2, [r3, #108]	; 0x6c
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 8002658:	2202      	movs	r2, #2
 800265a:	669a      	str	r2, [r3, #104]	; 0x68
			  break;
 800265c:	e009      	b.n	8002672 <TrajectoryGenerationProcess+0x482>
			  Moving_Link_Task_Flag = 1;
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <TrajectoryGenerationProcess+0x49c>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	4a05      	ldr	r2, [pc, #20]	; (8002680 <TrajectoryGenerationProcess+0x490>)
 800266a:	6213      	str	r3, [r2, #32]
			  break;
 800266c:	e002      	b.n	8002674 <TrajectoryGenerationProcess+0x484>
			  break;
 800266e:	bf00      	nop
 8002670:	e000      	b.n	8002674 <TrajectoryGenerationProcess+0x484>
			  break;
 8002672:	bf00      	nop
}
 8002674:	bf00      	nop
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800267e:	bf00      	nop
 8002680:	20000168 	.word	0x20000168
 8002684:	49742400 	.word	0x49742400
 8002688:	bfe00000 	.word	0xbfe00000
 800268c:	200000f8 	.word	0x200000f8

08002690 <PIDController2in1>:

void PIDController2in1()
{
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 8002694:	4b38      	ldr	r3, [pc, #224]	; (8002778 <PIDController2in1+0xe8>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a38      	ldr	r2, [pc, #224]	; (800277c <PIDController2in1+0xec>)
 800269a:	6113      	str	r3, [r2, #16]
    PositionPIDController.NowError = PositionPIDController.OutputFeedback-PositionPIDController.OutputDesire;
 800269c:	4b37      	ldr	r3, [pc, #220]	; (800277c <PIDController2in1+0xec>)
 800269e:	ed93 7a05 	vldr	s14, [r3, #20]
 80026a2:	4b36      	ldr	r3, [pc, #216]	; (800277c <PIDController2in1+0xec>)
 80026a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80026a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ac:	4b33      	ldr	r3, [pc, #204]	; (800277c <PIDController2in1+0xec>)
 80026ae:	edc3 7a07 	vstr	s15, [r3, #28]
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 80026b2:	4b32      	ldr	r3, [pc, #200]	; (800277c <PIDController2in1+0xec>)
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd fef2 	bl	80004a0 <__aeabi_f2d>
 80026bc:	4604      	mov	r4, r0
 80026be:	460d      	mov	r5, r1
 80026c0:	4b2e      	ldr	r3, [pc, #184]	; (800277c <PIDController2in1+0xec>)
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd feeb 	bl	80004a0 <__aeabi_f2d>
 80026ca:	4b2c      	ldr	r3, [pc, #176]	; (800277c <PIDController2in1+0xec>)
 80026cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80026d0:	f7fd ff3e 	bl	8000550 <__aeabi_dmul>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4620      	mov	r0, r4
 80026da:	4629      	mov	r1, r5
 80026dc:	f7fd fd82 	bl	80001e4 <__adddf3>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7fe fa02 	bl	8000af0 <__aeabi_d2f>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4a23      	ldr	r2, [pc, #140]	; (800277c <PIDController2in1+0xec>)
 80026f0:	6193      	str	r3, [r2, #24]
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 80026f2:	4b22      	ldr	r3, [pc, #136]	; (800277c <PIDController2in1+0xec>)
 80026f4:	ed93 7a00 	vldr	s14, [r3]
 80026f8:	4b20      	ldr	r3, [pc, #128]	; (800277c <PIDController2in1+0xec>)
 80026fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80026fe:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <PIDController2in1+0xec>)
 8002704:	edd3 6a01 	vldr	s13, [r3, #4]
 8002708:	4b1c      	ldr	r3, [pc, #112]	; (800277c <PIDController2in1+0xec>)
 800270a:	edd3 7a06 	vldr	s15, [r3, #24]
 800270e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002716:	ee17 0a90 	vmov	r0, s15
 800271a:	f7fd fec1 	bl	80004a0 <__aeabi_f2d>
 800271e:	4604      	mov	r4, r0
 8002720:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime);
 8002722:	4b16      	ldr	r3, [pc, #88]	; (800277c <PIDController2in1+0xec>)
 8002724:	ed93 7a02 	vldr	s14, [r3, #8]
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <PIDController2in1+0xec>)
 800272a:	edd3 6a07 	vldr	s13, [r3, #28]
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <PIDController2in1+0xec>)
 8002730:	edd3 7a08 	vldr	s15, [r3, #32]
 8002734:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273c:	ee17 0a90 	vmov	r0, s15
 8002740:	f7fd feae 	bl	80004a0 <__aeabi_f2d>
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <PIDController2in1+0xec>)
 8002746:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800274a:	f7fe f82b 	bl	80007a4 <__aeabi_ddiv>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4620      	mov	r0, r4
 8002754:	4629      	mov	r1, r5
 8002756:	f7fd fd45 	bl	80001e4 <__adddf3>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f7fe f9c5 	bl	8000af0 <__aeabi_d2f>
 8002766:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <PIDController2in1+0xec>)
 800276a:	60d3      	str	r3, [r2, #12]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <PIDController2in1+0xec>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	4a02      	ldr	r2, [pc, #8]	; (800277c <PIDController2in1+0xec>)
 8002772:	6213      	str	r3, [r2, #32]
//    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
//					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
//					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime);
//    VelocityPIDController.PreviousError = VelocityPIDController.NowError;

}
 8002774:	bf00      	nop
 8002776:	bdb0      	pop	{r4, r5, r7, pc}
 8002778:	20000168 	.word	0x20000168
 800277c:	20000108 	.word	0x20000108

08002780 <UARTInit>:



///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <UARTInit+0x4c>)
 800278a:	88db      	ldrh	r3, [r3, #6]
 800278c:	4619      	mov	r1, r3
 800278e:	2001      	movs	r0, #1
 8002790:	f006 fc72 	bl	8009078 <calloc>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <UARTInit+0x4c>)
 800279e:	889b      	ldrh	r3, [r3, #4]
 80027a0:	4619      	mov	r1, r3
 80027a2:	2001      	movs	r0, #1
 80027a4:	f006 fc68 	bl	8009078 <calloc>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	81da      	strh	r2, [r3, #14]
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200000b8 	.word	0x200000b8

080027d0 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6919      	ldr	r1, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	88db      	ldrh	r3, [r3, #6]
 80027e4:	461a      	mov	r2, r3
 80027e6:	f005 fdc3 	bl	8008370 <HAL_UART_Receive_DMA>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	88db      	ldrh	r3, [r3, #6]
 80027fe:	461a      	mov	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	1ad3      	subs	r3, r2, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8002820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002824:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	8a9b      	ldrh	r3, [r3, #20]
 800282a:	461c      	mov	r4, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ffe0 	bl	80027f2 <UARTGetRxHead>
 8002832:	4603      	mov	r3, r0
 8002834:	429c      	cmp	r4, r3
 8002836:	d013      	beq.n	8002860 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	8a92      	ldrh	r2, [r2, #20]
 8002840:	4413      	add	r3, r2
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8a9b      	ldrh	r3, [r3, #20]
 800284a:	3301      	adds	r3, #1
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	88d2      	ldrh	r2, [r2, #6]
 8002850:	fb93 f1f2 	sdiv	r1, r3, r2
 8002854:	fb02 f201 	mul.w	r2, r2, r1
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	b29a      	uxth	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8002860:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	bd90      	pop	{r4, r7, pc}

0800286c <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b20      	cmp	r3, #32
 8002880:	d13d      	bne.n	80028fe <UARTTxDumpBuffer+0x92>
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <UARTTxDumpBuffer+0x9c>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d139      	bne.n	80028fe <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 800288a:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <UARTTxDumpBuffer+0x9c>)
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	89da      	ldrh	r2, [r3, #14]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	899b      	ldrh	r3, [r3, #12]
 8002898:	429a      	cmp	r2, r3
 800289a:	d02d      	beq.n	80028f8 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	89da      	ldrh	r2, [r3, #14]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d906      	bls.n	80028b6 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	89da      	ldrh	r2, [r3, #14]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	e005      	b.n	80028c2 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	889a      	ldrh	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	8992      	ldrh	r2, [r2, #12]
 80028d0:	4413      	add	r3, r2
 80028d2:	89fa      	ldrh	r2, [r7, #14]
 80028d4:	4619      	mov	r1, r3
 80028d6:	f005 fcdf 	bl	8008298 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	899b      	ldrh	r3, [r3, #12]
 80028de:	461a      	mov	r2, r3
 80028e0:	89fb      	ldrh	r3, [r7, #14]
 80028e2:	4413      	add	r3, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	8892      	ldrh	r2, [r2, #4]
 80028e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80028ec:	fb02 f201 	mul.w	r2, r2, r1
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 80028f8:	4b03      	ldr	r3, [pc, #12]	; (8002908 <UARTTxDumpBuffer+0x9c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
	}
}
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200001f8 	.word	0x200001f8

0800290c <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	4613      	mov	r3, r2
 8002918:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	889b      	ldrh	r3, [r3, #4]
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	4293      	cmp	r3, r2
 8002922:	bf28      	it	cs
 8002924:	4613      	movcs	r3, r2
 8002926:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002928:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	889b      	ldrh	r3, [r3, #4]
 800292e:	4619      	mov	r1, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	89db      	ldrh	r3, [r3, #14]
 8002934:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002936:	4293      	cmp	r3, r2
 8002938:	bfa8      	it	ge
 800293a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 800293c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	89d2      	ldrh	r2, [r2, #14]
 8002946:	4413      	add	r3, r2
 8002948:	8aba      	ldrh	r2, [r7, #20]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	4618      	mov	r0, r3
 800294e:	f006 fbc5 	bl	80090dc <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	89db      	ldrh	r3, [r3, #14]
 8002956:	461a      	mov	r2, r3
 8002958:	8afb      	ldrh	r3, [r7, #22]
 800295a:	4413      	add	r3, r2
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	8892      	ldrh	r2, [r2, #4]
 8002960:	fb93 f1f2 	sdiv	r1, r3, r2
 8002964:	fb02 f201 	mul.w	r2, r2, r1
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8002970:	8afa      	ldrh	r2, [r7, #22]
 8002972:	8abb      	ldrh	r3, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	d00a      	beq.n	800298e <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6898      	ldr	r0, [r3, #8]
 800297c:	8abb      	ldrh	r3, [r7, #20]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8002982:	8afa      	ldrh	r2, [r7, #22]
 8002984:	8abb      	ldrh	r3, [r7, #20]
 8002986:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002988:	461a      	mov	r2, r3
 800298a:	f006 fba7 	bl	80090dc <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff ff6c 	bl	800286c <UARTTxDumpBuffer>

}
 8002994:	bf00      	nop
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 80029a4:	f247 5358 	movw	r3, #30040	; 0x7558
 80029a8:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	2202      	movs	r2, #2
 80029b0:	4619      	mov	r1, r3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ffaa 	bl	800290c <UARTTxWrite>
	}
}
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 80029c8:	f646 6346 	movw	r3, #28230	; 0x6e46
 80029cc:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	2202      	movs	r2, #2
 80029d4:	4619      	mov	r1, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff ff98 	bl	800290c <UARTTxWrite>
	}
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	0000      	movs	r0, r0
	...

080029e8 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	b08e      	sub	sp, #56	; 0x38
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 80029f4:	4b8b      	ldr	r3, [pc, #556]	; (8002c24 <Munmunbot_Protocol+0x23c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	f200 83bd 	bhi.w	8003178 <Munmunbot_Protocol+0x790>
 80029fe:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <Munmunbot_Protocol+0x1c>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002a1d 	.word	0x08002a1d
 8002a08:	08002ad1 	.word	0x08002ad1
 8002a0c:	08002b13 	.word	0x08002b13
 8002a10:	08002b61 	.word	0x08002b61
 8002a14:	08002b85 	.word	0x08002b85
 8002a18:	08002c45 	.word	0x08002c45
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 8002a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a20:	111b      	asrs	r3, r3, #4
 8002a22:	b21b      	sxth	r3, r3
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	2b09      	cmp	r3, #9
 8002a2c:	f040 83a1 	bne.w	8003172 <Munmunbot_Protocol+0x78a>
			{
				CheckSum = dataIn;
 8002a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a34:	4a7c      	ldr	r2, [pc, #496]	; (8002c28 <Munmunbot_Protocol+0x240>)
 8002a36:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4b7a      	ldr	r3, [pc, #488]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002a44:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 8002a46:	4b79      	ldr	r3, [pc, #484]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b07      	cmp	r3, #7
 8002a4c:	d103      	bne.n	8002a56 <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 8002a4e:	4b75      	ldr	r3, [pc, #468]	; (8002c24 <Munmunbot_Protocol+0x23c>)
 8002a50:	2203      	movs	r2, #3
 8002a52:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 8002a54:	e38d      	b.n	8003172 <Munmunbot_Protocol+0x78a>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 8002a56:	4b75      	ldr	r3, [pc, #468]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d00b      	beq.n	8002a76 <Munmunbot_Protocol+0x8e>
 8002a5e:	4b73      	ldr	r3, [pc, #460]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d007      	beq.n	8002a76 <Munmunbot_Protocol+0x8e>
 8002a66:	4b71      	ldr	r3, [pc, #452]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d003      	beq.n	8002a76 <Munmunbot_Protocol+0x8e>
 8002a6e:	4b6f      	ldr	r3, [pc, #444]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d103      	bne.n	8002a7e <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 8002a76:	4b6b      	ldr	r3, [pc, #428]	; (8002c24 <Munmunbot_Protocol+0x23c>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
			break;
 8002a7c:	e379      	b.n	8003172 <Munmunbot_Protocol+0x78a>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8002a7e:	4b6b      	ldr	r3, [pc, #428]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d020      	beq.n	8002ac8 <Munmunbot_Protocol+0xe0>
 8002a86:	4b69      	ldr	r3, [pc, #420]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d01c      	beq.n	8002ac8 <Munmunbot_Protocol+0xe0>
 8002a8e:	4b67      	ldr	r3, [pc, #412]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d018      	beq.n	8002ac8 <Munmunbot_Protocol+0xe0>
 8002a96:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b09      	cmp	r3, #9
 8002a9c:	d014      	beq.n	8002ac8 <Munmunbot_Protocol+0xe0>
 8002a9e:	4b63      	ldr	r3, [pc, #396]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b0a      	cmp	r3, #10
 8002aa4:	d010      	beq.n	8002ac8 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8002aa6:	4b61      	ldr	r3, [pc, #388]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8002aaa:	2b0b      	cmp	r3, #11
 8002aac:	d00c      	beq.n	8002ac8 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8002aae:	4b5f      	ldr	r3, [pc, #380]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d008      	beq.n	8002ac8 <Munmunbot_Protocol+0xe0>
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b0d      	cmp	r3, #13
 8002abc:	d004      	beq.n	8002ac8 <Munmunbot_Protocol+0xe0>
 8002abe:	4b5b      	ldr	r3, [pc, #364]	; (8002c2c <Munmunbot_Protocol+0x244>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b0e      	cmp	r3, #14
 8002ac4:	f040 8355 	bne.w	8003172 <Munmunbot_Protocol+0x78a>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 8002ac8:	4b56      	ldr	r3, [pc, #344]	; (8002c24 <Munmunbot_Protocol+0x23c>)
 8002aca:	2205      	movs	r2, #5
 8002acc:	701a      	strb	r2, [r3, #0]
			break;
 8002ace:	e350      	b.n	8003172 <Munmunbot_Protocol+0x78a>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 8002ad0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ad4:	4b54      	ldr	r3, [pc, #336]	; (8002c28 <Munmunbot_Protocol+0x240>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	4a53      	ldr	r2, [pc, #332]	; (8002c28 <Munmunbot_Protocol+0x240>)
 8002adc:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	4b52      	ldr	r3, [pc, #328]	; (8002c30 <Munmunbot_Protocol+0x248>)
 8002ae6:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4b50      	ldr	r3, [pc, #320]	; (8002c34 <Munmunbot_Protocol+0x24c>)
 8002af4:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 8002af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002afa:	111b      	asrs	r3, r3, #4
 8002afc:	b21b      	sxth	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <Munmunbot_Protocol+0x24c>)
 8002b08:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 8002b0a:	4b46      	ldr	r3, [pc, #280]	; (8002c24 <Munmunbot_Protocol+0x23c>)
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	701a      	strb	r2, [r3, #0]

			 break;
 8002b10:	e332      	b.n	8003178 <Munmunbot_Protocol+0x790>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 8002b12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b16:	4b44      	ldr	r3, [pc, #272]	; (8002c28 <Munmunbot_Protocol+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a42      	ldr	r2, [pc, #264]	; (8002c28 <Munmunbot_Protocol+0x240>)
 8002b1e:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	b21a      	sxth	r2, r3
 8002b26:	4b42      	ldr	r3, [pc, #264]	; (8002c30 <Munmunbot_Protocol+0x248>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b21b      	sxth	r3, r3
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	4b3f      	ldr	r3, [pc, #252]	; (8002c30 <Munmunbot_Protocol+0x248>)
 8002b34:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	4b3c      	ldr	r3, [pc, #240]	; (8002c34 <Munmunbot_Protocol+0x24c>)
 8002b42:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 8002b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b48:	111b      	asrs	r3, r3, #4
 8002b4a:	b21b      	sxth	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <Munmunbot_Protocol+0x24c>)
 8002b56:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <Munmunbot_Protocol+0x23c>)
 8002b5a:	2205      	movs	r2, #5
 8002b5c:	701a      	strb	r2, [r3, #0]
			 break;
 8002b5e:	e30b      	b.n	8003178 <Munmunbot_Protocol+0x790>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 8002b60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b64:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <Munmunbot_Protocol+0x240>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4413      	add	r3, r2
 8002b6a:	4a2f      	ldr	r2, [pc, #188]	; (8002c28 <Munmunbot_Protocol+0x240>)
 8002b6c:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 8002b6e:	88fa      	ldrh	r2, [r7, #6]
 8002b70:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <Munmunbot_Protocol+0x250>)
 8002b72:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 8002b74:	4b30      	ldr	r3, [pc, #192]	; (8002c38 <Munmunbot_Protocol+0x250>)
 8002b76:	881a      	ldrh	r2, [r3, #0]
 8002b78:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <Munmunbot_Protocol+0x254>)
 8002b7a:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 8002b7c:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <Munmunbot_Protocol+0x23c>)
 8002b7e:	2204      	movs	r2, #4
 8002b80:	701a      	strb	r2, [r3, #0]

		   break;
 8002b82:	e2f9      	b.n	8003178 <Munmunbot_Protocol+0x790>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 8002b84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <Munmunbot_Protocol+0x240>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4a26      	ldr	r2, [pc, #152]	; (8002c28 <Munmunbot_Protocol+0x240>)
 8002b90:	6013      	str	r3, [r2, #0]
				if (n_station >= 2)
 8002b92:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <Munmunbot_Protocol+0x250>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d927      	bls.n	8002bea <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	4a28      	ldr	r2, [pc, #160]	; (8002c40 <Munmunbot_Protocol+0x258>)
 8002ba0:	7812      	ldrb	r2, [r2, #0]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	b2d9      	uxtb	r1, r3
 8002ba8:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <Munmunbot_Protocol+0x24c>)
 8002baa:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <Munmunbot_Protocol+0x258>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <Munmunbot_Protocol+0x258>)
 8002bb6:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 8002bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bbc:	111b      	asrs	r3, r3, #4
 8002bbe:	b21b      	sxth	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	4a1f      	ldr	r2, [pc, #124]	; (8002c40 <Munmunbot_Protocol+0x258>)
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	b2d9      	uxtb	r1, r3
 8002bcc:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <Munmunbot_Protocol+0x24c>)
 8002bce:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <Munmunbot_Protocol+0x258>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <Munmunbot_Protocol+0x258>)
 8002bda:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 8002bdc:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <Munmunbot_Protocol+0x250>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	3b02      	subs	r3, #2
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <Munmunbot_Protocol+0x250>)
 8002be6:	801a      	strh	r2, [r3, #0]
 8002be8:	e012      	b.n	8002c10 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <Munmunbot_Protocol+0x250>)
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d10e      	bne.n	8002c10 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <Munmunbot_Protocol+0x258>)
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	b2d9      	uxtb	r1, r3
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <Munmunbot_Protocol+0x24c>)
 8002c02:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <Munmunbot_Protocol+0x250>)
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <Munmunbot_Protocol+0x250>)
 8002c0e:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <Munmunbot_Protocol+0x250>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f040 82ae 	bne.w	8003176 <Munmunbot_Protocol+0x78e>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 8002c1a:	4b02      	ldr	r3, [pc, #8]	; (8002c24 <Munmunbot_Protocol+0x23c>)
 8002c1c:	2205      	movs	r2, #5
 8002c1e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002c20:	e2a9      	b.n	8003176 <Munmunbot_Protocol+0x78e>
 8002c22:	bf00      	nop
 8002c24:	200000d8 	.word	0x200000d8
 8002c28:	200001fc 	.word	0x200001fc
 8002c2c:	20000200 	.word	0x20000200
 8002c30:	20000202 	.word	0x20000202
 8002c34:	20000204 	.word	0x20000204
 8002c38:	20000304 	.word	0x20000304
 8002c3c:	20000306 	.word	0x20000306
 8002c40:	20000308 	.word	0x20000308

			case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 8002c44:	4ba3      	ldr	r3, [pc, #652]	; (8002ed4 <Munmunbot_Protocol+0x4ec>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4aa1      	ldr	r2, [pc, #644]	; (8002ed4 <Munmunbot_Protocol+0x4ec>)
 8002c4e:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 8002c50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c54:	4b9f      	ldr	r3, [pc, #636]	; (8002ed4 <Munmunbot_Protocol+0x4ec>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	f040 8276 	bne.w	800314a <Munmunbot_Protocol+0x762>
				{

					switch (ProtocolMode)
 8002c5e:	4b9e      	ldr	r3, [pc, #632]	; (8002ed8 <Munmunbot_Protocol+0x4f0>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	2b0d      	cmp	r3, #13
 8002c66:	f200 8271 	bhi.w	800314c <Munmunbot_Protocol+0x764>
 8002c6a:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <Munmunbot_Protocol+0x288>)
 8002c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c70:	08002ca9 	.word	0x08002ca9
 8002c74:	08002d1d 	.word	0x08002d1d
 8002c78:	08002d33 	.word	0x08002d33
 8002c7c:	08002d49 	.word	0x08002d49
 8002c80:	08002d6b 	.word	0x08002d6b
 8002c84:	08002d89 	.word	0x08002d89
 8002c88:	08002dad 	.word	0x08002dad
 8002c8c:	08002df7 	.word	0x08002df7
 8002c90:	08002e21 	.word	0x08002e21
 8002c94:	08002f15 	.word	0x08002f15
 8002c98:	0800302f 	.word	0x0800302f
 8002c9c:	08003103 	.word	0x08003103
 8002ca0:	08003119 	.word	0x08003119
 8002ca4:	0800312f 	.word	0x0800312f
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 8002ca8:	2391      	movs	r3, #145	; 0x91
 8002caa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 8002cae:	4b8b      	ldr	r3, [pc, #556]	; (8002edc <Munmunbot_Protocol+0x4f4>)
 8002cb0:	785b      	ldrb	r3, [r3, #1]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	b25a      	sxtb	r2, r3
 8002cb6:	4b89      	ldr	r3, [pc, #548]	; (8002edc <Munmunbot_Protocol+0x4f4>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b25b      	sxtb	r3, r3
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8002cc2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 8002cc6:	4b85      	ldr	r3, [pc, #532]	; (8002edc <Munmunbot_Protocol+0x4f4>)
 8002cc8:	78db      	ldrb	r3, [r3, #3]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	b25a      	sxtb	r2, r3
 8002cce:	4b83      	ldr	r3, [pc, #524]	; (8002edc <Munmunbot_Protocol+0x4f4>)
 8002cd0:	789b      	ldrb	r3, [r3, #2]
 8002cd2:	b25b      	sxtb	r3, r3
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	b25b      	sxtb	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8002cda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ce4:	2358      	movs	r3, #88	; 0x58
 8002ce6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002cea:	2375      	movs	r3, #117	; 0x75
 8002cec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 8002cf0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002cf4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002d00:	4413      	add	r3, r2
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						UARTTxWrite(uart, temp, 6);
 8002d0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d10:	2206      	movs	r2, #6
 8002d12:	4619      	mov	r1, r3
 8002d14:	6838      	ldr	r0, [r7, #0]
 8002d16:	f7ff fdf9 	bl	800290c <UARTTxWrite>
						}
						break;
 8002d1a:	e217      	b.n	800314c <Munmunbot_Protocol+0x764>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 8002d1c:	4b70      	ldr	r3, [pc, #448]	; (8002ee0 <Munmunbot_Protocol+0x4f8>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <Munmunbot_Protocol+0x342>
						{
							Munmunbot_State = STATE_Idle;
 8002d24:	4b6e      	ldr	r3, [pc, #440]	; (8002ee0 <Munmunbot_Protocol+0x4f8>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002d2a:	6838      	ldr	r0, [r7, #0]
 8002d2c:	f7ff fe36 	bl	800299c <ACK1Return>
						break;
 8002d30:	e20c      	b.n	800314c <Munmunbot_Protocol+0x764>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002d32:	4b6b      	ldr	r3, [pc, #428]	; (8002ee0 <Munmunbot_Protocol+0x4f8>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <Munmunbot_Protocol+0x358>
						{
							Munmunbot_State = STATE_Disconnected;
 8002d3a:	4b69      	ldr	r3, [pc, #420]	; (8002ee0 <Munmunbot_Protocol+0x4f8>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002d40:	6838      	ldr	r0, [r7, #0]
 8002d42:	f7ff fe2b 	bl	800299c <ACK1Return>
						break;
 8002d46:	e201      	b.n	800314c <Munmunbot_Protocol+0x764>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002d48:	4b65      	ldr	r3, [pc, #404]	; (8002ee0 <Munmunbot_Protocol+0x4f8>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d108      	bne.n	8002d62 <Munmunbot_Protocol+0x37a>
						{
							CUSSStruc.RPMp = Data_HAck;
 8002d50:	4b64      	ldr	r3, [pc, #400]	; (8002ee4 <Munmunbot_Protocol+0x4fc>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b64      	ldr	r3, [pc, #400]	; (8002ee8 <Munmunbot_Protocol+0x500>)
 8002d58:	609a      	str	r2, [r3, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 8002d5a:	4963      	ldr	r1, [pc, #396]	; (8002ee8 <Munmunbot_Protocol+0x500>)
 8002d5c:	4863      	ldr	r0, [pc, #396]	; (8002eec <Munmunbot_Protocol+0x504>)
 8002d5e:	f7fe ffbb 	bl	8001cd8 <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 8002d62:	6838      	ldr	r0, [r7, #0]
 8002d64:	f7ff fe1a 	bl	800299c <ACK1Return>
						break;
 8002d68:	e1f0      	b.n	800314c <Munmunbot_Protocol+0x764>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002d6a:	4b5d      	ldr	r3, [pc, #372]	; (8002ee0 <Munmunbot_Protocol+0x4f8>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d106      	bne.n	8002d80 <Munmunbot_Protocol+0x398>
						{
							Angularpos_InputNumber = Data_HAck;
 8002d72:	4b5c      	ldr	r3, [pc, #368]	; (8002ee4 <Munmunbot_Protocol+0x4fc>)
 8002d74:	881a      	ldrh	r2, [r3, #0]
 8002d76:	4b5e      	ldr	r3, [pc, #376]	; (8002ef0 <Munmunbot_Protocol+0x508>)
 8002d78:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <Munmunbot_Protocol+0x50c>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002d80:	6838      	ldr	r0, [r7, #0]
 8002d82:	f7ff fe0b 	bl	800299c <ACK1Return>
						break;
 8002d86:	e1e1      	b.n	800314c <Munmunbot_Protocol+0x764>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002d88:	4b55      	ldr	r3, [pc, #340]	; (8002ee0 <Munmunbot_Protocol+0x4f8>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d109      	bne.n	8002da4 <Munmunbot_Protocol+0x3bc>
						{
//							Angularpos_InputArray[0] = parameter[0];
							Angularpos_InputArray[0] = parameter[2];    //150 0x00 0x0A Checksum
 8002d90:	4b52      	ldr	r3, [pc, #328]	; (8002edc <Munmunbot_Protocol+0x4f4>)
 8002d92:	789a      	ldrb	r2, [r3, #2]
 8002d94:	4b58      	ldr	r3, [pc, #352]	; (8002ef8 <Munmunbot_Protocol+0x510>)
 8002d96:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 8002d98:	4b56      	ldr	r3, [pc, #344]	; (8002ef4 <Munmunbot_Protocol+0x50c>)
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 8002d9e:	4b57      	ldr	r3, [pc, #348]	; (8002efc <Munmunbot_Protocol+0x514>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002da4:	6838      	ldr	r0, [r7, #0]
 8002da6:	f7ff fdf9 	bl	800299c <ACK1Return>
						break;
 8002daa:	e1cf      	b.n	800314c <Munmunbot_Protocol+0x764>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002dac:	4b4c      	ldr	r3, [pc, #304]	; (8002ee0 <Munmunbot_Protocol+0x4f8>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d11c      	bne.n	8002dee <Munmunbot_Protocol+0x406>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 8002db4:	4b4f      	ldr	r3, [pc, #316]	; (8002ef4 <Munmunbot_Protocol+0x50c>)
 8002db6:	2203      	movs	r2, #3
 8002db8:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002dbe:	e00b      	b.n	8002dd8 <Munmunbot_Protocol+0x3f0>
							{
								Angularpos_InputArray[i] = parameter[i];
 8002dc0:	4a46      	ldr	r2, [pc, #280]	; (8002edc <Munmunbot_Protocol+0x4f4>)
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc4:	4413      	add	r3, r2
 8002dc6:	7819      	ldrb	r1, [r3, #0]
 8002dc8:	4a4b      	ldr	r2, [pc, #300]	; (8002ef8 <Munmunbot_Protocol+0x510>)
 8002dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dcc:	4413      	add	r3, r2
 8002dce:	460a      	mov	r2, r1
 8002dd0:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd8:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <Munmunbot_Protocol+0x518>)
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de0:	4293      	cmp	r3, r2
 8002de2:	dbed      	blt.n	8002dc0 <Munmunbot_Protocol+0x3d8>
							}
							NumberOfStationToGo = n_station_mem;
 8002de4:	4b46      	ldr	r3, [pc, #280]	; (8002f00 <Munmunbot_Protocol+0x518>)
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4b44      	ldr	r3, [pc, #272]	; (8002efc <Munmunbot_Protocol+0x514>)
 8002dec:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002dee:	6838      	ldr	r0, [r7, #0]
 8002df0:	f7ff fdd4 	bl	800299c <ACK1Return>
						break;
 8002df4:	e1aa      	b.n	800314c <Munmunbot_Protocol+0x764>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 8002df6:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <Munmunbot_Protocol+0x4f8>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d106      	bne.n	8002e0c <Munmunbot_Protocol+0x424>
						{
							Munmunbot_State = STATE_PrepareDATA;
 8002dfe:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <Munmunbot_Protocol+0x4f8>)
 8002e00:	2202      	movs	r2, #2
 8002e02:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 8002e04:	6838      	ldr	r0, [r7, #0]
 8002e06:	f7ff fdc9 	bl	800299c <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};  ///ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 8002e0a:	e19f      	b.n	800314c <Munmunbot_Protocol+0x764>
								uint8_t temp[] =
 8002e0c:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <Munmunbot_Protocol+0x51c>)
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
								UARTTxWrite(uart, temp, 4);
 8002e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e14:	2204      	movs	r2, #4
 8002e16:	4619      	mov	r1, r3
 8002e18:	6838      	ldr	r0, [r7, #0]
 8002e1a:	f7ff fd77 	bl	800290c <UARTTxWrite>
						break;
 8002e1e:	e195      	b.n	800314c <Munmunbot_Protocol+0x764>

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 8002e20:	4a39      	ldr	r2, [pc, #228]	; (8002f08 <Munmunbot_Protocol+0x520>)
 8002e22:	f107 031c 	add.w	r3, r7, #28
 8002e26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e2a:	6018      	str	r0, [r3, #0]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0}; ///ACK1 + Mode 9
							uint8_t Shift = 2;
 8002e30:	2302      	movs	r3, #2
 8002e32:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
							DataForReturn = Current_Station&(0xff);
 8002e36:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <Munmunbot_Protocol+0x524>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <Munmunbot_Protocol+0x528>)
 8002e3e:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8002e40:	4b33      	ldr	r3, [pc, #204]	; (8002f10 <Munmunbot_Protocol+0x528>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002e54:	440b      	add	r3, r1
 8002e56:	f803 2c1c 	strb.w	r2, [r3, #-28]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8002e5a:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <Munmunbot_Protocol+0x528>)
 8002e5c:	881a      	ldrh	r2, [r3, #0]
 8002e5e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002e62:	3302      	adds	r3, #2
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f803 2c1c 	strb.w	r2, [r3, #-28]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8002e70:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002e74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e78:	4413      	add	r3, r2
 8002e7a:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8002e7e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002e82:	3301      	adds	r3, #1
 8002e84:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002e88:	440b      	add	r3, r1
 8002e8a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002e96:	3302      	adds	r3, #2
 8002e98:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002e9c:	440b      	add	r3, r1
 8002e9e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002eaa:	3303      	adds	r3, #3
 8002eac:	43d2      	mvns	r2, r2
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002eb4:	440b      	add	r3, r1
 8002eb6:	f803 2c1c 	strb.w	r2, [r3, #-28]
							UARTTxWrite(uart, temp, 4+Shift);
 8002eba:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	f107 031c 	add.w	r3, r7, #28
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6838      	ldr	r0, [r7, #0]
 8002ecc:	f7ff fd1e 	bl	800290c <UARTTxWrite>
						}

						break;
 8002ed0:	e13c      	b.n	800314c <Munmunbot_Protocol+0x764>
 8002ed2:	bf00      	nop
 8002ed4:	200001fc 	.word	0x200001fc
 8002ed8:	20000200 	.word	0x20000200
 8002edc:	20000204 	.word	0x20000204
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	20000202 	.word	0x20000202
 8002ee8:	200001d8 	.word	0x200001d8
 8002eec:	20000168 	.word	0x20000168
 8002ef0:	200000ec 	.word	0x200000ec
 8002ef4:	200000ee 	.word	0x200000ee
 8002ef8:	200000dc 	.word	0x200000dc
 8002efc:	200000f0 	.word	0x200000f0
 8002f00:	20000306 	.word	0x20000306
 8002f04:	6e467558 	.word	0x6e467558
 8002f08:	08009400 	.word	0x08009400
 8002f0c:	200000ef 	.word	0x200000ef
 8002f10:	2000030a 	.word	0x2000030a

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 8002f14:	4a9e      	ldr	r2, [pc, #632]	; (8003190 <Munmunbot_Protocol+0x7a8>)
 8002f16:	f107 0314 	add.w	r3, r7, #20
 8002f1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f1e:	6018      	str	r0, [r3, #0]
 8002f20:	3304      	adds	r3, #4
 8002f22:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,154, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 8002f24:	2302      	movs	r3, #2
 8002f26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
							DataForReturn = ((((int)PositionPIDController.OutputFeedback) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
 8002f2a:	4b9a      	ldr	r3, [pc, #616]	; (8003194 <Munmunbot_Protocol+0x7ac>)
 8002f2c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f34:	ee17 2a90 	vmov	r2, s15
 8002f38:	4b97      	ldr	r3, [pc, #604]	; (8003198 <Munmunbot_Protocol+0x7b0>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8002f40:	fb03 f301 	mul.w	r3, r3, r1
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd fa87 	bl	800045c <__aeabi_ui2d>
 8002f4e:	a38c      	add	r3, pc, #560	; (adr r3, 8003180 <Munmunbot_Protocol+0x798>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f7fd fafc 	bl	8000550 <__aeabi_dmul>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	a389      	add	r3, pc, #548	; (adr r3, 8003188 <Munmunbot_Protocol+0x7a0>)
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	f7fd faf3 	bl	8000550 <__aeabi_dmul>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4614      	mov	r4, r2
 8002f70:	461d      	mov	r5, r3
 8002f72:	4b89      	ldr	r3, [pc, #548]	; (8003198 <Munmunbot_Protocol+0x7b0>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fa70 	bl	800045c <__aeabi_ui2d>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4620      	mov	r0, r4
 8002f82:	4629      	mov	r1, r5
 8002f84:	f7fd fc0e 	bl	80007a4 <__aeabi_ddiv>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7fd fd8e 	bl	8000ab0 <__aeabi_d2uiz>
 8002f94:	4603      	mov	r3, r0
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	4b80      	ldr	r3, [pc, #512]	; (800319c <Munmunbot_Protocol+0x7b4>)
 8002f9a:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8002f9c:	4b7f      	ldr	r3, [pc, #508]	; (800319c <Munmunbot_Protocol+0x7b4>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fa8:	3301      	adds	r3, #1
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002fb0:	440b      	add	r3, r1
 8002fb2:	f803 2c24 	strb.w	r2, [r3, #-36]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8002fb6:	4b79      	ldr	r3, [pc, #484]	; (800319c <Munmunbot_Protocol+0x7b4>)
 8002fb8:	881a      	ldrh	r2, [r3, #0]
 8002fba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f803 2c24 	strb.w	r2, [r3, #-36]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8002fcc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fd0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8002fda:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002fe4:	440b      	add	r3, r1
 8002fe6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fea:	4413      	add	r3, r2
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002ff8:	440b      	add	r3, r1
 8002ffa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ffe:	4413      	add	r3, r2
 8003000:	b2da      	uxtb	r2, r3
 8003002:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003006:	3303      	adds	r3, #3
 8003008:	43d2      	mvns	r2, r2
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003010:	440b      	add	r3, r1
 8003012:	f803 2c24 	strb.w	r2, [r3, #-36]
							UARTTxWrite(uart, temp, 4+Shift);
 8003016:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800301a:	b29b      	uxth	r3, r3
 800301c:	3304      	adds	r3, #4
 800301e:	b29a      	uxth	r2, r3
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	4619      	mov	r1, r3
 8003026:	6838      	ldr	r0, [r7, #0]
 8003028:	f7ff fc70 	bl	800290c <UARTTxWrite>
						}
						break;
 800302c:	e08e      	b.n	800314c <Munmunbot_Protocol+0x764>

					case 11: /// Return Angular Velocity Max  ##Complete##
							{
								uint8_t temp[] =
 800302e:	4a5c      	ldr	r2, [pc, #368]	; (80031a0 <Munmunbot_Protocol+0x7b8>)
 8003030:	f107 030c 	add.w	r3, r7, #12
 8003034:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003038:	6018      	str	r0, [r3, #0]
 800303a:	3304      	adds	r3, #4
 800303c:	8019      	strh	r1, [r3, #0]
								{0x58 , 0x75 ,155, 0b0,  0b0, 0b0};
								uint8_t Shift = 2;
 800303e:	2302      	movs	r3, #2
 8003040:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
								DataForReturn = (TrjStruc.AngularVelocityMax_Setting*60)/(CUSSStruc.PPRxQEI);  ///pps to RPM
 8003044:	4b57      	ldr	r3, [pc, #348]	; (80031a4 <Munmunbot_Protocol+0x7bc>)
 8003046:	edd3 7a04 	vldr	s15, [r3, #16]
 800304a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80031a8 <Munmunbot_Protocol+0x7c0>
 800304e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003052:	4b51      	ldr	r3, [pc, #324]	; (8003198 <Munmunbot_Protocol+0x7b0>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800305e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003066:	ee17 3a90 	vmov	r3, s15
 800306a:	b29a      	uxth	r2, r3
 800306c:	4b4b      	ldr	r3, [pc, #300]	; (800319c <Munmunbot_Protocol+0x7b4>)
 800306e:	801a      	strh	r2, [r3, #0]
								temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8003070:	4b4a      	ldr	r3, [pc, #296]	; (800319c <Munmunbot_Protocol+0x7b4>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	b29a      	uxth	r2, r3
 8003078:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800307c:	3301      	adds	r3, #1
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003084:	440b      	add	r3, r1
 8003086:	f803 2c2c 	strb.w	r2, [r3, #-44]
								temp[2+Shift] = (DataForReturn)&(0xff);
 800308a:	4b44      	ldr	r3, [pc, #272]	; (800319c <Munmunbot_Protocol+0x7b4>)
 800308c:	881a      	ldrh	r2, [r3, #0]
 800308e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003092:	3302      	adds	r3, #2
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800309a:	440b      	add	r3, r1
 800309c:	f803 2c2c 	strb.w	r2, [r3, #-44]
								temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 80030a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030a8:	4413      	add	r3, r2
 80030aa:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 80030ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030b2:	3301      	adds	r3, #1
 80030b4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80030b8:	440b      	add	r3, r1
 80030ba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80030be:	4413      	add	r3, r2
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030c6:	3302      	adds	r3, #2
 80030c8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80030cc:	440b      	add	r3, r1
 80030ce:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80030d2:	4413      	add	r3, r2
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030da:	3303      	adds	r3, #3
 80030dc:	43d2      	mvns	r2, r2
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80030e4:	440b      	add	r3, r1
 80030e6:	f803 2c2c 	strb.w	r2, [r3, #-44]
								UARTTxWrite(uart, temp, 4+Shift);
 80030ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3304      	adds	r3, #4
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	4619      	mov	r1, r3
 80030fa:	6838      	ldr	r0, [r7, #0]
 80030fc:	f7ff fc06 	bl	800290c <UARTTxWrite>
							}
						break;
 8003100:	e024      	b.n	800314c <Munmunbot_Protocol+0x764>

					case 12:  //Enable Gripper
						if (Munmunbot_State == STATE_Idle)
 8003102:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <Munmunbot_Protocol+0x7c4>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d102      	bne.n	8003110 <Munmunbot_Protocol+0x728>
						{
							GripperEnable = 1;
 800310a:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <Munmunbot_Protocol+0x7c8>)
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003110:	6838      	ldr	r0, [r7, #0]
 8003112:	f7ff fc43 	bl	800299c <ACK1Return>
						break;
 8003116:	e019      	b.n	800314c <Munmunbot_Protocol+0x764>
					case 13: //Disable Gripper
						if (Munmunbot_State == STATE_Idle)
 8003118:	4b24      	ldr	r3, [pc, #144]	; (80031ac <Munmunbot_Protocol+0x7c4>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d102      	bne.n	8003126 <Munmunbot_Protocol+0x73e>
						{
							GripperEnable = 0;
 8003120:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <Munmunbot_Protocol+0x7c8>)
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003126:	6838      	ldr	r0, [r7, #0]
 8003128:	f7ff fc38 	bl	800299c <ACK1Return>
						break;
 800312c:	e00e      	b.n	800314c <Munmunbot_Protocol+0x764>

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 800312e:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <Munmunbot_Protocol+0x7c4>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d105      	bne.n	8003142 <Munmunbot_Protocol+0x75a>
						{
							Munmunbot_State = STATE_SetHome;
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <Munmunbot_Protocol+0x7c4>)
 8003138:	2206      	movs	r2, #6
 800313a:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <Munmunbot_Protocol+0x7cc>)
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003142:	6838      	ldr	r0, [r7, #0]
 8003144:	f7ff fc2a 	bl	800299c <ACK1Return>
						break;
 8003148:	e000      	b.n	800314c <Munmunbot_Protocol+0x764>
				    }
			   }
 800314a:	bf00      	nop
			n_station = 0;
 800314c:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <Munmunbot_Protocol+0x7d0>)
 800314e:	2200      	movs	r2, #0
 8003150:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 8003152:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <Munmunbot_Protocol+0x7d4>)
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 8003158:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <Munmunbot_Protocol+0x7d8>)
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 800315e:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <Munmunbot_Protocol+0x7dc>)
 8003160:	2200      	movs	r2, #0
 8003162:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 8003164:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <Munmunbot_Protocol+0x7e0>)
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
			Munmunbot_Protocol_State = PP_STARTandMode;
 800316a:	4b18      	ldr	r3, [pc, #96]	; (80031cc <Munmunbot_Protocol+0x7e4>)
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
			break;
 8003170:	e002      	b.n	8003178 <Munmunbot_Protocol+0x790>
			break;
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <Munmunbot_Protocol+0x790>
				break;
 8003176:	bf00      	nop
			}
	}
}
 8003178:	bf00      	nop
 800317a:	3738      	adds	r7, #56	; 0x38
 800317c:	46bd      	mov	sp, r7
 800317e:	bdb0      	pop	{r4, r5, r7, pc}
 8003180:	9ba5e354 	.word	0x9ba5e354
 8003184:	400920c4 	.word	0x400920c4
 8003188:	00000000 	.word	0x00000000
 800318c:	40c38800 	.word	0x40c38800
 8003190:	08009408 	.word	0x08009408
 8003194:	20000108 	.word	0x20000108
 8003198:	200001d8 	.word	0x200001d8
 800319c:	2000030a 	.word	0x2000030a
 80031a0:	08009410 	.word	0x08009410
 80031a4:	20000168 	.word	0x20000168
 80031a8:	42700000 	.word	0x42700000
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000018 	.word	0x20000018
 80031b4:	200000d9 	.word	0x200000d9
 80031b8:	20000304 	.word	0x20000304
 80031bc:	20000200 	.word	0x20000200
 80031c0:	20000308 	.word	0x20000308
 80031c4:	20000202 	.word	0x20000202
 80031c8:	200001fc 	.word	0x200001fc
 80031cc:	200000d8 	.word	0x200000d8

080031d0 <PID_Reset>:

void PID_Reset()
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
	PositionPIDController.PreviousError = 0;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <PID_Reset+0x28>)
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	621a      	str	r2, [r3, #32]
	PositionPIDController.Integral_Value = 0;
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <PID_Reset+0x28>)
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	619a      	str	r2, [r3, #24]
	PositionPIDController.ControllerOutput = 0;
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <PID_Reset+0x28>)
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	60da      	str	r2, [r3, #12]
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000108 	.word	0x20000108

080031fc <LAMP_ON>:

void LAMP_ON(uint8_t lampnumber)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
	if (lampnumber == 1)
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d111      	bne.n	8003230 <LAMP_ON+0x34>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800320c:	2200      	movs	r2, #0
 800320e:	2104      	movs	r1, #4
 8003210:	481e      	ldr	r0, [pc, #120]	; (800328c <LAMP_ON+0x90>)
 8003212:	f001 fb63 	bl	80048dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8003216:	2201      	movs	r2, #1
 8003218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800321c:	481b      	ldr	r0, [pc, #108]	; (800328c <LAMP_ON+0x90>)
 800321e:	f001 fb5d 	bl	80048dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003222:	2201      	movs	r2, #1
 8003224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003228:	4819      	ldr	r0, [pc, #100]	; (8003290 <LAMP_ON+0x94>)
 800322a:	f001 fb57 	bl	80048dc <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
	}
}
 800322e:	e028      	b.n	8003282 <LAMP_ON+0x86>
	else if (lampnumber == 2)
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d111      	bne.n	800325a <LAMP_ON+0x5e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003236:	2201      	movs	r2, #1
 8003238:	2104      	movs	r1, #4
 800323a:	4814      	ldr	r0, [pc, #80]	; (800328c <LAMP_ON+0x90>)
 800323c:	f001 fb4e 	bl	80048dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8003240:	2200      	movs	r2, #0
 8003242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003246:	4811      	ldr	r0, [pc, #68]	; (800328c <LAMP_ON+0x90>)
 8003248:	f001 fb48 	bl	80048dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800324c:	2201      	movs	r2, #1
 800324e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003252:	480f      	ldr	r0, [pc, #60]	; (8003290 <LAMP_ON+0x94>)
 8003254:	f001 fb42 	bl	80048dc <HAL_GPIO_WritePin>
}
 8003258:	e013      	b.n	8003282 <LAMP_ON+0x86>
	else if (lampnumber == 3)
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d110      	bne.n	8003282 <LAMP_ON+0x86>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003260:	2201      	movs	r2, #1
 8003262:	2104      	movs	r1, #4
 8003264:	4809      	ldr	r0, [pc, #36]	; (800328c <LAMP_ON+0x90>)
 8003266:	f001 fb39 	bl	80048dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800326a:	2201      	movs	r2, #1
 800326c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003270:	4806      	ldr	r0, [pc, #24]	; (800328c <LAMP_ON+0x90>)
 8003272:	f001 fb33 	bl	80048dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003276:	2200      	movs	r2, #0
 8003278:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800327c:	4804      	ldr	r0, [pc, #16]	; (8003290 <LAMP_ON+0x94>)
 800327e:	f001 fb2d 	bl	80048dc <HAL_GPIO_WritePin>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40020400 	.word	0x40020400
 8003290:	40020000 	.word	0x40020000

08003294 <Emergency_switch_trigger>:

void Emergency_switch_trigger()
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0)
 8003298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800329c:	480e      	ldr	r0, [pc, #56]	; (80032d8 <Emergency_switch_trigger+0x44>)
 800329e:	f001 fb05 	bl	80048ac <HAL_GPIO_ReadPin>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d114      	bne.n	80032d2 <Emergency_switch_trigger+0x3e>
	{
		Munmunbot_State = STATE_Disconnected;
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <Emergency_switch_trigger+0x48>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80032ae:	2201      	movs	r2, #1
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	480b      	ldr	r0, [pc, #44]	; (80032e0 <Emergency_switch_trigger+0x4c>)
 80032b4:	f001 fb12 	bl	80048dc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <Emergency_switch_trigger+0x50>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2200      	movs	r2, #0
 80032be:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <Emergency_switch_trigger+0x54>)
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	4a09      	ldr	r2, [pc, #36]	; (80032ec <Emergency_switch_trigger+0x58>)
 80032c6:	65d3      	str	r3, [r2, #92]	; 0x5c
		Moving_Link_Task_Flag = 0;
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <Emergency_switch_trigger+0x5c>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
		PID_Reset();
 80032ce:	f7ff ff7f 	bl	80031d0 <PID_Reset>
	}
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40020400 	.word	0x40020400
 80032dc:	20000000 	.word	0x20000000
 80032e0:	40020800 	.word	0x40020800
 80032e4:	200003cc 	.word	0x200003cc
 80032e8:	20000108 	.word	0x20000108
 80032ec:	20000168 	.word	0x20000168
 80032f0:	200000f8 	.word	0x200000f8

080032f4 <Controlling_the_LINK>:

void Controlling_the_LINK()
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
	  // GEN Trajectory
	  TrajectoryGenerationProcess();
 80032f8:	f7fe ff7a 	bl	80021f0 <TrajectoryGenerationProcess>
	  EncoderVelocityAndPosition_Update();
 80032fc:	f7fe fb18 	bl	8001930 <EncoderVelocityAndPosition_Update>
	  PIDController2in1();  ///use only position
 8003300:	f7ff f9c6 	bl	8002690 <PIDController2in1>
	  Plant_input = PositionPIDController.ControllerOutput;
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <Controlling_the_LINK+0x78>)
 8003306:	edd3 7a03 	vldr	s15, [r3, #12]
 800330a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800330e:	ee17 2a90 	vmov	r2, s15
 8003312:	4b17      	ldr	r3, [pc, #92]	; (8003370 <Controlling_the_LINK+0x7c>)
 8003314:	601a      	str	r2, [r3, #0]
	  DCMotorStruc.PWMOut = abs(Plant_input);
 8003316:	4b16      	ldr	r3, [pc, #88]	; (8003370 <Controlling_the_LINK+0x7c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	bfb8      	it	lt
 800331e:	425b      	neglt	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <Controlling_the_LINK+0x80>)
 8003324:	605a      	str	r2, [r3, #4]
	  if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <Controlling_the_LINK+0x80>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f242 7210 	movw	r2, #10000	; 0x2710
 800332e:	4293      	cmp	r3, r2
 8003330:	d903      	bls.n	800333a <Controlling_the_LINK+0x46>
	  {
		 DCMotorStruc.PWMOut = 10000;
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <Controlling_the_LINK+0x80>)
 8003334:	f242 7210 	movw	r2, #10000	; 0x2710
 8003338:	605a      	str	r2, [r3, #4]
	  }

	  if (Plant_input >= 0) /// Setting DIR
	  {
		  DCMotorStruc.DIR = 1;
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <Controlling_the_LINK+0x80>)
 800333c:	2201      	movs	r2, #1
 800333e:	701a      	strb	r2, [r3, #0]
	  }
	  else if (Plant_input < 0)
	  {
		  DCMotorStruc.DIR = 0;
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <Controlling_the_LINK+0x80>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	480b      	ldr	r0, [pc, #44]	; (8003378 <Controlling_the_LINK+0x84>)
 800334a:	f001 fac7 	bl	80048dc <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <Controlling_the_LINK+0x88>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <Controlling_the_LINK+0x80>)
 8003354:	6852      	ldr	r2, [r2, #4]
 8003356:	635a      	str	r2, [r3, #52]	; 0x34
	  TrjStruc.Loop_Timestamp = micros();
 8003358:	f7fe fbac 	bl	8001ab4 <micros>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4907      	ldr	r1, [pc, #28]	; (8003380 <Controlling_the_LINK+0x8c>)
 8003362:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000108 	.word	0x20000108
 8003370:	200000f4 	.word	0x200000f4
 8003374:	200000d0 	.word	0x200000d0
 8003378:	40020800 	.word	0x40020800
 800337c:	200003cc 	.word	0x200003cc
 8003380:	20000168 	.word	0x20000168

08003384 <SETHOME_StateMachine_Function>:

void SETHOME_StateMachine_Function()
{
 8003384:	b5b0      	push	{r4, r5, r7, lr}
 8003386:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 8003388:	4b42      	ldr	r3, [pc, #264]	; (8003494 <SETHOME_StateMachine_Function+0x110>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d87f      	bhi.n	8003490 <SETHOME_StateMachine_Function+0x10c>
 8003390:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <SETHOME_StateMachine_Function+0x14>)
 8003392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003396:	bf00      	nop
 8003398:	080033a9 	.word	0x080033a9
 800339c:	0800348b 	.word	0x0800348b
 80033a0:	080033c5 	.word	0x080033c5
 80033a4:	080033ed 	.word	0x080033ed
	{
		case SetHomeState_0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80033a8:	2200      	movs	r2, #0
 80033aa:	2180      	movs	r1, #128	; 0x80
 80033ac:	483a      	ldr	r0, [pc, #232]	; (8003498 <SETHOME_StateMachine_Function+0x114>)
 80033ae:	f001 fa95 	bl	80048dc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 80033b2:	4b3a      	ldr	r3, [pc, #232]	; (800349c <SETHOME_StateMachine_Function+0x118>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033ba:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 80033bc:	4b35      	ldr	r3, [pc, #212]	; (8003494 <SETHOME_StateMachine_Function+0x110>)
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
			break;
 80033c2:	e065      	b.n	8003490 <SETHOME_StateMachine_Function+0x10c>
		case SetHomeState_1:
			break;
		case SetHomeState_2:
			Angularpos_InputNumber = 0;
 80033c4:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <SETHOME_StateMachine_Function+0x11c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	801a      	strh	r2, [r3, #0]
			MovingLinkMode = LMM_Set_Pos_Directly;
 80033ca:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <SETHOME_StateMachine_Function+0x120>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
			TrajectoryGenerationPrepareDATA();
 80033d0:	f7fe fcba 	bl	8001d48 <TrajectoryGenerationPrepareDATA>
			TrajectoryGenerationCalculation();
 80033d4:	f7fe fdfc 	bl	8001fd0 <TrajectoryGenerationCalculation>
			Munmunbot_State = STATE_SetHome;        ///BRUTE FORCE ALGORITHM
 80033d8:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <SETHOME_StateMachine_Function+0x124>)
 80033da:	2206      	movs	r2, #6
 80033dc:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Set_Pos_Directly;  ///BRUTE FORCE ALGORITHM
 80033de:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <SETHOME_StateMachine_Function+0x120>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
			SethomeMode = SetHomeState_3;
 80033e4:	4b2b      	ldr	r3, [pc, #172]	; (8003494 <SETHOME_StateMachine_Function+0x110>)
 80033e6:	2203      	movs	r2, #3
 80033e8:	701a      	strb	r2, [r3, #0]
			break;
 80033ea:	e051      	b.n	8003490 <SETHOME_StateMachine_Function+0x10c>
		case SetHomeState_3:
		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 80033ec:	f7fe fb62 	bl	8001ab4 <micros>
 80033f0:	4b2e      	ldr	r3, [pc, #184]	; (80034ac <SETHOME_StateMachine_Function+0x128>)
 80033f2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80033f6:	1a84      	subs	r4, r0, r2
 80033f8:	eb61 0503 	sbc.w	r5, r1, r3
 80033fc:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <SETHOME_StateMachine_Function+0x128>)
 80033fe:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003402:	429d      	cmp	r5, r3
 8003404:	bf08      	it	eq
 8003406:	4294      	cmpeq	r4, r2
 8003408:	d341      	bcc.n	800348e <SETHOME_StateMachine_Function+0x10a>
		  {
			  Controlling_the_LINK();
 800340a:	f7ff ff73 	bl	80032f4 <Controlling_the_LINK>

			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 3) &&
 800340e:	4b28      	ldr	r3, [pc, #160]	; (80034b0 <SETHOME_StateMachine_Function+0x12c>)
 8003410:	ed93 7a05 	vldr	s14, [r3, #20]
 8003414:	4b25      	ldr	r3, [pc, #148]	; (80034ac <SETHOME_StateMachine_Function+0x128>)
 8003416:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800341a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800341e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342a:	d900      	bls.n	800342e <SETHOME_StateMachine_Function+0xaa>
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
					Moving_Link_Task_Flag = 0;
					PID_Reset();
			  }
		  }
		  	  break;
 800342c:	e02f      	b.n	800348e <SETHOME_StateMachine_Function+0x10a>
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 3) &&
 800342e:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <SETHOME_StateMachine_Function+0x12c>)
 8003430:	ed93 7a05 	vldr	s14, [r3, #20]
 8003434:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <SETHOME_StateMachine_Function+0x128>)
 8003436:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800343a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800343e:	ee77 7ae6 	vsub.f32	s15, s15, s13
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 3) &&
 8003442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344a:	da00      	bge.n	800344e <SETHOME_StateMachine_Function+0xca>
		  	  break;
 800344c:	e01f      	b.n	800348e <SETHOME_StateMachine_Function+0x10a>
					  (Moving_Link_Task_Flag == 1))
 800344e:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <SETHOME_StateMachine_Function+0x130>)
 8003450:	781b      	ldrb	r3, [r3, #0]
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 3) &&
 8003452:	2b01      	cmp	r3, #1
 8003454:	d11b      	bne.n	800348e <SETHOME_StateMachine_Function+0x10a>
					SethomeMode = SetHomeState_0;
 8003456:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <SETHOME_StateMachine_Function+0x110>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_Idle;
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <SETHOME_StateMachine_Function+0x124>)
 800345e:	2201      	movs	r2, #1
 8003460:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = 99;
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <SETHOME_StateMachine_Function+0x124>)
 8003464:	2263      	movs	r2, #99	; 0x63
 8003466:	701a      	strb	r2, [r3, #0]
					MovingLinkMode = LMM_Not_Set;
 8003468:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <SETHOME_StateMachine_Function+0x120>)
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <SETHOME_StateMachine_Function+0x118>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	635a      	str	r2, [r3, #52]	; 0x34
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <SETHOME_StateMachine_Function+0x12c>)
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	4a0c      	ldr	r2, [pc, #48]	; (80034ac <SETHOME_StateMachine_Function+0x128>)
 800347c:	65d3      	str	r3, [r2, #92]	; 0x5c
					Moving_Link_Task_Flag = 0;
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <SETHOME_StateMachine_Function+0x130>)
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
					PID_Reset();
 8003484:	f7ff fea4 	bl	80031d0 <PID_Reset>
		  	  break;
 8003488:	e001      	b.n	800348e <SETHOME_StateMachine_Function+0x10a>
			break;
 800348a:	bf00      	nop
 800348c:	e000      	b.n	8003490 <SETHOME_StateMachine_Function+0x10c>
		  	  break;
 800348e:	bf00      	nop
     }

}
 8003490:	bf00      	nop
 8003492:	bdb0      	pop	{r4, r5, r7, pc}
 8003494:	200000d9 	.word	0x200000d9
 8003498:	40020800 	.word	0x40020800
 800349c:	200003cc 	.word	0x200003cc
 80034a0:	200000ec 	.word	0x200000ec
 80034a4:	200000ee 	.word	0x200000ee
 80034a8:	20000000 	.word	0x20000000
 80034ac:	20000168 	.word	0x20000168
 80034b0:	20000108 	.word	0x20000108
 80034b4:	200000f8 	.word	0x200000f8

080034b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034bc:	b672      	cpsid	i
}
 80034be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034c0:	e7fe      	b.n	80034c0 <Error_Handler+0x8>
	...

080034c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_MspInit+0x4c>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <HAL_MspInit+0x4c>)
 80034d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d8:	6453      	str	r3, [r2, #68]	; 0x44
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <HAL_MspInit+0x4c>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_MspInit+0x4c>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4a08      	ldr	r2, [pc, #32]	; (8003510 <HAL_MspInit+0x4c>)
 80034f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_MspInit+0x4c>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003502:	2007      	movs	r0, #7
 8003504:	f000 fbfc 	bl	8003d00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40023800 	.word	0x40023800

08003514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a21      	ldr	r2, [pc, #132]	; (80035b8 <HAL_I2C_MspInit+0xa4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d13b      	bne.n	80035ae <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_I2C_MspInit+0xa8>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <HAL_I2C_MspInit+0xa8>)
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_I2C_MspInit+0xa8>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003552:	23c0      	movs	r3, #192	; 0xc0
 8003554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003556:	2312      	movs	r3, #18
 8003558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800355a:	2301      	movs	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355e:	2303      	movs	r3, #3
 8003560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003562:	2304      	movs	r3, #4
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003566:	f107 0314 	add.w	r3, r7, #20
 800356a:	4619      	mov	r1, r3
 800356c:	4814      	ldr	r0, [pc, #80]	; (80035c0 <HAL_I2C_MspInit+0xac>)
 800356e:	f001 f819 	bl	80045a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_I2C_MspInit+0xa8>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a10      	ldr	r2, [pc, #64]	; (80035bc <HAL_I2C_MspInit+0xa8>)
 800357c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <HAL_I2C_MspInit+0xa8>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800358e:	2200      	movs	r2, #0
 8003590:	2100      	movs	r1, #0
 8003592:	201f      	movs	r0, #31
 8003594:	f000 fbbf 	bl	8003d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003598:	201f      	movs	r0, #31
 800359a:	f000 fbd8 	bl	8003d4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800359e:	2200      	movs	r2, #0
 80035a0:	2100      	movs	r1, #0
 80035a2:	2020      	movs	r0, #32
 80035a4:	f000 fbb7 	bl	8003d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80035a8:	2020      	movs	r0, #32
 80035aa:	f000 fbd0 	bl	8003d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035ae:	bf00      	nop
 80035b0:	3728      	adds	r7, #40	; 0x28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40005400 	.word	0x40005400
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40020400 	.word	0x40020400

080035c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a19      	ldr	r2, [pc, #100]	; (8003648 <HAL_TIM_Encoder_MspInit+0x84>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d12c      	bne.n	8003640 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <HAL_TIM_Encoder_MspInit+0x88>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a17      	ldr	r2, [pc, #92]	; (800364c <HAL_TIM_Encoder_MspInit+0x88>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6453      	str	r3, [r2, #68]	; 0x44
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <HAL_TIM_Encoder_MspInit+0x88>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_TIM_Encoder_MspInit+0x88>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	4a10      	ldr	r2, [pc, #64]	; (800364c <HAL_TIM_Encoder_MspInit+0x88>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6313      	str	r3, [r2, #48]	; 0x30
 8003612:	4b0e      	ldr	r3, [pc, #56]	; (800364c <HAL_TIM_Encoder_MspInit+0x88>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 800361e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003624:	2302      	movs	r3, #2
 8003626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003630:	2301      	movs	r3, #1
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4619      	mov	r1, r3
 800363a:	4805      	ldr	r0, [pc, #20]	; (8003650 <HAL_TIM_Encoder_MspInit+0x8c>)
 800363c:	f000 ffb2 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003640:	bf00      	nop
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40010000 	.word	0x40010000
 800364c:	40023800 	.word	0x40023800
 8003650:	40020000 	.word	0x40020000

08003654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003664:	d116      	bne.n	8003694 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <HAL_TIM_Base_MspInit+0x70>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <HAL_TIM_Base_MspInit+0x70>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6413      	str	r3, [r2, #64]	; 0x40
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_TIM_Base_MspInit+0x70>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003682:	2200      	movs	r2, #0
 8003684:	2100      	movs	r1, #0
 8003686:	201c      	movs	r0, #28
 8003688:	f000 fb45 	bl	8003d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800368c:	201c      	movs	r0, #28
 800368e:	f000 fb5e 	bl	8003d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003692:	e012      	b.n	80036ba <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <HAL_TIM_Base_MspInit+0x74>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d10d      	bne.n	80036ba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_TIM_Base_MspInit+0x70>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a07      	ldr	r2, [pc, #28]	; (80036c4 <HAL_TIM_Base_MspInit+0x70>)
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_TIM_Base_MspInit+0x70>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40000400 	.word	0x40000400

080036cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d4:	f107 030c 	add.w	r3, r7, #12
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a12      	ldr	r2, [pc, #72]	; (8003734 <HAL_TIM_MspPostInit+0x68>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d11d      	bne.n	800372a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_TIM_MspPostInit+0x6c>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	4a10      	ldr	r2, [pc, #64]	; (8003738 <HAL_TIM_MspPostInit+0x6c>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6313      	str	r3, [r2, #48]	; 0x30
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <HAL_TIM_MspPostInit+0x6c>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 800370a:	2340      	movs	r3, #64	; 0x40
 800370c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	2302      	movs	r3, #2
 8003710:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800371a:	2302      	movs	r3, #2
 800371c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 800371e:	f107 030c 	add.w	r3, r7, #12
 8003722:	4619      	mov	r1, r3
 8003724:	4805      	ldr	r0, [pc, #20]	; (800373c <HAL_TIM_MspPostInit+0x70>)
 8003726:	f000 ff3d 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800372a:	bf00      	nop
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40000400 	.word	0x40000400
 8003738:	40023800 	.word	0x40023800
 800373c:	40020000 	.word	0x40020000

08003740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003748:	f107 0314 	add.w	r3, r7, #20
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a4c      	ldr	r2, [pc, #304]	; (8003890 <HAL_UART_MspInit+0x150>)
 800375e:	4293      	cmp	r3, r2
 8003760:	f040 8091 	bne.w	8003886 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003764:	2300      	movs	r3, #0
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	4b4a      	ldr	r3, [pc, #296]	; (8003894 <HAL_UART_MspInit+0x154>)
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	4a49      	ldr	r2, [pc, #292]	; (8003894 <HAL_UART_MspInit+0x154>)
 800376e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003772:	6413      	str	r3, [r2, #64]	; 0x40
 8003774:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_UART_MspInit+0x154>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	4b43      	ldr	r3, [pc, #268]	; (8003894 <HAL_UART_MspInit+0x154>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	4a42      	ldr	r2, [pc, #264]	; (8003894 <HAL_UART_MspInit+0x154>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6313      	str	r3, [r2, #48]	; 0x30
 8003790:	4b40      	ldr	r3, [pc, #256]	; (8003894 <HAL_UART_MspInit+0x154>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800379c:	230c      	movs	r3, #12
 800379e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a8:	2303      	movs	r3, #3
 80037aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037ac:	2307      	movs	r3, #7
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b0:	f107 0314 	add.w	r3, r7, #20
 80037b4:	4619      	mov	r1, r3
 80037b6:	4838      	ldr	r0, [pc, #224]	; (8003898 <HAL_UART_MspInit+0x158>)
 80037b8:	f000 fef4 	bl	80045a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80037bc:	4b37      	ldr	r3, [pc, #220]	; (800389c <HAL_UART_MspInit+0x15c>)
 80037be:	4a38      	ldr	r2, [pc, #224]	; (80038a0 <HAL_UART_MspInit+0x160>)
 80037c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80037c2:	4b36      	ldr	r3, [pc, #216]	; (800389c <HAL_UART_MspInit+0x15c>)
 80037c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037ca:	4b34      	ldr	r3, [pc, #208]	; (800389c <HAL_UART_MspInit+0x15c>)
 80037cc:	2240      	movs	r2, #64	; 0x40
 80037ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d0:	4b32      	ldr	r3, [pc, #200]	; (800389c <HAL_UART_MspInit+0x15c>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037d6:	4b31      	ldr	r3, [pc, #196]	; (800389c <HAL_UART_MspInit+0x15c>)
 80037d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037de:	4b2f      	ldr	r3, [pc, #188]	; (800389c <HAL_UART_MspInit+0x15c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037e4:	4b2d      	ldr	r3, [pc, #180]	; (800389c <HAL_UART_MspInit+0x15c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80037ea:	4b2c      	ldr	r3, [pc, #176]	; (800389c <HAL_UART_MspInit+0x15c>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037f0:	4b2a      	ldr	r3, [pc, #168]	; (800389c <HAL_UART_MspInit+0x15c>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037f6:	4b29      	ldr	r3, [pc, #164]	; (800389c <HAL_UART_MspInit+0x15c>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80037fc:	4827      	ldr	r0, [pc, #156]	; (800389c <HAL_UART_MspInit+0x15c>)
 80037fe:	f000 fac1 	bl	8003d84 <HAL_DMA_Init>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003808:	f7ff fe56 	bl	80034b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a23      	ldr	r2, [pc, #140]	; (800389c <HAL_UART_MspInit+0x15c>)
 8003810:	635a      	str	r2, [r3, #52]	; 0x34
 8003812:	4a22      	ldr	r2, [pc, #136]	; (800389c <HAL_UART_MspInit+0x15c>)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003818:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <HAL_UART_MspInit+0x164>)
 800381a:	4a23      	ldr	r2, [pc, #140]	; (80038a8 <HAL_UART_MspInit+0x168>)
 800381c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800381e:	4b21      	ldr	r3, [pc, #132]	; (80038a4 <HAL_UART_MspInit+0x164>)
 8003820:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003824:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003826:	4b1f      	ldr	r3, [pc, #124]	; (80038a4 <HAL_UART_MspInit+0x164>)
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800382c:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <HAL_UART_MspInit+0x164>)
 800382e:	2200      	movs	r2, #0
 8003830:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <HAL_UART_MspInit+0x164>)
 8003834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003838:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800383a:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <HAL_UART_MspInit+0x164>)
 800383c:	2200      	movs	r2, #0
 800383e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <HAL_UART_MspInit+0x164>)
 8003842:	2200      	movs	r2, #0
 8003844:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <HAL_UART_MspInit+0x164>)
 8003848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800384c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <HAL_UART_MspInit+0x164>)
 8003850:	2200      	movs	r2, #0
 8003852:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003854:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <HAL_UART_MspInit+0x164>)
 8003856:	2200      	movs	r2, #0
 8003858:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800385a:	4812      	ldr	r0, [pc, #72]	; (80038a4 <HAL_UART_MspInit+0x164>)
 800385c:	f000 fa92 	bl	8003d84 <HAL_DMA_Init>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003866:	f7ff fe27 	bl	80034b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <HAL_UART_MspInit+0x164>)
 800386e:	639a      	str	r2, [r3, #56]	; 0x38
 8003870:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <HAL_UART_MspInit+0x164>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2100      	movs	r1, #0
 800387a:	2026      	movs	r0, #38	; 0x26
 800387c:	f000 fa4b 	bl	8003d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003880:	2026      	movs	r0, #38	; 0x26
 8003882:	f000 fa64 	bl	8003d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003886:	bf00      	nop
 8003888:	3728      	adds	r7, #40	; 0x28
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40004400 	.word	0x40004400
 8003894:	40023800 	.word	0x40023800
 8003898:	40020000 	.word	0x40020000
 800389c:	20000414 	.word	0x20000414
 80038a0:	400260a0 	.word	0x400260a0
 80038a4:	20000318 	.word	0x20000318
 80038a8:	40026088 	.word	0x40026088

080038ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <NMI_Handler+0x4>

080038b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b6:	e7fe      	b.n	80038b6 <HardFault_Handler+0x4>

080038b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038bc:	e7fe      	b.n	80038bc <MemManage_Handler+0x4>

080038be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038c2:	e7fe      	b.n	80038c2 <BusFault_Handler+0x4>

080038c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c8:	e7fe      	b.n	80038c8 <UsageFault_Handler+0x4>

080038ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038f8:	f000 f912 	bl	8003b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}

08003900 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <DMA1_Stream5_IRQHandler+0x10>)
 8003906:	f000 fbd5 	bl	80040b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000318 	.word	0x20000318

08003914 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003918:	4802      	ldr	r0, [pc, #8]	; (8003924 <DMA1_Stream6_IRQHandler+0x10>)
 800391a:	f000 fbcb 	bl	80040b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000414 	.word	0x20000414

08003928 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800392c:	4802      	ldr	r0, [pc, #8]	; (8003938 <TIM2_IRQHandler+0x10>)
 800392e:	f003 fe65 	bl	80075fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200004bc 	.word	0x200004bc

0800393c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <I2C1_EV_IRQHandler+0x10>)
 8003942:	f001 f9e7 	bl	8004d14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000378 	.word	0x20000378

08003950 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003954:	4802      	ldr	r0, [pc, #8]	; (8003960 <I2C1_ER_IRQHandler+0x10>)
 8003956:	f001 fb4a 	bl	8004fee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000378 	.word	0x20000378

08003964 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003968:	4802      	ldr	r0, [pc, #8]	; (8003974 <USART2_IRQHandler+0x10>)
 800396a:	f004 fd31 	bl	80083d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000504 	.word	0x20000504

08003978 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800397c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003980:	f000 ffc6 	bl	8004910 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003984:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003988:	f000 ffc2 	bl	8004910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}

08003990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003998:	4a14      	ldr	r2, [pc, #80]	; (80039ec <_sbrk+0x5c>)
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <_sbrk+0x60>)
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039a4:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <_sbrk+0x64>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <_sbrk+0x64>)
 80039ae:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <_sbrk+0x68>)
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <_sbrk+0x64>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d207      	bcs.n	80039d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039c0:	f005 fb62 	bl	8009088 <__errno>
 80039c4:	4603      	mov	r3, r0
 80039c6:	220c      	movs	r2, #12
 80039c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295
 80039ce:	e009      	b.n	80039e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <_sbrk+0x64>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <_sbrk+0x64>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <_sbrk+0x64>)
 80039e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039e2:	68fb      	ldr	r3, [r7, #12]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20020000 	.word	0x20020000
 80039f0:	00000400 	.word	0x00000400
 80039f4:	2000030c 	.word	0x2000030c
 80039f8:	20000560 	.word	0x20000560

080039fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <SystemInit+0x28>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <SystemInit+0x28>)
 8003a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <SystemInit+0x28>)
 8003a12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a16:	609a      	str	r2, [r3, #8]
#endif
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a2e:	e003      	b.n	8003a38 <LoopCopyDataInit>

08003a30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a36:	3104      	adds	r1, #4

08003a38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a38:	480b      	ldr	r0, [pc, #44]	; (8003a68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a40:	d3f6      	bcc.n	8003a30 <CopyDataInit>
  ldr  r2, =_sbss
 8003a42:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a44:	e002      	b.n	8003a4c <LoopFillZerobss>

08003a46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a48:	f842 3b04 	str.w	r3, [r2], #4

08003a4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a50:	d3f9      	bcc.n	8003a46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a52:	f7ff ffd3 	bl	80039fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a56:	f005 fb1d 	bl	8009094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a5a:	f7fd fb25 	bl	80010a8 <main>
  bx  lr    
 8003a5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003a64:	08009448 	.word	0x08009448
  ldr  r0, =_sdata
 8003a68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a6c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8003a70:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8003a74:	2000055c 	.word	0x2000055c

08003a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a78:	e7fe      	b.n	8003a78 <ADC_IRQHandler>
	...

08003a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a80:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <HAL_Init+0x40>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a0d      	ldr	r2, [pc, #52]	; (8003abc <HAL_Init+0x40>)
 8003a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_Init+0x40>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <HAL_Init+0x40>)
 8003a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a98:	4b08      	ldr	r3, [pc, #32]	; (8003abc <HAL_Init+0x40>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a07      	ldr	r2, [pc, #28]	; (8003abc <HAL_Init+0x40>)
 8003a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aa4:	2003      	movs	r0, #3
 8003aa6:	f000 f92b 	bl	8003d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aaa:	2000      	movs	r0, #0
 8003aac:	f000 f808 	bl	8003ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ab0:	f7ff fd08 	bl	80034c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40023c00 	.word	0x40023c00

08003ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ac8:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_InitTick+0x54>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <HAL_InitTick+0x58>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f943 	bl	8003d6a <HAL_SYSTICK_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e00e      	b.n	8003b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b0f      	cmp	r3, #15
 8003af2:	d80a      	bhi.n	8003b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003af4:	2200      	movs	r2, #0
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295
 8003afc:	f000 f90b 	bl	8003d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b00:	4a06      	ldr	r2, [pc, #24]	; (8003b1c <HAL_InitTick+0x5c>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e000      	b.n	8003b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	2000001c 	.word	0x2000001c
 8003b18:	20000024 	.word	0x20000024
 8003b1c:	20000020 	.word	0x20000020

08003b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_IncTick+0x20>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_IncTick+0x24>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4413      	add	r3, r2
 8003b30:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <HAL_IncTick+0x24>)
 8003b32:	6013      	str	r3, [r2, #0]
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000024 	.word	0x20000024
 8003b44:	20000548 	.word	0x20000548

08003b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <HAL_GetTick+0x14>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000548 	.word	0x20000548

08003b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b92:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	60d3      	str	r3, [r2, #12]
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	e000ed00 	.word	0xe000ed00

08003ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bac:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	f003 0307 	and.w	r3, r3, #7
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	db0b      	blt.n	8003bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	f003 021f 	and.w	r2, r3, #31
 8003bdc:	4907      	ldr	r1, [pc, #28]	; (8003bfc <__NVIC_EnableIRQ+0x38>)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2001      	movs	r0, #1
 8003be6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	e000e100 	.word	0xe000e100

08003c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	6039      	str	r1, [r7, #0]
 8003c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	db0a      	blt.n	8003c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	490c      	ldr	r1, [pc, #48]	; (8003c4c <__NVIC_SetPriority+0x4c>)
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	0112      	lsls	r2, r2, #4
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	440b      	add	r3, r1
 8003c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c28:	e00a      	b.n	8003c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4908      	ldr	r1, [pc, #32]	; (8003c50 <__NVIC_SetPriority+0x50>)
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	3b04      	subs	r3, #4
 8003c38:	0112      	lsls	r2, r2, #4
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	761a      	strb	r2, [r3, #24]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000e100 	.word	0xe000e100
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	; 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f1c3 0307 	rsb	r3, r3, #7
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	bf28      	it	cs
 8003c72:	2304      	movcs	r3, #4
 8003c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d902      	bls.n	8003c84 <NVIC_EncodePriority+0x30>
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3b03      	subs	r3, #3
 8003c82:	e000      	b.n	8003c86 <NVIC_EncodePriority+0x32>
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c88:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43da      	mvns	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	401a      	ands	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	43d9      	mvns	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cac:	4313      	orrs	r3, r2
         );
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3724      	adds	r7, #36	; 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ccc:	d301      	bcc.n	8003cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00f      	b.n	8003cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <SysTick_Config+0x40>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cda:	210f      	movs	r1, #15
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	f7ff ff8e 	bl	8003c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <SysTick_Config+0x40>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cea:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <SysTick_Config+0x40>)
 8003cec:	2207      	movs	r2, #7
 8003cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	e000e010 	.word	0xe000e010

08003d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff29 	bl	8003b60 <__NVIC_SetPriorityGrouping>
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b086      	sub	sp, #24
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
 8003d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d28:	f7ff ff3e 	bl	8003ba8 <__NVIC_GetPriorityGrouping>
 8003d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	6978      	ldr	r0, [r7, #20]
 8003d34:	f7ff ff8e 	bl	8003c54 <NVIC_EncodePriority>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff ff5d 	bl	8003c00 <__NVIC_SetPriority>
}
 8003d46:	bf00      	nop
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	4603      	mov	r3, r0
 8003d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff ff31 	bl	8003bc4 <__NVIC_EnableIRQ>
}
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ffa2 	bl	8003cbc <SysTick_Config>
 8003d78:	4603      	mov	r3, r0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d90:	f7ff feda 	bl	8003b48 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e099      	b.n	8003ed4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0201 	bic.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dc0:	e00f      	b.n	8003de2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dc2:	f7ff fec1 	bl	8003b48 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d908      	bls.n	8003de2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2203      	movs	r2, #3
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e078      	b.n	8003ed4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e8      	bne.n	8003dc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4b38      	ldr	r3, [pc, #224]	; (8003edc <HAL_DMA_Init+0x158>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d107      	bne.n	8003e4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	4313      	orrs	r3, r2
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0307 	bic.w	r3, r3, #7
 8003e62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d117      	bne.n	8003ea6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00e      	beq.n	8003ea6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fb0f 	bl	80044ac <DMA_CheckFifoParam>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2240      	movs	r2, #64	; 0x40
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e016      	b.n	8003ed4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fac6 	bl	8004440 <DMA_CalcBaseAndBitshift>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebc:	223f      	movs	r2, #63	; 0x3f
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	f010803f 	.word	0xf010803f

08003ee0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_DMA_Start_IT+0x26>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e040      	b.n	8003f88 <HAL_DMA_Start_IT+0xa8>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d12f      	bne.n	8003f7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fa58 	bl	80043e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f38:	223f      	movs	r2, #63	; 0x3f
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0216 	orr.w	r2, r2, #22
 8003f4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0208 	orr.w	r2, r2, #8
 8003f66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e005      	b.n	8003f86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f82:	2302      	movs	r3, #2
 8003f84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f9e:	f7ff fdd3 	bl	8003b48 <HAL_GetTick>
 8003fa2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d008      	beq.n	8003fc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2280      	movs	r2, #128	; 0x80
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e052      	b.n	8004068 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0216 	bic.w	r2, r2, #22
 8003fd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fe0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d103      	bne.n	8003ff2 <HAL_DMA_Abort+0x62>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0208 	bic.w	r2, r2, #8
 8004000:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004012:	e013      	b.n	800403c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004014:	f7ff fd98 	bl	8003b48 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b05      	cmp	r3, #5
 8004020:	d90c      	bls.n	800403c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2203      	movs	r2, #3
 8004034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e015      	b.n	8004068 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e4      	bne.n	8004014 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404e:	223f      	movs	r2, #63	; 0x3f
 8004050:	409a      	lsls	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d004      	beq.n	800408e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e00c      	b.n	80040a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2205      	movs	r2, #5
 8004092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040c0:	4b92      	ldr	r3, [pc, #584]	; (800430c <HAL_DMA_IRQHandler+0x258>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a92      	ldr	r2, [pc, #584]	; (8004310 <HAL_DMA_IRQHandler+0x25c>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	0a9b      	lsrs	r3, r3, #10
 80040cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040de:	2208      	movs	r2, #8
 80040e0:	409a      	lsls	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d01a      	beq.n	8004120 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d013      	beq.n	8004120 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0204 	bic.w	r2, r2, #4
 8004106:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410c:	2208      	movs	r2, #8
 800410e:	409a      	lsls	r2, r3
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	f043 0201 	orr.w	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	2201      	movs	r2, #1
 8004126:	409a      	lsls	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d012      	beq.n	8004156 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00b      	beq.n	8004156 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004142:	2201      	movs	r2, #1
 8004144:	409a      	lsls	r2, r3
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	f043 0202 	orr.w	r2, r3, #2
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	2204      	movs	r2, #4
 800415c:	409a      	lsls	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4013      	ands	r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d012      	beq.n	800418c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00b      	beq.n	800418c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004178:	2204      	movs	r2, #4
 800417a:	409a      	lsls	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	f043 0204 	orr.w	r2, r3, #4
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004190:	2210      	movs	r2, #16
 8004192:	409a      	lsls	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d043      	beq.n	8004224 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d03c      	beq.n	8004224 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ae:	2210      	movs	r2, #16
 80041b0:	409a      	lsls	r2, r3
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d018      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d108      	bne.n	80041e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d024      	beq.n	8004224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	4798      	blx	r3
 80041e2:	e01f      	b.n	8004224 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01b      	beq.n	8004224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	4798      	blx	r3
 80041f4:	e016      	b.n	8004224 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d107      	bne.n	8004214 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0208 	bic.w	r2, r2, #8
 8004212:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004228:	2220      	movs	r2, #32
 800422a:	409a      	lsls	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 808e 	beq.w	8004352 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8086 	beq.w	8004352 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	2220      	movs	r2, #32
 800424c:	409a      	lsls	r2, r3
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b05      	cmp	r3, #5
 800425c:	d136      	bne.n	80042cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0216 	bic.w	r2, r2, #22
 800426c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695a      	ldr	r2, [r3, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800427c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d103      	bne.n	800428e <HAL_DMA_IRQHandler+0x1da>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0208 	bic.w	r2, r2, #8
 800429c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a2:	223f      	movs	r2, #63	; 0x3f
 80042a4:	409a      	lsls	r2, r3
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d07d      	beq.n	80043be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
        }
        return;
 80042ca:	e078      	b.n	80043be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01c      	beq.n	8004314 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d108      	bne.n	80042fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d030      	beq.n	8004352 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	4798      	blx	r3
 80042f8:	e02b      	b.n	8004352 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d027      	beq.n	8004352 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	4798      	blx	r3
 800430a:	e022      	b.n	8004352 <HAL_DMA_IRQHandler+0x29e>
 800430c:	2000001c 	.word	0x2000001c
 8004310:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10f      	bne.n	8004342 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0210 	bic.w	r2, r2, #16
 8004330:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	2b00      	cmp	r3, #0
 8004358:	d032      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d022      	beq.n	80043ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2205      	movs	r2, #5
 800436a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0201 	bic.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	3301      	adds	r3, #1
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	429a      	cmp	r2, r3
 8004388:	d307      	bcc.n	800439a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f2      	bne.n	800437e <HAL_DMA_IRQHandler+0x2ca>
 8004398:	e000      	b.n	800439c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800439a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	4798      	blx	r3
 80043bc:	e000      	b.n	80043c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80043be:	bf00      	nop
    }
  }
}
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop

080043c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043d6:	b2db      	uxtb	r3, r3
}
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004400:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d108      	bne.n	8004424 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004422:	e007      	b.n	8004434 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	60da      	str	r2, [r3, #12]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	3b10      	subs	r3, #16
 8004450:	4a14      	ldr	r2, [pc, #80]	; (80044a4 <DMA_CalcBaseAndBitshift+0x64>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800445a:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <DMA_CalcBaseAndBitshift+0x68>)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d909      	bls.n	8004482 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	1d1a      	adds	r2, r3, #4
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	659a      	str	r2, [r3, #88]	; 0x58
 8004480:	e007      	b.n	8004492 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	aaaaaaab 	.word	0xaaaaaaab
 80044a8:	08009430 	.word	0x08009430

080044ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d11f      	bne.n	8004506 <DMA_CheckFifoParam+0x5a>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d856      	bhi.n	800457a <DMA_CheckFifoParam+0xce>
 80044cc:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <DMA_CheckFifoParam+0x28>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	080044e5 	.word	0x080044e5
 80044d8:	080044f7 	.word	0x080044f7
 80044dc:	080044e5 	.word	0x080044e5
 80044e0:	0800457b 	.word	0x0800457b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d046      	beq.n	800457e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f4:	e043      	b.n	800457e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044fe:	d140      	bne.n	8004582 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004504:	e03d      	b.n	8004582 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800450e:	d121      	bne.n	8004554 <DMA_CheckFifoParam+0xa8>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b03      	cmp	r3, #3
 8004514:	d837      	bhi.n	8004586 <DMA_CheckFifoParam+0xda>
 8004516:	a201      	add	r2, pc, #4	; (adr r2, 800451c <DMA_CheckFifoParam+0x70>)
 8004518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451c:	0800452d 	.word	0x0800452d
 8004520:	08004533 	.word	0x08004533
 8004524:	0800452d 	.word	0x0800452d
 8004528:	08004545 	.word	0x08004545
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
      break;
 8004530:	e030      	b.n	8004594 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d025      	beq.n	800458a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004542:	e022      	b.n	800458a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800454c:	d11f      	bne.n	800458e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004552:	e01c      	b.n	800458e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d903      	bls.n	8004562 <DMA_CheckFifoParam+0xb6>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b03      	cmp	r3, #3
 800455e:	d003      	beq.n	8004568 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004560:	e018      	b.n	8004594 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
      break;
 8004566:	e015      	b.n	8004594 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00e      	beq.n	8004592 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
      break;
 8004578:	e00b      	b.n	8004592 <DMA_CheckFifoParam+0xe6>
      break;
 800457a:	bf00      	nop
 800457c:	e00a      	b.n	8004594 <DMA_CheckFifoParam+0xe8>
      break;
 800457e:	bf00      	nop
 8004580:	e008      	b.n	8004594 <DMA_CheckFifoParam+0xe8>
      break;
 8004582:	bf00      	nop
 8004584:	e006      	b.n	8004594 <DMA_CheckFifoParam+0xe8>
      break;
 8004586:	bf00      	nop
 8004588:	e004      	b.n	8004594 <DMA_CheckFifoParam+0xe8>
      break;
 800458a:	bf00      	nop
 800458c:	e002      	b.n	8004594 <DMA_CheckFifoParam+0xe8>
      break;   
 800458e:	bf00      	nop
 8004590:	e000      	b.n	8004594 <DMA_CheckFifoParam+0xe8>
      break;
 8004592:	bf00      	nop
    }
  } 
  
  return status; 
 8004594:	7bfb      	ldrb	r3, [r7, #15]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop

080045a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b089      	sub	sp, #36	; 0x24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	e159      	b.n	8004874 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045c0:	2201      	movs	r2, #1
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4013      	ands	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	429a      	cmp	r2, r3
 80045da:	f040 8148 	bne.w	800486e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d005      	beq.n	80045f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d130      	bne.n	8004658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	2203      	movs	r2, #3
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4013      	ands	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4313      	orrs	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800462c:	2201      	movs	r2, #1
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	43db      	mvns	r3, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4013      	ands	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 0201 	and.w	r2, r3, #1
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	2b03      	cmp	r3, #3
 8004662:	d017      	beq.n	8004694 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	2203      	movs	r2, #3
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d123      	bne.n	80046e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	08da      	lsrs	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3208      	adds	r2, #8
 80046a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	220f      	movs	r2, #15
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	08da      	lsrs	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3208      	adds	r2, #8
 80046e2:	69b9      	ldr	r1, [r7, #24]
 80046e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	2203      	movs	r2, #3
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 0203 	and.w	r2, r3, #3
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80a2 	beq.w	800486e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	4b57      	ldr	r3, [pc, #348]	; (800488c <HAL_GPIO_Init+0x2e8>)
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	4a56      	ldr	r2, [pc, #344]	; (800488c <HAL_GPIO_Init+0x2e8>)
 8004734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004738:	6453      	str	r3, [r2, #68]	; 0x44
 800473a:	4b54      	ldr	r3, [pc, #336]	; (800488c <HAL_GPIO_Init+0x2e8>)
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004746:	4a52      	ldr	r2, [pc, #328]	; (8004890 <HAL_GPIO_Init+0x2ec>)
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	3302      	adds	r3, #2
 800474e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	220f      	movs	r2, #15
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a49      	ldr	r2, [pc, #292]	; (8004894 <HAL_GPIO_Init+0x2f0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d019      	beq.n	80047a6 <HAL_GPIO_Init+0x202>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a48      	ldr	r2, [pc, #288]	; (8004898 <HAL_GPIO_Init+0x2f4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_GPIO_Init+0x1fe>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a47      	ldr	r2, [pc, #284]	; (800489c <HAL_GPIO_Init+0x2f8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00d      	beq.n	800479e <HAL_GPIO_Init+0x1fa>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a46      	ldr	r2, [pc, #280]	; (80048a0 <HAL_GPIO_Init+0x2fc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d007      	beq.n	800479a <HAL_GPIO_Init+0x1f6>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a45      	ldr	r2, [pc, #276]	; (80048a4 <HAL_GPIO_Init+0x300>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d101      	bne.n	8004796 <HAL_GPIO_Init+0x1f2>
 8004792:	2304      	movs	r3, #4
 8004794:	e008      	b.n	80047a8 <HAL_GPIO_Init+0x204>
 8004796:	2307      	movs	r3, #7
 8004798:	e006      	b.n	80047a8 <HAL_GPIO_Init+0x204>
 800479a:	2303      	movs	r3, #3
 800479c:	e004      	b.n	80047a8 <HAL_GPIO_Init+0x204>
 800479e:	2302      	movs	r3, #2
 80047a0:	e002      	b.n	80047a8 <HAL_GPIO_Init+0x204>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <HAL_GPIO_Init+0x204>
 80047a6:	2300      	movs	r3, #0
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	f002 0203 	and.w	r2, r2, #3
 80047ae:	0092      	lsls	r2, r2, #2
 80047b0:	4093      	lsls	r3, r2
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047b8:	4935      	ldr	r1, [pc, #212]	; (8004890 <HAL_GPIO_Init+0x2ec>)
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	089b      	lsrs	r3, r3, #2
 80047be:	3302      	adds	r3, #2
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047c6:	4b38      	ldr	r3, [pc, #224]	; (80048a8 <HAL_GPIO_Init+0x304>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047ea:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <HAL_GPIO_Init+0x304>)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047f0:	4b2d      	ldr	r3, [pc, #180]	; (80048a8 <HAL_GPIO_Init+0x304>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004814:	4a24      	ldr	r2, [pc, #144]	; (80048a8 <HAL_GPIO_Init+0x304>)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800481a:	4b23      	ldr	r3, [pc, #140]	; (80048a8 <HAL_GPIO_Init+0x304>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800483e:	4a1a      	ldr	r2, [pc, #104]	; (80048a8 <HAL_GPIO_Init+0x304>)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004844:	4b18      	ldr	r3, [pc, #96]	; (80048a8 <HAL_GPIO_Init+0x304>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004868:	4a0f      	ldr	r2, [pc, #60]	; (80048a8 <HAL_GPIO_Init+0x304>)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	3301      	adds	r3, #1
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2b0f      	cmp	r3, #15
 8004878:	f67f aea2 	bls.w	80045c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	3724      	adds	r7, #36	; 0x24
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40023800 	.word	0x40023800
 8004890:	40013800 	.word	0x40013800
 8004894:	40020000 	.word	0x40020000
 8004898:	40020400 	.word	0x40020400
 800489c:	40020800 	.word	0x40020800
 80048a0:	40020c00 	.word	0x40020c00
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40013c00 	.word	0x40013c00

080048ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	887b      	ldrh	r3, [r7, #2]
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048c4:	2301      	movs	r3, #1
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	e001      	b.n	80048ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	807b      	strh	r3, [r7, #2]
 80048e8:	4613      	mov	r3, r2
 80048ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048ec:	787b      	ldrb	r3, [r7, #1]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048f2:	887a      	ldrh	r2, [r7, #2]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048f8:	e003      	b.n	8004902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048fa:	887b      	ldrh	r3, [r7, #2]
 80048fc:	041a      	lsls	r2, r3, #16
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	619a      	str	r2, [r3, #24]
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
	...

08004910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800491a:	4b08      	ldr	r3, [pc, #32]	; (800493c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	4013      	ands	r3, r2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d006      	beq.n	8004934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004926:	4a05      	ldr	r2, [pc, #20]	; (800493c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fd f88a 	bl	8001a48 <HAL_GPIO_EXTI_Callback>
  }
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40013c00 	.word	0x40013c00

08004940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e12b      	b.n	8004baa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fe fdd4 	bl	8003514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2224      	movs	r2, #36	; 0x24
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0201 	bic.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004992:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049a4:	f002 fab8 	bl	8006f18 <HAL_RCC_GetPCLK1Freq>
 80049a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4a81      	ldr	r2, [pc, #516]	; (8004bb4 <HAL_I2C_Init+0x274>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d807      	bhi.n	80049c4 <HAL_I2C_Init+0x84>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a80      	ldr	r2, [pc, #512]	; (8004bb8 <HAL_I2C_Init+0x278>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	bf94      	ite	ls
 80049bc:	2301      	movls	r3, #1
 80049be:	2300      	movhi	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	e006      	b.n	80049d2 <HAL_I2C_Init+0x92>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a7d      	ldr	r2, [pc, #500]	; (8004bbc <HAL_I2C_Init+0x27c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	bf94      	ite	ls
 80049cc:	2301      	movls	r3, #1
 80049ce:	2300      	movhi	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e0e7      	b.n	8004baa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a78      	ldr	r2, [pc, #480]	; (8004bc0 <HAL_I2C_Init+0x280>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	0c9b      	lsrs	r3, r3, #18
 80049e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a6a      	ldr	r2, [pc, #424]	; (8004bb4 <HAL_I2C_Init+0x274>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d802      	bhi.n	8004a14 <HAL_I2C_Init+0xd4>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	3301      	adds	r3, #1
 8004a12:	e009      	b.n	8004a28 <HAL_I2C_Init+0xe8>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	4a69      	ldr	r2, [pc, #420]	; (8004bc4 <HAL_I2C_Init+0x284>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	099b      	lsrs	r3, r3, #6
 8004a26:	3301      	adds	r3, #1
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	495c      	ldr	r1, [pc, #368]	; (8004bb4 <HAL_I2C_Init+0x274>)
 8004a44:	428b      	cmp	r3, r1
 8004a46:	d819      	bhi.n	8004a7c <HAL_I2C_Init+0x13c>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1e59      	subs	r1, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a56:	1c59      	adds	r1, r3, #1
 8004a58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a5c:	400b      	ands	r3, r1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_I2C_Init+0x138>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1e59      	subs	r1, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a70:	3301      	adds	r3, #1
 8004a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a76:	e051      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004a78:	2304      	movs	r3, #4
 8004a7a:	e04f      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d111      	bne.n	8004aa8 <HAL_I2C_Init+0x168>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1e58      	subs	r0, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	440b      	add	r3, r1
 8004a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a96:	3301      	adds	r3, #1
 8004a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	e012      	b.n	8004ace <HAL_I2C_Init+0x18e>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1e58      	subs	r0, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6859      	ldr	r1, [r3, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	0099      	lsls	r1, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_I2C_Init+0x196>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e022      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10e      	bne.n	8004afc <HAL_I2C_Init+0x1bc>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1e58      	subs	r0, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6859      	ldr	r1, [r3, #4]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	440b      	add	r3, r1
 8004aec:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af0:	3301      	adds	r3, #1
 8004af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afa:	e00f      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1e58      	subs	r0, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	0099      	lsls	r1, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b12:	3301      	adds	r3, #1
 8004b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	6809      	ldr	r1, [r1, #0]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69da      	ldr	r2, [r3, #28]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6911      	ldr	r1, [r2, #16]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68d2      	ldr	r2, [r2, #12]
 8004b56:	4311      	orrs	r1, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	000186a0 	.word	0x000186a0
 8004bb8:	001e847f 	.word	0x001e847f
 8004bbc:	003d08ff 	.word	0x003d08ff
 8004bc0:	431bde83 	.word	0x431bde83
 8004bc4:	10624dd3 	.word	0x10624dd3

08004bc8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	607a      	str	r2, [r7, #4]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	817b      	strh	r3, [r7, #10]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	f040 8085 	bne.w	8004cf8 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bee:	4b46      	ldr	r3, [pc, #280]	; (8004d08 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	08db      	lsrs	r3, r3, #3
 8004bf4:	4a45      	ldr	r2, [pc, #276]	; (8004d0c <HAL_I2C_Master_Transmit_IT+0x144>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	0a1a      	lsrs	r2, r3, #8
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	009a      	lsls	r2, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d116      	bne.n	8004c42 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e05b      	b.n	8004cfa <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d0db      	beq.n	8004c08 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_I2C_Master_Transmit_IT+0x96>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e04d      	b.n	8004cfa <HAL_I2C_Master_Transmit_IT+0x132>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d007      	beq.n	8004c84 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2221      	movs	r2, #33	; 0x21
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2210      	movs	r2, #16
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	893a      	ldrh	r2, [r7, #8]
 8004cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <HAL_I2C_Master_Transmit_IT+0x148>)
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004cc6:	897a      	ldrh	r2, [r7, #10]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cda:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004cf2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	e000      	b.n	8004cfa <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004cf8:	2302      	movs	r3, #2
  }
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	2000001c 	.word	0x2000001c
 8004d0c:	14f8b589 	.word	0x14f8b589
 8004d10:	ffff0000 	.word	0xffff0000

08004d14 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	2b10      	cmp	r3, #16
 8004d42:	d003      	beq.n	8004d4c <HAL_I2C_EV_IRQHandler+0x38>
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	2b40      	cmp	r3, #64	; 0x40
 8004d48:	f040 80bd 	bne.w	8004ec6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10d      	bne.n	8004d82 <HAL_I2C_EV_IRQHandler+0x6e>
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004d6c:	d003      	beq.n	8004d76 <HAL_I2C_EV_IRQHandler+0x62>
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004d74:	d101      	bne.n	8004d7a <HAL_I2C_EV_IRQHandler+0x66>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <HAL_I2C_EV_IRQHandler+0x68>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	f000 812e 	beq.w	8004fde <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00c      	beq.n	8004da6 <HAL_I2C_EV_IRQHandler+0x92>
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	0a5b      	lsrs	r3, r3, #9
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d006      	beq.n	8004da6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f001 fc55 	bl	8006648 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fd62 	bl	8005868 <I2C_Master_SB>
 8004da4:	e08e      	b.n	8004ec4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	08db      	lsrs	r3, r3, #3
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_I2C_EV_IRQHandler+0xb2>
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	0a5b      	lsrs	r3, r3, #9
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fdd8 	bl	8005974 <I2C_Master_ADD10>
 8004dc4:	e07e      	b.n	8004ec4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <HAL_I2C_EV_IRQHandler+0xd2>
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	0a5b      	lsrs	r3, r3, #9
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fdf2 	bl	80059c8 <I2C_Master_ADDR>
 8004de4:	e06e      	b.n	8004ec4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	089b      	lsrs	r3, r3, #2
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d037      	beq.n	8004e62 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e00:	f000 80ef 	beq.w	8004fe2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	09db      	lsrs	r3, r3, #7
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00f      	beq.n	8004e30 <HAL_I2C_EV_IRQHandler+0x11c>
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	0a9b      	lsrs	r3, r3, #10
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d009      	beq.n	8004e30 <HAL_I2C_EV_IRQHandler+0x11c>
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	089b      	lsrs	r3, r3, #2
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f9ef 	bl	800520c <I2C_MasterTransmit_TXE>
 8004e2e:	e049      	b.n	8004ec4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	089b      	lsrs	r3, r3, #2
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 80d2 	beq.w	8004fe2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	0a5b      	lsrs	r3, r3, #9
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 80cb 	beq.w	8004fe2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d103      	bne.n	8004e5a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fa76 	bl	8005344 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e58:	e0c3      	b.n	8004fe2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fada 	bl	8005414 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e60:	e0bf      	b.n	8004fe2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e70:	f000 80b7 	beq.w	8004fe2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	099b      	lsrs	r3, r3, #6
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00f      	beq.n	8004ea0 <HAL_I2C_EV_IRQHandler+0x18c>
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	0a9b      	lsrs	r3, r3, #10
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d009      	beq.n	8004ea0 <HAL_I2C_EV_IRQHandler+0x18c>
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	089b      	lsrs	r3, r3, #2
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d103      	bne.n	8004ea0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fb4a 	bl	8005532 <I2C_MasterReceive_RXNE>
 8004e9e:	e011      	b.n	8004ec4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	089b      	lsrs	r3, r3, #2
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 809a 	beq.w	8004fe2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	0a5b      	lsrs	r3, r3, #9
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8093 	beq.w	8004fe2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fbe9 	bl	8005694 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ec2:	e08e      	b.n	8004fe2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004ec4:	e08d      	b.n	8004fe2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d004      	beq.n	8004ed8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	e007      	b.n	8004ee8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d012      	beq.n	8004f1a <HAL_I2C_EV_IRQHandler+0x206>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	0a5b      	lsrs	r3, r3, #9
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00c      	beq.n	8004f1a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004f10:	69b9      	ldr	r1, [r7, #24]
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 ffa7 	bl	8005e66 <I2C_Slave_ADDR>
 8004f18:	e066      	b.n	8004fe8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	091b      	lsrs	r3, r3, #4
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d009      	beq.n	8004f3a <HAL_I2C_EV_IRQHandler+0x226>
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	0a5b      	lsrs	r3, r3, #9
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 ffdc 	bl	8005ef0 <I2C_Slave_STOPF>
 8004f38:	e056      	b.n	8004fe8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f3a:	7bbb      	ldrb	r3, [r7, #14]
 8004f3c:	2b21      	cmp	r3, #33	; 0x21
 8004f3e:	d002      	beq.n	8004f46 <HAL_I2C_EV_IRQHandler+0x232>
 8004f40:	7bbb      	ldrb	r3, [r7, #14]
 8004f42:	2b29      	cmp	r3, #41	; 0x29
 8004f44:	d125      	bne.n	8004f92 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	09db      	lsrs	r3, r3, #7
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00f      	beq.n	8004f72 <HAL_I2C_EV_IRQHandler+0x25e>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	0a9b      	lsrs	r3, r3, #10
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <HAL_I2C_EV_IRQHandler+0x25e>
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	089b      	lsrs	r3, r3, #2
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 febd 	bl	8005cea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f70:	e039      	b.n	8004fe6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	089b      	lsrs	r3, r3, #2
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d033      	beq.n	8004fe6 <HAL_I2C_EV_IRQHandler+0x2d2>
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	0a5b      	lsrs	r3, r3, #9
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d02d      	beq.n	8004fe6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 feea 	bl	8005d64 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f90:	e029      	b.n	8004fe6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	099b      	lsrs	r3, r3, #6
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00f      	beq.n	8004fbe <HAL_I2C_EV_IRQHandler+0x2aa>
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	0a9b      	lsrs	r3, r3, #10
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <HAL_I2C_EV_IRQHandler+0x2aa>
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	089b      	lsrs	r3, r3, #2
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fef5 	bl	8005da6 <I2C_SlaveReceive_RXNE>
 8004fbc:	e014      	b.n	8004fe8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	089b      	lsrs	r3, r3, #2
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00e      	beq.n	8004fe8 <HAL_I2C_EV_IRQHandler+0x2d4>
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	0a5b      	lsrs	r3, r3, #9
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d008      	beq.n	8004fe8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 ff23 	bl	8005e22 <I2C_SlaveReceive_BTF>
 8004fdc:	e004      	b.n	8004fe8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004fde:	bf00      	nop
 8004fe0:	e002      	b.n	8004fe8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fe2:	bf00      	nop
 8004fe4:	e000      	b.n	8004fe8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fe6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b08a      	sub	sp, #40	; 0x28
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005006:	2300      	movs	r3, #0
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005010:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	0a1b      	lsrs	r3, r3, #8
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00e      	beq.n	800503c <HAL_I2C_ER_IRQHandler+0x4e>
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d008      	beq.n	800503c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800503a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	0a5b      	lsrs	r3, r3, #9
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00e      	beq.n	8005066 <HAL_I2C_ER_IRQHandler+0x78>
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	0a1b      	lsrs	r3, r3, #8
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	f043 0302 	orr.w	r3, r3, #2
 800505a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005064:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	0a9b      	lsrs	r3, r3, #10
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d03f      	beq.n	80050f2 <HAL_I2C_ER_IRQHandler+0x104>
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d039      	beq.n	80050f2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800507e:	7efb      	ldrb	r3, [r7, #27]
 8005080:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005098:	7ebb      	ldrb	r3, [r7, #26]
 800509a:	2b20      	cmp	r3, #32
 800509c:	d112      	bne.n	80050c4 <HAL_I2C_ER_IRQHandler+0xd6>
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10f      	bne.n	80050c4 <HAL_I2C_ER_IRQHandler+0xd6>
 80050a4:	7cfb      	ldrb	r3, [r7, #19]
 80050a6:	2b21      	cmp	r3, #33	; 0x21
 80050a8:	d008      	beq.n	80050bc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80050aa:	7cfb      	ldrb	r3, [r7, #19]
 80050ac:	2b29      	cmp	r3, #41	; 0x29
 80050ae:	d005      	beq.n	80050bc <HAL_I2C_ER_IRQHandler+0xce>
 80050b0:	7cfb      	ldrb	r3, [r7, #19]
 80050b2:	2b28      	cmp	r3, #40	; 0x28
 80050b4:	d106      	bne.n	80050c4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b21      	cmp	r3, #33	; 0x21
 80050ba:	d103      	bne.n	80050c4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f001 f847 	bl	8006150 <I2C_Slave_AF>
 80050c2:	e016      	b.n	80050f2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050cc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	f043 0304 	orr.w	r3, r3, #4
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80050d6:	7efb      	ldrb	r3, [r7, #27]
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d002      	beq.n	80050e2 <HAL_I2C_ER_IRQHandler+0xf4>
 80050dc:	7efb      	ldrb	r3, [r7, #27]
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	d107      	bne.n	80050f2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	0adb      	lsrs	r3, r3, #11
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00e      	beq.n	800511c <HAL_I2C_ER_IRQHandler+0x12e>
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	0a1b      	lsrs	r3, r3, #8
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d008      	beq.n	800511c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	f043 0308 	orr.w	r3, r3, #8
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800511a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	431a      	orrs	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f001 f87e 	bl	8006230 <I2C_ITError>
  }
}
 8005134:	bf00      	nop
 8005136:	3728      	adds	r7, #40	; 0x28
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
 8005198:	4613      	mov	r3, r2
 800519a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005222:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522e:	2b00      	cmp	r3, #0
 8005230:	d150      	bne.n	80052d4 <I2C_MasterTransmit_TXE+0xc8>
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	2b21      	cmp	r3, #33	; 0x21
 8005236:	d14d      	bne.n	80052d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b08      	cmp	r3, #8
 800523c:	d01d      	beq.n	800527a <I2C_MasterTransmit_TXE+0x6e>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b20      	cmp	r3, #32
 8005242:	d01a      	beq.n	800527a <I2C_MasterTransmit_TXE+0x6e>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800524a:	d016      	beq.n	800527a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800525a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2211      	movs	r2, #17
 8005260:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff ff62 	bl	800513c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005278:	e060      	b.n	800533c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005288:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005298:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d107      	bne.n	80052c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff ff7d 	bl	80051bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052c2:	e03b      	b.n	800533c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff ff35 	bl	800513c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052d2:	e033      	b.n	800533c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	2b21      	cmp	r3, #33	; 0x21
 80052d8:	d005      	beq.n	80052e6 <I2C_MasterTransmit_TXE+0xda>
 80052da:	7bbb      	ldrb	r3, [r7, #14]
 80052dc:	2b40      	cmp	r3, #64	; 0x40
 80052de:	d12d      	bne.n	800533c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	2b22      	cmp	r3, #34	; 0x22
 80052e4:	d12a      	bne.n	800533c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d108      	bne.n	8005302 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005300:	e01c      	b.n	800533c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b40      	cmp	r3, #64	; 0x40
 800530c:	d103      	bne.n	8005316 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f880 	bl	8005414 <I2C_MemoryTransmit_TXE_BTF>
}
 8005314:	e012      	b.n	800533c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	781a      	ldrb	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800533a:	e7ff      	b.n	800533c <I2C_MasterTransmit_TXE+0x130>
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b21      	cmp	r3, #33	; 0x21
 800535c:	d156      	bne.n	800540c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d012      	beq.n	800538e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	781a      	ldrb	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800538c:	e03e      	b.n	800540c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b08      	cmp	r3, #8
 8005392:	d01d      	beq.n	80053d0 <I2C_MasterTransmit_BTF+0x8c>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b20      	cmp	r3, #32
 8005398:	d01a      	beq.n	80053d0 <I2C_MasterTransmit_BTF+0x8c>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053a0:	d016      	beq.n	80053d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2211      	movs	r2, #17
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff feb7 	bl	800513c <HAL_I2C_MasterTxCpltCallback>
}
 80053ce:	e01d      	b.n	800540c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fe98 	bl	800513c <HAL_I2C_MasterTxCpltCallback>
}
 800540c:	bf00      	nop
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005422:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005428:	2b00      	cmp	r3, #0
 800542a:	d11d      	bne.n	8005468 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005430:	2b01      	cmp	r3, #1
 8005432:	d10b      	bne.n	800544c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005438:	b2da      	uxtb	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800544a:	e06e      	b.n	800552a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005450:	b29b      	uxth	r3, r3
 8005452:	121b      	asrs	r3, r3, #8
 8005454:	b2da      	uxtb	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005466:	e060      	b.n	800552a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546c:	2b01      	cmp	r3, #1
 800546e:	d10b      	bne.n	8005488 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005474:	b2da      	uxtb	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005486:	e050      	b.n	800552a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548c:	2b02      	cmp	r3, #2
 800548e:	d14c      	bne.n	800552a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	2b22      	cmp	r3, #34	; 0x22
 8005494:	d108      	bne.n	80054a8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a4:	601a      	str	r2, [r3, #0]
}
 80054a6:	e040      	b.n	800552a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d015      	beq.n	80054de <I2C_MemoryTransmit_TXE_BTF+0xca>
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b21      	cmp	r3, #33	; 0x21
 80054b6:	d112      	bne.n	80054de <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	781a      	ldrb	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80054dc:	e025      	b.n	800552a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d120      	bne.n	800552a <I2C_MemoryTransmit_TXE_BTF+0x116>
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	2b21      	cmp	r3, #33	; 0x21
 80054ec:	d11d      	bne.n	800552a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054fc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff fe49 	bl	80051bc <HAL_I2C_MemTxCpltCallback>
}
 800552a:	bf00      	nop
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b22      	cmp	r3, #34	; 0x22
 8005544:	f040 80a2 	bne.w	800568c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d921      	bls.n	800559a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b03      	cmp	r3, #3
 8005584:	f040 8082 	bne.w	800568c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005596:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005598:	e078      	b.n	800568c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d074      	beq.n	800568c <I2C_MasterReceive_RXNE+0x15a>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d002      	beq.n	80055ae <I2C_MasterReceive_RXNE+0x7c>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d16e      	bne.n	800568c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f001 f818 	bl	80065e4 <I2C_WaitOnSTOPRequestThroughIT>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d142      	bne.n	8005640 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	d10a      	bne.n	800562a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fdd4 	bl	80051d0 <HAL_I2C_MemRxCpltCallback>
}
 8005628:	e030      	b.n	800568c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2212      	movs	r2, #18
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff fd89 	bl	8005150 <HAL_I2C_MasterRxCpltCallback>
}
 800563e:	e025      	b.n	800568c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800564e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff fdac 	bl	80051e4 <HAL_I2C_ErrorCallback>
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d11b      	bne.n	80056e4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80056e2:	e0bd      	b.n	8005860 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d129      	bne.n	8005742 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b04      	cmp	r3, #4
 8005702:	d00a      	beq.n	800571a <I2C_MasterReceive_BTF+0x86>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d007      	beq.n	800571a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005718:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005740:	e08e      	b.n	8005860 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d176      	bne.n	800583a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d002      	beq.n	8005758 <I2C_MasterReceive_BTF+0xc4>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b10      	cmp	r3, #16
 8005756:	d108      	bne.n	800576a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	e019      	b.n	800579e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b04      	cmp	r3, #4
 800576e:	d002      	beq.n	8005776 <I2C_MasterReceive_BTF+0xe2>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d108      	bne.n	8005788 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	e00a      	b.n	800579e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b10      	cmp	r3, #16
 800578c:	d007      	beq.n	800579e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800579c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691a      	ldr	r2, [r3, #16]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057f8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b40      	cmp	r3, #64	; 0x40
 800580c:	d10a      	bne.n	8005824 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff fcd7 	bl	80051d0 <HAL_I2C_MemRxCpltCallback>
}
 8005822:	e01d      	b.n	8005860 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2212      	movs	r2, #18
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff fc8c 	bl	8005150 <HAL_I2C_MasterRxCpltCallback>
}
 8005838:	e012      	b.n	8005860 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005856:	b29b      	uxth	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	d117      	bne.n	80058ac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005880:	2b00      	cmp	r3, #0
 8005882:	d109      	bne.n	8005898 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005888:	b2db      	uxtb	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005894:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005896:	e067      	b.n	8005968 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589c:	b2db      	uxtb	r3, r3
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	611a      	str	r2, [r3, #16]
}
 80058aa:	e05d      	b.n	8005968 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058b4:	d133      	bne.n	800591e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b21      	cmp	r3, #33	; 0x21
 80058c0:	d109      	bne.n	80058d6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058d2:	611a      	str	r2, [r3, #16]
 80058d4:	e008      	b.n	80058e8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	f043 0301 	orr.w	r3, r3, #1
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <I2C_Master_SB+0x92>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d108      	bne.n	800590c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d032      	beq.n	8005968 <I2C_Master_SB+0x100>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d02d      	beq.n	8005968 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800591a:	605a      	str	r2, [r3, #4]
}
 800591c:	e024      	b.n	8005968 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10e      	bne.n	8005944 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	b29b      	uxth	r3, r3
 800592c:	11db      	asrs	r3, r3, #7
 800592e:	b2db      	uxtb	r3, r3
 8005930:	f003 0306 	and.w	r3, r3, #6
 8005934:	b2db      	uxtb	r3, r3
 8005936:	f063 030f 	orn	r3, r3, #15
 800593a:	b2da      	uxtb	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	611a      	str	r2, [r3, #16]
}
 8005942:	e011      	b.n	8005968 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005948:	2b01      	cmp	r3, #1
 800594a:	d10d      	bne.n	8005968 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	b29b      	uxth	r3, r3
 8005952:	11db      	asrs	r3, r3, #7
 8005954:	b2db      	uxtb	r3, r3
 8005956:	f003 0306 	and.w	r3, r3, #6
 800595a:	b2db      	uxtb	r3, r3
 800595c:	f063 030e 	orn	r3, r3, #14
 8005960:	b2da      	uxtb	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	611a      	str	r2, [r3, #16]
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005980:	b2da      	uxtb	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <I2C_Master_ADD10+0x26>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d108      	bne.n	80059ac <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00c      	beq.n	80059bc <I2C_Master_ADD10+0x48>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d007      	beq.n	80059bc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ba:	605a      	str	r2, [r3, #4]
  }
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b091      	sub	sp, #68	; 0x44
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b22      	cmp	r3, #34	; 0x22
 80059f0:	f040 8169 	bne.w	8005cc6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10f      	bne.n	8005a1c <I2C_Master_ADDR+0x54>
 80059fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d10b      	bne.n	8005a1c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a04:	2300      	movs	r3, #0
 8005a06:	633b      	str	r3, [r7, #48]	; 0x30
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	633b      	str	r3, [r7, #48]	; 0x30
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	e160      	b.n	8005cde <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d11d      	bne.n	8005a60 <I2C_Master_ADDR+0x98>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a2c:	d118      	bne.n	8005a60 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a52:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	651a      	str	r2, [r3, #80]	; 0x50
 8005a5e:	e13e      	b.n	8005cde <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d113      	bne.n	8005a92 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	e115      	b.n	8005cbe <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	f040 808a 	bne.w	8005bb2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005aa4:	d137      	bne.n	8005b16 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac4:	d113      	bne.n	8005aee <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	e0e7      	b.n	8005cbe <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aee:	2300      	movs	r3, #0
 8005af0:	623b      	str	r3, [r7, #32]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	623b      	str	r3, [r7, #32]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	623b      	str	r3, [r7, #32]
 8005b02:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	e0d3      	b.n	8005cbe <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d02e      	beq.n	8005b7a <I2C_Master_ADDR+0x1b2>
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d02b      	beq.n	8005b7a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b24:	2b12      	cmp	r3, #18
 8005b26:	d102      	bne.n	8005b2e <I2C_Master_ADDR+0x166>
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d125      	bne.n	8005b7a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d00e      	beq.n	8005b52 <I2C_Master_ADDR+0x18a>
 8005b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d00b      	beq.n	8005b52 <I2C_Master_ADDR+0x18a>
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d008      	beq.n	8005b52 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	e007      	b.n	8005b62 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b60:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	61fb      	str	r3, [r7, #28]
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	e0a1      	b.n	8005cbe <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b88:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	e085      	b.n	8005cbe <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d14d      	bne.n	8005c58 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d016      	beq.n	8005bf0 <I2C_Master_ADDR+0x228>
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d013      	beq.n	8005bf0 <I2C_Master_ADDR+0x228>
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	2b10      	cmp	r3, #16
 8005bcc:	d010      	beq.n	8005bf0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bdc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e007      	b.n	8005c00 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bfe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c0e:	d117      	bne.n	8005c40 <I2C_Master_ADDR+0x278>
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c16:	d00b      	beq.n	8005c30 <I2C_Master_ADDR+0x268>
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d008      	beq.n	8005c30 <I2C_Master_ADDR+0x268>
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d005      	beq.n	8005c30 <I2C_Master_ADDR+0x268>
 8005c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c26:	2b10      	cmp	r3, #16
 8005c28:	d002      	beq.n	8005c30 <I2C_Master_ADDR+0x268>
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d107      	bne.n	8005c40 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c3e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c40:	2300      	movs	r3, #0
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	e032      	b.n	8005cbe <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c66:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c76:	d117      	bne.n	8005ca8 <I2C_Master_ADDR+0x2e0>
 8005c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c7e:	d00b      	beq.n	8005c98 <I2C_Master_ADDR+0x2d0>
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d008      	beq.n	8005c98 <I2C_Master_ADDR+0x2d0>
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d005      	beq.n	8005c98 <I2C_Master_ADDR+0x2d0>
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8e:	2b10      	cmp	r3, #16
 8005c90:	d002      	beq.n	8005c98 <I2C_Master_ADDR+0x2d0>
 8005c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d107      	bne.n	8005ca8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ca6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ca8:	2300      	movs	r3, #0
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005cc4:	e00b      	b.n	8005cde <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	68fb      	ldr	r3, [r7, #12]
}
 8005cdc:	e7ff      	b.n	8005cde <I2C_Master_ADDR+0x316>
 8005cde:	bf00      	nop
 8005ce0:	3744      	adds	r7, #68	; 0x44
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d02b      	beq.n	8005d5c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	781a      	ldrb	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d114      	bne.n	8005d5c <I2C_SlaveTransmit_TXE+0x72>
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	2b29      	cmp	r3, #41	; 0x29
 8005d36:	d111      	bne.n	8005d5c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2221      	movs	r2, #33	; 0x21
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2228      	movs	r2, #40	; 0x28
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff fa04 	bl	8005164 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d011      	beq.n	8005d9a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	781a      	ldrb	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d02c      	beq.n	8005e1a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691a      	ldr	r2, [r3, #16]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d114      	bne.n	8005e1a <I2C_SlaveReceive_RXNE+0x74>
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2b2a      	cmp	r3, #42	; 0x2a
 8005df4:	d111      	bne.n	8005e1a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e04:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2222      	movs	r2, #34	; 0x22
 8005e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2228      	movs	r2, #40	; 0x28
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff f9af 	bl	8005178 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d012      	beq.n	8005e5a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691a      	ldr	r2, [r3, #16]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005e70:	2300      	movs	r3, #0
 8005e72:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e80:	2b28      	cmp	r3, #40	; 0x28
 8005e82:	d127      	bne.n	8005ed4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e92:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	089b      	lsrs	r3, r3, #2
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	09db      	lsrs	r3, r3, #7
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	81bb      	strh	r3, [r7, #12]
 8005eb6:	e002      	b.n	8005ebe <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005ec6:	89ba      	ldrh	r2, [r7, #12]
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff f95d 	bl	800518c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ed2:	e008      	b.n	8005ee6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0202 	mvn.w	r2, #2
 8005edc:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f0e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005f10:	2300      	movs	r3, #0
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f3c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f4c:	d172      	bne.n	8006034 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	2b22      	cmp	r3, #34	; 0x22
 8005f52:	d002      	beq.n	8005f5a <I2C_Slave_STOPF+0x6a>
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	2b2a      	cmp	r3, #42	; 0x2a
 8005f58:	d135      	bne.n	8005fc6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f043 0204 	orr.w	r2, r3, #4
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe fa18 	bl	80043c8 <HAL_DMA_GetState>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d049      	beq.n	8006032 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	4a69      	ldr	r2, [pc, #420]	; (8006148 <I2C_Slave_STOPF+0x258>)
 8005fa4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe f860 	bl	8004070 <HAL_DMA_Abort_IT>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d03d      	beq.n	8006032 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fc4:	e035      	b.n	8006032 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f043 0204 	orr.w	r2, r3, #4
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ff8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fe f9e2 	bl	80043c8 <HAL_DMA_GetState>
 8006004:	4603      	mov	r3, r0
 8006006:	2b01      	cmp	r3, #1
 8006008:	d014      	beq.n	8006034 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600e:	4a4e      	ldr	r2, [pc, #312]	; (8006148 <I2C_Slave_STOPF+0x258>)
 8006010:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe f82a 	bl	8004070 <HAL_DMA_Abort_IT>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d008      	beq.n	8006034 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800602c:	4610      	mov	r0, r2
 800602e:	4798      	blx	r3
 8006030:	e000      	b.n	8006034 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006032:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d03e      	beq.n	80060bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b04      	cmp	r3, #4
 800604a:	d112      	bne.n	8006072 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607c:	2b40      	cmp	r3, #64	; 0x40
 800607e:	d112      	bne.n	80060a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	f043 0204 	orr.w	r2, r3, #4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f8b3 	bl	8006230 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80060ca:	e039      	b.n	8006140 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	2b2a      	cmp	r3, #42	; 0x2a
 80060d0:	d109      	bne.n	80060e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2228      	movs	r2, #40	; 0x28
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff f849 	bl	8005178 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b28      	cmp	r3, #40	; 0x28
 80060f0:	d111      	bne.n	8006116 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a15      	ldr	r2, [pc, #84]	; (800614c <I2C_Slave_STOPF+0x25c>)
 80060f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff f84a 	bl	80051a8 <HAL_I2C_ListenCpltCallback>
}
 8006114:	e014      	b.n	8006140 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611a:	2b22      	cmp	r3, #34	; 0x22
 800611c:	d002      	beq.n	8006124 <I2C_Slave_STOPF+0x234>
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	2b22      	cmp	r3, #34	; 0x22
 8006122:	d10d      	bne.n	8006140 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff f81c 	bl	8005178 <HAL_I2C_SlaveRxCpltCallback>
}
 8006140:	bf00      	nop
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	08006495 	.word	0x08006495
 800614c:	ffff0000 	.word	0xffff0000

08006150 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b08      	cmp	r3, #8
 800616a:	d002      	beq.n	8006172 <I2C_Slave_AF+0x22>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b20      	cmp	r3, #32
 8006170:	d129      	bne.n	80061c6 <I2C_Slave_AF+0x76>
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	2b28      	cmp	r3, #40	; 0x28
 8006176:	d126      	bne.n	80061c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a2c      	ldr	r2, [pc, #176]	; (800622c <I2C_Slave_AF+0xdc>)
 800617c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800618c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006196:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fe fff2 	bl	80051a8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80061c4:	e02e      	b.n	8006224 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	2b21      	cmp	r3, #33	; 0x21
 80061ca:	d126      	bne.n	800621a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a17      	ldr	r2, [pc, #92]	; (800622c <I2C_Slave_AF+0xdc>)
 80061d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2221      	movs	r2, #33	; 0x21
 80061d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006200:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006210:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fe ffa6 	bl	8005164 <HAL_I2C_SlaveTxCpltCallback>
}
 8006218:	e004      	b.n	8006224 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006222:	615a      	str	r2, [r3, #20]
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	ffff0000 	.word	0xffff0000

08006230 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006246:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006248:	7bbb      	ldrb	r3, [r7, #14]
 800624a:	2b10      	cmp	r3, #16
 800624c:	d002      	beq.n	8006254 <I2C_ITError+0x24>
 800624e:	7bbb      	ldrb	r3, [r7, #14]
 8006250:	2b40      	cmp	r3, #64	; 0x40
 8006252:	d10a      	bne.n	800626a <I2C_ITError+0x3a>
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	2b22      	cmp	r3, #34	; 0x22
 8006258:	d107      	bne.n	800626a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006268:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006270:	2b28      	cmp	r3, #40	; 0x28
 8006272:	d107      	bne.n	8006284 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2228      	movs	r2, #40	; 0x28
 800627e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006282:	e015      	b.n	80062b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800628e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006292:	d00a      	beq.n	80062aa <I2C_ITError+0x7a>
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	2b60      	cmp	r3, #96	; 0x60
 8006298:	d007      	beq.n	80062aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062be:	d162      	bne.n	8006386 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d020      	beq.n	8006320 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e2:	4a6a      	ldr	r2, [pc, #424]	; (800648c <I2C_ITError+0x25c>)
 80062e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fd fec0 	bl	8004070 <HAL_DMA_Abort_IT>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 8089 	beq.w	800640a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0201 	bic.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800631a:	4610      	mov	r0, r2
 800631c:	4798      	blx	r3
 800631e:	e074      	b.n	800640a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	4a59      	ldr	r2, [pc, #356]	; (800648c <I2C_ITError+0x25c>)
 8006326:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	4618      	mov	r0, r3
 800632e:	f7fd fe9f 	bl	8004070 <HAL_DMA_Abort_IT>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d068      	beq.n	800640a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b40      	cmp	r3, #64	; 0x40
 8006344:	d10b      	bne.n	800635e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0201 	bic.w	r2, r2, #1
 800636c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
 8006384:	e041      	b.n	800640a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b60      	cmp	r3, #96	; 0x60
 8006390:	d125      	bne.n	80063de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063aa:	2b40      	cmp	r3, #64	; 0x40
 80063ac:	d10b      	bne.n	80063c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0201 	bic.w	r2, r2, #1
 80063d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fe ff0e 	bl	80051f8 <HAL_I2C_AbortCpltCallback>
 80063dc:	e015      	b.n	800640a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	d10b      	bne.n	8006404 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7fe feed 	bl	80051e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10e      	bne.n	8006438 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006420:	2b00      	cmp	r3, #0
 8006422:	d109      	bne.n	8006438 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800642a:	2b00      	cmp	r3, #0
 800642c:	d104      	bne.n	8006438 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006434:	2b00      	cmp	r3, #0
 8006436:	d007      	beq.n	8006448 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006446:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b04      	cmp	r3, #4
 800645a:	d113      	bne.n	8006484 <I2C_ITError+0x254>
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	2b28      	cmp	r3, #40	; 0x28
 8006460:	d110      	bne.n	8006484 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a0a      	ldr	r2, [pc, #40]	; (8006490 <I2C_ITError+0x260>)
 8006466:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fe fe92 	bl	80051a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006484:	bf00      	nop
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	08006495 	.word	0x08006495
 8006490:	ffff0000 	.word	0xffff0000

08006494 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80064ae:	4b4b      	ldr	r3, [pc, #300]	; (80065dc <I2C_DMAAbort+0x148>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	08db      	lsrs	r3, r3, #3
 80064b4:	4a4a      	ldr	r2, [pc, #296]	; (80065e0 <I2C_DMAAbort+0x14c>)
 80064b6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ba:	0a1a      	lsrs	r2, r3, #8
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	00da      	lsls	r2, r3, #3
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	f043 0220 	orr.w	r2, r3, #32
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80064da:	e00a      	b.n	80064f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3b01      	subs	r3, #1
 80064e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f0:	d0ea      	beq.n	80064c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fe:	2200      	movs	r2, #0
 8006500:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	2200      	movs	r2, #0
 8006510:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006520:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2200      	movs	r2, #0
 8006526:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006534:	2200      	movs	r2, #0
 8006536:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	2200      	movs	r2, #0
 8006546:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0201 	bic.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b60      	cmp	r3, #96	; 0x60
 8006562:	d10e      	bne.n	8006582 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2200      	movs	r2, #0
 8006578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800657a:	6978      	ldr	r0, [r7, #20]
 800657c:	f7fe fe3c 	bl	80051f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006580:	e027      	b.n	80065d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006582:	7cfb      	ldrb	r3, [r7, #19]
 8006584:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006588:	2b28      	cmp	r3, #40	; 0x28
 800658a:	d117      	bne.n	80065bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2200      	movs	r2, #0
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2228      	movs	r2, #40	; 0x28
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80065ba:	e007      	b.n	80065cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80065cc:	6978      	ldr	r0, [r7, #20]
 80065ce:	f7fe fe09 	bl	80051e4 <HAL_I2C_ErrorCallback>
}
 80065d2:	bf00      	nop
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	2000001c 	.word	0x2000001c
 80065e0:	14f8b589 	.word	0x14f8b589

080065e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80065f0:	4b13      	ldr	r3, [pc, #76]	; (8006640 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	08db      	lsrs	r3, r3, #3
 80065f6:	4a13      	ldr	r2, [pc, #76]	; (8006644 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80065f8:	fba2 2303 	umull	r2, r3, r2, r3
 80065fc:	0a1a      	lsrs	r2, r3, #8
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3b01      	subs	r3, #1
 800660a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d107      	bne.n	8006622 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	f043 0220 	orr.w	r2, r3, #32
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e008      	b.n	8006634 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800662c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006630:	d0e9      	beq.n	8006606 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	2000001c 	.word	0x2000001c
 8006644:	14f8b589 	.word	0x14f8b589

08006648 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006658:	d103      	bne.n	8006662 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006660:	e007      	b.n	8006672 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800666a:	d102      	bne.n	8006672 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2208      	movs	r2, #8
 8006670:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
	...

08006680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e264      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d075      	beq.n	800678a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800669e:	4ba3      	ldr	r3, [pc, #652]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 030c 	and.w	r3, r3, #12
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d00c      	beq.n	80066c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066aa:	4ba0      	ldr	r3, [pc, #640]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	d112      	bne.n	80066dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066b6:	4b9d      	ldr	r3, [pc, #628]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066c2:	d10b      	bne.n	80066dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066c4:	4b99      	ldr	r3, [pc, #612]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d05b      	beq.n	8006788 <HAL_RCC_OscConfig+0x108>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d157      	bne.n	8006788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e23f      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e4:	d106      	bne.n	80066f4 <HAL_RCC_OscConfig+0x74>
 80066e6:	4b91      	ldr	r3, [pc, #580]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a90      	ldr	r2, [pc, #576]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80066ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	e01d      	b.n	8006730 <HAL_RCC_OscConfig+0xb0>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066fc:	d10c      	bne.n	8006718 <HAL_RCC_OscConfig+0x98>
 80066fe:	4b8b      	ldr	r3, [pc, #556]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a8a      	ldr	r2, [pc, #552]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 8006704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	4b88      	ldr	r3, [pc, #544]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a87      	ldr	r2, [pc, #540]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 8006710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	e00b      	b.n	8006730 <HAL_RCC_OscConfig+0xb0>
 8006718:	4b84      	ldr	r3, [pc, #528]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a83      	ldr	r2, [pc, #524]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 800671e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	4b81      	ldr	r3, [pc, #516]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a80      	ldr	r2, [pc, #512]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 800672a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800672e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d013      	beq.n	8006760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006738:	f7fd fa06 	bl	8003b48 <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006740:	f7fd fa02 	bl	8003b48 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b64      	cmp	r3, #100	; 0x64
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e204      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006752:	4b76      	ldr	r3, [pc, #472]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0f0      	beq.n	8006740 <HAL_RCC_OscConfig+0xc0>
 800675e:	e014      	b.n	800678a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006760:	f7fd f9f2 	bl	8003b48 <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006768:	f7fd f9ee 	bl	8003b48 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b64      	cmp	r3, #100	; 0x64
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e1f0      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800677a:	4b6c      	ldr	r3, [pc, #432]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1f0      	bne.n	8006768 <HAL_RCC_OscConfig+0xe8>
 8006786:	e000      	b.n	800678a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d063      	beq.n	800685e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006796:	4b65      	ldr	r3, [pc, #404]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 030c 	and.w	r3, r3, #12
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067a2:	4b62      	ldr	r3, [pc, #392]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	d11c      	bne.n	80067e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ae:	4b5f      	ldr	r3, [pc, #380]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d116      	bne.n	80067e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ba:	4b5c      	ldr	r3, [pc, #368]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <HAL_RCC_OscConfig+0x152>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d001      	beq.n	80067d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e1c4      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067d2:	4b56      	ldr	r3, [pc, #344]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	4952      	ldr	r1, [pc, #328]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067e6:	e03a      	b.n	800685e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d020      	beq.n	8006832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067f0:	4b4f      	ldr	r3, [pc, #316]	; (8006930 <HAL_RCC_OscConfig+0x2b0>)
 80067f2:	2201      	movs	r2, #1
 80067f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f6:	f7fd f9a7 	bl	8003b48 <HAL_GetTick>
 80067fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fc:	e008      	b.n	8006810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067fe:	f7fd f9a3 	bl	8003b48 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e1a5      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006810:	4b46      	ldr	r3, [pc, #280]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0f0      	beq.n	80067fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800681c:	4b43      	ldr	r3, [pc, #268]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	4940      	ldr	r1, [pc, #256]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 800682c:	4313      	orrs	r3, r2
 800682e:	600b      	str	r3, [r1, #0]
 8006830:	e015      	b.n	800685e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006832:	4b3f      	ldr	r3, [pc, #252]	; (8006930 <HAL_RCC_OscConfig+0x2b0>)
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006838:	f7fd f986 	bl	8003b48 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006840:	f7fd f982 	bl	8003b48 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e184      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006852:	4b36      	ldr	r3, [pc, #216]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d030      	beq.n	80068cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d016      	beq.n	80068a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006872:	4b30      	ldr	r3, [pc, #192]	; (8006934 <HAL_RCC_OscConfig+0x2b4>)
 8006874:	2201      	movs	r2, #1
 8006876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006878:	f7fd f966 	bl	8003b48 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006880:	f7fd f962 	bl	8003b48 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e164      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006892:	4b26      	ldr	r3, [pc, #152]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 8006894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f0      	beq.n	8006880 <HAL_RCC_OscConfig+0x200>
 800689e:	e015      	b.n	80068cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068a0:	4b24      	ldr	r3, [pc, #144]	; (8006934 <HAL_RCC_OscConfig+0x2b4>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068a6:	f7fd f94f 	bl	8003b48 <HAL_GetTick>
 80068aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068ae:	f7fd f94b 	bl	8003b48 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e14d      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068c0:	4b1a      	ldr	r3, [pc, #104]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80068c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f0      	bne.n	80068ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 80a0 	beq.w	8006a1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068da:	2300      	movs	r3, #0
 80068dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068de:	4b13      	ldr	r3, [pc, #76]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10f      	bne.n	800690a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ea:	2300      	movs	r3, #0
 80068ec:	60bb      	str	r3, [r7, #8]
 80068ee:	4b0f      	ldr	r3, [pc, #60]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	4a0e      	ldr	r2, [pc, #56]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80068f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f8:	6413      	str	r3, [r2, #64]	; 0x40
 80068fa:	4b0c      	ldr	r3, [pc, #48]	; (800692c <HAL_RCC_OscConfig+0x2ac>)
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006902:	60bb      	str	r3, [r7, #8]
 8006904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006906:	2301      	movs	r3, #1
 8006908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800690a:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <HAL_RCC_OscConfig+0x2b8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006912:	2b00      	cmp	r3, #0
 8006914:	d121      	bne.n	800695a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006916:	4b08      	ldr	r3, [pc, #32]	; (8006938 <HAL_RCC_OscConfig+0x2b8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a07      	ldr	r2, [pc, #28]	; (8006938 <HAL_RCC_OscConfig+0x2b8>)
 800691c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006922:	f7fd f911 	bl	8003b48 <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006928:	e011      	b.n	800694e <HAL_RCC_OscConfig+0x2ce>
 800692a:	bf00      	nop
 800692c:	40023800 	.word	0x40023800
 8006930:	42470000 	.word	0x42470000
 8006934:	42470e80 	.word	0x42470e80
 8006938:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800693c:	f7fd f904 	bl	8003b48 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e106      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800694e:	4b85      	ldr	r3, [pc, #532]	; (8006b64 <HAL_RCC_OscConfig+0x4e4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0f0      	beq.n	800693c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d106      	bne.n	8006970 <HAL_RCC_OscConfig+0x2f0>
 8006962:	4b81      	ldr	r3, [pc, #516]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	4a80      	ldr	r2, [pc, #512]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 8006968:	f043 0301 	orr.w	r3, r3, #1
 800696c:	6713      	str	r3, [r2, #112]	; 0x70
 800696e:	e01c      	b.n	80069aa <HAL_RCC_OscConfig+0x32a>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b05      	cmp	r3, #5
 8006976:	d10c      	bne.n	8006992 <HAL_RCC_OscConfig+0x312>
 8006978:	4b7b      	ldr	r3, [pc, #492]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 800697a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697c:	4a7a      	ldr	r2, [pc, #488]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 800697e:	f043 0304 	orr.w	r3, r3, #4
 8006982:	6713      	str	r3, [r2, #112]	; 0x70
 8006984:	4b78      	ldr	r3, [pc, #480]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 8006986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006988:	4a77      	ldr	r2, [pc, #476]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 800698a:	f043 0301 	orr.w	r3, r3, #1
 800698e:	6713      	str	r3, [r2, #112]	; 0x70
 8006990:	e00b      	b.n	80069aa <HAL_RCC_OscConfig+0x32a>
 8006992:	4b75      	ldr	r3, [pc, #468]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006996:	4a74      	ldr	r2, [pc, #464]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	6713      	str	r3, [r2, #112]	; 0x70
 800699e:	4b72      	ldr	r3, [pc, #456]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 80069a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a2:	4a71      	ldr	r2, [pc, #452]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 80069a4:	f023 0304 	bic.w	r3, r3, #4
 80069a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d015      	beq.n	80069de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b2:	f7fd f8c9 	bl	8003b48 <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b8:	e00a      	b.n	80069d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ba:	f7fd f8c5 	bl	8003b48 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e0c5      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d0:	4b65      	ldr	r3, [pc, #404]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 80069d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0ee      	beq.n	80069ba <HAL_RCC_OscConfig+0x33a>
 80069dc:	e014      	b.n	8006a08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069de:	f7fd f8b3 	bl	8003b48 <HAL_GetTick>
 80069e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069e4:	e00a      	b.n	80069fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069e6:	f7fd f8af 	bl	8003b48 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d901      	bls.n	80069fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e0af      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069fc:	4b5a      	ldr	r3, [pc, #360]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 80069fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1ee      	bne.n	80069e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d105      	bne.n	8006a1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a0e:	4b56      	ldr	r3, [pc, #344]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	4a55      	ldr	r2, [pc, #340]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 8006a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 809b 	beq.w	8006b5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a24:	4b50      	ldr	r3, [pc, #320]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 030c 	and.w	r3, r3, #12
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d05c      	beq.n	8006aea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d141      	bne.n	8006abc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a38:	4b4c      	ldr	r3, [pc, #304]	; (8006b6c <HAL_RCC_OscConfig+0x4ec>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a3e:	f7fd f883 	bl	8003b48 <HAL_GetTick>
 8006a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a46:	f7fd f87f 	bl	8003b48 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e081      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a58:	4b43      	ldr	r3, [pc, #268]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f0      	bne.n	8006a46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	69da      	ldr	r2, [r3, #28]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	019b      	lsls	r3, r3, #6
 8006a74:	431a      	orrs	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7a:	085b      	lsrs	r3, r3, #1
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	041b      	lsls	r3, r3, #16
 8006a80:	431a      	orrs	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a86:	061b      	lsls	r3, r3, #24
 8006a88:	4937      	ldr	r1, [pc, #220]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a8e:	4b37      	ldr	r3, [pc, #220]	; (8006b6c <HAL_RCC_OscConfig+0x4ec>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a94:	f7fd f858 	bl	8003b48 <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a9c:	f7fd f854 	bl	8003b48 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e056      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aae:	4b2e      	ldr	r3, [pc, #184]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0f0      	beq.n	8006a9c <HAL_RCC_OscConfig+0x41c>
 8006aba:	e04e      	b.n	8006b5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006abc:	4b2b      	ldr	r3, [pc, #172]	; (8006b6c <HAL_RCC_OscConfig+0x4ec>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac2:	f7fd f841 	bl	8003b48 <HAL_GetTick>
 8006ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac8:	e008      	b.n	8006adc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aca:	f7fd f83d 	bl	8003b48 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e03f      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006adc:	4b22      	ldr	r3, [pc, #136]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1f0      	bne.n	8006aca <HAL_RCC_OscConfig+0x44a>
 8006ae8:	e037      	b.n	8006b5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e032      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006af6:	4b1c      	ldr	r3, [pc, #112]	; (8006b68 <HAL_RCC_OscConfig+0x4e8>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d028      	beq.n	8006b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d121      	bne.n	8006b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d11a      	bne.n	8006b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b26:	4013      	ands	r3, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d111      	bne.n	8006b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3c:	085b      	lsrs	r3, r3, #1
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d107      	bne.n	8006b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d001      	beq.n	8006b5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	40007000 	.word	0x40007000
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	42470060 	.word	0x42470060

08006b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e0cc      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b84:	4b68      	ldr	r3, [pc, #416]	; (8006d28 <HAL_RCC_ClockConfig+0x1b8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d90c      	bls.n	8006bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b92:	4b65      	ldr	r3, [pc, #404]	; (8006d28 <HAL_RCC_ClockConfig+0x1b8>)
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b9a:	4b63      	ldr	r3, [pc, #396]	; (8006d28 <HAL_RCC_ClockConfig+0x1b8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d001      	beq.n	8006bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0b8      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d020      	beq.n	8006bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d005      	beq.n	8006bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bc4:	4b59      	ldr	r3, [pc, #356]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	4a58      	ldr	r2, [pc, #352]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0308 	and.w	r3, r3, #8
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bdc:	4b53      	ldr	r3, [pc, #332]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	4a52      	ldr	r2, [pc, #328]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006be8:	4b50      	ldr	r3, [pc, #320]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	494d      	ldr	r1, [pc, #308]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d044      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d107      	bne.n	8006c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c0e:	4b47      	ldr	r3, [pc, #284]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d119      	bne.n	8006c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e07f      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d003      	beq.n	8006c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d107      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c2e:	4b3f      	ldr	r3, [pc, #252]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d109      	bne.n	8006c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e06f      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c3e:	4b3b      	ldr	r3, [pc, #236]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e067      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c4e:	4b37      	ldr	r3, [pc, #220]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f023 0203 	bic.w	r2, r3, #3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	4934      	ldr	r1, [pc, #208]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c60:	f7fc ff72 	bl	8003b48 <HAL_GetTick>
 8006c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c66:	e00a      	b.n	8006c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c68:	f7fc ff6e 	bl	8003b48 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e04f      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c7e:	4b2b      	ldr	r3, [pc, #172]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f003 020c 	and.w	r2, r3, #12
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d1eb      	bne.n	8006c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c90:	4b25      	ldr	r3, [pc, #148]	; (8006d28 <HAL_RCC_ClockConfig+0x1b8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0307 	and.w	r3, r3, #7
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d20c      	bcs.n	8006cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c9e:	4b22      	ldr	r3, [pc, #136]	; (8006d28 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ca6:	4b20      	ldr	r3, [pc, #128]	; (8006d28 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0307 	and.w	r3, r3, #7
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d001      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e032      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d008      	beq.n	8006cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cc4:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	4916      	ldr	r1, [pc, #88]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0308 	and.w	r3, r3, #8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ce2:	4b12      	ldr	r3, [pc, #72]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	490e      	ldr	r1, [pc, #56]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cf6:	f000 f821 	bl	8006d3c <HAL_RCC_GetSysClockFreq>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	091b      	lsrs	r3, r3, #4
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	490a      	ldr	r1, [pc, #40]	; (8006d30 <HAL_RCC_ClockConfig+0x1c0>)
 8006d08:	5ccb      	ldrb	r3, [r1, r3]
 8006d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0e:	4a09      	ldr	r2, [pc, #36]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d12:	4b09      	ldr	r3, [pc, #36]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fc fed2 	bl	8003ac0 <HAL_InitTick>

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	40023c00 	.word	0x40023c00
 8006d2c:	40023800 	.word	0x40023800
 8006d30:	08009418 	.word	0x08009418
 8006d34:	2000001c 	.word	0x2000001c
 8006d38:	20000020 	.word	0x20000020

08006d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	607b      	str	r3, [r7, #4]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d54:	4b67      	ldr	r3, [pc, #412]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f003 030c 	and.w	r3, r3, #12
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d00d      	beq.n	8006d7c <HAL_RCC_GetSysClockFreq+0x40>
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	f200 80bd 	bhi.w	8006ee0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <HAL_RCC_GetSysClockFreq+0x34>
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d003      	beq.n	8006d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d6e:	e0b7      	b.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d70:	4b61      	ldr	r3, [pc, #388]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006d72:	60bb      	str	r3, [r7, #8]
       break;
 8006d74:	e0b7      	b.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d76:	4b61      	ldr	r3, [pc, #388]	; (8006efc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006d78:	60bb      	str	r3, [r7, #8]
      break;
 8006d7a:	e0b4      	b.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d7c:	4b5d      	ldr	r3, [pc, #372]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d86:	4b5b      	ldr	r3, [pc, #364]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d04d      	beq.n	8006e2e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d92:	4b58      	ldr	r3, [pc, #352]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	099b      	lsrs	r3, r3, #6
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f04f 0300 	mov.w	r3, #0
 8006d9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006da2:	f04f 0100 	mov.w	r1, #0
 8006da6:	ea02 0800 	and.w	r8, r2, r0
 8006daa:	ea03 0901 	and.w	r9, r3, r1
 8006dae:	4640      	mov	r0, r8
 8006db0:	4649      	mov	r1, r9
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	f04f 0300 	mov.w	r3, #0
 8006dba:	014b      	lsls	r3, r1, #5
 8006dbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006dc0:	0142      	lsls	r2, r0, #5
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	ebb0 0008 	subs.w	r0, r0, r8
 8006dca:	eb61 0109 	sbc.w	r1, r1, r9
 8006dce:	f04f 0200 	mov.w	r2, #0
 8006dd2:	f04f 0300 	mov.w	r3, #0
 8006dd6:	018b      	lsls	r3, r1, #6
 8006dd8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ddc:	0182      	lsls	r2, r0, #6
 8006dde:	1a12      	subs	r2, r2, r0
 8006de0:	eb63 0301 	sbc.w	r3, r3, r1
 8006de4:	f04f 0000 	mov.w	r0, #0
 8006de8:	f04f 0100 	mov.w	r1, #0
 8006dec:	00d9      	lsls	r1, r3, #3
 8006dee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006df2:	00d0      	lsls	r0, r2, #3
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	eb12 0208 	adds.w	r2, r2, r8
 8006dfc:	eb43 0309 	adc.w	r3, r3, r9
 8006e00:	f04f 0000 	mov.w	r0, #0
 8006e04:	f04f 0100 	mov.w	r1, #0
 8006e08:	0259      	lsls	r1, r3, #9
 8006e0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006e0e:	0250      	lsls	r0, r2, #9
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4610      	mov	r0, r2
 8006e16:	4619      	mov	r1, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f04f 0300 	mov.w	r3, #0
 8006e20:	f7f9 ffc4 	bl	8000dac <__aeabi_uldivmod>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4613      	mov	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	e04a      	b.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e2e:	4b31      	ldr	r3, [pc, #196]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	099b      	lsrs	r3, r3, #6
 8006e34:	461a      	mov	r2, r3
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e3e:	f04f 0100 	mov.w	r1, #0
 8006e42:	ea02 0400 	and.w	r4, r2, r0
 8006e46:	ea03 0501 	and.w	r5, r3, r1
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	f04f 0200 	mov.w	r2, #0
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	014b      	lsls	r3, r1, #5
 8006e58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e5c:	0142      	lsls	r2, r0, #5
 8006e5e:	4610      	mov	r0, r2
 8006e60:	4619      	mov	r1, r3
 8006e62:	1b00      	subs	r0, r0, r4
 8006e64:	eb61 0105 	sbc.w	r1, r1, r5
 8006e68:	f04f 0200 	mov.w	r2, #0
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	018b      	lsls	r3, r1, #6
 8006e72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e76:	0182      	lsls	r2, r0, #6
 8006e78:	1a12      	subs	r2, r2, r0
 8006e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8006e7e:	f04f 0000 	mov.w	r0, #0
 8006e82:	f04f 0100 	mov.w	r1, #0
 8006e86:	00d9      	lsls	r1, r3, #3
 8006e88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e8c:	00d0      	lsls	r0, r2, #3
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	1912      	adds	r2, r2, r4
 8006e94:	eb45 0303 	adc.w	r3, r5, r3
 8006e98:	f04f 0000 	mov.w	r0, #0
 8006e9c:	f04f 0100 	mov.w	r1, #0
 8006ea0:	0299      	lsls	r1, r3, #10
 8006ea2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006ea6:	0290      	lsls	r0, r2, #10
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4610      	mov	r0, r2
 8006eae:	4619      	mov	r1, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f04f 0300 	mov.w	r3, #0
 8006eb8:	f7f9 ff78 	bl	8000dac <__aeabi_uldivmod>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ec4:	4b0b      	ldr	r3, [pc, #44]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	0c1b      	lsrs	r3, r3, #16
 8006eca:	f003 0303 	and.w	r3, r3, #3
 8006ece:	3301      	adds	r3, #1
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006edc:	60bb      	str	r3, [r7, #8]
      break;
 8006ede:	e002      	b.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ee0:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006ee2:	60bb      	str	r3, [r7, #8]
      break;
 8006ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	00f42400 	.word	0x00f42400
 8006efc:	007a1200 	.word	0x007a1200

08006f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f04:	4b03      	ldr	r3, [pc, #12]	; (8006f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f06:	681b      	ldr	r3, [r3, #0]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	2000001c 	.word	0x2000001c

08006f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f1c:	f7ff fff0 	bl	8006f00 <HAL_RCC_GetHCLKFreq>
 8006f20:	4602      	mov	r2, r0
 8006f22:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	0a9b      	lsrs	r3, r3, #10
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	4903      	ldr	r1, [pc, #12]	; (8006f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f2e:	5ccb      	ldrb	r3, [r1, r3]
 8006f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	08009428 	.word	0x08009428

08006f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f44:	f7ff ffdc 	bl	8006f00 <HAL_RCC_GetHCLKFreq>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	0b5b      	lsrs	r3, r3, #13
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	4903      	ldr	r1, [pc, #12]	; (8006f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f56:	5ccb      	ldrb	r3, [r1, r3]
 8006f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	40023800 	.word	0x40023800
 8006f64:	08009428 	.word	0x08009428

08006f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e041      	b.n	8006ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d106      	bne.n	8006f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fc fb60 	bl	8003654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	f000 fdda 	bl	8007b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b01      	cmp	r3, #1
 800701a:	d001      	beq.n	8007020 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e03c      	b.n	800709a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1e      	ldr	r2, [pc, #120]	; (80070a8 <HAL_TIM_Base_Start+0xa0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d018      	beq.n	8007064 <HAL_TIM_Base_Start+0x5c>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800703a:	d013      	beq.n	8007064 <HAL_TIM_Base_Start+0x5c>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a1a      	ldr	r2, [pc, #104]	; (80070ac <HAL_TIM_Base_Start+0xa4>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d00e      	beq.n	8007064 <HAL_TIM_Base_Start+0x5c>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a19      	ldr	r2, [pc, #100]	; (80070b0 <HAL_TIM_Base_Start+0xa8>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d009      	beq.n	8007064 <HAL_TIM_Base_Start+0x5c>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <HAL_TIM_Base_Start+0xac>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d004      	beq.n	8007064 <HAL_TIM_Base_Start+0x5c>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a16      	ldr	r2, [pc, #88]	; (80070b8 <HAL_TIM_Base_Start+0xb0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d111      	bne.n	8007088 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 0307 	and.w	r3, r3, #7
 800706e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b06      	cmp	r3, #6
 8007074:	d010      	beq.n	8007098 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f042 0201 	orr.w	r2, r2, #1
 8007084:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007086:	e007      	b.n	8007098 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0201 	orr.w	r2, r2, #1
 8007096:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40010000 	.word	0x40010000
 80070ac:	40000400 	.word	0x40000400
 80070b0:	40000800 	.word	0x40000800
 80070b4:	40000c00 	.word	0x40000c00
 80070b8:	40014000 	.word	0x40014000

080070bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d001      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e044      	b.n	800715e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0201 	orr.w	r2, r2, #1
 80070ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1e      	ldr	r2, [pc, #120]	; (800716c <HAL_TIM_Base_Start_IT+0xb0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d018      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x6c>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fe:	d013      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x6c>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1a      	ldr	r2, [pc, #104]	; (8007170 <HAL_TIM_Base_Start_IT+0xb4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00e      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x6c>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a19      	ldr	r2, [pc, #100]	; (8007174 <HAL_TIM_Base_Start_IT+0xb8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d009      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x6c>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a17      	ldr	r2, [pc, #92]	; (8007178 <HAL_TIM_Base_Start_IT+0xbc>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d004      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x6c>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a16      	ldr	r2, [pc, #88]	; (800717c <HAL_TIM_Base_Start_IT+0xc0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d111      	bne.n	800714c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b06      	cmp	r3, #6
 8007138:	d010      	beq.n	800715c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0201 	orr.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714a:	e007      	b.n	800715c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0201 	orr.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40010000 	.word	0x40010000
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800
 8007178:	40000c00 	.word	0x40000c00
 800717c:	40014000 	.word	0x40014000

08007180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e041      	b.n	8007216 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d106      	bne.n	80071ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f839 	bl	800721e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4619      	mov	r1, r3
 80071be:	4610      	mov	r0, r2
 80071c0:	f000 fcce 	bl	8007b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d109      	bne.n	8007258 <HAL_TIM_PWM_Start+0x24>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b01      	cmp	r3, #1
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	e022      	b.n	800729e <HAL_TIM_PWM_Start+0x6a>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b04      	cmp	r3, #4
 800725c:	d109      	bne.n	8007272 <HAL_TIM_PWM_Start+0x3e>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b01      	cmp	r3, #1
 8007268:	bf14      	ite	ne
 800726a:	2301      	movne	r3, #1
 800726c:	2300      	moveq	r3, #0
 800726e:	b2db      	uxtb	r3, r3
 8007270:	e015      	b.n	800729e <HAL_TIM_PWM_Start+0x6a>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b08      	cmp	r3, #8
 8007276:	d109      	bne.n	800728c <HAL_TIM_PWM_Start+0x58>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	bf14      	ite	ne
 8007284:	2301      	movne	r3, #1
 8007286:	2300      	moveq	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	e008      	b.n	800729e <HAL_TIM_PWM_Start+0x6a>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b01      	cmp	r3, #1
 8007296:	bf14      	ite	ne
 8007298:	2301      	movne	r3, #1
 800729a:	2300      	moveq	r3, #0
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e068      	b.n	8007378 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <HAL_TIM_PWM_Start+0x82>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072b4:	e013      	b.n	80072de <HAL_TIM_PWM_Start+0xaa>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d104      	bne.n	80072c6 <HAL_TIM_PWM_Start+0x92>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072c4:	e00b      	b.n	80072de <HAL_TIM_PWM_Start+0xaa>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b08      	cmp	r3, #8
 80072ca:	d104      	bne.n	80072d6 <HAL_TIM_PWM_Start+0xa2>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072d4:	e003      	b.n	80072de <HAL_TIM_PWM_Start+0xaa>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2202      	movs	r2, #2
 80072da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2201      	movs	r2, #1
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fee0 	bl	80080ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a23      	ldr	r2, [pc, #140]	; (8007380 <HAL_TIM_PWM_Start+0x14c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d107      	bne.n	8007306 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007304:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1d      	ldr	r2, [pc, #116]	; (8007380 <HAL_TIM_PWM_Start+0x14c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d018      	beq.n	8007342 <HAL_TIM_PWM_Start+0x10e>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007318:	d013      	beq.n	8007342 <HAL_TIM_PWM_Start+0x10e>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a19      	ldr	r2, [pc, #100]	; (8007384 <HAL_TIM_PWM_Start+0x150>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00e      	beq.n	8007342 <HAL_TIM_PWM_Start+0x10e>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a17      	ldr	r2, [pc, #92]	; (8007388 <HAL_TIM_PWM_Start+0x154>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d009      	beq.n	8007342 <HAL_TIM_PWM_Start+0x10e>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a16      	ldr	r2, [pc, #88]	; (800738c <HAL_TIM_PWM_Start+0x158>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <HAL_TIM_PWM_Start+0x10e>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a14      	ldr	r2, [pc, #80]	; (8007390 <HAL_TIM_PWM_Start+0x15c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d111      	bne.n	8007366 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b06      	cmp	r3, #6
 8007352:	d010      	beq.n	8007376 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007364:	e007      	b.n	8007376 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0201 	orr.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40010000 	.word	0x40010000
 8007384:	40000400 	.word	0x40000400
 8007388:	40000800 	.word	0x40000800
 800738c:	40000c00 	.word	0x40000c00
 8007390:	40014000 	.word	0x40014000

08007394 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e097      	b.n	80074d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d106      	bne.n	80073c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7fc f901 	bl	80035c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2202      	movs	r2, #2
 80073c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6812      	ldr	r2, [r2, #0]
 80073d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073d8:	f023 0307 	bic.w	r3, r3, #7
 80073dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3304      	adds	r3, #4
 80073e6:	4619      	mov	r1, r3
 80073e8:	4610      	mov	r0, r2
 80073ea:	f000 fbb9 	bl	8007b60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	4313      	orrs	r3, r2
 800740e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007416:	f023 0303 	bic.w	r3, r3, #3
 800741a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	021b      	lsls	r3, r3, #8
 8007426:	4313      	orrs	r3, r2
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4313      	orrs	r3, r2
 800742c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007434:	f023 030c 	bic.w	r3, r3, #12
 8007438:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007440:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	021b      	lsls	r3, r3, #8
 8007450:	4313      	orrs	r3, r2
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	4313      	orrs	r3, r2
 8007456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	011a      	lsls	r2, r3, #4
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	031b      	lsls	r3, r3, #12
 8007464:	4313      	orrs	r3, r2
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007472:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800747a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	4313      	orrs	r3, r2
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007500:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007508:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d110      	bne.n	8007532 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d102      	bne.n	800751c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007516:	7b7b      	ldrb	r3, [r7, #13]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d001      	beq.n	8007520 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e069      	b.n	80075f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007530:	e031      	b.n	8007596 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b04      	cmp	r3, #4
 8007536:	d110      	bne.n	800755a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d102      	bne.n	8007544 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800753e:	7b3b      	ldrb	r3, [r7, #12]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d001      	beq.n	8007548 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e055      	b.n	80075f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007558:	e01d      	b.n	8007596 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d108      	bne.n	8007572 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d105      	bne.n	8007572 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007566:	7b7b      	ldrb	r3, [r7, #13]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d102      	bne.n	8007572 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800756c:	7b3b      	ldrb	r3, [r7, #12]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d001      	beq.n	8007576 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e03e      	b.n	80075f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2202      	movs	r2, #2
 8007582:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2202      	movs	r2, #2
 800758a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2202      	movs	r2, #2
 8007592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <HAL_TIM_Encoder_Start+0xc4>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d008      	beq.n	80075b4 <HAL_TIM_Encoder_Start+0xd4>
 80075a2:	e00f      	b.n	80075c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2201      	movs	r2, #1
 80075aa:	2100      	movs	r1, #0
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fd7d 	bl	80080ac <TIM_CCxChannelCmd>
      break;
 80075b2:	e016      	b.n	80075e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2201      	movs	r2, #1
 80075ba:	2104      	movs	r1, #4
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fd75 	bl	80080ac <TIM_CCxChannelCmd>
      break;
 80075c2:	e00e      	b.n	80075e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2201      	movs	r2, #1
 80075ca:	2100      	movs	r1, #0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fd6d 	bl	80080ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2201      	movs	r2, #1
 80075d8:	2104      	movs	r1, #4
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fd66 	bl	80080ac <TIM_CCxChannelCmd>
      break;
 80075e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f042 0201 	orr.w	r2, r2, #1
 80075f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b02      	cmp	r3, #2
 8007610:	d122      	bne.n	8007658 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b02      	cmp	r3, #2
 800761e:	d11b      	bne.n	8007658 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f06f 0202 	mvn.w	r2, #2
 8007628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	f003 0303 	and.w	r3, r3, #3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fa70 	bl	8007b24 <HAL_TIM_IC_CaptureCallback>
 8007644:	e005      	b.n	8007652 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa62 	bl	8007b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fa73 	bl	8007b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f003 0304 	and.w	r3, r3, #4
 8007662:	2b04      	cmp	r3, #4
 8007664:	d122      	bne.n	80076ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f003 0304 	and.w	r3, r3, #4
 8007670:	2b04      	cmp	r3, #4
 8007672:	d11b      	bne.n	80076ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f06f 0204 	mvn.w	r2, #4
 800767c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2202      	movs	r2, #2
 8007682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa46 	bl	8007b24 <HAL_TIM_IC_CaptureCallback>
 8007698:	e005      	b.n	80076a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa38 	bl	8007b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fa49 	bl	8007b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	2b08      	cmp	r3, #8
 80076b8:	d122      	bne.n	8007700 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f003 0308 	and.w	r3, r3, #8
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d11b      	bne.n	8007700 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f06f 0208 	mvn.w	r2, #8
 80076d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2204      	movs	r2, #4
 80076d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa1c 	bl	8007b24 <HAL_TIM_IC_CaptureCallback>
 80076ec:	e005      	b.n	80076fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fa0e 	bl	8007b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fa1f 	bl	8007b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	f003 0310 	and.w	r3, r3, #16
 800770a:	2b10      	cmp	r3, #16
 800770c:	d122      	bne.n	8007754 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f003 0310 	and.w	r3, r3, #16
 8007718:	2b10      	cmp	r3, #16
 800771a:	d11b      	bne.n	8007754 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f06f 0210 	mvn.w	r2, #16
 8007724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2208      	movs	r2, #8
 800772a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f9f2 	bl	8007b24 <HAL_TIM_IC_CaptureCallback>
 8007740:	e005      	b.n	800774e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f9e4 	bl	8007b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f9f5 	bl	8007b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b01      	cmp	r3, #1
 8007760:	d10e      	bne.n	8007780 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b01      	cmp	r3, #1
 800776e:	d107      	bne.n	8007780 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f06f 0201 	mvn.w	r2, #1
 8007778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fa f948 	bl	8001a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778a:	2b80      	cmp	r3, #128	; 0x80
 800778c:	d10e      	bne.n	80077ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007798:	2b80      	cmp	r3, #128	; 0x80
 800779a:	d107      	bne.n	80077ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fd1e 	bl	80081e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b6:	2b40      	cmp	r3, #64	; 0x40
 80077b8:	d10e      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c4:	2b40      	cmp	r3, #64	; 0x40
 80077c6:	d107      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f9ba 	bl	8007b4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d10e      	bne.n	8007804 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f003 0320 	and.w	r3, r3, #32
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d107      	bne.n	8007804 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f06f 0220 	mvn.w	r2, #32
 80077fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fce8 	bl	80081d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007804:	bf00      	nop
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007822:	2302      	movs	r3, #2
 8007824:	e0ac      	b.n	8007980 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b0c      	cmp	r3, #12
 8007832:	f200 809f 	bhi.w	8007974 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007836:	a201      	add	r2, pc, #4	; (adr r2, 800783c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	08007871 	.word	0x08007871
 8007840:	08007975 	.word	0x08007975
 8007844:	08007975 	.word	0x08007975
 8007848:	08007975 	.word	0x08007975
 800784c:	080078b1 	.word	0x080078b1
 8007850:	08007975 	.word	0x08007975
 8007854:	08007975 	.word	0x08007975
 8007858:	08007975 	.word	0x08007975
 800785c:	080078f3 	.word	0x080078f3
 8007860:	08007975 	.word	0x08007975
 8007864:	08007975 	.word	0x08007975
 8007868:	08007975 	.word	0x08007975
 800786c:	08007933 	.word	0x08007933
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 f9f2 	bl	8007c60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0208 	orr.w	r2, r2, #8
 800788a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	699a      	ldr	r2, [r3, #24]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0204 	bic.w	r2, r2, #4
 800789a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6999      	ldr	r1, [r3, #24]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	691a      	ldr	r2, [r3, #16]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	619a      	str	r2, [r3, #24]
      break;
 80078ae:	e062      	b.n	8007976 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68b9      	ldr	r1, [r7, #8]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fa38 	bl	8007d2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	699a      	ldr	r2, [r3, #24]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6999      	ldr	r1, [r3, #24]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	021a      	lsls	r2, r3, #8
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	619a      	str	r2, [r3, #24]
      break;
 80078f0:	e041      	b.n	8007976 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fa83 	bl	8007e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f042 0208 	orr.w	r2, r2, #8
 800790c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69da      	ldr	r2, [r3, #28]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 0204 	bic.w	r2, r2, #4
 800791c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69d9      	ldr	r1, [r3, #28]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	61da      	str	r2, [r3, #28]
      break;
 8007930:	e021      	b.n	8007976 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 facd 	bl	8007ed8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69da      	ldr	r2, [r3, #28]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800794c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69da      	ldr	r2, [r3, #28]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800795c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	69d9      	ldr	r1, [r3, #28]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	021a      	lsls	r2, r3, #8
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	61da      	str	r2, [r3, #28]
      break;
 8007972:	e000      	b.n	8007976 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007974:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007998:	2b01      	cmp	r3, #1
 800799a:	d101      	bne.n	80079a0 <HAL_TIM_ConfigClockSource+0x18>
 800799c:	2302      	movs	r3, #2
 800799e:	e0b3      	b.n	8007b08 <HAL_TIM_ConfigClockSource+0x180>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d8:	d03e      	beq.n	8007a58 <HAL_TIM_ConfigClockSource+0xd0>
 80079da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079de:	f200 8087 	bhi.w	8007af0 <HAL_TIM_ConfigClockSource+0x168>
 80079e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e6:	f000 8085 	beq.w	8007af4 <HAL_TIM_ConfigClockSource+0x16c>
 80079ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ee:	d87f      	bhi.n	8007af0 <HAL_TIM_ConfigClockSource+0x168>
 80079f0:	2b70      	cmp	r3, #112	; 0x70
 80079f2:	d01a      	beq.n	8007a2a <HAL_TIM_ConfigClockSource+0xa2>
 80079f4:	2b70      	cmp	r3, #112	; 0x70
 80079f6:	d87b      	bhi.n	8007af0 <HAL_TIM_ConfigClockSource+0x168>
 80079f8:	2b60      	cmp	r3, #96	; 0x60
 80079fa:	d050      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x116>
 80079fc:	2b60      	cmp	r3, #96	; 0x60
 80079fe:	d877      	bhi.n	8007af0 <HAL_TIM_ConfigClockSource+0x168>
 8007a00:	2b50      	cmp	r3, #80	; 0x50
 8007a02:	d03c      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0xf6>
 8007a04:	2b50      	cmp	r3, #80	; 0x50
 8007a06:	d873      	bhi.n	8007af0 <HAL_TIM_ConfigClockSource+0x168>
 8007a08:	2b40      	cmp	r3, #64	; 0x40
 8007a0a:	d058      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x136>
 8007a0c:	2b40      	cmp	r3, #64	; 0x40
 8007a0e:	d86f      	bhi.n	8007af0 <HAL_TIM_ConfigClockSource+0x168>
 8007a10:	2b30      	cmp	r3, #48	; 0x30
 8007a12:	d064      	beq.n	8007ade <HAL_TIM_ConfigClockSource+0x156>
 8007a14:	2b30      	cmp	r3, #48	; 0x30
 8007a16:	d86b      	bhi.n	8007af0 <HAL_TIM_ConfigClockSource+0x168>
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	d060      	beq.n	8007ade <HAL_TIM_ConfigClockSource+0x156>
 8007a1c:	2b20      	cmp	r3, #32
 8007a1e:	d867      	bhi.n	8007af0 <HAL_TIM_ConfigClockSource+0x168>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d05c      	beq.n	8007ade <HAL_TIM_ConfigClockSource+0x156>
 8007a24:	2b10      	cmp	r3, #16
 8007a26:	d05a      	beq.n	8007ade <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007a28:	e062      	b.n	8007af0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6818      	ldr	r0, [r3, #0]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	6899      	ldr	r1, [r3, #8]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f000 fb17 	bl	800806c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	609a      	str	r2, [r3, #8]
      break;
 8007a56:	e04e      	b.n	8007af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6818      	ldr	r0, [r3, #0]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	6899      	ldr	r1, [r3, #8]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f000 fb00 	bl	800806c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689a      	ldr	r2, [r3, #8]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a7a:	609a      	str	r2, [r3, #8]
      break;
 8007a7c:	e03b      	b.n	8007af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6818      	ldr	r0, [r3, #0]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	6859      	ldr	r1, [r3, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f000 fa74 	bl	8007f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2150      	movs	r1, #80	; 0x50
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 facd 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 8007a9c:	e02b      	b.n	8007af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6818      	ldr	r0, [r3, #0]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	6859      	ldr	r1, [r3, #4]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f000 fa93 	bl	8007fd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2160      	movs	r1, #96	; 0x60
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fabd 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 8007abc:	e01b      	b.n	8007af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6818      	ldr	r0, [r3, #0]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	6859      	ldr	r1, [r3, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	461a      	mov	r2, r3
 8007acc:	f000 fa54 	bl	8007f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2140      	movs	r1, #64	; 0x40
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 faad 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 8007adc:	e00b      	b.n	8007af6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4610      	mov	r0, r2
 8007aea:	f000 faa4 	bl	8008036 <TIM_ITRx_SetConfig>
        break;
 8007aee:	e002      	b.n	8007af6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007af0:	bf00      	nop
 8007af2:	e000      	b.n	8007af6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007af4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a34      	ldr	r2, [pc, #208]	; (8007c44 <TIM_Base_SetConfig+0xe4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00f      	beq.n	8007b98 <TIM_Base_SetConfig+0x38>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b7e:	d00b      	beq.n	8007b98 <TIM_Base_SetConfig+0x38>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a31      	ldr	r2, [pc, #196]	; (8007c48 <TIM_Base_SetConfig+0xe8>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d007      	beq.n	8007b98 <TIM_Base_SetConfig+0x38>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a30      	ldr	r2, [pc, #192]	; (8007c4c <TIM_Base_SetConfig+0xec>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d003      	beq.n	8007b98 <TIM_Base_SetConfig+0x38>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a2f      	ldr	r2, [pc, #188]	; (8007c50 <TIM_Base_SetConfig+0xf0>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d108      	bne.n	8007baa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a25      	ldr	r2, [pc, #148]	; (8007c44 <TIM_Base_SetConfig+0xe4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d01b      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb8:	d017      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a22      	ldr	r2, [pc, #136]	; (8007c48 <TIM_Base_SetConfig+0xe8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d013      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a21      	ldr	r2, [pc, #132]	; (8007c4c <TIM_Base_SetConfig+0xec>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d00f      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a20      	ldr	r2, [pc, #128]	; (8007c50 <TIM_Base_SetConfig+0xf0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00b      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a1f      	ldr	r2, [pc, #124]	; (8007c54 <TIM_Base_SetConfig+0xf4>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d007      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a1e      	ldr	r2, [pc, #120]	; (8007c58 <TIM_Base_SetConfig+0xf8>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d003      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a1d      	ldr	r2, [pc, #116]	; (8007c5c <TIM_Base_SetConfig+0xfc>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d108      	bne.n	8007bfc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a08      	ldr	r2, [pc, #32]	; (8007c44 <TIM_Base_SetConfig+0xe4>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d103      	bne.n	8007c30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	691a      	ldr	r2, [r3, #16]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	615a      	str	r2, [r3, #20]
}
 8007c36:	bf00      	nop
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40000800 	.word	0x40000800
 8007c50:	40000c00 	.word	0x40000c00
 8007c54:	40014000 	.word	0x40014000
 8007c58:	40014400 	.word	0x40014400
 8007c5c:	40014800 	.word	0x40014800

08007c60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	f023 0201 	bic.w	r2, r3, #1
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f023 0303 	bic.w	r3, r3, #3
 8007c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f023 0302 	bic.w	r3, r3, #2
 8007ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a1c      	ldr	r2, [pc, #112]	; (8007d28 <TIM_OC1_SetConfig+0xc8>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d10c      	bne.n	8007cd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f023 0308 	bic.w	r3, r3, #8
 8007cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f023 0304 	bic.w	r3, r3, #4
 8007cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a13      	ldr	r2, [pc, #76]	; (8007d28 <TIM_OC1_SetConfig+0xc8>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d111      	bne.n	8007d02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	621a      	str	r2, [r3, #32]
}
 8007d1c:	bf00      	nop
 8007d1e:	371c      	adds	r7, #28
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	40010000 	.word	0x40010000

08007d2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	f023 0210 	bic.w	r2, r3, #16
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	021b      	lsls	r3, r3, #8
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f023 0320 	bic.w	r3, r3, #32
 8007d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	011b      	lsls	r3, r3, #4
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a1e      	ldr	r2, [pc, #120]	; (8007e00 <TIM_OC2_SetConfig+0xd4>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d10d      	bne.n	8007da8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007da6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a15      	ldr	r2, [pc, #84]	; (8007e00 <TIM_OC2_SetConfig+0xd4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d113      	bne.n	8007dd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	621a      	str	r2, [r3, #32]
}
 8007df2:	bf00      	nop
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	40010000 	.word	0x40010000

08007e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0303 	bic.w	r3, r3, #3
 8007e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a1d      	ldr	r2, [pc, #116]	; (8007ed4 <TIM_OC3_SetConfig+0xd0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d10d      	bne.n	8007e7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	021b      	lsls	r3, r3, #8
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a14      	ldr	r2, [pc, #80]	; (8007ed4 <TIM_OC3_SetConfig+0xd0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d113      	bne.n	8007eae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	011b      	lsls	r3, r3, #4
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	621a      	str	r2, [r3, #32]
}
 8007ec8:	bf00      	nop
 8007eca:	371c      	adds	r7, #28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	40010000 	.word	0x40010000

08007ed8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	021b      	lsls	r3, r3, #8
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	031b      	lsls	r3, r3, #12
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a10      	ldr	r2, [pc, #64]	; (8007f74 <TIM_OC4_SetConfig+0x9c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d109      	bne.n	8007f4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	019b      	lsls	r3, r3, #6
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	621a      	str	r2, [r3, #32]
}
 8007f66:	bf00      	nop
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	40010000 	.word	0x40010000

08007f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	f023 0201 	bic.w	r2, r3, #1
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f023 030a 	bic.w	r3, r3, #10
 8007fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	621a      	str	r2, [r3, #32]
}
 8007fca:	bf00      	nop
 8007fcc:	371c      	adds	r7, #28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b087      	sub	sp, #28
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	f023 0210 	bic.w	r2, r3, #16
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	031b      	lsls	r3, r3, #12
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	4313      	orrs	r3, r2
 800800a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	4313      	orrs	r3, r2
 800801c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	621a      	str	r2, [r3, #32]
}
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4313      	orrs	r3, r2
 8008054:	f043 0307 	orr.w	r3, r3, #7
 8008058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	609a      	str	r2, [r3, #8]
}
 8008060:	bf00      	nop
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	021a      	lsls	r2, r3, #8
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	431a      	orrs	r2, r3
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4313      	orrs	r3, r2
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	609a      	str	r2, [r3, #8]
}
 80080a0:	bf00      	nop
 80080a2:	371c      	adds	r7, #28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	2201      	movs	r2, #1
 80080c0:	fa02 f303 	lsl.w	r3, r2, r3
 80080c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a1a      	ldr	r2, [r3, #32]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	43db      	mvns	r3, r3
 80080ce:	401a      	ands	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a1a      	ldr	r2, [r3, #32]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f003 031f 	and.w	r3, r3, #31
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	fa01 f303 	lsl.w	r3, r1, r3
 80080e4:	431a      	orrs	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	621a      	str	r2, [r3, #32]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
	...

080080f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800810c:	2302      	movs	r3, #2
 800810e:	e050      	b.n	80081b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a1c      	ldr	r2, [pc, #112]	; (80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d018      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815c:	d013      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a18      	ldr	r2, [pc, #96]	; (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d00e      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a16      	ldr	r2, [pc, #88]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d009      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a15      	ldr	r2, [pc, #84]	; (80081cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d004      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a13      	ldr	r2, [pc, #76]	; (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d10c      	bne.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800818c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	4313      	orrs	r3, r2
 8008196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	40010000 	.word	0x40010000
 80081c4:	40000400 	.word	0x40000400
 80081c8:	40000800 	.word	0x40000800
 80081cc:	40000c00 	.word	0x40000c00
 80081d0:	40014000 	.word	0x40014000

080081d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e03f      	b.n	800828e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d106      	bne.n	8008228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fb fa8c 	bl	8003740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2224      	movs	r2, #36	; 0x24
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800823e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fd51 	bl	8008ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	691a      	ldr	r2, [r3, #16]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	695a      	ldr	r2, [r3, #20]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68da      	ldr	r2, [r3, #12]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2220      	movs	r2, #32
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2220      	movs	r2, #32
 8008288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
	...

08008298 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	4613      	mov	r3, r2
 80082a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b20      	cmp	r3, #32
 80082b0:	d153      	bne.n	800835a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <HAL_UART_Transmit_DMA+0x26>
 80082b8:	88fb      	ldrh	r3, [r7, #6]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e04c      	b.n	800835c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d101      	bne.n	80082d0 <HAL_UART_Transmit_DMA+0x38>
 80082cc:	2302      	movs	r3, #2
 80082ce:	e045      	b.n	800835c <HAL_UART_Transmit_DMA+0xc4>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	88fa      	ldrh	r2, [r7, #6]
 80082e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	88fa      	ldrh	r2, [r7, #6]
 80082e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2221      	movs	r2, #33	; 0x21
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fc:	4a19      	ldr	r2, [pc, #100]	; (8008364 <HAL_UART_Transmit_DMA+0xcc>)
 80082fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008304:	4a18      	ldr	r2, [pc, #96]	; (8008368 <HAL_UART_Transmit_DMA+0xd0>)
 8008306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830c:	4a17      	ldr	r2, [pc, #92]	; (800836c <HAL_UART_Transmit_DMA+0xd4>)
 800830e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008314:	2200      	movs	r2, #0
 8008316:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008318:	f107 0308 	add.w	r3, r7, #8
 800831c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	6819      	ldr	r1, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3304      	adds	r3, #4
 800832c:	461a      	mov	r2, r3
 800832e:	88fb      	ldrh	r3, [r7, #6]
 8008330:	f7fb fdd6 	bl	8003ee0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800833c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	695a      	ldr	r2, [r3, #20]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008354:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	e000      	b.n	800835c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800835a:	2302      	movs	r3, #2
  }
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	080087a5 	.word	0x080087a5
 8008368:	080087f7 	.word	0x080087f7
 800836c:	080088df 	.word	0x080088df

08008370 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	4613      	mov	r3, r2
 800837c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b20      	cmp	r3, #32
 8008388:	d11d      	bne.n	80083c6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <HAL_UART_Receive_DMA+0x26>
 8008390:	88fb      	ldrh	r3, [r7, #6]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e016      	b.n	80083c8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d101      	bne.n	80083a8 <HAL_UART_Receive_DMA+0x38>
 80083a4:	2302      	movs	r3, #2
 80083a6:	e00f      	b.n	80083c8 <HAL_UART_Receive_DMA+0x58>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80083b6:	88fb      	ldrh	r3, [r7, #6]
 80083b8:	461a      	mov	r2, r3
 80083ba:	68b9      	ldr	r1, [r7, #8]
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fad9 	bl	8008974 <UART_Start_Receive_DMA>
 80083c2:	4603      	mov	r3, r0
 80083c4:	e000      	b.n	80083c8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80083c6:	2302      	movs	r3, #2
  }
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08a      	sub	sp, #40	; 0x28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80083f0:	2300      	movs	r3, #0
 80083f2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	f003 030f 	and.w	r3, r3, #15
 80083fe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10d      	bne.n	8008422 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	f003 0320 	and.w	r3, r3, #32
 800840c:	2b00      	cmp	r3, #0
 800840e:	d008      	beq.n	8008422 <HAL_UART_IRQHandler+0x52>
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fbcd 	bl	8008bba <UART_Receive_IT>
      return;
 8008420:	e17c      	b.n	800871c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 80b1 	beq.w	800858c <HAL_UART_IRQHandler+0x1bc>
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b00      	cmp	r3, #0
 8008432:	d105      	bne.n	8008440 <HAL_UART_IRQHandler+0x70>
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 80a6 	beq.w	800858c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00a      	beq.n	8008460 <HAL_UART_IRQHandler+0x90>
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008458:	f043 0201 	orr.w	r2, r3, #1
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	f003 0304 	and.w	r3, r3, #4
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <HAL_UART_IRQHandler+0xb0>
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	d005      	beq.n	8008480 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	f043 0202 	orr.w	r2, r3, #2
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <HAL_UART_IRQHandler+0xd0>
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b00      	cmp	r3, #0
 8008492:	d005      	beq.n	80084a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008498:	f043 0204 	orr.w	r2, r3, #4
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	f003 0308 	and.w	r3, r3, #8
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00f      	beq.n	80084ca <HAL_UART_IRQHandler+0xfa>
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	f003 0320 	and.w	r3, r3, #32
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d104      	bne.n	80084be <HAL_UART_IRQHandler+0xee>
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d005      	beq.n	80084ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	f043 0208 	orr.w	r2, r3, #8
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 811f 	beq.w	8008712 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	f003 0320 	and.w	r3, r3, #32
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d007      	beq.n	80084ee <HAL_UART_IRQHandler+0x11e>
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fb66 	bl	8008bba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	695b      	ldr	r3, [r3, #20]
 80084f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f8:	2b40      	cmp	r3, #64	; 0x40
 80084fa:	bf0c      	ite	eq
 80084fc:	2301      	moveq	r3, #1
 80084fe:	2300      	movne	r3, #0
 8008500:	b2db      	uxtb	r3, r3
 8008502:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	f003 0308 	and.w	r3, r3, #8
 800850c:	2b00      	cmp	r3, #0
 800850e:	d102      	bne.n	8008516 <HAL_UART_IRQHandler+0x146>
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d031      	beq.n	800857a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 faa6 	bl	8008a68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008526:	2b40      	cmp	r3, #64	; 0x40
 8008528:	d123      	bne.n	8008572 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	695a      	ldr	r2, [r3, #20]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008538:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853e:	2b00      	cmp	r3, #0
 8008540:	d013      	beq.n	800856a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008546:	4a77      	ldr	r2, [pc, #476]	; (8008724 <HAL_UART_IRQHandler+0x354>)
 8008548:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854e:	4618      	mov	r0, r3
 8008550:	f7fb fd8e 	bl	8004070 <HAL_DMA_Abort_IT>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d016      	beq.n	8008588 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008564:	4610      	mov	r0, r2
 8008566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008568:	e00e      	b.n	8008588 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f904 	bl	8008778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008570:	e00a      	b.n	8008588 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f900 	bl	8008778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008578:	e006      	b.n	8008588 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f8fc 	bl	8008778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008586:	e0c4      	b.n	8008712 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008588:	bf00      	nop
    return;
 800858a:	e0c2      	b.n	8008712 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008590:	2b01      	cmp	r3, #1
 8008592:	f040 80a2 	bne.w	80086da <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 809c 	beq.w	80086da <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	f003 0310 	and.w	r3, r3, #16
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 8096 	beq.w	80086da <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ce:	2b40      	cmp	r3, #64	; 0x40
 80085d0:	d14f      	bne.n	8008672 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80085dc:	8a3b      	ldrh	r3, [r7, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 8099 	beq.w	8008716 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085e8:	8a3a      	ldrh	r2, [r7, #16]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	f080 8093 	bcs.w	8008716 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	8a3a      	ldrh	r2, [r7, #16]
 80085f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008600:	d02b      	beq.n	800865a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008610:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	695a      	ldr	r2, [r3, #20]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 0201 	bic.w	r2, r2, #1
 8008620:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	695a      	ldr	r2, [r3, #20]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008630:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2220      	movs	r2, #32
 8008636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68da      	ldr	r2, [r3, #12]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 0210 	bic.w	r2, r2, #16
 800864e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	4618      	mov	r0, r3
 8008656:	f7fb fc9b 	bl	8003f90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008662:	b29b      	uxth	r3, r3
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	b29b      	uxth	r3, r3
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f88e 	bl	800878c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008670:	e051      	b.n	8008716 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800867a:	b29b      	uxth	r3, r3
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008684:	b29b      	uxth	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d047      	beq.n	800871a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800868a:	8a7b      	ldrh	r3, [r7, #18]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d044      	beq.n	800871a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800869e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	695a      	ldr	r2, [r3, #20]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f022 0201 	bic.w	r2, r2, #1
 80086ae:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2220      	movs	r2, #32
 80086b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68da      	ldr	r2, [r3, #12]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 0210 	bic.w	r2, r2, #16
 80086cc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086ce:	8a7b      	ldrh	r3, [r7, #18]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f85a 	bl	800878c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80086d8:	e01f      	b.n	800871a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d008      	beq.n	80086f6 <HAL_UART_IRQHandler+0x326>
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f9fb 	bl	8008aea <UART_Transmit_IT>
    return;
 80086f4:	e012      	b.n	800871c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00d      	beq.n	800871c <HAL_UART_IRQHandler+0x34c>
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	d008      	beq.n	800871c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fa3d 	bl	8008b8a <UART_EndTransmit_IT>
    return;
 8008710:	e004      	b.n	800871c <HAL_UART_IRQHandler+0x34c>
    return;
 8008712:	bf00      	nop
 8008714:	e002      	b.n	800871c <HAL_UART_IRQHandler+0x34c>
      return;
 8008716:	bf00      	nop
 8008718:	e000      	b.n	800871c <HAL_UART_IRQHandler+0x34c>
      return;
 800871a:	bf00      	nop
  }
}
 800871c:	3728      	adds	r7, #40	; 0x28
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	08008ac3 	.word	0x08008ac3

08008728 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d113      	bne.n	80087e8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	695a      	ldr	r2, [r3, #20]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087d4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68da      	ldr	r2, [r3, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087e4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087e6:	e002      	b.n	80087ee <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7ff ff9d 	bl	8008728 <HAL_UART_TxCpltCallback>
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff ff99 	bl	800873c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800880a:	bf00      	nop
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882a:	2b00      	cmp	r3, #0
 800882c:	d12a      	bne.n	8008884 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68da      	ldr	r2, [r3, #12]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008842:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	695a      	ldr	r2, [r3, #20]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0201 	bic.w	r2, r2, #1
 8008852:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	695a      	ldr	r2, [r3, #20]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008862:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2220      	movs	r2, #32
 8008868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008870:	2b01      	cmp	r3, #1
 8008872:	d107      	bne.n	8008884 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f022 0210 	bic.w	r2, r2, #16
 8008882:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008888:	2b01      	cmp	r3, #1
 800888a:	d106      	bne.n	800889a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008890:	4619      	mov	r1, r3
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f7ff ff7a 	bl	800878c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008898:	e002      	b.n	80088a0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f7ff ff58 	bl	8008750 <HAL_UART_RxCpltCallback>
}
 80088a0:	bf00      	nop
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d108      	bne.n	80088d0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088c2:	085b      	lsrs	r3, r3, #1
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	4619      	mov	r1, r3
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f7ff ff5f 	bl	800878c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088ce:	e002      	b.n	80088d6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7ff ff47 	bl	8008764 <HAL_UART_RxHalfCpltCallback>
}
 80088d6:	bf00      	nop
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fa:	2b80      	cmp	r3, #128	; 0x80
 80088fc:	bf0c      	ite	eq
 80088fe:	2301      	moveq	r3, #1
 8008900:	2300      	movne	r3, #0
 8008902:	b2db      	uxtb	r3, r3
 8008904:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b21      	cmp	r3, #33	; 0x21
 8008910:	d108      	bne.n	8008924 <UART_DMAError+0x46>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d005      	beq.n	8008924 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2200      	movs	r2, #0
 800891c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800891e:	68b8      	ldr	r0, [r7, #8]
 8008920:	f000 f88c 	bl	8008a3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800892e:	2b40      	cmp	r3, #64	; 0x40
 8008930:	bf0c      	ite	eq
 8008932:	2301      	moveq	r3, #1
 8008934:	2300      	movne	r3, #0
 8008936:	b2db      	uxtb	r3, r3
 8008938:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b22      	cmp	r3, #34	; 0x22
 8008944:	d108      	bne.n	8008958 <UART_DMAError+0x7a>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d005      	beq.n	8008958 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2200      	movs	r2, #0
 8008950:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008952:	68b8      	ldr	r0, [r7, #8]
 8008954:	f000 f888 	bl	8008a68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895c:	f043 0210 	orr.w	r2, r3, #16
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008964:	68b8      	ldr	r0, [r7, #8]
 8008966:	f7ff ff07 	bl	8008778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	4613      	mov	r3, r2
 8008980:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	88fa      	ldrh	r2, [r7, #6]
 800898c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2222      	movs	r2, #34	; 0x22
 8008998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a0:	4a23      	ldr	r2, [pc, #140]	; (8008a30 <UART_Start_Receive_DMA+0xbc>)
 80089a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a8:	4a22      	ldr	r2, [pc, #136]	; (8008a34 <UART_Start_Receive_DMA+0xc0>)
 80089aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b0:	4a21      	ldr	r2, [pc, #132]	; (8008a38 <UART_Start_Receive_DMA+0xc4>)
 80089b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b8:	2200      	movs	r2, #0
 80089ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80089bc:	f107 0308 	add.w	r3, r7, #8
 80089c0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3304      	adds	r3, #4
 80089cc:	4619      	mov	r1, r3
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	88fb      	ldrh	r3, [r7, #6]
 80089d4:	f7fb fa84 	bl	8003ee0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80089d8:	2300      	movs	r3, #0
 80089da:	613b      	str	r3, [r7, #16]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	613b      	str	r3, [r7, #16]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	613b      	str	r3, [r7, #16]
 80089ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68da      	ldr	r2, [r3, #12]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a04:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	695a      	ldr	r2, [r3, #20]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f042 0201 	orr.w	r2, r2, #1
 8008a14:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	695a      	ldr	r2, [r3, #20]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a24:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	08008813 	.word	0x08008813
 8008a34:	080088a9 	.word	0x080088a9
 8008a38:	080088df 	.word	0x080088df

08008a3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008a52:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2220      	movs	r2, #32
 8008a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a7e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	695a      	ldr	r2, [r3, #20]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0201 	bic.w	r2, r2, #1
 8008a8e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d107      	bne.n	8008aa8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0210 	bic.w	r2, r2, #16
 8008aa6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008ab6:	bf00      	nop
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ace:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f7ff fe4b 	bl	8008778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ae2:	bf00      	nop
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b085      	sub	sp, #20
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b21      	cmp	r3, #33	; 0x21
 8008afc:	d13e      	bne.n	8008b7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b06:	d114      	bne.n	8008b32 <UART_Transmit_IT+0x48>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d110      	bne.n	8008b32 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	1c9a      	adds	r2, r3, #2
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	621a      	str	r2, [r3, #32]
 8008b30:	e008      	b.n	8008b44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	1c59      	adds	r1, r3, #1
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6211      	str	r1, [r2, #32]
 8008b3c:	781a      	ldrb	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	4619      	mov	r1, r3
 8008b52:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10f      	bne.n	8008b78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68da      	ldr	r2, [r3, #12]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e000      	b.n	8008b7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b7c:	2302      	movs	r3, #2
  }
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ba0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7ff fdbc 	bl	8008728 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b22      	cmp	r3, #34	; 0x22
 8008bcc:	f040 8087 	bne.w	8008cde <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd8:	d117      	bne.n	8008c0a <UART_Receive_IT+0x50>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d113      	bne.n	8008c0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bea:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c02:	1c9a      	adds	r2, r3, #2
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	629a      	str	r2, [r3, #40]	; 0x28
 8008c08:	e026      	b.n	8008c58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c1c:	d007      	beq.n	8008c2e <UART_Receive_IT+0x74>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10a      	bne.n	8008c3c <UART_Receive_IT+0x82>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d106      	bne.n	8008c3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	701a      	strb	r2, [r3, #0]
 8008c3a:	e008      	b.n	8008c4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	4619      	mov	r1, r3
 8008c66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d136      	bne.n	8008cda <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f022 0220 	bic.w	r2, r2, #32
 8008c7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68da      	ldr	r2, [r3, #12]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	695a      	ldr	r2, [r3, #20]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d10e      	bne.n	8008cca <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f022 0210 	bic.w	r2, r2, #16
 8008cba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff fd62 	bl	800878c <HAL_UARTEx_RxEventCallback>
 8008cc8:	e002      	b.n	8008cd0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff fd40 	bl	8008750 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e002      	b.n	8008ce0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	e000      	b.n	8008ce0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008cde:	2302      	movs	r3, #2
  }
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	b09f      	sub	sp, #124	; 0x7c
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cfe:	68d9      	ldr	r1, [r3, #12]
 8008d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	ea40 0301 	orr.w	r3, r0, r1
 8008d08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d0c:	689a      	ldr	r2, [r3, #8]
 8008d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	431a      	orrs	r2, r3
 8008d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d2c:	f021 010c 	bic.w	r1, r1, #12
 8008d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d36:	430b      	orrs	r3, r1
 8008d38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d46:	6999      	ldr	r1, [r3, #24]
 8008d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	ea40 0301 	orr.w	r3, r0, r1
 8008d50:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	4bc5      	ldr	r3, [pc, #788]	; (800906c <UART_SetConfig+0x384>)
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d004      	beq.n	8008d66 <UART_SetConfig+0x7e>
 8008d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	4bc3      	ldr	r3, [pc, #780]	; (8009070 <UART_SetConfig+0x388>)
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d103      	bne.n	8008d6e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d66:	f7fe f8eb 	bl	8006f40 <HAL_RCC_GetPCLK2Freq>
 8008d6a:	6778      	str	r0, [r7, #116]	; 0x74
 8008d6c:	e002      	b.n	8008d74 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d6e:	f7fe f8d3 	bl	8006f18 <HAL_RCC_GetPCLK1Freq>
 8008d72:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d76:	69db      	ldr	r3, [r3, #28]
 8008d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d7c:	f040 80b6 	bne.w	8008eec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d82:	461c      	mov	r4, r3
 8008d84:	f04f 0500 	mov.w	r5, #0
 8008d88:	4622      	mov	r2, r4
 8008d8a:	462b      	mov	r3, r5
 8008d8c:	1891      	adds	r1, r2, r2
 8008d8e:	6439      	str	r1, [r7, #64]	; 0x40
 8008d90:	415b      	adcs	r3, r3
 8008d92:	647b      	str	r3, [r7, #68]	; 0x44
 8008d94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d98:	1912      	adds	r2, r2, r4
 8008d9a:	eb45 0303 	adc.w	r3, r5, r3
 8008d9e:	f04f 0000 	mov.w	r0, #0
 8008da2:	f04f 0100 	mov.w	r1, #0
 8008da6:	00d9      	lsls	r1, r3, #3
 8008da8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008dac:	00d0      	lsls	r0, r2, #3
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	1911      	adds	r1, r2, r4
 8008db4:	6639      	str	r1, [r7, #96]	; 0x60
 8008db6:	416b      	adcs	r3, r5
 8008db8:	667b      	str	r3, [r7, #100]	; 0x64
 8008dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f04f 0300 	mov.w	r3, #0
 8008dc4:	1891      	adds	r1, r2, r2
 8008dc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008dc8:	415b      	adcs	r3, r3
 8008dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008dd0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008dd4:	f7f7 ffea 	bl	8000dac <__aeabi_uldivmod>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4ba5      	ldr	r3, [pc, #660]	; (8009074 <UART_SetConfig+0x38c>)
 8008dde:	fba3 2302 	umull	r2, r3, r3, r2
 8008de2:	095b      	lsrs	r3, r3, #5
 8008de4:	011e      	lsls	r6, r3, #4
 8008de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008de8:	461c      	mov	r4, r3
 8008dea:	f04f 0500 	mov.w	r5, #0
 8008dee:	4622      	mov	r2, r4
 8008df0:	462b      	mov	r3, r5
 8008df2:	1891      	adds	r1, r2, r2
 8008df4:	6339      	str	r1, [r7, #48]	; 0x30
 8008df6:	415b      	adcs	r3, r3
 8008df8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dfa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008dfe:	1912      	adds	r2, r2, r4
 8008e00:	eb45 0303 	adc.w	r3, r5, r3
 8008e04:	f04f 0000 	mov.w	r0, #0
 8008e08:	f04f 0100 	mov.w	r1, #0
 8008e0c:	00d9      	lsls	r1, r3, #3
 8008e0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e12:	00d0      	lsls	r0, r2, #3
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	1911      	adds	r1, r2, r4
 8008e1a:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e1c:	416b      	adcs	r3, r5
 8008e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	461a      	mov	r2, r3
 8008e26:	f04f 0300 	mov.w	r3, #0
 8008e2a:	1891      	adds	r1, r2, r2
 8008e2c:	62b9      	str	r1, [r7, #40]	; 0x28
 8008e2e:	415b      	adcs	r3, r3
 8008e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008e3a:	f7f7 ffb7 	bl	8000dac <__aeabi_uldivmod>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4b8c      	ldr	r3, [pc, #560]	; (8009074 <UART_SetConfig+0x38c>)
 8008e44:	fba3 1302 	umull	r1, r3, r3, r2
 8008e48:	095b      	lsrs	r3, r3, #5
 8008e4a:	2164      	movs	r1, #100	; 0x64
 8008e4c:	fb01 f303 	mul.w	r3, r1, r3
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	3332      	adds	r3, #50	; 0x32
 8008e56:	4a87      	ldr	r2, [pc, #540]	; (8009074 <UART_SetConfig+0x38c>)
 8008e58:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5c:	095b      	lsrs	r3, r3, #5
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e64:	441e      	add	r6, r3
 8008e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f04f 0100 	mov.w	r1, #0
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	1894      	adds	r4, r2, r2
 8008e74:	623c      	str	r4, [r7, #32]
 8008e76:	415b      	adcs	r3, r3
 8008e78:	627b      	str	r3, [r7, #36]	; 0x24
 8008e7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e7e:	1812      	adds	r2, r2, r0
 8008e80:	eb41 0303 	adc.w	r3, r1, r3
 8008e84:	f04f 0400 	mov.w	r4, #0
 8008e88:	f04f 0500 	mov.w	r5, #0
 8008e8c:	00dd      	lsls	r5, r3, #3
 8008e8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e92:	00d4      	lsls	r4, r2, #3
 8008e94:	4622      	mov	r2, r4
 8008e96:	462b      	mov	r3, r5
 8008e98:	1814      	adds	r4, r2, r0
 8008e9a:	653c      	str	r4, [r7, #80]	; 0x50
 8008e9c:	414b      	adcs	r3, r1
 8008e9e:	657b      	str	r3, [r7, #84]	; 0x54
 8008ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	f04f 0300 	mov.w	r3, #0
 8008eaa:	1891      	adds	r1, r2, r2
 8008eac:	61b9      	str	r1, [r7, #24]
 8008eae:	415b      	adcs	r3, r3
 8008eb0:	61fb      	str	r3, [r7, #28]
 8008eb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eb6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008eba:	f7f7 ff77 	bl	8000dac <__aeabi_uldivmod>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4b6c      	ldr	r3, [pc, #432]	; (8009074 <UART_SetConfig+0x38c>)
 8008ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ec8:	095b      	lsrs	r3, r3, #5
 8008eca:	2164      	movs	r1, #100	; 0x64
 8008ecc:	fb01 f303 	mul.w	r3, r1, r3
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	3332      	adds	r3, #50	; 0x32
 8008ed6:	4a67      	ldr	r2, [pc, #412]	; (8009074 <UART_SetConfig+0x38c>)
 8008ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8008edc:	095b      	lsrs	r3, r3, #5
 8008ede:	f003 0207 	and.w	r2, r3, #7
 8008ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4432      	add	r2, r6
 8008ee8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008eea:	e0b9      	b.n	8009060 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eee:	461c      	mov	r4, r3
 8008ef0:	f04f 0500 	mov.w	r5, #0
 8008ef4:	4622      	mov	r2, r4
 8008ef6:	462b      	mov	r3, r5
 8008ef8:	1891      	adds	r1, r2, r2
 8008efa:	6139      	str	r1, [r7, #16]
 8008efc:	415b      	adcs	r3, r3
 8008efe:	617b      	str	r3, [r7, #20]
 8008f00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f04:	1912      	adds	r2, r2, r4
 8008f06:	eb45 0303 	adc.w	r3, r5, r3
 8008f0a:	f04f 0000 	mov.w	r0, #0
 8008f0e:	f04f 0100 	mov.w	r1, #0
 8008f12:	00d9      	lsls	r1, r3, #3
 8008f14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f18:	00d0      	lsls	r0, r2, #3
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	eb12 0804 	adds.w	r8, r2, r4
 8008f22:	eb43 0905 	adc.w	r9, r3, r5
 8008f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f04f 0100 	mov.w	r1, #0
 8008f30:	f04f 0200 	mov.w	r2, #0
 8008f34:	f04f 0300 	mov.w	r3, #0
 8008f38:	008b      	lsls	r3, r1, #2
 8008f3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f3e:	0082      	lsls	r2, r0, #2
 8008f40:	4640      	mov	r0, r8
 8008f42:	4649      	mov	r1, r9
 8008f44:	f7f7 ff32 	bl	8000dac <__aeabi_uldivmod>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4b49      	ldr	r3, [pc, #292]	; (8009074 <UART_SetConfig+0x38c>)
 8008f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f52:	095b      	lsrs	r3, r3, #5
 8008f54:	011e      	lsls	r6, r3, #4
 8008f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f04f 0100 	mov.w	r1, #0
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	1894      	adds	r4, r2, r2
 8008f64:	60bc      	str	r4, [r7, #8]
 8008f66:	415b      	adcs	r3, r3
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f6e:	1812      	adds	r2, r2, r0
 8008f70:	eb41 0303 	adc.w	r3, r1, r3
 8008f74:	f04f 0400 	mov.w	r4, #0
 8008f78:	f04f 0500 	mov.w	r5, #0
 8008f7c:	00dd      	lsls	r5, r3, #3
 8008f7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f82:	00d4      	lsls	r4, r2, #3
 8008f84:	4622      	mov	r2, r4
 8008f86:	462b      	mov	r3, r5
 8008f88:	1814      	adds	r4, r2, r0
 8008f8a:	64bc      	str	r4, [r7, #72]	; 0x48
 8008f8c:	414b      	adcs	r3, r1
 8008f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f04f 0100 	mov.w	r1, #0
 8008f9a:	f04f 0200 	mov.w	r2, #0
 8008f9e:	f04f 0300 	mov.w	r3, #0
 8008fa2:	008b      	lsls	r3, r1, #2
 8008fa4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008fa8:	0082      	lsls	r2, r0, #2
 8008faa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008fae:	f7f7 fefd 	bl	8000dac <__aeabi_uldivmod>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4b2f      	ldr	r3, [pc, #188]	; (8009074 <UART_SetConfig+0x38c>)
 8008fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fbc:	095b      	lsrs	r3, r3, #5
 8008fbe:	2164      	movs	r1, #100	; 0x64
 8008fc0:	fb01 f303 	mul.w	r3, r1, r3
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	3332      	adds	r3, #50	; 0x32
 8008fca:	4a2a      	ldr	r2, [pc, #168]	; (8009074 <UART_SetConfig+0x38c>)
 8008fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd0:	095b      	lsrs	r3, r3, #5
 8008fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fd6:	441e      	add	r6, r3
 8008fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f04f 0100 	mov.w	r1, #0
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	1894      	adds	r4, r2, r2
 8008fe6:	603c      	str	r4, [r7, #0]
 8008fe8:	415b      	adcs	r3, r3
 8008fea:	607b      	str	r3, [r7, #4]
 8008fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff0:	1812      	adds	r2, r2, r0
 8008ff2:	eb41 0303 	adc.w	r3, r1, r3
 8008ff6:	f04f 0400 	mov.w	r4, #0
 8008ffa:	f04f 0500 	mov.w	r5, #0
 8008ffe:	00dd      	lsls	r5, r3, #3
 8009000:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009004:	00d4      	lsls	r4, r2, #3
 8009006:	4622      	mov	r2, r4
 8009008:	462b      	mov	r3, r5
 800900a:	eb12 0a00 	adds.w	sl, r2, r0
 800900e:	eb43 0b01 	adc.w	fp, r3, r1
 8009012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	4618      	mov	r0, r3
 8009018:	f04f 0100 	mov.w	r1, #0
 800901c:	f04f 0200 	mov.w	r2, #0
 8009020:	f04f 0300 	mov.w	r3, #0
 8009024:	008b      	lsls	r3, r1, #2
 8009026:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800902a:	0082      	lsls	r2, r0, #2
 800902c:	4650      	mov	r0, sl
 800902e:	4659      	mov	r1, fp
 8009030:	f7f7 febc 	bl	8000dac <__aeabi_uldivmod>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4b0e      	ldr	r3, [pc, #56]	; (8009074 <UART_SetConfig+0x38c>)
 800903a:	fba3 1302 	umull	r1, r3, r3, r2
 800903e:	095b      	lsrs	r3, r3, #5
 8009040:	2164      	movs	r1, #100	; 0x64
 8009042:	fb01 f303 	mul.w	r3, r1, r3
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	011b      	lsls	r3, r3, #4
 800904a:	3332      	adds	r3, #50	; 0x32
 800904c:	4a09      	ldr	r2, [pc, #36]	; (8009074 <UART_SetConfig+0x38c>)
 800904e:	fba2 2303 	umull	r2, r3, r2, r3
 8009052:	095b      	lsrs	r3, r3, #5
 8009054:	f003 020f 	and.w	r2, r3, #15
 8009058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4432      	add	r2, r6
 800905e:	609a      	str	r2, [r3, #8]
}
 8009060:	bf00      	nop
 8009062:	377c      	adds	r7, #124	; 0x7c
 8009064:	46bd      	mov	sp, r7
 8009066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906a:	bf00      	nop
 800906c:	40011000 	.word	0x40011000
 8009070:	40011400 	.word	0x40011400
 8009074:	51eb851f 	.word	0x51eb851f

08009078 <calloc>:
 8009078:	4b02      	ldr	r3, [pc, #8]	; (8009084 <calloc+0xc>)
 800907a:	460a      	mov	r2, r1
 800907c:	4601      	mov	r1, r0
 800907e:	6818      	ldr	r0, [r3, #0]
 8009080:	f000 b842 	b.w	8009108 <_calloc_r>
 8009084:	20000028 	.word	0x20000028

08009088 <__errno>:
 8009088:	4b01      	ldr	r3, [pc, #4]	; (8009090 <__errno+0x8>)
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	20000028 	.word	0x20000028

08009094 <__libc_init_array>:
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	4d0d      	ldr	r5, [pc, #52]	; (80090cc <__libc_init_array+0x38>)
 8009098:	4c0d      	ldr	r4, [pc, #52]	; (80090d0 <__libc_init_array+0x3c>)
 800909a:	1b64      	subs	r4, r4, r5
 800909c:	10a4      	asrs	r4, r4, #2
 800909e:	2600      	movs	r6, #0
 80090a0:	42a6      	cmp	r6, r4
 80090a2:	d109      	bne.n	80090b8 <__libc_init_array+0x24>
 80090a4:	4d0b      	ldr	r5, [pc, #44]	; (80090d4 <__libc_init_array+0x40>)
 80090a6:	4c0c      	ldr	r4, [pc, #48]	; (80090d8 <__libc_init_array+0x44>)
 80090a8:	f000 f99e 	bl	80093e8 <_init>
 80090ac:	1b64      	subs	r4, r4, r5
 80090ae:	10a4      	asrs	r4, r4, #2
 80090b0:	2600      	movs	r6, #0
 80090b2:	42a6      	cmp	r6, r4
 80090b4:	d105      	bne.n	80090c2 <__libc_init_array+0x2e>
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090bc:	4798      	blx	r3
 80090be:	3601      	adds	r6, #1
 80090c0:	e7ee      	b.n	80090a0 <__libc_init_array+0xc>
 80090c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c6:	4798      	blx	r3
 80090c8:	3601      	adds	r6, #1
 80090ca:	e7f2      	b.n	80090b2 <__libc_init_array+0x1e>
 80090cc:	08009440 	.word	0x08009440
 80090d0:	08009440 	.word	0x08009440
 80090d4:	08009440 	.word	0x08009440
 80090d8:	08009444 	.word	0x08009444

080090dc <memcpy>:
 80090dc:	440a      	add	r2, r1
 80090de:	4291      	cmp	r1, r2
 80090e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80090e4:	d100      	bne.n	80090e8 <memcpy+0xc>
 80090e6:	4770      	bx	lr
 80090e8:	b510      	push	{r4, lr}
 80090ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090f2:	4291      	cmp	r1, r2
 80090f4:	d1f9      	bne.n	80090ea <memcpy+0xe>
 80090f6:	bd10      	pop	{r4, pc}

080090f8 <memset>:
 80090f8:	4402      	add	r2, r0
 80090fa:	4603      	mov	r3, r0
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d100      	bne.n	8009102 <memset+0xa>
 8009100:	4770      	bx	lr
 8009102:	f803 1b01 	strb.w	r1, [r3], #1
 8009106:	e7f9      	b.n	80090fc <memset+0x4>

08009108 <_calloc_r>:
 8009108:	b513      	push	{r0, r1, r4, lr}
 800910a:	434a      	muls	r2, r1
 800910c:	4611      	mov	r1, r2
 800910e:	9201      	str	r2, [sp, #4]
 8009110:	f000 f80a 	bl	8009128 <_malloc_r>
 8009114:	4604      	mov	r4, r0
 8009116:	b118      	cbz	r0, 8009120 <_calloc_r+0x18>
 8009118:	9a01      	ldr	r2, [sp, #4]
 800911a:	2100      	movs	r1, #0
 800911c:	f7ff ffec 	bl	80090f8 <memset>
 8009120:	4620      	mov	r0, r4
 8009122:	b002      	add	sp, #8
 8009124:	bd10      	pop	{r4, pc}
	...

08009128 <_malloc_r>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	1ccd      	adds	r5, r1, #3
 800912c:	f025 0503 	bic.w	r5, r5, #3
 8009130:	3508      	adds	r5, #8
 8009132:	2d0c      	cmp	r5, #12
 8009134:	bf38      	it	cc
 8009136:	250c      	movcc	r5, #12
 8009138:	2d00      	cmp	r5, #0
 800913a:	4606      	mov	r6, r0
 800913c:	db01      	blt.n	8009142 <_malloc_r+0x1a>
 800913e:	42a9      	cmp	r1, r5
 8009140:	d903      	bls.n	800914a <_malloc_r+0x22>
 8009142:	230c      	movs	r3, #12
 8009144:	6033      	str	r3, [r6, #0]
 8009146:	2000      	movs	r0, #0
 8009148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800914a:	f000 f857 	bl	80091fc <__malloc_lock>
 800914e:	4921      	ldr	r1, [pc, #132]	; (80091d4 <_malloc_r+0xac>)
 8009150:	680a      	ldr	r2, [r1, #0]
 8009152:	4614      	mov	r4, r2
 8009154:	b99c      	cbnz	r4, 800917e <_malloc_r+0x56>
 8009156:	4f20      	ldr	r7, [pc, #128]	; (80091d8 <_malloc_r+0xb0>)
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	b923      	cbnz	r3, 8009166 <_malloc_r+0x3e>
 800915c:	4621      	mov	r1, r4
 800915e:	4630      	mov	r0, r6
 8009160:	f000 f83c 	bl	80091dc <_sbrk_r>
 8009164:	6038      	str	r0, [r7, #0]
 8009166:	4629      	mov	r1, r5
 8009168:	4630      	mov	r0, r6
 800916a:	f000 f837 	bl	80091dc <_sbrk_r>
 800916e:	1c43      	adds	r3, r0, #1
 8009170:	d123      	bne.n	80091ba <_malloc_r+0x92>
 8009172:	230c      	movs	r3, #12
 8009174:	6033      	str	r3, [r6, #0]
 8009176:	4630      	mov	r0, r6
 8009178:	f000 f846 	bl	8009208 <__malloc_unlock>
 800917c:	e7e3      	b.n	8009146 <_malloc_r+0x1e>
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	1b5b      	subs	r3, r3, r5
 8009182:	d417      	bmi.n	80091b4 <_malloc_r+0x8c>
 8009184:	2b0b      	cmp	r3, #11
 8009186:	d903      	bls.n	8009190 <_malloc_r+0x68>
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	441c      	add	r4, r3
 800918c:	6025      	str	r5, [r4, #0]
 800918e:	e004      	b.n	800919a <_malloc_r+0x72>
 8009190:	6863      	ldr	r3, [r4, #4]
 8009192:	42a2      	cmp	r2, r4
 8009194:	bf0c      	ite	eq
 8009196:	600b      	streq	r3, [r1, #0]
 8009198:	6053      	strne	r3, [r2, #4]
 800919a:	4630      	mov	r0, r6
 800919c:	f000 f834 	bl	8009208 <__malloc_unlock>
 80091a0:	f104 000b 	add.w	r0, r4, #11
 80091a4:	1d23      	adds	r3, r4, #4
 80091a6:	f020 0007 	bic.w	r0, r0, #7
 80091aa:	1ac2      	subs	r2, r0, r3
 80091ac:	d0cc      	beq.n	8009148 <_malloc_r+0x20>
 80091ae:	1a1b      	subs	r3, r3, r0
 80091b0:	50a3      	str	r3, [r4, r2]
 80091b2:	e7c9      	b.n	8009148 <_malloc_r+0x20>
 80091b4:	4622      	mov	r2, r4
 80091b6:	6864      	ldr	r4, [r4, #4]
 80091b8:	e7cc      	b.n	8009154 <_malloc_r+0x2c>
 80091ba:	1cc4      	adds	r4, r0, #3
 80091bc:	f024 0403 	bic.w	r4, r4, #3
 80091c0:	42a0      	cmp	r0, r4
 80091c2:	d0e3      	beq.n	800918c <_malloc_r+0x64>
 80091c4:	1a21      	subs	r1, r4, r0
 80091c6:	4630      	mov	r0, r6
 80091c8:	f000 f808 	bl	80091dc <_sbrk_r>
 80091cc:	3001      	adds	r0, #1
 80091ce:	d1dd      	bne.n	800918c <_malloc_r+0x64>
 80091d0:	e7cf      	b.n	8009172 <_malloc_r+0x4a>
 80091d2:	bf00      	nop
 80091d4:	20000310 	.word	0x20000310
 80091d8:	20000314 	.word	0x20000314

080091dc <_sbrk_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d06      	ldr	r5, [pc, #24]	; (80091f8 <_sbrk_r+0x1c>)
 80091e0:	2300      	movs	r3, #0
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	602b      	str	r3, [r5, #0]
 80091e8:	f7fa fbd2 	bl	8003990 <_sbrk>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d102      	bne.n	80091f6 <_sbrk_r+0x1a>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	b103      	cbz	r3, 80091f6 <_sbrk_r+0x1a>
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	2000054c 	.word	0x2000054c

080091fc <__malloc_lock>:
 80091fc:	4801      	ldr	r0, [pc, #4]	; (8009204 <__malloc_lock+0x8>)
 80091fe:	f000 b809 	b.w	8009214 <__retarget_lock_acquire_recursive>
 8009202:	bf00      	nop
 8009204:	20000554 	.word	0x20000554

08009208 <__malloc_unlock>:
 8009208:	4801      	ldr	r0, [pc, #4]	; (8009210 <__malloc_unlock+0x8>)
 800920a:	f000 b804 	b.w	8009216 <__retarget_lock_release_recursive>
 800920e:	bf00      	nop
 8009210:	20000554 	.word	0x20000554

08009214 <__retarget_lock_acquire_recursive>:
 8009214:	4770      	bx	lr

08009216 <__retarget_lock_release_recursive>:
 8009216:	4770      	bx	lr

08009218 <sqrt>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	ed2d 8b02 	vpush	{d8}
 800921e:	ec55 4b10 	vmov	r4, r5, d0
 8009222:	f000 f82d 	bl	8009280 <__ieee754_sqrt>
 8009226:	4b15      	ldr	r3, [pc, #84]	; (800927c <sqrt+0x64>)
 8009228:	eeb0 8a40 	vmov.f32	s16, s0
 800922c:	eef0 8a60 	vmov.f32	s17, s1
 8009230:	f993 3000 	ldrsb.w	r3, [r3]
 8009234:	3301      	adds	r3, #1
 8009236:	d019      	beq.n	800926c <sqrt+0x54>
 8009238:	4622      	mov	r2, r4
 800923a:	462b      	mov	r3, r5
 800923c:	4620      	mov	r0, r4
 800923e:	4629      	mov	r1, r5
 8009240:	f7f7 fc20 	bl	8000a84 <__aeabi_dcmpun>
 8009244:	b990      	cbnz	r0, 800926c <sqrt+0x54>
 8009246:	2200      	movs	r2, #0
 8009248:	2300      	movs	r3, #0
 800924a:	4620      	mov	r0, r4
 800924c:	4629      	mov	r1, r5
 800924e:	f7f7 fbf1 	bl	8000a34 <__aeabi_dcmplt>
 8009252:	b158      	cbz	r0, 800926c <sqrt+0x54>
 8009254:	f7ff ff18 	bl	8009088 <__errno>
 8009258:	2321      	movs	r3, #33	; 0x21
 800925a:	6003      	str	r3, [r0, #0]
 800925c:	2200      	movs	r2, #0
 800925e:	2300      	movs	r3, #0
 8009260:	4610      	mov	r0, r2
 8009262:	4619      	mov	r1, r3
 8009264:	f7f7 fa9e 	bl	80007a4 <__aeabi_ddiv>
 8009268:	ec41 0b18 	vmov	d8, r0, r1
 800926c:	eeb0 0a48 	vmov.f32	s0, s16
 8009270:	eef0 0a68 	vmov.f32	s1, s17
 8009274:	ecbd 8b02 	vpop	{d8}
 8009278:	bd38      	pop	{r3, r4, r5, pc}
 800927a:	bf00      	nop
 800927c:	2000008c 	.word	0x2000008c

08009280 <__ieee754_sqrt>:
 8009280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009284:	ec55 4b10 	vmov	r4, r5, d0
 8009288:	4e56      	ldr	r6, [pc, #344]	; (80093e4 <__ieee754_sqrt+0x164>)
 800928a:	43ae      	bics	r6, r5
 800928c:	ee10 0a10 	vmov	r0, s0
 8009290:	ee10 3a10 	vmov	r3, s0
 8009294:	4629      	mov	r1, r5
 8009296:	462a      	mov	r2, r5
 8009298:	d110      	bne.n	80092bc <__ieee754_sqrt+0x3c>
 800929a:	ee10 2a10 	vmov	r2, s0
 800929e:	462b      	mov	r3, r5
 80092a0:	f7f7 f956 	bl	8000550 <__aeabi_dmul>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4620      	mov	r0, r4
 80092aa:	4629      	mov	r1, r5
 80092ac:	f7f6 ff9a 	bl	80001e4 <__adddf3>
 80092b0:	4604      	mov	r4, r0
 80092b2:	460d      	mov	r5, r1
 80092b4:	ec45 4b10 	vmov	d0, r4, r5
 80092b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092bc:	2d00      	cmp	r5, #0
 80092be:	dc10      	bgt.n	80092e2 <__ieee754_sqrt+0x62>
 80092c0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80092c4:	4330      	orrs	r0, r6
 80092c6:	d0f5      	beq.n	80092b4 <__ieee754_sqrt+0x34>
 80092c8:	b15d      	cbz	r5, 80092e2 <__ieee754_sqrt+0x62>
 80092ca:	ee10 2a10 	vmov	r2, s0
 80092ce:	462b      	mov	r3, r5
 80092d0:	ee10 0a10 	vmov	r0, s0
 80092d4:	f7f6 ff84 	bl	80001e0 <__aeabi_dsub>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	f7f7 fa62 	bl	80007a4 <__aeabi_ddiv>
 80092e0:	e7e6      	b.n	80092b0 <__ieee754_sqrt+0x30>
 80092e2:	1509      	asrs	r1, r1, #20
 80092e4:	d076      	beq.n	80093d4 <__ieee754_sqrt+0x154>
 80092e6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80092ea:	07ce      	lsls	r6, r1, #31
 80092ec:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80092f0:	bf5e      	ittt	pl
 80092f2:	0fda      	lsrpl	r2, r3, #31
 80092f4:	005b      	lslpl	r3, r3, #1
 80092f6:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80092fa:	0fda      	lsrs	r2, r3, #31
 80092fc:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009300:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009304:	2000      	movs	r0, #0
 8009306:	106d      	asrs	r5, r5, #1
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	f04f 0e16 	mov.w	lr, #22
 800930e:	4684      	mov	ip, r0
 8009310:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009314:	eb0c 0401 	add.w	r4, ip, r1
 8009318:	4294      	cmp	r4, r2
 800931a:	bfde      	ittt	le
 800931c:	1b12      	suble	r2, r2, r4
 800931e:	eb04 0c01 	addle.w	ip, r4, r1
 8009322:	1840      	addle	r0, r0, r1
 8009324:	0052      	lsls	r2, r2, #1
 8009326:	f1be 0e01 	subs.w	lr, lr, #1
 800932a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800932e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009332:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009336:	d1ed      	bne.n	8009314 <__ieee754_sqrt+0x94>
 8009338:	4671      	mov	r1, lr
 800933a:	2720      	movs	r7, #32
 800933c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009340:	4562      	cmp	r2, ip
 8009342:	eb04 060e 	add.w	r6, r4, lr
 8009346:	dc02      	bgt.n	800934e <__ieee754_sqrt+0xce>
 8009348:	d113      	bne.n	8009372 <__ieee754_sqrt+0xf2>
 800934a:	429e      	cmp	r6, r3
 800934c:	d811      	bhi.n	8009372 <__ieee754_sqrt+0xf2>
 800934e:	2e00      	cmp	r6, #0
 8009350:	eb06 0e04 	add.w	lr, r6, r4
 8009354:	da43      	bge.n	80093de <__ieee754_sqrt+0x15e>
 8009356:	f1be 0f00 	cmp.w	lr, #0
 800935a:	db40      	blt.n	80093de <__ieee754_sqrt+0x15e>
 800935c:	f10c 0801 	add.w	r8, ip, #1
 8009360:	eba2 020c 	sub.w	r2, r2, ip
 8009364:	429e      	cmp	r6, r3
 8009366:	bf88      	it	hi
 8009368:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800936c:	1b9b      	subs	r3, r3, r6
 800936e:	4421      	add	r1, r4
 8009370:	46c4      	mov	ip, r8
 8009372:	0052      	lsls	r2, r2, #1
 8009374:	3f01      	subs	r7, #1
 8009376:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800937a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800937e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009382:	d1dd      	bne.n	8009340 <__ieee754_sqrt+0xc0>
 8009384:	4313      	orrs	r3, r2
 8009386:	d006      	beq.n	8009396 <__ieee754_sqrt+0x116>
 8009388:	1c4c      	adds	r4, r1, #1
 800938a:	bf13      	iteet	ne
 800938c:	3101      	addne	r1, #1
 800938e:	3001      	addeq	r0, #1
 8009390:	4639      	moveq	r1, r7
 8009392:	f021 0101 	bicne.w	r1, r1, #1
 8009396:	1043      	asrs	r3, r0, #1
 8009398:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800939c:	0849      	lsrs	r1, r1, #1
 800939e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80093a2:	07c2      	lsls	r2, r0, #31
 80093a4:	bf48      	it	mi
 80093a6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80093aa:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80093ae:	460c      	mov	r4, r1
 80093b0:	463d      	mov	r5, r7
 80093b2:	e77f      	b.n	80092b4 <__ieee754_sqrt+0x34>
 80093b4:	0ada      	lsrs	r2, r3, #11
 80093b6:	3815      	subs	r0, #21
 80093b8:	055b      	lsls	r3, r3, #21
 80093ba:	2a00      	cmp	r2, #0
 80093bc:	d0fa      	beq.n	80093b4 <__ieee754_sqrt+0x134>
 80093be:	02d7      	lsls	r7, r2, #11
 80093c0:	d50a      	bpl.n	80093d8 <__ieee754_sqrt+0x158>
 80093c2:	f1c1 0420 	rsb	r4, r1, #32
 80093c6:	fa23 f404 	lsr.w	r4, r3, r4
 80093ca:	1e4d      	subs	r5, r1, #1
 80093cc:	408b      	lsls	r3, r1
 80093ce:	4322      	orrs	r2, r4
 80093d0:	1b41      	subs	r1, r0, r5
 80093d2:	e788      	b.n	80092e6 <__ieee754_sqrt+0x66>
 80093d4:	4608      	mov	r0, r1
 80093d6:	e7f0      	b.n	80093ba <__ieee754_sqrt+0x13a>
 80093d8:	0052      	lsls	r2, r2, #1
 80093da:	3101      	adds	r1, #1
 80093dc:	e7ef      	b.n	80093be <__ieee754_sqrt+0x13e>
 80093de:	46e0      	mov	r8, ip
 80093e0:	e7be      	b.n	8009360 <__ieee754_sqrt+0xe0>
 80093e2:	bf00      	nop
 80093e4:	7ff00000 	.word	0x7ff00000

080093e8 <_init>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	bf00      	nop
 80093ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ee:	bc08      	pop	{r3}
 80093f0:	469e      	mov	lr, r3
 80093f2:	4770      	bx	lr

080093f4 <_fini>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	bf00      	nop
 80093f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fa:	bc08      	pop	{r3}
 80093fc:	469e      	mov	lr, r3
 80093fe:	4770      	bx	lr
