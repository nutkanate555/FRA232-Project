
Project000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099a0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08009b38  08009b38  00019b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b70  08009b70  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b78  08009b78  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b78  08009b78  00019b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b7c  08009b7c  00019b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000090  08009c0c  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08009c0c  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ec5  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  00030f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00032fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00033fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f71  00000000  00000000  00034f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c2f  00000000  00000000  0004bec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d23  00000000  00000000  0005daf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef813  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a60  00000000  00000000  000ef868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009b20 	.word	0x08009b20

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08009b20 	.word	0x08009b20

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96e 	b.w	80010a0 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468c      	mov	ip, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8083 	bne.w	8000ef2 <__udivmoddi4+0x116>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4617      	mov	r7, r2
 8000df0:	d947      	bls.n	8000e82 <__udivmoddi4+0xa6>
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b142      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	f1c2 0020 	rsb	r0, r2, #32
 8000dfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	ea40 0c01 	orr.w	ip, r0, r1
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fbbc f6f8 	udiv	r6, ip, r8
 8000e14:	fa1f fe87 	uxth.w	lr, r7
 8000e18:	fb08 c116 	mls	r1, r8, r6, ip
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f10e 	mul.w	r1, r6, lr
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x60>
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 8119 	bcs.w	8001064 <__udivmoddi4+0x288>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 8116 	bls.w	8001064 <__udivmoddi4+0x288>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	443b      	add	r3, r7
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x8c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	f080 8105 	bcs.w	8001068 <__udivmoddi4+0x28c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8102 	bls.w	8001068 <__udivmoddi4+0x28c>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6c:	eba4 040e 	sub.w	r4, r4, lr
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa0>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	b902      	cbnz	r2, 8000e86 <__udivmoddi4+0xaa>
 8000e84:	deff      	udf	#255	; 0xff
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d150      	bne.n	8000f30 <__udivmoddi4+0x154>
 8000e8e:	1bcb      	subs	r3, r1, r7
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	2601      	movs	r6, #1
 8000e9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb08 f30c 	mul.w	r3, r8, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0xe4>
 8000eb0:	1879      	adds	r1, r7, r1
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0xe2>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	f200 80e9 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ecc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x10c>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x10a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80d9 	bhi.w	8001098 <__udivmoddi4+0x2bc>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e7bf      	b.n	8000e72 <__udivmoddi4+0x96>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0x12e>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	f000 80b1 	beq.w	800105e <__udivmoddi4+0x282>
 8000efc:	2600      	movs	r6, #0
 8000efe:	e9c5 0100 	strd	r0, r1, [r5]
 8000f02:	4630      	mov	r0, r6
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f683 	clz	r6, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d14a      	bne.n	8000fa8 <__udivmoddi4+0x1cc>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0x140>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80b8 	bhi.w	800108c <__udivmoddi4+0x2b0>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d0a8      	beq.n	8000e7c <__udivmoddi4+0xa0>
 8000f2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0xa0>
 8000f30:	f1c2 0320 	rsb	r3, r2, #32
 8000f34:	fa20 f603 	lsr.w	r6, r0, r3
 8000f38:	4097      	lsls	r7, r2
 8000f3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	4330      	orrs	r0, r6
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f4c:	fa1f f887 	uxth.w	r8, r7
 8000f50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f58:	fb06 f108 	mul.w	r1, r6, r8
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x19c>
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f6a:	f080 808d 	bcs.w	8001088 <__udivmoddi4+0x2ac>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	f240 808a 	bls.w	8001088 <__udivmoddi4+0x2ac>
 8000f74:	3e02      	subs	r6, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	b281      	uxth	r1, r0
 8000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb00 f308 	mul.w	r3, r0, r8
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d907      	bls.n	8000fa0 <__udivmoddi4+0x1c4>
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f96:	d273      	bcs.n	8001080 <__udivmoddi4+0x2a4>
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d971      	bls.n	8001080 <__udivmoddi4+0x2a4>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4439      	add	r1, r7
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa6:	e778      	b.n	8000e9a <__udivmoddi4+0xbe>
 8000fa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000fac:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fba:	fa01 f306 	lsl.w	r3, r1, r6
 8000fbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	0c3b      	lsrs	r3, r7, #16
 8000fca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fce:	fa1f f884 	uxth.w	r8, r4
 8000fd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fda:	fb09 fa08 	mul.w	sl, r9, r8
 8000fde:	458a      	cmp	sl, r1
 8000fe0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x220>
 8000fea:	1861      	adds	r1, r4, r1
 8000fec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff0:	d248      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8000ff2:	458a      	cmp	sl, r1
 8000ff4:	d946      	bls.n	8001084 <__udivmoddi4+0x2a8>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4421      	add	r1, r4
 8000ffc:	eba1 010a 	sub.w	r1, r1, sl
 8001000:	b2bf      	uxth	r7, r7
 8001002:	fbb1 f0fe 	udiv	r0, r1, lr
 8001006:	fb0e 1110 	mls	r1, lr, r0, r1
 800100a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100e:	fb00 f808 	mul.w	r8, r0, r8
 8001012:	45b8      	cmp	r8, r7
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x24a>
 8001016:	19e7      	adds	r7, r4, r7
 8001018:	f100 31ff 	add.w	r1, r0, #4294967295
 800101c:	d22e      	bcs.n	800107c <__udivmoddi4+0x2a0>
 800101e:	45b8      	cmp	r8, r7
 8001020:	d92c      	bls.n	800107c <__udivmoddi4+0x2a0>
 8001022:	3802      	subs	r0, #2
 8001024:	4427      	add	r7, r4
 8001026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102a:	eba7 0708 	sub.w	r7, r7, r8
 800102e:	fba0 8902 	umull	r8, r9, r0, r2
 8001032:	454f      	cmp	r7, r9
 8001034:	46c6      	mov	lr, r8
 8001036:	4649      	mov	r1, r9
 8001038:	d31a      	bcc.n	8001070 <__udivmoddi4+0x294>
 800103a:	d017      	beq.n	800106c <__udivmoddi4+0x290>
 800103c:	b15d      	cbz	r5, 8001056 <__udivmoddi4+0x27a>
 800103e:	ebb3 020e 	subs.w	r2, r3, lr
 8001042:	eb67 0701 	sbc.w	r7, r7, r1
 8001046:	fa07 fc0c 	lsl.w	ip, r7, ip
 800104a:	40f2      	lsrs	r2, r6
 800104c:	ea4c 0202 	orr.w	r2, ip, r2
 8001050:	40f7      	lsrs	r7, r6
 8001052:	e9c5 2700 	strd	r2, r7, [r5]
 8001056:	2600      	movs	r6, #0
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	462e      	mov	r6, r5
 8001060:	4628      	mov	r0, r5
 8001062:	e70b      	b.n	8000e7c <__udivmoddi4+0xa0>
 8001064:	4606      	mov	r6, r0
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0x60>
 8001068:	4618      	mov	r0, r3
 800106a:	e6fd      	b.n	8000e68 <__udivmoddi4+0x8c>
 800106c:	4543      	cmp	r3, r8
 800106e:	d2e5      	bcs.n	800103c <__udivmoddi4+0x260>
 8001070:	ebb8 0e02 	subs.w	lr, r8, r2
 8001074:	eb69 0104 	sbc.w	r1, r9, r4
 8001078:	3801      	subs	r0, #1
 800107a:	e7df      	b.n	800103c <__udivmoddi4+0x260>
 800107c:	4608      	mov	r0, r1
 800107e:	e7d2      	b.n	8001026 <__udivmoddi4+0x24a>
 8001080:	4660      	mov	r0, ip
 8001082:	e78d      	b.n	8000fa0 <__udivmoddi4+0x1c4>
 8001084:	4681      	mov	r9, r0
 8001086:	e7b9      	b.n	8000ffc <__udivmoddi4+0x220>
 8001088:	4666      	mov	r6, ip
 800108a:	e775      	b.n	8000f78 <__udivmoddi4+0x19c>
 800108c:	4630      	mov	r0, r6
 800108e:	e74a      	b.n	8000f26 <__udivmoddi4+0x14a>
 8001090:	f1ac 0c02 	sub.w	ip, ip, #2
 8001094:	4439      	add	r1, r7
 8001096:	e713      	b.n	8000ec0 <__udivmoddi4+0xe4>
 8001098:	3802      	subs	r0, #2
 800109a:	443c      	add	r4, r7
 800109c:	e724      	b.n	8000ee8 <__udivmoddi4+0x10c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	0000      	movs	r0, r0
	...

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f003 f880 	bl	80041b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 f998 	bl	80013e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 fb9a 	bl	80017f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010bc:	f000 fb70 	bl	80017a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010c0:	f000 fb42 	bl	8001748 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010c4:	f000 fa26 	bl	8001514 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c8:	f000 fa7c 	bl	80015c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010cc:	f000 fac6 	bl	800165c <MX_TIM3_Init>
  MX_I2C1_Init();
 80010d0:	f000 f9f2 	bl	80014b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010d4:	48b2      	ldr	r0, [pc, #712]	; (80013a0 <main+0x2f8>)
 80010d6:	f006 fb8d 	bl	80077f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010da:	213c      	movs	r1, #60	; 0x3c
 80010dc:	48b1      	ldr	r0, [pc, #708]	; (80013a4 <main+0x2fc>)
 80010de:	f006 fd9b 	bl	8007c18 <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010e2:	48b1      	ldr	r0, [pc, #708]	; (80013a8 <main+0x300>)
 80010e4:	f006 fb2c 	bl	8007740 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	48af      	ldr	r0, [pc, #700]	; (80013a8 <main+0x300>)
 80010ec:	f006 fc3e 	bl	800796c <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010f0:	48ae      	ldr	r0, [pc, #696]	; (80013ac <main+0x304>)
 80010f2:	f000 fd55 	bl	8001ba0 <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010f6:	49ad      	ldr	r1, [pc, #692]	; (80013ac <main+0x304>)
 80010f8:	48ad      	ldr	r0, [pc, #692]	; (80013b0 <main+0x308>)
 80010fa:	f000 fd69 	bl	8001bd0 <TrajectoryGenerationStructureInit>

  VelocityControllerInit(&VelocityPIDController, &TrjStruc);
 80010fe:	49ac      	ldr	r1, [pc, #688]	; (80013b0 <main+0x308>)
 8001100:	48ac      	ldr	r0, [pc, #688]	; (80013b4 <main+0x30c>)
 8001102:	f000 fde1 	bl	8001cc8 <VelocityControllerInit>
  DisplacementControllerInit(&PositionPIDController, &TrjStruc);
 8001106:	49aa      	ldr	r1, [pc, #680]	; (80013b0 <main+0x308>)
 8001108:	48ab      	ldr	r0, [pc, #684]	; (80013b8 <main+0x310>)
 800110a:	f000 fe15 	bl	8001d38 <DisplacementControllerInit>

  htim1.Instance->CNT = CUSSStruc.PPRxQEI;
 800110e:	4ba5      	ldr	r3, [pc, #660]	; (80013a4 <main+0x2fc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4aa6      	ldr	r2, [pc, #664]	; (80013ac <main+0x304>)
 8001114:	6852      	ldr	r2, [r2, #4]
 8001116:	625a      	str	r2, [r3, #36]	; 0x24

  ///UART init
  UART2.huart = &huart2;
 8001118:	4ba8      	ldr	r3, [pc, #672]	; (80013bc <main+0x314>)
 800111a:	4aa9      	ldr	r2, [pc, #676]	; (80013c0 <main+0x318>)
 800111c:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 800111e:	4ba7      	ldr	r3, [pc, #668]	; (80013bc <main+0x314>)
 8001120:	22ff      	movs	r2, #255	; 0xff
 8001122:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8001124:	4ba5      	ldr	r3, [pc, #660]	; (80013bc <main+0x314>)
 8001126:	22ff      	movs	r2, #255	; 0xff
 8001128:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 800112a:	48a4      	ldr	r0, [pc, #656]	; (80013bc <main+0x314>)
 800112c:	f001 fcc8 	bl	8002ac0 <UARTInit>
  UARTResetStart(&UART2);
 8001130:	48a2      	ldr	r0, [pc, #648]	; (80013bc <main+0x314>)
 8001132:	f001 fced 	bl	8002b10 <UARTResetStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 8001136:	48a1      	ldr	r0, [pc, #644]	; (80013bc <main+0x314>)
 8001138:	f001 fd0e 	bl	8002b58 <UARTReadChar>
 800113c:	4603      	mov	r3, r0
 800113e:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 8001140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <main+0xae>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	499b      	ldr	r1, [pc, #620]	; (80013bc <main+0x314>)
 8001150:	4618      	mov	r0, r3
 8001152:	f001 fde9 	bl	8002d28 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 8001156:	4b9b      	ldr	r3, [pc, #620]	; (80013c4 <main+0x31c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b07      	cmp	r3, #7
 800115c:	f200 8102 	bhi.w	8001364 <main+0x2bc>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <main+0xc0>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001189 	.word	0x08001189
 800116c:	08001195 	.word	0x08001195
 8001170:	080011a1 	.word	0x080011a1
 8001174:	080011b1 	.word	0x080011b1
 8001178:	080011c7 	.word	0x080011c7
 800117c:	080012b3 	.word	0x080012b3
 8001180:	08001345 	.word	0x08001345
 8001184:	08001355 	.word	0x08001355
	  {
	  	  case STATE_Disconnected:
	  		  LAMP_ON(2);
 8001188:	2002      	movs	r0, #2
 800118a:	f002 fa5d 	bl	8003648 <LAMP_ON>
	  		  Emergency_switch_trigger();
 800118e:	f002 faa7 	bl	80036e0 <Emergency_switch_trigger>
	  		  break;
 8001192:	e0e7      	b.n	8001364 <main+0x2bc>

	  	  case STATE_Idle:
	  		  LAMP_ON(2);
 8001194:	2002      	movs	r0, #2
 8001196:	f002 fa57 	bl	8003648 <LAMP_ON>
	  		  Emergency_switch_trigger();
 800119a:	f002 faa1 	bl	80036e0 <Emergency_switch_trigger>
		  	  break;
 800119e:	e0e1      	b.n	8001364 <main+0x2bc>

	  	  case STATE_PrepareDATA:
	  		  LAMP_ON(3);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f002 fa51 	bl	8003648 <LAMP_ON>
	  		  TrajectoryGenerationPrepareDATA();
 80011a6:	f000 fe33 	bl	8001e10 <TrajectoryGenerationPrepareDATA>
	  		  Emergency_switch_trigger();
 80011aa:	f002 fa99 	bl	80036e0 <Emergency_switch_trigger>
		  	  break;
 80011ae:	e0d9      	b.n	8001364 <main+0x2bc>

	  	  case STATE_Calculation:
	  		  LAMP_ON(3);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f002 fa49 	bl	8003648 <LAMP_ON>
	  		  TrajectoryGenerationCalculation();
 80011b6:	f000 ff87 	bl	80020c8 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 80011ba:	4b82      	ldr	r3, [pc, #520]	; (80013c4 <main+0x31c>)
 80011bc:	2204      	movs	r2, #4
 80011be:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 80011c0:	f002 fa8e 	bl	80036e0 <Emergency_switch_trigger>
	  		  break;
 80011c4:	e0ce      	b.n	8001364 <main+0x2bc>

	   	  case STATE_Link_Moving:
	   		  LAMP_ON(3);
 80011c6:	2003      	movs	r0, #3
 80011c8:	f002 fa3e 	bl	8003648 <LAMP_ON>
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 80011cc:	f000 fcce 	bl	8001b6c <micros>
 80011d0:	4b77      	ldr	r3, [pc, #476]	; (80013b0 <main+0x308>)
 80011d2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80011d6:	1a84      	subs	r4, r0, r2
 80011d8:	eb61 0503 	sbc.w	r5, r1, r3
 80011dc:	4b74      	ldr	r3, [pc, #464]	; (80013b0 <main+0x308>)
 80011de:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80011e2:	429d      	cmp	r5, r3
 80011e4:	bf08      	it	eq
 80011e6:	4294      	cmpeq	r4, r2
 80011e8:	d360      	bcc.n	80012ac <main+0x204>
	   		  {
	   			  Controlling_the_LINK();
 80011ea:	f002 fad1 	bl	8003790 <Controlling_the_LINK>

	   			  ///////////////////////////////////////////////////////////////////
//	   			  PositionPIDController.OutputFeedback = TrjStruc.AngularDisplacementDesire;
	   			  ///////////////////////////////////////////////////////////////////

	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 80011ee:	4b72      	ldr	r3, [pc, #456]	; (80013b8 <main+0x310>)
 80011f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80011f4:	4b6e      	ldr	r3, [pc, #440]	; (80013b0 <main+0x308>)
 80011f6:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80011fa:	4b73      	ldr	r3, [pc, #460]	; (80013c8 <main+0x320>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800120a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	d84b      	bhi.n	80012ac <main+0x204>
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8001214:	4b68      	ldr	r3, [pc, #416]	; (80013b8 <main+0x310>)
 8001216:	ed93 7a06 	vldr	s14, [r3, #24]
 800121a:	4b65      	ldr	r3, [pc, #404]	; (80013b0 <main+0x308>)
 800121c:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8001220:	4b69      	ldr	r3, [pc, #420]	; (80013c8 <main+0x320>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122c:	ee76 7ae7 	vsub.f32	s15, s13, s15
	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	db38      	blt.n	80012ac <main+0x204>
						  (Moving_Link_Task_Flag == 1))
 800123a:	4b64      	ldr	r3, [pc, #400]	; (80013cc <main+0x324>)
 800123c:	781b      	ldrb	r3, [r3, #0]
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 800123e:	2b01      	cmp	r3, #1
 8001240:	d134      	bne.n	80012ac <main+0x204>
	   			  {
	   				  if(MovingLinkMode == LMM_Set_Pos_Directly)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <main+0x328>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d111      	bne.n	800126e <main+0x1c6>
	   				  {
	   					Munmunbot_State = STATE_Idle;
 800124a:	4b5e      	ldr	r3, [pc, #376]	; (80013c4 <main+0x31c>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
	   					MovingLinkMode = LMM_Not_Set;
 8001250:	4b5f      	ldr	r3, [pc, #380]	; (80013d0 <main+0x328>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
	   					TrjStruc.Start_Theta =  PositionPIDController.OutputFeedback;
 8001256:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <main+0x310>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4a55      	ldr	r2, [pc, #340]	; (80013b0 <main+0x308>)
 800125c:	6653      	str	r3, [r2, #100]	; 0x64
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800125e:	4b52      	ldr	r3, [pc, #328]	; (80013a8 <main+0x300>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
	   					ACK2Return(&UART2);
 8001266:	4855      	ldr	r0, [pc, #340]	; (80013bc <main+0x314>)
 8001268:	f001 fd4a 	bl	8002d00 <ACK2Return>
 800126c:	e011      	b.n	8001292 <main+0x1ea>
	   				  }

	   				  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 800126e:	4b58      	ldr	r3, [pc, #352]	; (80013d0 <main+0x328>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d003      	beq.n	800127e <main+0x1d6>
 8001276:	4b56      	ldr	r3, [pc, #344]	; (80013d0 <main+0x328>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d109      	bne.n	8001292 <main+0x1ea>
	   				  {
	   					Munmunbot_State = STATE_End_Effector_Working;
 800127e:	4b51      	ldr	r3, [pc, #324]	; (80013c4 <main+0x31c>)
 8001280:	2205      	movs	r2, #5
 8001282:	701a      	strb	r2, [r3, #0]
	   					GripperState = 0;
 8001284:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <main+0x32c>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800128a:	4b47      	ldr	r3, [pc, #284]	; (80013a8 <main+0x300>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
	   				  }
	   				 TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8001292:	4b49      	ldr	r3, [pc, #292]	; (80013b8 <main+0x310>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <main+0x308>)
 8001298:	6653      	str	r3, [r2, #100]	; 0x64
	   				 VelocityPIDController.OutputFeedback = 0;
 800129a:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <main+0x30c>)
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
	   				 Moving_Link_Task_Flag = 0;
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <main+0x324>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
	   				 PID_Reset();
 80012a8:	f002 f984 	bl	80035b4 <PID_Reset>
//	   				 Moving_Link_Task_Flag = 0;
//	   				 PID_Reset();
//	   			  }

	   		  }
	  		  Emergency_switch_trigger();
 80012ac:	f002 fa18 	bl	80036e0 <Emergency_switch_trigger>
	  		  break;
 80012b0:	e058      	b.n	8001364 <main+0x2bc>

	  	  case STATE_End_Effector_Working:
	  		  LAMP_ON(3);
 80012b2:	2003      	movs	r0, #3
 80012b4:	f002 f9c8 	bl	8003648 <LAMP_ON>
	  		  ///I2C implement
	  		  if(GripperEnable == 1)
 80012b8:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <main+0x330>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d137      	bne.n	8001330 <main+0x288>
	  		  {
	  			if ((hi2c1.State == HAL_I2C_STATE_READY) && (GripperState == 0))
 80012c0:	4b46      	ldr	r3, [pc, #280]	; (80013dc <main+0x334>)
 80012c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b20      	cmp	r3, #32
 80012ca:	d116      	bne.n	80012fa <main+0x252>
 80012cc:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <main+0x32c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d112      	bne.n	80012fa <main+0x252>
	  			{
	  				{
	  					uint8_t temp[1] = {0x45};
 80012d4:	2345      	movs	r3, #69	; 0x45
 80012d6:	713b      	strb	r3, [r7, #4]
	  					HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 80012d8:	1d3a      	adds	r2, r7, #4
 80012da:	2301      	movs	r3, #1
 80012dc:	2146      	movs	r1, #70	; 0x46
 80012de:	483f      	ldr	r0, [pc, #252]	; (80013dc <main+0x334>)
 80012e0:	f004 f80e 	bl	8005300 <HAL_I2C_Master_Transmit_IT>
	  				}
	  				GripperState = 1;
 80012e4:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <main+0x32c>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
	  				Timestamp_Gripper = micros();
 80012ea:	f000 fc3f 	bl	8001b6c <micros>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	493b      	ldr	r1, [pc, #236]	; (80013e0 <main+0x338>)
 80012f4:	e9c1 2300 	strd	r2, r3, [r1]
 80012f8:	e021      	b.n	800133e <main+0x296>
	  			}
	  			else if ((micros() - Timestamp_Gripper >= 5100000) && (GripperState == 1))
 80012fa:	f000 fc37 	bl	8001b6c <micros>
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <main+0x338>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	ebb0 0802 	subs.w	r8, r0, r2
 8001308:	eb61 0903 	sbc.w	r9, r1, r3
 800130c:	a322      	add	r3, pc, #136	; (adr r3, 8001398 <main+0x2f0>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	454b      	cmp	r3, r9
 8001314:	bf08      	it	eq
 8001316:	4542      	cmpeq	r2, r8
 8001318:	d211      	bcs.n	800133e <main+0x296>
 800131a:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <main+0x32c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d10d      	bne.n	800133e <main+0x296>
	  			{
	  				GripperState = 0;
 8001322:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <main+0x32c>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
	  				Munmunbot_State = STATE_PrepareDATA;
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <main+0x31c>)
 800132a:	2202      	movs	r2, #2
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e006      	b.n	800133e <main+0x296>
	  			}
	  		  }
	  		  else if(GripperEnable == 0)
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <main+0x330>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <main+0x296>
			  {
		  		 Munmunbot_State = STATE_PrepareDATA;
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <main+0x31c>)
 800133a:	2202      	movs	r2, #2
 800133c:	701a      	strb	r2, [r3, #0]
			  }
	  		  Emergency_switch_trigger();
 800133e:	f002 f9cf 	bl	80036e0 <Emergency_switch_trigger>
	  		  break;
 8001342:	e00f      	b.n	8001364 <main+0x2bc>

	  	  case STATE_SetHome:
	  		  LAMP_ON(3);
 8001344:	2003      	movs	r0, #3
 8001346:	f002 f97f 	bl	8003648 <LAMP_ON>
	  		  SETHOME_StateMachine_Function();
 800134a:	f002 fa89 	bl	8003860 <SETHOME_StateMachine_Function>
	  		  Emergency_switch_trigger();
 800134e:	f002 f9c7 	bl	80036e0 <Emergency_switch_trigger>
	  		  break;
 8001352:	e007      	b.n	8001364 <main+0x2bc>

	  		case STATE_PreSetHome:
			  LAMP_ON(1);
 8001354:	2001      	movs	r0, #1
 8001356:	f002 f977 	bl	8003648 <LAMP_ON>
			  PRESETHOME_StateMachine_Function();
 800135a:	f002 fb2d 	bl	80039b8 <PRESETHOME_StateMachine_Function>
			  Emergency_switch_trigger();
 800135e:	f002 f9bf 	bl	80036e0 <Emergency_switch_trigger>
			  break;
 8001362:	bf00      	nop
	  }

	  if ( pidSetZeroFlag != 0 )
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <main+0x33c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d010      	beq.n	800138e <main+0x2e6>
	  {
		  pidSetZeroFlag = 0;
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <main+0x33c>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <main+0x300>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
		  TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <main+0x310>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <main+0x308>)
 8001380:	6653      	str	r3, [r2, #100]	; 0x64
		  TrjStruc.AngularVelocityDesire = 0;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <main+0x308>)
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
		  PID_Reset();
 800138a:	f002 f913 	bl	80035b4 <PID_Reset>
	  }



	  UARTTxDumpBuffer(&UART2);
 800138e:	480b      	ldr	r0, [pc, #44]	; (80013bc <main+0x314>)
 8001390:	f001 fc0c 	bl	8002bac <UARTTxDumpBuffer>
  {
 8001394:	e6cf      	b.n	8001136 <main+0x8e>
 8001396:	bf00      	nop
 8001398:	004dd1df 	.word	0x004dd1df
 800139c:	00000000 	.word	0x00000000
 80013a0:	200004c4 	.word	0x200004c4
 80013a4:	2000047c 	.word	0x2000047c
 80013a8:	200003d4 	.word	0x200003d4
 80013ac:	200001e0 	.word	0x200001e0
 80013b0:	20000168 	.word	0x20000168
 80013b4:	20000138 	.word	0x20000138
 80013b8:	20000108 	.word	0x20000108
 80013bc:	200000b8 	.word	0x200000b8
 80013c0:	2000050c 	.word	0x2000050c
 80013c4:	200000d9 	.word	0x200000d9
 80013c8:	20000015 	.word	0x20000015
 80013cc:	200000f8 	.word	0x200000f8
 80013d0:	200000ee 	.word	0x200000ee
 80013d4:	200000f9 	.word	0x200000f9
 80013d8:	20000014 	.word	0x20000014
 80013dc:	20000380 	.word	0x20000380
 80013e0:	20000100 	.word	0x20000100
 80013e4:	200000ac 	.word	0x200000ac

080013e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b094      	sub	sp, #80	; 0x50
 80013ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	2230      	movs	r2, #48	; 0x30
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f008 fa1a 	bl	8009830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <SystemClock_Config+0xc8>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <SystemClock_Config+0xc8>)
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <SystemClock_Config+0xc8>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <SystemClock_Config+0xcc>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a20      	ldr	r2, [pc, #128]	; (80014b4 <SystemClock_Config+0xcc>)
 8001432:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <SystemClock_Config+0xcc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001444:	2302      	movs	r3, #2
 8001446:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001448:	2301      	movs	r3, #1
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144c:	2310      	movs	r3, #16
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001450:	2302      	movs	r3, #2
 8001452:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001454:	2300      	movs	r3, #0
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001458:	2308      	movs	r3, #8
 800145a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800145c:	2364      	movs	r3, #100	; 0x64
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001460:	2302      	movs	r3, #2
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001464:	2304      	movs	r3, #4
 8001466:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4618      	mov	r0, r3
 800146e:	f005 fca3 	bl	8006db8 <HAL_RCC_OscConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001478:	f002 fbb2 	bl	8003be0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147c:	230f      	movs	r3, #15
 800147e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001480:	2302      	movs	r3, #2
 8001482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2103      	movs	r1, #3
 8001498:	4618      	mov	r0, r3
 800149a:	f005 ff05 	bl	80072a8 <HAL_RCC_ClockConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014a4:	f002 fb9c 	bl	8003be0 <Error_Handler>
  }
}
 80014a8:	bf00      	nop
 80014aa:	3750      	adds	r7, #80	; 0x50
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40007000 	.word	0x40007000

080014b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <MX_I2C1_Init+0x54>)
 80014be:	4a14      	ldr	r2, [pc, #80]	; (8001510 <MX_I2C1_Init+0x58>)
 80014c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_I2C1_Init+0x54>)
 80014c4:	f242 7210 	movw	r2, #10000	; 0x2710
 80014c8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_I2C1_Init+0x54>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_I2C1_Init+0x54>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <MX_I2C1_Init+0x54>)
 80014d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_I2C1_Init+0x54>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_I2C1_Init+0x54>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_I2C1_Init+0x54>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_I2C1_Init+0x54>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_I2C1_Init+0x54>)
 80014f8:	f003 fdbe 	bl	8005078 <HAL_I2C_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001502:	f002 fb6d 	bl	8003be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000380 	.word	0x20000380
 8001510:	40005400 	.word	0x40005400

08001514 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	2224      	movs	r2, #36	; 0x24
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f008 f984 	bl	8009830 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <MX_TIM1_Init+0xa8>)
 8001532:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <MX_TIM1_Init+0xac>)
 8001534:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <MX_TIM1_Init+0xa8>)
 8001538:	2200      	movs	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <MX_TIM1_Init+0xa8>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24575;
 8001542:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <MX_TIM1_Init+0xa8>)
 8001544:	f645 72ff 	movw	r2, #24575	; 0x5fff
 8001548:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <MX_TIM1_Init+0xa8>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_TIM1_Init+0xa8>)
 8001552:	2200      	movs	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <MX_TIM1_Init+0xa8>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800155c:	2303      	movs	r3, #3
 800155e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001564:	2301      	movs	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800156c:	2302      	movs	r3, #2
 800156e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001574:	2301      	movs	r3, #1
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	4619      	mov	r1, r3
 8001586:	480d      	ldr	r0, [pc, #52]	; (80015bc <MX_TIM1_Init+0xa8>)
 8001588:	f006 faa0 	bl	8007acc <HAL_TIM_Encoder_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001592:	f002 fb25 	bl	8003be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <MX_TIM1_Init+0xa8>)
 80015a4:	f007 f944 	bl	8008830 <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80015ae:	f002 fb17 	bl	8003be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	3730      	adds	r7, #48	; 0x30
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000047c 	.word	0x2000047c
 80015c0:	40010000 	.word	0x40010000

080015c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_TIM2_Init+0x94>)
 80015e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <MX_TIM2_Init+0x94>)
 80015ea:	2263      	movs	r2, #99	; 0x63
 80015ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM2_Init+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_TIM2_Init+0x94>)
 80015f6:	f04f 32ff 	mov.w	r2, #4294967295
 80015fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_TIM2_Init+0x94>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_TIM2_Init+0x94>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001608:	4813      	ldr	r0, [pc, #76]	; (8001658 <MX_TIM2_Init+0x94>)
 800160a:	f006 f849 	bl	80076a0 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001614:	f002 fae4 	bl	8003be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4619      	mov	r1, r3
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <MX_TIM2_Init+0x94>)
 8001626:	f006 fd4b 	bl	80080c0 <HAL_TIM_ConfigClockSource>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001630:	f002 fad6 	bl	8003be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_TIM2_Init+0x94>)
 8001642:	f007 f8f5 	bl	8008830 <HAL_TIMEx_MasterConfigSynchronization>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800164c:	f002 fac8 	bl	8003be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200004c4 	.word	0x200004c4

0800165c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08e      	sub	sp, #56	; 0x38
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800168c:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <MX_TIM3_Init+0xe4>)
 800168e:	4a2d      	ldr	r2, [pc, #180]	; (8001744 <MX_TIM3_Init+0xe8>)
 8001690:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <MX_TIM3_Init+0xe4>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <MX_TIM3_Init+0xe4>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800169e:	4b28      	ldr	r3, [pc, #160]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80016a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016b2:	4823      	ldr	r0, [pc, #140]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016b4:	f005 fff4 	bl	80076a0 <HAL_TIM_Base_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016be:	f002 fa8f 	bl	8003be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016cc:	4619      	mov	r1, r3
 80016ce:	481c      	ldr	r0, [pc, #112]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016d0:	f006 fcf6 	bl	80080c0 <HAL_TIM_ConfigClockSource>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016da:	f002 fa81 	bl	8003be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016de:	4818      	ldr	r0, [pc, #96]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016e0:	f006 f8ea 	bl	80078b8 <HAL_TIM_PWM_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016ea:	f002 fa79 	bl	8003be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	4619      	mov	r1, r3
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <MX_TIM3_Init+0xe4>)
 80016fe:	f007 f897 	bl	8008830 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001708:	f002 fa6a 	bl	8003be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170c:	2360      	movs	r3, #96	; 0x60
 800170e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	4619      	mov	r1, r3
 8001722:	4807      	ldr	r0, [pc, #28]	; (8001740 <MX_TIM3_Init+0xe4>)
 8001724:	f006 fc0e 	bl	8007f44 <HAL_TIM_PWM_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800172e:	f002 fa57 	bl	8003be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <MX_TIM3_Init+0xe4>)
 8001734:	f002 fb5e 	bl	8003df4 <HAL_TIM_MspPostInit>

}
 8001738:	bf00      	nop
 800173a:	3738      	adds	r7, #56	; 0x38
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200003d4 	.word	0x200003d4
 8001744:	40000400 	.word	0x40000400

08001748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_USART2_UART_Init+0x50>)
 800174e:	4a13      	ldr	r2, [pc, #76]	; (800179c <MX_USART2_UART_Init+0x54>)
 8001750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_USART2_UART_Init+0x50>)
 8001754:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_USART2_UART_Init+0x50>)
 800175c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001760:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <MX_USART2_UART_Init+0x50>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_USART2_UART_Init+0x50>)
 800176a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_USART2_UART_Init+0x50>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_USART2_UART_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_USART2_UART_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_USART2_UART_Init+0x50>)
 8001784:	f007 f8d6 	bl	8008934 <HAL_UART_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800178e:	f002 fa27 	bl	8003be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000050c 	.word	0x2000050c
 800179c:	40004400 	.word	0x40004400

080017a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_DMA_Init+0x4c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <MX_DMA_Init+0x4c>)
 80017b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_DMA_Init+0x4c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	2010      	movs	r0, #16
 80017c8:	f002 fe41 	bl	800444e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017cc:	2010      	movs	r0, #16
 80017ce:	f002 fe5a 	bl	8004486 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2011      	movs	r0, #17
 80017d8:	f002 fe39 	bl	800444e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017dc:	2011      	movs	r0, #17
 80017de:	f002 fe52 	bl	8004486 <HAL_NVIC_EnableIRQ>

}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800

080017f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b60      	ldr	r3, [pc, #384]	; (800198c <MX_GPIO_Init+0x19c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a5f      	ldr	r2, [pc, #380]	; (800198c <MX_GPIO_Init+0x19c>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b5d      	ldr	r3, [pc, #372]	; (800198c <MX_GPIO_Init+0x19c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b59      	ldr	r3, [pc, #356]	; (800198c <MX_GPIO_Init+0x19c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a58      	ldr	r2, [pc, #352]	; (800198c <MX_GPIO_Init+0x19c>)
 800182c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b56      	ldr	r3, [pc, #344]	; (800198c <MX_GPIO_Init+0x19c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	4b52      	ldr	r3, [pc, #328]	; (800198c <MX_GPIO_Init+0x19c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a51      	ldr	r2, [pc, #324]	; (800198c <MX_GPIO_Init+0x19c>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b4f      	ldr	r3, [pc, #316]	; (800198c <MX_GPIO_Init+0x19c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b4b      	ldr	r3, [pc, #300]	; (800198c <MX_GPIO_Init+0x19c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a4a      	ldr	r2, [pc, #296]	; (800198c <MX_GPIO_Init+0x19c>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b48      	ldr	r3, [pc, #288]	; (800198c <MX_GPIO_Init+0x19c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	2120      	movs	r1, #32
 800187a:	4845      	ldr	r0, [pc, #276]	; (8001990 <MX_GPIO_Init+0x1a0>)
 800187c:	f003 fbca 	bl	8005014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay_ch_2_Pin|Relay_ch_3_Pin, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	f241 0104 	movw	r1, #4100	; 0x1004
 8001886:	4843      	ldr	r0, [pc, #268]	; (8001994 <MX_GPIO_Init+0x1a4>)
 8001888:	f003 fbc4 	bl	8005014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	2180      	movs	r1, #128	; 0x80
 8001890:	4841      	ldr	r0, [pc, #260]	; (8001998 <MX_GPIO_Init+0x1a8>)
 8001892:	f003 fbbf 	bl	8005014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_ch_4_GPIO_Port, Relay_ch_4_Pin, GPIO_PIN_SET);
 8001896:	2201      	movs	r2, #1
 8001898:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800189c:	483c      	ldr	r0, [pc, #240]	; (8001990 <MX_GPIO_Init+0x1a0>)
 800189e:	f003 fbb9 	bl	8005014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018a8:	4b3c      	ldr	r3, [pc, #240]	; (800199c <MX_GPIO_Init+0x1ac>)
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4838      	ldr	r0, [pc, #224]	; (8001998 <MX_GPIO_Init+0x1a8>)
 80018b8:	f003 fa10 	bl	8004cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Relay_ch_4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Relay_ch_4_Pin;
 80018bc:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	482e      	ldr	r0, [pc, #184]	; (8001990 <MX_GPIO_Init+0x1a0>)
 80018d6:	f003 fa01 	bl	8004cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_ch_2_Pin Relay_ch_3_Pin */
  GPIO_InitStruct.Pin = Relay_ch_2_Pin|Relay_ch_3_Pin;
 80018da:	f241 0304 	movw	r3, #4100	; 0x1004
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4828      	ldr	r0, [pc, #160]	; (8001994 <MX_GPIO_Init+0x1a4>)
 80018f4:	f003 f9f2 	bl	8004cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Switch_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Signal_Pin;
 80018f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001902:	2302      	movs	r3, #2
 8001904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Switch_Signal_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4821      	ldr	r0, [pc, #132]	; (8001994 <MX_GPIO_Init+0x1a4>)
 800190e:	f003 f9e5 	bl	8004cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : Index_Signal_Pin */
  GPIO_InitStruct.Pin = Index_Signal_Pin;
 8001912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <MX_GPIO_Init+0x1b0>)
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Index_Signal_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	481b      	ldr	r0, [pc, #108]	; (8001994 <MX_GPIO_Init+0x1a4>)
 8001928:	f003 f9d8 	bl	8004cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4815      	ldr	r0, [pc, #84]	; (8001998 <MX_GPIO_Init+0x1a8>)
 8001944:	f003 f9ca 	bl	8004cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitchSignal_Pin */
  GPIO_InitStruct.Pin = LimitSwitchSignal_Pin;
 8001948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <MX_GPIO_Init+0x1b0>)
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitchSignal_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	480e      	ldr	r0, [pc, #56]	; (8001998 <MX_GPIO_Init+0x1a8>)
 800195e:	f003 f9bd 	bl	8004cdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	2017      	movs	r0, #23
 8001968:	f002 fd71 	bl	800444e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800196c:	2017      	movs	r0, #23
 800196e:	f002 fd8a 	bl	8004486 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	2028      	movs	r0, #40	; 0x28
 8001978:	f002 fd69 	bl	800444e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800197c:	2028      	movs	r0, #40	; 0x28
 800197e:	f002 fd82 	bl	8004486 <HAL_NVIC_EnableIRQ>

}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000
 8001994:	40020400 	.word	0x40020400
 8001998:	40020800 	.word	0x40020800
 800199c:	10210000 	.word	0x10210000
 80019a0:	10110000 	.word	0x10110000

080019a4 <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 12288
#define  MAX_ENCODER_PERIOD 24576

void EncoderVelocityAndPosition_Update()
{
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	ed2d 8b02 	vpush	{d8}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;
	static int32_t Velocity_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <EncoderVelocityAndPosition_Update+0xbc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	61fb      	str	r3, [r7, #28]

	uint64_t EncoderNowTimestamp = micros();
 80019b6:	f000 f8d9 	bl	8001b6c <micros>
 80019ba:	e9c7 0104 	strd	r0, r1, [r7, #16]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 80019be:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <EncoderVelocityAndPosition_Update+0xc0>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019c8:	1a84      	subs	r4, r0, r2
 80019ca:	eb61 0503 	sbc.w	r5, r1, r3
 80019ce:	e9c7 4502 	strd	r4, r5, [r7, #8]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80019d2:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <EncoderVelocityAndPosition_Update+0xc4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	607b      	str	r3, [r7, #4]

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80019dc:	4a22      	ldr	r2, [pc, #136]	; (8001a68 <EncoderVelocityAndPosition_Update+0xc4>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80019e2:	4920      	ldr	r1, [pc, #128]	; (8001a64 <EncoderVelocityAndPosition_Update+0xc0>)
 80019e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019e8:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <EncoderVelocityAndPosition_Update+0xc8>)
 80019f8:	edc3 7a06 	vstr	s15, [r3, #24]

	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <EncoderVelocityAndPosition_Update+0xcc>)
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001a0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a10:	f7ff f986 	bl	8000d20 <__aeabi_ul2f>
 8001a14:	ee07 0a10 	vmov	s14, r0
 8001a18:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a20:	ee17 2a90 	vmov	r2, s15
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <EncoderVelocityAndPosition_Update+0xd0>)
 8001a26:	601a      	str	r2, [r3, #0]

	// LPF
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*249))/250.0;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <EncoderVelocityAndPosition_Update+0xd0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <EncoderVelocityAndPosition_Update+0xd4>)
 8001a36:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a3a:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a7c <EncoderVelocityAndPosition_Update+0xd8>
 8001a3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a46:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001a80 <EncoderVelocityAndPosition_Update+0xdc>
 8001a4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <EncoderVelocityAndPosition_Update+0xd4>)
 8001a50:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	ecbd 8b02 	vpop	{d8}
 8001a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a60:	2000047c 	.word	0x2000047c
 8001a64:	200001f0 	.word	0x200001f0
 8001a68:	200001f8 	.word	0x200001f8
 8001a6c:	20000108 	.word	0x20000108
 8001a70:	000f4240 	.word	0x000f4240
 8001a74:	200001fc 	.word	0x200001fc
 8001a78:	20000138 	.word	0x20000138
 8001a7c:	43790000 	.word	0x43790000
 8001a80:	437a0000 	.word	0x437a0000

08001a84 <HAL_TIM_PeriodElapsedCallback>:
{
	HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a84:	b4b0      	push	{r4, r5, r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d109      	bne.n	8001aa8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001a9e:	f143 0500 	adc.w	r5, r3, #0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001aa4:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bcb0      	pop	{r4, r5, r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200004c4 	.word	0x200004c4
 8001ab8:	200000b0 	.word	0x200000b0

08001abc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13) // If The INT Source Is EXTI Line15 -> index  ///13 for test
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001acc:	d11c      	bne.n	8001b08 <HAL_GPIO_EXTI_Callback+0x4c>
	{
    	if ((Munmunbot_State == STATE_SetHome) || (Munmunbot_State == STATE_PreSetHome))
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x98>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_EXTI_Callback+0x22>
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x98>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b07      	cmp	r3, #7
 8001adc:	d114      	bne.n	8001b08 <HAL_GPIO_EXTI_Callback+0x4c>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d110      	bne.n	8001b08 <HAL_GPIO_EXTI_Callback+0x4c>
    		{
    			HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001aec:	6852      	ldr	r2, [r2, #4]
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
    			SethomeMode = SetHomeState_2;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001af2:	2202      	movs	r2, #2
 8001af4:	701a      	strb	r2, [r3, #0]
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	481a      	ldr	r0, [pc, #104]	; (8001b64 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001afc:	f003 fa8a 	bl	8005014 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_GPIO_EXTI_Callback+0xac>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2200      	movs	r2, #0
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34
    		}
    	}
	}

    if(GPIO_Pin == GPIO_PIN_8) // LimitSwitch
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b0e:	d11c      	bne.n	8001b4a <HAL_GPIO_EXTI_Callback+0x8e>
	{
    	if ((Munmunbot_State == STATE_SetHome) || (Munmunbot_State == STATE_PreSetHome))
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x98>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b06      	cmp	r3, #6
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_EXTI_Callback+0x64>
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x98>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b07      	cmp	r3, #7
 8001b1e:	d114      	bne.n	8001b4a <HAL_GPIO_EXTI_Callback+0x8e>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d110      	bne.n	8001b4a <HAL_GPIO_EXTI_Callback+0x8e>
    		{
    			HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001b2e:	6852      	ldr	r2, [r2, #4]
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
    			SethomeMode = SetHomeState_2;
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001b34:	2202      	movs	r2, #2
 8001b36:	701a      	strb	r2, [r3, #0]
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	4809      	ldr	r0, [pc, #36]	; (8001b64 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001b3e:	f003 fa69 	bl	8005014 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_GPIO_EXTI_Callback+0xac>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34
//    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
//				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
//    		}
//    	}
//	}
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200000d9 	.word	0x200000d9
 8001b58:	200000da 	.word	0x200000da
 8001b5c:	2000047c 	.word	0x2000047c
 8001b60:	200001e0 	.word	0x200001e0
 8001b64:	40020800 	.word	0x40020800
 8001b68:	200003d4 	.word	0x200003d4

08001b6c <micros>:

uint64_t micros()
{
 8001b6c:	b4b0      	push	{r4, r5, r7}
 8001b6e:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <micros+0x2c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	4618      	mov	r0, r3
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <micros+0x30>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	1884      	adds	r4, r0, r2
 8001b84:	eb41 0503 	adc.w	r5, r1, r3
 8001b88:	4622      	mov	r2, r4
 8001b8a:	462b      	mov	r3, r5
}
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bcb0      	pop	{r4, r5, r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	200004c4 	.word	0x200004c4
 8001b9c:	200000b0 	.word	0x200000b0

08001ba0 <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bae:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	009a      	lsls	r2, r3, #2
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 10;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a03      	ldr	r2, [pc, #12]	; (8001bcc <ConverterUnitSystemStructureInit+0x2c>)
 8001bbe:	609a      	str	r2, [r3, #8]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	41200000 	.word	0x41200000

08001bd0 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.25*(CUSSvar->PPRxQEI))/3.141;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fc3c 	bl	800045c <__aeabi_ui2d>
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <TrajectoryGenerationStructureInit+0xe8>)
 8001bea:	f7fe fcb1 	bl	8000550 <__aeabi_dmul>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	a32e      	add	r3, pc, #184	; (adr r3, 8001cb0 <TrajectoryGenerationStructureInit+0xe0>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fdd2 	bl	80007a4 <__aeabi_ddiv>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f7fe ff72 	bl	8000af0 <__aeabi_d2f>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	615a      	str	r2, [r3, #20]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fc1c 	bl	800045c <__aeabi_ui2d>
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <TrajectoryGenerationStructureInit+0xec>)
 8001c2a:	f7fe fdbb 	bl	80007a4 <__aeabi_ddiv>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4610      	mov	r0, r2
 8001c34:	4619      	mov	r1, r3
 8001c36:	f7fe ff5b 	bl	8000af0 <__aeabi_d2f>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = CUSSStruc.PPRxQEI;  /// PPRxQEI == 0 degree
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <TrajectoryGenerationStructureInit+0xf0>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	TGSvar->Mode = 0;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	671a      	str	r2, [r3, #112]	; 0x70
	TGSvar->Submode = 0;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	675a      	str	r2, [r3, #116]	; 0x74
	TGSvar->Loop_Freq = 10000;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c64:	651a      	str	r2, [r3, #80]	; 0x50
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c6a:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <TrajectoryGenerationStructureInit+0xf4>)
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	9ba5e354 	.word	0x9ba5e354
 8001cb4:	400920c4 	.word	0x400920c4
 8001cb8:	3fd00000 	.word	0x3fd00000
 8001cbc:	404e0000 	.word	0x404e0000
 8001cc0:	200001e0 	.word	0x200001e0
 8001cc4:	000f4240 	.word	0x000f4240

08001cc8 <VelocityControllerInit>:

void VelocityControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <VelocityControllerInit+0x60>)
 8001cd6:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 10;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <VelocityControllerInit+0x64>)
 8001cdc:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0.15;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <VelocityControllerInit+0x68>)
 8001ce2:	609a      	str	r2, [r3, #8]
	VCvar->offSet = 0;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
	VCvar->Integral_Value = 0;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	61da      	str	r2, [r3, #28]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7fe fbf1 	bl	80004e4 <__aeabi_ul2d>
 8001d02:	a307      	add	r3, pc, #28	; (adr r3, 8001d20 <VelocityControllerInit+0x58>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fd4c 	bl	80007a4 <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	00000000 	.word	0x00000000
 8001d24:	412e8480 	.word	0x412e8480
 8001d28:	40a00000 	.word	0x40a00000
 8001d2c:	41200000 	.word	0x41200000
 8001d30:	3e19999a 	.word	0x3e19999a
 8001d34:	00000000 	.word	0x00000000

08001d38 <DisplacementControllerInit>:

void DisplacementControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d48:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d50:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
	VCvar->offSet = 0;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
	VCvar->Integral_Value = 0;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f7fe fbb6 	bl	80004e4 <__aeabi_ul2d>
 8001d78:	a307      	add	r3, pc, #28	; (adr r3, 8001d98 <DisplacementControllerInit+0x60>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe fd11 	bl	80007a4 <__aeabi_ddiv>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	f3af 8000 	nop.w
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	412e8480 	.word	0x412e8480

08001da0 <TrajectoryGenerationVelocityMaxSetting>:

void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp))/(60.0);   ///RPM to pps
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	ee07 3a90 	vmov	s15, r3
 8001db2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc0:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001e08 <TrajectoryGenerationVelocityMaxSetting+0x68>
 8001dc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	edc3 7a04 	vstr	s15, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	edd3 6a04 	vldr	s13, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	ed93 7a05 	vldr	s14, [r3, #20]
 8001dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	42700000 	.word	0x42700000
 8001e0c:	00000000 	.word	0x00000000

08001e10 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	// fix start position base on Encoder
	TrjStruc.Start_Theta = htim1.Instance->CNT;
 8001e14:	4b9e      	ldr	r3, [pc, #632]	; (8002090 <TrajectoryGenerationPrepareDATA+0x280>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e22:	4b9c      	ldr	r3, [pc, #624]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001e24:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	if (MovingLinkMode == LMM_Set_Pos_Directly)
 8001e28:	4b9b      	ldr	r3, [pc, #620]	; (8002098 <TrajectoryGenerationPrepareDATA+0x288>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d165      	bne.n	8001efc <TrajectoryGenerationPrepareDATA+0xec>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 8001e30:	4b9a      	ldr	r3, [pc, #616]	; (800209c <TrajectoryGenerationPrepareDATA+0x28c>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b9a      	ldr	r3, [pc, #616]	; (80020a0 <TrajectoryGenerationPrepareDATA+0x290>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	fb03 f302 	mul.w	r3, r3, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fb0c 	bl	800045c <__aeabi_ui2d>
 8001e44:	a390      	add	r3, pc, #576	; (adr r3, 8002088 <TrajectoryGenerationPrepareDATA+0x278>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fcab 	bl	80007a4 <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fe4b 	bl	8000af0 <__aeabi_d2f>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a8d      	ldr	r2, [pc, #564]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001e5e:	6613      	str	r3, [r2, #96]	; 0x60
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 8001e60:	4b8c      	ldr	r3, [pc, #560]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001e62:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001e66:	4b8e      	ldr	r3, [pc, #568]	; (80020a0 <TrajectoryGenerationPrepareDATA+0x290>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7a:	db0d      	blt.n	8001e98 <TrajectoryGenerationPrepareDATA+0x88>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001e7c:	4b85      	ldr	r3, [pc, #532]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001e7e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001e82:	4b87      	ldr	r3, [pc, #540]	; (80020a0 <TrajectoryGenerationPrepareDATA+0x290>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e92:	4b80      	ldr	r3, [pc, #512]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001e94:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		  }
		  TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8001e98:	4b7e      	ldr	r3, [pc, #504]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001e9a:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001e9e:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <TrajectoryGenerationPrepareDATA+0x290>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eae:	4b79      	ldr	r3, [pc, #484]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001eb0:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

		  if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 8001eb4:	4b77      	ldr	r3, [pc, #476]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001eb6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001eba:	4b76      	ldr	r3, [pc, #472]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001ebc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001ec0:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	d00e      	beq.n	8001ee8 <TrajectoryGenerationPrepareDATA+0xd8>
		  {
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8001eca:	4b72      	ldr	r3, [pc, #456]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001ecc:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001ed0:	4b70      	ldr	r3, [pc, #448]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001ed2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eda:	4b6e      	ldr	r3, [pc, #440]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001edc:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			  Munmunbot_State = STATE_Calculation;
 8001ee0:	4b70      	ldr	r3, [pc, #448]	; (80020a4 <TrajectoryGenerationPrepareDATA+0x294>)
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	701a      	strb	r2, [r3, #0]
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
		ACK2Return(&UART2);
	  }
}
 8001ee6:	e0cd      	b.n	8002084 <TrajectoryGenerationPrepareDATA+0x274>
			Munmunbot_State = STATE_Idle;
 8001ee8:	4b6e      	ldr	r3, [pc, #440]	; (80020a4 <TrajectoryGenerationPrepareDATA+0x294>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8001eee:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <TrajectoryGenerationPrepareDATA+0x288>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
			ACK2Return(&UART2);
 8001ef4:	486c      	ldr	r0, [pc, #432]	; (80020a8 <TrajectoryGenerationPrepareDATA+0x298>)
 8001ef6:	f000 ff03 	bl	8002d00 <ACK2Return>
}
 8001efa:	e0c3      	b.n	8002084 <TrajectoryGenerationPrepareDATA+0x274>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 8001efc:	4b66      	ldr	r3, [pc, #408]	; (8002098 <TrajectoryGenerationPrepareDATA+0x288>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d004      	beq.n	8001f0e <TrajectoryGenerationPrepareDATA+0xfe>
 8001f04:	4b64      	ldr	r3, [pc, #400]	; (8002098 <TrajectoryGenerationPrepareDATA+0x288>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	f040 80b1 	bne.w	8002070 <TrajectoryGenerationPrepareDATA+0x260>
		  if (NumberOfStationToGo == 0)
 8001f0e:	4b67      	ldr	r3, [pc, #412]	; (80020ac <TrajectoryGenerationPrepareDATA+0x29c>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10f      	bne.n	8001f36 <TrajectoryGenerationPrepareDATA+0x126>
				Munmunbot_State = STATE_Idle;
 8001f16:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <TrajectoryGenerationPrepareDATA+0x294>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 8001f1c:	4b64      	ldr	r3, [pc, #400]	; (80020b0 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 8001f22:	4b62      	ldr	r3, [pc, #392]	; (80020ac <TrajectoryGenerationPrepareDATA+0x29c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8001f28:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <TrajectoryGenerationPrepareDATA+0x288>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 8001f2e:	485e      	ldr	r0, [pc, #376]	; (80020a8 <TrajectoryGenerationPrepareDATA+0x298>)
 8001f30:	f000 fee6 	bl	8002d00 <ACK2Return>
		  if (NumberOfStationToGo == 0)
 8001f34:	e0a6      	b.n	8002084 <TrajectoryGenerationPrepareDATA+0x274>
			Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 8001f36:	4b5e      	ldr	r3, [pc, #376]	; (80020b0 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <TrajectoryGenerationPrepareDATA+0x2a4>)
 8001f3e:	5c9a      	ldrb	r2, [r3, r2]
 8001f40:	4b5d      	ldr	r3, [pc, #372]	; (80020b8 <TrajectoryGenerationPrepareDATA+0x2a8>)
 8001f42:	701a      	strb	r2, [r3, #0]
			if (Current_Station > 10)   //pass input
 8001f44:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <TrajectoryGenerationPrepareDATA+0x2a8>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b0a      	cmp	r3, #10
 8001f4a:	d90c      	bls.n	8001f66 <TrajectoryGenerationPrepareDATA+0x156>
				NumberOfStationPTR += 1;
 8001f4c:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8001f56:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 8001f58:	4b54      	ldr	r3, [pc, #336]	; (80020ac <TrajectoryGenerationPrepareDATA+0x29c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b52      	ldr	r3, [pc, #328]	; (80020ac <TrajectoryGenerationPrepareDATA+0x29c>)
 8001f62:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001f64:	e08e      	b.n	8002084 <TrajectoryGenerationPrepareDATA+0x274>
				TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0))*5.0;   ///fix this if change algorithm
 8001f66:	4b54      	ldr	r3, [pc, #336]	; (80020b8 <TrajectoryGenerationPrepareDATA+0x2a8>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	4a53      	ldr	r2, [pc, #332]	; (80020bc <TrajectoryGenerationPrepareDATA+0x2ac>)
 8001f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f72:	461a      	mov	r2, r3
 8001f74:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <TrajectoryGenerationPrepareDATA+0x290>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	fb03 f302 	mul.w	r3, r3, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fa6d 	bl	800045c <__aeabi_ui2d>
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	4b4e      	ldr	r3, [pc, #312]	; (80020c0 <TrajectoryGenerationPrepareDATA+0x2b0>)
 8001f88:	f7fe fc0c 	bl	80007a4 <__aeabi_ddiv>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <TrajectoryGenerationPrepareDATA+0x2b4>)
 8001f9a:	f7fe fad9 	bl	8000550 <__aeabi_dmul>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fda3 	bl	8000af0 <__aeabi_d2f>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a39      	ldr	r2, [pc, #228]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001fae:	6613      	str	r3, [r2, #96]	; 0x60
				if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)  ///wrap input into 1 revolute. ///shouldn't happen
 8001fb0:	4b38      	ldr	r3, [pc, #224]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001fb2:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <TrajectoryGenerationPrepareDATA+0x290>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fca:	db0d      	blt.n	8001fe8 <TrajectoryGenerationPrepareDATA+0x1d8>
					TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001fce:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001fd2:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <TrajectoryGenerationPrepareDATA+0x290>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	ee07 3a90 	vmov	s15, r3
 8001fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001fe4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8001fea:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001fee:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <TrajectoryGenerationPrepareDATA+0x290>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8002000:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				if (TrjStruc.Desire_Theta == TrjStruc.Start_Theta)
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8002006:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 800200c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002010:	eeb4 7a67 	vcmp.f32	s14, s15
 8002014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002018:	d10f      	bne.n	800203a <TrajectoryGenerationPrepareDATA+0x22a>
					NumberOfStationPTR += 1;
 800201a:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <TrajectoryGenerationPrepareDATA+0x2a0>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002024:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8002026:	4b21      	ldr	r3, [pc, #132]	; (80020ac <TrajectoryGenerationPrepareDATA+0x29c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	3b01      	subs	r3, #1
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <TrajectoryGenerationPrepareDATA+0x29c>)
 8002030:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_End_Effector_Working;
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <TrajectoryGenerationPrepareDATA+0x294>)
 8002034:	2205      	movs	r2, #5
 8002036:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8002038:	e024      	b.n	8002084 <TrajectoryGenerationPrepareDATA+0x274>
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 800203c:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 8002042:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <TrajectoryGenerationPrepareDATA+0x284>)
 800204c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
					Munmunbot_State = STATE_Calculation;
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <TrajectoryGenerationPrepareDATA+0x294>)
 8002052:	2203      	movs	r2, #3
 8002054:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002060:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <TrajectoryGenerationPrepareDATA+0x29c>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	3b01      	subs	r3, #1
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <TrajectoryGenerationPrepareDATA+0x29c>)
 800206c:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 800206e:	e009      	b.n	8002084 <TrajectoryGenerationPrepareDATA+0x274>
		MovingLinkMode = LMM_Not_Set;
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <TrajectoryGenerationPrepareDATA+0x288>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <TrajectoryGenerationPrepareDATA+0x294>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
		ACK2Return(&UART2);
 800207c:	480a      	ldr	r0, [pc, #40]	; (80020a8 <TrajectoryGenerationPrepareDATA+0x298>)
 800207e:	f000 fe3f 	bl	8002d00 <ACK2Return>
}
 8002082:	e7ff      	b.n	8002084 <TrajectoryGenerationPrepareDATA+0x274>
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	99999999 	.word	0x99999999
 800208c:	40eeadf9 	.word	0x40eeadf9
 8002090:	2000047c 	.word	0x2000047c
 8002094:	20000168 	.word	0x20000168
 8002098:	200000ee 	.word	0x200000ee
 800209c:	200000ec 	.word	0x200000ec
 80020a0:	200001e0 	.word	0x200001e0
 80020a4:	200000d9 	.word	0x200000d9
 80020a8:	200000b8 	.word	0x200000b8
 80020ac:	200000f0 	.word	0x200000f0
 80020b0:	200000f1 	.word	0x200000f1
 80020b4:	200000dc 	.word	0x200000dc
 80020b8:	200000ef 	.word	0x200000ef
 80020bc:	20000000 	.word	0x20000000
 80020c0:	40768000 	.word	0x40768000
 80020c4:	40140000 	.word	0x40140000

080020c8 <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 80020c8:	b5b0      	push	{r4, r5, r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 80020cc:	4b84      	ldr	r3, [pc, #528]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80020ce:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80020d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	d518      	bpl.n	800210e <TrajectoryGenerationCalculation+0x46>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 80020dc:	4b80      	ldr	r3, [pc, #512]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80020de:	edd3 7a05 	vldr	s15, [r3, #20]
 80020e2:	eef1 7a67 	vneg.f32	s15, s15
 80020e6:	4b7e      	ldr	r3, [pc, #504]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80020e8:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 80020ec:	4b7c      	ldr	r3, [pc, #496]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80020ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80020f2:	eef1 7a67 	vneg.f32	s15, s15
 80020f6:	4b7a      	ldr	r3, [pc, #488]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80020f8:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 80020fc:	4b78      	ldr	r3, [pc, #480]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80020fe:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002102:	eef1 7a67 	vneg.f32	s15, s15
 8002106:	4b76      	ldr	r3, [pc, #472]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002108:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 800210c:	e013      	b.n	8002136 <TrajectoryGenerationCalculation+0x6e>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 800210e:	4b74      	ldr	r3, [pc, #464]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002110:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002114:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211c:	dd0b      	ble.n	8002136 <TrajectoryGenerationCalculation+0x6e>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 800211e:	4b70      	ldr	r3, [pc, #448]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	4a6f      	ldr	r2, [pc, #444]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002124:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 8002126:	4b6e      	ldr	r3, [pc, #440]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	4a6d      	ldr	r2, [pc, #436]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 800212c:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 800212e:	4b6c      	ldr	r3, [pc, #432]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002132:	4a6b      	ldr	r2, [pc, #428]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002134:	66d3      	str	r3, [r2, #108]	; 0x6c
	  }

	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 8002136:	4b6a      	ldr	r3, [pc, #424]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002138:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800213c:	4b68      	ldr	r3, [pc, #416]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 800213e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	d554      	bpl.n	80021f6 <TrajectoryGenerationCalculation+0x12e>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 800214c:	4b64      	ldr	r3, [pc, #400]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 800214e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8002152:	4b63      	ldr	r3, [pc, #396]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002154:	edd3 7a05 	vldr	s15, [r3, #20]
 8002158:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800215c:	ee16 0a90 	vmov	r0, s13
 8002160:	f7fe f99e 	bl	80004a0 <__aeabi_f2d>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	ec43 2b10 	vmov	d0, r2, r3
 800216c:	f007 fbf0 	bl	8009950 <sqrt>
 8002170:	ec53 2b10 	vmov	r2, r3, d0
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f7fe fcba 	bl	8000af0 <__aeabi_d2f>
 800217c:	4603      	mov	r3, r0
 800217e:	4a58      	ldr	r2, [pc, #352]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002180:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8002182:	4b57      	ldr	r3, [pc, #348]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002186:	4a56      	ldr	r2, [pc, #344]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002188:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 800218a:	4b55      	ldr	r3, [pc, #340]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 800218c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002190:	4b53      	ldr	r3, [pc, #332]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002192:	edd3 6a01 	vldr	s13, [r3, #4]
 8002196:	4b52      	ldr	r3, [pc, #328]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002198:	edd3 7a01 	vldr	s15, [r3, #4]
 800219c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a4:	ee17 0a90 	vmov	r0, s15
 80021a8:	f7fe f97a 	bl	80004a0 <__aeabi_f2d>
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021b4:	f7fe faf6 	bl	80007a4 <__aeabi_ddiv>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4614      	mov	r4, r2
 80021be:	461d      	mov	r5, r3
 80021c0:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f96b 	bl	80004a0 <__aeabi_f2d>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4620      	mov	r0, r4
 80021d0:	4629      	mov	r1, r5
 80021d2:	f7fe f807 	bl	80001e4 <__adddf3>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f7fe fc87 	bl	8000af0 <__aeabi_d2f>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4a3e      	ldr	r2, [pc, #248]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80021e6:	62d3      	str	r3, [r2, #44]	; 0x2c
		 TrjStruc.Mode = 0;
 80021e8:	4b3d      	ldr	r3, [pc, #244]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	671a      	str	r2, [r3, #112]	; 0x70
		 TrjStruc.Submode = 0;
 80021ee:	4b3c      	ldr	r3, [pc, #240]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	675a      	str	r2, [r3, #116]	; 0x74
 80021f4:	e063      	b.n	80022be <TrajectoryGenerationCalculation+0x1f6>
	  }
	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 80021f6:	4b3a      	ldr	r3, [pc, #232]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80021f8:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80021fc:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80021fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8002202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	db58      	blt.n	80022be <TrajectoryGenerationCalculation+0x1f6>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 800220c:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 800220e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8002212:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002214:	edd3 7a03 	vldr	s15, [r3, #12]
 8002218:	ee77 6a67 	vsub.f32	s13, s14, s15
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 800221e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002226:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002228:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 800222c:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 800222e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002230:	4a2b      	ldr	r2, [pc, #172]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002232:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 8002234:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002236:	ed93 7a07 	vldr	s14, [r3, #28]
 800223a:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 800223c:	edd3 6a00 	vldr	s13, [r3]
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	ee17 0a90 	vmov	r0, s15
 8002252:	f7fe f925 	bl	80004a0 <__aeabi_f2d>
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800225e:	f7fe faa1 	bl	80007a4 <__aeabi_ddiv>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4614      	mov	r4, r2
 8002268:	461d      	mov	r5, r3
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f916 	bl	80004a0 <__aeabi_f2d>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4620      	mov	r0, r4
 800227a:	4629      	mov	r1, r5
 800227c:	f7fd ffb2 	bl	80001e4 <__adddf3>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f7fe fc32 	bl	8000af0 <__aeabi_d2f>
 800228c:	4603      	mov	r3, r0
 800228e:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002290:	62d3      	str	r3, [r2, #44]	; 0x2c
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 8002294:	ed93 7a06 	vldr	s14, [r3, #24]
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 800229a:	edd3 7a02 	vldr	s15, [r3, #8]
 800229e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80022a4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80022a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80022ae:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  TrjStruc.Mode = 1;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	671a      	str	r2, [r3, #112]	; 0x70
		  TrjStruc.Submode = 0;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	675a      	str	r2, [r3, #116]	; 0x74
	  }
	 TrjStruc.Equation_Timestamp = micros();
 80022be:	f7ff fc55 	bl	8001b6c <micros>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4906      	ldr	r1, [pc, #24]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80022c8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 TrjStruc.Loop_Timestamp = micros();
 80022cc:	f7ff fc4e 	bl	8001b6c <micros>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4902      	ldr	r1, [pc, #8]	; (80022e0 <TrajectoryGenerationCalculation+0x218>)
 80022d6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80022da:	bf00      	nop
 80022dc:	bdb0      	pop	{r4, r5, r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000168 	.word	0x20000168
 80022e4:	00000000 	.word	0x00000000

080022e8 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 80022e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022ec:	b088      	sub	sp, #32
 80022ee:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 80022f0:	f7ff fc3c 	bl	8001b6c <micros>
 80022f4:	4ba6      	ldr	r3, [pc, #664]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 80022f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80022fa:	1a84      	subs	r4, r0, r2
 80022fc:	eb61 0503 	sbc.w	r5, r1, r3
 8002300:	4620      	mov	r0, r4
 8002302:	4629      	mov	r1, r5
 8002304:	f7fe f8ee 	bl	80004e4 <__aeabi_ul2d>
 8002308:	a39f      	add	r3, pc, #636	; (adr r3, 8002588 <TrajectoryGenerationProcess+0x2a0>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	f7fe fa49 	bl	80007a4 <__aeabi_ddiv>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	4b9d      	ldr	r3, [pc, #628]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 800231c:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38

	 switch (TrjStruc.Mode)
 8002320:	4b9b      	ldr	r3, [pc, #620]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	2b02      	cmp	r3, #2
 8002326:	f000 829d 	beq.w	8002864 <TrajectoryGenerationProcess+0x57c>
 800232a:	2b02      	cmp	r3, #2
 800232c:	f200 82a9 	bhi.w	8002882 <TrajectoryGenerationProcess+0x59a>
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <TrajectoryGenerationProcess+0x54>
 8002334:	2b01      	cmp	r3, #1
 8002336:	f000 8133 	beq.w	80025a0 <TrajectoryGenerationProcess+0x2b8>
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  TrjStruc.AngularVelocityDesire = 0;
			  break;
		  }
}
 800233a:	e2a2      	b.n	8002882 <TrajectoryGenerationProcess+0x59a>
			  if (TrjStruc.Submode == 0)
 800233c:	4b94      	ldr	r3, [pc, #592]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 800233e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002340:	2b00      	cmp	r3, #0
 8002342:	d16e      	bne.n	8002422 <TrajectoryGenerationProcess+0x13a>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002344:	4b92      	ldr	r3, [pc, #584]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe f8a9 	bl	80004a0 <__aeabi_f2d>
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	4b90      	ldr	r3, [pc, #576]	; (8002594 <TrajectoryGenerationProcess+0x2ac>)
 8002354:	f7fe f8fc 	bl	8000550 <__aeabi_dmul>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4614      	mov	r4, r2
 800235e:	461d      	mov	r5, r3
 8002360:	4b8b      	ldr	r3, [pc, #556]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 8002362:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002366:	4b8a      	ldr	r3, [pc, #552]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 8002368:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800236c:	f7fe f8f0 	bl	8000550 <__aeabi_dmul>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4620      	mov	r0, r4
 8002376:	4629      	mov	r1, r5
 8002378:	f7fe f8ea 	bl	8000550 <__aeabi_dmul>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4614      	mov	r4, r2
 8002382:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 8002384:	4b82      	ldr	r3, [pc, #520]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f889 	bl	80004a0 <__aeabi_f2d>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4620      	mov	r0, r4
 8002394:	4629      	mov	r1, r5
 8002396:	f7fd ff25 	bl	80001e4 <__adddf3>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	f7fe fba5 	bl	8000af0 <__aeabi_d2f>
 80023a6:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80023a8:	4a79      	ldr	r2, [pc, #484]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 80023aa:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 80023ac:	4b78      	ldr	r3, [pc, #480]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f875 	bl	80004a0 <__aeabi_f2d>
 80023b6:	4b76      	ldr	r3, [pc, #472]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 80023b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80023bc:	f7fe f8c8 	bl	8000550 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7fe fb92 	bl	8000af0 <__aeabi_d2f>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a70      	ldr	r2, [pc, #448]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 80023d0:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80023d2:	f7ff fbcb 	bl	8001b6c <micros>
 80023d6:	4b6e      	ldr	r3, [pc, #440]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 80023d8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80023dc:	1a84      	subs	r4, r0, r2
 80023de:	61bc      	str	r4, [r7, #24]
 80023e0:	eb61 0303 	sbc.w	r3, r1, r3
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023ea:	f7fe fc99 	bl	8000d20 <__aeabi_ul2f>
 80023ee:	ee06 0a90 	vmov	s13, r0
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 80023f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80023f8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002598 <TrajectoryGenerationProcess+0x2b0>
 80023fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002400:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002408:	da00      	bge.n	800240c <TrajectoryGenerationProcess+0x124>
			  break;
 800240a:	e237      	b.n	800287c <TrajectoryGenerationProcess+0x594>
					  TrjStruc.Equation_Timestamp = micros();
 800240c:	f7ff fbae 	bl	8001b6c <micros>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	495e      	ldr	r1, [pc, #376]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 8002416:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 800241a:	4b5d      	ldr	r3, [pc, #372]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 800241c:	2201      	movs	r2, #1
 800241e:	675a      	str	r2, [r3, #116]	; 0x74
			  break;
 8002420:	e22c      	b.n	800287c <TrajectoryGenerationProcess+0x594>
			  else if (TrjStruc.Submode == 1)
 8002422:	4b5b      	ldr	r3, [pc, #364]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 8002424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002426:	2b01      	cmp	r3, #1
 8002428:	f040 8228 	bne.w	800287c <TrajectoryGenerationProcess+0x594>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 800242c:	4b58      	ldr	r3, [pc, #352]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f835 	bl	80004a0 <__aeabi_f2d>
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	4b58      	ldr	r3, [pc, #352]	; (800259c <TrajectoryGenerationProcess+0x2b4>)
 800243c:	f7fe f888 	bl	8000550 <__aeabi_dmul>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4614      	mov	r4, r2
 8002446:	461d      	mov	r5, r3
 8002448:	4b51      	ldr	r3, [pc, #324]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 800244a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800244e:	4b50      	ldr	r3, [pc, #320]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 8002450:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002454:	f7fe f87c 	bl	8000550 <__aeabi_dmul>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4620      	mov	r0, r4
 800245e:	4629      	mov	r1, r5
 8002460:	f7fe f876 	bl	8000550 <__aeabi_dmul>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4614      	mov	r4, r2
 800246a:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 800246c:	4b48      	ldr	r3, [pc, #288]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 800246e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 8002474:	edd3 7a01 	vldr	s15, [r3, #4]
 8002478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247c:	ee17 0a90 	vmov	r0, s15
 8002480:	f7fe f80e 	bl	80004a0 <__aeabi_f2d>
 8002484:	4b42      	ldr	r3, [pc, #264]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 8002486:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800248a:	f7fe f861 	bl	8000550 <__aeabi_dmul>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4620      	mov	r0, r4
 8002494:	4629      	mov	r1, r5
 8002496:	f7fd fea5 	bl	80001e4 <__adddf3>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4614      	mov	r4, r2
 80024a0:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fd fffa 	bl	80004a0 <__aeabi_f2d>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4620      	mov	r0, r4
 80024b2:	4629      	mov	r1, r5
 80024b4:	f7fd fe96 	bl	80001e4 <__adddf3>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe fb16 	bl	8000af0 <__aeabi_d2f>
 80024c4:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80024c6:	4a32      	ldr	r2, [pc, #200]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 80024c8:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 80024ca:	4b31      	ldr	r3, [pc, #196]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fd ffe6 	bl	80004a0 <__aeabi_f2d>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	613a      	str	r2, [r7, #16]
 80024da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 80024e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80024e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ea:	f7fe f831 	bl	8000550 <__aeabi_dmul>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4614      	mov	r4, r2
 80024f4:	461d      	mov	r5, r3
						  	  	  	  	  	  	   (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular);
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 80024f8:	ed93 7a07 	vldr	s14, [r3, #28]
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 80024fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002506:	ee17 0a90 	vmov	r0, s15
 800250a:	f7fd ffc9 	bl	80004a0 <__aeabi_f2d>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
				  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 8002512:	4620      	mov	r0, r4
 8002514:	4629      	mov	r1, r5
 8002516:	f7fd fe65 	bl	80001e4 <__adddf3>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f7fe fae5 	bl	8000af0 <__aeabi_d2f>
 8002526:	4603      	mov	r3, r0
 8002528:	4a19      	ldr	r2, [pc, #100]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 800252a:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 800252c:	f7ff fb1e 	bl	8001b6c <micros>
 8002530:	4b17      	ldr	r3, [pc, #92]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 8002532:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002536:	1a84      	subs	r4, r0, r2
 8002538:	60bc      	str	r4, [r7, #8]
 800253a:	eb61 0303 	sbc.w	r3, r1, r3
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002544:	f7fe fbec 	bl	8000d20 <__aeabi_ul2f>
 8002548:	ee06 0a90 	vmov	s13, r0
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 800254e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002552:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002598 <TrajectoryGenerationProcess+0x2b0>
 8002556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	da00      	bge.n	8002566 <TrajectoryGenerationProcess+0x27e>
			  break;
 8002564:	e18a      	b.n	800287c <TrajectoryGenerationProcess+0x594>
					  TrjStruc.Equation_Timestamp = micros();
 8002566:	f7ff fb01 	bl	8001b6c <micros>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4908      	ldr	r1, [pc, #32]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 8002570:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 8002576:	2200      	movs	r2, #0
 8002578:	675a      	str	r2, [r3, #116]	; 0x74
					  TrjStruc.Mode = 2; ///Final Value Mode
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <TrajectoryGenerationProcess+0x2a8>)
 800257c:	2202      	movs	r2, #2
 800257e:	671a      	str	r2, [r3, #112]	; 0x70
			  break;
 8002580:	e17c      	b.n	800287c <TrajectoryGenerationProcess+0x594>
 8002582:	bf00      	nop
 8002584:	f3af 8000 	nop.w
 8002588:	00000000 	.word	0x00000000
 800258c:	412e8480 	.word	0x412e8480
 8002590:	20000168 	.word	0x20000168
 8002594:	3fe00000 	.word	0x3fe00000
 8002598:	49742400 	.word	0x49742400
 800259c:	bfe00000 	.word	0xbfe00000
			  if (TrjStruc.Submode == 0)
 80025a0:	4bba      	ldr	r3, [pc, #744]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80025a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d16e      	bne.n	8002686 <TrajectoryGenerationProcess+0x39e>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80025a8:	4bb8      	ldr	r3, [pc, #736]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ff77 	bl	80004a0 <__aeabi_f2d>
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	4bb6      	ldr	r3, [pc, #728]	; (8002890 <TrajectoryGenerationProcess+0x5a8>)
 80025b8:	f7fd ffca 	bl	8000550 <__aeabi_dmul>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4614      	mov	r4, r2
 80025c2:	461d      	mov	r5, r3
 80025c4:	4bb1      	ldr	r3, [pc, #708]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80025c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80025ca:	4bb0      	ldr	r3, [pc, #704]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80025cc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80025d0:	f7fd ffbe 	bl	8000550 <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4620      	mov	r0, r4
 80025da:	4629      	mov	r1, r5
 80025dc:	f7fd ffb8 	bl	8000550 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4614      	mov	r4, r2
 80025e6:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 80025e8:	4ba8      	ldr	r3, [pc, #672]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ff57 	bl	80004a0 <__aeabi_f2d>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	f7fd fdf3 	bl	80001e4 <__adddf3>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	f7fe fa73 	bl	8000af0 <__aeabi_d2f>
 800260a:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 800260c:	4a9f      	ldr	r2, [pc, #636]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 800260e:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 8002610:	4b9e      	ldr	r3, [pc, #632]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd ff43 	bl	80004a0 <__aeabi_f2d>
 800261a:	4b9c      	ldr	r3, [pc, #624]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 800261c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002620:	f7fd ff96 	bl	8000550 <__aeabi_dmul>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	f7fe fa60 	bl	8000af0 <__aeabi_d2f>
 8002630:	4603      	mov	r3, r0
 8002632:	4a96      	ldr	r2, [pc, #600]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002634:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002636:	f7ff fa99 	bl	8001b6c <micros>
 800263a:	4b94      	ldr	r3, [pc, #592]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 800263c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002640:	1a84      	subs	r4, r0, r2
 8002642:	603c      	str	r4, [r7, #0]
 8002644:	eb61 0303 	sbc.w	r3, r1, r3
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800264e:	f7fe fb67 	bl	8000d20 <__aeabi_ul2f>
 8002652:	ee06 0a90 	vmov	s13, r0
 8002656:	4b8d      	ldr	r3, [pc, #564]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8002894 <TrajectoryGenerationProcess+0x5ac>
 8002660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002664:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	da00      	bge.n	8002670 <TrajectoryGenerationProcess+0x388>
			  break;
 800266e:	e107      	b.n	8002880 <TrajectoryGenerationProcess+0x598>
					  TrjStruc.Equation_Timestamp = micros();
 8002670:	f7ff fa7c 	bl	8001b6c <micros>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4984      	ldr	r1, [pc, #528]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 800267a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 800267e:	4b83      	ldr	r3, [pc, #524]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002680:	2201      	movs	r2, #1
 8002682:	675a      	str	r2, [r3, #116]	; 0x74
			  break;
 8002684:	e0fc      	b.n	8002880 <TrajectoryGenerationProcess+0x598>
			  else if (TrjStruc.Submode == 1)
 8002686:	4b81      	ldr	r3, [pc, #516]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268a:	2b01      	cmp	r3, #1
 800268c:	d14c      	bne.n	8002728 <TrajectoryGenerationProcess+0x440>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 800268e:	4b7f      	ldr	r3, [pc, #508]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff04 	bl	80004a0 <__aeabi_f2d>
 8002698:	4b7c      	ldr	r3, [pc, #496]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 800269a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800269e:	f7fd ff57 	bl	8000550 <__aeabi_dmul>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4614      	mov	r4, r2
 80026a8:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 80026aa:	4b78      	ldr	r3, [pc, #480]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd fef6 	bl	80004a0 <__aeabi_f2d>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4620      	mov	r0, r4
 80026ba:	4629      	mov	r1, r5
 80026bc:	f7fd fd92 	bl	80001e4 <__adddf3>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f7fe fa12 	bl	8000af0 <__aeabi_d2f>
 80026cc:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80026ce:	4a6f      	ldr	r2, [pc, #444]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80026d0:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularVelocity;
 80026d2:	4b6e      	ldr	r3, [pc, #440]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	4a6d      	ldr	r2, [pc, #436]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80026d8:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 80026da:	f7ff fa47 	bl	8001b6c <micros>
 80026de:	4b6b      	ldr	r3, [pc, #428]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80026e0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80026e4:	ebb0 0a02 	subs.w	sl, r0, r2
 80026e8:	eb61 0b03 	sbc.w	fp, r1, r3
 80026ec:	4650      	mov	r0, sl
 80026ee:	4659      	mov	r1, fp
 80026f0:	f7fe fb16 	bl	8000d20 <__aeabi_ul2f>
 80026f4:	ee06 0a90 	vmov	s13, r0
 80026f8:	4b64      	ldr	r3, [pc, #400]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80026fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80026fe:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002894 <TrajectoryGenerationProcess+0x5ac>
 8002702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002706:	eef4 6ae7 	vcmpe.f32	s13, s15
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	da00      	bge.n	8002712 <TrajectoryGenerationProcess+0x42a>
			  break;
 8002710:	e0b6      	b.n	8002880 <TrajectoryGenerationProcess+0x598>
					  TrjStruc.Equation_Timestamp = micros();
 8002712:	f7ff fa2b 	bl	8001b6c <micros>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	495c      	ldr	r1, [pc, #368]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 800271c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 2;
 8002720:	4b5a      	ldr	r3, [pc, #360]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002722:	2202      	movs	r2, #2
 8002724:	675a      	str	r2, [r3, #116]	; 0x74
			  break;
 8002726:	e0ab      	b.n	8002880 <TrajectoryGenerationProcess+0x598>
			  else if (TrjStruc.Submode == 2)
 8002728:	4b58      	ldr	r3, [pc, #352]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272c:	2b02      	cmp	r3, #2
 800272e:	f040 80a7 	bne.w	8002880 <TrajectoryGenerationProcess+0x598>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002732:	4b56      	ldr	r3, [pc, #344]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd feb2 	bl	80004a0 <__aeabi_f2d>
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b55      	ldr	r3, [pc, #340]	; (8002898 <TrajectoryGenerationProcess+0x5b0>)
 8002742:	f7fd ff05 	bl	8000550 <__aeabi_dmul>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4614      	mov	r4, r2
 800274c:	461d      	mov	r5, r3
 800274e:	4b4f      	ldr	r3, [pc, #316]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002750:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002754:	4b4d      	ldr	r3, [pc, #308]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002756:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800275a:	f7fd fef9 	bl	8000550 <__aeabi_dmul>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4620      	mov	r0, r4
 8002764:	4629      	mov	r1, r5
 8002766:	f7fd fef3 	bl	8000550 <__aeabi_dmul>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4614      	mov	r4, r2
 8002770:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002772:	4b46      	ldr	r3, [pc, #280]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd fe92 	bl	80004a0 <__aeabi_f2d>
 800277c:	4b43      	ldr	r3, [pc, #268]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 800277e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002782:	f7fd fee5 	bl	8000550 <__aeabi_dmul>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4620      	mov	r0, r4
 800278c:	4629      	mov	r1, r5
 800278e:	f7fd fd29 	bl	80001e4 <__adddf3>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4614      	mov	r4, r2
 8002798:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 800279a:	4b3c      	ldr	r3, [pc, #240]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fe7e 	bl	80004a0 <__aeabi_f2d>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4620      	mov	r0, r4
 80027aa:	4629      	mov	r1, r5
 80027ac:	f7fd fd1a 	bl	80001e4 <__adddf3>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7fe f99a 	bl	8000af0 <__aeabi_d2f>
 80027bc:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80027be:	4a33      	ldr	r2, [pc, #204]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80027c0:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 80027c2:	4b32      	ldr	r3, [pc, #200]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80027c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80027c8:	eef1 7a67 	vneg.f32	s15, s15
 80027cc:	ee17 3a90 	vmov	r3, s15
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fe65 	bl	80004a0 <__aeabi_f2d>
 80027d6:	4b2d      	ldr	r3, [pc, #180]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80027d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80027dc:	f7fd feb8 	bl	8000550 <__aeabi_dmul>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4614      	mov	r4, r2
 80027e6:	461d      	mov	r5, r3
						                           + ( TrjStruc.AngularVelocity );
 80027e8:	4b28      	ldr	r3, [pc, #160]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fe57 	bl	80004a0 <__aeabi_f2d>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4620      	mov	r0, r4
 80027f8:	4629      	mov	r1, r5
 80027fa:	f7fd fcf3 	bl	80001e4 <__adddf3>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	f7fe f973 	bl	8000af0 <__aeabi_d2f>
 800280a:	4603      	mov	r3, r0
				  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 800280c:	4a1f      	ldr	r2, [pc, #124]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 800280e:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002810:	f7ff f9ac 	bl	8001b6c <micros>
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002816:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800281a:	ebb0 0802 	subs.w	r8, r0, r2
 800281e:	eb61 0903 	sbc.w	r9, r1, r3
 8002822:	4640      	mov	r0, r8
 8002824:	4649      	mov	r1, r9
 8002826:	f7fe fa7b 	bl	8000d20 <__aeabi_ul2f>
 800282a:	ee06 0a90 	vmov	s13, r0
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002894 <TrajectoryGenerationProcess+0x5ac>
 8002838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002844:	da00      	bge.n	8002848 <TrajectoryGenerationProcess+0x560>
			  break;
 8002846:	e01b      	b.n	8002880 <TrajectoryGenerationProcess+0x598>
					  TrjStruc.Equation_Timestamp = micros();
 8002848:	f7ff f990 	bl	8001b6c <micros>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	490e      	ldr	r1, [pc, #56]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002852:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002858:	2200      	movs	r2, #0
 800285a:	675a      	str	r2, [r3, #116]	; 0x74
					  TrjStruc.Mode = 2; ///Final Value Mode
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 800285e:	2202      	movs	r2, #2
 8002860:	671a      	str	r2, [r3, #112]	; 0x70
			  break;
 8002862:	e00d      	b.n	8002880 <TrajectoryGenerationProcess+0x598>
			  Moving_Link_Task_Flag = 1;
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <TrajectoryGenerationProcess+0x5b4>)
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 800286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286e:	4a07      	ldr	r2, [pc, #28]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002870:	6213      	str	r3, [r2, #32]
			  TrjStruc.AngularVelocityDesire = 0;
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <TrajectoryGenerationProcess+0x5a4>)
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	625a      	str	r2, [r3, #36]	; 0x24
			  break;
 800287a:	e002      	b.n	8002882 <TrajectoryGenerationProcess+0x59a>
			  break;
 800287c:	bf00      	nop
 800287e:	e000      	b.n	8002882 <TrajectoryGenerationProcess+0x59a>
			  break;
 8002880:	bf00      	nop
}
 8002882:	bf00      	nop
 8002884:	3720      	adds	r7, #32
 8002886:	46bd      	mov	sp, r7
 8002888:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800288c:	20000168 	.word	0x20000168
 8002890:	3fe00000 	.word	0x3fe00000
 8002894:	49742400 	.word	0x49742400
 8002898:	bfe00000 	.word	0xbfe00000
 800289c:	200000f8 	.word	0x200000f8

080028a0 <PIDController2in1>:

void PIDController2in1()
{
 80028a0:	b5b0      	push	{r4, r5, r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 80028a4:	4b83      	ldr	r3, [pc, #524]	; (8002ab4 <PIDController2in1+0x214>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a83      	ldr	r2, [pc, #524]	; (8002ab8 <PIDController2in1+0x218>)
 80028aa:	6153      	str	r3, [r2, #20]
    PositionPIDController.NowError = PositionPIDController.OutputDesire - PositionPIDController.OutputFeedback;
 80028ac:	4b82      	ldr	r3, [pc, #520]	; (8002ab8 <PIDController2in1+0x218>)
 80028ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80028b2:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <PIDController2in1+0x218>)
 80028b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80028b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028bc:	4b7e      	ldr	r3, [pc, #504]	; (8002ab8 <PIDController2in1+0x218>)
 80028be:	edc3 7a08 	vstr	s15, [r3, #32]
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 80028c2:	4b7d      	ldr	r3, [pc, #500]	; (8002ab8 <PIDController2in1+0x218>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fdea 	bl	80004a0 <__aeabi_f2d>
 80028cc:	4604      	mov	r4, r0
 80028ce:	460d      	mov	r5, r1
 80028d0:	4b79      	ldr	r3, [pc, #484]	; (8002ab8 <PIDController2in1+0x218>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fd fde3 	bl	80004a0 <__aeabi_f2d>
 80028da:	4b77      	ldr	r3, [pc, #476]	; (8002ab8 <PIDController2in1+0x218>)
 80028dc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80028e0:	f7fd fe36 	bl	8000550 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4620      	mov	r0, r4
 80028ea:	4629      	mov	r1, r5
 80028ec:	f7fd fc7a 	bl	80001e4 <__adddf3>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	f7fe f8fa 	bl	8000af0 <__aeabi_d2f>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4a6e      	ldr	r2, [pc, #440]	; (8002ab8 <PIDController2in1+0x218>)
 8002900:	61d3      	str	r3, [r2, #28]
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002902:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <PIDController2in1+0x218>)
 8002904:	ed93 7a00 	vldr	s14, [r3]
 8002908:	4b6b      	ldr	r3, [pc, #428]	; (8002ab8 <PIDController2in1+0x218>)
 800290a:	edd3 7a08 	vldr	s15, [r3, #32]
 800290e:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 8002912:	4b69      	ldr	r3, [pc, #420]	; (8002ab8 <PIDController2in1+0x218>)
 8002914:	edd3 6a01 	vldr	s13, [r3, #4]
 8002918:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <PIDController2in1+0x218>)
 800291a:	edd3 7a07 	vldr	s15, [r3, #28]
 800291e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002926:	ee17 0a90 	vmov	r0, s15
 800292a:	f7fd fdb9 	bl	80004a0 <__aeabi_f2d>
 800292e:	4604      	mov	r4, r0
 8002930:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime)
 8002932:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <PIDController2in1+0x218>)
 8002934:	ed93 7a02 	vldr	s14, [r3, #8]
 8002938:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <PIDController2in1+0x218>)
 800293a:	edd3 6a08 	vldr	s13, [r3, #32]
 800293e:	4b5e      	ldr	r3, [pc, #376]	; (8002ab8 <PIDController2in1+0x218>)
 8002940:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002944:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294c:	ee17 0a90 	vmov	r0, s15
 8002950:	f7fd fda6 	bl	80004a0 <__aeabi_f2d>
 8002954:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <PIDController2in1+0x218>)
 8002956:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800295a:	f7fd ff23 	bl	80007a4 <__aeabi_ddiv>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4620      	mov	r0, r4
 8002964:	4629      	mov	r1, r5
 8002966:	f7fd fc3d 	bl	80001e4 <__adddf3>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4614      	mov	r4, r2
 8002970:	461d      	mov	r5, r3
					  +(PositionPIDController.offSet);
 8002972:	4b51      	ldr	r3, [pc, #324]	; (8002ab8 <PIDController2in1+0x218>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fd92 	bl	80004a0 <__aeabi_f2d>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4620      	mov	r0, r4
 8002982:	4629      	mov	r1, r5
 8002984:	f7fd fc2e 	bl	80001e4 <__adddf3>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4610      	mov	r0, r2
 800298e:	4619      	mov	r1, r3
 8002990:	f7fe f8ae 	bl	8000af0 <__aeabi_d2f>
 8002994:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002996:	4a48      	ldr	r2, [pc, #288]	; (8002ab8 <PIDController2in1+0x218>)
 8002998:	6113      	str	r3, [r2, #16]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <PIDController2in1+0x218>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4a46      	ldr	r2, [pc, #280]	; (8002ab8 <PIDController2in1+0x218>)
 80029a0:	6253      	str	r3, [r2, #36]	; 0x24

    VelocityPIDController.OutputDesire = PositionPIDController.ControllerOutput + TrjStruc.AngularVelocityDesire;
 80029a2:	4b45      	ldr	r3, [pc, #276]	; (8002ab8 <PIDController2in1+0x218>)
 80029a4:	ed93 7a04 	vldr	s14, [r3, #16]
 80029a8:	4b42      	ldr	r3, [pc, #264]	; (8002ab4 <PIDController2in1+0x214>)
 80029aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b2:	4b42      	ldr	r3, [pc, #264]	; (8002abc <PIDController2in1+0x21c>)
 80029b4:	edc3 7a05 	vstr	s15, [r3, #20]
//    VelocityPIDController.OutputDesire = PositionPIDController.ControllerOutput;
    VelocityPIDController.NowError = VelocityPIDController.OutputDesire - VelocityPIDController.OutputFeedback;
 80029b8:	4b40      	ldr	r3, [pc, #256]	; (8002abc <PIDController2in1+0x21c>)
 80029ba:	ed93 7a05 	vldr	s14, [r3, #20]
 80029be:	4b3f      	ldr	r3, [pc, #252]	; (8002abc <PIDController2in1+0x21c>)
 80029c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80029c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c8:	4b3c      	ldr	r3, [pc, #240]	; (8002abc <PIDController2in1+0x21c>)
 80029ca:	edc3 7a08 	vstr	s15, [r3, #32]
    VelocityPIDController.Integral_Value += VelocityPIDController.NowError*VelocityPIDController.SamplingTime;
 80029ce:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <PIDController2in1+0x21c>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fd64 	bl	80004a0 <__aeabi_f2d>
 80029d8:	4604      	mov	r4, r0
 80029da:	460d      	mov	r5, r1
 80029dc:	4b37      	ldr	r3, [pc, #220]	; (8002abc <PIDController2in1+0x21c>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fd5d 	bl	80004a0 <__aeabi_f2d>
 80029e6:	4b35      	ldr	r3, [pc, #212]	; (8002abc <PIDController2in1+0x21c>)
 80029e8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80029ec:	f7fd fdb0 	bl	8000550 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4620      	mov	r0, r4
 80029f6:	4629      	mov	r1, r5
 80029f8:	f7fd fbf4 	bl	80001e4 <__adddf3>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	f7fe f874 	bl	8000af0 <__aeabi_d2f>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4a2c      	ldr	r2, [pc, #176]	; (8002abc <PIDController2in1+0x21c>)
 8002a0c:	61d3      	str	r3, [r2, #28]
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <PIDController2in1+0x21c>)
 8002a10:	ed93 7a00 	vldr	s14, [r3]
 8002a14:	4b29      	ldr	r3, [pc, #164]	; (8002abc <PIDController2in1+0x21c>)
 8002a16:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
 8002a1e:	4b27      	ldr	r3, [pc, #156]	; (8002abc <PIDController2in1+0x21c>)
 8002a20:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <PIDController2in1+0x21c>)
 8002a26:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a32:	ee17 0a90 	vmov	r0, s15
 8002a36:	f7fd fd33 	bl	80004a0 <__aeabi_f2d>
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	460d      	mov	r5, r1
					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime)
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <PIDController2in1+0x21c>)
 8002a40:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <PIDController2in1+0x21c>)
 8002a46:	edd3 6a08 	vldr	s13, [r3, #32]
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <PIDController2in1+0x21c>)
 8002a4c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a58:	ee17 0a90 	vmov	r0, s15
 8002a5c:	f7fd fd20 	bl	80004a0 <__aeabi_f2d>
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <PIDController2in1+0x21c>)
 8002a62:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002a66:	f7fd fe9d 	bl	80007a4 <__aeabi_ddiv>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4620      	mov	r0, r4
 8002a70:	4629      	mov	r1, r5
 8002a72:	f7fd fbb7 	bl	80001e4 <__adddf3>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4614      	mov	r4, r2
 8002a7c:	461d      	mov	r5, r3
					  +(VelocityPIDController.offSet);
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <PIDController2in1+0x21c>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd0c 	bl	80004a0 <__aeabi_f2d>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	4629      	mov	r1, r5
 8002a90:	f7fd fba8 	bl	80001e4 <__adddf3>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f7fe f828 	bl	8000af0 <__aeabi_d2f>
 8002aa0:	4603      	mov	r3, r0
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 8002aa2:	4a06      	ldr	r2, [pc, #24]	; (8002abc <PIDController2in1+0x21c>)
 8002aa4:	6113      	str	r3, [r2, #16]
    VelocityPIDController.PreviousError = VelocityPIDController.NowError;
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <PIDController2in1+0x21c>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	4a04      	ldr	r2, [pc, #16]	; (8002abc <PIDController2in1+0x21c>)
 8002aac:	6253      	str	r3, [r2, #36]	; 0x24

}
 8002aae:	bf00      	nop
 8002ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000168 	.word	0x20000168
 8002ab8:	20000108 	.word	0x20000108
 8002abc:	20000138 	.word	0x20000138

08002ac0 <UARTInit>:



///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <UARTInit+0x4c>)
 8002aca:	88db      	ldrh	r3, [r3, #6]
 8002acc:	4619      	mov	r1, r3
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f006 fe6e 	bl	80097b0 <calloc>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <UARTInit+0x4c>)
 8002ade:	889b      	ldrh	r3, [r3, #4]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f006 fe64 	bl	80097b0 <calloc>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461a      	mov	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	81da      	strh	r2, [r3, #14]
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200000b8 	.word	0x200000b8

08002b10 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6919      	ldr	r1, [r3, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	88db      	ldrh	r3, [r3, #6]
 8002b24:	461a      	mov	r2, r3
 8002b26:	f005 ffbf 	bl	8008aa8 <HAL_UART_Receive_DMA>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	88db      	ldrh	r3, [r3, #6]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	1ad3      	subs	r3, r2, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8002b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b64:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8a9b      	ldrh	r3, [r3, #20]
 8002b6a:	461c      	mov	r4, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ffe0 	bl	8002b32 <UARTGetRxHead>
 8002b72:	4603      	mov	r3, r0
 8002b74:	429c      	cmp	r4, r3
 8002b76:	d013      	beq.n	8002ba0 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	8a92      	ldrh	r2, [r2, #20]
 8002b80:	4413      	add	r3, r2
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	8a9b      	ldrh	r3, [r3, #20]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	88d2      	ldrh	r2, [r2, #6]
 8002b90:	fb93 f1f2 	sdiv	r1, r3, r2
 8002b94:	fb02 f201 	mul.w	r2, r2, r1
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8002ba0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}

08002bac <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d13d      	bne.n	8002c3e <UARTTxDumpBuffer+0x92>
 8002bc2:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <UARTTxDumpBuffer+0x9c>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d139      	bne.n	8002c3e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8002bca:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <UARTTxDumpBuffer+0x9c>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	89da      	ldrh	r2, [r3, #14]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	899b      	ldrh	r3, [r3, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d02d      	beq.n	8002c38 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	89da      	ldrh	r2, [r3, #14]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d906      	bls.n	8002bf6 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	89da      	ldrh	r2, [r3, #14]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	e005      	b.n	8002c02 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	889a      	ldrh	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	8992      	ldrh	r2, [r2, #12]
 8002c10:	4413      	add	r3, r2
 8002c12:	89fa      	ldrh	r2, [r7, #14]
 8002c14:	4619      	mov	r1, r3
 8002c16:	f005 fedb 	bl	80089d0 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	899b      	ldrh	r3, [r3, #12]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	89fb      	ldrh	r3, [r7, #14]
 8002c22:	4413      	add	r3, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	8892      	ldrh	r2, [r2, #4]
 8002c28:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c2c:	fb02 f201 	mul.w	r2, r2, r1
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <UARTTxDumpBuffer+0x9c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
	}
}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000200 	.word	0x20000200

08002c4c <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	889b      	ldrh	r3, [r3, #4]
 8002c5e:	88fa      	ldrh	r2, [r7, #6]
 8002c60:	4293      	cmp	r3, r2
 8002c62:	bf28      	it	cs
 8002c64:	4613      	movcs	r3, r2
 8002c66:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002c68:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	889b      	ldrh	r3, [r3, #4]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	89db      	ldrh	r3, [r3, #14]
 8002c74:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002c76:	4293      	cmp	r3, r2
 8002c78:	bfa8      	it	ge
 8002c7a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8002c7c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	89d2      	ldrh	r2, [r2, #14]
 8002c86:	4413      	add	r3, r2
 8002c88:	8aba      	ldrh	r2, [r7, #20]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f006 fdc1 	bl	8009814 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	89db      	ldrh	r3, [r3, #14]
 8002c96:	461a      	mov	r2, r3
 8002c98:	8afb      	ldrh	r3, [r7, #22]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	8892      	ldrh	r2, [r2, #4]
 8002ca0:	fb93 f1f2 	sdiv	r1, r3, r2
 8002ca4:	fb02 f201 	mul.w	r2, r2, r1
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8002cb0:	8afa      	ldrh	r2, [r7, #22]
 8002cb2:	8abb      	ldrh	r3, [r7, #20]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d00a      	beq.n	8002cce <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6898      	ldr	r0, [r3, #8]
 8002cbc:	8abb      	ldrh	r3, [r7, #20]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8002cc2:	8afa      	ldrh	r2, [r7, #22]
 8002cc4:	8abb      	ldrh	r3, [r7, #20]
 8002cc6:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f006 fda3 	bl	8009814 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff ff6c 	bl	8002bac <UARTTxDumpBuffer>

}
 8002cd4:	bf00      	nop
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 8002ce4:	f247 5358 	movw	r3, #30040	; 0x7558
 8002ce8:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 8002cea:	f107 030c 	add.w	r3, r7, #12
 8002cee:	2202      	movs	r2, #2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ffaa 	bl	8002c4c <UARTTxWrite>
	}
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 8002d08:	f646 6346 	movw	r3, #28230	; 0x6e46
 8002d0c:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 8002d0e:	f107 030c 	add.w	r3, r7, #12
 8002d12:	2202      	movs	r2, #2
 8002d14:	4619      	mov	r1, r3
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ff98 	bl	8002c4c <UARTTxWrite>
	}
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	0000      	movs	r0, r0
	...

08002d28 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 8002d28:	b5b0      	push	{r4, r5, r7, lr}
 8002d2a:	b08e      	sub	sp, #56	; 0x38
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	6039      	str	r1, [r7, #0]
 8002d32:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 8002d34:	4b8b      	ldr	r3, [pc, #556]	; (8002f64 <Munmunbot_Protocol+0x23c>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	f200 8408 	bhi.w	800354e <Munmunbot_Protocol+0x826>
 8002d3e:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <Munmunbot_Protocol+0x1c>)
 8002d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d44:	08002d5d 	.word	0x08002d5d
 8002d48:	08002e11 	.word	0x08002e11
 8002d4c:	08002e53 	.word	0x08002e53
 8002d50:	08002ea1 	.word	0x08002ea1
 8002d54:	08002ec5 	.word	0x08002ec5
 8002d58:	08002f85 	.word	0x08002f85
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 8002d5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d60:	111b      	asrs	r3, r3, #4
 8002d62:	b21b      	sxth	r3, r3
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	2b09      	cmp	r3, #9
 8002d6c:	f040 83ec 	bne.w	8003548 <Munmunbot_Protocol+0x820>
			{
				CheckSum = dataIn;
 8002d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d74:	4a7c      	ldr	r2, [pc, #496]	; (8002f68 <Munmunbot_Protocol+0x240>)
 8002d76:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4b7a      	ldr	r3, [pc, #488]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002d84:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 8002d86:	4b79      	ldr	r3, [pc, #484]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b07      	cmp	r3, #7
 8002d8c:	d103      	bne.n	8002d96 <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 8002d8e:	4b75      	ldr	r3, [pc, #468]	; (8002f64 <Munmunbot_Protocol+0x23c>)
 8002d90:	2203      	movs	r2, #3
 8002d92:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 8002d94:	e3d8      	b.n	8003548 <Munmunbot_Protocol+0x820>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 8002d96:	4b75      	ldr	r3, [pc, #468]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d00b      	beq.n	8002db6 <Munmunbot_Protocol+0x8e>
 8002d9e:	4b73      	ldr	r3, [pc, #460]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d007      	beq.n	8002db6 <Munmunbot_Protocol+0x8e>
 8002da6:	4b71      	ldr	r3, [pc, #452]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d003      	beq.n	8002db6 <Munmunbot_Protocol+0x8e>
 8002dae:	4b6f      	ldr	r3, [pc, #444]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d103      	bne.n	8002dbe <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 8002db6:	4b6b      	ldr	r3, [pc, #428]	; (8002f64 <Munmunbot_Protocol+0x23c>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
			break;
 8002dbc:	e3c4      	b.n	8003548 <Munmunbot_Protocol+0x820>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8002dbe:	4b6b      	ldr	r3, [pc, #428]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d020      	beq.n	8002e08 <Munmunbot_Protocol+0xe0>
 8002dc6:	4b69      	ldr	r3, [pc, #420]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d01c      	beq.n	8002e08 <Munmunbot_Protocol+0xe0>
 8002dce:	4b67      	ldr	r3, [pc, #412]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d018      	beq.n	8002e08 <Munmunbot_Protocol+0xe0>
 8002dd6:	4b65      	ldr	r3, [pc, #404]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b09      	cmp	r3, #9
 8002ddc:	d014      	beq.n	8002e08 <Munmunbot_Protocol+0xe0>
 8002dde:	4b63      	ldr	r3, [pc, #396]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b0a      	cmp	r3, #10
 8002de4:	d010      	beq.n	8002e08 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8002de6:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8002dea:	2b0b      	cmp	r3, #11
 8002dec:	d00c      	beq.n	8002e08 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8002dee:	4b5f      	ldr	r3, [pc, #380]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d008      	beq.n	8002e08 <Munmunbot_Protocol+0xe0>
 8002df6:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b0d      	cmp	r3, #13
 8002dfc:	d004      	beq.n	8002e08 <Munmunbot_Protocol+0xe0>
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	; (8002f6c <Munmunbot_Protocol+0x244>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b0e      	cmp	r3, #14
 8002e04:	f040 83a0 	bne.w	8003548 <Munmunbot_Protocol+0x820>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 8002e08:	4b56      	ldr	r3, [pc, #344]	; (8002f64 <Munmunbot_Protocol+0x23c>)
 8002e0a:	2205      	movs	r2, #5
 8002e0c:	701a      	strb	r2, [r3, #0]
			break;
 8002e0e:	e39b      	b.n	8003548 <Munmunbot_Protocol+0x820>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 8002e10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e14:	4b54      	ldr	r3, [pc, #336]	; (8002f68 <Munmunbot_Protocol+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4413      	add	r3, r2
 8002e1a:	4a53      	ldr	r2, [pc, #332]	; (8002f68 <Munmunbot_Protocol+0x240>)
 8002e1c:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b52      	ldr	r3, [pc, #328]	; (8002f70 <Munmunbot_Protocol+0x248>)
 8002e26:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <Munmunbot_Protocol+0x24c>)
 8002e34:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 8002e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e3a:	111b      	asrs	r3, r3, #4
 8002e3c:	b21b      	sxth	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <Munmunbot_Protocol+0x24c>)
 8002e48:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 8002e4a:	4b46      	ldr	r3, [pc, #280]	; (8002f64 <Munmunbot_Protocol+0x23c>)
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	701a      	strb	r2, [r3, #0]

			 break;
 8002e50:	e37d      	b.n	800354e <Munmunbot_Protocol+0x826>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 8002e52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e56:	4b44      	ldr	r3, [pc, #272]	; (8002f68 <Munmunbot_Protocol+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a42      	ldr	r2, [pc, #264]	; (8002f68 <Munmunbot_Protocol+0x240>)
 8002e5e:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	4b42      	ldr	r3, [pc, #264]	; (8002f70 <Munmunbot_Protocol+0x248>)
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b3f      	ldr	r3, [pc, #252]	; (8002f70 <Munmunbot_Protocol+0x248>)
 8002e74:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	4b3c      	ldr	r3, [pc, #240]	; (8002f74 <Munmunbot_Protocol+0x24c>)
 8002e82:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 8002e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e88:	111b      	asrs	r3, r3, #4
 8002e8a:	b21b      	sxth	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	4b37      	ldr	r3, [pc, #220]	; (8002f74 <Munmunbot_Protocol+0x24c>)
 8002e96:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 8002e98:	4b32      	ldr	r3, [pc, #200]	; (8002f64 <Munmunbot_Protocol+0x23c>)
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	701a      	strb	r2, [r3, #0]
			 break;
 8002e9e:	e356      	b.n	800354e <Munmunbot_Protocol+0x826>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 8002ea0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ea4:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <Munmunbot_Protocol+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4a2f      	ldr	r2, [pc, #188]	; (8002f68 <Munmunbot_Protocol+0x240>)
 8002eac:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 8002eae:	88fa      	ldrh	r2, [r7, #6]
 8002eb0:	4b31      	ldr	r3, [pc, #196]	; (8002f78 <Munmunbot_Protocol+0x250>)
 8002eb2:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 8002eb4:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <Munmunbot_Protocol+0x250>)
 8002eb6:	881a      	ldrh	r2, [r3, #0]
 8002eb8:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <Munmunbot_Protocol+0x254>)
 8002eba:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 8002ebc:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <Munmunbot_Protocol+0x23c>)
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	701a      	strb	r2, [r3, #0]

		   break;
 8002ec2:	e344      	b.n	800354e <Munmunbot_Protocol+0x826>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 8002ec4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ec8:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <Munmunbot_Protocol+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4413      	add	r3, r2
 8002ece:	4a26      	ldr	r2, [pc, #152]	; (8002f68 <Munmunbot_Protocol+0x240>)
 8002ed0:	6013      	str	r3, [r2, #0]
				if (n_station >= 2)
 8002ed2:	4b29      	ldr	r3, [pc, #164]	; (8002f78 <Munmunbot_Protocol+0x250>)
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d927      	bls.n	8002f2a <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	4a28      	ldr	r2, [pc, #160]	; (8002f80 <Munmunbot_Protocol+0x258>)
 8002ee0:	7812      	ldrb	r2, [r2, #0]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	b2d9      	uxtb	r1, r3
 8002ee8:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <Munmunbot_Protocol+0x24c>)
 8002eea:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002eec:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <Munmunbot_Protocol+0x258>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <Munmunbot_Protocol+0x258>)
 8002ef6:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 8002ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002efc:	111b      	asrs	r3, r3, #4
 8002efe:	b21b      	sxth	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <Munmunbot_Protocol+0x258>)
 8002f04:	7812      	ldrb	r2, [r2, #0]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	b2d9      	uxtb	r1, r3
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <Munmunbot_Protocol+0x24c>)
 8002f0e:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <Munmunbot_Protocol+0x258>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	3301      	adds	r3, #1
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <Munmunbot_Protocol+0x258>)
 8002f1a:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 8002f1c:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <Munmunbot_Protocol+0x250>)
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	3b02      	subs	r3, #2
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <Munmunbot_Protocol+0x250>)
 8002f26:	801a      	strh	r2, [r3, #0]
 8002f28:	e012      	b.n	8002f50 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <Munmunbot_Protocol+0x250>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d10e      	bne.n	8002f50 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <Munmunbot_Protocol+0x258>)
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	b2d9      	uxtb	r1, r3
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <Munmunbot_Protocol+0x24c>)
 8002f42:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <Munmunbot_Protocol+0x250>)
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <Munmunbot_Protocol+0x250>)
 8002f4e:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <Munmunbot_Protocol+0x250>)
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f040 82f9 	bne.w	800354c <Munmunbot_Protocol+0x824>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 8002f5a:	4b02      	ldr	r3, [pc, #8]	; (8002f64 <Munmunbot_Protocol+0x23c>)
 8002f5c:	2205      	movs	r2, #5
 8002f5e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002f60:	e2f4      	b.n	800354c <Munmunbot_Protocol+0x824>
 8002f62:	bf00      	nop
 8002f64:	200000d8 	.word	0x200000d8
 8002f68:	20000204 	.word	0x20000204
 8002f6c:	20000208 	.word	0x20000208
 8002f70:	2000020a 	.word	0x2000020a
 8002f74:	2000020c 	.word	0x2000020c
 8002f78:	2000030c 	.word	0x2000030c
 8002f7c:	2000030e 	.word	0x2000030e
 8002f80:	20000310 	.word	0x20000310

			case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 8002f84:	4bb0      	ldr	r3, [pc, #704]	; (8003248 <Munmunbot_Protocol+0x520>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	4aae      	ldr	r2, [pc, #696]	; (8003248 <Munmunbot_Protocol+0x520>)
 8002f8e:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 8002f90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f94:	4bac      	ldr	r3, [pc, #688]	; (8003248 <Munmunbot_Protocol+0x520>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	f040 82c1 	bne.w	8003520 <Munmunbot_Protocol+0x7f8>
				{

					switch (ProtocolMode)
 8002f9e:	4bab      	ldr	r3, [pc, #684]	; (800324c <Munmunbot_Protocol+0x524>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	2b0d      	cmp	r3, #13
 8002fa6:	f200 82bc 	bhi.w	8003522 <Munmunbot_Protocol+0x7fa>
 8002faa:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <Munmunbot_Protocol+0x288>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	08002fe9 	.word	0x08002fe9
 8002fb4:	0800305d 	.word	0x0800305d
 8002fb8:	08003073 	.word	0x08003073
 8002fbc:	08003089 	.word	0x08003089
 8002fc0:	080030d9 	.word	0x080030d9
 8002fc4:	080030f7 	.word	0x080030f7
 8002fc8:	0800311b 	.word	0x0800311b
 8002fcc:	08003165 	.word	0x08003165
 8002fd0:	0800318f 	.word	0x0800318f
 8002fd4:	0800328d 	.word	0x0800328d
 8002fd8:	0800339f 	.word	0x0800339f
 8002fdc:	080034d9 	.word	0x080034d9
 8002fe0:	080034ef 	.word	0x080034ef
 8002fe4:	08003505 	.word	0x08003505
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 8002fe8:	2391      	movs	r3, #145	; 0x91
 8002fea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 8002fee:	4b98      	ldr	r3, [pc, #608]	; (8003250 <Munmunbot_Protocol+0x528>)
 8002ff0:	785b      	ldrb	r3, [r3, #1]
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	b25a      	sxtb	r2, r3
 8002ff6:	4b96      	ldr	r3, [pc, #600]	; (8003250 <Munmunbot_Protocol+0x528>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	b25b      	sxtb	r3, r3
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	b25b      	sxtb	r3, r3
 8003000:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8003002:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 8003006:	4b92      	ldr	r3, [pc, #584]	; (8003250 <Munmunbot_Protocol+0x528>)
 8003008:	78db      	ldrb	r3, [r3, #3]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	b25a      	sxtb	r2, r3
 800300e:	4b90      	ldr	r3, [pc, #576]	; (8003250 <Munmunbot_Protocol+0x528>)
 8003010:	789b      	ldrb	r3, [r3, #2]
 8003012:	b25b      	sxtb	r3, r3
 8003014:	4313      	orrs	r3, r2
 8003016:	b25b      	sxtb	r3, r3
 8003018:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 800301a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800301e:	2300      	movs	r3, #0
 8003020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003024:	2358      	movs	r3, #88	; 0x58
 8003026:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800302a:	2375      	movs	r3, #117	; 0x75
 800302c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 8003030:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003034:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003038:	4413      	add	r3, r2
 800303a:	b2da      	uxtb	r2, r3
 800303c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003040:	4413      	add	r3, r2
 8003042:	b2db      	uxtb	r3, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						UARTTxWrite(uart, temp, 6);
 800304c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003050:	2206      	movs	r2, #6
 8003052:	4619      	mov	r1, r3
 8003054:	6838      	ldr	r0, [r7, #0]
 8003056:	f7ff fdf9 	bl	8002c4c <UARTTxWrite>
						}
						break;
 800305a:	e262      	b.n	8003522 <Munmunbot_Protocol+0x7fa>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 800305c:	4b7d      	ldr	r3, [pc, #500]	; (8003254 <Munmunbot_Protocol+0x52c>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <Munmunbot_Protocol+0x342>
						{
							Munmunbot_State = STATE_Idle;
 8003064:	4b7b      	ldr	r3, [pc, #492]	; (8003254 <Munmunbot_Protocol+0x52c>)
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 800306a:	6838      	ldr	r0, [r7, #0]
 800306c:	f7ff fe36 	bl	8002cdc <ACK1Return>
						break;
 8003070:	e257      	b.n	8003522 <Munmunbot_Protocol+0x7fa>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003072:	4b78      	ldr	r3, [pc, #480]	; (8003254 <Munmunbot_Protocol+0x52c>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d102      	bne.n	8003080 <Munmunbot_Protocol+0x358>
						{
							Munmunbot_State = STATE_Disconnected;
 800307a:	4b76      	ldr	r3, [pc, #472]	; (8003254 <Munmunbot_Protocol+0x52c>)
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003080:	6838      	ldr	r0, [r7, #0]
 8003082:	f7ff fe2b 	bl	8002cdc <ACK1Return>
						break;
 8003086:	e24c      	b.n	8003522 <Munmunbot_Protocol+0x7fa>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003088:	4b72      	ldr	r3, [pc, #456]	; (8003254 <Munmunbot_Protocol+0x52c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d11f      	bne.n	80030d0 <Munmunbot_Protocol+0x3a8>
						{
							CUSSStruc.RPMp = (Data_HAck*10.0)/255.0;
 8003090:	4b71      	ldr	r3, [pc, #452]	; (8003258 <Munmunbot_Protocol+0x530>)
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd f9f1 	bl	800047c <__aeabi_i2d>
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	4b6f      	ldr	r3, [pc, #444]	; (800325c <Munmunbot_Protocol+0x534>)
 80030a0:	f7fd fa56 	bl	8000550 <__aeabi_dmul>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4610      	mov	r0, r2
 80030aa:	4619      	mov	r1, r3
 80030ac:	a364      	add	r3, pc, #400	; (adr r3, 8003240 <Munmunbot_Protocol+0x518>)
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	f7fd fb77 	bl	80007a4 <__aeabi_ddiv>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	f7fd fd17 	bl	8000af0 <__aeabi_d2f>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4a66      	ldr	r2, [pc, #408]	; (8003260 <Munmunbot_Protocol+0x538>)
 80030c6:	6093      	str	r3, [r2, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 80030c8:	4965      	ldr	r1, [pc, #404]	; (8003260 <Munmunbot_Protocol+0x538>)
 80030ca:	4866      	ldr	r0, [pc, #408]	; (8003264 <Munmunbot_Protocol+0x53c>)
 80030cc:	f7fe fe68 	bl	8001da0 <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 80030d0:	6838      	ldr	r0, [r7, #0]
 80030d2:	f7ff fe03 	bl	8002cdc <ACK1Return>
						break;
 80030d6:	e224      	b.n	8003522 <Munmunbot_Protocol+0x7fa>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80030d8:	4b5e      	ldr	r3, [pc, #376]	; (8003254 <Munmunbot_Protocol+0x52c>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d106      	bne.n	80030ee <Munmunbot_Protocol+0x3c6>
						{
							Angularpos_InputNumber = Data_HAck;
 80030e0:	4b5d      	ldr	r3, [pc, #372]	; (8003258 <Munmunbot_Protocol+0x530>)
 80030e2:	881a      	ldrh	r2, [r3, #0]
 80030e4:	4b60      	ldr	r3, [pc, #384]	; (8003268 <Munmunbot_Protocol+0x540>)
 80030e6:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 80030e8:	4b60      	ldr	r3, [pc, #384]	; (800326c <Munmunbot_Protocol+0x544>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80030ee:	6838      	ldr	r0, [r7, #0]
 80030f0:	f7ff fdf4 	bl	8002cdc <ACK1Return>
						break;
 80030f4:	e215      	b.n	8003522 <Munmunbot_Protocol+0x7fa>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80030f6:	4b57      	ldr	r3, [pc, #348]	; (8003254 <Munmunbot_Protocol+0x52c>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d109      	bne.n	8003112 <Munmunbot_Protocol+0x3ea>
						{
//							Angularpos_InputArray[0] = parameter[0];
							Angularpos_InputArray[0] = parameter[2];    //150 0x00 0x0A Checksum
 80030fe:	4b54      	ldr	r3, [pc, #336]	; (8003250 <Munmunbot_Protocol+0x528>)
 8003100:	789a      	ldrb	r2, [r3, #2]
 8003102:	4b5b      	ldr	r3, [pc, #364]	; (8003270 <Munmunbot_Protocol+0x548>)
 8003104:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 8003106:	4b59      	ldr	r3, [pc, #356]	; (800326c <Munmunbot_Protocol+0x544>)
 8003108:	2202      	movs	r2, #2
 800310a:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 800310c:	4b59      	ldr	r3, [pc, #356]	; (8003274 <Munmunbot_Protocol+0x54c>)
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003112:	6838      	ldr	r0, [r7, #0]
 8003114:	f7ff fde2 	bl	8002cdc <ACK1Return>
						break;
 8003118:	e203      	b.n	8003522 <Munmunbot_Protocol+0x7fa>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 800311a:	4b4e      	ldr	r3, [pc, #312]	; (8003254 <Munmunbot_Protocol+0x52c>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d11c      	bne.n	800315c <Munmunbot_Protocol+0x434>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 8003122:	4b52      	ldr	r3, [pc, #328]	; (800326c <Munmunbot_Protocol+0x544>)
 8003124:	2203      	movs	r2, #3
 8003126:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8003128:	2300      	movs	r3, #0
 800312a:	637b      	str	r3, [r7, #52]	; 0x34
 800312c:	e00b      	b.n	8003146 <Munmunbot_Protocol+0x41e>
							{
								Angularpos_InputArray[i] = parameter[i];
 800312e:	4a48      	ldr	r2, [pc, #288]	; (8003250 <Munmunbot_Protocol+0x528>)
 8003130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003132:	4413      	add	r3, r2
 8003134:	7819      	ldrb	r1, [r3, #0]
 8003136:	4a4e      	ldr	r2, [pc, #312]	; (8003270 <Munmunbot_Protocol+0x548>)
 8003138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313a:	4413      	add	r3, r2
 800313c:	460a      	mov	r2, r1
 800313e:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8003140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003142:	3301      	adds	r3, #1
 8003144:	637b      	str	r3, [r7, #52]	; 0x34
 8003146:	4b4c      	ldr	r3, [pc, #304]	; (8003278 <Munmunbot_Protocol+0x550>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314e:	4293      	cmp	r3, r2
 8003150:	dbed      	blt.n	800312e <Munmunbot_Protocol+0x406>
							}
							NumberOfStationToGo = n_station_mem;
 8003152:	4b49      	ldr	r3, [pc, #292]	; (8003278 <Munmunbot_Protocol+0x550>)
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b46      	ldr	r3, [pc, #280]	; (8003274 <Munmunbot_Protocol+0x54c>)
 800315a:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 800315c:	6838      	ldr	r0, [r7, #0]
 800315e:	f7ff fdbd 	bl	8002cdc <ACK1Return>
						break;
 8003162:	e1de      	b.n	8003522 <Munmunbot_Protocol+0x7fa>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 8003164:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <Munmunbot_Protocol+0x52c>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d106      	bne.n	800317a <Munmunbot_Protocol+0x452>
						{
							Munmunbot_State = STATE_PrepareDATA;
 800316c:	4b39      	ldr	r3, [pc, #228]	; (8003254 <Munmunbot_Protocol+0x52c>)
 800316e:	2202      	movs	r2, #2
 8003170:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 8003172:	6838      	ldr	r0, [r7, #0]
 8003174:	f7ff fdb2 	bl	8002cdc <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};  ///ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 8003178:	e1d3      	b.n	8003522 <Munmunbot_Protocol+0x7fa>
								uint8_t temp[] =
 800317a:	4b40      	ldr	r3, [pc, #256]	; (800327c <Munmunbot_Protocol+0x554>)
 800317c:	623b      	str	r3, [r7, #32]
								UARTTxWrite(uart, temp, 4);
 800317e:	f107 0320 	add.w	r3, r7, #32
 8003182:	2204      	movs	r2, #4
 8003184:	4619      	mov	r1, r3
 8003186:	6838      	ldr	r0, [r7, #0]
 8003188:	f7ff fd60 	bl	8002c4c <UARTTxWrite>
						break;
 800318c:	e1c9      	b.n	8003522 <Munmunbot_Protocol+0x7fa>

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 800318e:	4a3c      	ldr	r2, [pc, #240]	; (8003280 <Munmunbot_Protocol+0x558>)
 8003190:	f107 0318 	add.w	r3, r7, #24
 8003194:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003198:	6018      	str	r0, [r3, #0]
 800319a:	3304      	adds	r3, #4
 800319c:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0}; ///ACK1 + Mode 9
							uint8_t Shift = 2;
 800319e:	2302      	movs	r3, #2
 80031a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
							DataForReturn = Current_Station&(0xff);
 80031a4:	4b37      	ldr	r3, [pc, #220]	; (8003284 <Munmunbot_Protocol+0x55c>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	4b37      	ldr	r3, [pc, #220]	; (8003288 <Munmunbot_Protocol+0x560>)
 80031ac:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 80031ae:	4b36      	ldr	r3, [pc, #216]	; (8003288 <Munmunbot_Protocol+0x560>)
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80031ba:	3301      	adds	r3, #1
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80031c2:	440b      	add	r3, r1
 80031c4:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[2+Shift] = (DataForReturn)&(0xff);
 80031c8:	4b2f      	ldr	r3, [pc, #188]	; (8003288 <Munmunbot_Protocol+0x560>)
 80031ca:	881a      	ldrh	r2, [r3, #0]
 80031cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80031d0:	3302      	adds	r3, #2
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80031d8:	440b      	add	r3, r1
 80031da:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 80031de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80031e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031e6:	4413      	add	r3, r2
 80031e8:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 80031ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80031f0:	3301      	adds	r3, #1
 80031f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80031f6:	440b      	add	r3, r1
 80031f8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031fc:	4413      	add	r3, r2
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003204:	3302      	adds	r3, #2
 8003206:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800320a:	440b      	add	r3, r1
 800320c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003210:	4413      	add	r3, r2
 8003212:	b2da      	uxtb	r2, r3
 8003214:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003218:	3303      	adds	r3, #3
 800321a:	43d2      	mvns	r2, r2
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003222:	440b      	add	r3, r1
 8003224:	f803 2c20 	strb.w	r2, [r3, #-32]
							UARTTxWrite(uart, temp, 4+Shift);
 8003228:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800322c:	b29b      	uxth	r3, r3
 800322e:	3304      	adds	r3, #4
 8003230:	b29a      	uxth	r2, r3
 8003232:	f107 0318 	add.w	r3, r7, #24
 8003236:	4619      	mov	r1, r3
 8003238:	6838      	ldr	r0, [r7, #0]
 800323a:	f7ff fd07 	bl	8002c4c <UARTTxWrite>
						}

						break;
 800323e:	e170      	b.n	8003522 <Munmunbot_Protocol+0x7fa>
 8003240:	00000000 	.word	0x00000000
 8003244:	406fe000 	.word	0x406fe000
 8003248:	20000204 	.word	0x20000204
 800324c:	20000208 	.word	0x20000208
 8003250:	2000020c 	.word	0x2000020c
 8003254:	200000d9 	.word	0x200000d9
 8003258:	2000020a 	.word	0x2000020a
 800325c:	40240000 	.word	0x40240000
 8003260:	200001e0 	.word	0x200001e0
 8003264:	20000168 	.word	0x20000168
 8003268:	200000ec 	.word	0x200000ec
 800326c:	200000ee 	.word	0x200000ee
 8003270:	200000dc 	.word	0x200000dc
 8003274:	200000f0 	.word	0x200000f0
 8003278:	2000030e 	.word	0x2000030e
 800327c:	6e467558 	.word	0x6e467558
 8003280:	08009b38 	.word	0x08009b38
 8003284:	200000ef 	.word	0x200000ef
 8003288:	20000312 	.word	0x20000312

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 800328c:	4ab8      	ldr	r2, [pc, #736]	; (8003570 <Munmunbot_Protocol+0x848>)
 800328e:	f107 0310 	add.w	r3, r7, #16
 8003292:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003296:	6018      	str	r0, [r3, #0]
 8003298:	3304      	adds	r3, #4
 800329a:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,154, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 800329c:	2302      	movs	r3, #2
 800329e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
							DataForReturn = ((((int) htim1.Instance->CNT) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
 80032a2:	4bb4      	ldr	r3, [pc, #720]	; (8003574 <Munmunbot_Protocol+0x84c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	4ab3      	ldr	r2, [pc, #716]	; (8003578 <Munmunbot_Protocol+0x850>)
 80032aa:	6852      	ldr	r2, [r2, #4]
 80032ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80032b0:	fb02 f201 	mul.w	r2, r2, r1
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd f8cf 	bl	800045c <__aeabi_ui2d>
 80032be:	a3a6      	add	r3, pc, #664	; (adr r3, 8003558 <Munmunbot_Protocol+0x830>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f7fd f944 	bl	8000550 <__aeabi_dmul>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	a3a3      	add	r3, pc, #652	; (adr r3, 8003560 <Munmunbot_Protocol+0x838>)
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f7fd f93b 	bl	8000550 <__aeabi_dmul>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4614      	mov	r4, r2
 80032e0:	461d      	mov	r5, r3
 80032e2:	4ba5      	ldr	r3, [pc, #660]	; (8003578 <Munmunbot_Protocol+0x850>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd f8b8 	bl	800045c <__aeabi_ui2d>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4620      	mov	r0, r4
 80032f2:	4629      	mov	r1, r5
 80032f4:	f7fd fa56 	bl	80007a4 <__aeabi_ddiv>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	f7fd fbd6 	bl	8000ab0 <__aeabi_d2uiz>
 8003304:	4603      	mov	r3, r0
 8003306:	b29a      	uxth	r2, r3
 8003308:	4b9c      	ldr	r3, [pc, #624]	; (800357c <Munmunbot_Protocol+0x854>)
 800330a:	801a      	strh	r2, [r3, #0]
//							DataForReturn = ((((int) PositionPIDController.OutputFeedback) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 800330c:	4b9b      	ldr	r3, [pc, #620]	; (800357c <Munmunbot_Protocol+0x854>)
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	b29a      	uxth	r2, r3
 8003314:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003318:	3301      	adds	r3, #1
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003320:	440b      	add	r3, r1
 8003322:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8003326:	4b95      	ldr	r3, [pc, #596]	; (800357c <Munmunbot_Protocol+0x854>)
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800332e:	3302      	adds	r3, #2
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003336:	440b      	add	r3, r1
 8003338:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 800333c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003340:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003344:	4413      	add	r3, r2
 8003346:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 800334a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800334e:	3301      	adds	r3, #1
 8003350:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003354:	440b      	add	r3, r1
 8003356:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800335a:	4413      	add	r3, r2
 800335c:	b2da      	uxtb	r2, r3
 800335e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003362:	3302      	adds	r3, #2
 8003364:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003368:	440b      	add	r3, r1
 800336a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800336e:	4413      	add	r3, r2
 8003370:	b2da      	uxtb	r2, r3
 8003372:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003376:	3303      	adds	r3, #3
 8003378:	43d2      	mvns	r2, r2
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003380:	440b      	add	r3, r1
 8003382:	f803 2c28 	strb.w	r2, [r3, #-40]
							UARTTxWrite(uart, temp, 4+Shift);
 8003386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800338a:	b29b      	uxth	r3, r3
 800338c:	3304      	adds	r3, #4
 800338e:	b29a      	uxth	r2, r3
 8003390:	f107 0310 	add.w	r3, r7, #16
 8003394:	4619      	mov	r1, r3
 8003396:	6838      	ldr	r0, [r7, #0]
 8003398:	f7ff fc58 	bl	8002c4c <UARTTxWrite>
						}
						break;
 800339c:	e0c1      	b.n	8003522 <Munmunbot_Protocol+0x7fa>

					case 11: /// Return Angular Velocity Max  ##Complete##
						{
							uint8_t temp[] =
 800339e:	4a78      	ldr	r2, [pc, #480]	; (8003580 <Munmunbot_Protocol+0x858>)
 80033a0:	f107 0308 	add.w	r3, r7, #8
 80033a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033a8:	6018      	str	r0, [r3, #0]
 80033aa:	3304      	adds	r3, #4
 80033ac:	8019      	strh	r1, [r3, #0]
							{ 0x58, 0x75, 155, 0b0,  0b0, 0b0 };
							uint8_t Shift = 2;
 80033ae:	2302      	movs	r3, #2
 80033b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
//							float temp2  = ( TrjStruc.AngularVelocityMax_Setting*60.0 )/( ( float ) CUSSStruc.PPRxQEI );  ///pps to RPM
							float temp3 = ( abs( VelocityPIDController.OutputFeedback )*60.0 )/( ( float ) CUSSStruc.PPRxQEI );
 80033b4:	4b73      	ldr	r3, [pc, #460]	; (8003584 <Munmunbot_Protocol+0x85c>)
 80033b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80033ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033be:	ee17 3a90 	vmov	r3, s15
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bfb8      	it	lt
 80033c6:	425b      	neglt	r3, r3
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd f857 	bl	800047c <__aeabi_i2d>
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	4b6d      	ldr	r3, [pc, #436]	; (8003588 <Munmunbot_Protocol+0x860>)
 80033d4:	f7fd f8bc 	bl	8000550 <__aeabi_dmul>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4614      	mov	r4, r2
 80033de:	461d      	mov	r5, r3
 80033e0:	4b65      	ldr	r3, [pc, #404]	; (8003578 <Munmunbot_Protocol+0x850>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	ee07 3a90 	vmov	s15, r3
 80033e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ec:	ee17 0a90 	vmov	r0, s15
 80033f0:	f7fd f856 	bl	80004a0 <__aeabi_f2d>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4620      	mov	r0, r4
 80033fa:	4629      	mov	r1, r5
 80033fc:	f7fd f9d2 	bl	80007a4 <__aeabi_ddiv>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	f7fd fb72 	bl	8000af0 <__aeabi_d2f>
 800340c:	4603      	mov	r3, r0
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
							DataForReturn = ( temp3 * 255.0 )/10.0;
 8003410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003412:	f7fd f845 	bl	80004a0 <__aeabi_f2d>
 8003416:	a354      	add	r3, pc, #336	; (adr r3, 8003568 <Munmunbot_Protocol+0x840>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f7fd f898 	bl	8000550 <__aeabi_dmul>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	4b57      	ldr	r3, [pc, #348]	; (800358c <Munmunbot_Protocol+0x864>)
 800342e:	f7fd f9b9 	bl	80007a4 <__aeabi_ddiv>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	f7fd fb39 	bl	8000ab0 <__aeabi_d2uiz>
 800343e:	4603      	mov	r3, r0
 8003440:	b29a      	uxth	r2, r3
 8003442:	4b4e      	ldr	r3, [pc, #312]	; (800357c <Munmunbot_Protocol+0x854>)
 8003444:	801a      	strh	r2, [r3, #0]
							temp[ 1+Shift ] = ( DataForReturn>>8 )&( 0xff );
 8003446:	4b4d      	ldr	r3, [pc, #308]	; (800357c <Munmunbot_Protocol+0x854>)
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	0a1b      	lsrs	r3, r3, #8
 800344c:	b29a      	uxth	r2, r3
 800344e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003452:	3301      	adds	r3, #1
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800345a:	440b      	add	r3, r1
 800345c:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 2+Shift ] = ( DataForReturn )&( 0xff );
 8003460:	4b46      	ldr	r3, [pc, #280]	; (800357c <Munmunbot_Protocol+0x854>)
 8003462:	881a      	ldrh	r2, [r3, #0]
 8003464:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003468:	3302      	adds	r3, #2
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003470:	440b      	add	r3, r1
 8003472:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 3+Shift ] = ~( temp[ 0+Shift ]+temp[ 1+Shift ]+temp[ 2+Shift ] );
 8003476:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800347a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800347e:	4413      	add	r3, r2
 8003480:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8003484:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003488:	3301      	adds	r3, #1
 800348a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800348e:	440b      	add	r3, r1
 8003490:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003494:	4413      	add	r3, r2
 8003496:	b2da      	uxtb	r2, r3
 8003498:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800349c:	3302      	adds	r3, #2
 800349e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80034a2:	440b      	add	r3, r1
 80034a4:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80034a8:	4413      	add	r3, r2
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034b0:	3303      	adds	r3, #3
 80034b2:	43d2      	mvns	r2, r2
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80034ba:	440b      	add	r3, r1
 80034bc:	f803 2c30 	strb.w	r2, [r3, #-48]
							UARTTxWrite( uart, temp, 4+Shift );
 80034c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3304      	adds	r3, #4
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	f107 0308 	add.w	r3, r7, #8
 80034ce:	4619      	mov	r1, r3
 80034d0:	6838      	ldr	r0, [r7, #0]
 80034d2:	f7ff fbbb 	bl	8002c4c <UARTTxWrite>
						}
						break;
 80034d6:	e024      	b.n	8003522 <Munmunbot_Protocol+0x7fa>

					case 12:  //Enable Gripper
						if (Munmunbot_State == STATE_Idle)
 80034d8:	4b2d      	ldr	r3, [pc, #180]	; (8003590 <Munmunbot_Protocol+0x868>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d102      	bne.n	80034e6 <Munmunbot_Protocol+0x7be>
						{
							GripperEnable = 1;
 80034e0:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <Munmunbot_Protocol+0x86c>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80034e6:	6838      	ldr	r0, [r7, #0]
 80034e8:	f7ff fbf8 	bl	8002cdc <ACK1Return>
						break;
 80034ec:	e019      	b.n	8003522 <Munmunbot_Protocol+0x7fa>
					case 13: //Disable Gripper
						if (Munmunbot_State == STATE_Idle)
 80034ee:	4b28      	ldr	r3, [pc, #160]	; (8003590 <Munmunbot_Protocol+0x868>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d102      	bne.n	80034fc <Munmunbot_Protocol+0x7d4>
						{
							GripperEnable = 0;
 80034f6:	4b27      	ldr	r3, [pc, #156]	; (8003594 <Munmunbot_Protocol+0x86c>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80034fc:	6838      	ldr	r0, [r7, #0]
 80034fe:	f7ff fbed 	bl	8002cdc <ACK1Return>
						break;
 8003502:	e00e      	b.n	8003522 <Munmunbot_Protocol+0x7fa>

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003504:	4b22      	ldr	r3, [pc, #136]	; (8003590 <Munmunbot_Protocol+0x868>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d105      	bne.n	8003518 <Munmunbot_Protocol+0x7f0>
						{
							Munmunbot_State = STATE_SetHome;
 800350c:	4b20      	ldr	r3, [pc, #128]	; (8003590 <Munmunbot_Protocol+0x868>)
 800350e:	2206      	movs	r2, #6
 8003510:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 8003512:	4b21      	ldr	r3, [pc, #132]	; (8003598 <Munmunbot_Protocol+0x870>)
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003518:	6838      	ldr	r0, [r7, #0]
 800351a:	f7ff fbdf 	bl	8002cdc <ACK1Return>
						break;
 800351e:	e000      	b.n	8003522 <Munmunbot_Protocol+0x7fa>
				    }
			   }
 8003520:	bf00      	nop
			n_station = 0;
 8003522:	4b1e      	ldr	r3, [pc, #120]	; (800359c <Munmunbot_Protocol+0x874>)
 8003524:	2200      	movs	r2, #0
 8003526:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 8003528:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <Munmunbot_Protocol+0x878>)
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <Munmunbot_Protocol+0x87c>)
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 8003534:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <Munmunbot_Protocol+0x880>)
 8003536:	2200      	movs	r2, #0
 8003538:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 800353a:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <Munmunbot_Protocol+0x884>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
			Munmunbot_Protocol_State = PP_STARTandMode;
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <Munmunbot_Protocol+0x888>)
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
			break;
 8003546:	e002      	b.n	800354e <Munmunbot_Protocol+0x826>
			break;
 8003548:	bf00      	nop
 800354a:	e000      	b.n	800354e <Munmunbot_Protocol+0x826>
				break;
 800354c:	bf00      	nop
			}
	}
}
 800354e:	bf00      	nop
 8003550:	3738      	adds	r7, #56	; 0x38
 8003552:	46bd      	mov	sp, r7
 8003554:	bdb0      	pop	{r4, r5, r7, pc}
 8003556:	bf00      	nop
 8003558:	9ba5e354 	.word	0x9ba5e354
 800355c:	400920c4 	.word	0x400920c4
 8003560:	00000000 	.word	0x00000000
 8003564:	40c38800 	.word	0x40c38800
 8003568:	00000000 	.word	0x00000000
 800356c:	406fe000 	.word	0x406fe000
 8003570:	08009b40 	.word	0x08009b40
 8003574:	2000047c 	.word	0x2000047c
 8003578:	200001e0 	.word	0x200001e0
 800357c:	20000312 	.word	0x20000312
 8003580:	08009b48 	.word	0x08009b48
 8003584:	20000138 	.word	0x20000138
 8003588:	404e0000 	.word	0x404e0000
 800358c:	40240000 	.word	0x40240000
 8003590:	200000d9 	.word	0x200000d9
 8003594:	20000014 	.word	0x20000014
 8003598:	200000da 	.word	0x200000da
 800359c:	2000030c 	.word	0x2000030c
 80035a0:	20000208 	.word	0x20000208
 80035a4:	20000310 	.word	0x20000310
 80035a8:	2000020a 	.word	0x2000020a
 80035ac:	20000204 	.word	0x20000204
 80035b0:	200000d8 	.word	0x200000d8

080035b4 <PID_Reset>:

void PID_Reset()
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
	PositionPIDController.PreviousError = 0;
 80035b8:	4b20      	ldr	r3, [pc, #128]	; (800363c <PID_Reset+0x88>)
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	625a      	str	r2, [r3, #36]	; 0x24
	PositionPIDController.Integral_Value = 0;
 80035c0:	4b1e      	ldr	r3, [pc, #120]	; (800363c <PID_Reset+0x88>)
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	61da      	str	r2, [r3, #28]
	PositionPIDController.ControllerOutput = 0;
 80035c8:	4b1c      	ldr	r3, [pc, #112]	; (800363c <PID_Reset+0x88>)
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	611a      	str	r2, [r3, #16]
	PositionPIDController.NowError = 0;
 80035d0:	4b1a      	ldr	r3, [pc, #104]	; (800363c <PID_Reset+0x88>)
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	621a      	str	r2, [r3, #32]
	PositionPIDController.OutputDesire = htim1.Instance->CNT;
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <PID_Reset+0x8c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <PID_Reset+0x88>)
 80035e8:	edc3 7a05 	vstr	s15, [r3, #20]
	PositionPIDController.OutputFeedback = htim1.Instance->CNT;
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <PID_Reset+0x8c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <PID_Reset+0x88>)
 80035fc:	edc3 7a06 	vstr	s15, [r3, #24]

	VelocityPIDController.PreviousError = 0;
 8003600:	4b10      	ldr	r3, [pc, #64]	; (8003644 <PID_Reset+0x90>)
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	625a      	str	r2, [r3, #36]	; 0x24
	VelocityPIDController.Integral_Value = 0;
 8003608:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <PID_Reset+0x90>)
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	61da      	str	r2, [r3, #28]
	VelocityPIDController.ControllerOutput = 0;
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <PID_Reset+0x90>)
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
	VelocityPIDController.NowError = 0;
 8003618:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <PID_Reset+0x90>)
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	621a      	str	r2, [r3, #32]
	VelocityPIDController.OutputDesire = 0;
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <PID_Reset+0x90>)
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	615a      	str	r2, [r3, #20]
	VelocityPIDController.OutputFeedback = 0;
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <PID_Reset+0x90>)
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	619a      	str	r2, [r3, #24]
}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000108 	.word	0x20000108
 8003640:	2000047c 	.word	0x2000047c
 8003644:	20000138 	.word	0x20000138

08003648 <LAMP_ON>:

void LAMP_ON(uint8_t lampnumber)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
	if (lampnumber == 1)
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d111      	bne.n	800367c <LAMP_ON+0x34>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003658:	2200      	movs	r2, #0
 800365a:	2104      	movs	r1, #4
 800365c:	481e      	ldr	r0, [pc, #120]	; (80036d8 <LAMP_ON+0x90>)
 800365e:	f001 fcd9 	bl	8005014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8003662:	2201      	movs	r2, #1
 8003664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003668:	481b      	ldr	r0, [pc, #108]	; (80036d8 <LAMP_ON+0x90>)
 800366a:	f001 fcd3 	bl	8005014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800366e:	2201      	movs	r2, #1
 8003670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003674:	4819      	ldr	r0, [pc, #100]	; (80036dc <LAMP_ON+0x94>)
 8003676:	f001 fccd 	bl	8005014 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
	}
}
 800367a:	e028      	b.n	80036ce <LAMP_ON+0x86>
	else if (lampnumber == 2)
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d111      	bne.n	80036a6 <LAMP_ON+0x5e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003682:	2201      	movs	r2, #1
 8003684:	2104      	movs	r1, #4
 8003686:	4814      	ldr	r0, [pc, #80]	; (80036d8 <LAMP_ON+0x90>)
 8003688:	f001 fcc4 	bl	8005014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003692:	4811      	ldr	r0, [pc, #68]	; (80036d8 <LAMP_ON+0x90>)
 8003694:	f001 fcbe 	bl	8005014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003698:	2201      	movs	r2, #1
 800369a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800369e:	480f      	ldr	r0, [pc, #60]	; (80036dc <LAMP_ON+0x94>)
 80036a0:	f001 fcb8 	bl	8005014 <HAL_GPIO_WritePin>
}
 80036a4:	e013      	b.n	80036ce <LAMP_ON+0x86>
	else if (lampnumber == 3)
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d110      	bne.n	80036ce <LAMP_ON+0x86>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80036ac:	2201      	movs	r2, #1
 80036ae:	2104      	movs	r1, #4
 80036b0:	4809      	ldr	r0, [pc, #36]	; (80036d8 <LAMP_ON+0x90>)
 80036b2:	f001 fcaf 	bl	8005014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80036b6:	2201      	movs	r2, #1
 80036b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036bc:	4806      	ldr	r0, [pc, #24]	; (80036d8 <LAMP_ON+0x90>)
 80036be:	f001 fca9 	bl	8005014 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80036c2:	2200      	movs	r2, #0
 80036c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036c8:	4804      	ldr	r0, [pc, #16]	; (80036dc <LAMP_ON+0x94>)
 80036ca:	f001 fca3 	bl	8005014 <HAL_GPIO_WritePin>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40020400 	.word	0x40020400
 80036dc:	40020000 	.word	0x40020000

080036e0 <Emergency_switch_trigger>:

void Emergency_switch_trigger()
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1)
 80036e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036e8:	481e      	ldr	r0, [pc, #120]	; (8003764 <Emergency_switch_trigger+0x84>)
 80036ea:	f001 fc7b 	bl	8004fe4 <HAL_GPIO_ReadPin>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d134      	bne.n	800375e <Emergency_switch_trigger+0x7e>
	{
		// Reset State Machine All
		Munmunbot_State = STATE_Disconnected;
 80036f4:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <Emergency_switch_trigger+0x88>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
		MovingLinkMode = LMM_Not_Set;
 80036fa:	4b1c      	ldr	r3, [pc, #112]	; (800376c <Emergency_switch_trigger+0x8c>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
		SethomeMode = SetHomeState_0;
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <Emergency_switch_trigger+0x90>)
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
		TrjStruc.Mode = 0;
 8003706:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <Emergency_switch_trigger+0x94>)
 8003708:	2200      	movs	r2, #0
 800370a:	671a      	str	r2, [r3, #112]	; 0x70
		TrjStruc.Submode = 0;
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <Emergency_switch_trigger+0x94>)
 800370e:	2200      	movs	r2, #0
 8003710:	675a      	str	r2, [r3, #116]	; 0x74

		// Send back ACK to User-interface
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003712:	4b15      	ldr	r3, [pc, #84]	; (8003768 <Emergency_switch_trigger+0x88>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b03      	cmp	r3, #3
 8003718:	d00b      	beq.n	8003732 <Emergency_switch_trigger+0x52>
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <Emergency_switch_trigger+0x88>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d007      	beq.n	8003732 <Emergency_switch_trigger+0x52>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8003722:	4b11      	ldr	r3, [pc, #68]	; (8003768 <Emergency_switch_trigger+0x88>)
 8003724:	781b      	ldrb	r3, [r3, #0]
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003726:	2b04      	cmp	r3, #4
 8003728:	d003      	beq.n	8003732 <Emergency_switch_trigger+0x52>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 800372a:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <Emergency_switch_trigger+0x88>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b05      	cmp	r3, #5
 8003730:	d102      	bne.n	8003738 <Emergency_switch_trigger+0x58>
		{
			ACK2Return(&UART2);
 8003732:	4811      	ldr	r0, [pc, #68]	; (8003778 <Emergency_switch_trigger+0x98>)
 8003734:	f7ff fae4 	bl	8002d00 <ACK2Return>
		}

		// Reset variable
		NumberOfStationToGo = 0;
 8003738:	4b10      	ldr	r3, [pc, #64]	; (800377c <Emergency_switch_trigger+0x9c>)
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]
		NumberOfStationPTR = 0;
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <Emergency_switch_trigger+0xa0>)
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
		Moving_Link_Task_Flag = 0;
 8003744:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <Emergency_switch_trigger+0xa4>)
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]

		// Stop the Motor
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800374a:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <Emergency_switch_trigger+0xa8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8003752:	4b0e      	ldr	r3, [pc, #56]	; (800378c <Emergency_switch_trigger+0xac>)
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	4a07      	ldr	r2, [pc, #28]	; (8003774 <Emergency_switch_trigger+0x94>)
 8003758:	6653      	str	r3, [r2, #100]	; 0x64

		PID_Reset();
 800375a:	f7ff ff2b 	bl	80035b4 <PID_Reset>
	}
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40020400 	.word	0x40020400
 8003768:	200000d9 	.word	0x200000d9
 800376c:	200000ee 	.word	0x200000ee
 8003770:	200000da 	.word	0x200000da
 8003774:	20000168 	.word	0x20000168
 8003778:	200000b8 	.word	0x200000b8
 800377c:	200000f0 	.word	0x200000f0
 8003780:	200000f1 	.word	0x200000f1
 8003784:	200000f8 	.word	0x200000f8
 8003788:	200003d4 	.word	0x200003d4
 800378c:	20000108 	.word	0x20000108

08003790 <Controlling_the_LINK>:

void Controlling_the_LINK()
{
 8003790:	b5b0      	push	{r4, r5, r7, lr}
 8003792:	af00      	add	r7, sp, #0
	  // GEN Trajectory
	  TrajectoryGenerationProcess();
 8003794:	f7fe fda8 	bl	80022e8 <TrajectoryGenerationProcess>
	  EncoderVelocityAndPosition_Update();
 8003798:	f7fe f904 	bl	80019a4 <EncoderVelocityAndPosition_Update>
	  PIDController2in1();  ///use only position
 800379c:	f7ff f880 	bl	80028a0 <PIDController2in1>
//	  Plant_input = PositionPIDController.ControllerOutput;
	  Plant_input = VelocityPIDController.ControllerOutput;
 80037a0:	4b29      	ldr	r3, [pc, #164]	; (8003848 <Controlling_the_LINK+0xb8>)
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	4a29      	ldr	r2, [pc, #164]	; (800384c <Controlling_the_LINK+0xbc>)
 80037a6:	6013      	str	r3, [r2, #0]

	  if (Plant_input >= 0) /// Setting DIR
 80037a8:	4b28      	ldr	r3, [pc, #160]	; (800384c <Controlling_the_LINK+0xbc>)
 80037aa:	edd3 7a00 	vldr	s15, [r3]
 80037ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b6:	db0c      	blt.n	80037d2 <Controlling_the_LINK+0x42>
	  {
		  DCMotorStruc.DIR = 1;
 80037b8:	4b25      	ldr	r3, [pc, #148]	; (8003850 <Controlling_the_LINK+0xc0>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 80037be:	4b23      	ldr	r3, [pc, #140]	; (800384c <Controlling_the_LINK+0xbc>)
 80037c0:	edd3 7a00 	vldr	s15, [r3]
 80037c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037c8:	ee17 2a90 	vmov	r2, s15
 80037cc:	4b20      	ldr	r3, [pc, #128]	; (8003850 <Controlling_the_LINK+0xc0>)
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	e01b      	b.n	800380a <Controlling_the_LINK+0x7a>
	  }
	  else if (Plant_input < 0)
 80037d2:	4b1e      	ldr	r3, [pc, #120]	; (800384c <Controlling_the_LINK+0xbc>)
 80037d4:	edd3 7a00 	vldr	s15, [r3]
 80037d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e0:	d513      	bpl.n	800380a <Controlling_the_LINK+0x7a>
	  {
		  DCMotorStruc.DIR = 0;
 80037e2:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <Controlling_the_LINK+0xc0>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 80037e8:	4b18      	ldr	r3, [pc, #96]	; (800384c <Controlling_the_LINK+0xbc>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fc fe57 	bl	80004a0 <__aeabi_f2d>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4614      	mov	r4, r2
 80037f8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80037fc:	4620      	mov	r0, r4
 80037fe:	4629      	mov	r1, r5
 8003800:	f7fd f956 	bl	8000ab0 <__aeabi_d2uiz>
 8003804:	4603      	mov	r3, r0
 8003806:	4a12      	ldr	r2, [pc, #72]	; (8003850 <Controlling_the_LINK+0xc0>)
 8003808:	6053      	str	r3, [r2, #4]
	  }

	  if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 800380a:	4b11      	ldr	r3, [pc, #68]	; (8003850 <Controlling_the_LINK+0xc0>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003812:	4293      	cmp	r3, r2
 8003814:	d903      	bls.n	800381e <Controlling_the_LINK+0x8e>
	  {
		 DCMotorStruc.PWMOut = 10000;
 8003816:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <Controlling_the_LINK+0xc0>)
 8003818:	f242 7210 	movw	r2, #10000	; 0x2710
 800381c:	605a      	str	r2, [r3, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <Controlling_the_LINK+0xc0>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	2180      	movs	r1, #128	; 0x80
 8003826:	480b      	ldr	r0, [pc, #44]	; (8003854 <Controlling_the_LINK+0xc4>)
 8003828:	f001 fbf4 	bl	8005014 <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <Controlling_the_LINK+0xc8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a07      	ldr	r2, [pc, #28]	; (8003850 <Controlling_the_LINK+0xc0>)
 8003832:	6852      	ldr	r2, [r2, #4]
 8003834:	635a      	str	r2, [r3, #52]	; 0x34
	  TrjStruc.Loop_Timestamp = micros();
 8003836:	f7fe f999 	bl	8001b6c <micros>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4907      	ldr	r1, [pc, #28]	; (800385c <Controlling_the_LINK+0xcc>)
 8003840:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8003844:	bf00      	nop
 8003846:	bdb0      	pop	{r4, r5, r7, pc}
 8003848:	20000138 	.word	0x20000138
 800384c:	200000f4 	.word	0x200000f4
 8003850:	200000d0 	.word	0x200000d0
 8003854:	40020800 	.word	0x40020800
 8003858:	200003d4 	.word	0x200003d4
 800385c:	20000168 	.word	0x20000168

08003860 <SETHOME_StateMachine_Function>:

void SETHOME_StateMachine_Function()
{
 8003860:	b5b0      	push	{r4, r5, r7, lr}
 8003862:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 8003864:	4b49      	ldr	r3, [pc, #292]	; (800398c <SETHOME_StateMachine_Function+0x12c>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b03      	cmp	r3, #3
 800386a:	f200 808d 	bhi.w	8003988 <SETHOME_StateMachine_Function+0x128>
 800386e:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <SETHOME_StateMachine_Function+0x14>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	08003885 	.word	0x08003885
 8003878:	08003983 	.word	0x08003983
 800387c:	080038a1 	.word	0x080038a1
 8003880:	080038db 	.word	0x080038db
	{
		case SetHomeState_0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8003884:	2200      	movs	r2, #0
 8003886:	2180      	movs	r1, #128	; 0x80
 8003888:	4841      	ldr	r0, [pc, #260]	; (8003990 <SETHOME_StateMachine_Function+0x130>)
 800388a:	f001 fbc3 	bl	8005014 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 800388e:	4b41      	ldr	r3, [pc, #260]	; (8003994 <SETHOME_StateMachine_Function+0x134>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003896:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 8003898:	4b3c      	ldr	r3, [pc, #240]	; (800398c <SETHOME_StateMachine_Function+0x12c>)
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
			break;
 800389e:	e073      	b.n	8003988 <SETHOME_StateMachine_Function+0x128>
		case SetHomeState_1:
			break;
		case SetHomeState_2:

			SethomeMode = SetHomeState_0;
 80038a0:	4b3a      	ldr	r3, [pc, #232]	; (800398c <SETHOME_StateMachine_Function+0x12c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
			Munmunbot_State = STATE_Idle;
 80038a6:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <SETHOME_StateMachine_Function+0x138>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 80038ac:	4b3b      	ldr	r3, [pc, #236]	; (800399c <SETHOME_StateMachine_Function+0x13c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80038b2:	4b38      	ldr	r3, [pc, #224]	; (8003994 <SETHOME_StateMachine_Function+0x134>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2200      	movs	r2, #0
 80038b8:	635a      	str	r2, [r3, #52]	; 0x34
			TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
 80038ba:	4b39      	ldr	r3, [pc, #228]	; (80039a0 <SETHOME_StateMachine_Function+0x140>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	ee07 3a90 	vmov	s15, r3
 80038c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c8:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <SETHOME_StateMachine_Function+0x144>)
 80038ca:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			Moving_Link_Task_Flag = 0;
 80038ce:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <SETHOME_StateMachine_Function+0x148>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
			PID_Reset();
 80038d4:	f7ff fe6e 	bl	80035b4 <PID_Reset>
//				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
//				TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
//				Moving_Link_Task_Flag = 0;
//				PID_Reset();
//			}
			break;
 80038d8:	e056      	b.n	8003988 <SETHOME_StateMachine_Function+0x128>
		case SetHomeState_3:
		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 80038da:	f7fe f947 	bl	8001b6c <micros>
 80038de:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <SETHOME_StateMachine_Function+0x144>)
 80038e0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80038e4:	1a84      	subs	r4, r0, r2
 80038e6:	eb61 0503 	sbc.w	r5, r1, r3
 80038ea:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <SETHOME_StateMachine_Function+0x144>)
 80038ec:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80038f0:	429d      	cmp	r5, r3
 80038f2:	bf08      	it	eq
 80038f4:	4294      	cmpeq	r4, r2
 80038f6:	d346      	bcc.n	8003986 <SETHOME_StateMachine_Function+0x126>
		  {
			  Controlling_the_LINK();
 80038f8:	f7ff ff4a 	bl	8003790 <Controlling_the_LINK>

			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 80038fc:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <SETHOME_StateMachine_Function+0x14c>)
 80038fe:	ed93 7a06 	vldr	s14, [r3, #24]
 8003902:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <SETHOME_StateMachine_Function+0x144>)
 8003904:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003908:	4b29      	ldr	r3, [pc, #164]	; (80039b0 <SETHOME_StateMachine_Function+0x150>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	ee07 3a90 	vmov	s15, r3
 8003910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800391c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003920:	d900      	bls.n	8003924 <SETHOME_StateMachine_Function+0xc4>
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
					Moving_Link_Task_Flag = 0;
					PID_Reset();
			  }
		  }
		  break;
 8003922:	e030      	b.n	8003986 <SETHOME_StateMachine_Function+0x126>
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8003924:	4b21      	ldr	r3, [pc, #132]	; (80039ac <SETHOME_StateMachine_Function+0x14c>)
 8003926:	ed93 7a06 	vldr	s14, [r3, #24]
 800392a:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <SETHOME_StateMachine_Function+0x144>)
 800392c:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003930:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <SETHOME_StateMachine_Function+0x150>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	ee07 3a90 	vmov	s15, r3
 8003938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800393c:	ee76 7ae7 	vsub.f32	s15, s13, s15
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8003940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003948:	da00      	bge.n	800394c <SETHOME_StateMachine_Function+0xec>
		  break;
 800394a:	e01c      	b.n	8003986 <SETHOME_StateMachine_Function+0x126>
					  (Moving_Link_Task_Flag == 1))
 800394c:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <SETHOME_StateMachine_Function+0x148>)
 800394e:	781b      	ldrb	r3, [r3, #0]
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8003950:	2b01      	cmp	r3, #1
 8003952:	d118      	bne.n	8003986 <SETHOME_StateMachine_Function+0x126>
					SethomeMode = SetHomeState_0;
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <SETHOME_StateMachine_Function+0x12c>)
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_Idle;
 800395a:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <SETHOME_StateMachine_Function+0x138>)
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
					MovingLinkMode = LMM_Not_Set;
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <SETHOME_StateMachine_Function+0x13c>)
 8003962:	2200      	movs	r2, #0
 8003964:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <SETHOME_StateMachine_Function+0x134>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	635a      	str	r2, [r3, #52]	; 0x34
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <SETHOME_StateMachine_Function+0x14c>)
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	4a0c      	ldr	r2, [pc, #48]	; (80039a4 <SETHOME_StateMachine_Function+0x144>)
 8003974:	6653      	str	r3, [r2, #100]	; 0x64
					Moving_Link_Task_Flag = 0;
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <SETHOME_StateMachine_Function+0x148>)
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
					PID_Reset();
 800397c:	f7ff fe1a 	bl	80035b4 <PID_Reset>
		  break;
 8003980:	e001      	b.n	8003986 <SETHOME_StateMachine_Function+0x126>
			break;
 8003982:	bf00      	nop
 8003984:	e000      	b.n	8003988 <SETHOME_StateMachine_Function+0x128>
		  break;
 8003986:	bf00      	nop
     }

}
 8003988:	bf00      	nop
 800398a:	bdb0      	pop	{r4, r5, r7, pc}
 800398c:	200000da 	.word	0x200000da
 8003990:	40020800 	.word	0x40020800
 8003994:	200003d4 	.word	0x200003d4
 8003998:	200000d9 	.word	0x200000d9
 800399c:	200000ee 	.word	0x200000ee
 80039a0:	2000047c 	.word	0x2000047c
 80039a4:	20000168 	.word	0x20000168
 80039a8:	200000f8 	.word	0x200000f8
 80039ac:	20000108 	.word	0x20000108
 80039b0:	20000015 	.word	0x20000015
 80039b4:	00000000 	.word	0x00000000

080039b8 <PRESETHOME_StateMachine_Function>:

void PRESETHOME_StateMachine_Function()
{
 80039b8:	b5b0      	push	{r4, r5, r7, lr}
 80039ba:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 80039bc:	4b7c      	ldr	r3, [pc, #496]	; (8003bb0 <PRESETHOME_StateMachine_Function+0x1f8>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	f200 80ee 	bhi.w	8003ba2 <PRESETHOME_StateMachine_Function+0x1ea>
 80039c6:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <PRESETHOME_StateMachine_Function+0x14>)
 80039c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039cc:	080039dd 	.word	0x080039dd
 80039d0:	08003b9d 	.word	0x08003b9d
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	08003af5 	.word	0x08003af5
	{
		case SetHomeState_0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80039dc:	2200      	movs	r2, #0
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	4874      	ldr	r0, [pc, #464]	; (8003bb4 <PRESETHOME_StateMachine_Function+0x1fc>)
 80039e2:	f001 fb17 	bl	8005014 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 80039e6:	4b74      	ldr	r3, [pc, #464]	; (8003bb8 <PRESETHOME_StateMachine_Function+0x200>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80039ee:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 80039f0:	4b6f      	ldr	r3, [pc, #444]	; (8003bb0 <PRESETHOME_StateMachine_Function+0x1f8>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]
			break;
 80039f6:	e0d4      	b.n	8003ba2 <PRESETHOME_StateMachine_Function+0x1ea>
		case SetHomeState_1:
			break;
		case SetHomeState_2:
			Angularpos_InputNumber = 0;
 80039f8:	4b70      	ldr	r3, [pc, #448]	; (8003bbc <PRESETHOME_StateMachine_Function+0x204>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	801a      	strh	r2, [r3, #0]
			TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 80039fe:	4b6f      	ldr	r3, [pc, #444]	; (8003bbc <PRESETHOME_StateMachine_Function+0x204>)
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	4b6e      	ldr	r3, [pc, #440]	; (8003bc0 <PRESETHOME_StateMachine_Function+0x208>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	fb03 f302 	mul.w	r3, r3, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fd25 	bl	800045c <__aeabi_ui2d>
 8003a12:	a365      	add	r3, pc, #404	; (adr r3, 8003ba8 <PRESETHOME_StateMachine_Function+0x1f0>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fc fec4 	bl	80007a4 <__aeabi_ddiv>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	f7fd f864 	bl	8000af0 <__aeabi_d2f>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	4a66      	ldr	r2, [pc, #408]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003a2c:	6613      	str	r3, [r2, #96]	; 0x60
			if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 8003a2e:	4b65      	ldr	r3, [pc, #404]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003a30:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8003a34:	4b62      	ldr	r3, [pc, #392]	; (8003bc0 <PRESETHOME_StateMachine_Function+0x208>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	ee07 3a90 	vmov	s15, r3
 8003a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a48:	db0d      	blt.n	8003a66 <PRESETHOME_StateMachine_Function+0xae>
			{
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8003a4a:	4b5e      	ldr	r3, [pc, #376]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003a4c:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8003a50:	4b5b      	ldr	r3, [pc, #364]	; (8003bc0 <PRESETHOME_StateMachine_Function+0x208>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a60:	4b58      	ldr	r3, [pc, #352]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003a62:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			}
			TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8003a66:	4b57      	ldr	r3, [pc, #348]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003a68:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8003a6c:	4b54      	ldr	r3, [pc, #336]	; (8003bc0 <PRESETHOME_StateMachine_Function+0x208>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	ee07 3a90 	vmov	s15, r3
 8003a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a7c:	4b51      	ldr	r3, [pc, #324]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003a7e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

			if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 8003a82:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003a84:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8003a88:	4b4e      	ldr	r3, [pc, #312]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003a8a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003a8e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a96:	d010      	beq.n	8003aba <PRESETHOME_StateMachine_Function+0x102>
			{
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8003a98:	4b4a      	ldr	r3, [pc, #296]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003a9a:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8003a9e:	4b49      	ldr	r3, [pc, #292]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003aa0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003aaa:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			  SethomeMode = SetHomeState_3;
 8003aae:	4b40      	ldr	r3, [pc, #256]	; (8003bb0 <PRESETHOME_StateMachine_Function+0x1f8>)
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	701a      	strb	r2, [r3, #0]
			  TrajectoryGenerationCalculation();
 8003ab4:	f7fe fb08 	bl	80020c8 <TrajectoryGenerationCalculation>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
				TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
				Moving_Link_Task_Flag = 0;
				PID_Reset();
			}
			break;
 8003ab8:	e073      	b.n	8003ba2 <PRESETHOME_StateMachine_Function+0x1ea>
				SethomeMode = SetHomeState_0;
 8003aba:	4b3d      	ldr	r3, [pc, #244]	; (8003bb0 <PRESETHOME_StateMachine_Function+0x1f8>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
				Munmunbot_State = STATE_Disconnected;
 8003ac0:	4b41      	ldr	r3, [pc, #260]	; (8003bc8 <PRESETHOME_StateMachine_Function+0x210>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8003ac6:	4b41      	ldr	r3, [pc, #260]	; (8003bcc <PRESETHOME_StateMachine_Function+0x214>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003acc:	4b3a      	ldr	r3, [pc, #232]	; (8003bb8 <PRESETHOME_StateMachine_Function+0x200>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	635a      	str	r2, [r3, #52]	; 0x34
				TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
 8003ad4:	4b3e      	ldr	r3, [pc, #248]	; (8003bd0 <PRESETHOME_StateMachine_Function+0x218>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae2:	4b38      	ldr	r3, [pc, #224]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003ae4:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				Moving_Link_Task_Flag = 0;
 8003ae8:	4b3a      	ldr	r3, [pc, #232]	; (8003bd4 <PRESETHOME_StateMachine_Function+0x21c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
				PID_Reset();
 8003aee:	f7ff fd61 	bl	80035b4 <PID_Reset>
			break;
 8003af2:	e056      	b.n	8003ba2 <PRESETHOME_StateMachine_Function+0x1ea>
		case SetHomeState_3:
		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8003af4:	f7fe f83a 	bl	8001b6c <micros>
 8003af8:	4b32      	ldr	r3, [pc, #200]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003afa:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003afe:	1a84      	subs	r4, r0, r2
 8003b00:	eb61 0503 	sbc.w	r5, r1, r3
 8003b04:	4b2f      	ldr	r3, [pc, #188]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003b06:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003b0a:	429d      	cmp	r5, r3
 8003b0c:	bf08      	it	eq
 8003b0e:	4294      	cmpeq	r4, r2
 8003b10:	d346      	bcc.n	8003ba0 <PRESETHOME_StateMachine_Function+0x1e8>
		  {
			  Controlling_the_LINK();
 8003b12:	f7ff fe3d 	bl	8003790 <Controlling_the_LINK>

			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8003b16:	4b30      	ldr	r3, [pc, #192]	; (8003bd8 <PRESETHOME_StateMachine_Function+0x220>)
 8003b18:	ed93 7a06 	vldr	s14, [r3, #24]
 8003b1c:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003b1e:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003b22:	4b2e      	ldr	r3, [pc, #184]	; (8003bdc <PRESETHOME_StateMachine_Function+0x224>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3a:	d900      	bls.n	8003b3e <PRESETHOME_StateMachine_Function+0x186>
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
					Moving_Link_Task_Flag = 0;
					PID_Reset();
			  }
		  }
		  break;
 8003b3c:	e030      	b.n	8003ba0 <PRESETHOME_StateMachine_Function+0x1e8>
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8003b3e:	4b26      	ldr	r3, [pc, #152]	; (8003bd8 <PRESETHOME_StateMachine_Function+0x220>)
 8003b40:	ed93 7a06 	vldr	s14, [r3, #24]
 8003b44:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003b46:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003b4a:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <PRESETHOME_StateMachine_Function+0x224>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b56:	ee76 7ae7 	vsub.f32	s15, s13, s15
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 8003b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b62:	da00      	bge.n	8003b66 <PRESETHOME_StateMachine_Function+0x1ae>
		  break;
 8003b64:	e01c      	b.n	8003ba0 <PRESETHOME_StateMachine_Function+0x1e8>
					  (Moving_Link_Task_Flag == 1))
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <PRESETHOME_StateMachine_Function+0x21c>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d118      	bne.n	8003ba0 <PRESETHOME_StateMachine_Function+0x1e8>
					SethomeMode = SetHomeState_0;
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <PRESETHOME_StateMachine_Function+0x1f8>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_Disconnected;
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <PRESETHOME_StateMachine_Function+0x210>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
					MovingLinkMode = LMM_Not_Set;
 8003b7a:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <PRESETHOME_StateMachine_Function+0x214>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003b80:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <PRESETHOME_StateMachine_Function+0x200>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2200      	movs	r2, #0
 8003b86:	635a      	str	r2, [r3, #52]	; 0x34
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <PRESETHOME_StateMachine_Function+0x220>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	4a0d      	ldr	r2, [pc, #52]	; (8003bc4 <PRESETHOME_StateMachine_Function+0x20c>)
 8003b8e:	6653      	str	r3, [r2, #100]	; 0x64
					Moving_Link_Task_Flag = 0;
 8003b90:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <PRESETHOME_StateMachine_Function+0x21c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
					PID_Reset();
 8003b96:	f7ff fd0d 	bl	80035b4 <PID_Reset>
		  break;
 8003b9a:	e001      	b.n	8003ba0 <PRESETHOME_StateMachine_Function+0x1e8>
			break;
 8003b9c:	bf00      	nop
 8003b9e:	e000      	b.n	8003ba2 <PRESETHOME_StateMachine_Function+0x1ea>
		  break;
 8003ba0:	bf00      	nop
     }
}
 8003ba2:	bf00      	nop
 8003ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	99999999 	.word	0x99999999
 8003bac:	40eeadf9 	.word	0x40eeadf9
 8003bb0:	200000da 	.word	0x200000da
 8003bb4:	40020800 	.word	0x40020800
 8003bb8:	200003d4 	.word	0x200003d4
 8003bbc:	200000ec 	.word	0x200000ec
 8003bc0:	200001e0 	.word	0x200001e0
 8003bc4:	20000168 	.word	0x20000168
 8003bc8:	200000d9 	.word	0x200000d9
 8003bcc:	200000ee 	.word	0x200000ee
 8003bd0:	2000047c 	.word	0x2000047c
 8003bd4:	200000f8 	.word	0x200000f8
 8003bd8:	20000108 	.word	0x20000108
 8003bdc:	20000015 	.word	0x20000015

08003be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003be4:	b672      	cpsid	i
}
 8003be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003be8:	e7fe      	b.n	8003be8 <Error_Handler+0x8>
	...

08003bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <HAL_MspInit+0x4c>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	4a0f      	ldr	r2, [pc, #60]	; (8003c38 <HAL_MspInit+0x4c>)
 8003bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c00:	6453      	str	r3, [r2, #68]	; 0x44
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <HAL_MspInit+0x4c>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_MspInit+0x4c>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <HAL_MspInit+0x4c>)
 8003c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1e:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <HAL_MspInit+0x4c>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003c2a:	2007      	movs	r0, #7
 8003c2c:	f000 fc04 	bl	8004438 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40023800 	.word	0x40023800

08003c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c44:	f107 0314 	add.w	r3, r7, #20
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <HAL_I2C_MspInit+0xa4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d13c      	bne.n	8003cd8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_I2C_MspInit+0xa8>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	4a1f      	ldr	r2, [pc, #124]	; (8003ce4 <HAL_I2C_MspInit+0xa8>)
 8003c68:	f043 0302 	orr.w	r3, r3, #2
 8003c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <HAL_I2C_MspInit+0xa8>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003c7a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c80:	2312      	movs	r3, #18
 8003c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c84:	2301      	movs	r3, #1
 8003c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	4619      	mov	r1, r3
 8003c96:	4814      	ldr	r0, [pc, #80]	; (8003ce8 <HAL_I2C_MspInit+0xac>)
 8003c98:	f001 f820 	bl	8004cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <HAL_I2C_MspInit+0xa8>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <HAL_I2C_MspInit+0xa8>)
 8003ca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003caa:	6413      	str	r3, [r2, #64]	; 0x40
 8003cac:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <HAL_I2C_MspInit+0xa8>)
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2100      	movs	r1, #0
 8003cbc:	201f      	movs	r0, #31
 8003cbe:	f000 fbc6 	bl	800444e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003cc2:	201f      	movs	r0, #31
 8003cc4:	f000 fbdf 	bl	8004486 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2100      	movs	r1, #0
 8003ccc:	2020      	movs	r0, #32
 8003cce:	f000 fbbe 	bl	800444e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003cd2:	2020      	movs	r0, #32
 8003cd4:	f000 fbd7 	bl	8004486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003cd8:	bf00      	nop
 8003cda:	3728      	adds	r7, #40	; 0x28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40005400 	.word	0x40005400
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40020400 	.word	0x40020400

08003cec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf4:	f107 0314 	add.w	r3, r7, #20
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d12c      	bne.n	8003d68 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x88>)
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x88>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d1e:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x88>)
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x88>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a10      	ldr	r2, [pc, #64]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x88>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x88>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 8003d46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d54:	2300      	movs	r3, #0
 8003d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d5c:	f107 0314 	add.w	r3, r7, #20
 8003d60:	4619      	mov	r1, r3
 8003d62:	4805      	ldr	r0, [pc, #20]	; (8003d78 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003d64:	f000 ffba 	bl	8004cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003d68:	bf00      	nop
 8003d6a:	3728      	adds	r7, #40	; 0x28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40020000 	.word	0x40020000

08003d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8c:	d116      	bne.n	8003dbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	4b16      	ldr	r3, [pc, #88]	; (8003dec <HAL_TIM_Base_MspInit+0x70>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	4a15      	ldr	r2, [pc, #84]	; (8003dec <HAL_TIM_Base_MspInit+0x70>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <HAL_TIM_Base_MspInit+0x70>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003daa:	2200      	movs	r2, #0
 8003dac:	2100      	movs	r1, #0
 8003dae:	201c      	movs	r0, #28
 8003db0:	f000 fb4d 	bl	800444e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003db4:	201c      	movs	r0, #28
 8003db6:	f000 fb66 	bl	8004486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003dba:	e012      	b.n	8003de2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a0b      	ldr	r2, [pc, #44]	; (8003df0 <HAL_TIM_Base_MspInit+0x74>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10d      	bne.n	8003de2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_TIM_Base_MspInit+0x70>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	4a07      	ldr	r2, [pc, #28]	; (8003dec <HAL_TIM_Base_MspInit+0x70>)
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_TIM_Base_MspInit+0x70>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
}
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40000400 	.word	0x40000400

08003df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	f107 030c 	add.w	r3, r7, #12
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a12      	ldr	r2, [pc, #72]	; (8003e5c <HAL_TIM_MspPostInit+0x68>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d11d      	bne.n	8003e52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <HAL_TIM_MspPostInit+0x6c>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	4a10      	ldr	r2, [pc, #64]	; (8003e60 <HAL_TIM_MspPostInit+0x6c>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	6313      	str	r3, [r2, #48]	; 0x30
 8003e26:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <HAL_TIM_MspPostInit+0x6c>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 8003e32:	2340      	movs	r3, #64	; 0x40
 8003e34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e36:	2302      	movs	r3, #2
 8003e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e42:	2302      	movs	r3, #2
 8003e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 8003e46:	f107 030c 	add.w	r3, r7, #12
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4805      	ldr	r0, [pc, #20]	; (8003e64 <HAL_TIM_MspPostInit+0x70>)
 8003e4e:	f000 ff45 	bl	8004cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003e52:	bf00      	nop
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40020000 	.word	0x40020000

08003e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	; 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e70:	f107 0314 	add.w	r3, r7, #20
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	60da      	str	r2, [r3, #12]
 8003e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a4c      	ldr	r2, [pc, #304]	; (8003fb8 <HAL_UART_MspInit+0x150>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	f040 8091 	bne.w	8003fae <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	4b4a      	ldr	r3, [pc, #296]	; (8003fbc <HAL_UART_MspInit+0x154>)
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	4a49      	ldr	r2, [pc, #292]	; (8003fbc <HAL_UART_MspInit+0x154>)
 8003e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9c:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_UART_MspInit+0x154>)
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	4b43      	ldr	r3, [pc, #268]	; (8003fbc <HAL_UART_MspInit+0x154>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	4a42      	ldr	r2, [pc, #264]	; (8003fbc <HAL_UART_MspInit+0x154>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb8:	4b40      	ldr	r3, [pc, #256]	; (8003fbc <HAL_UART_MspInit+0x154>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ec4:	230c      	movs	r3, #12
 8003ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ed4:	2307      	movs	r3, #7
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed8:	f107 0314 	add.w	r3, r7, #20
 8003edc:	4619      	mov	r1, r3
 8003ede:	4838      	ldr	r0, [pc, #224]	; (8003fc0 <HAL_UART_MspInit+0x158>)
 8003ee0:	f000 fefc 	bl	8004cdc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003ee4:	4b37      	ldr	r3, [pc, #220]	; (8003fc4 <HAL_UART_MspInit+0x15c>)
 8003ee6:	4a38      	ldr	r2, [pc, #224]	; (8003fc8 <HAL_UART_MspInit+0x160>)
 8003ee8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003eea:	4b36      	ldr	r3, [pc, #216]	; (8003fc4 <HAL_UART_MspInit+0x15c>)
 8003eec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ef0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ef2:	4b34      	ldr	r3, [pc, #208]	; (8003fc4 <HAL_UART_MspInit+0x15c>)
 8003ef4:	2240      	movs	r2, #64	; 0x40
 8003ef6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ef8:	4b32      	ldr	r3, [pc, #200]	; (8003fc4 <HAL_UART_MspInit+0x15c>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003efe:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <HAL_UART_MspInit+0x15c>)
 8003f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f04:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f06:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <HAL_UART_MspInit+0x15c>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f0c:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_UART_MspInit+0x15c>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003f12:	4b2c      	ldr	r3, [pc, #176]	; (8003fc4 <HAL_UART_MspInit+0x15c>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f18:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <HAL_UART_MspInit+0x15c>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f1e:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <HAL_UART_MspInit+0x15c>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003f24:	4827      	ldr	r0, [pc, #156]	; (8003fc4 <HAL_UART_MspInit+0x15c>)
 8003f26:	f000 fac9 	bl	80044bc <HAL_DMA_Init>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003f30:	f7ff fe56 	bl	8003be0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a23      	ldr	r2, [pc, #140]	; (8003fc4 <HAL_UART_MspInit+0x15c>)
 8003f38:	635a      	str	r2, [r3, #52]	; 0x34
 8003f3a:	4a22      	ldr	r2, [pc, #136]	; (8003fc4 <HAL_UART_MspInit+0x15c>)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003f40:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <HAL_UART_MspInit+0x164>)
 8003f42:	4a23      	ldr	r2, [pc, #140]	; (8003fd0 <HAL_UART_MspInit+0x168>)
 8003f44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003f46:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <HAL_UART_MspInit+0x164>)
 8003f48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f4e:	4b1f      	ldr	r3, [pc, #124]	; (8003fcc <HAL_UART_MspInit+0x164>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f54:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <HAL_UART_MspInit+0x164>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f5a:	4b1c      	ldr	r3, [pc, #112]	; (8003fcc <HAL_UART_MspInit+0x164>)
 8003f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f62:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <HAL_UART_MspInit+0x164>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f68:	4b18      	ldr	r3, [pc, #96]	; (8003fcc <HAL_UART_MspInit+0x164>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003f6e:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <HAL_UART_MspInit+0x164>)
 8003f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f74:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <HAL_UART_MspInit+0x164>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f7c:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <HAL_UART_MspInit+0x164>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003f82:	4812      	ldr	r0, [pc, #72]	; (8003fcc <HAL_UART_MspInit+0x164>)
 8003f84:	f000 fa9a 	bl	80044bc <HAL_DMA_Init>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003f8e:	f7ff fe27 	bl	8003be0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <HAL_UART_MspInit+0x164>)
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
 8003f98:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <HAL_UART_MspInit+0x164>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	2026      	movs	r0, #38	; 0x26
 8003fa4:	f000 fa53 	bl	800444e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003fa8:	2026      	movs	r0, #38	; 0x26
 8003faa:	f000 fa6c 	bl	8004486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fae:	bf00      	nop
 8003fb0:	3728      	adds	r7, #40	; 0x28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40004400 	.word	0x40004400
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	2000041c 	.word	0x2000041c
 8003fc8:	400260a0 	.word	0x400260a0
 8003fcc:	20000320 	.word	0x20000320
 8003fd0:	40026088 	.word	0x40026088

08003fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fd8:	e7fe      	b.n	8003fd8 <NMI_Handler+0x4>

08003fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fde:	e7fe      	b.n	8003fde <HardFault_Handler+0x4>

08003fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fe4:	e7fe      	b.n	8003fe4 <MemManage_Handler+0x4>

08003fe6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fea:	e7fe      	b.n	8003fea <BusFault_Handler+0x4>

08003fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ff0:	e7fe      	b.n	8003ff0 <UsageFault_Handler+0x4>

08003ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ff6:	bf00      	nop
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800400e:	b480      	push	{r7}
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004020:	f000 f91a 	bl	8004258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004024:	bf00      	nop
 8004026:	bd80      	pop	{r7, pc}

08004028 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800402c:	4802      	ldr	r0, [pc, #8]	; (8004038 <DMA1_Stream5_IRQHandler+0x10>)
 800402e:	f000 fbdd 	bl	80047ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000320 	.word	0x20000320

0800403c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004040:	4802      	ldr	r0, [pc, #8]	; (800404c <DMA1_Stream6_IRQHandler+0x10>)
 8004042:	f000 fbd3 	bl	80047ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	2000041c 	.word	0x2000041c

08004050 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004054:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004058:	f000 fff6 	bl	8005048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800405c:	bf00      	nop
 800405e:	bd80      	pop	{r7, pc}

08004060 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004064:	4802      	ldr	r0, [pc, #8]	; (8004070 <TIM2_IRQHandler+0x10>)
 8004066:	f003 fe65 	bl	8007d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200004c4 	.word	0x200004c4

08004074 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004078:	4802      	ldr	r0, [pc, #8]	; (8004084 <I2C1_EV_IRQHandler+0x10>)
 800407a:	f001 f9e7 	bl	800544c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800407e:	bf00      	nop
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000380 	.word	0x20000380

08004088 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800408c:	4802      	ldr	r0, [pc, #8]	; (8004098 <I2C1_ER_IRQHandler+0x10>)
 800408e:	f001 fb4a 	bl	8005726 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000380 	.word	0x20000380

0800409c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040a0:	4802      	ldr	r0, [pc, #8]	; (80040ac <USART2_IRQHandler+0x10>)
 80040a2:	f004 fd31 	bl	8008b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	2000050c 	.word	0x2000050c

080040b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80040b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80040b8:	f000 ffc6 	bl	8005048 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80040bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80040c0:	f000 ffc2 	bl	8005048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80040c4:	bf00      	nop
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040d0:	4a14      	ldr	r2, [pc, #80]	; (8004124 <_sbrk+0x5c>)
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <_sbrk+0x60>)
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <_sbrk+0x64>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <_sbrk+0x64>)
 80040e6:	4a12      	ldr	r2, [pc, #72]	; (8004130 <_sbrk+0x68>)
 80040e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <_sbrk+0x64>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4413      	add	r3, r2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d207      	bcs.n	8004108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040f8:	f005 fb62 	bl	80097c0 <__errno>
 80040fc:	4603      	mov	r3, r0
 80040fe:	220c      	movs	r2, #12
 8004100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004102:	f04f 33ff 	mov.w	r3, #4294967295
 8004106:	e009      	b.n	800411c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004108:	4b08      	ldr	r3, [pc, #32]	; (800412c <_sbrk+0x64>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800410e:	4b07      	ldr	r3, [pc, #28]	; (800412c <_sbrk+0x64>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	4a05      	ldr	r2, [pc, #20]	; (800412c <_sbrk+0x64>)
 8004118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20020000 	.word	0x20020000
 8004128:	00000400 	.word	0x00000400
 800412c:	20000314 	.word	0x20000314
 8004130:	20000568 	.word	0x20000568

08004134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004138:	4b08      	ldr	r3, [pc, #32]	; (800415c <SystemInit+0x28>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	4a07      	ldr	r2, [pc, #28]	; (800415c <SystemInit+0x28>)
 8004140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004148:	4b04      	ldr	r3, [pc, #16]	; (800415c <SystemInit+0x28>)
 800414a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800414e:	609a      	str	r2, [r3, #8]
#endif
}
 8004150:	bf00      	nop
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	e000ed00 	.word	0xe000ed00

08004160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004198 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004164:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004166:	e003      	b.n	8004170 <LoopCopyDataInit>

08004168 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800416a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800416c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800416e:	3104      	adds	r1, #4

08004170 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004170:	480b      	ldr	r0, [pc, #44]	; (80041a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004172:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004174:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004176:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004178:	d3f6      	bcc.n	8004168 <CopyDataInit>
  ldr  r2, =_sbss
 800417a:	4a0b      	ldr	r2, [pc, #44]	; (80041a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800417c:	e002      	b.n	8004184 <LoopFillZerobss>

0800417e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800417e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004180:	f842 3b04 	str.w	r3, [r2], #4

08004184 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004186:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004188:	d3f9      	bcc.n	800417e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800418a:	f7ff ffd3 	bl	8004134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800418e:	f005 fb1d 	bl	80097cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004192:	f7fc ff89 	bl	80010a8 <main>
  bx  lr    
 8004196:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004198:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800419c:	08009b80 	.word	0x08009b80
  ldr  r0, =_sdata
 80041a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041a4:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80041a8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80041ac:	20000564 	.word	0x20000564

080041b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041b0:	e7fe      	b.n	80041b0 <ADC_IRQHandler>
	...

080041b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041b8:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <HAL_Init+0x40>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0d      	ldr	r2, [pc, #52]	; (80041f4 <HAL_Init+0x40>)
 80041be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_Init+0x40>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <HAL_Init+0x40>)
 80041ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041d0:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <HAL_Init+0x40>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a07      	ldr	r2, [pc, #28]	; (80041f4 <HAL_Init+0x40>)
 80041d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041dc:	2003      	movs	r0, #3
 80041de:	f000 f92b 	bl	8004438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041e2:	2000      	movs	r0, #0
 80041e4:	f000 f808 	bl	80041f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041e8:	f7ff fd00 	bl	8003bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023c00 	.word	0x40023c00

080041f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <HAL_InitTick+0x54>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_InitTick+0x58>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	4619      	mov	r1, r3
 800420a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800420e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004212:	fbb2 f3f3 	udiv	r3, r2, r3
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f943 	bl	80044a2 <HAL_SYSTICK_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e00e      	b.n	8004244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b0f      	cmp	r3, #15
 800422a:	d80a      	bhi.n	8004242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800422c:	2200      	movs	r2, #0
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	f000 f90b 	bl	800444e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004238:	4a06      	ldr	r2, [pc, #24]	; (8004254 <HAL_InitTick+0x5c>)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	e000      	b.n	8004244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000018 	.word	0x20000018
 8004250:	20000020 	.word	0x20000020
 8004254:	2000001c 	.word	0x2000001c

08004258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_IncTick+0x20>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_IncTick+0x24>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4413      	add	r3, r2
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <HAL_IncTick+0x24>)
 800426a:	6013      	str	r3, [r2, #0]
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000020 	.word	0x20000020
 800427c:	20000550 	.word	0x20000550

08004280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return uwTick;
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_GetTick+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000550 	.word	0x20000550

08004298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <__NVIC_SetPriorityGrouping+0x44>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042b4:	4013      	ands	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ca:	4a04      	ldr	r2, [pc, #16]	; (80042dc <__NVIC_SetPriorityGrouping+0x44>)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	60d3      	str	r3, [r2, #12]
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <__NVIC_GetPriorityGrouping+0x18>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	f003 0307 	and.w	r3, r3, #7
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	2b00      	cmp	r3, #0
 800430c:	db0b      	blt.n	8004326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	f003 021f 	and.w	r2, r3, #31
 8004314:	4907      	ldr	r1, [pc, #28]	; (8004334 <__NVIC_EnableIRQ+0x38>)
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	2001      	movs	r0, #1
 800431e:	fa00 f202 	lsl.w	r2, r0, r2
 8004322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	e000e100 	.word	0xe000e100

08004338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	6039      	str	r1, [r7, #0]
 8004342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004348:	2b00      	cmp	r3, #0
 800434a:	db0a      	blt.n	8004362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	490c      	ldr	r1, [pc, #48]	; (8004384 <__NVIC_SetPriority+0x4c>)
 8004352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004356:	0112      	lsls	r2, r2, #4
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	440b      	add	r3, r1
 800435c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004360:	e00a      	b.n	8004378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	4908      	ldr	r1, [pc, #32]	; (8004388 <__NVIC_SetPriority+0x50>)
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	3b04      	subs	r3, #4
 8004370:	0112      	lsls	r2, r2, #4
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	440b      	add	r3, r1
 8004376:	761a      	strb	r2, [r3, #24]
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	e000e100 	.word	0xe000e100
 8004388:	e000ed00 	.word	0xe000ed00

0800438c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800438c:	b480      	push	{r7}
 800438e:	b089      	sub	sp, #36	; 0x24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f1c3 0307 	rsb	r3, r3, #7
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	bf28      	it	cs
 80043aa:	2304      	movcs	r3, #4
 80043ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2b06      	cmp	r3, #6
 80043b4:	d902      	bls.n	80043bc <NVIC_EncodePriority+0x30>
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3b03      	subs	r3, #3
 80043ba:	e000      	b.n	80043be <NVIC_EncodePriority+0x32>
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c0:	f04f 32ff 	mov.w	r2, #4294967295
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43da      	mvns	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	401a      	ands	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043d4:	f04f 31ff 	mov.w	r1, #4294967295
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	43d9      	mvns	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e4:	4313      	orrs	r3, r2
         );
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3724      	adds	r7, #36	; 0x24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3b01      	subs	r3, #1
 8004400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004404:	d301      	bcc.n	800440a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004406:	2301      	movs	r3, #1
 8004408:	e00f      	b.n	800442a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800440a:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <SysTick_Config+0x40>)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3b01      	subs	r3, #1
 8004410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004412:	210f      	movs	r1, #15
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	f7ff ff8e 	bl	8004338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <SysTick_Config+0x40>)
 800441e:	2200      	movs	r2, #0
 8004420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004422:	4b04      	ldr	r3, [pc, #16]	; (8004434 <SysTick_Config+0x40>)
 8004424:	2207      	movs	r2, #7
 8004426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	e000e010 	.word	0xe000e010

08004438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff ff29 	bl	8004298 <__NVIC_SetPriorityGrouping>
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800444e:	b580      	push	{r7, lr}
 8004450:	b086      	sub	sp, #24
 8004452:	af00      	add	r7, sp, #0
 8004454:	4603      	mov	r3, r0
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004460:	f7ff ff3e 	bl	80042e0 <__NVIC_GetPriorityGrouping>
 8004464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	6978      	ldr	r0, [r7, #20]
 800446c:	f7ff ff8e 	bl	800438c <NVIC_EncodePriority>
 8004470:	4602      	mov	r2, r0
 8004472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff ff5d 	bl	8004338 <__NVIC_SetPriority>
}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	4603      	mov	r3, r0
 800448e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff ff31 	bl	80042fc <__NVIC_EnableIRQ>
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff ffa2 	bl	80043f4 <SysTick_Config>
 80044b0:	4603      	mov	r3, r0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044c8:	f7ff feda 	bl	8004280 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e099      	b.n	800460c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0201 	bic.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044f8:	e00f      	b.n	800451a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044fa:	f7ff fec1 	bl	8004280 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b05      	cmp	r3, #5
 8004506:	d908      	bls.n	800451a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2203      	movs	r2, #3
 8004512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e078      	b.n	800460c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e8      	bne.n	80044fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4b38      	ldr	r3, [pc, #224]	; (8004614 <HAL_DMA_Init+0x158>)
 8004534:	4013      	ands	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004546:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800455e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2b04      	cmp	r3, #4
 8004572:	d107      	bne.n	8004584 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	4313      	orrs	r3, r2
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f023 0307 	bic.w	r3, r3, #7
 800459a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d117      	bne.n	80045de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00e      	beq.n	80045de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fb0f 	bl	8004be4 <DMA_CheckFifoParam>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2240      	movs	r2, #64	; 0x40
 80045d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045da:	2301      	movs	r3, #1
 80045dc:	e016      	b.n	800460c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fac6 	bl	8004b78 <DMA_CalcBaseAndBitshift>
 80045ec:	4603      	mov	r3, r0
 80045ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	223f      	movs	r2, #63	; 0x3f
 80045f6:	409a      	lsls	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	f010803f 	.word	0xf010803f

08004618 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_DMA_Start_IT+0x26>
 800463a:	2302      	movs	r3, #2
 800463c:	e040      	b.n	80046c0 <HAL_DMA_Start_IT+0xa8>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d12f      	bne.n	80046b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2202      	movs	r2, #2
 8004656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fa58 	bl	8004b1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004670:	223f      	movs	r2, #63	; 0x3f
 8004672:	409a      	lsls	r2, r3
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0216 	orr.w	r2, r2, #22
 8004686:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d007      	beq.n	80046a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0208 	orr.w	r2, r2, #8
 800469e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	e005      	b.n	80046be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046ba:	2302      	movs	r3, #2
 80046bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046be:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046d6:	f7ff fdd3 	bl	8004280 <HAL_GetTick>
 80046da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d008      	beq.n	80046fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2280      	movs	r2, #128	; 0x80
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e052      	b.n	80047a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0216 	bic.w	r2, r2, #22
 8004708:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695a      	ldr	r2, [r3, #20]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004718:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <HAL_DMA_Abort+0x62>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004726:	2b00      	cmp	r3, #0
 8004728:	d007      	beq.n	800473a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0208 	bic.w	r2, r2, #8
 8004738:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800474a:	e013      	b.n	8004774 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800474c:	f7ff fd98 	bl	8004280 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b05      	cmp	r3, #5
 8004758:	d90c      	bls.n	8004774 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2203      	movs	r2, #3
 800476c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e015      	b.n	80047a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e4      	bne.n	800474c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004786:	223f      	movs	r2, #63	; 0x3f
 8004788:	409a      	lsls	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d004      	beq.n	80047c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2280      	movs	r2, #128	; 0x80
 80047c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e00c      	b.n	80047e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2205      	movs	r2, #5
 80047ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047f8:	4b92      	ldr	r3, [pc, #584]	; (8004a44 <HAL_DMA_IRQHandler+0x258>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a92      	ldr	r2, [pc, #584]	; (8004a48 <HAL_DMA_IRQHandler+0x25c>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	0a9b      	lsrs	r3, r3, #10
 8004804:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004816:	2208      	movs	r2, #8
 8004818:	409a      	lsls	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4013      	ands	r3, r2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01a      	beq.n	8004858 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d013      	beq.n	8004858 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0204 	bic.w	r2, r2, #4
 800483e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004844:	2208      	movs	r2, #8
 8004846:	409a      	lsls	r2, r3
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	f043 0201 	orr.w	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485c:	2201      	movs	r2, #1
 800485e:	409a      	lsls	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d012      	beq.n	800488e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00b      	beq.n	800488e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487a:	2201      	movs	r2, #1
 800487c:	409a      	lsls	r2, r3
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	f043 0202 	orr.w	r2, r3, #2
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004892:	2204      	movs	r2, #4
 8004894:	409a      	lsls	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4013      	ands	r3, r2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d012      	beq.n	80048c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00b      	beq.n	80048c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b0:	2204      	movs	r2, #4
 80048b2:	409a      	lsls	r2, r3
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048bc:	f043 0204 	orr.w	r2, r3, #4
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	2210      	movs	r2, #16
 80048ca:	409a      	lsls	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d043      	beq.n	800495c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d03c      	beq.n	800495c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e6:	2210      	movs	r2, #16
 80048e8:	409a      	lsls	r2, r3
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d018      	beq.n	800492e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d108      	bne.n	800491c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d024      	beq.n	800495c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	4798      	blx	r3
 800491a:	e01f      	b.n	800495c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01b      	beq.n	800495c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	4798      	blx	r3
 800492c:	e016      	b.n	800495c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d107      	bne.n	800494c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0208 	bic.w	r2, r2, #8
 800494a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004960:	2220      	movs	r2, #32
 8004962:	409a      	lsls	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4013      	ands	r3, r2
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 808e 	beq.w	8004a8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8086 	beq.w	8004a8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004982:	2220      	movs	r2, #32
 8004984:	409a      	lsls	r2, r3
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b05      	cmp	r3, #5
 8004994:	d136      	bne.n	8004a04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0216 	bic.w	r2, r2, #22
 80049a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695a      	ldr	r2, [r3, #20]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d103      	bne.n	80049c6 <HAL_DMA_IRQHandler+0x1da>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0208 	bic.w	r2, r2, #8
 80049d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049da:	223f      	movs	r2, #63	; 0x3f
 80049dc:	409a      	lsls	r2, r3
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d07d      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	4798      	blx	r3
        }
        return;
 8004a02:	e078      	b.n	8004af6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d01c      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d108      	bne.n	8004a32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d030      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	4798      	blx	r3
 8004a30:	e02b      	b.n	8004a8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d027      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	4798      	blx	r3
 8004a42:	e022      	b.n	8004a8a <HAL_DMA_IRQHandler+0x29e>
 8004a44:	20000018 	.word	0x20000018
 8004a48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10f      	bne.n	8004a7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0210 	bic.w	r2, r2, #16
 8004a68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d032      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d022      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2205      	movs	r2, #5
 8004aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0201 	bic.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	60bb      	str	r3, [r7, #8]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d307      	bcc.n	8004ad2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f2      	bne.n	8004ab6 <HAL_DMA_IRQHandler+0x2ca>
 8004ad0:	e000      	b.n	8004ad4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004ad2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
 8004af4:	e000      	b.n	8004af8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004af6:	bf00      	nop
    }
  }
}
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop

08004b00 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b0e:	b2db      	uxtb	r3, r3
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d108      	bne.n	8004b5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b5a:	e007      	b.n	8004b6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	60da      	str	r2, [r3, #12]
}
 8004b6c:	bf00      	nop
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	3b10      	subs	r3, #16
 8004b88:	4a14      	ldr	r2, [pc, #80]	; (8004bdc <DMA_CalcBaseAndBitshift+0x64>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b92:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <DMA_CalcBaseAndBitshift+0x68>)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d909      	bls.n	8004bba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bae:	f023 0303 	bic.w	r3, r3, #3
 8004bb2:	1d1a      	adds	r2, r3, #4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	659a      	str	r2, [r3, #88]	; 0x58
 8004bb8:	e007      	b.n	8004bca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	aaaaaaab 	.word	0xaaaaaaab
 8004be0:	08009b68 	.word	0x08009b68

08004be4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d11f      	bne.n	8004c3e <DMA_CheckFifoParam+0x5a>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d856      	bhi.n	8004cb2 <DMA_CheckFifoParam+0xce>
 8004c04:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <DMA_CheckFifoParam+0x28>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c1d 	.word	0x08004c1d
 8004c10:	08004c2f 	.word	0x08004c2f
 8004c14:	08004c1d 	.word	0x08004c1d
 8004c18:	08004cb3 	.word	0x08004cb3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d046      	beq.n	8004cb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c2c:	e043      	b.n	8004cb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c36:	d140      	bne.n	8004cba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c3c:	e03d      	b.n	8004cba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c46:	d121      	bne.n	8004c8c <DMA_CheckFifoParam+0xa8>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d837      	bhi.n	8004cbe <DMA_CheckFifoParam+0xda>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <DMA_CheckFifoParam+0x70>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c65 	.word	0x08004c65
 8004c58:	08004c6b 	.word	0x08004c6b
 8004c5c:	08004c65 	.word	0x08004c65
 8004c60:	08004c7d 	.word	0x08004c7d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
      break;
 8004c68:	e030      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d025      	beq.n	8004cc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c7a:	e022      	b.n	8004cc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c84:	d11f      	bne.n	8004cc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c8a:	e01c      	b.n	8004cc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d903      	bls.n	8004c9a <DMA_CheckFifoParam+0xb6>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d003      	beq.n	8004ca0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c98:	e018      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9e:	e015      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00e      	beq.n	8004cca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb0:	e00b      	b.n	8004cca <DMA_CheckFifoParam+0xe6>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e00a      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      break;
 8004cb6:	bf00      	nop
 8004cb8:	e008      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e006      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      break;
 8004cbe:	bf00      	nop
 8004cc0:	e004      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      break;
 8004cc2:	bf00      	nop
 8004cc4:	e002      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      break;   
 8004cc6:	bf00      	nop
 8004cc8:	e000      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      break;
 8004cca:	bf00      	nop
    }
  } 
  
  return status; 
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop

08004cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b089      	sub	sp, #36	; 0x24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e159      	b.n	8004fac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	f040 8148 	bne.w	8004fa6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d005      	beq.n	8004d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d130      	bne.n	8004d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	2203      	movs	r2, #3
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4013      	ands	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d64:	2201      	movs	r2, #1
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4013      	ands	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	091b      	lsrs	r3, r3, #4
 8004d7a:	f003 0201 	and.w	r2, r3, #1
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d017      	beq.n	8004dcc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	2203      	movs	r2, #3
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4013      	ands	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d123      	bne.n	8004e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	08da      	lsrs	r2, r3, #3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3208      	adds	r2, #8
 8004de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	220f      	movs	r2, #15
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	08da      	lsrs	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3208      	adds	r2, #8
 8004e1a:	69b9      	ldr	r1, [r7, #24]
 8004e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	43db      	mvns	r3, r3
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	4013      	ands	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 0203 	and.w	r2, r3, #3
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 80a2 	beq.w	8004fa6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	4b57      	ldr	r3, [pc, #348]	; (8004fc4 <HAL_GPIO_Init+0x2e8>)
 8004e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6a:	4a56      	ldr	r2, [pc, #344]	; (8004fc4 <HAL_GPIO_Init+0x2e8>)
 8004e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e70:	6453      	str	r3, [r2, #68]	; 0x44
 8004e72:	4b54      	ldr	r3, [pc, #336]	; (8004fc4 <HAL_GPIO_Init+0x2e8>)
 8004e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e7e:	4a52      	ldr	r2, [pc, #328]	; (8004fc8 <HAL_GPIO_Init+0x2ec>)
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	3302      	adds	r3, #2
 8004e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	220f      	movs	r2, #15
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a49      	ldr	r2, [pc, #292]	; (8004fcc <HAL_GPIO_Init+0x2f0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d019      	beq.n	8004ede <HAL_GPIO_Init+0x202>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a48      	ldr	r2, [pc, #288]	; (8004fd0 <HAL_GPIO_Init+0x2f4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <HAL_GPIO_Init+0x1fe>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a47      	ldr	r2, [pc, #284]	; (8004fd4 <HAL_GPIO_Init+0x2f8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00d      	beq.n	8004ed6 <HAL_GPIO_Init+0x1fa>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a46      	ldr	r2, [pc, #280]	; (8004fd8 <HAL_GPIO_Init+0x2fc>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d007      	beq.n	8004ed2 <HAL_GPIO_Init+0x1f6>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a45      	ldr	r2, [pc, #276]	; (8004fdc <HAL_GPIO_Init+0x300>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d101      	bne.n	8004ece <HAL_GPIO_Init+0x1f2>
 8004eca:	2304      	movs	r3, #4
 8004ecc:	e008      	b.n	8004ee0 <HAL_GPIO_Init+0x204>
 8004ece:	2307      	movs	r3, #7
 8004ed0:	e006      	b.n	8004ee0 <HAL_GPIO_Init+0x204>
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e004      	b.n	8004ee0 <HAL_GPIO_Init+0x204>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e002      	b.n	8004ee0 <HAL_GPIO_Init+0x204>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_GPIO_Init+0x204>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	f002 0203 	and.w	r2, r2, #3
 8004ee6:	0092      	lsls	r2, r2, #2
 8004ee8:	4093      	lsls	r3, r2
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ef0:	4935      	ldr	r1, [pc, #212]	; (8004fc8 <HAL_GPIO_Init+0x2ec>)
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	089b      	lsrs	r3, r3, #2
 8004ef6:	3302      	adds	r3, #2
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004efe:	4b38      	ldr	r3, [pc, #224]	; (8004fe0 <HAL_GPIO_Init+0x304>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	43db      	mvns	r3, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f22:	4a2f      	ldr	r2, [pc, #188]	; (8004fe0 <HAL_GPIO_Init+0x304>)
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f28:	4b2d      	ldr	r3, [pc, #180]	; (8004fe0 <HAL_GPIO_Init+0x304>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	43db      	mvns	r3, r3
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4013      	ands	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f4c:	4a24      	ldr	r2, [pc, #144]	; (8004fe0 <HAL_GPIO_Init+0x304>)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f52:	4b23      	ldr	r3, [pc, #140]	; (8004fe0 <HAL_GPIO_Init+0x304>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f76:	4a1a      	ldr	r2, [pc, #104]	; (8004fe0 <HAL_GPIO_Init+0x304>)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f7c:	4b18      	ldr	r3, [pc, #96]	; (8004fe0 <HAL_GPIO_Init+0x304>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fa0:	4a0f      	ldr	r2, [pc, #60]	; (8004fe0 <HAL_GPIO_Init+0x304>)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b0f      	cmp	r3, #15
 8004fb0:	f67f aea2 	bls.w	8004cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	3724      	adds	r7, #36	; 0x24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40013800 	.word	0x40013800
 8004fcc:	40020000 	.word	0x40020000
 8004fd0:	40020400 	.word	0x40020400
 8004fd4:	40020800 	.word	0x40020800
 8004fd8:	40020c00 	.word	0x40020c00
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40013c00 	.word	0x40013c00

08004fe4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	887b      	ldrh	r3, [r7, #2]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e001      	b.n	8005006 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005002:	2300      	movs	r3, #0
 8005004:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005006:	7bfb      	ldrb	r3, [r7, #15]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	807b      	strh	r3, [r7, #2]
 8005020:	4613      	mov	r3, r2
 8005022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005024:	787b      	ldrb	r3, [r7, #1]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800502a:	887a      	ldrh	r2, [r7, #2]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005030:	e003      	b.n	800503a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005032:	887b      	ldrh	r3, [r7, #2]
 8005034:	041a      	lsls	r2, r3, #16
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	619a      	str	r2, [r3, #24]
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	4603      	mov	r3, r0
 8005050:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005052:	4b08      	ldr	r3, [pc, #32]	; (8005074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d006      	beq.n	800506c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800505e:	4a05      	ldr	r2, [pc, #20]	; (8005074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005064:	88fb      	ldrh	r3, [r7, #6]
 8005066:	4618      	mov	r0, r3
 8005068:	f7fc fd28 	bl	8001abc <HAL_GPIO_EXTI_Callback>
  }
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40013c00 	.word	0x40013c00

08005078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e12b      	b.n	80052e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fe fdcc 	bl	8003c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	; 0x24
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050dc:	f002 fab8 	bl	8007650 <HAL_RCC_GetPCLK1Freq>
 80050e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4a81      	ldr	r2, [pc, #516]	; (80052ec <HAL_I2C_Init+0x274>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d807      	bhi.n	80050fc <HAL_I2C_Init+0x84>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a80      	ldr	r2, [pc, #512]	; (80052f0 <HAL_I2C_Init+0x278>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	bf94      	ite	ls
 80050f4:	2301      	movls	r3, #1
 80050f6:	2300      	movhi	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	e006      	b.n	800510a <HAL_I2C_Init+0x92>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a7d      	ldr	r2, [pc, #500]	; (80052f4 <HAL_I2C_Init+0x27c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	bf94      	ite	ls
 8005104:	2301      	movls	r3, #1
 8005106:	2300      	movhi	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e0e7      	b.n	80052e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4a78      	ldr	r2, [pc, #480]	; (80052f8 <HAL_I2C_Init+0x280>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	0c9b      	lsrs	r3, r3, #18
 800511c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a6a      	ldr	r2, [pc, #424]	; (80052ec <HAL_I2C_Init+0x274>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d802      	bhi.n	800514c <HAL_I2C_Init+0xd4>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	3301      	adds	r3, #1
 800514a:	e009      	b.n	8005160 <HAL_I2C_Init+0xe8>
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005152:	fb02 f303 	mul.w	r3, r2, r3
 8005156:	4a69      	ldr	r2, [pc, #420]	; (80052fc <HAL_I2C_Init+0x284>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	099b      	lsrs	r3, r3, #6
 800515e:	3301      	adds	r3, #1
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	430b      	orrs	r3, r1
 8005166:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005172:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	495c      	ldr	r1, [pc, #368]	; (80052ec <HAL_I2C_Init+0x274>)
 800517c:	428b      	cmp	r3, r1
 800517e:	d819      	bhi.n	80051b4 <HAL_I2C_Init+0x13c>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	1e59      	subs	r1, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	fbb1 f3f3 	udiv	r3, r1, r3
 800518e:	1c59      	adds	r1, r3, #1
 8005190:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005194:	400b      	ands	r3, r1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <HAL_I2C_Init+0x138>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1e59      	subs	r1, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80051a8:	3301      	adds	r3, #1
 80051aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ae:	e051      	b.n	8005254 <HAL_I2C_Init+0x1dc>
 80051b0:	2304      	movs	r3, #4
 80051b2:	e04f      	b.n	8005254 <HAL_I2C_Init+0x1dc>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d111      	bne.n	80051e0 <HAL_I2C_Init+0x168>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1e58      	subs	r0, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6859      	ldr	r1, [r3, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	440b      	add	r3, r1
 80051ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ce:	3301      	adds	r3, #1
 80051d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf0c      	ite	eq
 80051d8:	2301      	moveq	r3, #1
 80051da:	2300      	movne	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	e012      	b.n	8005206 <HAL_I2C_Init+0x18e>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	1e58      	subs	r0, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6859      	ldr	r1, [r3, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	0099      	lsls	r1, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051f6:	3301      	adds	r3, #1
 80051f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_I2C_Init+0x196>
 800520a:	2301      	movs	r3, #1
 800520c:	e022      	b.n	8005254 <HAL_I2C_Init+0x1dc>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10e      	bne.n	8005234 <HAL_I2C_Init+0x1bc>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1e58      	subs	r0, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6859      	ldr	r1, [r3, #4]
 800521e:	460b      	mov	r3, r1
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	440b      	add	r3, r1
 8005224:	fbb0 f3f3 	udiv	r3, r0, r3
 8005228:	3301      	adds	r3, #1
 800522a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800522e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005232:	e00f      	b.n	8005254 <HAL_I2C_Init+0x1dc>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1e58      	subs	r0, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6859      	ldr	r1, [r3, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	0099      	lsls	r1, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	fbb0 f3f3 	udiv	r3, r0, r3
 800524a:	3301      	adds	r3, #1
 800524c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	6809      	ldr	r1, [r1, #0]
 8005258:	4313      	orrs	r3, r2
 800525a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6911      	ldr	r1, [r2, #16]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	68d2      	ldr	r2, [r2, #12]
 800528e:	4311      	orrs	r1, r2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	430b      	orrs	r3, r1
 8005296:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695a      	ldr	r2, [r3, #20]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	000186a0 	.word	0x000186a0
 80052f0:	001e847f 	.word	0x001e847f
 80052f4:	003d08ff 	.word	0x003d08ff
 80052f8:	431bde83 	.word	0x431bde83
 80052fc:	10624dd3 	.word	0x10624dd3

08005300 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	607a      	str	r2, [r7, #4]
 800530a:	461a      	mov	r2, r3
 800530c:	460b      	mov	r3, r1
 800530e:	817b      	strh	r3, [r7, #10]
 8005310:	4613      	mov	r3, r2
 8005312:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b20      	cmp	r3, #32
 8005322:	f040 8085 	bne.w	8005430 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005326:	4b46      	ldr	r3, [pc, #280]	; (8005440 <HAL_I2C_Master_Transmit_IT+0x140>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	08db      	lsrs	r3, r3, #3
 800532c:	4a45      	ldr	r2, [pc, #276]	; (8005444 <HAL_I2C_Master_Transmit_IT+0x144>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	0a1a      	lsrs	r2, r3, #8
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009a      	lsls	r2, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	3b01      	subs	r3, #1
 8005344:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d116      	bne.n	800537a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f043 0220 	orr.w	r2, r3, #32
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e05b      	b.n	8005432 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b02      	cmp	r3, #2
 8005386:	d0db      	beq.n	8005340 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_I2C_Master_Transmit_IT+0x96>
 8005392:	2302      	movs	r3, #2
 8005394:	e04d      	b.n	8005432 <HAL_I2C_Master_Transmit_IT+0x132>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d007      	beq.n	80053bc <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2221      	movs	r2, #33	; 0x21
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2210      	movs	r2, #16
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	893a      	ldrh	r2, [r7, #8]
 80053ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4a13      	ldr	r2, [pc, #76]	; (8005448 <HAL_I2C_Master_Transmit_IT+0x148>)
 80053fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80053fe:	897a      	ldrh	r2, [r7, #10]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005412:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800542a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	e000      	b.n	8005432 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
  }
}
 8005432:	4618      	mov	r0, r3
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000018 	.word	0x20000018
 8005444:	14f8b589 	.word	0x14f8b589
 8005448:	ffff0000 	.word	0xffff0000

0800544c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800546c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005474:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b10      	cmp	r3, #16
 800547a:	d003      	beq.n	8005484 <HAL_I2C_EV_IRQHandler+0x38>
 800547c:	7bfb      	ldrb	r3, [r7, #15]
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	f040 80bd 	bne.w	80055fe <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10d      	bne.n	80054ba <HAL_I2C_EV_IRQHandler+0x6e>
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80054a4:	d003      	beq.n	80054ae <HAL_I2C_EV_IRQHandler+0x62>
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80054ac:	d101      	bne.n	80054b2 <HAL_I2C_EV_IRQHandler+0x66>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <HAL_I2C_EV_IRQHandler+0x68>
 80054b2:	2300      	movs	r3, #0
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	f000 812e 	beq.w	8005716 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00c      	beq.n	80054de <HAL_I2C_EV_IRQHandler+0x92>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	0a5b      	lsrs	r3, r3, #9
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d006      	beq.n	80054de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f001 fc55 	bl	8006d80 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fd62 	bl	8005fa0 <I2C_Master_SB>
 80054dc:	e08e      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	08db      	lsrs	r3, r3, #3
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <HAL_I2C_EV_IRQHandler+0xb2>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	0a5b      	lsrs	r3, r3, #9
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fdd8 	bl	80060ac <I2C_Master_ADD10>
 80054fc:	e07e      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	085b      	lsrs	r3, r3, #1
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <HAL_I2C_EV_IRQHandler+0xd2>
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	0a5b      	lsrs	r3, r3, #9
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fdf2 	bl	8006100 <I2C_Master_ADDR>
 800551c:	e06e      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	089b      	lsrs	r3, r3, #2
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d037      	beq.n	800559a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005538:	f000 80ef 	beq.w	800571a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	09db      	lsrs	r3, r3, #7
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00f      	beq.n	8005568 <HAL_I2C_EV_IRQHandler+0x11c>
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	0a9b      	lsrs	r3, r3, #10
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d009      	beq.n	8005568 <HAL_I2C_EV_IRQHandler+0x11c>
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	089b      	lsrs	r3, r3, #2
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d103      	bne.n	8005568 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f9ef 	bl	8005944 <I2C_MasterTransmit_TXE>
 8005566:	e049      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	089b      	lsrs	r3, r3, #2
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80d2 	beq.w	800571a <HAL_I2C_EV_IRQHandler+0x2ce>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	0a5b      	lsrs	r3, r3, #9
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 80cb 	beq.w	800571a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	2b10      	cmp	r3, #16
 8005588:	d103      	bne.n	8005592 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fa76 	bl	8005a7c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005590:	e0c3      	b.n	800571a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fada 	bl	8005b4c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005598:	e0bf      	b.n	800571a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a8:	f000 80b7 	beq.w	800571a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	099b      	lsrs	r3, r3, #6
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00f      	beq.n	80055d8 <HAL_I2C_EV_IRQHandler+0x18c>
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	0a9b      	lsrs	r3, r3, #10
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <HAL_I2C_EV_IRQHandler+0x18c>
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	089b      	lsrs	r3, r3, #2
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d103      	bne.n	80055d8 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fb4a 	bl	8005c6a <I2C_MasterReceive_RXNE>
 80055d6:	e011      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	089b      	lsrs	r3, r3, #2
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 809a 	beq.w	800571a <HAL_I2C_EV_IRQHandler+0x2ce>
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	0a5b      	lsrs	r3, r3, #9
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 8093 	beq.w	800571a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fbe9 	bl	8005dcc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055fa:	e08e      	b.n	800571a <HAL_I2C_EV_IRQHandler+0x2ce>
 80055fc:	e08d      	b.n	800571a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d004      	beq.n	8005610 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	e007      	b.n	8005620 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	085b      	lsrs	r3, r3, #1
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d012      	beq.n	8005652 <HAL_I2C_EV_IRQHandler+0x206>
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	0a5b      	lsrs	r3, r3, #9
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00c      	beq.n	8005652 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005648:	69b9      	ldr	r1, [r7, #24]
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 ffa7 	bl	800659e <I2C_Slave_ADDR>
 8005650:	e066      	b.n	8005720 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	091b      	lsrs	r3, r3, #4
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <HAL_I2C_EV_IRQHandler+0x226>
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	0a5b      	lsrs	r3, r3, #9
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 ffdc 	bl	8006628 <I2C_Slave_STOPF>
 8005670:	e056      	b.n	8005720 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005672:	7bbb      	ldrb	r3, [r7, #14]
 8005674:	2b21      	cmp	r3, #33	; 0x21
 8005676:	d002      	beq.n	800567e <HAL_I2C_EV_IRQHandler+0x232>
 8005678:	7bbb      	ldrb	r3, [r7, #14]
 800567a:	2b29      	cmp	r3, #41	; 0x29
 800567c:	d125      	bne.n	80056ca <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	09db      	lsrs	r3, r3, #7
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00f      	beq.n	80056aa <HAL_I2C_EV_IRQHandler+0x25e>
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	0a9b      	lsrs	r3, r3, #10
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_I2C_EV_IRQHandler+0x25e>
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	089b      	lsrs	r3, r3, #2
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 febd 	bl	8006422 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80056a8:	e039      	b.n	800571e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	089b      	lsrs	r3, r3, #2
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d033      	beq.n	800571e <HAL_I2C_EV_IRQHandler+0x2d2>
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	0a5b      	lsrs	r3, r3, #9
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d02d      	beq.n	800571e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 feea 	bl	800649c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80056c8:	e029      	b.n	800571e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	099b      	lsrs	r3, r3, #6
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00f      	beq.n	80056f6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	0a9b      	lsrs	r3, r3, #10
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	089b      	lsrs	r3, r3, #2
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d103      	bne.n	80056f6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fef5 	bl	80064de <I2C_SlaveReceive_RXNE>
 80056f4:	e014      	b.n	8005720 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	089b      	lsrs	r3, r3, #2
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00e      	beq.n	8005720 <HAL_I2C_EV_IRQHandler+0x2d4>
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	0a5b      	lsrs	r3, r3, #9
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 ff23 	bl	800655a <I2C_SlaveReceive_BTF>
 8005714:	e004      	b.n	8005720 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8005716:	bf00      	nop
 8005718:	e002      	b.n	8005720 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800571e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b08a      	sub	sp, #40	; 0x28
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800573e:	2300      	movs	r3, #0
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005748:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	0a1b      	lsrs	r3, r3, #8
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00e      	beq.n	8005774 <HAL_I2C_ER_IRQHandler+0x4e>
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	0a1b      	lsrs	r3, r3, #8
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d008      	beq.n	8005774 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	f043 0301 	orr.w	r3, r3, #1
 8005768:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005772:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	0a5b      	lsrs	r3, r3, #9
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00e      	beq.n	800579e <HAL_I2C_ER_IRQHandler+0x78>
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d008      	beq.n	800579e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	f043 0302 	orr.w	r3, r3, #2
 8005792:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800579c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	0a9b      	lsrs	r3, r3, #10
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d03f      	beq.n	800582a <HAL_I2C_ER_IRQHandler+0x104>
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	0a1b      	lsrs	r3, r3, #8
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d039      	beq.n	800582a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80057b6:	7efb      	ldrb	r3, [r7, #27]
 80057b8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057be:	b29b      	uxth	r3, r3
 80057c0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80057d0:	7ebb      	ldrb	r3, [r7, #26]
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d112      	bne.n	80057fc <HAL_I2C_ER_IRQHandler+0xd6>
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10f      	bne.n	80057fc <HAL_I2C_ER_IRQHandler+0xd6>
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	2b21      	cmp	r3, #33	; 0x21
 80057e0:	d008      	beq.n	80057f4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80057e2:	7cfb      	ldrb	r3, [r7, #19]
 80057e4:	2b29      	cmp	r3, #41	; 0x29
 80057e6:	d005      	beq.n	80057f4 <HAL_I2C_ER_IRQHandler+0xce>
 80057e8:	7cfb      	ldrb	r3, [r7, #19]
 80057ea:	2b28      	cmp	r3, #40	; 0x28
 80057ec:	d106      	bne.n	80057fc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b21      	cmp	r3, #33	; 0x21
 80057f2:	d103      	bne.n	80057fc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f001 f847 	bl	8006888 <I2C_Slave_AF>
 80057fa:	e016      	b.n	800582a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005804:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	f043 0304 	orr.w	r3, r3, #4
 800580c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800580e:	7efb      	ldrb	r3, [r7, #27]
 8005810:	2b10      	cmp	r3, #16
 8005812:	d002      	beq.n	800581a <HAL_I2C_ER_IRQHandler+0xf4>
 8005814:	7efb      	ldrb	r3, [r7, #27]
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d107      	bne.n	800582a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005828:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	0adb      	lsrs	r3, r3, #11
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00e      	beq.n	8005854 <HAL_I2C_ER_IRQHandler+0x12e>
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	0a1b      	lsrs	r3, r3, #8
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	f043 0308 	orr.w	r3, r3, #8
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005852:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	2b00      	cmp	r3, #0
 8005858:	d008      	beq.n	800586c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f001 f87e 	bl	8006968 <I2C_ITError>
  }
}
 800586c:	bf00      	nop
 800586e:	3728      	adds	r7, #40	; 0x28
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
 80058d0:	4613      	mov	r3, r2
 80058d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005952:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800595a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005966:	2b00      	cmp	r3, #0
 8005968:	d150      	bne.n	8005a0c <I2C_MasterTransmit_TXE+0xc8>
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b21      	cmp	r3, #33	; 0x21
 800596e:	d14d      	bne.n	8005a0c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b08      	cmp	r3, #8
 8005974:	d01d      	beq.n	80059b2 <I2C_MasterTransmit_TXE+0x6e>
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b20      	cmp	r3, #32
 800597a:	d01a      	beq.n	80059b2 <I2C_MasterTransmit_TXE+0x6e>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005982:	d016      	beq.n	80059b2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005992:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2211      	movs	r2, #17
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff ff62 	bl	8005874 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80059b0:	e060      	b.n	8005a74 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059c0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b40      	cmp	r3, #64	; 0x40
 80059ea:	d107      	bne.n	80059fc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff ff7d 	bl	80058f4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80059fa:	e03b      	b.n	8005a74 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff ff35 	bl	8005874 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a0a:	e033      	b.n	8005a74 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b21      	cmp	r3, #33	; 0x21
 8005a10:	d005      	beq.n	8005a1e <I2C_MasterTransmit_TXE+0xda>
 8005a12:	7bbb      	ldrb	r3, [r7, #14]
 8005a14:	2b40      	cmp	r3, #64	; 0x40
 8005a16:	d12d      	bne.n	8005a74 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	2b22      	cmp	r3, #34	; 0x22
 8005a1c:	d12a      	bne.n	8005a74 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d108      	bne.n	8005a3a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a36:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005a38:	e01c      	b.n	8005a74 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d103      	bne.n	8005a4e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f880 	bl	8005b4c <I2C_MemoryTransmit_TXE_BTF>
}
 8005a4c:	e012      	b.n	8005a74 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	781a      	ldrb	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a72:	e7ff      	b.n	8005a74 <I2C_MasterTransmit_TXE+0x130>
 8005a74:	bf00      	nop
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b21      	cmp	r3, #33	; 0x21
 8005a94:	d156      	bne.n	8005b44 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d012      	beq.n	8005ac6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	781a      	ldrb	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005ac4:	e03e      	b.n	8005b44 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d01d      	beq.n	8005b08 <I2C_MasterTransmit_BTF+0x8c>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d01a      	beq.n	8005b08 <I2C_MasterTransmit_BTF+0x8c>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ad8:	d016      	beq.n	8005b08 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ae8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2211      	movs	r2, #17
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff feb7 	bl	8005874 <HAL_I2C_MasterTxCpltCallback>
}
 8005b06:	e01d      	b.n	8005b44 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b16:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b26:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff fe98 	bl	8005874 <HAL_I2C_MasterTxCpltCallback>
}
 8005b44:	bf00      	nop
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d11d      	bne.n	8005ba0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d10b      	bne.n	8005b84 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7c:	1c9a      	adds	r2, r3, #2
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005b82:	e06e      	b.n	8005c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	121b      	asrs	r3, r3, #8
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b9e:	e060      	b.n	8005c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d10b      	bne.n	8005bc0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005bbe:	e050      	b.n	8005c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d14c      	bne.n	8005c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	2b22      	cmp	r3, #34	; 0x22
 8005bcc:	d108      	bne.n	8005be0 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bdc:	601a      	str	r2, [r3, #0]
}
 8005bde:	e040      	b.n	8005c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d015      	beq.n	8005c16 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	2b21      	cmp	r3, #33	; 0x21
 8005bee:	d112      	bne.n	8005c16 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	781a      	ldrb	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c14:	e025      	b.n	8005c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d120      	bne.n	8005c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	2b21      	cmp	r3, #33	; 0x21
 8005c24:	d11d      	bne.n	8005c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c34:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c44:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fe49 	bl	80058f4 <HAL_I2C_MemTxCpltCallback>
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b22      	cmp	r3, #34	; 0x22
 8005c7c:	f040 80a2 	bne.w	8005dc4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d921      	bls.n	8005cd2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	f040 8082 	bne.w	8005dc4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cce:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005cd0:	e078      	b.n	8005dc4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d074      	beq.n	8005dc4 <I2C_MasterReceive_RXNE+0x15a>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d002      	beq.n	8005ce6 <I2C_MasterReceive_RXNE+0x7c>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d16e      	bne.n	8005dc4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 f818 	bl	8006d1c <I2C_WaitOnSTOPRequestThroughIT>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d142      	bne.n	8005d78 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d00:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d10:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b40      	cmp	r3, #64	; 0x40
 8005d4a:	d10a      	bne.n	8005d62 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff fdd4 	bl	8005908 <HAL_I2C_MemRxCpltCallback>
}
 8005d60:	e030      	b.n	8005dc4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2212      	movs	r2, #18
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff fd89 	bl	8005888 <HAL_I2C_MasterRxCpltCallback>
}
 8005d76:	e025      	b.n	8005dc4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d86:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7ff fdac 	bl	800591c <HAL_I2C_ErrorCallback>
}
 8005dc4:	bf00      	nop
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d11b      	bne.n	8005e1c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005e1a:	e0bd      	b.n	8005f98 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d129      	bne.n	8005e7a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e34:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d00a      	beq.n	8005e52 <I2C_MasterReceive_BTF+0x86>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d007      	beq.n	8005e52 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e50:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e78:	e08e      	b.n	8005f98 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d176      	bne.n	8005f72 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d002      	beq.n	8005e90 <I2C_MasterReceive_BTF+0xc4>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b10      	cmp	r3, #16
 8005e8e:	d108      	bne.n	8005ea2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	e019      	b.n	8005ed6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d002      	beq.n	8005eae <I2C_MasterReceive_BTF+0xe2>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d108      	bne.n	8005ec0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e00a      	b.n	8005ed6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b10      	cmp	r3, #16
 8005ec4:	d007      	beq.n	8005ed6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f30:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b40      	cmp	r3, #64	; 0x40
 8005f44:	d10a      	bne.n	8005f5c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff fcd7 	bl	8005908 <HAL_I2C_MemRxCpltCallback>
}
 8005f5a:	e01d      	b.n	8005f98 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2212      	movs	r2, #18
 8005f68:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff fc8c 	bl	8005888 <HAL_I2C_MasterRxCpltCallback>
}
 8005f70:	e012      	b.n	8005f98 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f98:	bf00      	nop
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b40      	cmp	r3, #64	; 0x40
 8005fb2:	d117      	bne.n	8005fe4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d109      	bne.n	8005fd0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fcc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005fce:	e067      	b.n	80060a0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	f043 0301 	orr.w	r3, r3, #1
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	611a      	str	r2, [r3, #16]
}
 8005fe2:	e05d      	b.n	80060a0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fec:	d133      	bne.n	8006056 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b21      	cmp	r3, #33	; 0x21
 8005ff8:	d109      	bne.n	800600e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800600a:	611a      	str	r2, [r3, #16]
 800600c:	e008      	b.n	8006020 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006012:	b2db      	uxtb	r3, r3
 8006014:	f043 0301 	orr.w	r3, r3, #1
 8006018:	b2da      	uxtb	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006024:	2b00      	cmp	r3, #0
 8006026:	d004      	beq.n	8006032 <I2C_Master_SB+0x92>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d108      	bne.n	8006044 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	2b00      	cmp	r3, #0
 8006038:	d032      	beq.n	80060a0 <I2C_Master_SB+0x100>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d02d      	beq.n	80060a0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006052:	605a      	str	r2, [r3, #4]
}
 8006054:	e024      	b.n	80060a0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10e      	bne.n	800607c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006062:	b29b      	uxth	r3, r3
 8006064:	11db      	asrs	r3, r3, #7
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f003 0306 	and.w	r3, r3, #6
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f063 030f 	orn	r3, r3, #15
 8006072:	b2da      	uxtb	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	611a      	str	r2, [r3, #16]
}
 800607a:	e011      	b.n	80060a0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006080:	2b01      	cmp	r3, #1
 8006082:	d10d      	bne.n	80060a0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006088:	b29b      	uxth	r3, r3
 800608a:	11db      	asrs	r3, r3, #7
 800608c:	b2db      	uxtb	r3, r3
 800608e:	f003 0306 	and.w	r3, r3, #6
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f063 030e 	orn	r3, r3, #14
 8006098:	b2da      	uxtb	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	611a      	str	r2, [r3, #16]
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <I2C_Master_ADD10+0x26>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d108      	bne.n	80060e4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00c      	beq.n	80060f4 <I2C_Master_ADD10+0x48>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d007      	beq.n	80060f4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060f2:	605a      	str	r2, [r3, #4]
  }
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006100:	b480      	push	{r7}
 8006102:	b091      	sub	sp, #68	; 0x44
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800610e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b22      	cmp	r3, #34	; 0x22
 8006128:	f040 8169 	bne.w	80063fe <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10f      	bne.n	8006154 <I2C_Master_ADDR+0x54>
 8006134:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	d10b      	bne.n	8006154 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800613c:	2300      	movs	r3, #0
 800613e:	633b      	str	r3, [r7, #48]	; 0x30
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	633b      	str	r3, [r7, #48]	; 0x30
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	633b      	str	r3, [r7, #48]	; 0x30
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	e160      	b.n	8006416 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006158:	2b00      	cmp	r3, #0
 800615a:	d11d      	bne.n	8006198 <I2C_Master_ADDR+0x98>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006164:	d118      	bne.n	8006198 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006166:	2300      	movs	r3, #0
 8006168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800618a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	651a      	str	r2, [r3, #80]	; 0x50
 8006196:	e13e      	b.n	8006416 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d113      	bne.n	80061ca <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061a2:	2300      	movs	r3, #0
 80061a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e115      	b.n	80063f6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	f040 808a 	bne.w	80062ea <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80061d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061dc:	d137      	bne.n	800624e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ec:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fc:	d113      	bne.n	8006226 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800620e:	2300      	movs	r3, #0
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	e0e7      	b.n	80063f6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006226:	2300      	movs	r3, #0
 8006228:	623b      	str	r3, [r7, #32]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	623b      	str	r3, [r7, #32]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	623b      	str	r3, [r7, #32]
 800623a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	e0d3      	b.n	80063f6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	2b08      	cmp	r3, #8
 8006252:	d02e      	beq.n	80062b2 <I2C_Master_ADDR+0x1b2>
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	2b20      	cmp	r3, #32
 8006258:	d02b      	beq.n	80062b2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800625a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625c:	2b12      	cmp	r3, #18
 800625e:	d102      	bne.n	8006266 <I2C_Master_ADDR+0x166>
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	2b01      	cmp	r3, #1
 8006264:	d125      	bne.n	80062b2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	2b04      	cmp	r3, #4
 800626a:	d00e      	beq.n	800628a <I2C_Master_ADDR+0x18a>
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	2b02      	cmp	r3, #2
 8006270:	d00b      	beq.n	800628a <I2C_Master_ADDR+0x18a>
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	2b10      	cmp	r3, #16
 8006276:	d008      	beq.n	800628a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	e007      	b.n	800629a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006298:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800629a:	2300      	movs	r3, #0
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	61fb      	str	r3, [r7, #28]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	61fb      	str	r3, [r7, #28]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	e0a1      	b.n	80063f6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062c2:	2300      	movs	r3, #0
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	e085      	b.n	80063f6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d14d      	bne.n	8006390 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d016      	beq.n	8006328 <I2C_Master_ADDR+0x228>
 80062fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d013      	beq.n	8006328 <I2C_Master_ADDR+0x228>
 8006300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006302:	2b10      	cmp	r3, #16
 8006304:	d010      	beq.n	8006328 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006314:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	e007      	b.n	8006338 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006336:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006346:	d117      	bne.n	8006378 <I2C_Master_ADDR+0x278>
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800634e:	d00b      	beq.n	8006368 <I2C_Master_ADDR+0x268>
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	2b01      	cmp	r3, #1
 8006354:	d008      	beq.n	8006368 <I2C_Master_ADDR+0x268>
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	2b08      	cmp	r3, #8
 800635a:	d005      	beq.n	8006368 <I2C_Master_ADDR+0x268>
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	2b10      	cmp	r3, #16
 8006360:	d002      	beq.n	8006368 <I2C_Master_ADDR+0x268>
 8006362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006364:	2b20      	cmp	r3, #32
 8006366:	d107      	bne.n	8006378 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006376:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006378:	2300      	movs	r3, #0
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	e032      	b.n	80063f6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800639e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ae:	d117      	bne.n	80063e0 <I2C_Master_ADDR+0x2e0>
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063b6:	d00b      	beq.n	80063d0 <I2C_Master_ADDR+0x2d0>
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d008      	beq.n	80063d0 <I2C_Master_ADDR+0x2d0>
 80063be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d005      	beq.n	80063d0 <I2C_Master_ADDR+0x2d0>
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	2b10      	cmp	r3, #16
 80063c8:	d002      	beq.n	80063d0 <I2C_Master_ADDR+0x2d0>
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d107      	bne.n	80063e0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063e0:	2300      	movs	r3, #0
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	613b      	str	r3, [r7, #16]
 80063f4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80063fc:	e00b      	b.n	8006416 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	68fb      	ldr	r3, [r7, #12]
}
 8006414:	e7ff      	b.n	8006416 <I2C_Master_ADDR+0x316>
 8006416:	bf00      	nop
 8006418:	3744      	adds	r7, #68	; 0x44
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006430:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d02b      	beq.n	8006494 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	781a      	ldrb	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006456:	b29b      	uxth	r3, r3
 8006458:	3b01      	subs	r3, #1
 800645a:	b29a      	uxth	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d114      	bne.n	8006494 <I2C_SlaveTransmit_TXE+0x72>
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	2b29      	cmp	r3, #41	; 0x29
 800646e:	d111      	bne.n	8006494 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800647e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2221      	movs	r2, #33	; 0x21
 8006484:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2228      	movs	r2, #40	; 0x28
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7ff fa04 	bl	800589c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006494:	bf00      	nop
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d011      	beq.n	80064d2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	781a      	ldrb	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d02c      	beq.n	8006552 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29b      	uxth	r3, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006522:	b29b      	uxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d114      	bne.n	8006552 <I2C_SlaveReceive_RXNE+0x74>
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	2b2a      	cmp	r3, #42	; 0x2a
 800652c:	d111      	bne.n	8006552 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2222      	movs	r2, #34	; 0x22
 8006542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2228      	movs	r2, #40	; 0x28
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff f9af 	bl	80058b0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d012      	beq.n	8006592 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80065a8:	2300      	movs	r3, #0
 80065aa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065b8:	2b28      	cmp	r3, #40	; 0x28
 80065ba:	d127      	bne.n	800660c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ca:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	089b      	lsrs	r3, r3, #2
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80065d8:	2301      	movs	r3, #1
 80065da:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	09db      	lsrs	r3, r3, #7
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d103      	bne.n	80065f0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	81bb      	strh	r3, [r7, #12]
 80065ee:	e002      	b.n	80065f6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80065fe:	89ba      	ldrh	r2, [r7, #12]
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff f95d 	bl	80058c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800660a:	e008      	b.n	800661e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f06f 0202 	mvn.w	r2, #2
 8006614:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800661e:	bf00      	nop
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006636:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006646:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006648:	2300      	movs	r3, #0
 800664a:	60bb      	str	r3, [r7, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	60bb      	str	r3, [r7, #8]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006674:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006684:	d172      	bne.n	800676c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	2b22      	cmp	r3, #34	; 0x22
 800668a:	d002      	beq.n	8006692 <I2C_Slave_STOPF+0x6a>
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	2b2a      	cmp	r3, #42	; 0x2a
 8006690:	d135      	bne.n	80066fe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	b29a      	uxth	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	f043 0204 	orr.w	r2, r3, #4
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe fa18 	bl	8004b00 <HAL_DMA_GetState>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d049      	beq.n	800676a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	4a69      	ldr	r2, [pc, #420]	; (8006880 <I2C_Slave_STOPF+0x258>)
 80066dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fe f860 	bl	80047a8 <HAL_DMA_Abort_IT>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d03d      	beq.n	800676a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066f8:	4610      	mov	r0, r2
 80066fa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066fc:	e035      	b.n	800676a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	b29a      	uxth	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	f043 0204 	orr.w	r2, r3, #4
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006730:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe f9e2 	bl	8004b00 <HAL_DMA_GetState>
 800673c:	4603      	mov	r3, r0
 800673e:	2b01      	cmp	r3, #1
 8006740:	d014      	beq.n	800676c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006746:	4a4e      	ldr	r2, [pc, #312]	; (8006880 <I2C_Slave_STOPF+0x258>)
 8006748:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe f82a 	bl	80047a8 <HAL_DMA_Abort_IT>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006764:	4610      	mov	r0, r2
 8006766:	4798      	blx	r3
 8006768:	e000      	b.n	800676c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800676a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d03e      	beq.n	80067f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b04      	cmp	r3, #4
 8006782:	d112      	bne.n	80067aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b4:	2b40      	cmp	r3, #64	; 0x40
 80067b6:	d112      	bne.n	80067de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	f043 0204 	orr.w	r2, r3, #4
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f8b3 	bl	8006968 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006802:	e039      	b.n	8006878 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b2a      	cmp	r3, #42	; 0x2a
 8006808:	d109      	bne.n	800681e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2228      	movs	r2, #40	; 0x28
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff f849 	bl	80058b0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b28      	cmp	r3, #40	; 0x28
 8006828:	d111      	bne.n	800684e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a15      	ldr	r2, [pc, #84]	; (8006884 <I2C_Slave_STOPF+0x25c>)
 800682e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2220      	movs	r2, #32
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff f84a 	bl	80058e0 <HAL_I2C_ListenCpltCallback>
}
 800684c:	e014      	b.n	8006878 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	2b22      	cmp	r3, #34	; 0x22
 8006854:	d002      	beq.n	800685c <I2C_Slave_STOPF+0x234>
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	2b22      	cmp	r3, #34	; 0x22
 800685a:	d10d      	bne.n	8006878 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff f81c 	bl	80058b0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006878:	bf00      	nop
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	08006bcd 	.word	0x08006bcd
 8006884:	ffff0000 	.word	0xffff0000

08006888 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006896:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d002      	beq.n	80068aa <I2C_Slave_AF+0x22>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	d129      	bne.n	80068fe <I2C_Slave_AF+0x76>
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	2b28      	cmp	r3, #40	; 0x28
 80068ae:	d126      	bne.n	80068fe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a2c      	ldr	r2, [pc, #176]	; (8006964 <I2C_Slave_AF+0xdc>)
 80068b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068c4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068ce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068de:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7fe fff2 	bl	80058e0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80068fc:	e02e      	b.n	800695c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	2b21      	cmp	r3, #33	; 0x21
 8006902:	d126      	bne.n	8006952 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a17      	ldr	r2, [pc, #92]	; (8006964 <I2C_Slave_AF+0xdc>)
 8006908:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2221      	movs	r2, #33	; 0x21
 800690e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800692e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006938:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006948:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fe ffa6 	bl	800589c <HAL_I2C_SlaveTxCpltCallback>
}
 8006950:	e004      	b.n	800695c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800695a:	615a      	str	r2, [r3, #20]
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	ffff0000 	.word	0xffff0000

08006968 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006976:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800697e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	2b10      	cmp	r3, #16
 8006984:	d002      	beq.n	800698c <I2C_ITError+0x24>
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	2b40      	cmp	r3, #64	; 0x40
 800698a:	d10a      	bne.n	80069a2 <I2C_ITError+0x3a>
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	2b22      	cmp	r3, #34	; 0x22
 8006990:	d107      	bne.n	80069a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069a8:	2b28      	cmp	r3, #40	; 0x28
 80069aa:	d107      	bne.n	80069bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2228      	movs	r2, #40	; 0x28
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069ba:	e015      	b.n	80069e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ca:	d00a      	beq.n	80069e2 <I2C_ITError+0x7a>
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	2b60      	cmp	r3, #96	; 0x60
 80069d0:	d007      	beq.n	80069e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2220      	movs	r2, #32
 80069d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f6:	d162      	bne.n	8006abe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a06:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d020      	beq.n	8006a58 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a1a:	4a6a      	ldr	r2, [pc, #424]	; (8006bc4 <I2C_ITError+0x25c>)
 8006a1c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fd fec0 	bl	80047a8 <HAL_DMA_Abort_IT>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8089 	beq.w	8006b42 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a52:	4610      	mov	r0, r2
 8006a54:	4798      	blx	r3
 8006a56:	e074      	b.n	8006b42 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	4a59      	ldr	r2, [pc, #356]	; (8006bc4 <I2C_ITError+0x25c>)
 8006a5e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fd fe9f 	bl	80047a8 <HAL_DMA_Abort_IT>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d068      	beq.n	8006b42 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7a:	2b40      	cmp	r3, #64	; 0x40
 8006a7c:	d10b      	bne.n	8006a96 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	691a      	ldr	r2, [r3, #16]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0201 	bic.w	r2, r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4798      	blx	r3
 8006abc:	e041      	b.n	8006b42 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b60      	cmp	r3, #96	; 0x60
 8006ac8:	d125      	bne.n	8006b16 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae2:	2b40      	cmp	r3, #64	; 0x40
 8006ae4:	d10b      	bne.n	8006afe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691a      	ldr	r2, [r3, #16]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0201 	bic.w	r2, r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fe ff0e 	bl	8005930 <HAL_I2C_AbortCpltCallback>
 8006b14:	e015      	b.n	8006b42 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b20:	2b40      	cmp	r3, #64	; 0x40
 8006b22:	d10b      	bne.n	8006b3c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7fe feed 	bl	800591c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10e      	bne.n	8006b70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d109      	bne.n	8006b70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d104      	bne.n	8006b70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d007      	beq.n	8006b80 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b7e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b86:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d113      	bne.n	8006bbc <I2C_ITError+0x254>
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	2b28      	cmp	r3, #40	; 0x28
 8006b98:	d110      	bne.n	8006bbc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a0a      	ldr	r2, [pc, #40]	; (8006bc8 <I2C_ITError+0x260>)
 8006b9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fe fe92 	bl	80058e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	08006bcd 	.word	0x08006bcd
 8006bc8:	ffff0000 	.word	0xffff0000

08006bcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006be6:	4b4b      	ldr	r3, [pc, #300]	; (8006d14 <I2C_DMAAbort+0x148>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	08db      	lsrs	r3, r3, #3
 8006bec:	4a4a      	ldr	r2, [pc, #296]	; (8006d18 <I2C_DMAAbort+0x14c>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	0a1a      	lsrs	r2, r3, #8
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	00da      	lsls	r2, r3, #3
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f043 0220 	orr.w	r2, r3, #32
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006c12:	e00a      	b.n	8006c2a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c28:	d0ea      	beq.n	8006c00 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c36:	2200      	movs	r2, #0
 8006c38:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	2200      	movs	r2, #0
 8006c48:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c58:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0201 	bic.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b60      	cmp	r3, #96	; 0x60
 8006c9a:	d10e      	bne.n	8006cba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006cb2:	6978      	ldr	r0, [r7, #20]
 8006cb4:	f7fe fe3c 	bl	8005930 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006cb8:	e027      	b.n	8006d0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cba:	7cfb      	ldrb	r3, [r7, #19]
 8006cbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006cc0:	2b28      	cmp	r3, #40	; 0x28
 8006cc2:	d117      	bne.n	8006cf4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ce2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2228      	movs	r2, #40	; 0x28
 8006cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006cf2:	e007      	b.n	8006d04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006d04:	6978      	ldr	r0, [r7, #20]
 8006d06:	f7fe fe09 	bl	800591c <HAL_I2C_ErrorCallback>
}
 8006d0a:	bf00      	nop
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000018 	.word	0x20000018
 8006d18:	14f8b589 	.word	0x14f8b589

08006d1c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d28:	4b13      	ldr	r3, [pc, #76]	; (8006d78 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	08db      	lsrs	r3, r3, #3
 8006d2e:	4a13      	ldr	r2, [pc, #76]	; (8006d7c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006d30:	fba2 2303 	umull	r2, r3, r2, r3
 8006d34:	0a1a      	lsrs	r2, r3, #8
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d107      	bne.n	8006d5a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	f043 0220 	orr.w	r2, r3, #32
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e008      	b.n	8006d6c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d68:	d0e9      	beq.n	8006d3e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	20000018 	.word	0x20000018
 8006d7c:	14f8b589 	.word	0x14f8b589

08006d80 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006d90:	d103      	bne.n	8006d9a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006d98:	e007      	b.n	8006daa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006da2:	d102      	bne.n	8006daa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2208      	movs	r2, #8
 8006da8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
	...

08006db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e264      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d075      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dd6:	4ba3      	ldr	r3, [pc, #652]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 030c 	and.w	r3, r3, #12
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d00c      	beq.n	8006dfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006de2:	4ba0      	ldr	r3, [pc, #640]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d112      	bne.n	8006e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dee:	4b9d      	ldr	r3, [pc, #628]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dfa:	d10b      	bne.n	8006e14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dfc:	4b99      	ldr	r3, [pc, #612]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d05b      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x108>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d157      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e23f      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e1c:	d106      	bne.n	8006e2c <HAL_RCC_OscConfig+0x74>
 8006e1e:	4b91      	ldr	r3, [pc, #580]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a90      	ldr	r2, [pc, #576]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	e01d      	b.n	8006e68 <HAL_RCC_OscConfig+0xb0>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e34:	d10c      	bne.n	8006e50 <HAL_RCC_OscConfig+0x98>
 8006e36:	4b8b      	ldr	r3, [pc, #556]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a8a      	ldr	r2, [pc, #552]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	4b88      	ldr	r3, [pc, #544]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a87      	ldr	r2, [pc, #540]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	e00b      	b.n	8006e68 <HAL_RCC_OscConfig+0xb0>
 8006e50:	4b84      	ldr	r3, [pc, #528]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a83      	ldr	r2, [pc, #524]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	4b81      	ldr	r3, [pc, #516]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a80      	ldr	r2, [pc, #512]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d013      	beq.n	8006e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e70:	f7fd fa06 	bl	8004280 <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e78:	f7fd fa02 	bl	8004280 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b64      	cmp	r3, #100	; 0x64
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e204      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e8a:	4b76      	ldr	r3, [pc, #472]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0f0      	beq.n	8006e78 <HAL_RCC_OscConfig+0xc0>
 8006e96:	e014      	b.n	8006ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e98:	f7fd f9f2 	bl	8004280 <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ea0:	f7fd f9ee 	bl	8004280 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b64      	cmp	r3, #100	; 0x64
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e1f0      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eb2:	4b6c      	ldr	r3, [pc, #432]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f0      	bne.n	8006ea0 <HAL_RCC_OscConfig+0xe8>
 8006ebe:	e000      	b.n	8006ec2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d063      	beq.n	8006f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ece:	4b65      	ldr	r3, [pc, #404]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 030c 	and.w	r3, r3, #12
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00b      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eda:	4b62      	ldr	r3, [pc, #392]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	d11c      	bne.n	8006f20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ee6:	4b5f      	ldr	r3, [pc, #380]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d116      	bne.n	8006f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ef2:	4b5c      	ldr	r3, [pc, #368]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d005      	beq.n	8006f0a <HAL_RCC_OscConfig+0x152>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d001      	beq.n	8006f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e1c4      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f0a:	4b56      	ldr	r3, [pc, #344]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	4952      	ldr	r1, [pc, #328]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f1e:	e03a      	b.n	8006f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d020      	beq.n	8006f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f28:	4b4f      	ldr	r3, [pc, #316]	; (8007068 <HAL_RCC_OscConfig+0x2b0>)
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2e:	f7fd f9a7 	bl	8004280 <HAL_GetTick>
 8006f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f34:	e008      	b.n	8006f48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f36:	f7fd f9a3 	bl	8004280 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e1a5      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f48:	4b46      	ldr	r3, [pc, #280]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0f0      	beq.n	8006f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f54:	4b43      	ldr	r3, [pc, #268]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	4940      	ldr	r1, [pc, #256]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	600b      	str	r3, [r1, #0]
 8006f68:	e015      	b.n	8006f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f6a:	4b3f      	ldr	r3, [pc, #252]	; (8007068 <HAL_RCC_OscConfig+0x2b0>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f70:	f7fd f986 	bl	8004280 <HAL_GetTick>
 8006f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f76:	e008      	b.n	8006f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f78:	f7fd f982 	bl	8004280 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e184      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f8a:	4b36      	ldr	r3, [pc, #216]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1f0      	bne.n	8006f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d030      	beq.n	8007004 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d016      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006faa:	4b30      	ldr	r3, [pc, #192]	; (800706c <HAL_RCC_OscConfig+0x2b4>)
 8006fac:	2201      	movs	r2, #1
 8006fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb0:	f7fd f966 	bl	8004280 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fb8:	f7fd f962 	bl	8004280 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e164      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fca:	4b26      	ldr	r3, [pc, #152]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0f0      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x200>
 8006fd6:	e015      	b.n	8007004 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fd8:	4b24      	ldr	r3, [pc, #144]	; (800706c <HAL_RCC_OscConfig+0x2b4>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fde:	f7fd f94f 	bl	8004280 <HAL_GetTick>
 8006fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fe4:	e008      	b.n	8006ff8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fe6:	f7fd f94b 	bl	8004280 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e14d      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ff8:	4b1a      	ldr	r3, [pc, #104]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8006ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1f0      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0304 	and.w	r3, r3, #4
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 80a0 	beq.w	8007152 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007012:	2300      	movs	r3, #0
 8007014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007016:	4b13      	ldr	r3, [pc, #76]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10f      	bne.n	8007042 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007022:	2300      	movs	r3, #0
 8007024:	60bb      	str	r3, [r7, #8]
 8007026:	4b0f      	ldr	r3, [pc, #60]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	4a0e      	ldr	r2, [pc, #56]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 800702c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007030:	6413      	str	r3, [r2, #64]	; 0x40
 8007032:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <HAL_RCC_OscConfig+0x2ac>)
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800703a:	60bb      	str	r3, [r7, #8]
 800703c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800703e:	2301      	movs	r3, #1
 8007040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007042:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <HAL_RCC_OscConfig+0x2b8>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704a:	2b00      	cmp	r3, #0
 800704c:	d121      	bne.n	8007092 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800704e:	4b08      	ldr	r3, [pc, #32]	; (8007070 <HAL_RCC_OscConfig+0x2b8>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a07      	ldr	r2, [pc, #28]	; (8007070 <HAL_RCC_OscConfig+0x2b8>)
 8007054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800705a:	f7fd f911 	bl	8004280 <HAL_GetTick>
 800705e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007060:	e011      	b.n	8007086 <HAL_RCC_OscConfig+0x2ce>
 8007062:	bf00      	nop
 8007064:	40023800 	.word	0x40023800
 8007068:	42470000 	.word	0x42470000
 800706c:	42470e80 	.word	0x42470e80
 8007070:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007074:	f7fd f904 	bl	8004280 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e106      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007086:	4b85      	ldr	r3, [pc, #532]	; (800729c <HAL_RCC_OscConfig+0x4e4>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0f0      	beq.n	8007074 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d106      	bne.n	80070a8 <HAL_RCC_OscConfig+0x2f0>
 800709a:	4b81      	ldr	r3, [pc, #516]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	4a80      	ldr	r2, [pc, #512]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 80070a0:	f043 0301 	orr.w	r3, r3, #1
 80070a4:	6713      	str	r3, [r2, #112]	; 0x70
 80070a6:	e01c      	b.n	80070e2 <HAL_RCC_OscConfig+0x32a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	2b05      	cmp	r3, #5
 80070ae:	d10c      	bne.n	80070ca <HAL_RCC_OscConfig+0x312>
 80070b0:	4b7b      	ldr	r3, [pc, #492]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 80070b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b4:	4a7a      	ldr	r2, [pc, #488]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 80070b6:	f043 0304 	orr.w	r3, r3, #4
 80070ba:	6713      	str	r3, [r2, #112]	; 0x70
 80070bc:	4b78      	ldr	r3, [pc, #480]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 80070be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c0:	4a77      	ldr	r2, [pc, #476]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	6713      	str	r3, [r2, #112]	; 0x70
 80070c8:	e00b      	b.n	80070e2 <HAL_RCC_OscConfig+0x32a>
 80070ca:	4b75      	ldr	r3, [pc, #468]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 80070cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ce:	4a74      	ldr	r2, [pc, #464]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 80070d0:	f023 0301 	bic.w	r3, r3, #1
 80070d4:	6713      	str	r3, [r2, #112]	; 0x70
 80070d6:	4b72      	ldr	r3, [pc, #456]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 80070d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070da:	4a71      	ldr	r2, [pc, #452]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 80070dc:	f023 0304 	bic.w	r3, r3, #4
 80070e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d015      	beq.n	8007116 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ea:	f7fd f8c9 	bl	8004280 <HAL_GetTick>
 80070ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070f0:	e00a      	b.n	8007108 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070f2:	f7fd f8c5 	bl	8004280 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007100:	4293      	cmp	r3, r2
 8007102:	d901      	bls.n	8007108 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e0c5      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007108:	4b65      	ldr	r3, [pc, #404]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 800710a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0ee      	beq.n	80070f2 <HAL_RCC_OscConfig+0x33a>
 8007114:	e014      	b.n	8007140 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007116:	f7fd f8b3 	bl	8004280 <HAL_GetTick>
 800711a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800711c:	e00a      	b.n	8007134 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800711e:	f7fd f8af 	bl	8004280 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	f241 3288 	movw	r2, #5000	; 0x1388
 800712c:	4293      	cmp	r3, r2
 800712e:	d901      	bls.n	8007134 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e0af      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007134:	4b5a      	ldr	r3, [pc, #360]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 8007136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1ee      	bne.n	800711e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007140:	7dfb      	ldrb	r3, [r7, #23]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d105      	bne.n	8007152 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007146:	4b56      	ldr	r3, [pc, #344]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 8007148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714a:	4a55      	ldr	r2, [pc, #340]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 800714c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007150:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 809b 	beq.w	8007292 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800715c:	4b50      	ldr	r3, [pc, #320]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f003 030c 	and.w	r3, r3, #12
 8007164:	2b08      	cmp	r3, #8
 8007166:	d05c      	beq.n	8007222 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	2b02      	cmp	r3, #2
 800716e:	d141      	bne.n	80071f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007170:	4b4c      	ldr	r3, [pc, #304]	; (80072a4 <HAL_RCC_OscConfig+0x4ec>)
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007176:	f7fd f883 	bl	8004280 <HAL_GetTick>
 800717a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717c:	e008      	b.n	8007190 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800717e:	f7fd f87f 	bl	8004280 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d901      	bls.n	8007190 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e081      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007190:	4b43      	ldr	r3, [pc, #268]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f0      	bne.n	800717e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	431a      	orrs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	019b      	lsls	r3, r3, #6
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b2:	085b      	lsrs	r3, r3, #1
 80071b4:	3b01      	subs	r3, #1
 80071b6:	041b      	lsls	r3, r3, #16
 80071b8:	431a      	orrs	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071be:	061b      	lsls	r3, r3, #24
 80071c0:	4937      	ldr	r1, [pc, #220]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071c6:	4b37      	ldr	r3, [pc, #220]	; (80072a4 <HAL_RCC_OscConfig+0x4ec>)
 80071c8:	2201      	movs	r2, #1
 80071ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071cc:	f7fd f858 	bl	8004280 <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071d4:	f7fd f854 	bl	8004280 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e056      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071e6:	4b2e      	ldr	r3, [pc, #184]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0f0      	beq.n	80071d4 <HAL_RCC_OscConfig+0x41c>
 80071f2:	e04e      	b.n	8007292 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f4:	4b2b      	ldr	r3, [pc, #172]	; (80072a4 <HAL_RCC_OscConfig+0x4ec>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071fa:	f7fd f841 	bl	8004280 <HAL_GetTick>
 80071fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007200:	e008      	b.n	8007214 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007202:	f7fd f83d 	bl	8004280 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d901      	bls.n	8007214 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e03f      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007214:	4b22      	ldr	r3, [pc, #136]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1f0      	bne.n	8007202 <HAL_RCC_OscConfig+0x44a>
 8007220:	e037      	b.n	8007292 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e032      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800722e:	4b1c      	ldr	r3, [pc, #112]	; (80072a0 <HAL_RCC_OscConfig+0x4e8>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d028      	beq.n	800728e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007246:	429a      	cmp	r2, r3
 8007248:	d121      	bne.n	800728e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007254:	429a      	cmp	r2, r3
 8007256:	d11a      	bne.n	800728e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800725e:	4013      	ands	r3, r2
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007264:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007266:	4293      	cmp	r3, r2
 8007268:	d111      	bne.n	800728e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007274:	085b      	lsrs	r3, r3, #1
 8007276:	3b01      	subs	r3, #1
 8007278:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800727a:	429a      	cmp	r2, r3
 800727c:	d107      	bne.n	800728e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800728a:	429a      	cmp	r2, r3
 800728c:	d001      	beq.n	8007292 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	40007000 	.word	0x40007000
 80072a0:	40023800 	.word	0x40023800
 80072a4:	42470060 	.word	0x42470060

080072a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e0cc      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072bc:	4b68      	ldr	r3, [pc, #416]	; (8007460 <HAL_RCC_ClockConfig+0x1b8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d90c      	bls.n	80072e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ca:	4b65      	ldr	r3, [pc, #404]	; (8007460 <HAL_RCC_ClockConfig+0x1b8>)
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072d2:	4b63      	ldr	r3, [pc, #396]	; (8007460 <HAL_RCC_ClockConfig+0x1b8>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d001      	beq.n	80072e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e0b8      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d020      	beq.n	8007332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072fc:	4b59      	ldr	r3, [pc, #356]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	4a58      	ldr	r2, [pc, #352]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007306:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b00      	cmp	r3, #0
 8007312:	d005      	beq.n	8007320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007314:	4b53      	ldr	r3, [pc, #332]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	4a52      	ldr	r2, [pc, #328]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 800731a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800731e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007320:	4b50      	ldr	r3, [pc, #320]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	494d      	ldr	r1, [pc, #308]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 800732e:	4313      	orrs	r3, r2
 8007330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d044      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d107      	bne.n	8007356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007346:	4b47      	ldr	r3, [pc, #284]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d119      	bne.n	8007386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e07f      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d003      	beq.n	8007366 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007362:	2b03      	cmp	r3, #3
 8007364:	d107      	bne.n	8007376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007366:	4b3f      	ldr	r3, [pc, #252]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d109      	bne.n	8007386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e06f      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007376:	4b3b      	ldr	r3, [pc, #236]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e067      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007386:	4b37      	ldr	r3, [pc, #220]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f023 0203 	bic.w	r2, r3, #3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	4934      	ldr	r1, [pc, #208]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007394:	4313      	orrs	r3, r2
 8007396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007398:	f7fc ff72 	bl	8004280 <HAL_GetTick>
 800739c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800739e:	e00a      	b.n	80073b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073a0:	f7fc ff6e 	bl	8004280 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e04f      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073b6:	4b2b      	ldr	r3, [pc, #172]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 020c 	and.w	r2, r3, #12
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d1eb      	bne.n	80073a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073c8:	4b25      	ldr	r3, [pc, #148]	; (8007460 <HAL_RCC_ClockConfig+0x1b8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d20c      	bcs.n	80073f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073d6:	4b22      	ldr	r3, [pc, #136]	; (8007460 <HAL_RCC_ClockConfig+0x1b8>)
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073de:	4b20      	ldr	r3, [pc, #128]	; (8007460 <HAL_RCC_ClockConfig+0x1b8>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d001      	beq.n	80073f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e032      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d008      	beq.n	800740e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073fc:	4b19      	ldr	r3, [pc, #100]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	4916      	ldr	r1, [pc, #88]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 800740a:	4313      	orrs	r3, r2
 800740c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d009      	beq.n	800742e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800741a:	4b12      	ldr	r3, [pc, #72]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	490e      	ldr	r1, [pc, #56]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 800742a:	4313      	orrs	r3, r2
 800742c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800742e:	f000 f821 	bl	8007474 <HAL_RCC_GetSysClockFreq>
 8007432:	4602      	mov	r2, r0
 8007434:	4b0b      	ldr	r3, [pc, #44]	; (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	091b      	lsrs	r3, r3, #4
 800743a:	f003 030f 	and.w	r3, r3, #15
 800743e:	490a      	ldr	r1, [pc, #40]	; (8007468 <HAL_RCC_ClockConfig+0x1c0>)
 8007440:	5ccb      	ldrb	r3, [r1, r3]
 8007442:	fa22 f303 	lsr.w	r3, r2, r3
 8007446:	4a09      	ldr	r2, [pc, #36]	; (800746c <HAL_RCC_ClockConfig+0x1c4>)
 8007448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800744a:	4b09      	ldr	r3, [pc, #36]	; (8007470 <HAL_RCC_ClockConfig+0x1c8>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f7fc fed2 	bl	80041f8 <HAL_InitTick>

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	40023c00 	.word	0x40023c00
 8007464:	40023800 	.word	0x40023800
 8007468:	08009b50 	.word	0x08009b50
 800746c:	20000018 	.word	0x20000018
 8007470:	2000001c 	.word	0x2000001c

08007474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007474:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	607b      	str	r3, [r7, #4]
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	2300      	movs	r3, #0
 8007486:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800748c:	4b67      	ldr	r3, [pc, #412]	; (800762c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f003 030c 	and.w	r3, r3, #12
 8007494:	2b08      	cmp	r3, #8
 8007496:	d00d      	beq.n	80074b4 <HAL_RCC_GetSysClockFreq+0x40>
 8007498:	2b08      	cmp	r3, #8
 800749a:	f200 80bd 	bhi.w	8007618 <HAL_RCC_GetSysClockFreq+0x1a4>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_RCC_GetSysClockFreq+0x34>
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d003      	beq.n	80074ae <HAL_RCC_GetSysClockFreq+0x3a>
 80074a6:	e0b7      	b.n	8007618 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074a8:	4b61      	ldr	r3, [pc, #388]	; (8007630 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80074aa:	60bb      	str	r3, [r7, #8]
       break;
 80074ac:	e0b7      	b.n	800761e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074ae:	4b61      	ldr	r3, [pc, #388]	; (8007634 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80074b0:	60bb      	str	r3, [r7, #8]
      break;
 80074b2:	e0b4      	b.n	800761e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074b4:	4b5d      	ldr	r3, [pc, #372]	; (800762c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074be:	4b5b      	ldr	r3, [pc, #364]	; (800762c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d04d      	beq.n	8007566 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074ca:	4b58      	ldr	r3, [pc, #352]	; (800762c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	099b      	lsrs	r3, r3, #6
 80074d0:	461a      	mov	r2, r3
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074da:	f04f 0100 	mov.w	r1, #0
 80074de:	ea02 0800 	and.w	r8, r2, r0
 80074e2:	ea03 0901 	and.w	r9, r3, r1
 80074e6:	4640      	mov	r0, r8
 80074e8:	4649      	mov	r1, r9
 80074ea:	f04f 0200 	mov.w	r2, #0
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	014b      	lsls	r3, r1, #5
 80074f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074f8:	0142      	lsls	r2, r0, #5
 80074fa:	4610      	mov	r0, r2
 80074fc:	4619      	mov	r1, r3
 80074fe:	ebb0 0008 	subs.w	r0, r0, r8
 8007502:	eb61 0109 	sbc.w	r1, r1, r9
 8007506:	f04f 0200 	mov.w	r2, #0
 800750a:	f04f 0300 	mov.w	r3, #0
 800750e:	018b      	lsls	r3, r1, #6
 8007510:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007514:	0182      	lsls	r2, r0, #6
 8007516:	1a12      	subs	r2, r2, r0
 8007518:	eb63 0301 	sbc.w	r3, r3, r1
 800751c:	f04f 0000 	mov.w	r0, #0
 8007520:	f04f 0100 	mov.w	r1, #0
 8007524:	00d9      	lsls	r1, r3, #3
 8007526:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800752a:	00d0      	lsls	r0, r2, #3
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	eb12 0208 	adds.w	r2, r2, r8
 8007534:	eb43 0309 	adc.w	r3, r3, r9
 8007538:	f04f 0000 	mov.w	r0, #0
 800753c:	f04f 0100 	mov.w	r1, #0
 8007540:	0259      	lsls	r1, r3, #9
 8007542:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007546:	0250      	lsls	r0, r2, #9
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4610      	mov	r0, r2
 800754e:	4619      	mov	r1, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	461a      	mov	r2, r3
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	f7f9 fc28 	bl	8000dac <__aeabi_uldivmod>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4613      	mov	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	e04a      	b.n	80075fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007566:	4b31      	ldr	r3, [pc, #196]	; (800762c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	099b      	lsrs	r3, r3, #6
 800756c:	461a      	mov	r2, r3
 800756e:	f04f 0300 	mov.w	r3, #0
 8007572:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007576:	f04f 0100 	mov.w	r1, #0
 800757a:	ea02 0400 	and.w	r4, r2, r0
 800757e:	ea03 0501 	and.w	r5, r3, r1
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	f04f 0300 	mov.w	r3, #0
 800758e:	014b      	lsls	r3, r1, #5
 8007590:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007594:	0142      	lsls	r2, r0, #5
 8007596:	4610      	mov	r0, r2
 8007598:	4619      	mov	r1, r3
 800759a:	1b00      	subs	r0, r0, r4
 800759c:	eb61 0105 	sbc.w	r1, r1, r5
 80075a0:	f04f 0200 	mov.w	r2, #0
 80075a4:	f04f 0300 	mov.w	r3, #0
 80075a8:	018b      	lsls	r3, r1, #6
 80075aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80075ae:	0182      	lsls	r2, r0, #6
 80075b0:	1a12      	subs	r2, r2, r0
 80075b2:	eb63 0301 	sbc.w	r3, r3, r1
 80075b6:	f04f 0000 	mov.w	r0, #0
 80075ba:	f04f 0100 	mov.w	r1, #0
 80075be:	00d9      	lsls	r1, r3, #3
 80075c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075c4:	00d0      	lsls	r0, r2, #3
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	1912      	adds	r2, r2, r4
 80075cc:	eb45 0303 	adc.w	r3, r5, r3
 80075d0:	f04f 0000 	mov.w	r0, #0
 80075d4:	f04f 0100 	mov.w	r1, #0
 80075d8:	0299      	lsls	r1, r3, #10
 80075da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80075de:	0290      	lsls	r0, r2, #10
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4610      	mov	r0, r2
 80075e6:	4619      	mov	r1, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f04f 0300 	mov.w	r3, #0
 80075f0:	f7f9 fbdc 	bl	8000dac <__aeabi_uldivmod>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4613      	mov	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075fc:	4b0b      	ldr	r3, [pc, #44]	; (800762c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	0c1b      	lsrs	r3, r3, #16
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	3301      	adds	r3, #1
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	fbb2 f3f3 	udiv	r3, r2, r3
 8007614:	60bb      	str	r3, [r7, #8]
      break;
 8007616:	e002      	b.n	800761e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007618:	4b05      	ldr	r3, [pc, #20]	; (8007630 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800761a:	60bb      	str	r3, [r7, #8]
      break;
 800761c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800761e:	68bb      	ldr	r3, [r7, #8]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800762a:	bf00      	nop
 800762c:	40023800 	.word	0x40023800
 8007630:	00f42400 	.word	0x00f42400
 8007634:	007a1200 	.word	0x007a1200

08007638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800763c:	4b03      	ldr	r3, [pc, #12]	; (800764c <HAL_RCC_GetHCLKFreq+0x14>)
 800763e:	681b      	ldr	r3, [r3, #0]
}
 8007640:	4618      	mov	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000018 	.word	0x20000018

08007650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007654:	f7ff fff0 	bl	8007638 <HAL_RCC_GetHCLKFreq>
 8007658:	4602      	mov	r2, r0
 800765a:	4b05      	ldr	r3, [pc, #20]	; (8007670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	0a9b      	lsrs	r3, r3, #10
 8007660:	f003 0307 	and.w	r3, r3, #7
 8007664:	4903      	ldr	r1, [pc, #12]	; (8007674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007666:	5ccb      	ldrb	r3, [r1, r3]
 8007668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800766c:	4618      	mov	r0, r3
 800766e:	bd80      	pop	{r7, pc}
 8007670:	40023800 	.word	0x40023800
 8007674:	08009b60 	.word	0x08009b60

08007678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800767c:	f7ff ffdc 	bl	8007638 <HAL_RCC_GetHCLKFreq>
 8007680:	4602      	mov	r2, r0
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	0b5b      	lsrs	r3, r3, #13
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	4903      	ldr	r1, [pc, #12]	; (800769c <HAL_RCC_GetPCLK2Freq+0x24>)
 800768e:	5ccb      	ldrb	r3, [r1, r3]
 8007690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007694:	4618      	mov	r0, r3
 8007696:	bd80      	pop	{r7, pc}
 8007698:	40023800 	.word	0x40023800
 800769c:	08009b60 	.word	0x08009b60

080076a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e041      	b.n	8007736 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d106      	bne.n	80076cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7fc fb58 	bl	8003d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3304      	adds	r3, #4
 80076dc:	4619      	mov	r1, r3
 80076de:	4610      	mov	r0, r2
 80076e0:	f000 fdda 	bl	8008298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b01      	cmp	r3, #1
 8007752:	d001      	beq.n	8007758 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e03c      	b.n	80077d2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1e      	ldr	r2, [pc, #120]	; (80077e0 <HAL_TIM_Base_Start+0xa0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d018      	beq.n	800779c <HAL_TIM_Base_Start+0x5c>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007772:	d013      	beq.n	800779c <HAL_TIM_Base_Start+0x5c>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1a      	ldr	r2, [pc, #104]	; (80077e4 <HAL_TIM_Base_Start+0xa4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d00e      	beq.n	800779c <HAL_TIM_Base_Start+0x5c>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a19      	ldr	r2, [pc, #100]	; (80077e8 <HAL_TIM_Base_Start+0xa8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d009      	beq.n	800779c <HAL_TIM_Base_Start+0x5c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a17      	ldr	r2, [pc, #92]	; (80077ec <HAL_TIM_Base_Start+0xac>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d004      	beq.n	800779c <HAL_TIM_Base_Start+0x5c>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a16      	ldr	r2, [pc, #88]	; (80077f0 <HAL_TIM_Base_Start+0xb0>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d111      	bne.n	80077c0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2b06      	cmp	r3, #6
 80077ac:	d010      	beq.n	80077d0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f042 0201 	orr.w	r2, r2, #1
 80077bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077be:	e007      	b.n	80077d0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0201 	orr.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	40010000 	.word	0x40010000
 80077e4:	40000400 	.word	0x40000400
 80077e8:	40000800 	.word	0x40000800
 80077ec:	40000c00 	.word	0x40000c00
 80077f0:	40014000 	.word	0x40014000

080077f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b01      	cmp	r3, #1
 8007806:	d001      	beq.n	800780c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e044      	b.n	8007896 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f042 0201 	orr.w	r2, r2, #1
 8007822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a1e      	ldr	r2, [pc, #120]	; (80078a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d018      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x6c>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007836:	d013      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x6c>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a1a      	ldr	r2, [pc, #104]	; (80078a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00e      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x6c>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a19      	ldr	r2, [pc, #100]	; (80078ac <HAL_TIM_Base_Start_IT+0xb8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d009      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x6c>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a17      	ldr	r2, [pc, #92]	; (80078b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d004      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x6c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a16      	ldr	r2, [pc, #88]	; (80078b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d111      	bne.n	8007884 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b06      	cmp	r3, #6
 8007870:	d010      	beq.n	8007894 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f042 0201 	orr.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007882:	e007      	b.n	8007894 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0201 	orr.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	40010000 	.word	0x40010000
 80078a8:	40000400 	.word	0x40000400
 80078ac:	40000800 	.word	0x40000800
 80078b0:	40000c00 	.word	0x40000c00
 80078b4:	40014000 	.word	0x40014000

080078b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e041      	b.n	800794e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d106      	bne.n	80078e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f839 	bl	8007956 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3304      	adds	r3, #4
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f000 fcce 	bl	8008298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
	...

0800796c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d109      	bne.n	8007990 <HAL_TIM_PWM_Start+0x24>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b01      	cmp	r3, #1
 8007986:	bf14      	ite	ne
 8007988:	2301      	movne	r3, #1
 800798a:	2300      	moveq	r3, #0
 800798c:	b2db      	uxtb	r3, r3
 800798e:	e022      	b.n	80079d6 <HAL_TIM_PWM_Start+0x6a>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b04      	cmp	r3, #4
 8007994:	d109      	bne.n	80079aa <HAL_TIM_PWM_Start+0x3e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b01      	cmp	r3, #1
 80079a0:	bf14      	ite	ne
 80079a2:	2301      	movne	r3, #1
 80079a4:	2300      	moveq	r3, #0
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	e015      	b.n	80079d6 <HAL_TIM_PWM_Start+0x6a>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d109      	bne.n	80079c4 <HAL_TIM_PWM_Start+0x58>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	bf14      	ite	ne
 80079bc:	2301      	movne	r3, #1
 80079be:	2300      	moveq	r3, #0
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	e008      	b.n	80079d6 <HAL_TIM_PWM_Start+0x6a>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	bf14      	ite	ne
 80079d0:	2301      	movne	r3, #1
 80079d2:	2300      	moveq	r3, #0
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e068      	b.n	8007ab0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d104      	bne.n	80079ee <HAL_TIM_PWM_Start+0x82>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079ec:	e013      	b.n	8007a16 <HAL_TIM_PWM_Start+0xaa>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d104      	bne.n	80079fe <HAL_TIM_PWM_Start+0x92>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079fc:	e00b      	b.n	8007a16 <HAL_TIM_PWM_Start+0xaa>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d104      	bne.n	8007a0e <HAL_TIM_PWM_Start+0xa2>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a0c:	e003      	b.n	8007a16 <HAL_TIM_PWM_Start+0xaa>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2202      	movs	r2, #2
 8007a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 fee0 	bl	80087e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a23      	ldr	r2, [pc, #140]	; (8007ab8 <HAL_TIM_PWM_Start+0x14c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d107      	bne.n	8007a3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a1d      	ldr	r2, [pc, #116]	; (8007ab8 <HAL_TIM_PWM_Start+0x14c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d018      	beq.n	8007a7a <HAL_TIM_PWM_Start+0x10e>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a50:	d013      	beq.n	8007a7a <HAL_TIM_PWM_Start+0x10e>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a19      	ldr	r2, [pc, #100]	; (8007abc <HAL_TIM_PWM_Start+0x150>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00e      	beq.n	8007a7a <HAL_TIM_PWM_Start+0x10e>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a17      	ldr	r2, [pc, #92]	; (8007ac0 <HAL_TIM_PWM_Start+0x154>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d009      	beq.n	8007a7a <HAL_TIM_PWM_Start+0x10e>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a16      	ldr	r2, [pc, #88]	; (8007ac4 <HAL_TIM_PWM_Start+0x158>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d004      	beq.n	8007a7a <HAL_TIM_PWM_Start+0x10e>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a14      	ldr	r2, [pc, #80]	; (8007ac8 <HAL_TIM_PWM_Start+0x15c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d111      	bne.n	8007a9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b06      	cmp	r3, #6
 8007a8a:	d010      	beq.n	8007aae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0201 	orr.w	r2, r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a9c:	e007      	b.n	8007aae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f042 0201 	orr.w	r2, r2, #1
 8007aac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	40010000 	.word	0x40010000
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40000800 	.word	0x40000800
 8007ac4:	40000c00 	.word	0x40000c00
 8007ac8:	40014000 	.word	0x40014000

08007acc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e097      	b.n	8007c10 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d106      	bne.n	8007afa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7fc f8f9 	bl	8003cec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2202      	movs	r2, #2
 8007afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b10:	f023 0307 	bic.w	r3, r3, #7
 8007b14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f000 fbb9 	bl	8008298 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b4e:	f023 0303 	bic.w	r3, r3, #3
 8007b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	021b      	lsls	r3, r3, #8
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007b6c:	f023 030c 	bic.w	r3, r3, #12
 8007b70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	021b      	lsls	r3, r3, #8
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	011a      	lsls	r2, r3, #4
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	031b      	lsls	r3, r3, #12
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007baa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007bb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	011b      	lsls	r3, r3, #4
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d110      	bne.n	8007c6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d102      	bne.n	8007c54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c4e:	7b7b      	ldrb	r3, [r7, #13]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d001      	beq.n	8007c58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e069      	b.n	8007d2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c68:	e031      	b.n	8007cce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	d110      	bne.n	8007c92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d102      	bne.n	8007c7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c76:	7b3b      	ldrb	r3, [r7, #12]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d001      	beq.n	8007c80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e055      	b.n	8007d2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c90:	e01d      	b.n	8007cce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d108      	bne.n	8007caa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c98:	7bbb      	ldrb	r3, [r7, #14]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d105      	bne.n	8007caa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c9e:	7b7b      	ldrb	r3, [r7, #13]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d102      	bne.n	8007caa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ca4:	7b3b      	ldrb	r3, [r7, #12]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d001      	beq.n	8007cae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e03e      	b.n	8007d2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2202      	movs	r2, #2
 8007cca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <HAL_TIM_Encoder_Start+0xc4>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d008      	beq.n	8007cec <HAL_TIM_Encoder_Start+0xd4>
 8007cda:	e00f      	b.n	8007cfc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fd7d 	bl	80087e4 <TIM_CCxChannelCmd>
      break;
 8007cea:	e016      	b.n	8007d1a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	2104      	movs	r1, #4
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fd75 	bl	80087e4 <TIM_CCxChannelCmd>
      break;
 8007cfa:	e00e      	b.n	8007d1a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2201      	movs	r2, #1
 8007d02:	2100      	movs	r1, #0
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 fd6d 	bl	80087e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	2104      	movs	r1, #4
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fd66 	bl	80087e4 <TIM_CCxChannelCmd>
      break;
 8007d18:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 0201 	orr.w	r2, r2, #1
 8007d28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d122      	bne.n	8007d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d11b      	bne.n	8007d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f06f 0202 	mvn.w	r2, #2
 8007d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa70 	bl	800825c <HAL_TIM_IC_CaptureCallback>
 8007d7c:	e005      	b.n	8007d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa62 	bl	8008248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fa73 	bl	8008270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	f003 0304 	and.w	r3, r3, #4
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d122      	bne.n	8007de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d11b      	bne.n	8007de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f06f 0204 	mvn.w	r2, #4
 8007db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2202      	movs	r2, #2
 8007dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fa46 	bl	800825c <HAL_TIM_IC_CaptureCallback>
 8007dd0:	e005      	b.n	8007dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fa38 	bl	8008248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fa49 	bl	8008270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0308 	and.w	r3, r3, #8
 8007dee:	2b08      	cmp	r3, #8
 8007df0:	d122      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0308 	and.w	r3, r3, #8
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d11b      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0208 	mvn.w	r2, #8
 8007e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2204      	movs	r2, #4
 8007e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa1c 	bl	800825c <HAL_TIM_IC_CaptureCallback>
 8007e24:	e005      	b.n	8007e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fa0e 	bl	8008248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fa1f 	bl	8008270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f003 0310 	and.w	r3, r3, #16
 8007e42:	2b10      	cmp	r3, #16
 8007e44:	d122      	bne.n	8007e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f003 0310 	and.w	r3, r3, #16
 8007e50:	2b10      	cmp	r3, #16
 8007e52:	d11b      	bne.n	8007e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0210 	mvn.w	r2, #16
 8007e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2208      	movs	r2, #8
 8007e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f9f2 	bl	800825c <HAL_TIM_IC_CaptureCallback>
 8007e78:	e005      	b.n	8007e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f9e4 	bl	8008248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f9f5 	bl	8008270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d10e      	bne.n	8007eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d107      	bne.n	8007eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f06f 0201 	mvn.w	r2, #1
 8007eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7f9 fde6 	bl	8001a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec2:	2b80      	cmp	r3, #128	; 0x80
 8007ec4:	d10e      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed0:	2b80      	cmp	r3, #128	; 0x80
 8007ed2:	d107      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fd1e 	bl	8008920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eee:	2b40      	cmp	r3, #64	; 0x40
 8007ef0:	d10e      	bne.n	8007f10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efc:	2b40      	cmp	r3, #64	; 0x40
 8007efe:	d107      	bne.n	8007f10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f9ba 	bl	8008284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	f003 0320 	and.w	r3, r3, #32
 8007f1a:	2b20      	cmp	r3, #32
 8007f1c:	d10e      	bne.n	8007f3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f003 0320 	and.w	r3, r3, #32
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	d107      	bne.n	8007f3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f06f 0220 	mvn.w	r2, #32
 8007f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fce8 	bl	800890c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d101      	bne.n	8007f5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	e0ac      	b.n	80080b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b0c      	cmp	r3, #12
 8007f6a:	f200 809f 	bhi.w	80080ac <HAL_TIM_PWM_ConfigChannel+0x168>
 8007f6e:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007fa9 	.word	0x08007fa9
 8007f78:	080080ad 	.word	0x080080ad
 8007f7c:	080080ad 	.word	0x080080ad
 8007f80:	080080ad 	.word	0x080080ad
 8007f84:	08007fe9 	.word	0x08007fe9
 8007f88:	080080ad 	.word	0x080080ad
 8007f8c:	080080ad 	.word	0x080080ad
 8007f90:	080080ad 	.word	0x080080ad
 8007f94:	0800802b 	.word	0x0800802b
 8007f98:	080080ad 	.word	0x080080ad
 8007f9c:	080080ad 	.word	0x080080ad
 8007fa0:	080080ad 	.word	0x080080ad
 8007fa4:	0800806b 	.word	0x0800806b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f9f2 	bl	8008398 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	699a      	ldr	r2, [r3, #24]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f042 0208 	orr.w	r2, r2, #8
 8007fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	699a      	ldr	r2, [r3, #24]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0204 	bic.w	r2, r2, #4
 8007fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6999      	ldr	r1, [r3, #24]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	691a      	ldr	r2, [r3, #16]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	619a      	str	r2, [r3, #24]
      break;
 8007fe6:	e062      	b.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fa38 	bl	8008464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699a      	ldr	r2, [r3, #24]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699a      	ldr	r2, [r3, #24]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6999      	ldr	r1, [r3, #24]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	021a      	lsls	r2, r3, #8
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	619a      	str	r2, [r3, #24]
      break;
 8008028:	e041      	b.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68b9      	ldr	r1, [r7, #8]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fa83 	bl	800853c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	69da      	ldr	r2, [r3, #28]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0208 	orr.w	r2, r2, #8
 8008044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	69da      	ldr	r2, [r3, #28]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0204 	bic.w	r2, r2, #4
 8008054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	69d9      	ldr	r1, [r3, #28]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	430a      	orrs	r2, r1
 8008066:	61da      	str	r2, [r3, #28]
      break;
 8008068:	e021      	b.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68b9      	ldr	r1, [r7, #8]
 8008070:	4618      	mov	r0, r3
 8008072:	f000 facd 	bl	8008610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69da      	ldr	r2, [r3, #28]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69da      	ldr	r2, [r3, #28]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	69d9      	ldr	r1, [r3, #28]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	021a      	lsls	r2, r3, #8
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	61da      	str	r2, [r3, #28]
      break;
 80080aa:	e000      	b.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80080ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_TIM_ConfigClockSource+0x18>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e0b3      	b.n	8008240 <HAL_TIM_ConfigClockSource+0x180>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008110:	d03e      	beq.n	8008190 <HAL_TIM_ConfigClockSource+0xd0>
 8008112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008116:	f200 8087 	bhi.w	8008228 <HAL_TIM_ConfigClockSource+0x168>
 800811a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800811e:	f000 8085 	beq.w	800822c <HAL_TIM_ConfigClockSource+0x16c>
 8008122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008126:	d87f      	bhi.n	8008228 <HAL_TIM_ConfigClockSource+0x168>
 8008128:	2b70      	cmp	r3, #112	; 0x70
 800812a:	d01a      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0xa2>
 800812c:	2b70      	cmp	r3, #112	; 0x70
 800812e:	d87b      	bhi.n	8008228 <HAL_TIM_ConfigClockSource+0x168>
 8008130:	2b60      	cmp	r3, #96	; 0x60
 8008132:	d050      	beq.n	80081d6 <HAL_TIM_ConfigClockSource+0x116>
 8008134:	2b60      	cmp	r3, #96	; 0x60
 8008136:	d877      	bhi.n	8008228 <HAL_TIM_ConfigClockSource+0x168>
 8008138:	2b50      	cmp	r3, #80	; 0x50
 800813a:	d03c      	beq.n	80081b6 <HAL_TIM_ConfigClockSource+0xf6>
 800813c:	2b50      	cmp	r3, #80	; 0x50
 800813e:	d873      	bhi.n	8008228 <HAL_TIM_ConfigClockSource+0x168>
 8008140:	2b40      	cmp	r3, #64	; 0x40
 8008142:	d058      	beq.n	80081f6 <HAL_TIM_ConfigClockSource+0x136>
 8008144:	2b40      	cmp	r3, #64	; 0x40
 8008146:	d86f      	bhi.n	8008228 <HAL_TIM_ConfigClockSource+0x168>
 8008148:	2b30      	cmp	r3, #48	; 0x30
 800814a:	d064      	beq.n	8008216 <HAL_TIM_ConfigClockSource+0x156>
 800814c:	2b30      	cmp	r3, #48	; 0x30
 800814e:	d86b      	bhi.n	8008228 <HAL_TIM_ConfigClockSource+0x168>
 8008150:	2b20      	cmp	r3, #32
 8008152:	d060      	beq.n	8008216 <HAL_TIM_ConfigClockSource+0x156>
 8008154:	2b20      	cmp	r3, #32
 8008156:	d867      	bhi.n	8008228 <HAL_TIM_ConfigClockSource+0x168>
 8008158:	2b00      	cmp	r3, #0
 800815a:	d05c      	beq.n	8008216 <HAL_TIM_ConfigClockSource+0x156>
 800815c:	2b10      	cmp	r3, #16
 800815e:	d05a      	beq.n	8008216 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008160:	e062      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6899      	ldr	r1, [r3, #8]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f000 fb17 	bl	80087a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008184:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	609a      	str	r2, [r3, #8]
      break;
 800818e:	e04e      	b.n	800822e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6818      	ldr	r0, [r3, #0]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	6899      	ldr	r1, [r3, #8]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	f000 fb00 	bl	80087a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689a      	ldr	r2, [r3, #8]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081b2:	609a      	str	r2, [r3, #8]
      break;
 80081b4:	e03b      	b.n	800822e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	6859      	ldr	r1, [r3, #4]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f000 fa74 	bl	80086b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2150      	movs	r1, #80	; 0x50
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 facd 	bl	800876e <TIM_ITRx_SetConfig>
      break;
 80081d4:	e02b      	b.n	800822e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6818      	ldr	r0, [r3, #0]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	6859      	ldr	r1, [r3, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	461a      	mov	r2, r3
 80081e4:	f000 fa93 	bl	800870e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2160      	movs	r1, #96	; 0x60
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fabd 	bl	800876e <TIM_ITRx_SetConfig>
      break;
 80081f4:	e01b      	b.n	800822e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	6859      	ldr	r1, [r3, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	461a      	mov	r2, r3
 8008204:	f000 fa54 	bl	80086b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2140      	movs	r1, #64	; 0x40
 800820e:	4618      	mov	r0, r3
 8008210:	f000 faad 	bl	800876e <TIM_ITRx_SetConfig>
      break;
 8008214:	e00b      	b.n	800822e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4619      	mov	r1, r3
 8008220:	4610      	mov	r0, r2
 8008222:	f000 faa4 	bl	800876e <TIM_ITRx_SetConfig>
        break;
 8008226:	e002      	b.n	800822e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008228:	bf00      	nop
 800822a:	e000      	b.n	800822e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800822c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a34      	ldr	r2, [pc, #208]	; (800837c <TIM_Base_SetConfig+0xe4>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d00f      	beq.n	80082d0 <TIM_Base_SetConfig+0x38>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b6:	d00b      	beq.n	80082d0 <TIM_Base_SetConfig+0x38>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a31      	ldr	r2, [pc, #196]	; (8008380 <TIM_Base_SetConfig+0xe8>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d007      	beq.n	80082d0 <TIM_Base_SetConfig+0x38>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a30      	ldr	r2, [pc, #192]	; (8008384 <TIM_Base_SetConfig+0xec>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d003      	beq.n	80082d0 <TIM_Base_SetConfig+0x38>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a2f      	ldr	r2, [pc, #188]	; (8008388 <TIM_Base_SetConfig+0xf0>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d108      	bne.n	80082e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4313      	orrs	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a25      	ldr	r2, [pc, #148]	; (800837c <TIM_Base_SetConfig+0xe4>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d01b      	beq.n	8008322 <TIM_Base_SetConfig+0x8a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f0:	d017      	beq.n	8008322 <TIM_Base_SetConfig+0x8a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a22      	ldr	r2, [pc, #136]	; (8008380 <TIM_Base_SetConfig+0xe8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d013      	beq.n	8008322 <TIM_Base_SetConfig+0x8a>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a21      	ldr	r2, [pc, #132]	; (8008384 <TIM_Base_SetConfig+0xec>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00f      	beq.n	8008322 <TIM_Base_SetConfig+0x8a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a20      	ldr	r2, [pc, #128]	; (8008388 <TIM_Base_SetConfig+0xf0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00b      	beq.n	8008322 <TIM_Base_SetConfig+0x8a>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a1f      	ldr	r2, [pc, #124]	; (800838c <TIM_Base_SetConfig+0xf4>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d007      	beq.n	8008322 <TIM_Base_SetConfig+0x8a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a1e      	ldr	r2, [pc, #120]	; (8008390 <TIM_Base_SetConfig+0xf8>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d003      	beq.n	8008322 <TIM_Base_SetConfig+0x8a>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a1d      	ldr	r2, [pc, #116]	; (8008394 <TIM_Base_SetConfig+0xfc>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d108      	bne.n	8008334 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	689a      	ldr	r2, [r3, #8]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a08      	ldr	r2, [pc, #32]	; (800837c <TIM_Base_SetConfig+0xe4>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d103      	bne.n	8008368 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	615a      	str	r2, [r3, #20]
}
 800836e:	bf00      	nop
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	40010000 	.word	0x40010000
 8008380:	40000400 	.word	0x40000400
 8008384:	40000800 	.word	0x40000800
 8008388:	40000c00 	.word	0x40000c00
 800838c:	40014000 	.word	0x40014000
 8008390:	40014400 	.word	0x40014400
 8008394:	40014800 	.word	0x40014800

08008398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	f023 0201 	bic.w	r2, r3, #1
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0303 	bic.w	r3, r3, #3
 80083ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f023 0302 	bic.w	r3, r3, #2
 80083e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a1c      	ldr	r2, [pc, #112]	; (8008460 <TIM_OC1_SetConfig+0xc8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d10c      	bne.n	800840e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f023 0308 	bic.w	r3, r3, #8
 80083fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	4313      	orrs	r3, r2
 8008404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f023 0304 	bic.w	r3, r3, #4
 800840c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a13      	ldr	r2, [pc, #76]	; (8008460 <TIM_OC1_SetConfig+0xc8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d111      	bne.n	800843a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800841c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	4313      	orrs	r3, r2
 800842e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4313      	orrs	r3, r2
 8008438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	685a      	ldr	r2, [r3, #4]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	621a      	str	r2, [r3, #32]
}
 8008454:	bf00      	nop
 8008456:	371c      	adds	r7, #28
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	40010000 	.word	0x40010000

08008464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008464:	b480      	push	{r7}
 8008466:	b087      	sub	sp, #28
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a1b      	ldr	r3, [r3, #32]
 8008472:	f023 0210 	bic.w	r2, r3, #16
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800849a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	021b      	lsls	r3, r3, #8
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f023 0320 	bic.w	r3, r3, #32
 80084ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a1e      	ldr	r2, [pc, #120]	; (8008538 <TIM_OC2_SetConfig+0xd4>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d10d      	bne.n	80084e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a15      	ldr	r2, [pc, #84]	; (8008538 <TIM_OC2_SetConfig+0xd4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d113      	bne.n	8008510 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	4313      	orrs	r3, r2
 8008502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	4313      	orrs	r3, r2
 800850e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	621a      	str	r2, [r3, #32]
}
 800852a:	bf00      	nop
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	40010000 	.word	0x40010000

0800853c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f023 0303 	bic.w	r3, r3, #3
 8008572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	021b      	lsls	r3, r3, #8
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	4313      	orrs	r3, r2
 8008590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a1d      	ldr	r2, [pc, #116]	; (800860c <TIM_OC3_SetConfig+0xd0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d10d      	bne.n	80085b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	021b      	lsls	r3, r3, #8
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a14      	ldr	r2, [pc, #80]	; (800860c <TIM_OC3_SetConfig+0xd0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d113      	bne.n	80085e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	011b      	lsls	r3, r3, #4
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	621a      	str	r2, [r3, #32]
}
 8008600:	bf00      	nop
 8008602:	371c      	adds	r7, #28
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	40010000 	.word	0x40010000

08008610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008610:	b480      	push	{r7}
 8008612:	b087      	sub	sp, #28
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800863e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	021b      	lsls	r3, r3, #8
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	4313      	orrs	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800865a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	031b      	lsls	r3, r3, #12
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	4313      	orrs	r3, r2
 8008666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a10      	ldr	r2, [pc, #64]	; (80086ac <TIM_OC4_SetConfig+0x9c>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d109      	bne.n	8008684 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008676:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	019b      	lsls	r3, r3, #6
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	4313      	orrs	r3, r2
 8008682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	621a      	str	r2, [r3, #32]
}
 800869e:	bf00      	nop
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	40010000 	.word	0x40010000

080086b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	f023 0201 	bic.w	r2, r3, #1
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	011b      	lsls	r3, r3, #4
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f023 030a 	bic.w	r3, r3, #10
 80086ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	621a      	str	r2, [r3, #32]
}
 8008702:	bf00      	nop
 8008704:	371c      	adds	r7, #28
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800870e:	b480      	push	{r7}
 8008710:	b087      	sub	sp, #28
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	f023 0210 	bic.w	r2, r3, #16
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008738:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	031b      	lsls	r3, r3, #12
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	4313      	orrs	r3, r2
 8008742:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800874a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	4313      	orrs	r3, r2
 8008754:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	621a      	str	r2, [r3, #32]
}
 8008762:	bf00      	nop
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800876e:	b480      	push	{r7}
 8008770:	b085      	sub	sp, #20
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	4313      	orrs	r3, r2
 800878c:	f043 0307 	orr.w	r3, r3, #7
 8008790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	609a      	str	r2, [r3, #8]
}
 8008798:	bf00      	nop
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	021a      	lsls	r2, r3, #8
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	431a      	orrs	r2, r3
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	697a      	ldr	r2, [r7, #20]
 80087d6:	609a      	str	r2, [r3, #8]
}
 80087d8:	bf00      	nop
 80087da:	371c      	adds	r7, #28
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	f003 031f 	and.w	r3, r3, #31
 80087f6:	2201      	movs	r2, #1
 80087f8:	fa02 f303 	lsl.w	r3, r2, r3
 80087fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6a1a      	ldr	r2, [r3, #32]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	43db      	mvns	r3, r3
 8008806:	401a      	ands	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a1a      	ldr	r2, [r3, #32]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	f003 031f 	and.w	r3, r3, #31
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	fa01 f303 	lsl.w	r3, r1, r3
 800881c:	431a      	orrs	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	621a      	str	r2, [r3, #32]
}
 8008822:	bf00      	nop
 8008824:	371c      	adds	r7, #28
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
	...

08008830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008844:	2302      	movs	r3, #2
 8008846:	e050      	b.n	80088ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800886e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	4313      	orrs	r3, r2
 8008878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a1c      	ldr	r2, [pc, #112]	; (80088f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d018      	beq.n	80088be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008894:	d013      	beq.n	80088be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a18      	ldr	r2, [pc, #96]	; (80088fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d00e      	beq.n	80088be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a16      	ldr	r2, [pc, #88]	; (8008900 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d009      	beq.n	80088be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a15      	ldr	r2, [pc, #84]	; (8008904 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d004      	beq.n	80088be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a13      	ldr	r2, [pc, #76]	; (8008908 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d10c      	bne.n	80088d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	40010000 	.word	0x40010000
 80088fc:	40000400 	.word	0x40000400
 8008900:	40000800 	.word	0x40000800
 8008904:	40000c00 	.word	0x40000c00
 8008908:	40014000 	.word	0x40014000

0800890c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e03f      	b.n	80089c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d106      	bne.n	8008960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7fb fa84 	bl	8003e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2224      	movs	r2, #36	; 0x24
 8008964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68da      	ldr	r2, [r3, #12]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fd51 	bl	8009420 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	691a      	ldr	r2, [r3, #16]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800898c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	695a      	ldr	r2, [r3, #20]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800899c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68da      	ldr	r2, [r3, #12]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2220      	movs	r2, #32
 80089c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
	...

080089d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	4613      	mov	r3, r2
 80089dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	d153      	bne.n	8008a92 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <HAL_UART_Transmit_DMA+0x26>
 80089f0:	88fb      	ldrh	r3, [r7, #6]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e04c      	b.n	8008a94 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d101      	bne.n	8008a08 <HAL_UART_Transmit_DMA+0x38>
 8008a04:	2302      	movs	r3, #2
 8008a06:	e045      	b.n	8008a94 <HAL_UART_Transmit_DMA+0xc4>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	88fa      	ldrh	r2, [r7, #6]
 8008a1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	88fa      	ldrh	r2, [r7, #6]
 8008a20:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2221      	movs	r2, #33	; 0x21
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a34:	4a19      	ldr	r2, [pc, #100]	; (8008a9c <HAL_UART_Transmit_DMA+0xcc>)
 8008a36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3c:	4a18      	ldr	r2, [pc, #96]	; (8008aa0 <HAL_UART_Transmit_DMA+0xd0>)
 8008a3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a44:	4a17      	ldr	r2, [pc, #92]	; (8008aa4 <HAL_UART_Transmit_DMA+0xd4>)
 8008a46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008a50:	f107 0308 	add.w	r3, r7, #8
 8008a54:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	6819      	ldr	r1, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3304      	adds	r3, #4
 8008a64:	461a      	mov	r2, r3
 8008a66:	88fb      	ldrh	r3, [r7, #6]
 8008a68:	f7fb fdd6 	bl	8004618 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a74:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	695a      	ldr	r2, [r3, #20]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a8c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	e000      	b.n	8008a94 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008a92:	2302      	movs	r3, #2
  }
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	08008edd 	.word	0x08008edd
 8008aa0:	08008f2f 	.word	0x08008f2f
 8008aa4:	08009017 	.word	0x08009017

08008aa8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b20      	cmp	r3, #32
 8008ac0:	d11d      	bne.n	8008afe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <HAL_UART_Receive_DMA+0x26>
 8008ac8:	88fb      	ldrh	r3, [r7, #6]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e016      	b.n	8008b00 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_UART_Receive_DMA+0x38>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e00f      	b.n	8008b00 <HAL_UART_Receive_DMA+0x58>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008aee:	88fb      	ldrh	r3, [r7, #6]
 8008af0:	461a      	mov	r2, r3
 8008af2:	68b9      	ldr	r1, [r7, #8]
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 fad9 	bl	80090ac <UART_Start_Receive_DMA>
 8008afa:	4603      	mov	r3, r0
 8008afc:	e000      	b.n	8008b00 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008afe:	2302      	movs	r3, #2
  }
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08a      	sub	sp, #40	; 0x28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d10d      	bne.n	8008b5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	f003 0320 	and.w	r3, r3, #32
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d008      	beq.n	8008b5a <HAL_UART_IRQHandler+0x52>
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	f003 0320 	and.w	r3, r3, #32
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fbcd 	bl	80092f2 <UART_Receive_IT>
      return;
 8008b58:	e17c      	b.n	8008e54 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 80b1 	beq.w	8008cc4 <HAL_UART_IRQHandler+0x1bc>
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d105      	bne.n	8008b78 <HAL_UART_IRQHandler+0x70>
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 80a6 	beq.w	8008cc4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00a      	beq.n	8008b98 <HAL_UART_IRQHandler+0x90>
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d005      	beq.n	8008b98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b90:	f043 0201 	orr.w	r2, r3, #1
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	f003 0304 	and.w	r3, r3, #4
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00a      	beq.n	8008bb8 <HAL_UART_IRQHandler+0xb0>
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb0:	f043 0202 	orr.w	r2, r3, #2
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00a      	beq.n	8008bd8 <HAL_UART_IRQHandler+0xd0>
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d005      	beq.n	8008bd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd0:	f043 0204 	orr.w	r2, r3, #4
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	f003 0308 	and.w	r3, r3, #8
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00f      	beq.n	8008c02 <HAL_UART_IRQHandler+0xfa>
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	f003 0320 	and.w	r3, r3, #32
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d104      	bne.n	8008bf6 <HAL_UART_IRQHandler+0xee>
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d005      	beq.n	8008c02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	f043 0208 	orr.w	r2, r3, #8
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 811f 	beq.w	8008e4a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	f003 0320 	and.w	r3, r3, #32
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d007      	beq.n	8008c26 <HAL_UART_IRQHandler+0x11e>
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	f003 0320 	and.w	r3, r3, #32
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fb66 	bl	80092f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c30:	2b40      	cmp	r3, #64	; 0x40
 8008c32:	bf0c      	ite	eq
 8008c34:	2301      	moveq	r3, #1
 8008c36:	2300      	movne	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c40:	f003 0308 	and.w	r3, r3, #8
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d102      	bne.n	8008c4e <HAL_UART_IRQHandler+0x146>
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d031      	beq.n	8008cb2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 faa6 	bl	80091a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5e:	2b40      	cmp	r3, #64	; 0x40
 8008c60:	d123      	bne.n	8008caa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	695a      	ldr	r2, [r3, #20]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d013      	beq.n	8008ca2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7e:	4a77      	ldr	r2, [pc, #476]	; (8008e5c <HAL_UART_IRQHandler+0x354>)
 8008c80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fb fd8e 	bl	80047a8 <HAL_DMA_Abort_IT>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d016      	beq.n	8008cc0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca0:	e00e      	b.n	8008cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f904 	bl	8008eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca8:	e00a      	b.n	8008cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f900 	bl	8008eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cb0:	e006      	b.n	8008cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f8fc 	bl	8008eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008cbe:	e0c4      	b.n	8008e4a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc0:	bf00      	nop
    return;
 8008cc2:	e0c2      	b.n	8008e4a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	f040 80a2 	bne.w	8008e12 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	f003 0310 	and.w	r3, r3, #16
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 809c 	beq.w	8008e12 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f000 8096 	beq.w	8008e12 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60fb      	str	r3, [r7, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60fb      	str	r3, [r7, #12]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	60fb      	str	r3, [r7, #12]
 8008cfa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d06:	2b40      	cmp	r3, #64	; 0x40
 8008d08:	d14f      	bne.n	8008daa <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008d14:	8a3b      	ldrh	r3, [r7, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 8099 	beq.w	8008e4e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d20:	8a3a      	ldrh	r2, [r7, #16]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	f080 8093 	bcs.w	8008e4e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	8a3a      	ldrh	r2, [r7, #16]
 8008d2c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d38:	d02b      	beq.n	8008d92 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68da      	ldr	r2, [r3, #12]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d48:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	695a      	ldr	r2, [r3, #20]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f022 0201 	bic.w	r2, r2, #1
 8008d58:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	695a      	ldr	r2, [r3, #20]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d68:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 0210 	bic.w	r2, r2, #16
 8008d86:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fb fc9b 	bl	80046c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f88e 	bl	8008ec4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008da8:	e051      	b.n	8008e4e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d047      	beq.n	8008e52 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008dc2:	8a7b      	ldrh	r3, [r7, #18]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d044      	beq.n	8008e52 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68da      	ldr	r2, [r3, #12]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008dd6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	695a      	ldr	r2, [r3, #20]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0201 	bic.w	r2, r2, #1
 8008de6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68da      	ldr	r2, [r3, #12]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f022 0210 	bic.w	r2, r2, #16
 8008e04:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e06:	8a7b      	ldrh	r3, [r7, #18]
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f85a 	bl	8008ec4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008e10:	e01f      	b.n	8008e52 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d008      	beq.n	8008e2e <HAL_UART_IRQHandler+0x326>
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f9fb 	bl	8009222 <UART_Transmit_IT>
    return;
 8008e2c:	e012      	b.n	8008e54 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00d      	beq.n	8008e54 <HAL_UART_IRQHandler+0x34c>
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d008      	beq.n	8008e54 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fa3d 	bl	80092c2 <UART_EndTransmit_IT>
    return;
 8008e48:	e004      	b.n	8008e54 <HAL_UART_IRQHandler+0x34c>
    return;
 8008e4a:	bf00      	nop
 8008e4c:	e002      	b.n	8008e54 <HAL_UART_IRQHandler+0x34c>
      return;
 8008e4e:	bf00      	nop
 8008e50:	e000      	b.n	8008e54 <HAL_UART_IRQHandler+0x34c>
      return;
 8008e52:	bf00      	nop
  }
}
 8008e54:	3728      	adds	r7, #40	; 0x28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	080091fb 	.word	0x080091fb

08008e60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d113      	bne.n	8008f20 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	695a      	ldr	r2, [r3, #20]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f0c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f1c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f1e:	e002      	b.n	8008f26 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7ff ff9d 	bl	8008e60 <HAL_UART_TxCpltCallback>
}
 8008f26:	bf00      	nop
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f7ff ff99 	bl	8008e74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f42:	bf00      	nop
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f56:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d12a      	bne.n	8008fbc <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f7a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	695a      	ldr	r2, [r3, #20]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0201 	bic.w	r2, r2, #1
 8008f8a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	695a      	ldr	r2, [r3, #20]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f9a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d107      	bne.n	8008fbc <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68da      	ldr	r2, [r3, #12]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f022 0210 	bic.w	r2, r2, #16
 8008fba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d106      	bne.n	8008fd2 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fc8:	4619      	mov	r1, r3
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f7ff ff7a 	bl	8008ec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fd0:	e002      	b.n	8008fd8 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f7ff ff58 	bl	8008e88 <HAL_UART_RxCpltCallback>
}
 8008fd8:	bf00      	nop
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d108      	bne.n	8009008 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ffa:	085b      	lsrs	r3, r3, #1
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	4619      	mov	r1, r3
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f7ff ff5f 	bl	8008ec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009006:	e002      	b.n	800900e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f7ff ff47 	bl	8008e9c <HAL_UART_RxHalfCpltCallback>
}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800901e:	2300      	movs	r3, #0
 8009020:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009026:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009032:	2b80      	cmp	r3, #128	; 0x80
 8009034:	bf0c      	ite	eq
 8009036:	2301      	moveq	r3, #1
 8009038:	2300      	movne	r3, #0
 800903a:	b2db      	uxtb	r3, r3
 800903c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b21      	cmp	r3, #33	; 0x21
 8009048:	d108      	bne.n	800905c <UART_DMAError+0x46>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2200      	movs	r2, #0
 8009054:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009056:	68b8      	ldr	r0, [r7, #8]
 8009058:	f000 f88c 	bl	8009174 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009066:	2b40      	cmp	r3, #64	; 0x40
 8009068:	bf0c      	ite	eq
 800906a:	2301      	moveq	r3, #1
 800906c:	2300      	movne	r3, #0
 800906e:	b2db      	uxtb	r3, r3
 8009070:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b22      	cmp	r3, #34	; 0x22
 800907c:	d108      	bne.n	8009090 <UART_DMAError+0x7a>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d005      	beq.n	8009090 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2200      	movs	r2, #0
 8009088:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800908a:	68b8      	ldr	r0, [r7, #8]
 800908c:	f000 f888 	bl	80091a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009094:	f043 0210 	orr.w	r2, r3, #16
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800909c:	68b8      	ldr	r0, [r7, #8]
 800909e:	f7ff ff07 	bl	8008eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	4613      	mov	r3, r2
 80090b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	88fa      	ldrh	r2, [r7, #6]
 80090c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2222      	movs	r2, #34	; 0x22
 80090d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d8:	4a23      	ldr	r2, [pc, #140]	; (8009168 <UART_Start_Receive_DMA+0xbc>)
 80090da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e0:	4a22      	ldr	r2, [pc, #136]	; (800916c <UART_Start_Receive_DMA+0xc0>)
 80090e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e8:	4a21      	ldr	r2, [pc, #132]	; (8009170 <UART_Start_Receive_DMA+0xc4>)
 80090ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f0:	2200      	movs	r2, #0
 80090f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80090f4:	f107 0308 	add.w	r3, r7, #8
 80090f8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3304      	adds	r3, #4
 8009104:	4619      	mov	r1, r3
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	88fb      	ldrh	r3, [r7, #6]
 800910c:	f7fb fa84 	bl	8004618 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009110:	2300      	movs	r3, #0
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	613b      	str	r3, [r7, #16]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	613b      	str	r3, [r7, #16]
 8009124:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68da      	ldr	r2, [r3, #12]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800913c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	695a      	ldr	r2, [r3, #20]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f042 0201 	orr.w	r2, r2, #1
 800914c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	695a      	ldr	r2, [r3, #20]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800915c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	08008f4b 	.word	0x08008f4b
 800916c:	08008fe1 	.word	0x08008fe1
 8009170:	08009017 	.word	0x08009017

08009174 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800918a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2220      	movs	r2, #32
 8009190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80091b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	695a      	ldr	r2, [r3, #20]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 0201 	bic.w	r2, r2, #1
 80091c6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d107      	bne.n	80091e0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 0210 	bic.w	r2, r2, #16
 80091de:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b084      	sub	sp, #16
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009206:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f7ff fe4b 	bl	8008eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800921a:	bf00      	nop
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009222:	b480      	push	{r7}
 8009224:	b085      	sub	sp, #20
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b21      	cmp	r3, #33	; 0x21
 8009234:	d13e      	bne.n	80092b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800923e:	d114      	bne.n	800926a <UART_Transmit_IT+0x48>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d110      	bne.n	800926a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a1b      	ldr	r3, [r3, #32]
 800924c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800925c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	1c9a      	adds	r2, r3, #2
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	621a      	str	r2, [r3, #32]
 8009268:	e008      	b.n	800927c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	1c59      	adds	r1, r3, #1
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	6211      	str	r1, [r2, #32]
 8009274:	781a      	ldrb	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009280:	b29b      	uxth	r3, r3
 8009282:	3b01      	subs	r3, #1
 8009284:	b29b      	uxth	r3, r3
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	4619      	mov	r1, r3
 800928a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10f      	bne.n	80092b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68da      	ldr	r2, [r3, #12]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800929e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	e000      	b.n	80092b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80092b4:	2302      	movs	r3, #2
  }
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68da      	ldr	r2, [r3, #12]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2220      	movs	r2, #32
 80092de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7ff fdbc 	bl	8008e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b22      	cmp	r3, #34	; 0x22
 8009304:	f040 8087 	bne.w	8009416 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009310:	d117      	bne.n	8009342 <UART_Receive_IT+0x50>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d113      	bne.n	8009342 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800931a:	2300      	movs	r3, #0
 800931c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009322:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	b29b      	uxth	r3, r3
 800932c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009330:	b29a      	uxth	r2, r3
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933a:	1c9a      	adds	r2, r3, #2
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	629a      	str	r2, [r3, #40]	; 0x28
 8009340:	e026      	b.n	8009390 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009346:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009348:	2300      	movs	r3, #0
 800934a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009354:	d007      	beq.n	8009366 <UART_Receive_IT+0x74>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10a      	bne.n	8009374 <UART_Receive_IT+0x82>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d106      	bne.n	8009374 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	b2da      	uxtb	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	701a      	strb	r2, [r3, #0]
 8009372:	e008      	b.n	8009386 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	b2db      	uxtb	r3, r3
 800937c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009380:	b2da      	uxtb	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938a:	1c5a      	adds	r2, r3, #1
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	b29b      	uxth	r3, r3
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	4619      	mov	r1, r3
 800939e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d136      	bne.n	8009412 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68da      	ldr	r2, [r3, #12]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 0220 	bic.w	r2, r2, #32
 80093b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	695a      	ldr	r2, [r3, #20]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f022 0201 	bic.w	r2, r2, #1
 80093d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d10e      	bne.n	8009402 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0210 	bic.w	r2, r2, #16
 80093f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7ff fd62 	bl	8008ec4 <HAL_UARTEx_RxEventCallback>
 8009400:	e002      	b.n	8009408 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7ff fd40 	bl	8008e88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	e002      	b.n	8009418 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	e000      	b.n	8009418 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009416:	2302      	movs	r3, #2
  }
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	b09f      	sub	sp, #124	; 0x7c
 8009426:	af00      	add	r7, sp, #0
 8009428:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800942a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009436:	68d9      	ldr	r1, [r3, #12]
 8009438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	ea40 0301 	orr.w	r3, r0, r1
 8009440:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	431a      	orrs	r2, r3
 800944c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	431a      	orrs	r2, r3
 8009452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	4313      	orrs	r3, r2
 8009458:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800945a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009464:	f021 010c 	bic.w	r1, r1, #12
 8009468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800946e:	430b      	orrs	r3, r1
 8009470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800947c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800947e:	6999      	ldr	r1, [r3, #24]
 8009480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	ea40 0301 	orr.w	r3, r0, r1
 8009488:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800948a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	4bc5      	ldr	r3, [pc, #788]	; (80097a4 <UART_SetConfig+0x384>)
 8009490:	429a      	cmp	r2, r3
 8009492:	d004      	beq.n	800949e <UART_SetConfig+0x7e>
 8009494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	4bc3      	ldr	r3, [pc, #780]	; (80097a8 <UART_SetConfig+0x388>)
 800949a:	429a      	cmp	r2, r3
 800949c:	d103      	bne.n	80094a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800949e:	f7fe f8eb 	bl	8007678 <HAL_RCC_GetPCLK2Freq>
 80094a2:	6778      	str	r0, [r7, #116]	; 0x74
 80094a4:	e002      	b.n	80094ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094a6:	f7fe f8d3 	bl	8007650 <HAL_RCC_GetPCLK1Freq>
 80094aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094b4:	f040 80b6 	bne.w	8009624 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ba:	461c      	mov	r4, r3
 80094bc:	f04f 0500 	mov.w	r5, #0
 80094c0:	4622      	mov	r2, r4
 80094c2:	462b      	mov	r3, r5
 80094c4:	1891      	adds	r1, r2, r2
 80094c6:	6439      	str	r1, [r7, #64]	; 0x40
 80094c8:	415b      	adcs	r3, r3
 80094ca:	647b      	str	r3, [r7, #68]	; 0x44
 80094cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80094d0:	1912      	adds	r2, r2, r4
 80094d2:	eb45 0303 	adc.w	r3, r5, r3
 80094d6:	f04f 0000 	mov.w	r0, #0
 80094da:	f04f 0100 	mov.w	r1, #0
 80094de:	00d9      	lsls	r1, r3, #3
 80094e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094e4:	00d0      	lsls	r0, r2, #3
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	1911      	adds	r1, r2, r4
 80094ec:	6639      	str	r1, [r7, #96]	; 0x60
 80094ee:	416b      	adcs	r3, r5
 80094f0:	667b      	str	r3, [r7, #100]	; 0x64
 80094f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	461a      	mov	r2, r3
 80094f8:	f04f 0300 	mov.w	r3, #0
 80094fc:	1891      	adds	r1, r2, r2
 80094fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8009500:	415b      	adcs	r3, r3
 8009502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009508:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800950c:	f7f7 fc4e 	bl	8000dac <__aeabi_uldivmod>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	4ba5      	ldr	r3, [pc, #660]	; (80097ac <UART_SetConfig+0x38c>)
 8009516:	fba3 2302 	umull	r2, r3, r3, r2
 800951a:	095b      	lsrs	r3, r3, #5
 800951c:	011e      	lsls	r6, r3, #4
 800951e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009520:	461c      	mov	r4, r3
 8009522:	f04f 0500 	mov.w	r5, #0
 8009526:	4622      	mov	r2, r4
 8009528:	462b      	mov	r3, r5
 800952a:	1891      	adds	r1, r2, r2
 800952c:	6339      	str	r1, [r7, #48]	; 0x30
 800952e:	415b      	adcs	r3, r3
 8009530:	637b      	str	r3, [r7, #52]	; 0x34
 8009532:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009536:	1912      	adds	r2, r2, r4
 8009538:	eb45 0303 	adc.w	r3, r5, r3
 800953c:	f04f 0000 	mov.w	r0, #0
 8009540:	f04f 0100 	mov.w	r1, #0
 8009544:	00d9      	lsls	r1, r3, #3
 8009546:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800954a:	00d0      	lsls	r0, r2, #3
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	1911      	adds	r1, r2, r4
 8009552:	65b9      	str	r1, [r7, #88]	; 0x58
 8009554:	416b      	adcs	r3, r5
 8009556:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	461a      	mov	r2, r3
 800955e:	f04f 0300 	mov.w	r3, #0
 8009562:	1891      	adds	r1, r2, r2
 8009564:	62b9      	str	r1, [r7, #40]	; 0x28
 8009566:	415b      	adcs	r3, r3
 8009568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800956a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800956e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009572:	f7f7 fc1b 	bl	8000dac <__aeabi_uldivmod>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4b8c      	ldr	r3, [pc, #560]	; (80097ac <UART_SetConfig+0x38c>)
 800957c:	fba3 1302 	umull	r1, r3, r3, r2
 8009580:	095b      	lsrs	r3, r3, #5
 8009582:	2164      	movs	r1, #100	; 0x64
 8009584:	fb01 f303 	mul.w	r3, r1, r3
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	00db      	lsls	r3, r3, #3
 800958c:	3332      	adds	r3, #50	; 0x32
 800958e:	4a87      	ldr	r2, [pc, #540]	; (80097ac <UART_SetConfig+0x38c>)
 8009590:	fba2 2303 	umull	r2, r3, r2, r3
 8009594:	095b      	lsrs	r3, r3, #5
 8009596:	005b      	lsls	r3, r3, #1
 8009598:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800959c:	441e      	add	r6, r3
 800959e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095a0:	4618      	mov	r0, r3
 80095a2:	f04f 0100 	mov.w	r1, #0
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	1894      	adds	r4, r2, r2
 80095ac:	623c      	str	r4, [r7, #32]
 80095ae:	415b      	adcs	r3, r3
 80095b0:	627b      	str	r3, [r7, #36]	; 0x24
 80095b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095b6:	1812      	adds	r2, r2, r0
 80095b8:	eb41 0303 	adc.w	r3, r1, r3
 80095bc:	f04f 0400 	mov.w	r4, #0
 80095c0:	f04f 0500 	mov.w	r5, #0
 80095c4:	00dd      	lsls	r5, r3, #3
 80095c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80095ca:	00d4      	lsls	r4, r2, #3
 80095cc:	4622      	mov	r2, r4
 80095ce:	462b      	mov	r3, r5
 80095d0:	1814      	adds	r4, r2, r0
 80095d2:	653c      	str	r4, [r7, #80]	; 0x50
 80095d4:	414b      	adcs	r3, r1
 80095d6:	657b      	str	r3, [r7, #84]	; 0x54
 80095d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	461a      	mov	r2, r3
 80095de:	f04f 0300 	mov.w	r3, #0
 80095e2:	1891      	adds	r1, r2, r2
 80095e4:	61b9      	str	r1, [r7, #24]
 80095e6:	415b      	adcs	r3, r3
 80095e8:	61fb      	str	r3, [r7, #28]
 80095ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80095f2:	f7f7 fbdb 	bl	8000dac <__aeabi_uldivmod>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	4b6c      	ldr	r3, [pc, #432]	; (80097ac <UART_SetConfig+0x38c>)
 80095fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009600:	095b      	lsrs	r3, r3, #5
 8009602:	2164      	movs	r1, #100	; 0x64
 8009604:	fb01 f303 	mul.w	r3, r1, r3
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	3332      	adds	r3, #50	; 0x32
 800960e:	4a67      	ldr	r2, [pc, #412]	; (80097ac <UART_SetConfig+0x38c>)
 8009610:	fba2 2303 	umull	r2, r3, r2, r3
 8009614:	095b      	lsrs	r3, r3, #5
 8009616:	f003 0207 	and.w	r2, r3, #7
 800961a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4432      	add	r2, r6
 8009620:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009622:	e0b9      	b.n	8009798 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009626:	461c      	mov	r4, r3
 8009628:	f04f 0500 	mov.w	r5, #0
 800962c:	4622      	mov	r2, r4
 800962e:	462b      	mov	r3, r5
 8009630:	1891      	adds	r1, r2, r2
 8009632:	6139      	str	r1, [r7, #16]
 8009634:	415b      	adcs	r3, r3
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800963c:	1912      	adds	r2, r2, r4
 800963e:	eb45 0303 	adc.w	r3, r5, r3
 8009642:	f04f 0000 	mov.w	r0, #0
 8009646:	f04f 0100 	mov.w	r1, #0
 800964a:	00d9      	lsls	r1, r3, #3
 800964c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009650:	00d0      	lsls	r0, r2, #3
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	eb12 0804 	adds.w	r8, r2, r4
 800965a:	eb43 0905 	adc.w	r9, r3, r5
 800965e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	4618      	mov	r0, r3
 8009664:	f04f 0100 	mov.w	r1, #0
 8009668:	f04f 0200 	mov.w	r2, #0
 800966c:	f04f 0300 	mov.w	r3, #0
 8009670:	008b      	lsls	r3, r1, #2
 8009672:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009676:	0082      	lsls	r2, r0, #2
 8009678:	4640      	mov	r0, r8
 800967a:	4649      	mov	r1, r9
 800967c:	f7f7 fb96 	bl	8000dac <__aeabi_uldivmod>
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	4b49      	ldr	r3, [pc, #292]	; (80097ac <UART_SetConfig+0x38c>)
 8009686:	fba3 2302 	umull	r2, r3, r3, r2
 800968a:	095b      	lsrs	r3, r3, #5
 800968c:	011e      	lsls	r6, r3, #4
 800968e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009690:	4618      	mov	r0, r3
 8009692:	f04f 0100 	mov.w	r1, #0
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	1894      	adds	r4, r2, r2
 800969c:	60bc      	str	r4, [r7, #8]
 800969e:	415b      	adcs	r3, r3
 80096a0:	60fb      	str	r3, [r7, #12]
 80096a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096a6:	1812      	adds	r2, r2, r0
 80096a8:	eb41 0303 	adc.w	r3, r1, r3
 80096ac:	f04f 0400 	mov.w	r4, #0
 80096b0:	f04f 0500 	mov.w	r5, #0
 80096b4:	00dd      	lsls	r5, r3, #3
 80096b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096ba:	00d4      	lsls	r4, r2, #3
 80096bc:	4622      	mov	r2, r4
 80096be:	462b      	mov	r3, r5
 80096c0:	1814      	adds	r4, r2, r0
 80096c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80096c4:	414b      	adcs	r3, r1
 80096c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	4618      	mov	r0, r3
 80096ce:	f04f 0100 	mov.w	r1, #0
 80096d2:	f04f 0200 	mov.w	r2, #0
 80096d6:	f04f 0300 	mov.w	r3, #0
 80096da:	008b      	lsls	r3, r1, #2
 80096dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80096e0:	0082      	lsls	r2, r0, #2
 80096e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80096e6:	f7f7 fb61 	bl	8000dac <__aeabi_uldivmod>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4b2f      	ldr	r3, [pc, #188]	; (80097ac <UART_SetConfig+0x38c>)
 80096f0:	fba3 1302 	umull	r1, r3, r3, r2
 80096f4:	095b      	lsrs	r3, r3, #5
 80096f6:	2164      	movs	r1, #100	; 0x64
 80096f8:	fb01 f303 	mul.w	r3, r1, r3
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	011b      	lsls	r3, r3, #4
 8009700:	3332      	adds	r3, #50	; 0x32
 8009702:	4a2a      	ldr	r2, [pc, #168]	; (80097ac <UART_SetConfig+0x38c>)
 8009704:	fba2 2303 	umull	r2, r3, r2, r3
 8009708:	095b      	lsrs	r3, r3, #5
 800970a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800970e:	441e      	add	r6, r3
 8009710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009712:	4618      	mov	r0, r3
 8009714:	f04f 0100 	mov.w	r1, #0
 8009718:	4602      	mov	r2, r0
 800971a:	460b      	mov	r3, r1
 800971c:	1894      	adds	r4, r2, r2
 800971e:	603c      	str	r4, [r7, #0]
 8009720:	415b      	adcs	r3, r3
 8009722:	607b      	str	r3, [r7, #4]
 8009724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009728:	1812      	adds	r2, r2, r0
 800972a:	eb41 0303 	adc.w	r3, r1, r3
 800972e:	f04f 0400 	mov.w	r4, #0
 8009732:	f04f 0500 	mov.w	r5, #0
 8009736:	00dd      	lsls	r5, r3, #3
 8009738:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800973c:	00d4      	lsls	r4, r2, #3
 800973e:	4622      	mov	r2, r4
 8009740:	462b      	mov	r3, r5
 8009742:	eb12 0a00 	adds.w	sl, r2, r0
 8009746:	eb43 0b01 	adc.w	fp, r3, r1
 800974a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	4618      	mov	r0, r3
 8009750:	f04f 0100 	mov.w	r1, #0
 8009754:	f04f 0200 	mov.w	r2, #0
 8009758:	f04f 0300 	mov.w	r3, #0
 800975c:	008b      	lsls	r3, r1, #2
 800975e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009762:	0082      	lsls	r2, r0, #2
 8009764:	4650      	mov	r0, sl
 8009766:	4659      	mov	r1, fp
 8009768:	f7f7 fb20 	bl	8000dac <__aeabi_uldivmod>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	4b0e      	ldr	r3, [pc, #56]	; (80097ac <UART_SetConfig+0x38c>)
 8009772:	fba3 1302 	umull	r1, r3, r3, r2
 8009776:	095b      	lsrs	r3, r3, #5
 8009778:	2164      	movs	r1, #100	; 0x64
 800977a:	fb01 f303 	mul.w	r3, r1, r3
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	011b      	lsls	r3, r3, #4
 8009782:	3332      	adds	r3, #50	; 0x32
 8009784:	4a09      	ldr	r2, [pc, #36]	; (80097ac <UART_SetConfig+0x38c>)
 8009786:	fba2 2303 	umull	r2, r3, r2, r3
 800978a:	095b      	lsrs	r3, r3, #5
 800978c:	f003 020f 	and.w	r2, r3, #15
 8009790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4432      	add	r2, r6
 8009796:	609a      	str	r2, [r3, #8]
}
 8009798:	bf00      	nop
 800979a:	377c      	adds	r7, #124	; 0x7c
 800979c:	46bd      	mov	sp, r7
 800979e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a2:	bf00      	nop
 80097a4:	40011000 	.word	0x40011000
 80097a8:	40011400 	.word	0x40011400
 80097ac:	51eb851f 	.word	0x51eb851f

080097b0 <calloc>:
 80097b0:	4b02      	ldr	r3, [pc, #8]	; (80097bc <calloc+0xc>)
 80097b2:	460a      	mov	r2, r1
 80097b4:	4601      	mov	r1, r0
 80097b6:	6818      	ldr	r0, [r3, #0]
 80097b8:	f000 b842 	b.w	8009840 <_calloc_r>
 80097bc:	20000024 	.word	0x20000024

080097c0 <__errno>:
 80097c0:	4b01      	ldr	r3, [pc, #4]	; (80097c8 <__errno+0x8>)
 80097c2:	6818      	ldr	r0, [r3, #0]
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	20000024 	.word	0x20000024

080097cc <__libc_init_array>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	4d0d      	ldr	r5, [pc, #52]	; (8009804 <__libc_init_array+0x38>)
 80097d0:	4c0d      	ldr	r4, [pc, #52]	; (8009808 <__libc_init_array+0x3c>)
 80097d2:	1b64      	subs	r4, r4, r5
 80097d4:	10a4      	asrs	r4, r4, #2
 80097d6:	2600      	movs	r6, #0
 80097d8:	42a6      	cmp	r6, r4
 80097da:	d109      	bne.n	80097f0 <__libc_init_array+0x24>
 80097dc:	4d0b      	ldr	r5, [pc, #44]	; (800980c <__libc_init_array+0x40>)
 80097de:	4c0c      	ldr	r4, [pc, #48]	; (8009810 <__libc_init_array+0x44>)
 80097e0:	f000 f99e 	bl	8009b20 <_init>
 80097e4:	1b64      	subs	r4, r4, r5
 80097e6:	10a4      	asrs	r4, r4, #2
 80097e8:	2600      	movs	r6, #0
 80097ea:	42a6      	cmp	r6, r4
 80097ec:	d105      	bne.n	80097fa <__libc_init_array+0x2e>
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097f4:	4798      	blx	r3
 80097f6:	3601      	adds	r6, #1
 80097f8:	e7ee      	b.n	80097d8 <__libc_init_array+0xc>
 80097fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80097fe:	4798      	blx	r3
 8009800:	3601      	adds	r6, #1
 8009802:	e7f2      	b.n	80097ea <__libc_init_array+0x1e>
 8009804:	08009b78 	.word	0x08009b78
 8009808:	08009b78 	.word	0x08009b78
 800980c:	08009b78 	.word	0x08009b78
 8009810:	08009b7c 	.word	0x08009b7c

08009814 <memcpy>:
 8009814:	440a      	add	r2, r1
 8009816:	4291      	cmp	r1, r2
 8009818:	f100 33ff 	add.w	r3, r0, #4294967295
 800981c:	d100      	bne.n	8009820 <memcpy+0xc>
 800981e:	4770      	bx	lr
 8009820:	b510      	push	{r4, lr}
 8009822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800982a:	4291      	cmp	r1, r2
 800982c:	d1f9      	bne.n	8009822 <memcpy+0xe>
 800982e:	bd10      	pop	{r4, pc}

08009830 <memset>:
 8009830:	4402      	add	r2, r0
 8009832:	4603      	mov	r3, r0
 8009834:	4293      	cmp	r3, r2
 8009836:	d100      	bne.n	800983a <memset+0xa>
 8009838:	4770      	bx	lr
 800983a:	f803 1b01 	strb.w	r1, [r3], #1
 800983e:	e7f9      	b.n	8009834 <memset+0x4>

08009840 <_calloc_r>:
 8009840:	b513      	push	{r0, r1, r4, lr}
 8009842:	434a      	muls	r2, r1
 8009844:	4611      	mov	r1, r2
 8009846:	9201      	str	r2, [sp, #4]
 8009848:	f000 f80a 	bl	8009860 <_malloc_r>
 800984c:	4604      	mov	r4, r0
 800984e:	b118      	cbz	r0, 8009858 <_calloc_r+0x18>
 8009850:	9a01      	ldr	r2, [sp, #4]
 8009852:	2100      	movs	r1, #0
 8009854:	f7ff ffec 	bl	8009830 <memset>
 8009858:	4620      	mov	r0, r4
 800985a:	b002      	add	sp, #8
 800985c:	bd10      	pop	{r4, pc}
	...

08009860 <_malloc_r>:
 8009860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009862:	1ccd      	adds	r5, r1, #3
 8009864:	f025 0503 	bic.w	r5, r5, #3
 8009868:	3508      	adds	r5, #8
 800986a:	2d0c      	cmp	r5, #12
 800986c:	bf38      	it	cc
 800986e:	250c      	movcc	r5, #12
 8009870:	2d00      	cmp	r5, #0
 8009872:	4606      	mov	r6, r0
 8009874:	db01      	blt.n	800987a <_malloc_r+0x1a>
 8009876:	42a9      	cmp	r1, r5
 8009878:	d903      	bls.n	8009882 <_malloc_r+0x22>
 800987a:	230c      	movs	r3, #12
 800987c:	6033      	str	r3, [r6, #0]
 800987e:	2000      	movs	r0, #0
 8009880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009882:	f000 f857 	bl	8009934 <__malloc_lock>
 8009886:	4921      	ldr	r1, [pc, #132]	; (800990c <_malloc_r+0xac>)
 8009888:	680a      	ldr	r2, [r1, #0]
 800988a:	4614      	mov	r4, r2
 800988c:	b99c      	cbnz	r4, 80098b6 <_malloc_r+0x56>
 800988e:	4f20      	ldr	r7, [pc, #128]	; (8009910 <_malloc_r+0xb0>)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	b923      	cbnz	r3, 800989e <_malloc_r+0x3e>
 8009894:	4621      	mov	r1, r4
 8009896:	4630      	mov	r0, r6
 8009898:	f000 f83c 	bl	8009914 <_sbrk_r>
 800989c:	6038      	str	r0, [r7, #0]
 800989e:	4629      	mov	r1, r5
 80098a0:	4630      	mov	r0, r6
 80098a2:	f000 f837 	bl	8009914 <_sbrk_r>
 80098a6:	1c43      	adds	r3, r0, #1
 80098a8:	d123      	bne.n	80098f2 <_malloc_r+0x92>
 80098aa:	230c      	movs	r3, #12
 80098ac:	6033      	str	r3, [r6, #0]
 80098ae:	4630      	mov	r0, r6
 80098b0:	f000 f846 	bl	8009940 <__malloc_unlock>
 80098b4:	e7e3      	b.n	800987e <_malloc_r+0x1e>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	1b5b      	subs	r3, r3, r5
 80098ba:	d417      	bmi.n	80098ec <_malloc_r+0x8c>
 80098bc:	2b0b      	cmp	r3, #11
 80098be:	d903      	bls.n	80098c8 <_malloc_r+0x68>
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	441c      	add	r4, r3
 80098c4:	6025      	str	r5, [r4, #0]
 80098c6:	e004      	b.n	80098d2 <_malloc_r+0x72>
 80098c8:	6863      	ldr	r3, [r4, #4]
 80098ca:	42a2      	cmp	r2, r4
 80098cc:	bf0c      	ite	eq
 80098ce:	600b      	streq	r3, [r1, #0]
 80098d0:	6053      	strne	r3, [r2, #4]
 80098d2:	4630      	mov	r0, r6
 80098d4:	f000 f834 	bl	8009940 <__malloc_unlock>
 80098d8:	f104 000b 	add.w	r0, r4, #11
 80098dc:	1d23      	adds	r3, r4, #4
 80098de:	f020 0007 	bic.w	r0, r0, #7
 80098e2:	1ac2      	subs	r2, r0, r3
 80098e4:	d0cc      	beq.n	8009880 <_malloc_r+0x20>
 80098e6:	1a1b      	subs	r3, r3, r0
 80098e8:	50a3      	str	r3, [r4, r2]
 80098ea:	e7c9      	b.n	8009880 <_malloc_r+0x20>
 80098ec:	4622      	mov	r2, r4
 80098ee:	6864      	ldr	r4, [r4, #4]
 80098f0:	e7cc      	b.n	800988c <_malloc_r+0x2c>
 80098f2:	1cc4      	adds	r4, r0, #3
 80098f4:	f024 0403 	bic.w	r4, r4, #3
 80098f8:	42a0      	cmp	r0, r4
 80098fa:	d0e3      	beq.n	80098c4 <_malloc_r+0x64>
 80098fc:	1a21      	subs	r1, r4, r0
 80098fe:	4630      	mov	r0, r6
 8009900:	f000 f808 	bl	8009914 <_sbrk_r>
 8009904:	3001      	adds	r0, #1
 8009906:	d1dd      	bne.n	80098c4 <_malloc_r+0x64>
 8009908:	e7cf      	b.n	80098aa <_malloc_r+0x4a>
 800990a:	bf00      	nop
 800990c:	20000318 	.word	0x20000318
 8009910:	2000031c 	.word	0x2000031c

08009914 <_sbrk_r>:
 8009914:	b538      	push	{r3, r4, r5, lr}
 8009916:	4d06      	ldr	r5, [pc, #24]	; (8009930 <_sbrk_r+0x1c>)
 8009918:	2300      	movs	r3, #0
 800991a:	4604      	mov	r4, r0
 800991c:	4608      	mov	r0, r1
 800991e:	602b      	str	r3, [r5, #0]
 8009920:	f7fa fbd2 	bl	80040c8 <_sbrk>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	d102      	bne.n	800992e <_sbrk_r+0x1a>
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	b103      	cbz	r3, 800992e <_sbrk_r+0x1a>
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	bd38      	pop	{r3, r4, r5, pc}
 8009930:	20000554 	.word	0x20000554

08009934 <__malloc_lock>:
 8009934:	4801      	ldr	r0, [pc, #4]	; (800993c <__malloc_lock+0x8>)
 8009936:	f000 b809 	b.w	800994c <__retarget_lock_acquire_recursive>
 800993a:	bf00      	nop
 800993c:	2000055c 	.word	0x2000055c

08009940 <__malloc_unlock>:
 8009940:	4801      	ldr	r0, [pc, #4]	; (8009948 <__malloc_unlock+0x8>)
 8009942:	f000 b804 	b.w	800994e <__retarget_lock_release_recursive>
 8009946:	bf00      	nop
 8009948:	2000055c 	.word	0x2000055c

0800994c <__retarget_lock_acquire_recursive>:
 800994c:	4770      	bx	lr

0800994e <__retarget_lock_release_recursive>:
 800994e:	4770      	bx	lr

08009950 <sqrt>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	ed2d 8b02 	vpush	{d8}
 8009956:	ec55 4b10 	vmov	r4, r5, d0
 800995a:	f000 f82d 	bl	80099b8 <__ieee754_sqrt>
 800995e:	4b15      	ldr	r3, [pc, #84]	; (80099b4 <sqrt+0x64>)
 8009960:	eeb0 8a40 	vmov.f32	s16, s0
 8009964:	eef0 8a60 	vmov.f32	s17, s1
 8009968:	f993 3000 	ldrsb.w	r3, [r3]
 800996c:	3301      	adds	r3, #1
 800996e:	d019      	beq.n	80099a4 <sqrt+0x54>
 8009970:	4622      	mov	r2, r4
 8009972:	462b      	mov	r3, r5
 8009974:	4620      	mov	r0, r4
 8009976:	4629      	mov	r1, r5
 8009978:	f7f7 f884 	bl	8000a84 <__aeabi_dcmpun>
 800997c:	b990      	cbnz	r0, 80099a4 <sqrt+0x54>
 800997e:	2200      	movs	r2, #0
 8009980:	2300      	movs	r3, #0
 8009982:	4620      	mov	r0, r4
 8009984:	4629      	mov	r1, r5
 8009986:	f7f7 f855 	bl	8000a34 <__aeabi_dcmplt>
 800998a:	b158      	cbz	r0, 80099a4 <sqrt+0x54>
 800998c:	f7ff ff18 	bl	80097c0 <__errno>
 8009990:	2321      	movs	r3, #33	; 0x21
 8009992:	6003      	str	r3, [r0, #0]
 8009994:	2200      	movs	r2, #0
 8009996:	2300      	movs	r3, #0
 8009998:	4610      	mov	r0, r2
 800999a:	4619      	mov	r1, r3
 800999c:	f7f6 ff02 	bl	80007a4 <__aeabi_ddiv>
 80099a0:	ec41 0b18 	vmov	d8, r0, r1
 80099a4:	eeb0 0a48 	vmov.f32	s0, s16
 80099a8:	eef0 0a68 	vmov.f32	s1, s17
 80099ac:	ecbd 8b02 	vpop	{d8}
 80099b0:	bd38      	pop	{r3, r4, r5, pc}
 80099b2:	bf00      	nop
 80099b4:	20000088 	.word	0x20000088

080099b8 <__ieee754_sqrt>:
 80099b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099bc:	ec55 4b10 	vmov	r4, r5, d0
 80099c0:	4e56      	ldr	r6, [pc, #344]	; (8009b1c <__ieee754_sqrt+0x164>)
 80099c2:	43ae      	bics	r6, r5
 80099c4:	ee10 0a10 	vmov	r0, s0
 80099c8:	ee10 3a10 	vmov	r3, s0
 80099cc:	4629      	mov	r1, r5
 80099ce:	462a      	mov	r2, r5
 80099d0:	d110      	bne.n	80099f4 <__ieee754_sqrt+0x3c>
 80099d2:	ee10 2a10 	vmov	r2, s0
 80099d6:	462b      	mov	r3, r5
 80099d8:	f7f6 fdba 	bl	8000550 <__aeabi_dmul>
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4620      	mov	r0, r4
 80099e2:	4629      	mov	r1, r5
 80099e4:	f7f6 fbfe 	bl	80001e4 <__adddf3>
 80099e8:	4604      	mov	r4, r0
 80099ea:	460d      	mov	r5, r1
 80099ec:	ec45 4b10 	vmov	d0, r4, r5
 80099f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f4:	2d00      	cmp	r5, #0
 80099f6:	dc10      	bgt.n	8009a1a <__ieee754_sqrt+0x62>
 80099f8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80099fc:	4330      	orrs	r0, r6
 80099fe:	d0f5      	beq.n	80099ec <__ieee754_sqrt+0x34>
 8009a00:	b15d      	cbz	r5, 8009a1a <__ieee754_sqrt+0x62>
 8009a02:	ee10 2a10 	vmov	r2, s0
 8009a06:	462b      	mov	r3, r5
 8009a08:	ee10 0a10 	vmov	r0, s0
 8009a0c:	f7f6 fbe8 	bl	80001e0 <__aeabi_dsub>
 8009a10:	4602      	mov	r2, r0
 8009a12:	460b      	mov	r3, r1
 8009a14:	f7f6 fec6 	bl	80007a4 <__aeabi_ddiv>
 8009a18:	e7e6      	b.n	80099e8 <__ieee754_sqrt+0x30>
 8009a1a:	1509      	asrs	r1, r1, #20
 8009a1c:	d076      	beq.n	8009b0c <__ieee754_sqrt+0x154>
 8009a1e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009a22:	07ce      	lsls	r6, r1, #31
 8009a24:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009a28:	bf5e      	ittt	pl
 8009a2a:	0fda      	lsrpl	r2, r3, #31
 8009a2c:	005b      	lslpl	r3, r3, #1
 8009a2e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009a32:	0fda      	lsrs	r2, r3, #31
 8009a34:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009a38:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	106d      	asrs	r5, r5, #1
 8009a40:	005b      	lsls	r3, r3, #1
 8009a42:	f04f 0e16 	mov.w	lr, #22
 8009a46:	4684      	mov	ip, r0
 8009a48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a4c:	eb0c 0401 	add.w	r4, ip, r1
 8009a50:	4294      	cmp	r4, r2
 8009a52:	bfde      	ittt	le
 8009a54:	1b12      	suble	r2, r2, r4
 8009a56:	eb04 0c01 	addle.w	ip, r4, r1
 8009a5a:	1840      	addle	r0, r0, r1
 8009a5c:	0052      	lsls	r2, r2, #1
 8009a5e:	f1be 0e01 	subs.w	lr, lr, #1
 8009a62:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009a66:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009a6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a6e:	d1ed      	bne.n	8009a4c <__ieee754_sqrt+0x94>
 8009a70:	4671      	mov	r1, lr
 8009a72:	2720      	movs	r7, #32
 8009a74:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009a78:	4562      	cmp	r2, ip
 8009a7a:	eb04 060e 	add.w	r6, r4, lr
 8009a7e:	dc02      	bgt.n	8009a86 <__ieee754_sqrt+0xce>
 8009a80:	d113      	bne.n	8009aaa <__ieee754_sqrt+0xf2>
 8009a82:	429e      	cmp	r6, r3
 8009a84:	d811      	bhi.n	8009aaa <__ieee754_sqrt+0xf2>
 8009a86:	2e00      	cmp	r6, #0
 8009a88:	eb06 0e04 	add.w	lr, r6, r4
 8009a8c:	da43      	bge.n	8009b16 <__ieee754_sqrt+0x15e>
 8009a8e:	f1be 0f00 	cmp.w	lr, #0
 8009a92:	db40      	blt.n	8009b16 <__ieee754_sqrt+0x15e>
 8009a94:	f10c 0801 	add.w	r8, ip, #1
 8009a98:	eba2 020c 	sub.w	r2, r2, ip
 8009a9c:	429e      	cmp	r6, r3
 8009a9e:	bf88      	it	hi
 8009aa0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009aa4:	1b9b      	subs	r3, r3, r6
 8009aa6:	4421      	add	r1, r4
 8009aa8:	46c4      	mov	ip, r8
 8009aaa:	0052      	lsls	r2, r2, #1
 8009aac:	3f01      	subs	r7, #1
 8009aae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009ab2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009ab6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009aba:	d1dd      	bne.n	8009a78 <__ieee754_sqrt+0xc0>
 8009abc:	4313      	orrs	r3, r2
 8009abe:	d006      	beq.n	8009ace <__ieee754_sqrt+0x116>
 8009ac0:	1c4c      	adds	r4, r1, #1
 8009ac2:	bf13      	iteet	ne
 8009ac4:	3101      	addne	r1, #1
 8009ac6:	3001      	addeq	r0, #1
 8009ac8:	4639      	moveq	r1, r7
 8009aca:	f021 0101 	bicne.w	r1, r1, #1
 8009ace:	1043      	asrs	r3, r0, #1
 8009ad0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009ad4:	0849      	lsrs	r1, r1, #1
 8009ad6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009ada:	07c2      	lsls	r2, r0, #31
 8009adc:	bf48      	it	mi
 8009ade:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009ae2:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	463d      	mov	r5, r7
 8009aea:	e77f      	b.n	80099ec <__ieee754_sqrt+0x34>
 8009aec:	0ada      	lsrs	r2, r3, #11
 8009aee:	3815      	subs	r0, #21
 8009af0:	055b      	lsls	r3, r3, #21
 8009af2:	2a00      	cmp	r2, #0
 8009af4:	d0fa      	beq.n	8009aec <__ieee754_sqrt+0x134>
 8009af6:	02d7      	lsls	r7, r2, #11
 8009af8:	d50a      	bpl.n	8009b10 <__ieee754_sqrt+0x158>
 8009afa:	f1c1 0420 	rsb	r4, r1, #32
 8009afe:	fa23 f404 	lsr.w	r4, r3, r4
 8009b02:	1e4d      	subs	r5, r1, #1
 8009b04:	408b      	lsls	r3, r1
 8009b06:	4322      	orrs	r2, r4
 8009b08:	1b41      	subs	r1, r0, r5
 8009b0a:	e788      	b.n	8009a1e <__ieee754_sqrt+0x66>
 8009b0c:	4608      	mov	r0, r1
 8009b0e:	e7f0      	b.n	8009af2 <__ieee754_sqrt+0x13a>
 8009b10:	0052      	lsls	r2, r2, #1
 8009b12:	3101      	adds	r1, #1
 8009b14:	e7ef      	b.n	8009af6 <__ieee754_sqrt+0x13e>
 8009b16:	46e0      	mov	r8, ip
 8009b18:	e7be      	b.n	8009a98 <__ieee754_sqrt+0xe0>
 8009b1a:	bf00      	nop
 8009b1c:	7ff00000 	.word	0x7ff00000

08009b20 <_init>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	bf00      	nop
 8009b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b26:	bc08      	pop	{r3}
 8009b28:	469e      	mov	lr, r3
 8009b2a:	4770      	bx	lr

08009b2c <_fini>:
 8009b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2e:	bf00      	nop
 8009b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b32:	bc08      	pop	{r3}
 8009b34:	469e      	mov	lr, r3
 8009b36:	4770      	bx	lr
