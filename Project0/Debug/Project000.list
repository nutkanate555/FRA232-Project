
Project000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c68  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008e00  08008e00  00018e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e38  08008e38  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e40  08008e40  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e40  08008e40  00018e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e44  08008e44  00018e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000088  08008ed0  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08008ed0  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d35  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203d  00000000  00000000  00030ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00032e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00033e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f23  00000000  00000000  00034d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116e9  00000000  00000000  0004bc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a86  00000000  00000000  0005d35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eede2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000493c  00000000  00000000  000eee38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008de8 	.word	0x08008de8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	08008de8 	.word	0x08008de8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96e 	b.w	80010a0 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468c      	mov	ip, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8083 	bne.w	8000ef2 <__udivmoddi4+0x116>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4617      	mov	r7, r2
 8000df0:	d947      	bls.n	8000e82 <__udivmoddi4+0xa6>
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b142      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	f1c2 0020 	rsb	r0, r2, #32
 8000dfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	ea40 0c01 	orr.w	ip, r0, r1
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fbbc f6f8 	udiv	r6, ip, r8
 8000e14:	fa1f fe87 	uxth.w	lr, r7
 8000e18:	fb08 c116 	mls	r1, r8, r6, ip
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f10e 	mul.w	r1, r6, lr
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x60>
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 8119 	bcs.w	8001064 <__udivmoddi4+0x288>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 8116 	bls.w	8001064 <__udivmoddi4+0x288>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	443b      	add	r3, r7
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x8c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	f080 8105 	bcs.w	8001068 <__udivmoddi4+0x28c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8102 	bls.w	8001068 <__udivmoddi4+0x28c>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6c:	eba4 040e 	sub.w	r4, r4, lr
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa0>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	b902      	cbnz	r2, 8000e86 <__udivmoddi4+0xaa>
 8000e84:	deff      	udf	#255	; 0xff
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d150      	bne.n	8000f30 <__udivmoddi4+0x154>
 8000e8e:	1bcb      	subs	r3, r1, r7
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	2601      	movs	r6, #1
 8000e9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb08 f30c 	mul.w	r3, r8, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0xe4>
 8000eb0:	1879      	adds	r1, r7, r1
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0xe2>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	f200 80e9 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ecc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x10c>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x10a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80d9 	bhi.w	8001098 <__udivmoddi4+0x2bc>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e7bf      	b.n	8000e72 <__udivmoddi4+0x96>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0x12e>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	f000 80b1 	beq.w	800105e <__udivmoddi4+0x282>
 8000efc:	2600      	movs	r6, #0
 8000efe:	e9c5 0100 	strd	r0, r1, [r5]
 8000f02:	4630      	mov	r0, r6
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f683 	clz	r6, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d14a      	bne.n	8000fa8 <__udivmoddi4+0x1cc>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0x140>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80b8 	bhi.w	800108c <__udivmoddi4+0x2b0>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d0a8      	beq.n	8000e7c <__udivmoddi4+0xa0>
 8000f2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0xa0>
 8000f30:	f1c2 0320 	rsb	r3, r2, #32
 8000f34:	fa20 f603 	lsr.w	r6, r0, r3
 8000f38:	4097      	lsls	r7, r2
 8000f3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	4330      	orrs	r0, r6
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f4c:	fa1f f887 	uxth.w	r8, r7
 8000f50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f58:	fb06 f108 	mul.w	r1, r6, r8
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x19c>
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f6a:	f080 808d 	bcs.w	8001088 <__udivmoddi4+0x2ac>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	f240 808a 	bls.w	8001088 <__udivmoddi4+0x2ac>
 8000f74:	3e02      	subs	r6, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	b281      	uxth	r1, r0
 8000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb00 f308 	mul.w	r3, r0, r8
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d907      	bls.n	8000fa0 <__udivmoddi4+0x1c4>
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f96:	d273      	bcs.n	8001080 <__udivmoddi4+0x2a4>
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d971      	bls.n	8001080 <__udivmoddi4+0x2a4>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4439      	add	r1, r7
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa6:	e778      	b.n	8000e9a <__udivmoddi4+0xbe>
 8000fa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000fac:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fba:	fa01 f306 	lsl.w	r3, r1, r6
 8000fbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	0c3b      	lsrs	r3, r7, #16
 8000fca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fce:	fa1f f884 	uxth.w	r8, r4
 8000fd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fda:	fb09 fa08 	mul.w	sl, r9, r8
 8000fde:	458a      	cmp	sl, r1
 8000fe0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x220>
 8000fea:	1861      	adds	r1, r4, r1
 8000fec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff0:	d248      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8000ff2:	458a      	cmp	sl, r1
 8000ff4:	d946      	bls.n	8001084 <__udivmoddi4+0x2a8>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4421      	add	r1, r4
 8000ffc:	eba1 010a 	sub.w	r1, r1, sl
 8001000:	b2bf      	uxth	r7, r7
 8001002:	fbb1 f0fe 	udiv	r0, r1, lr
 8001006:	fb0e 1110 	mls	r1, lr, r0, r1
 800100a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100e:	fb00 f808 	mul.w	r8, r0, r8
 8001012:	45b8      	cmp	r8, r7
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x24a>
 8001016:	19e7      	adds	r7, r4, r7
 8001018:	f100 31ff 	add.w	r1, r0, #4294967295
 800101c:	d22e      	bcs.n	800107c <__udivmoddi4+0x2a0>
 800101e:	45b8      	cmp	r8, r7
 8001020:	d92c      	bls.n	800107c <__udivmoddi4+0x2a0>
 8001022:	3802      	subs	r0, #2
 8001024:	4427      	add	r7, r4
 8001026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102a:	eba7 0708 	sub.w	r7, r7, r8
 800102e:	fba0 8902 	umull	r8, r9, r0, r2
 8001032:	454f      	cmp	r7, r9
 8001034:	46c6      	mov	lr, r8
 8001036:	4649      	mov	r1, r9
 8001038:	d31a      	bcc.n	8001070 <__udivmoddi4+0x294>
 800103a:	d017      	beq.n	800106c <__udivmoddi4+0x290>
 800103c:	b15d      	cbz	r5, 8001056 <__udivmoddi4+0x27a>
 800103e:	ebb3 020e 	subs.w	r2, r3, lr
 8001042:	eb67 0701 	sbc.w	r7, r7, r1
 8001046:	fa07 fc0c 	lsl.w	ip, r7, ip
 800104a:	40f2      	lsrs	r2, r6
 800104c:	ea4c 0202 	orr.w	r2, ip, r2
 8001050:	40f7      	lsrs	r7, r6
 8001052:	e9c5 2700 	strd	r2, r7, [r5]
 8001056:	2600      	movs	r6, #0
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	462e      	mov	r6, r5
 8001060:	4628      	mov	r0, r5
 8001062:	e70b      	b.n	8000e7c <__udivmoddi4+0xa0>
 8001064:	4606      	mov	r6, r0
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0x60>
 8001068:	4618      	mov	r0, r3
 800106a:	e6fd      	b.n	8000e68 <__udivmoddi4+0x8c>
 800106c:	4543      	cmp	r3, r8
 800106e:	d2e5      	bcs.n	800103c <__udivmoddi4+0x260>
 8001070:	ebb8 0e02 	subs.w	lr, r8, r2
 8001074:	eb69 0104 	sbc.w	r1, r9, r4
 8001078:	3801      	subs	r0, #1
 800107a:	e7df      	b.n	800103c <__udivmoddi4+0x260>
 800107c:	4608      	mov	r0, r1
 800107e:	e7d2      	b.n	8001026 <__udivmoddi4+0x24a>
 8001080:	4660      	mov	r0, ip
 8001082:	e78d      	b.n	8000fa0 <__udivmoddi4+0x1c4>
 8001084:	4681      	mov	r9, r0
 8001086:	e7b9      	b.n	8000ffc <__udivmoddi4+0x220>
 8001088:	4666      	mov	r6, ip
 800108a:	e775      	b.n	8000f78 <__udivmoddi4+0x19c>
 800108c:	4630      	mov	r0, r6
 800108e:	e74a      	b.n	8000f26 <__udivmoddi4+0x14a>
 8001090:	f1ac 0c02 	sub.w	ip, ip, #2
 8001094:	4439      	add	r1, r7
 8001096:	e713      	b.n	8000ec0 <__udivmoddi4+0xe4>
 8001098:	3802      	subs	r0, #2
 800109a:	443c      	add	r4, r7
 800109c:	e724      	b.n	8000ee8 <__udivmoddi4+0x10c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010aa:	f002 faa5 	bl	80035f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ae:	f000 f965 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b2:	f000 fb67 	bl	8001784 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b6:	f000 fb3d 	bl	8001734 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010ba:	f000 fb0f 	bl	80016dc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010be:	f000 f9f3 	bl	80014a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c2:	f000 fa49 	bl	8001558 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010c6:	f000 fa93 	bl	80015f0 <MX_TIM3_Init>
  MX_I2C1_Init();
 80010ca:	f000 f9bf 	bl	800144c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010ce:	489b      	ldr	r0, [pc, #620]	; (800133c <main+0x298>)
 80010d0:	f005 fcf4 	bl	8006abc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010d4:	213c      	movs	r1, #60	; 0x3c
 80010d6:	489a      	ldr	r0, [pc, #616]	; (8001340 <main+0x29c>)
 80010d8:	f005 ff02 	bl	8006ee0 <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010dc:	4899      	ldr	r0, [pc, #612]	; (8001344 <main+0x2a0>)
 80010de:	f005 fc93 	bl	8006a08 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e2:	2100      	movs	r1, #0
 80010e4:	4897      	ldr	r0, [pc, #604]	; (8001344 <main+0x2a0>)
 80010e6:	f005 fda5 	bl	8006c34 <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010ea:	4897      	ldr	r0, [pc, #604]	; (8001348 <main+0x2a4>)
 80010ec:	f000 fc9e 	bl	8001a2c <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010f0:	4995      	ldr	r1, [pc, #596]	; (8001348 <main+0x2a4>)
 80010f2:	4896      	ldr	r0, [pc, #600]	; (800134c <main+0x2a8>)
 80010f4:	f000 fcb0 	bl	8001a58 <TrajectoryGenerationStructureInit>

  VelocityControllerInit(&VelocityPIDController, &TrjStruc);
 80010f8:	4994      	ldr	r1, [pc, #592]	; (800134c <main+0x2a8>)
 80010fa:	4895      	ldr	r0, [pc, #596]	; (8001350 <main+0x2ac>)
 80010fc:	f000 fd24 	bl	8001b48 <VelocityControllerInit>
  DisplacementControllerInit(&PositionPIDController, &TrjStruc);
 8001100:	4992      	ldr	r1, [pc, #584]	; (800134c <main+0x2a8>)
 8001102:	4894      	ldr	r0, [pc, #592]	; (8001354 <main+0x2b0>)
 8001104:	f000 fd54 	bl	8001bb0 <DisplacementControllerInit>

  ///UART init
  UART2.huart = &huart2;
 8001108:	4b93      	ldr	r3, [pc, #588]	; (8001358 <main+0x2b4>)
 800110a:	4a94      	ldr	r2, [pc, #592]	; (800135c <main+0x2b8>)
 800110c:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 800110e:	4b92      	ldr	r3, [pc, #584]	; (8001358 <main+0x2b4>)
 8001110:	22ff      	movs	r2, #255	; 0xff
 8001112:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8001114:	4b90      	ldr	r3, [pc, #576]	; (8001358 <main+0x2b4>)
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 800111a:	488f      	ldr	r0, [pc, #572]	; (8001358 <main+0x2b4>)
 800111c:	f001 fa80 	bl	8002620 <UARTInit>
  UARTResetStart(&UART2);
 8001120:	488d      	ldr	r0, [pc, #564]	; (8001358 <main+0x2b4>)
 8001122:	f001 faa5 	bl	8002670 <UARTResetStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 8001126:	488c      	ldr	r0, [pc, #560]	; (8001358 <main+0x2b4>)
 8001128:	f001 fac6 	bl	80026b8 <UARTReadChar>
 800112c:	4603      	mov	r3, r0
 800112e:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 8001130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <main+0xa2>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 800113a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113e:	4986      	ldr	r1, [pc, #536]	; (8001358 <main+0x2b4>)
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fba1 	bl	8002888 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 8001146:	4b86      	ldr	r3, [pc, #536]	; (8001360 <main+0x2bc>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b06      	cmp	r3, #6
 800114c:	d8eb      	bhi.n	8001126 <main+0x82>
 800114e:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <main+0xb0>)
 8001150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001154:	08001127 	.word	0x08001127
 8001158:	08001127 	.word	0x08001127
 800115c:	08001171 	.word	0x08001171
 8001160:	08001177 	.word	0x08001177
 8001164:	08001183 	.word	0x08001183
 8001168:	08001127 	.word	0x08001127
 800116c:	080012a5 	.word	0x080012a5
	  		  break;
	  	  case STATE_Idle:
		  	  break;

	  	  case STATE_PrepareDATA:
	  		  TrajectoryGenerationPrepareDATA();
 8001170:	f000 fd86 	bl	8001c80 <TrajectoryGenerationPrepareDATA>
		  	  break;
 8001174:	e0e1      	b.n	800133a <main+0x296>

	  	  case STATE_Calculation:
	  		  TrajectoryGenerationCalculation();
 8001176:	f000 fe7b 	bl	8001e70 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 800117a:	4b79      	ldr	r3, [pc, #484]	; (8001360 <main+0x2bc>)
 800117c:	2204      	movs	r2, #4
 800117e:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001180:	e0db      	b.n	800133a <main+0x296>

	   	  case STATE_Link_Moving:
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8001182:	f000 fc39 	bl	80019f8 <micros>
 8001186:	4b71      	ldr	r3, [pc, #452]	; (800134c <main+0x2a8>)
 8001188:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800118c:	1a84      	subs	r4, r0, r2
 800118e:	eb61 0503 	sbc.w	r5, r1, r3
 8001192:	4b6e      	ldr	r3, [pc, #440]	; (800134c <main+0x2a8>)
 8001194:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001198:	429d      	cmp	r5, r3
 800119a:	bf08      	it	eq
 800119c:	4294      	cmpeq	r4, r2
 800119e:	f0c0 80c7 	bcc.w	8001330 <main+0x28c>
	   		  {
	   			  // GEN Trajectory
	   			  TrajectoryGenerationProcess();
 80011a2:	f000 ff75 	bl	8002090 <TrajectoryGenerationProcess>
	   			  EncoderVelocityAndPosition_Update();
 80011a6:	f000 fb7b 	bl	80018a0 <EncoderVelocityAndPosition_Update>
	   			  PIDController2in1();
 80011aa:	f001 f9c1 	bl	8002530 <PIDController2in1>
	   			  Plant_input = PositionPIDController.ControllerOutput;
 80011ae:	4b69      	ldr	r3, [pc, #420]	; (8001354 <main+0x2b0>)
 80011b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b8:	ee17 2a90 	vmov	r2, s15
 80011bc:	4b69      	ldr	r3, [pc, #420]	; (8001364 <main+0x2c0>)
 80011be:	601a      	str	r2, [r3, #0]
	   			  DCMotorStruc.PWMOut = abs(Plant_input);
 80011c0:	4b68      	ldr	r3, [pc, #416]	; (8001364 <main+0x2c0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bfb8      	it	lt
 80011c8:	425b      	neglt	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b66      	ldr	r3, [pc, #408]	; (8001368 <main+0x2c4>)
 80011ce:	605a      	str	r2, [r3, #4]
	   			  if (DCMotorStruc.PWMOut > 10000)
 80011d0:	4b65      	ldr	r3, [pc, #404]	; (8001368 <main+0x2c4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80011d8:	4293      	cmp	r3, r2
 80011da:	d903      	bls.n	80011e4 <main+0x140>
	   			  {
	   				 DCMotorStruc.PWMOut = 10000;
 80011dc:	4b62      	ldr	r3, [pc, #392]	; (8001368 <main+0x2c4>)
 80011de:	f242 7210 	movw	r2, #10000	; 0x2710
 80011e2:	605a      	str	r2, [r3, #4]
	   			  }
	   			  if (Plant_input >= 0)
	   			  {
	   				  DCMotorStruc.DIR = 1;
 80011e4:	4b60      	ldr	r3, [pc, #384]	; (8001368 <main+0x2c4>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
	   			  }
	   			  else if (Plant_input < 0)
	   			  {
	   				  DCMotorStruc.DIR = 0;
	   			  }
	   			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 80011ea:	4b5f      	ldr	r3, [pc, #380]	; (8001368 <main+0x2c4>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	485e      	ldr	r0, [pc, #376]	; (800136c <main+0x2c8>)
 80011f4:	f003 f930 	bl	8004458 <HAL_GPIO_WritePin>
	   			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut);
 80011f8:	4b52      	ldr	r3, [pc, #328]	; (8001344 <main+0x2a0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a5a      	ldr	r2, [pc, #360]	; (8001368 <main+0x2c4>)
 80011fe:	6852      	ldr	r2, [r2, #4]
 8001200:	635a      	str	r2, [r3, #52]	; 0x34
	   			  TrjStruc.Loop_Timestamp = micros();
 8001202:	f000 fbf9 	bl	80019f8 <micros>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4950      	ldr	r1, [pc, #320]	; (800134c <main+0x2a8>)
 800120c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 1) &&
 8001210:	4b50      	ldr	r3, [pc, #320]	; (8001354 <main+0x2b0>)
 8001212:	ed93 7a05 	vldr	s14, [r3, #20]
 8001216:	4b4d      	ldr	r3, [pc, #308]	; (800134c <main+0x2a8>)
 8001218:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800121c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001224:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122c:	d900      	bls.n	8001230 <main+0x18c>
	   				 Moving_Link_Task_Flag = 0;
	   			  }

	   		  }

	  		  break;
 800122e:	e07f      	b.n	8001330 <main+0x28c>
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 1) &&
 8001230:	4b48      	ldr	r3, [pc, #288]	; (8001354 <main+0x2b0>)
 8001232:	ed93 7a05 	vldr	s14, [r3, #20]
 8001236:	4b45      	ldr	r3, [pc, #276]	; (800134c <main+0x2a8>)
 8001238:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800123c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001240:	ee77 7ae6 	vsub.f32	s15, s15, s13
	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 1) &&
 8001244:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	da00      	bge.n	8001250 <main+0x1ac>
	  		  break;
 800124e:	e06f      	b.n	8001330 <main+0x28c>
						  (Moving_Link_Task_Flag == 1))
 8001250:	4b47      	ldr	r3, [pc, #284]	; (8001370 <main+0x2cc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 1) &&
 8001254:	2b01      	cmp	r3, #1
 8001256:	d16b      	bne.n	8001330 <main+0x28c>
	   				  if(MovingLinkMode == LMM_Set_Pos_Directly)
 8001258:	4b46      	ldr	r3, [pc, #280]	; (8001374 <main+0x2d0>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d10a      	bne.n	8001276 <main+0x1d2>
	   					Munmunbot_State = STATE_Idle;
 8001260:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <main+0x2bc>)
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001266:	4b37      	ldr	r3, [pc, #220]	; (8001344 <main+0x2a0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
	   					ACK2Return(&UART2);
 800126e:	483a      	ldr	r0, [pc, #232]	; (8001358 <main+0x2b4>)
 8001270:	f001 faf6 	bl	8002860 <ACK2Return>
 8001274:	e00e      	b.n	8001294 <main+0x1f0>
	   				  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 8001276:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <main+0x2d0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d003      	beq.n	8001286 <main+0x1e2>
 800127e:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <main+0x2d0>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b03      	cmp	r3, #3
 8001284:	d106      	bne.n	8001294 <main+0x1f0>
	   					Munmunbot_State = STATE_End_Effector_Working;
 8001286:	4b36      	ldr	r3, [pc, #216]	; (8001360 <main+0x2bc>)
 8001288:	2205      	movs	r2, #5
 800128a:	701a      	strb	r2, [r3, #0]
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <main+0x2a0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2200      	movs	r2, #0
 8001292:	635a      	str	r2, [r3, #52]	; 0x34
	   				 TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8001294:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <main+0x2b0>)
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	4a2c      	ldr	r2, [pc, #176]	; (800134c <main+0x2a8>)
 800129a:	65d3      	str	r3, [r2, #92]	; 0x5c
	   				 Moving_Link_Task_Flag = 0;
 800129c:	4b34      	ldr	r3, [pc, #208]	; (8001370 <main+0x2cc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
	  		  break;
 80012a2:	e045      	b.n	8001330 <main+0x28c>

	  		  break;

	  	  case STATE_SetHome:

	  		  switch (SethomeMode)
 80012a4:	4b34      	ldr	r3, [pc, #208]	; (8001378 <main+0x2d4>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d02a      	beq.n	8001302 <main+0x25e>
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	f73f af3a 	bgt.w	8001126 <main+0x82>
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <main+0x218>
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d00e      	beq.n	80012d8 <main+0x234>
 80012ba:	e734      	b.n	8001126 <main+0x82>
	  		  {
				case SetHomeState_0:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	482a      	ldr	r0, [pc, #168]	; (800136c <main+0x2c8>)
 80012c2:	f003 f8c9 	bl	8004458 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <main+0x2a0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012ce:	635a      	str	r2, [r3, #52]	; 0x34
					SethomeMode = SetHomeState_1;
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <main+0x2d4>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]

					break;
 80012d6:	e030      	b.n	800133a <main+0x296>
				case SetHomeState_1:
					if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 1)
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	4824      	ldr	r0, [pc, #144]	; (800136c <main+0x2c8>)
 80012dc:	f003 f8a4 	bl	8004428 <HAL_GPIO_ReadPin>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d126      	bne.n	8001334 <main+0x290>
					{
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	4820      	ldr	r0, [pc, #128]	; (800136c <main+0x2c8>)
 80012ec:	f003 f8b4 	bl	8004458 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <main+0x2a0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f8:	635a      	str	r2, [r3, #52]	; 0x34
						SethomeMode = SetHomeState_2;
 80012fa:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <main+0x2d4>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001300:	e018      	b.n	8001334 <main+0x290>
				case SetHomeState_2:
					if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0)
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	4819      	ldr	r0, [pc, #100]	; (800136c <main+0x2c8>)
 8001306:	f003 f88f 	bl	8004428 <HAL_GPIO_ReadPin>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d113      	bne.n	8001338 <main+0x294>
					{
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <main+0x2a0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
						Encoder_SetHome_Position();
 8001318:	f000 fb44 	bl	80019a4 <Encoder_SetHome_Position>
						SethomeMode = SetHomeState_0;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <main+0x2d4>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
						Munmunbot_State = STATE_Idle;
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <main+0x2bc>)
 8001324:	2201      	movs	r2, #1
 8001326:	701a      	strb	r2, [r3, #0]
						ACK1Return(&UART2);
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <main+0x2b4>)
 800132a:	f001 fa87 	bl	800283c <ACK1Return>
					}
				    break;
 800132e:	e003      	b.n	8001338 <main+0x294>
	  		  break;
 8001330:	bf00      	nop
 8001332:	e6f8      	b.n	8001126 <main+0x82>
					break;
 8001334:	bf00      	nop
 8001336:	e6f6      	b.n	8001126 <main+0x82>
				    break;
 8001338:	bf00      	nop
  {
 800133a:	e6f4      	b.n	8001126 <main+0x82>
 800133c:	200004ac 	.word	0x200004ac
 8001340:	20000464 	.word	0x20000464
 8001344:	200003bc 	.word	0x200003bc
 8001348:	200001c8 	.word	0x200001c8
 800134c:	20000158 	.word	0x20000158
 8001350:	20000128 	.word	0x20000128
 8001354:	200000f8 	.word	0x200000f8
 8001358:	200000b0 	.word	0x200000b0
 800135c:	200004f4 	.word	0x200004f4
 8001360:	200000d1 	.word	0x200000d1
 8001364:	200000ec 	.word	0x200000ec
 8001368:	200000c8 	.word	0x200000c8
 800136c:	40020800 	.word	0x40020800
 8001370:	200000f0 	.word	0x200000f0
 8001374:	200000e6 	.word	0x200000e6
 8001378:	200000d2 	.word	0x200000d2

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b094      	sub	sp, #80	; 0x50
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0320 	add.w	r3, r7, #32
 8001386:	2230      	movs	r2, #48	; 0x30
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f007 fbb4 	bl	8008af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <SystemClock_Config+0xc8>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	4a26      	ldr	r2, [pc, #152]	; (8001444 <SystemClock_Config+0xc8>)
 80013aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ae:	6413      	str	r3, [r2, #64]	; 0x40
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <SystemClock_Config+0xc8>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <SystemClock_Config+0xcc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a20      	ldr	r2, [pc, #128]	; (8001448 <SystemClock_Config+0xcc>)
 80013c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <SystemClock_Config+0xcc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d8:	2302      	movs	r3, #2
 80013da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013dc:	2301      	movs	r3, #1
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e0:	2310      	movs	r3, #16
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e4:	2302      	movs	r3, #2
 80013e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e8:	2300      	movs	r3, #0
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013ec:	2308      	movs	r3, #8
 80013ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013f0:	2364      	movs	r3, #100	; 0x64
 80013f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013f8:	2304      	movs	r3, #4
 80013fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fc:	f107 0320 	add.w	r3, r7, #32
 8001400:	4618      	mov	r0, r3
 8001402:	f004 fe3d 	bl	8006080 <HAL_RCC_OscConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800140c:	f001 fe1e 	bl	800304c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001410:	230f      	movs	r3, #15
 8001412:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001414:	2302      	movs	r3, #2
 8001416:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001420:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	2103      	movs	r1, #3
 800142c:	4618      	mov	r0, r3
 800142e:	f005 f89f 	bl	8006570 <HAL_RCC_ClockConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001438:	f001 fe08 	bl	800304c <Error_Handler>
  }
}
 800143c:	bf00      	nop
 800143e:	3750      	adds	r7, #80	; 0x50
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40007000 	.word	0x40007000

0800144c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_I2C1_Init+0x50>)
 8001452:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <MX_I2C1_Init+0x54>)
 8001454:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_I2C1_Init+0x50>)
 8001458:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <MX_I2C1_Init+0x58>)
 800145a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_I2C1_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_I2C1_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_I2C1_Init+0x50>)
 800146a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <MX_I2C1_Init+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_I2C1_Init+0x50>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_I2C1_Init+0x50>)
 800148a:	f002 ffff 	bl	800448c <HAL_I2C_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001494:	f001 fdda 	bl	800304c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000368 	.word	0x20000368
 80014a0:	40005400 	.word	0x40005400
 80014a4:	00061a80 	.word	0x00061a80

080014a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	2224      	movs	r2, #36	; 0x24
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f007 fb1e 	bl	8008af8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <MX_TIM1_Init+0xa8>)
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <MX_TIM1_Init+0xac>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <MX_TIM1_Init+0xa8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_TIM1_Init+0xa8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <MX_TIM1_Init+0xa8>)
 80014d8:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80014dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_TIM1_Init+0xa8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_TIM1_Init+0xa8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_TIM1_Init+0xa8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f0:	2303      	movs	r3, #3
 80014f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f8:	2301      	movs	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001500:	2302      	movs	r3, #2
 8001502:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001508:	2301      	movs	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4619      	mov	r1, r3
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <MX_TIM1_Init+0xa8>)
 800151c:	f005 fc3a 	bl	8006d94 <HAL_TIM_Encoder_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001526:	f001 fd91 	bl	800304c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <MX_TIM1_Init+0xa8>)
 8001538:	f006 fade 	bl	8007af8 <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001542:	f001 fd83 	bl	800304c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3730      	adds	r7, #48	; 0x30
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000464 	.word	0x20000464
 8001554:	40010000 	.word	0x40010000

08001558 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	463b      	mov	r3, r7
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <MX_TIM2_Init+0x94>)
 8001576:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800157a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_TIM2_Init+0x94>)
 800157e:	2263      	movs	r2, #99	; 0x63
 8001580:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_TIM2_Init+0x94>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_TIM2_Init+0x94>)
 800158a:	f04f 32ff 	mov.w	r2, #4294967295
 800158e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MX_TIM2_Init+0x94>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <MX_TIM2_Init+0x94>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800159c:	4813      	ldr	r0, [pc, #76]	; (80015ec <MX_TIM2_Init+0x94>)
 800159e:	f005 f9e3 	bl	8006968 <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015a8:	f001 fd50 	bl	800304c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <MX_TIM2_Init+0x94>)
 80015ba:	f005 fee5 	bl	8007388 <HAL_TIM_ConfigClockSource>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015c4:	f001 fd42 	bl	800304c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d0:	463b      	mov	r3, r7
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_TIM2_Init+0x94>)
 80015d6:	f006 fa8f 	bl	8007af8 <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015e0:	f001 fd34 	bl	800304c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200004ac 	.word	0x200004ac

080015f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08e      	sub	sp, #56	; 0x38
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001604:	f107 0320 	add.w	r3, r7, #32
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
 800161c:	615a      	str	r2, [r3, #20]
 800161e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001620:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001622:	4a2d      	ldr	r2, [pc, #180]	; (80016d8 <MX_TIM3_Init+0xe8>)
 8001624:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001626:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <MX_TIM3_Init+0xe4>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001634:	f242 7210 	movw	r2, #10000	; 0x2710
 8001638:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <MX_TIM3_Init+0xe4>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001646:	4823      	ldr	r0, [pc, #140]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001648:	f005 f98e 	bl	8006968 <HAL_TIM_Base_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001652:	f001 fcfb 	bl	800304c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800165c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001660:	4619      	mov	r1, r3
 8001662:	481c      	ldr	r0, [pc, #112]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001664:	f005 fe90 	bl	8007388 <HAL_TIM_ConfigClockSource>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800166e:	f001 fced 	bl	800304c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001672:	4818      	ldr	r0, [pc, #96]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001674:	f005 fa84 	bl	8006b80 <HAL_TIM_PWM_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800167e:	f001 fce5 	bl	800304c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800168a:	f107 0320 	add.w	r3, r7, #32
 800168e:	4619      	mov	r1, r3
 8001690:	4810      	ldr	r0, [pc, #64]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001692:	f006 fa31 	bl	8007af8 <HAL_TIMEx_MasterConfigSynchronization>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800169c:	f001 fcd6 	bl	800304c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a0:	2360      	movs	r3, #96	; 0x60
 80016a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	4619      	mov	r1, r3
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <MX_TIM3_Init+0xe4>)
 80016b8:	f005 fda8 	bl	800720c <HAL_TIM_PWM_ConfigChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016c2:	f001 fcc3 	bl	800304c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016c6:	4803      	ldr	r0, [pc, #12]	; (80016d4 <MX_TIM3_Init+0xe4>)
 80016c8:	f001 fdca 	bl	8003260 <HAL_TIM_MspPostInit>

}
 80016cc:	bf00      	nop
 80016ce:	3738      	adds	r7, #56	; 0x38
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200003bc 	.word	0x200003bc
 80016d8:	40000400 	.word	0x40000400

080016dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <MX_USART2_UART_Init+0x50>)
 80016e2:	4a13      	ldr	r2, [pc, #76]	; (8001730 <MX_USART2_UART_Init+0x54>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_USART2_UART_Init+0x50>)
 80016e8:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80016ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_USART2_UART_Init+0x50>)
 80016f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016f4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <MX_USART2_UART_Init+0x50>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_USART2_UART_Init+0x50>)
 80016fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_USART2_UART_Init+0x50>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_USART2_UART_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_USART2_UART_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_USART2_UART_Init+0x50>)
 8001718:	f006 fa70 	bl	8007bfc <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001722:	f001 fc93 	bl	800304c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200004f4 	.word	0x200004f4
 8001730:	40004400 	.word	0x40004400

08001734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_DMA_Init+0x4c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <MX_DMA_Init+0x4c>)
 8001744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <MX_DMA_Init+0x4c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	2010      	movs	r0, #16
 800175c:	f002 f899 	bl	8003892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001760:	2010      	movs	r0, #16
 8001762:	f002 f8b2 	bl	80038ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2011      	movs	r0, #17
 800176c:	f002 f891 	bl	8003892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001770:	2011      	movs	r0, #17
 8001772:	f002 f8aa 	bl	80038ca <HAL_NVIC_EnableIRQ>

}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <MX_GPIO_Init+0x10c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <MX_GPIO_Init+0x10c>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b39      	ldr	r3, [pc, #228]	; (8001890 <MX_GPIO_Init+0x10c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b35      	ldr	r3, [pc, #212]	; (8001890 <MX_GPIO_Init+0x10c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a34      	ldr	r2, [pc, #208]	; (8001890 <MX_GPIO_Init+0x10c>)
 80017c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b32      	ldr	r3, [pc, #200]	; (8001890 <MX_GPIO_Init+0x10c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <MX_GPIO_Init+0x10c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a2d      	ldr	r2, [pc, #180]	; (8001890 <MX_GPIO_Init+0x10c>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <MX_GPIO_Init+0x10c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <MX_GPIO_Init+0x10c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a26      	ldr	r2, [pc, #152]	; (8001890 <MX_GPIO_Init+0x10c>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <MX_GPIO_Init+0x10c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2120      	movs	r1, #32
 800180e:	4821      	ldr	r0, [pc, #132]	; (8001894 <MX_GPIO_Init+0x110>)
 8001810:	f002 fe22 	bl	8004458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	481f      	ldr	r0, [pc, #124]	; (8001898 <MX_GPIO_Init+0x114>)
 800181a:	f002 fe1d 	bl	8004458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800181e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <MX_GPIO_Init+0x118>)
 8001826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	4819      	ldr	r0, [pc, #100]	; (8001898 <MX_GPIO_Init+0x114>)
 8001834:	f002 fc74 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001838:	2320      	movs	r3, #32
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4811      	ldr	r0, [pc, #68]	; (8001894 <MX_GPIO_Init+0x110>)
 8001850:	f002 fc66 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitch_Signal_Pin */
  GPIO_InitStruct.Pin = LimitSwitch_Signal_Pin;
 8001854:	2340      	movs	r3, #64	; 0x40
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitch_Signal_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	480c      	ldr	r0, [pc, #48]	; (8001898 <MX_GPIO_Init+0x114>)
 8001868:	f002 fc5a 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001870:	2301      	movs	r3, #1
 8001872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_GPIO_Init+0x114>)
 8001884:	f002 fc4c 	bl	8004120 <HAL_GPIO_Init>

}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000
 8001898:	40020800 	.word	0x40020800
 800189c:	10210000 	.word	0x10210000

080018a0 <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 4096
#define  MAX_ENCODER_PERIOD 8192

void EncoderVelocityAndPosition_Update()
{
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	ed2d 8b02 	vpush	{d8}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;
	static uint32_t Velocity_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 80018aa:	4b35      	ldr	r3, [pc, #212]	; (8001980 <EncoderVelocityAndPosition_Update+0xe0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	613b      	str	r3, [r7, #16]

	uint64_t EncoderNowTimestamp = micros();
 80018b2:	f000 f8a1 	bl	80019f8 <micros>
 80018b6:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 80018ba:	4b32      	ldr	r3, [pc, #200]	; (8001984 <EncoderVelocityAndPosition_Update+0xe4>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018c4:	1a84      	subs	r4, r0, r2
 80018c6:	eb61 0503 	sbc.w	r5, r1, r3
 80018ca:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80018ce:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <EncoderVelocityAndPosition_Update+0xe8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018de:	db04      	blt.n	80018ea <EncoderVelocityAndPosition_Update+0x4a>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e007      	b.n	80018fa <EncoderVelocityAndPosition_Update+0x5a>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80018f0:	dc03      	bgt.n	80018fa <EncoderVelocityAndPosition_Update+0x5a>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80018f8:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time

	EncoderLastPosition = EncoderNowPosition;
 80018fa:	4a23      	ldr	r2, [pc, #140]	; (8001988 <EncoderVelocityAndPosition_Update+0xe8>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001900:	4920      	ldr	r1, [pc, #128]	; (8001984 <EncoderVelocityAndPosition_Update+0xe4>)
 8001902:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001906:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <EncoderVelocityAndPosition_Update+0xec>)
 8001916:	edc3 7a05 	vstr	s15, [r3, #20]

	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <EncoderVelocityAndPosition_Update+0xf0>)
 800191e:	fb02 f303 	mul.w	r3, r2, r3
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800192a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800192e:	f7ff f9f7 	bl	8000d20 <__aeabi_ul2f>
 8001932:	ee07 0a10 	vmov	s14, r0
 8001936:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800193a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800193e:	ee17 2a90 	vmov	r2, s15
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <EncoderVelocityAndPosition_Update+0xf4>)
 8001944:	601a      	str	r2, [r3, #0]

	// LPF
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*249))/250.0;
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <EncoderVelocityAndPosition_Update+0xf4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <EncoderVelocityAndPosition_Update+0xf8>)
 8001954:	edd3 7a05 	vldr	s15, [r3, #20]
 8001958:	eddf 6a10 	vldr	s13, [pc, #64]	; 800199c <EncoderVelocityAndPosition_Update+0xfc>
 800195c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001964:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80019a0 <EncoderVelocityAndPosition_Update+0x100>
 8001968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <EncoderVelocityAndPosition_Update+0xf8>)
 800196e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	ecbd 8b02 	vpop	{d8}
 800197c:	bdb0      	pop	{r4, r5, r7, pc}
 800197e:	bf00      	nop
 8001980:	20000464 	.word	0x20000464
 8001984:	200001d8 	.word	0x200001d8
 8001988:	200001e0 	.word	0x200001e0
 800198c:	200000f8 	.word	0x200000f8
 8001990:	000f4240 	.word	0x000f4240
 8001994:	200001e4 	.word	0x200001e4
 8001998:	20000128 	.word	0x20000128
 800199c:	43790000 	.word	0x43790000
 80019a0:	437a0000 	.word	0x437a0000

080019a4 <Encoder_SetHome_Position>:

void Encoder_SetHome_Position()
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
	HTIM_ENCODER.Instance->CNT = 0;
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <Encoder_SetHome_Position+0x18>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000464 	.word	0x20000464

080019c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c0:	b4b0      	push	{r4, r5, r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d109      	bne.n	80019e4 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f112 34ff 	adds.w	r4, r2, #4294967295
 80019da:	f143 0500 	adc.w	r5, r3, #0
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80019e0:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bcb0      	pop	{r4, r5, r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200004ac 	.word	0x200004ac
 80019f4:	200000a8 	.word	0x200000a8

080019f8 <micros>:

uint64_t micros()
{
 80019f8:	b4b0      	push	{r4, r5, r7}
 80019fa:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <micros+0x2c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	4618      	mov	r0, r3
 8001a04:	f04f 0100 	mov.w	r1, #0
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <micros+0x30>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	1884      	adds	r4, r0, r2
 8001a10:	eb41 0503 	adc.w	r5, r1, r3
 8001a14:	4622      	mov	r2, r4
 8001a16:	462b      	mov	r3, r5
}
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bcb0      	pop	{r4, r5, r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	200004ac 	.word	0x200004ac
 8001a28:	200000a8 	.word	0x200000a8

08001a2c <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a3a:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	009a      	lsls	r2, r3, #2
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 10;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	220a      	movs	r2, #10
 8001a4a:	609a      	str	r2, [r3, #8]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.25*(CUSSvar->PPRxQEI))/3.141;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fcf8 	bl	800045c <__aeabi_ui2d>
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <TrajectoryGenerationStructureInit+0xe0>)
 8001a72:	f7fe fd6d 	bl	8000550 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	a32c      	add	r3, pc, #176	; (adr r3, 8001b30 <TrajectoryGenerationStructureInit+0xd8>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fe8e 	bl	80007a4 <__aeabi_ddiv>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f7ff f82e 	bl	8000af0 <__aeabi_d2f>
 8001a94:	4602      	mov	r2, r0
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	615a      	str	r2, [r3, #20]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fcd8 	bl	800045c <__aeabi_ui2d>
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <TrajectoryGenerationStructureInit+0xe4>)
 8001ab2:	f7fe fe77 	bl	80007a4 <__aeabi_ddiv>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff f817 	bl	8000af0 <__aeabi_d2f>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = 0;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	65da      	str	r2, [r3, #92]	; 0x5c
	TGSvar->Mode = 0;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	669a      	str	r2, [r3, #104]	; 0x68
	TGSvar->Submode = 0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	66da      	str	r2, [r3, #108]	; 0x6c
	TGSvar->Loop_Freq = 10000;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ae2:	649a      	str	r2, [r3, #72]	; 0x48
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae8:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <TrajectoryGenerationStructureInit+0xe8>)
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	9ba5e354 	.word	0x9ba5e354
 8001b34:	400920c4 	.word	0x400920c4
 8001b38:	3fd00000 	.word	0x3fd00000
 8001b3c:	404e0000 	.word	0x404e0000
 8001b40:	000f4240 	.word	0x000f4240
 8001b44:	00000000 	.word	0x00000000

08001b48 <VelocityControllerInit>:

void VelocityControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <VelocityControllerInit+0x58>)
 8001b56:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 0.2;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <VelocityControllerInit+0x5c>)
 8001b5c:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0.1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <VelocityControllerInit+0x60>)
 8001b62:	609a      	str	r2, [r3, #8]
	VCvar->Integral_Value = 0;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	f7fe fcb5 	bl	80004e4 <__aeabi_ul2d>
 8001b7a:	a307      	add	r3, pc, #28	; (adr r3, 8001b98 <VelocityControllerInit+0x50>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	f7fe fe10 	bl	80007a4 <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	412e8480 	.word	0x412e8480
 8001ba0:	40a00000 	.word	0x40a00000
 8001ba4:	3e4ccccd 	.word	0x3e4ccccd
 8001ba8:	3dcccccd 	.word	0x3dcccccd
 8001bac:	00000000 	.word	0x00000000

08001bb0 <DisplacementControllerInit>:

void DisplacementControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <DisplacementControllerInit+0x58>)
 8001bbe:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 0.2;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <DisplacementControllerInit+0x5c>)
 8001bc4:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
	VCvar->Integral_Value = 0;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7fe fc80 	bl	80004e4 <__aeabi_ul2d>
 8001be4:	a306      	add	r3, pc, #24	; (adr r3, 8001c00 <DisplacementControllerInit+0x50>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	f7fe fddb 	bl	80007a4 <__aeabi_ddiv>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	00000000 	.word	0x00000000
 8001c04:	412e8480 	.word	0x412e8480
 8001c08:	40a00000 	.word	0x40a00000
 8001c0c:	3e4ccccd 	.word	0x3e4ccccd

08001c10 <TrajectoryGenerationVelocityMaxSetting>:

void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp))/(60.0);   ///RPM to pps
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	6892      	ldr	r2, [r2, #8]
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc18 	bl	800045c <__aeabi_ui2d>
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <TrajectoryGenerationVelocityMaxSetting+0x6c>)
 8001c32:	f7fe fdb7 	bl	80007a4 <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7fe ff57 	bl	8000af0 <__aeabi_d2f>
 8001c42:	4602      	mov	r2, r0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	611a      	str	r2, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	404e0000 	.word	0x404e0000

08001c80 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	if (MovingLinkMode == LMM_Set_Pos_Directly)
 8001c84:	4b6e      	ldr	r3, [pc, #440]	; (8001e40 <TrajectoryGenerationPrepareDATA+0x1c0>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d142      	bne.n	8001d12 <TrajectoryGenerationPrepareDATA+0x92>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.141));
 8001c8c:	4b6d      	ldr	r3, [pc, #436]	; (8001e44 <TrajectoryGenerationPrepareDATA+0x1c4>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b6d      	ldr	r3, [pc, #436]	; (8001e48 <TrajectoryGenerationPrepareDATA+0x1c8>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	fb03 f302 	mul.w	r3, r3, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fbde 	bl	800045c <__aeabi_ui2d>
 8001ca0:	a365      	add	r3, pc, #404	; (adr r3, 8001e38 <TrajectoryGenerationPrepareDATA+0x1b8>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe fd7d 	bl	80007a4 <__aeabi_ddiv>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe ff1d 	bl	8000af0 <__aeabi_d2f>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4a64      	ldr	r2, [pc, #400]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001cba:	6593      	str	r3, [r2, #88]	; 0x58
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001cbe:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001cc2:	4b61      	ldr	r3, [pc, #388]	; (8001e48 <TrajectoryGenerationPrepareDATA+0x1c8>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	db0d      	blt.n	8001cf4 <TrajectoryGenerationPrepareDATA+0x74>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001cd8:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001cda:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001cde:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <TrajectoryGenerationPrepareDATA+0x1c8>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cee:	4b57      	ldr	r3, [pc, #348]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001cf0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		  }
		  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta; //// No implement
 8001cf4:	4b55      	ldr	r3, [pc, #340]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001cf6:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001cfa:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001cfc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d04:	4b51      	ldr	r3, [pc, #324]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001d06:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		  Munmunbot_State = STATE_Calculation;
 8001d0a:	4b51      	ldr	r3, [pc, #324]	; (8001e50 <TrajectoryGenerationPrepareDATA+0x1d0>)
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	701a      	strb	r2, [r3, #0]
	  else
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
	  }
}
 8001d10:	e08d      	b.n	8001e2e <TrajectoryGenerationPrepareDATA+0x1ae>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 8001d12:	4b4b      	ldr	r3, [pc, #300]	; (8001e40 <TrajectoryGenerationPrepareDATA+0x1c0>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d003      	beq.n	8001d22 <TrajectoryGenerationPrepareDATA+0xa2>
 8001d1a:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <TrajectoryGenerationPrepareDATA+0x1c0>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d17e      	bne.n	8001e20 <TrajectoryGenerationPrepareDATA+0x1a0>
		  if (NumberOfStationToGo == 0)
 8001d22:	4b4c      	ldr	r3, [pc, #304]	; (8001e54 <TrajectoryGenerationPrepareDATA+0x1d4>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10f      	bne.n	8001d4a <TrajectoryGenerationPrepareDATA+0xca>
				Munmunbot_State = STATE_Idle;
 8001d2a:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <TrajectoryGenerationPrepareDATA+0x1d0>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 8001d30:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <TrajectoryGenerationPrepareDATA+0x1d8>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 8001d36:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <TrajectoryGenerationPrepareDATA+0x1d4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8001d3c:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <TrajectoryGenerationPrepareDATA+0x1c0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 8001d42:	4846      	ldr	r0, [pc, #280]	; (8001e5c <TrajectoryGenerationPrepareDATA+0x1dc>)
 8001d44:	f000 fd8c 	bl	8002860 <ACK2Return>
		  if (NumberOfStationToGo == 0)
 8001d48:	e071      	b.n	8001e2e <TrajectoryGenerationPrepareDATA+0x1ae>
			Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 8001d4a:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <TrajectoryGenerationPrepareDATA+0x1d8>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <TrajectoryGenerationPrepareDATA+0x1e0>)
 8001d52:	5c9a      	ldrb	r2, [r3, r2]
 8001d54:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <TrajectoryGenerationPrepareDATA+0x1e4>)
 8001d56:	701a      	strb	r2, [r3, #0]
			if (Current_Station > 10)
 8001d58:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <TrajectoryGenerationPrepareDATA+0x1e4>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b0a      	cmp	r3, #10
 8001d5e:	d90c      	bls.n	8001d7a <TrajectoryGenerationPrepareDATA+0xfa>
				NumberOfStationPTR += 1;
 8001d60:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <TrajectoryGenerationPrepareDATA+0x1d8>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	3301      	adds	r3, #1
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <TrajectoryGenerationPrepareDATA+0x1d8>)
 8001d6a:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 8001d6c:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <TrajectoryGenerationPrepareDATA+0x1d4>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <TrajectoryGenerationPrepareDATA+0x1d4>)
 8001d76:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001d78:	e059      	b.n	8001e2e <TrajectoryGenerationPrepareDATA+0x1ae>
				TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0));
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <TrajectoryGenerationPrepareDATA+0x1e4>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	4a39      	ldr	r2, [pc, #228]	; (8001e68 <TrajectoryGenerationPrepareDATA+0x1e8>)
 8001d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <TrajectoryGenerationPrepareDATA+0x1c8>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	fb03 f302 	mul.w	r3, r3, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fb63 	bl	800045c <__aeabi_ui2d>
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <TrajectoryGenerationPrepareDATA+0x1ec>)
 8001d9c:	f7fe fd02 	bl	80007a4 <__aeabi_ddiv>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7fe fea2 	bl	8000af0 <__aeabi_d2f>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4a27      	ldr	r2, [pc, #156]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001db0:	6593      	str	r3, [r2, #88]	; 0x58
				if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001db4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <TrajectoryGenerationPrepareDATA+0x1c8>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	db0d      	blt.n	8001dea <TrajectoryGenerationPrepareDATA+0x16a>
					TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001dce:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001dd0:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <TrajectoryGenerationPrepareDATA+0x1c8>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001de6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta; //// No implement
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001dec:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001df2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <TrajectoryGenerationPrepareDATA+0x1cc>)
 8001dfc:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				Munmunbot_State = STATE_Calculation;
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <TrajectoryGenerationPrepareDATA+0x1d0>)
 8001e02:	2203      	movs	r2, #3
 8001e04:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR += 1;
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <TrajectoryGenerationPrepareDATA+0x1d8>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <TrajectoryGenerationPrepareDATA+0x1d8>)
 8001e10:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <TrajectoryGenerationPrepareDATA+0x1d4>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <TrajectoryGenerationPrepareDATA+0x1d4>)
 8001e1c:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001e1e:	e006      	b.n	8001e2e <TrajectoryGenerationPrepareDATA+0x1ae>
		MovingLinkMode = LMM_Not_Set;
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <TrajectoryGenerationPrepareDATA+0x1c0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <TrajectoryGenerationPrepareDATA+0x1d0>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
}
 8001e2c:	e7ff      	b.n	8001e2e <TrajectoryGenerationPrepareDATA+0x1ae>
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	f3af 8000 	nop.w
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	40eeac80 	.word	0x40eeac80
 8001e40:	200000e6 	.word	0x200000e6
 8001e44:	200000e4 	.word	0x200000e4
 8001e48:	200001c8 	.word	0x200001c8
 8001e4c:	20000158 	.word	0x20000158
 8001e50:	200000d1 	.word	0x200000d1
 8001e54:	200000e8 	.word	0x200000e8
 8001e58:	200000e9 	.word	0x200000e9
 8001e5c:	200000b0 	.word	0x200000b0
 8001e60:	200000d4 	.word	0x200000d4
 8001e64:	200000e7 	.word	0x200000e7
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	40768000 	.word	0x40768000

08001e70 <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 8001e70:	b5b0      	push	{r4, r5, r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 8001e74:	4b84      	ldr	r3, [pc, #528]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001e76:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	d518      	bpl.n	8001eb6 <TrajectoryGenerationCalculation+0x46>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 8001e84:	4b80      	ldr	r3, [pc, #512]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001e86:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e8a:	eef1 7a67 	vneg.f32	s15, s15
 8001e8e:	4b7e      	ldr	r3, [pc, #504]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001e90:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 8001e94:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001e96:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e9a:	eef1 7a67 	vneg.f32	s15, s15
 8001e9e:	4b7a      	ldr	r3, [pc, #488]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001ea0:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 8001ea4:	4b78      	ldr	r3, [pc, #480]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001ea6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001eaa:	eef1 7a67 	vneg.f32	s15, s15
 8001eae:	4b76      	ldr	r3, [pc, #472]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001eb0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8001eb4:	e013      	b.n	8001ede <TrajectoryGenerationCalculation+0x6e>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 8001eb6:	4b74      	ldr	r3, [pc, #464]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001eb8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001ebc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	dd0b      	ble.n	8001ede <TrajectoryGenerationCalculation+0x6e>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 8001ec6:	4b70      	ldr	r3, [pc, #448]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	4a6f      	ldr	r2, [pc, #444]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001ecc:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 8001ece:	4b6e      	ldr	r3, [pc, #440]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	4a6d      	ldr	r2, [pc, #436]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001ed4:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 8001ed6:	4b6c      	ldr	r3, [pc, #432]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eda:	4a6b      	ldr	r2, [pc, #428]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001edc:	6653      	str	r3, [r2, #100]	; 0x64
	  }
	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 8001ede:	4b6a      	ldr	r3, [pc, #424]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001ee0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001ee4:	4b68      	ldr	r3, [pc, #416]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001ee6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef2:	d554      	bpl.n	8001f9e <TrajectoryGenerationCalculation+0x12e>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 8001ef4:	4b64      	ldr	r3, [pc, #400]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001ef6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001efa:	4b63      	ldr	r3, [pc, #396]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001efc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f04:	ee16 0a90 	vmov	r0, s13
 8001f08:	f7fe faca 	bl	80004a0 <__aeabi_f2d>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	ec43 2b10 	vmov	d0, r2, r3
 8001f14:	f006 fe80 	bl	8008c18 <sqrt>
 8001f18:	ec53 2b10 	vmov	r2, r3, d0
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7fe fde6 	bl	8000af0 <__aeabi_d2f>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4a58      	ldr	r2, [pc, #352]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001f28:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8001f2a:	4b57      	ldr	r3, [pc, #348]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	4a56      	ldr	r2, [pc, #344]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001f30:	6253      	str	r3, [r2, #36]	; 0x24
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 8001f32:	4b55      	ldr	r3, [pc, #340]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001f34:	ed93 7a07 	vldr	s14, [r3, #28]
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001f3a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f3e:	4b52      	ldr	r3, [pc, #328]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001f40:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4c:	ee17 0a90 	vmov	r0, s15
 8001f50:	f7fe faa6 	bl	80004a0 <__aeabi_f2d>
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f5c:	f7fe fc22 	bl	80007a4 <__aeabi_ddiv>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4614      	mov	r4, r2
 8001f66:	461d      	mov	r5, r3
 8001f68:	4b47      	ldr	r3, [pc, #284]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fa97 	bl	80004a0 <__aeabi_f2d>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4620      	mov	r0, r4
 8001f78:	4629      	mov	r1, r5
 8001f7a:	f7fe f933 	bl	80001e4 <__adddf3>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f7fe fdb3 	bl	8000af0 <__aeabi_d2f>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a3e      	ldr	r2, [pc, #248]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001f8e:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Mode = 0;
 8001f90:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	669a      	str	r2, [r3, #104]	; 0x68
		 TrjStruc.Submode = 0;
 8001f96:	4b3c      	ldr	r3, [pc, #240]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8001f9c:	e063      	b.n	8002066 <TrajectoryGenerationCalculation+0x1f6>
	  }

	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001fa0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001fa4:	4b38      	ldr	r3, [pc, #224]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001fa6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb2:	db58      	blt.n	8002066 <TrajectoryGenerationCalculation+0x1f6>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 8001fb4:	4b34      	ldr	r3, [pc, #208]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001fb6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001fba:	4b33      	ldr	r3, [pc, #204]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001fbc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fc0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fc4:	4b30      	ldr	r3, [pc, #192]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001fc6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fce:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001fd0:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd8:	4a2b      	ldr	r2, [pc, #172]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001fda:	6253      	str	r3, [r2, #36]	; 0x24
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001fde:	ed93 7a07 	vldr	s14, [r3, #28]
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001fe4:	edd3 6a00 	vldr	s13, [r3]
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff6:	ee17 0a90 	vmov	r0, s15
 8001ffa:	f7fe fa51 	bl	80004a0 <__aeabi_f2d>
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002006:	f7fe fbcd 	bl	80007a4 <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4614      	mov	r4, r2
 8002010:	461d      	mov	r5, r3
 8002012:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fa42 	bl	80004a0 <__aeabi_f2d>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4620      	mov	r0, r4
 8002022:	4629      	mov	r1, r5
 8002024:	f7fe f8de 	bl	80001e4 <__adddf3>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f7fe fd5e 	bl	8000af0 <__aeabi_d2f>
 8002034:	4603      	mov	r3, r0
 8002036:	4a14      	ldr	r2, [pc, #80]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8002038:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 800203a:	4b13      	ldr	r3, [pc, #76]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 800203c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8002042:	edd3 7a02 	vldr	s15, [r3, #8]
 8002046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 800204c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8002056:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		  TrjStruc.Mode = 1;
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 800205c:	2201      	movs	r2, #1
 800205e:	669a      	str	r2, [r3, #104]	; 0x68
		  TrjStruc.Submode = 0;
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8002062:	2200      	movs	r2, #0
 8002064:	66da      	str	r2, [r3, #108]	; 0x6c
	  }
	 TrjStruc.Equation_Timestamp = micros();
 8002066:	f7ff fcc7 	bl	80019f8 <micros>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4906      	ldr	r1, [pc, #24]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 8002070:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 TrjStruc.Loop_Timestamp = micros();
 8002074:	f7ff fcc0 	bl	80019f8 <micros>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4902      	ldr	r1, [pc, #8]	; (8002088 <TrajectoryGenerationCalculation+0x218>)
 800207e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8002082:	bf00      	nop
 8002084:	bdb0      	pop	{r4, r5, r7, pc}
 8002086:	bf00      	nop
 8002088:	20000158 	.word	0x20000158
 800208c:	00000000 	.word	0x00000000

08002090 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 8002090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 8002098:	f7ff fcae 	bl	80019f8 <micros>
 800209c:	4bb2      	ldr	r3, [pc, #712]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 800209e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80020a2:	1a84      	subs	r4, r0, r2
 80020a4:	eb61 0503 	sbc.w	r5, r1, r3
 80020a8:	4620      	mov	r0, r4
 80020aa:	4629      	mov	r1, r5
 80020ac:	f7fe fa1a 	bl	80004e4 <__aeabi_ul2d>
 80020b0:	a3ab      	add	r3, pc, #684	; (adr r3, 8002360 <TrajectoryGenerationProcess+0x2d0>)
 80020b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b6:	f7fe fb75 	bl	80007a4 <__aeabi_ddiv>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	49aa      	ldr	r1, [pc, #680]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80020c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	 switch (TrjStruc.Mode)
 80020c4:	4ba8      	ldr	r3, [pc, #672]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80020c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	f000 8218 	beq.w	80024fe <TrajectoryGenerationProcess+0x46e>
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	f200 8220 	bhi.w	8002514 <TrajectoryGenerationProcess+0x484>
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <TrajectoryGenerationProcess+0x50>
 80020d8:	2b01      	cmp	r3, #1
 80020da:	f000 80e0 	beq.w	800229e <TrajectoryGenerationProcess+0x20e>
		  case 2:
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  break;
		  }
}
 80020de:	e219      	b.n	8002514 <TrajectoryGenerationProcess+0x484>
			  if (TrjStruc.Submode == 0)
 80020e0:	4ba1      	ldr	r3, [pc, #644]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80020e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d15b      	bne.n	80021a0 <TrajectoryGenerationProcess+0x110>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80020e8:	4b9f      	ldr	r3, [pc, #636]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe f9d7 	bl	80004a0 <__aeabi_f2d>
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b9d      	ldr	r3, [pc, #628]	; (800236c <TrajectoryGenerationProcess+0x2dc>)
 80020f8:	f7fe fa2a 	bl	8000550 <__aeabi_dmul>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4614      	mov	r4, r2
 8002102:	461d      	mov	r5, r3
 8002104:	4b98      	ldr	r3, [pc, #608]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 8002106:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800210a:	4b97      	ldr	r3, [pc, #604]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 800210c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002110:	f7fe fa1e 	bl	8000550 <__aeabi_dmul>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4620      	mov	r0, r4
 800211a:	4629      	mov	r1, r5
 800211c:	f7fe fa18 	bl	8000550 <__aeabi_dmul>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4614      	mov	r4, r2
 8002126:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 8002128:	4b8f      	ldr	r3, [pc, #572]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe f9b7 	bl	80004a0 <__aeabi_f2d>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f7fe f853 	bl	80001e4 <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fcd3 	bl	8000af0 <__aeabi_d2f>
 800214a:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 800214c:	4a86      	ldr	r2, [pc, #536]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 800214e:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 8002150:	f7ff fc52 	bl	80019f8 <micros>
 8002154:	4b84      	ldr	r3, [pc, #528]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 8002156:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800215a:	1a84      	subs	r4, r0, r2
 800215c:	613c      	str	r4, [r7, #16]
 800215e:	eb61 0303 	sbc.w	r3, r1, r3
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002168:	f7fe fdda 	bl	8000d20 <__aeabi_ul2f>
 800216c:	ee06 0a90 	vmov	s13, r0
 8002170:	4b7d      	ldr	r3, [pc, #500]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 8002172:	edd3 7a01 	vldr	s15, [r3, #4]
 8002176:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002370 <TrajectoryGenerationProcess+0x2e0>
 800217a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800217e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002186:	da00      	bge.n	800218a <TrajectoryGenerationProcess+0xfa>
			  break;
 8002188:	e1c1      	b.n	800250e <TrajectoryGenerationProcess+0x47e>
					  TrjStruc.Equation_Timestamp = micros();
 800218a:	f7ff fc35 	bl	80019f8 <micros>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4975      	ldr	r1, [pc, #468]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 8002194:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 1;
 8002198:	4b73      	ldr	r3, [pc, #460]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 800219a:	2201      	movs	r2, #1
 800219c:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 800219e:	e1b6      	b.n	800250e <TrajectoryGenerationProcess+0x47e>
			  else if (TrjStruc.Submode == 1)
 80021a0:	4b71      	ldr	r3, [pc, #452]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80021a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	f040 81b2 	bne.w	800250e <TrajectoryGenerationProcess+0x47e>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80021aa:	4b6f      	ldr	r3, [pc, #444]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f976 	bl	80004a0 <__aeabi_f2d>
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	4b6e      	ldr	r3, [pc, #440]	; (8002374 <TrajectoryGenerationProcess+0x2e4>)
 80021ba:	f7fe f9c9 	bl	8000550 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4614      	mov	r4, r2
 80021c4:	461d      	mov	r5, r3
 80021c6:	4b68      	ldr	r3, [pc, #416]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80021c8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80021cc:	4b66      	ldr	r3, [pc, #408]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80021ce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80021d2:	f7fe f9bd 	bl	8000550 <__aeabi_dmul>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4620      	mov	r0, r4
 80021dc:	4629      	mov	r1, r5
 80021de:	f7fe f9b7 	bl	8000550 <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4614      	mov	r4, r2
 80021e8:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 80021ea:	4b5f      	ldr	r3, [pc, #380]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80021ec:	ed93 7a07 	vldr	s14, [r3, #28]
 80021f0:	4b5d      	ldr	r3, [pc, #372]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80021f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80021f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fa:	ee17 0a90 	vmov	r0, s15
 80021fe:	f7fe f94f 	bl	80004a0 <__aeabi_f2d>
 8002202:	4b59      	ldr	r3, [pc, #356]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 8002204:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002208:	f7fe f9a2 	bl	8000550 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4620      	mov	r0, r4
 8002212:	4629      	mov	r1, r5
 8002214:	f7fd ffe6 	bl	80001e4 <__adddf3>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4614      	mov	r4, r2
 800221e:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 8002220:	4b51      	ldr	r3, [pc, #324]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe f93b 	bl	80004a0 <__aeabi_f2d>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4620      	mov	r0, r4
 8002230:	4629      	mov	r1, r5
 8002232:	f7fd ffd7 	bl	80001e4 <__adddf3>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f7fe fc57 	bl	8000af0 <__aeabi_d2f>
 8002242:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002244:	4a48      	ldr	r2, [pc, #288]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 8002246:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 8002248:	f7ff fbd6 	bl	80019f8 <micros>
 800224c:	4b46      	ldr	r3, [pc, #280]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 800224e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002252:	1a84      	subs	r4, r0, r2
 8002254:	60bc      	str	r4, [r7, #8]
 8002256:	eb61 0303 	sbc.w	r3, r1, r3
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002260:	f7fe fd5e 	bl	8000d20 <__aeabi_ul2f>
 8002264:	ee06 0a90 	vmov	s13, r0
 8002268:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 800226a:	edd3 7a01 	vldr	s15, [r3, #4]
 800226e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002370 <TrajectoryGenerationProcess+0x2e0>
 8002272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002276:	eef4 6ae7 	vcmpe.f32	s13, s15
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	da00      	bge.n	8002282 <TrajectoryGenerationProcess+0x1f2>
			  break;
 8002280:	e145      	b.n	800250e <TrajectoryGenerationProcess+0x47e>
					  TrjStruc.Equation_Timestamp = micros();
 8002282:	f7ff fbb9 	bl	80019f8 <micros>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4937      	ldr	r1, [pc, #220]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 800228c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 0;
 8002290:	4b35      	ldr	r3, [pc, #212]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 8002292:	2200      	movs	r2, #0
 8002294:	66da      	str	r2, [r3, #108]	; 0x6c
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002296:	4b34      	ldr	r3, [pc, #208]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 8002298:	2202      	movs	r2, #2
 800229a:	669a      	str	r2, [r3, #104]	; 0x68
			  break;
 800229c:	e137      	b.n	800250e <TrajectoryGenerationProcess+0x47e>
			  if (TrjStruc.Submode == 0)
 800229e:	4b32      	ldr	r3, [pc, #200]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80022a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d168      	bne.n	8002378 <TrajectoryGenerationProcess+0x2e8>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80022a6:	4b30      	ldr	r3, [pc, #192]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f8f8 	bl	80004a0 <__aeabi_f2d>
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	4b2d      	ldr	r3, [pc, #180]	; (800236c <TrajectoryGenerationProcess+0x2dc>)
 80022b6:	f7fe f94b 	bl	8000550 <__aeabi_dmul>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4614      	mov	r4, r2
 80022c0:	461d      	mov	r5, r3
 80022c2:	4b29      	ldr	r3, [pc, #164]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80022c4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80022ca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80022ce:	f7fe f93f 	bl	8000550 <__aeabi_dmul>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4620      	mov	r0, r4
 80022d8:	4629      	mov	r1, r5
 80022da:	f7fe f939 	bl	8000550 <__aeabi_dmul>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4614      	mov	r4, r2
 80022e4:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe f8d8 	bl	80004a0 <__aeabi_f2d>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4620      	mov	r0, r4
 80022f6:	4629      	mov	r1, r5
 80022f8:	f7fd ff74 	bl	80001e4 <__adddf3>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	f7fe fbf4 	bl	8000af0 <__aeabi_d2f>
 8002308:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 800230a:	4a17      	ldr	r2, [pc, #92]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 800230c:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 800230e:	f7ff fb73 	bl	80019f8 <micros>
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 8002314:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002318:	1a84      	subs	r4, r0, r2
 800231a:	603c      	str	r4, [r7, #0]
 800231c:	eb61 0303 	sbc.w	r3, r1, r3
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002326:	f7fe fcfb 	bl	8000d20 <__aeabi_ul2f>
 800232a:	ee06 0a90 	vmov	s13, r0
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002370 <TrajectoryGenerationProcess+0x2e0>
 8002338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002344:	da00      	bge.n	8002348 <TrajectoryGenerationProcess+0x2b8>
			  break;
 8002346:	e0e4      	b.n	8002512 <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 8002348:	f7ff fb56 	bl	80019f8 <micros>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4905      	ldr	r1, [pc, #20]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 8002352:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 1;
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <TrajectoryGenerationProcess+0x2d8>)
 8002358:	2201      	movs	r2, #1
 800235a:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 800235c:	e0d9      	b.n	8002512 <TrajectoryGenerationProcess+0x482>
 800235e:	bf00      	nop
 8002360:	00000000 	.word	0x00000000
 8002364:	412e8480 	.word	0x412e8480
 8002368:	20000158 	.word	0x20000158
 800236c:	3fe00000 	.word	0x3fe00000
 8002370:	49742400 	.word	0x49742400
 8002374:	bfe00000 	.word	0xbfe00000
			  else if (TrjStruc.Submode == 1)
 8002378:	4b69      	ldr	r3, [pc, #420]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 800237a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800237c:	2b01      	cmp	r3, #1
 800237e:	d148      	bne.n	8002412 <TrajectoryGenerationProcess+0x382>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002380:	4b67      	ldr	r3, [pc, #412]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f88b 	bl	80004a0 <__aeabi_f2d>
 800238a:	4b65      	ldr	r3, [pc, #404]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 800238c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002390:	f7fe f8de 	bl	8000550 <__aeabi_dmul>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4614      	mov	r4, r2
 800239a:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 800239c:	4b60      	ldr	r3, [pc, #384]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f87d 	bl	80004a0 <__aeabi_f2d>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4620      	mov	r0, r4
 80023ac:	4629      	mov	r1, r5
 80023ae:	f7fd ff19 	bl	80001e4 <__adddf3>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	f7fe fb99 	bl	8000af0 <__aeabi_d2f>
 80023be:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80023c0:	4a57      	ldr	r2, [pc, #348]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 80023c2:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 80023c4:	f7ff fb18 	bl	80019f8 <micros>
 80023c8:	4b55      	ldr	r3, [pc, #340]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 80023ca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80023ce:	ebb0 0a02 	subs.w	sl, r0, r2
 80023d2:	eb61 0b03 	sbc.w	fp, r1, r3
 80023d6:	4650      	mov	r0, sl
 80023d8:	4659      	mov	r1, fp
 80023da:	f7fe fca1 	bl	8000d20 <__aeabi_ul2f>
 80023de:	ee06 0a90 	vmov	s13, r0
 80023e2:	4b4f      	ldr	r3, [pc, #316]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 80023e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80023e8:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002524 <TrajectoryGenerationProcess+0x494>
 80023ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80023f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f8:	da00      	bge.n	80023fc <TrajectoryGenerationProcess+0x36c>
			  break;
 80023fa:	e08a      	b.n	8002512 <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 80023fc:	f7ff fafc 	bl	80019f8 <micros>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4946      	ldr	r1, [pc, #280]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 8002406:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 2;
 800240a:	4b45      	ldr	r3, [pc, #276]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 800240c:	2202      	movs	r2, #2
 800240e:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 8002410:	e07f      	b.n	8002512 <TrajectoryGenerationProcess+0x482>
			  else if (TrjStruc.Submode == 2)
 8002412:	4b43      	ldr	r3, [pc, #268]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 8002414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002416:	2b02      	cmp	r3, #2
 8002418:	d17b      	bne.n	8002512 <TrajectoryGenerationProcess+0x482>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f83e 	bl	80004a0 <__aeabi_f2d>
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <TrajectoryGenerationProcess+0x498>)
 800242a:	f7fe f891 	bl	8000550 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4614      	mov	r4, r2
 8002434:	461d      	mov	r5, r3
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 8002438:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800243c:	4b38      	ldr	r3, [pc, #224]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 800243e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002442:	f7fe f885 	bl	8000550 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4620      	mov	r0, r4
 800244c:	4629      	mov	r1, r5
 800244e:	f7fe f87f 	bl	8000550 <__aeabi_dmul>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4614      	mov	r4, r2
 8002458:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f81e 	bl	80004a0 <__aeabi_f2d>
 8002464:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 8002466:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800246a:	f7fe f871 	bl	8000550 <__aeabi_dmul>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	f7fd feb5 	bl	80001e4 <__adddf3>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4614      	mov	r4, r2
 8002480:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 8002482:	4b27      	ldr	r3, [pc, #156]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f80a 	bl	80004a0 <__aeabi_f2d>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4620      	mov	r0, r4
 8002492:	4629      	mov	r1, r5
 8002494:	f7fd fea6 	bl	80001e4 <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fb26 	bl	8000af0 <__aeabi_d2f>
 80024a4:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 80024a8:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 80024aa:	f7ff faa5 	bl	80019f8 <micros>
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 80024b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80024b4:	ebb0 0802 	subs.w	r8, r0, r2
 80024b8:	eb61 0903 	sbc.w	r9, r1, r3
 80024bc:	4640      	mov	r0, r8
 80024be:	4649      	mov	r1, r9
 80024c0:	f7fe fc2e 	bl	8000d20 <__aeabi_ul2f>
 80024c4:	ee06 0a90 	vmov	s13, r0
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002524 <TrajectoryGenerationProcess+0x494>
 80024d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80024da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024de:	da00      	bge.n	80024e2 <TrajectoryGenerationProcess+0x452>
			  break;
 80024e0:	e017      	b.n	8002512 <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 80024e2:	f7ff fa89 	bl	80019f8 <micros>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	490d      	ldr	r1, [pc, #52]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 80024ec:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 0;
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	66da      	str	r2, [r3, #108]	; 0x6c
					  TrjStruc.Mode = 2; ///Final Value Mode
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 80024f8:	2202      	movs	r2, #2
 80024fa:	669a      	str	r2, [r3, #104]	; 0x68
			  break;
 80024fc:	e009      	b.n	8002512 <TrajectoryGenerationProcess+0x482>
			  Moving_Link_Task_Flag = 1;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <TrajectoryGenerationProcess+0x49c>)
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	4a05      	ldr	r2, [pc, #20]	; (8002520 <TrajectoryGenerationProcess+0x490>)
 800250a:	6213      	str	r3, [r2, #32]
			  break;
 800250c:	e002      	b.n	8002514 <TrajectoryGenerationProcess+0x484>
			  break;
 800250e:	bf00      	nop
 8002510:	e000      	b.n	8002514 <TrajectoryGenerationProcess+0x484>
			  break;
 8002512:	bf00      	nop
}
 8002514:	bf00      	nop
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800251e:	bf00      	nop
 8002520:	20000158 	.word	0x20000158
 8002524:	49742400 	.word	0x49742400
 8002528:	bfe00000 	.word	0xbfe00000
 800252c:	200000f0 	.word	0x200000f0

08002530 <PIDController2in1>:

void PIDController2in1()
{
 8002530:	b5b0      	push	{r4, r5, r7, lr}
 8002532:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 8002534:	4b38      	ldr	r3, [pc, #224]	; (8002618 <PIDController2in1+0xe8>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a38      	ldr	r2, [pc, #224]	; (800261c <PIDController2in1+0xec>)
 800253a:	6113      	str	r3, [r2, #16]
    PositionPIDController.NowError = PositionPIDController.OutputFeedback-PositionPIDController.OutputDesire;
 800253c:	4b37      	ldr	r3, [pc, #220]	; (800261c <PIDController2in1+0xec>)
 800253e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002542:	4b36      	ldr	r3, [pc, #216]	; (800261c <PIDController2in1+0xec>)
 8002544:	edd3 7a04 	vldr	s15, [r3, #16]
 8002548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254c:	4b33      	ldr	r3, [pc, #204]	; (800261c <PIDController2in1+0xec>)
 800254e:	edc3 7a07 	vstr	s15, [r3, #28]
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 8002552:	4b32      	ldr	r3, [pc, #200]	; (800261c <PIDController2in1+0xec>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd ffa2 	bl	80004a0 <__aeabi_f2d>
 800255c:	4604      	mov	r4, r0
 800255e:	460d      	mov	r5, r1
 8002560:	4b2e      	ldr	r3, [pc, #184]	; (800261c <PIDController2in1+0xec>)
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fd ff9b 	bl	80004a0 <__aeabi_f2d>
 800256a:	4b2c      	ldr	r3, [pc, #176]	; (800261c <PIDController2in1+0xec>)
 800256c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002570:	f7fd ffee 	bl	8000550 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4620      	mov	r0, r4
 800257a:	4629      	mov	r1, r5
 800257c:	f7fd fe32 	bl	80001e4 <__adddf3>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	f7fe fab2 	bl	8000af0 <__aeabi_d2f>
 800258c:	4603      	mov	r3, r0
 800258e:	4a23      	ldr	r2, [pc, #140]	; (800261c <PIDController2in1+0xec>)
 8002590:	6193      	str	r3, [r2, #24]
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002592:	4b22      	ldr	r3, [pc, #136]	; (800261c <PIDController2in1+0xec>)
 8002594:	ed93 7a00 	vldr	s14, [r3]
 8002598:	4b20      	ldr	r3, [pc, #128]	; (800261c <PIDController2in1+0xec>)
 800259a:	edd3 7a07 	vldr	s15, [r3, #28]
 800259e:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <PIDController2in1+0xec>)
 80025a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80025a8:	4b1c      	ldr	r3, [pc, #112]	; (800261c <PIDController2in1+0xec>)
 80025aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80025ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b6:	ee17 0a90 	vmov	r0, s15
 80025ba:	f7fd ff71 	bl	80004a0 <__aeabi_f2d>
 80025be:	4604      	mov	r4, r0
 80025c0:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime);
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <PIDController2in1+0xec>)
 80025c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <PIDController2in1+0xec>)
 80025ca:	edd3 6a07 	vldr	s13, [r3, #28]
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <PIDController2in1+0xec>)
 80025d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80025d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025dc:	ee17 0a90 	vmov	r0, s15
 80025e0:	f7fd ff5e 	bl	80004a0 <__aeabi_f2d>
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <PIDController2in1+0xec>)
 80025e6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80025ea:	f7fe f8db 	bl	80007a4 <__aeabi_ddiv>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4620      	mov	r0, r4
 80025f4:	4629      	mov	r1, r5
 80025f6:	f7fd fdf5 	bl	80001e4 <__adddf3>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	f7fe fa75 	bl	8000af0 <__aeabi_d2f>
 8002606:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002608:	4a04      	ldr	r2, [pc, #16]	; (800261c <PIDController2in1+0xec>)
 800260a:	60d3      	str	r3, [r2, #12]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <PIDController2in1+0xec>)
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	4a02      	ldr	r2, [pc, #8]	; (800261c <PIDController2in1+0xec>)
 8002612:	6213      	str	r3, [r2, #32]
//    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
//					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
//					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime);
//    VelocityPIDController.PreviousError = VelocityPIDController.NowError;

}
 8002614:	bf00      	nop
 8002616:	bdb0      	pop	{r4, r5, r7, pc}
 8002618:	20000158 	.word	0x20000158
 800261c:	200000f8 	.word	0x200000f8

08002620 <UARTInit>:



///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <UARTInit+0x4c>)
 800262a:	88db      	ldrh	r3, [r3, #6]
 800262c:	4619      	mov	r1, r3
 800262e:	2001      	movs	r0, #1
 8002630:	f006 fa22 	bl	8008a78 <calloc>
 8002634:	4603      	mov	r3, r0
 8002636:	461a      	mov	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <UARTInit+0x4c>)
 800263e:	889b      	ldrh	r3, [r3, #4]
 8002640:	4619      	mov	r1, r3
 8002642:	2001      	movs	r0, #1
 8002644:	f006 fa18 	bl	8008a78 <calloc>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	81da      	strh	r2, [r3, #14]
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200000b0 	.word	0x200000b0

08002670 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6919      	ldr	r1, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	88db      	ldrh	r3, [r3, #6]
 8002684:	461a      	mov	r2, r3
 8002686:	f005 fb73 	bl	8007d70 <HAL_UART_Receive_DMA>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	88db      	ldrh	r3, [r3, #6]
 800269e:	461a      	mov	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	1ad3      	subs	r3, r2, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 80026c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c4:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8a9b      	ldrh	r3, [r3, #20]
 80026ca:	461c      	mov	r4, r3
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ffe0 	bl	8002692 <UARTGetRxHead>
 80026d2:	4603      	mov	r3, r0
 80026d4:	429c      	cmp	r4, r3
 80026d6:	d013      	beq.n	8002700 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	8a92      	ldrh	r2, [r2, #20]
 80026e0:	4413      	add	r3, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	8a9b      	ldrh	r3, [r3, #20]
 80026ea:	3301      	adds	r3, #1
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	88d2      	ldrh	r2, [r2, #6]
 80026f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80026f4:	fb02 f201 	mul.w	r2, r2, r1
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8002700:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bd90      	pop	{r4, r7, pc}

0800270c <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b20      	cmp	r3, #32
 8002720:	d13d      	bne.n	800279e <UARTTxDumpBuffer+0x92>
 8002722:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <UARTTxDumpBuffer+0x9c>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d139      	bne.n	800279e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 800272a:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <UARTTxDumpBuffer+0x9c>)
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	89da      	ldrh	r2, [r3, #14]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	899b      	ldrh	r3, [r3, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d02d      	beq.n	8002798 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	89da      	ldrh	r2, [r3, #14]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002744:	429a      	cmp	r2, r3
 8002746:	d906      	bls.n	8002756 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	89da      	ldrh	r2, [r3, #14]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	b29b      	uxth	r3, r3
 8002754:	e005      	b.n	8002762 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	889a      	ldrh	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	b29b      	uxth	r3, r3
 8002762:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	8992      	ldrh	r2, [r2, #12]
 8002770:	4413      	add	r3, r2
 8002772:	89fa      	ldrh	r2, [r7, #14]
 8002774:	4619      	mov	r1, r3
 8002776:	f005 fa8f 	bl	8007c98 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	899b      	ldrh	r3, [r3, #12]
 800277e:	461a      	mov	r2, r3
 8002780:	89fb      	ldrh	r3, [r7, #14]
 8002782:	4413      	add	r3, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	8892      	ldrh	r2, [r2, #4]
 8002788:	fb93 f1f2 	sdiv	r1, r3, r2
 800278c:	fb02 f201 	mul.w	r2, r2, r1
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	b29a      	uxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <UARTTxDumpBuffer+0x9c>)
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
	}
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200001e8 	.word	0x200001e8

080027ac <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	889b      	ldrh	r3, [r3, #4]
 80027be:	88fa      	ldrh	r2, [r7, #6]
 80027c0:	4293      	cmp	r3, r2
 80027c2:	bf28      	it	cs
 80027c4:	4613      	movcs	r3, r2
 80027c6:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80027c8:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	889b      	ldrh	r3, [r3, #4]
 80027ce:	4619      	mov	r1, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	89db      	ldrh	r3, [r3, #14]
 80027d4:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80027d6:	4293      	cmp	r3, r2
 80027d8:	bfa8      	it	ge
 80027da:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 80027dc:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	89d2      	ldrh	r2, [r2, #14]
 80027e6:	4413      	add	r3, r2
 80027e8:	8aba      	ldrh	r2, [r7, #20]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f006 f975 	bl	8008adc <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	89db      	ldrh	r3, [r3, #14]
 80027f6:	461a      	mov	r2, r3
 80027f8:	8afb      	ldrh	r3, [r7, #22]
 80027fa:	4413      	add	r3, r2
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	8892      	ldrh	r2, [r2, #4]
 8002800:	fb93 f1f2 	sdiv	r1, r3, r2
 8002804:	fb02 f201 	mul.w	r2, r2, r1
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8002810:	8afa      	ldrh	r2, [r7, #22]
 8002812:	8abb      	ldrh	r3, [r7, #20]
 8002814:	429a      	cmp	r2, r3
 8002816:	d00a      	beq.n	800282e <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6898      	ldr	r0, [r3, #8]
 800281c:	8abb      	ldrh	r3, [r7, #20]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8002822:	8afa      	ldrh	r2, [r7, #22]
 8002824:	8abb      	ldrh	r3, [r7, #20]
 8002826:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002828:	461a      	mov	r2, r3
 800282a:	f006 f957 	bl	8008adc <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff ff6c 	bl	800270c <UARTTxDumpBuffer>

}
 8002834:	bf00      	nop
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 8002844:	f247 5358 	movw	r3, #30040	; 0x7558
 8002848:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 800284a:	f107 030c 	add.w	r3, r7, #12
 800284e:	2202      	movs	r2, #2
 8002850:	4619      	mov	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffaa 	bl	80027ac <UARTTxWrite>
	}
}
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 8002868:	f646 6346 	movw	r3, #28230	; 0x6e46
 800286c:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	2202      	movs	r2, #2
 8002874:	4619      	mov	r1, r3
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff98 	bl	80027ac <UARTTxWrite>
	}
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	0000      	movs	r0, r0
	...

08002888 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 8002888:	b5b0      	push	{r4, r5, r7, lr}
 800288a:	b08e      	sub	sp, #56	; 0x38
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 8002894:	4b8b      	ldr	r3, [pc, #556]	; (8002ac4 <Munmunbot_Protocol+0x23c>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b05      	cmp	r3, #5
 800289a:	f200 83aa 	bhi.w	8002ff2 <Munmunbot_Protocol+0x76a>
 800289e:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <Munmunbot_Protocol+0x1c>)
 80028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a4:	080028bd 	.word	0x080028bd
 80028a8:	08002971 	.word	0x08002971
 80028ac:	080029b3 	.word	0x080029b3
 80028b0:	08002a01 	.word	0x08002a01
 80028b4:	08002a25 	.word	0x08002a25
 80028b8:	08002ae5 	.word	0x08002ae5
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 80028bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c0:	111b      	asrs	r3, r3, #4
 80028c2:	b21b      	sxth	r3, r3
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	2b09      	cmp	r3, #9
 80028cc:	f040 838e 	bne.w	8002fec <Munmunbot_Protocol+0x764>
			{
				CheckSum = dataIn;
 80028d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028d4:	4a7c      	ldr	r2, [pc, #496]	; (8002ac8 <Munmunbot_Protocol+0x240>)
 80028d6:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4b7a      	ldr	r3, [pc, #488]	; (8002acc <Munmunbot_Protocol+0x244>)
 80028e4:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 80028e6:	4b79      	ldr	r3, [pc, #484]	; (8002acc <Munmunbot_Protocol+0x244>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b07      	cmp	r3, #7
 80028ec:	d103      	bne.n	80028f6 <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 80028ee:	4b75      	ldr	r3, [pc, #468]	; (8002ac4 <Munmunbot_Protocol+0x23c>)
 80028f0:	2203      	movs	r2, #3
 80028f2:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 80028f4:	e37a      	b.n	8002fec <Munmunbot_Protocol+0x764>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 80028f6:	4b75      	ldr	r3, [pc, #468]	; (8002acc <Munmunbot_Protocol+0x244>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d00b      	beq.n	8002916 <Munmunbot_Protocol+0x8e>
 80028fe:	4b73      	ldr	r3, [pc, #460]	; (8002acc <Munmunbot_Protocol+0x244>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b04      	cmp	r3, #4
 8002904:	d007      	beq.n	8002916 <Munmunbot_Protocol+0x8e>
 8002906:	4b71      	ldr	r3, [pc, #452]	; (8002acc <Munmunbot_Protocol+0x244>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b05      	cmp	r3, #5
 800290c:	d003      	beq.n	8002916 <Munmunbot_Protocol+0x8e>
 800290e:	4b6f      	ldr	r3, [pc, #444]	; (8002acc <Munmunbot_Protocol+0x244>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d103      	bne.n	800291e <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 8002916:	4b6b      	ldr	r3, [pc, #428]	; (8002ac4 <Munmunbot_Protocol+0x23c>)
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
			break;
 800291c:	e366      	b.n	8002fec <Munmunbot_Protocol+0x764>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 800291e:	4b6b      	ldr	r3, [pc, #428]	; (8002acc <Munmunbot_Protocol+0x244>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d020      	beq.n	8002968 <Munmunbot_Protocol+0xe0>
 8002926:	4b69      	ldr	r3, [pc, #420]	; (8002acc <Munmunbot_Protocol+0x244>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b03      	cmp	r3, #3
 800292c:	d01c      	beq.n	8002968 <Munmunbot_Protocol+0xe0>
 800292e:	4b67      	ldr	r3, [pc, #412]	; (8002acc <Munmunbot_Protocol+0x244>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b08      	cmp	r3, #8
 8002934:	d018      	beq.n	8002968 <Munmunbot_Protocol+0xe0>
 8002936:	4b65      	ldr	r3, [pc, #404]	; (8002acc <Munmunbot_Protocol+0x244>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b09      	cmp	r3, #9
 800293c:	d014      	beq.n	8002968 <Munmunbot_Protocol+0xe0>
 800293e:	4b63      	ldr	r3, [pc, #396]	; (8002acc <Munmunbot_Protocol+0x244>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b0a      	cmp	r3, #10
 8002944:	d010      	beq.n	8002968 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8002946:	4b61      	ldr	r3, [pc, #388]	; (8002acc <Munmunbot_Protocol+0x244>)
 8002948:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 800294a:	2b0b      	cmp	r3, #11
 800294c:	d00c      	beq.n	8002968 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 800294e:	4b5f      	ldr	r3, [pc, #380]	; (8002acc <Munmunbot_Protocol+0x244>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d008      	beq.n	8002968 <Munmunbot_Protocol+0xe0>
 8002956:	4b5d      	ldr	r3, [pc, #372]	; (8002acc <Munmunbot_Protocol+0x244>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b0d      	cmp	r3, #13
 800295c:	d004      	beq.n	8002968 <Munmunbot_Protocol+0xe0>
 800295e:	4b5b      	ldr	r3, [pc, #364]	; (8002acc <Munmunbot_Protocol+0x244>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b0e      	cmp	r3, #14
 8002964:	f040 8342 	bne.w	8002fec <Munmunbot_Protocol+0x764>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 8002968:	4b56      	ldr	r3, [pc, #344]	; (8002ac4 <Munmunbot_Protocol+0x23c>)
 800296a:	2205      	movs	r2, #5
 800296c:	701a      	strb	r2, [r3, #0]
			break;
 800296e:	e33d      	b.n	8002fec <Munmunbot_Protocol+0x764>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 8002970:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002974:	4b54      	ldr	r3, [pc, #336]	; (8002ac8 <Munmunbot_Protocol+0x240>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4413      	add	r3, r2
 800297a:	4a53      	ldr	r2, [pc, #332]	; (8002ac8 <Munmunbot_Protocol+0x240>)
 800297c:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	b29a      	uxth	r2, r3
 8002984:	4b52      	ldr	r3, [pc, #328]	; (8002ad0 <Munmunbot_Protocol+0x248>)
 8002986:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <Munmunbot_Protocol+0x24c>)
 8002994:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 8002996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800299a:	111b      	asrs	r3, r3, #4
 800299c:	b21b      	sxth	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4b4b      	ldr	r3, [pc, #300]	; (8002ad4 <Munmunbot_Protocol+0x24c>)
 80029a8:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 80029aa:	4b46      	ldr	r3, [pc, #280]	; (8002ac4 <Munmunbot_Protocol+0x23c>)
 80029ac:	2202      	movs	r2, #2
 80029ae:	701a      	strb	r2, [r3, #0]

			 break;
 80029b0:	e31f      	b.n	8002ff2 <Munmunbot_Protocol+0x76a>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 80029b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029b6:	4b44      	ldr	r3, [pc, #272]	; (8002ac8 <Munmunbot_Protocol+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	4a42      	ldr	r2, [pc, #264]	; (8002ac8 <Munmunbot_Protocol+0x240>)
 80029be:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	b21a      	sxth	r2, r3
 80029c6:	4b42      	ldr	r3, [pc, #264]	; (8002ad0 <Munmunbot_Protocol+0x248>)
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	b21b      	sxth	r3, r3
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b21b      	sxth	r3, r3
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	4b3f      	ldr	r3, [pc, #252]	; (8002ad0 <Munmunbot_Protocol+0x248>)
 80029d4:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b3c      	ldr	r3, [pc, #240]	; (8002ad4 <Munmunbot_Protocol+0x24c>)
 80029e2:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 80029e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029e8:	111b      	asrs	r3, r3, #4
 80029ea:	b21b      	sxth	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <Munmunbot_Protocol+0x24c>)
 80029f6:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 80029f8:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <Munmunbot_Protocol+0x23c>)
 80029fa:	2205      	movs	r2, #5
 80029fc:	701a      	strb	r2, [r3, #0]
			 break;
 80029fe:	e2f8      	b.n	8002ff2 <Munmunbot_Protocol+0x76a>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 8002a00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a04:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <Munmunbot_Protocol+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a2f      	ldr	r2, [pc, #188]	; (8002ac8 <Munmunbot_Protocol+0x240>)
 8002a0c:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 8002a0e:	88fa      	ldrh	r2, [r7, #6]
 8002a10:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <Munmunbot_Protocol+0x250>)
 8002a12:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <Munmunbot_Protocol+0x250>)
 8002a16:	881a      	ldrh	r2, [r3, #0]
 8002a18:	4b30      	ldr	r3, [pc, #192]	; (8002adc <Munmunbot_Protocol+0x254>)
 8002a1a:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 8002a1c:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <Munmunbot_Protocol+0x23c>)
 8002a1e:	2204      	movs	r2, #4
 8002a20:	701a      	strb	r2, [r3, #0]

		   break;
 8002a22:	e2e6      	b.n	8002ff2 <Munmunbot_Protocol+0x76a>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 8002a24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a28:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <Munmunbot_Protocol+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	4a26      	ldr	r2, [pc, #152]	; (8002ac8 <Munmunbot_Protocol+0x240>)
 8002a30:	6013      	str	r3, [r2, #0]
				if (n_station >= 2)
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <Munmunbot_Protocol+0x250>)
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d927      	bls.n	8002a8a <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4a28      	ldr	r2, [pc, #160]	; (8002ae0 <Munmunbot_Protocol+0x258>)
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	b2d9      	uxtb	r1, r3
 8002a48:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <Munmunbot_Protocol+0x24c>)
 8002a4a:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002a4c:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <Munmunbot_Protocol+0x258>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <Munmunbot_Protocol+0x258>)
 8002a56:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 8002a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a5c:	111b      	asrs	r3, r3, #4
 8002a5e:	b21b      	sxth	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	4a1f      	ldr	r2, [pc, #124]	; (8002ae0 <Munmunbot_Protocol+0x258>)
 8002a64:	7812      	ldrb	r2, [r2, #0]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	b2d9      	uxtb	r1, r3
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <Munmunbot_Protocol+0x24c>)
 8002a6e:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <Munmunbot_Protocol+0x258>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <Munmunbot_Protocol+0x258>)
 8002a7a:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <Munmunbot_Protocol+0x250>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	3b02      	subs	r3, #2
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <Munmunbot_Protocol+0x250>)
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	e012      	b.n	8002ab0 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <Munmunbot_Protocol+0x250>)
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10e      	bne.n	8002ab0 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <Munmunbot_Protocol+0x258>)
 8002a98:	7812      	ldrb	r2, [r2, #0]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	b2d9      	uxtb	r1, r3
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <Munmunbot_Protocol+0x24c>)
 8002aa2:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <Munmunbot_Protocol+0x250>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <Munmunbot_Protocol+0x250>)
 8002aae:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <Munmunbot_Protocol+0x250>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 829b 	bne.w	8002ff0 <Munmunbot_Protocol+0x768>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 8002aba:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <Munmunbot_Protocol+0x23c>)
 8002abc:	2205      	movs	r2, #5
 8002abe:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002ac0:	e296      	b.n	8002ff0 <Munmunbot_Protocol+0x768>
 8002ac2:	bf00      	nop
 8002ac4:	200000d0 	.word	0x200000d0
 8002ac8:	200001ec 	.word	0x200001ec
 8002acc:	200001f0 	.word	0x200001f0
 8002ad0:	200001f2 	.word	0x200001f2
 8002ad4:	200001f4 	.word	0x200001f4
 8002ad8:	200002f4 	.word	0x200002f4
 8002adc:	200002f6 	.word	0x200002f6
 8002ae0:	200002f8 	.word	0x200002f8

			case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 8002ae4:	4ba5      	ldr	r3, [pc, #660]	; (8002d7c <Munmunbot_Protocol+0x4f4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	4aa3      	ldr	r2, [pc, #652]	; (8002d7c <Munmunbot_Protocol+0x4f4>)
 8002aee:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 8002af0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002af4:	4ba1      	ldr	r3, [pc, #644]	; (8002d7c <Munmunbot_Protocol+0x4f4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	f040 8263 	bne.w	8002fc4 <Munmunbot_Protocol+0x73c>
				{

					switch (ProtocolMode)
 8002afe:	4ba0      	ldr	r3, [pc, #640]	; (8002d80 <Munmunbot_Protocol+0x4f8>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	2b0d      	cmp	r3, #13
 8002b06:	f200 825e 	bhi.w	8002fc6 <Munmunbot_Protocol+0x73e>
 8002b0a:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <Munmunbot_Protocol+0x288>)
 8002b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b10:	08002b49 	.word	0x08002b49
 8002b14:	08002bbd 	.word	0x08002bbd
 8002b18:	08002bd3 	.word	0x08002bd3
 8002b1c:	08002be9 	.word	0x08002be9
 8002b20:	08002c0b 	.word	0x08002c0b
 8002b24:	08002c29 	.word	0x08002c29
 8002b28:	08002c4d 	.word	0x08002c4d
 8002b2c:	08002c9f 	.word	0x08002c9f
 8002b30:	08002cc9 	.word	0x08002cc9
 8002b34:	08002dbd 	.word	0x08002dbd
 8002b38:	08002ec5 	.word	0x08002ec5
 8002b3c:	08002f99 	.word	0x08002f99
 8002b40:	08002fa1 	.word	0x08002fa1
 8002b44:	08002fa9 	.word	0x08002fa9
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 8002b48:	2391      	movs	r3, #145	; 0x91
 8002b4a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 8002b4e:	4b8d      	ldr	r3, [pc, #564]	; (8002d84 <Munmunbot_Protocol+0x4fc>)
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	b25a      	sxtb	r2, r3
 8002b56:	4b8b      	ldr	r3, [pc, #556]	; (8002d84 <Munmunbot_Protocol+0x4fc>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	b25b      	sxtb	r3, r3
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	b25b      	sxtb	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8002b62:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 8002b66:	4b87      	ldr	r3, [pc, #540]	; (8002d84 <Munmunbot_Protocol+0x4fc>)
 8002b68:	78db      	ldrb	r3, [r3, #3]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	b25a      	sxtb	r2, r3
 8002b6e:	4b85      	ldr	r3, [pc, #532]	; (8002d84 <Munmunbot_Protocol+0x4fc>)
 8002b70:	789b      	ldrb	r3, [r3, #2]
 8002b72:	b25b      	sxtb	r3, r3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	b25b      	sxtb	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8002b7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b84:	2358      	movs	r3, #88	; 0x58
 8002b86:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002b8a:	2375      	movs	r3, #117	; 0x75
 8002b8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 8002b90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002b94:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002b98:	4413      	add	r3, r2
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002ba0:	4413      	add	r3, r2
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						UARTTxWrite(uart, temp, 6);
 8002bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bb0:	2206      	movs	r2, #6
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6838      	ldr	r0, [r7, #0]
 8002bb6:	f7ff fdf9 	bl	80027ac <UARTTxWrite>
						}
						break;
 8002bba:	e204      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 8002bbc:	4b72      	ldr	r3, [pc, #456]	; (8002d88 <Munmunbot_Protocol+0x500>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <Munmunbot_Protocol+0x342>
						{
							Munmunbot_State = STATE_Idle;
 8002bc4:	4b70      	ldr	r3, [pc, #448]	; (8002d88 <Munmunbot_Protocol+0x500>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002bca:	6838      	ldr	r0, [r7, #0]
 8002bcc:	f7ff fe36 	bl	800283c <ACK1Return>
						break;
 8002bd0:	e1f9      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002bd2:	4b6d      	ldr	r3, [pc, #436]	; (8002d88 <Munmunbot_Protocol+0x500>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d102      	bne.n	8002be0 <Munmunbot_Protocol+0x358>
						{
							Munmunbot_State = STATE_Disconnected;
 8002bda:	4b6b      	ldr	r3, [pc, #428]	; (8002d88 <Munmunbot_Protocol+0x500>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002be0:	6838      	ldr	r0, [r7, #0]
 8002be2:	f7ff fe2b 	bl	800283c <ACK1Return>
						break;
 8002be6:	e1ee      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002be8:	4b67      	ldr	r3, [pc, #412]	; (8002d88 <Munmunbot_Protocol+0x500>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d108      	bne.n	8002c02 <Munmunbot_Protocol+0x37a>
						{
							CUSSStruc.RPMp = Data_HAck;
 8002bf0:	4b66      	ldr	r3, [pc, #408]	; (8002d8c <Munmunbot_Protocol+0x504>)
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b66      	ldr	r3, [pc, #408]	; (8002d90 <Munmunbot_Protocol+0x508>)
 8002bf8:	609a      	str	r2, [r3, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 8002bfa:	4965      	ldr	r1, [pc, #404]	; (8002d90 <Munmunbot_Protocol+0x508>)
 8002bfc:	4865      	ldr	r0, [pc, #404]	; (8002d94 <Munmunbot_Protocol+0x50c>)
 8002bfe:	f7ff f807 	bl	8001c10 <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 8002c02:	6838      	ldr	r0, [r7, #0]
 8002c04:	f7ff fe1a 	bl	800283c <ACK1Return>
						break;
 8002c08:	e1dd      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002c0a:	4b5f      	ldr	r3, [pc, #380]	; (8002d88 <Munmunbot_Protocol+0x500>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d106      	bne.n	8002c20 <Munmunbot_Protocol+0x398>
						{
							Angularpos_InputNumber = Data_HAck;
 8002c12:	4b5e      	ldr	r3, [pc, #376]	; (8002d8c <Munmunbot_Protocol+0x504>)
 8002c14:	881a      	ldrh	r2, [r3, #0]
 8002c16:	4b60      	ldr	r3, [pc, #384]	; (8002d98 <Munmunbot_Protocol+0x510>)
 8002c18:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 8002c1a:	4b60      	ldr	r3, [pc, #384]	; (8002d9c <Munmunbot_Protocol+0x514>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002c20:	6838      	ldr	r0, [r7, #0]
 8002c22:	f7ff fe0b 	bl	800283c <ACK1Return>
						break;
 8002c26:	e1ce      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002c28:	4b57      	ldr	r3, [pc, #348]	; (8002d88 <Munmunbot_Protocol+0x500>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d109      	bne.n	8002c44 <Munmunbot_Protocol+0x3bc>
						{
//							Angularpos_InputArray[0] = parameter[0];
							Angularpos_InputArray[0] = parameter[2];    //150 0x00 0x0A Checksum
 8002c30:	4b54      	ldr	r3, [pc, #336]	; (8002d84 <Munmunbot_Protocol+0x4fc>)
 8002c32:	789a      	ldrb	r2, [r3, #2]
 8002c34:	4b5a      	ldr	r3, [pc, #360]	; (8002da0 <Munmunbot_Protocol+0x518>)
 8002c36:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 8002c38:	4b58      	ldr	r3, [pc, #352]	; (8002d9c <Munmunbot_Protocol+0x514>)
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 8002c3e:	4b59      	ldr	r3, [pc, #356]	; (8002da4 <Munmunbot_Protocol+0x51c>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002c44:	6838      	ldr	r0, [r7, #0]
 8002c46:	f7ff fdf9 	bl	800283c <ACK1Return>
						break;
 8002c4a:	e1bc      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002c4c:	4b4e      	ldr	r3, [pc, #312]	; (8002d88 <Munmunbot_Protocol+0x500>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d120      	bne.n	8002c96 <Munmunbot_Protocol+0x40e>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 8002c54:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <Munmunbot_Protocol+0x514>)
 8002c56:	2203      	movs	r2, #3
 8002c58:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c5e:	e00b      	b.n	8002c78 <Munmunbot_Protocol+0x3f0>
							{
								Angularpos_InputArray[i] = parameter[i];
 8002c60:	4a48      	ldr	r2, [pc, #288]	; (8002d84 <Munmunbot_Protocol+0x4fc>)
 8002c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c64:	4413      	add	r3, r2
 8002c66:	7819      	ldrb	r1, [r3, #0]
 8002c68:	4a4d      	ldr	r2, [pc, #308]	; (8002da0 <Munmunbot_Protocol+0x518>)
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	4413      	add	r3, r2
 8002c6e:	460a      	mov	r2, r1
 8002c70:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8002c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c74:	3301      	adds	r3, #1
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
 8002c78:	4b4b      	ldr	r3, [pc, #300]	; (8002da8 <Munmunbot_Protocol+0x520>)
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c80:	4293      	cmp	r3, r2
 8002c82:	dbed      	blt.n	8002c60 <Munmunbot_Protocol+0x3d8>
							}
							NumberOfStationToGo = n_station_mem;
 8002c84:	4b48      	ldr	r3, [pc, #288]	; (8002da8 <Munmunbot_Protocol+0x520>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <Munmunbot_Protocol+0x51c>)
 8002c8c:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 8002c8e:	6838      	ldr	r0, [r7, #0]
 8002c90:	f7ff fdd4 	bl	800283c <ACK1Return>
						}
						else
						{
							ACK1Return(uart);
						}
						break;
 8002c94:	e197      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>
							ACK1Return(uart);
 8002c96:	6838      	ldr	r0, [r7, #0]
 8002c98:	f7ff fdd0 	bl	800283c <ACK1Return>
						break;
 8002c9c:	e193      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <Munmunbot_Protocol+0x500>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d106      	bne.n	8002cb4 <Munmunbot_Protocol+0x42c>
						{
							Munmunbot_State = STATE_PrepareDATA;
 8002ca6:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <Munmunbot_Protocol+0x500>)
 8002ca8:	2202      	movs	r2, #2
 8002caa:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 8002cac:	6838      	ldr	r0, [r7, #0]
 8002cae:	f7ff fdc5 	bl	800283c <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};  ///ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 8002cb2:	e188      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>
								uint8_t temp[] =
 8002cb4:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <Munmunbot_Protocol+0x524>)
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
								UARTTxWrite(uart, temp, 4);
 8002cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6838      	ldr	r0, [r7, #0]
 8002cc2:	f7ff fd73 	bl	80027ac <UARTTxWrite>
						break;
 8002cc6:	e17e      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 8002cc8:	4a39      	ldr	r2, [pc, #228]	; (8002db0 <Munmunbot_Protocol+0x528>)
 8002cca:	f107 031c 	add.w	r3, r7, #28
 8002cce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cd2:	6018      	str	r0, [r3, #0]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0}; ///ACK1 + Mode 9
							uint8_t Shift = 2;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
							DataForReturn = Current_Station&(0xff);
 8002cde:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <Munmunbot_Protocol+0x52c>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <Munmunbot_Protocol+0x530>)
 8002ce6:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8002ce8:	4b33      	ldr	r3, [pc, #204]	; (8002db8 <Munmunbot_Protocol+0x530>)
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f803 2c1c 	strb.w	r2, [r3, #-28]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8002d02:	4b2d      	ldr	r3, [pc, #180]	; (8002db8 <Munmunbot_Protocol+0x530>)
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002d12:	440b      	add	r3, r1
 8002d14:	f803 2c1c 	strb.w	r2, [r3, #-28]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8002d18:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002d1c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d20:	4413      	add	r3, r2
 8002d22:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8002d26:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002d30:	440b      	add	r3, r1
 8002d32:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002d36:	4413      	add	r3, r2
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002d3e:	3302      	adds	r3, #2
 8002d40:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002d44:	440b      	add	r3, r1
 8002d46:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002d52:	3303      	adds	r3, #3
 8002d54:	43d2      	mvns	r2, r2
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002d5c:	440b      	add	r3, r1
 8002d5e:	f803 2c1c 	strb.w	r2, [r3, #-28]
							UARTTxWrite(uart, temp, 4+Shift);
 8002d62:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3304      	adds	r3, #4
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	f107 031c 	add.w	r3, r7, #28
 8002d70:	4619      	mov	r1, r3
 8002d72:	6838      	ldr	r0, [r7, #0]
 8002d74:	f7ff fd1a 	bl	80027ac <UARTTxWrite>
						}

						break;
 8002d78:	e125      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>
 8002d7a:	bf00      	nop
 8002d7c:	200001ec 	.word	0x200001ec
 8002d80:	200001f0 	.word	0x200001f0
 8002d84:	200001f4 	.word	0x200001f4
 8002d88:	200000d1 	.word	0x200000d1
 8002d8c:	200001f2 	.word	0x200001f2
 8002d90:	200001c8 	.word	0x200001c8
 8002d94:	20000158 	.word	0x20000158
 8002d98:	200000e4 	.word	0x200000e4
 8002d9c:	200000e6 	.word	0x200000e6
 8002da0:	200000d4 	.word	0x200000d4
 8002da4:	200000e8 	.word	0x200000e8
 8002da8:	200002f6 	.word	0x200002f6
 8002dac:	6e467558 	.word	0x6e467558
 8002db0:	08008e00 	.word	0x08008e00
 8002db4:	200000e7 	.word	0x200000e7
 8002db8:	200002fa 	.word	0x200002fa

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 8002dbc:	4a94      	ldr	r2, [pc, #592]	; (8003010 <Munmunbot_Protocol+0x788>)
 8002dbe:	f107 0314 	add.w	r3, r7, #20
 8002dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dc6:	6018      	str	r0, [r3, #0]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,154, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
							DataForReturn = (PositionPIDController.OutputFeedback*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
 8002dd2:	4b90      	ldr	r3, [pc, #576]	; (8003014 <Munmunbot_Protocol+0x78c>)
 8002dd4:	edd3 7a05 	vldr	s15, [r3, #20]
 8002dd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ddc:	ee17 0a90 	vmov	r0, s15
 8002de0:	f7fd fb5e 	bl	80004a0 <__aeabi_f2d>
 8002de4:	a386      	add	r3, pc, #536	; (adr r3, 8003000 <Munmunbot_Protocol+0x778>)
 8002de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dea:	f7fd fbb1 	bl	8000550 <__aeabi_dmul>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	a384      	add	r3, pc, #528	; (adr r3, 8003008 <Munmunbot_Protocol+0x780>)
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	f7fd fba8 	bl	8000550 <__aeabi_dmul>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4614      	mov	r4, r2
 8002e06:	461d      	mov	r5, r3
 8002e08:	4b83      	ldr	r3, [pc, #524]	; (8003018 <Munmunbot_Protocol+0x790>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd fb25 	bl	800045c <__aeabi_ui2d>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4620      	mov	r0, r4
 8002e18:	4629      	mov	r1, r5
 8002e1a:	f7fd fcc3 	bl	80007a4 <__aeabi_ddiv>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	f7fd fe43 	bl	8000ab0 <__aeabi_d2uiz>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b7b      	ldr	r3, [pc, #492]	; (800301c <Munmunbot_Protocol+0x794>)
 8002e30:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8002e32:	4b7a      	ldr	r3, [pc, #488]	; (800301c <Munmunbot_Protocol+0x794>)
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e3e:	3301      	adds	r3, #1
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002e46:	440b      	add	r3, r1
 8002e48:	f803 2c24 	strb.w	r2, [r3, #-36]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8002e4c:	4b73      	ldr	r3, [pc, #460]	; (800301c <Munmunbot_Protocol+0x794>)
 8002e4e:	881a      	ldrh	r2, [r3, #0]
 8002e50:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e54:	3302      	adds	r3, #2
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002e5c:	440b      	add	r3, r1
 8002e5e:	f803 2c24 	strb.w	r2, [r3, #-36]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8002e62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8002e70:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e74:	3301      	adds	r3, #1
 8002e76:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e80:	4413      	add	r3, r2
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e88:	3302      	adds	r3, #2
 8002e8a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002e8e:	440b      	add	r3, r1
 8002e90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e94:	4413      	add	r3, r2
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e9c:	3303      	adds	r3, #3
 8002e9e:	43d2      	mvns	r2, r2
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f803 2c24 	strb.w	r2, [r3, #-36]
							UARTTxWrite(uart, temp, 4+Shift);
 8002eac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6838      	ldr	r0, [r7, #0]
 8002ebe:	f7ff fc75 	bl	80027ac <UARTTxWrite>
						}

						break;
 8002ec2:	e080      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>

					case 11: /// Return Angular Velocity Max  ##Complete##
							{
								uint8_t temp[] =
 8002ec4:	4a56      	ldr	r2, [pc, #344]	; (8003020 <Munmunbot_Protocol+0x798>)
 8002ec6:	f107 030c 	add.w	r3, r7, #12
 8002eca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ece:	6018      	str	r0, [r3, #0]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	8019      	strh	r1, [r3, #0]
								{0x58 , 0x75 ,155, 0b0,  0b0, 0b0};
								uint8_t Shift = 2;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
								DataForReturn = (TrjStruc.AngularVelocityMax_Setting*60)/(CUSSStruc.PPRxQEI);  ///pps to RPM
 8002eda:	4b52      	ldr	r3, [pc, #328]	; (8003024 <Munmunbot_Protocol+0x79c>)
 8002edc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ee0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003028 <Munmunbot_Protocol+0x7a0>
 8002ee4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ee8:	4b4b      	ldr	r3, [pc, #300]	; (8003018 <Munmunbot_Protocol+0x790>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	ee07 3a90 	vmov	s15, r3
 8002ef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002efc:	ee17 3a90 	vmov	r3, s15
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	4b46      	ldr	r3, [pc, #280]	; (800301c <Munmunbot_Protocol+0x794>)
 8002f04:	801a      	strh	r2, [r3, #0]
								temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8002f06:	4b45      	ldr	r3, [pc, #276]	; (800301c <Munmunbot_Protocol+0x794>)
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f12:	3301      	adds	r3, #1
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f803 2c2c 	strb.w	r2, [r3, #-44]
								temp[2+Shift] = (DataForReturn)&(0xff);
 8002f20:	4b3e      	ldr	r3, [pc, #248]	; (800301c <Munmunbot_Protocol+0x794>)
 8002f22:	881a      	ldrh	r2, [r3, #0]
 8002f24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f28:	3302      	adds	r3, #2
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f30:	440b      	add	r3, r1
 8002f32:	f803 2c2c 	strb.w	r2, [r3, #-44]
								temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8002f36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f3e:	4413      	add	r3, r2
 8002f40:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8002f44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f4e:	440b      	add	r3, r1
 8002f50:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002f54:	4413      	add	r3, r2
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f62:	440b      	add	r3, r1
 8002f64:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002f68:	4413      	add	r3, r2
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f70:	3303      	adds	r3, #3
 8002f72:	43d2      	mvns	r2, r2
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f803 2c2c 	strb.w	r2, [r3, #-44]
								UARTTxWrite(uart, temp, 4+Shift);
 8002f80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3304      	adds	r3, #4
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	f107 030c 	add.w	r3, r7, #12
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6838      	ldr	r0, [r7, #0]
 8002f92:	f7ff fc0b 	bl	80027ac <UARTTxWrite>
							}
						break;
 8002f96:	e016      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>
					case 12:
						if (Munmunbot_State == STATE_Idle)
						{

						}
						ACK1Return(uart);
 8002f98:	6838      	ldr	r0, [r7, #0]
 8002f9a:	f7ff fc4f 	bl	800283c <ACK1Return>
						break;
 8002f9e:	e012      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>
					case 13:
						if (Munmunbot_State == STATE_Idle)
						{

						}
						ACK1Return(uart);
 8002fa0:	6838      	ldr	r0, [r7, #0]
 8002fa2:	f7ff fc4b 	bl	800283c <ACK1Return>
						break;
 8002fa6:	e00e      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002fa8:	4b20      	ldr	r3, [pc, #128]	; (800302c <Munmunbot_Protocol+0x7a4>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <Munmunbot_Protocol+0x734>
						{
							Munmunbot_State = STATE_SetHome;
 8002fb0:	4b1e      	ldr	r3, [pc, #120]	; (800302c <Munmunbot_Protocol+0x7a4>)
 8002fb2:	2206      	movs	r2, #6
 8002fb4:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <Munmunbot_Protocol+0x7a8>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002fbc:	6838      	ldr	r0, [r7, #0]
 8002fbe:	f7ff fc3d 	bl	800283c <ACK1Return>
						break;
 8002fc2:	e000      	b.n	8002fc6 <Munmunbot_Protocol+0x73e>
				    }
			   }
 8002fc4:	bf00      	nop
			n_station = 0;
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <Munmunbot_Protocol+0x7ac>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <Munmunbot_Protocol+0x7b0>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <Munmunbot_Protocol+0x7b4>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <Munmunbot_Protocol+0x7b8>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 8002fde:	4b19      	ldr	r3, [pc, #100]	; (8003044 <Munmunbot_Protocol+0x7bc>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
			Munmunbot_Protocol_State = PP_STARTandMode;
 8002fe4:	4b18      	ldr	r3, [pc, #96]	; (8003048 <Munmunbot_Protocol+0x7c0>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
			break;
 8002fea:	e002      	b.n	8002ff2 <Munmunbot_Protocol+0x76a>
			break;
 8002fec:	bf00      	nop
 8002fee:	e000      	b.n	8002ff2 <Munmunbot_Protocol+0x76a>
				break;
 8002ff0:	bf00      	nop
			}
	}
}
 8002ff2:	bf00      	nop
 8002ff4:	3738      	adds	r7, #56	; 0x38
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	f3af 8000 	nop.w
 8003000:	9ba5e354 	.word	0x9ba5e354
 8003004:	400920c4 	.word	0x400920c4
 8003008:	00000000 	.word	0x00000000
 800300c:	40c38800 	.word	0x40c38800
 8003010:	08008e08 	.word	0x08008e08
 8003014:	200000f8 	.word	0x200000f8
 8003018:	200001c8 	.word	0x200001c8
 800301c:	200002fa 	.word	0x200002fa
 8003020:	08008e10 	.word	0x08008e10
 8003024:	20000158 	.word	0x20000158
 8003028:	42700000 	.word	0x42700000
 800302c:	200000d1 	.word	0x200000d1
 8003030:	200000d2 	.word	0x200000d2
 8003034:	200002f4 	.word	0x200002f4
 8003038:	200001f0 	.word	0x200001f0
 800303c:	200002f8 	.word	0x200002f8
 8003040:	200001f2 	.word	0x200001f2
 8003044:	200001ec 	.word	0x200001ec
 8003048:	200000d0 	.word	0x200000d0

0800304c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003050:	b672      	cpsid	i
}
 8003052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003054:	e7fe      	b.n	8003054 <Error_Handler+0x8>
	...

08003058 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_MspInit+0x4c>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	4a0f      	ldr	r2, [pc, #60]	; (80030a4 <HAL_MspInit+0x4c>)
 8003068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800306c:	6453      	str	r3, [r2, #68]	; 0x44
 800306e:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <HAL_MspInit+0x4c>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_MspInit+0x4c>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	4a08      	ldr	r2, [pc, #32]	; (80030a4 <HAL_MspInit+0x4c>)
 8003084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003088:	6413      	str	r3, [r2, #64]	; 0x40
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_MspInit+0x4c>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003096:	2007      	movs	r0, #7
 8003098:	f000 fbf0 	bl	800387c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40023800 	.word	0x40023800

080030a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b0:	f107 0314 	add.w	r3, r7, #20
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a21      	ldr	r2, [pc, #132]	; (800314c <HAL_I2C_MspInit+0xa4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d13b      	bne.n	8003142 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	4b20      	ldr	r3, [pc, #128]	; (8003150 <HAL_I2C_MspInit+0xa8>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a1f      	ldr	r2, [pc, #124]	; (8003150 <HAL_I2C_MspInit+0xa8>)
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_I2C_MspInit+0xa8>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030e6:	23c0      	movs	r3, #192	; 0xc0
 80030e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ea:	2312      	movs	r3, #18
 80030ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f2:	2303      	movs	r3, #3
 80030f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030f6:	2304      	movs	r3, #4
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fa:	f107 0314 	add.w	r3, r7, #20
 80030fe:	4619      	mov	r1, r3
 8003100:	4814      	ldr	r0, [pc, #80]	; (8003154 <HAL_I2C_MspInit+0xac>)
 8003102:	f001 f80d 	bl	8004120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_I2C_MspInit+0xa8>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_I2C_MspInit+0xa8>)
 8003110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003114:	6413      	str	r3, [r2, #64]	; 0x40
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <HAL_I2C_MspInit+0xa8>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003122:	2200      	movs	r2, #0
 8003124:	2100      	movs	r1, #0
 8003126:	201f      	movs	r0, #31
 8003128:	f000 fbb3 	bl	8003892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800312c:	201f      	movs	r0, #31
 800312e:	f000 fbcc 	bl	80038ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	2020      	movs	r0, #32
 8003138:	f000 fbab 	bl	8003892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800313c:	2020      	movs	r0, #32
 800313e:	f000 fbc4 	bl	80038ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003142:	bf00      	nop
 8003144:	3728      	adds	r7, #40	; 0x28
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40005400 	.word	0x40005400
 8003150:	40023800 	.word	0x40023800
 8003154:	40020400 	.word	0x40020400

08003158 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	; 0x28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_TIM_Encoder_MspInit+0x84>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d12c      	bne.n	80031d4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	4a17      	ldr	r2, [pc, #92]	; (80031e0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6453      	str	r3, [r2, #68]	; 0x44
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <HAL_TIM_Encoder_MspInit+0x88>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_TIM_Encoder_MspInit+0x88>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <HAL_TIM_Encoder_MspInit+0x88>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6313      	str	r3, [r2, #48]	; 0x30
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_TIM_Encoder_MspInit+0x88>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 80031b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b8:	2302      	movs	r3, #2
 80031ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	2300      	movs	r3, #0
 80031c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031c4:	2301      	movs	r3, #1
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c8:	f107 0314 	add.w	r3, r7, #20
 80031cc:	4619      	mov	r1, r3
 80031ce:	4805      	ldr	r0, [pc, #20]	; (80031e4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80031d0:	f000 ffa6 	bl	8004120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80031d4:	bf00      	nop
 80031d6:	3728      	adds	r7, #40	; 0x28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40020000 	.word	0x40020000

080031e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f8:	d116      	bne.n	8003228 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	4b16      	ldr	r3, [pc, #88]	; (8003258 <HAL_TIM_Base_MspInit+0x70>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	4a15      	ldr	r2, [pc, #84]	; (8003258 <HAL_TIM_Base_MspInit+0x70>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6413      	str	r3, [r2, #64]	; 0x40
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <HAL_TIM_Base_MspInit+0x70>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2100      	movs	r1, #0
 800321a:	201c      	movs	r0, #28
 800321c:	f000 fb39 	bl	8003892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003220:	201c      	movs	r0, #28
 8003222:	f000 fb52 	bl	80038ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003226:	e012      	b.n	800324e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a0b      	ldr	r2, [pc, #44]	; (800325c <HAL_TIM_Base_MspInit+0x74>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d10d      	bne.n	800324e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_TIM_Base_MspInit+0x70>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a07      	ldr	r2, [pc, #28]	; (8003258 <HAL_TIM_Base_MspInit+0x70>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_TIM_Base_MspInit+0x70>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	40000400 	.word	0x40000400

08003260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 030c 	add.w	r3, r7, #12
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <HAL_TIM_MspPostInit+0x68>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d11d      	bne.n	80032be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_TIM_MspPostInit+0x6c>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a10      	ldr	r2, [pc, #64]	; (80032cc <HAL_TIM_MspPostInit+0x6c>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <HAL_TIM_MspPostInit+0x6c>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 800329e:	2340      	movs	r3, #64	; 0x40
 80032a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a2:	2302      	movs	r3, #2
 80032a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032ae:	2302      	movs	r3, #2
 80032b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 80032b2:	f107 030c 	add.w	r3, r7, #12
 80032b6:	4619      	mov	r1, r3
 80032b8:	4805      	ldr	r0, [pc, #20]	; (80032d0 <HAL_TIM_MspPostInit+0x70>)
 80032ba:	f000 ff31 	bl	8004120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80032be:	bf00      	nop
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40000400 	.word	0x40000400
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40020000 	.word	0x40020000

080032d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08a      	sub	sp, #40	; 0x28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a4c      	ldr	r2, [pc, #304]	; (8003424 <HAL_UART_MspInit+0x150>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	f040 8091 	bne.w	800341a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	4b4a      	ldr	r3, [pc, #296]	; (8003428 <HAL_UART_MspInit+0x154>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	4a49      	ldr	r2, [pc, #292]	; (8003428 <HAL_UART_MspInit+0x154>)
 8003302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003306:	6413      	str	r3, [r2, #64]	; 0x40
 8003308:	4b47      	ldr	r3, [pc, #284]	; (8003428 <HAL_UART_MspInit+0x154>)
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	4b43      	ldr	r3, [pc, #268]	; (8003428 <HAL_UART_MspInit+0x154>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	4a42      	ldr	r2, [pc, #264]	; (8003428 <HAL_UART_MspInit+0x154>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6313      	str	r3, [r2, #48]	; 0x30
 8003324:	4b40      	ldr	r3, [pc, #256]	; (8003428 <HAL_UART_MspInit+0x154>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003330:	230c      	movs	r3, #12
 8003332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003334:	2302      	movs	r3, #2
 8003336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333c:	2303      	movs	r3, #3
 800333e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003340:	2307      	movs	r3, #7
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	4619      	mov	r1, r3
 800334a:	4838      	ldr	r0, [pc, #224]	; (800342c <HAL_UART_MspInit+0x158>)
 800334c:	f000 fee8 	bl	8004120 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003350:	4b37      	ldr	r3, [pc, #220]	; (8003430 <HAL_UART_MspInit+0x15c>)
 8003352:	4a38      	ldr	r2, [pc, #224]	; (8003434 <HAL_UART_MspInit+0x160>)
 8003354:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003356:	4b36      	ldr	r3, [pc, #216]	; (8003430 <HAL_UART_MspInit+0x15c>)
 8003358:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800335c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800335e:	4b34      	ldr	r3, [pc, #208]	; (8003430 <HAL_UART_MspInit+0x15c>)
 8003360:	2240      	movs	r2, #64	; 0x40
 8003362:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003364:	4b32      	ldr	r3, [pc, #200]	; (8003430 <HAL_UART_MspInit+0x15c>)
 8003366:	2200      	movs	r2, #0
 8003368:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800336a:	4b31      	ldr	r3, [pc, #196]	; (8003430 <HAL_UART_MspInit+0x15c>)
 800336c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003370:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003372:	4b2f      	ldr	r3, [pc, #188]	; (8003430 <HAL_UART_MspInit+0x15c>)
 8003374:	2200      	movs	r2, #0
 8003376:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003378:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <HAL_UART_MspInit+0x15c>)
 800337a:	2200      	movs	r2, #0
 800337c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800337e:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <HAL_UART_MspInit+0x15c>)
 8003380:	2200      	movs	r2, #0
 8003382:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003384:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <HAL_UART_MspInit+0x15c>)
 8003386:	2200      	movs	r2, #0
 8003388:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800338a:	4b29      	ldr	r3, [pc, #164]	; (8003430 <HAL_UART_MspInit+0x15c>)
 800338c:	2200      	movs	r2, #0
 800338e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003390:	4827      	ldr	r0, [pc, #156]	; (8003430 <HAL_UART_MspInit+0x15c>)
 8003392:	f000 fab5 	bl	8003900 <HAL_DMA_Init>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800339c:	f7ff fe56 	bl	800304c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a23      	ldr	r2, [pc, #140]	; (8003430 <HAL_UART_MspInit+0x15c>)
 80033a4:	635a      	str	r2, [r3, #52]	; 0x34
 80033a6:	4a22      	ldr	r2, [pc, #136]	; (8003430 <HAL_UART_MspInit+0x15c>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80033ac:	4b22      	ldr	r3, [pc, #136]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033ae:	4a23      	ldr	r2, [pc, #140]	; (800343c <HAL_UART_MspInit+0x168>)
 80033b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80033b2:	4b21      	ldr	r3, [pc, #132]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033ba:	4b1f      	ldr	r3, [pc, #124]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033c6:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033d4:	4b18      	ldr	r3, [pc, #96]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80033da:	4b17      	ldr	r3, [pc, #92]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033e8:	4b13      	ldr	r3, [pc, #76]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80033ee:	4812      	ldr	r0, [pc, #72]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033f0:	f000 fa86 	bl	8003900 <HAL_DMA_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80033fa:	f7ff fe27 	bl	800304c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <HAL_UART_MspInit+0x164>)
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
 8003404:	4a0c      	ldr	r2, [pc, #48]	; (8003438 <HAL_UART_MspInit+0x164>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800340a:	2200      	movs	r2, #0
 800340c:	2100      	movs	r1, #0
 800340e:	2026      	movs	r0, #38	; 0x26
 8003410:	f000 fa3f 	bl	8003892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003414:	2026      	movs	r0, #38	; 0x26
 8003416:	f000 fa58 	bl	80038ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800341a:	bf00      	nop
 800341c:	3728      	adds	r7, #40	; 0x28
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40004400 	.word	0x40004400
 8003428:	40023800 	.word	0x40023800
 800342c:	40020000 	.word	0x40020000
 8003430:	20000404 	.word	0x20000404
 8003434:	400260a0 	.word	0x400260a0
 8003438:	20000308 	.word	0x20000308
 800343c:	40026088 	.word	0x40026088

08003440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003444:	e7fe      	b.n	8003444 <NMI_Handler+0x4>

08003446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800344a:	e7fe      	b.n	800344a <HardFault_Handler+0x4>

0800344c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003450:	e7fe      	b.n	8003450 <MemManage_Handler+0x4>

08003452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003456:	e7fe      	b.n	8003456 <BusFault_Handler+0x4>

08003458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800345c:	e7fe      	b.n	800345c <UsageFault_Handler+0x4>

0800345e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800348c:	f000 f906 	bl	800369c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}

08003494 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003498:	4802      	ldr	r0, [pc, #8]	; (80034a4 <DMA1_Stream5_IRQHandler+0x10>)
 800349a:	f000 fbc9 	bl	8003c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000308 	.word	0x20000308

080034a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80034ac:	4802      	ldr	r0, [pc, #8]	; (80034b8 <DMA1_Stream6_IRQHandler+0x10>)
 80034ae:	f000 fbbf 	bl	8003c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000404 	.word	0x20000404

080034bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034c0:	4802      	ldr	r0, [pc, #8]	; (80034cc <TIM2_IRQHandler+0x10>)
 80034c2:	f003 fd9b 	bl	8006ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200004ac 	.word	0x200004ac

080034d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80034d4:	4802      	ldr	r0, [pc, #8]	; (80034e0 <I2C1_EV_IRQHandler+0x10>)
 80034d6:	f001 f91d 	bl	8004714 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000368 	.word	0x20000368

080034e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80034e8:	4802      	ldr	r0, [pc, #8]	; (80034f4 <I2C1_ER_IRQHandler+0x10>)
 80034ea:	f001 fa80 	bl	80049ee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000368 	.word	0x20000368

080034f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034fc:	4802      	ldr	r0, [pc, #8]	; (8003508 <USART2_IRQHandler+0x10>)
 80034fe:	f004 fc67 	bl	8007dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	200004f4 	.word	0x200004f4

0800350c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003514:	4a14      	ldr	r2, [pc, #80]	; (8003568 <_sbrk+0x5c>)
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <_sbrk+0x60>)
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003520:	4b13      	ldr	r3, [pc, #76]	; (8003570 <_sbrk+0x64>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <_sbrk+0x64>)
 800352a:	4a12      	ldr	r2, [pc, #72]	; (8003574 <_sbrk+0x68>)
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800352e:	4b10      	ldr	r3, [pc, #64]	; (8003570 <_sbrk+0x64>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	429a      	cmp	r2, r3
 800353a:	d207      	bcs.n	800354c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800353c:	f005 faa4 	bl	8008a88 <__errno>
 8003540:	4603      	mov	r3, r0
 8003542:	220c      	movs	r2, #12
 8003544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	e009      	b.n	8003560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <_sbrk+0x64>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <_sbrk+0x64>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	4a05      	ldr	r2, [pc, #20]	; (8003570 <_sbrk+0x64>)
 800355c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800355e:	68fb      	ldr	r3, [r7, #12]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20020000 	.word	0x20020000
 800356c:	00000400 	.word	0x00000400
 8003570:	200002fc 	.word	0x200002fc
 8003574:	20000550 	.word	0x20000550

08003578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800357c:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <SystemInit+0x28>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	4a07      	ldr	r2, [pc, #28]	; (80035a0 <SystemInit+0x28>)
 8003584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <SystemInit+0x28>)
 800358e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003592:	609a      	str	r2, [r3, #8]
#endif
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80035a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035aa:	e003      	b.n	80035b4 <LoopCopyDataInit>

080035ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035b2:	3104      	adds	r1, #4

080035b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035b4:	480b      	ldr	r0, [pc, #44]	; (80035e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035bc:	d3f6      	bcc.n	80035ac <CopyDataInit>
  ldr  r2, =_sbss
 80035be:	4a0b      	ldr	r2, [pc, #44]	; (80035ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035c0:	e002      	b.n	80035c8 <LoopFillZerobss>

080035c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035c4:	f842 3b04 	str.w	r3, [r2], #4

080035c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035cc:	d3f9      	bcc.n	80035c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035ce:	f7ff ffd3 	bl	8003578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035d2:	f005 fa5f 	bl	8008a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035d6:	f7fd fd65 	bl	80010a4 <main>
  bx  lr    
 80035da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80035dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80035e0:	08008e48 	.word	0x08008e48
  ldr  r0, =_sdata
 80035e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035e8:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80035ec:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80035f0:	2000054c 	.word	0x2000054c

080035f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f4:	e7fe      	b.n	80035f4 <ADC_IRQHandler>
	...

080035f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035fc:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <HAL_Init+0x40>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0d      	ldr	r2, [pc, #52]	; (8003638 <HAL_Init+0x40>)
 8003602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_Init+0x40>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <HAL_Init+0x40>)
 800360e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003614:	4b08      	ldr	r3, [pc, #32]	; (8003638 <HAL_Init+0x40>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a07      	ldr	r2, [pc, #28]	; (8003638 <HAL_Init+0x40>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003620:	2003      	movs	r0, #3
 8003622:	f000 f92b 	bl	800387c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003626:	2000      	movs	r0, #0
 8003628:	f000 f808 	bl	800363c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800362c:	f7ff fd14 	bl	8003058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023c00 	.word	0x40023c00

0800363c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003644:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_InitTick+0x54>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_InitTick+0x58>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	4619      	mov	r1, r3
 800364e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003652:	fbb3 f3f1 	udiv	r3, r3, r1
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f943 	bl	80038e6 <HAL_SYSTICK_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e00e      	b.n	8003688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b0f      	cmp	r3, #15
 800366e:	d80a      	bhi.n	8003686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003670:	2200      	movs	r2, #0
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	f000 f90b 	bl	8003892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800367c:	4a06      	ldr	r2, [pc, #24]	; (8003698 <HAL_InitTick+0x5c>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000014 	.word	0x20000014
 8003694:	2000001c 	.word	0x2000001c
 8003698:	20000018 	.word	0x20000018

0800369c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_IncTick+0x20>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_IncTick+0x24>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_IncTick+0x24>)
 80036ae:	6013      	str	r3, [r2, #0]
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	2000001c 	.word	0x2000001c
 80036c0:	20000538 	.word	0x20000538

080036c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return uwTick;
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <HAL_GetTick+0x14>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000538 	.word	0x20000538

080036dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036f8:	4013      	ands	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800370e:	4a04      	ldr	r2, [pc, #16]	; (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	60d3      	str	r3, [r2, #12]
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <__NVIC_GetPriorityGrouping+0x18>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	f003 0307 	and.w	r3, r3, #7
}
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	2b00      	cmp	r3, #0
 8003750:	db0b      	blt.n	800376a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	f003 021f 	and.w	r2, r3, #31
 8003758:	4907      	ldr	r1, [pc, #28]	; (8003778 <__NVIC_EnableIRQ+0x38>)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2001      	movs	r0, #1
 8003762:	fa00 f202 	lsl.w	r2, r0, r2
 8003766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	e000e100 	.word	0xe000e100

0800377c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	6039      	str	r1, [r7, #0]
 8003786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378c:	2b00      	cmp	r3, #0
 800378e:	db0a      	blt.n	80037a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	b2da      	uxtb	r2, r3
 8003794:	490c      	ldr	r1, [pc, #48]	; (80037c8 <__NVIC_SetPriority+0x4c>)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	0112      	lsls	r2, r2, #4
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	440b      	add	r3, r1
 80037a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a4:	e00a      	b.n	80037bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	4908      	ldr	r1, [pc, #32]	; (80037cc <__NVIC_SetPriority+0x50>)
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	3b04      	subs	r3, #4
 80037b4:	0112      	lsls	r2, r2, #4
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	440b      	add	r3, r1
 80037ba:	761a      	strb	r2, [r3, #24]
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000e100 	.word	0xe000e100
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f1c3 0307 	rsb	r3, r3, #7
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	bf28      	it	cs
 80037ee:	2304      	movcs	r3, #4
 80037f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3304      	adds	r3, #4
 80037f6:	2b06      	cmp	r3, #6
 80037f8:	d902      	bls.n	8003800 <NVIC_EncodePriority+0x30>
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3b03      	subs	r3, #3
 80037fe:	e000      	b.n	8003802 <NVIC_EncodePriority+0x32>
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003804:	f04f 32ff 	mov.w	r2, #4294967295
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43da      	mvns	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	401a      	ands	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003818:	f04f 31ff 	mov.w	r1, #4294967295
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	fa01 f303 	lsl.w	r3, r1, r3
 8003822:	43d9      	mvns	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003828:	4313      	orrs	r3, r2
         );
}
 800382a:	4618      	mov	r0, r3
 800382c:	3724      	adds	r7, #36	; 0x24
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3b01      	subs	r3, #1
 8003844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003848:	d301      	bcc.n	800384e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800384a:	2301      	movs	r3, #1
 800384c:	e00f      	b.n	800386e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800384e:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <SysTick_Config+0x40>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3b01      	subs	r3, #1
 8003854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003856:	210f      	movs	r1, #15
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	f7ff ff8e 	bl	800377c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <SysTick_Config+0x40>)
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003866:	4b04      	ldr	r3, [pc, #16]	; (8003878 <SysTick_Config+0x40>)
 8003868:	2207      	movs	r2, #7
 800386a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	e000e010 	.word	0xe000e010

0800387c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ff29 	bl	80036dc <__NVIC_SetPriorityGrouping>
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	4603      	mov	r3, r0
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038a4:	f7ff ff3e 	bl	8003724 <__NVIC_GetPriorityGrouping>
 80038a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	6978      	ldr	r0, [r7, #20]
 80038b0:	f7ff ff8e 	bl	80037d0 <NVIC_EncodePriority>
 80038b4:	4602      	mov	r2, r0
 80038b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ba:	4611      	mov	r1, r2
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff5d 	bl	800377c <__NVIC_SetPriority>
}
 80038c2:	bf00      	nop
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	4603      	mov	r3, r0
 80038d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff31 	bl	8003740 <__NVIC_EnableIRQ>
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ffa2 	bl	8003838 <SysTick_Config>
 80038f4:	4603      	mov	r3, r0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800390c:	f7ff feda 	bl	80036c4 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e099      	b.n	8003a50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800393c:	e00f      	b.n	800395e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800393e:	f7ff fec1 	bl	80036c4 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b05      	cmp	r3, #5
 800394a:	d908      	bls.n	800395e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2203      	movs	r2, #3
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e078      	b.n	8003a50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e8      	bne.n	800393e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <HAL_DMA_Init+0x158>)
 8003978:	4013      	ands	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800398a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003996:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d107      	bne.n	80039c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	4313      	orrs	r3, r2
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 0307 	bic.w	r3, r3, #7
 80039de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d117      	bne.n	8003a22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00e      	beq.n	8003a22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fb0f 	bl	8004028 <DMA_CheckFifoParam>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2240      	movs	r2, #64	; 0x40
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e016      	b.n	8003a50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fac6 	bl	8003fbc <DMA_CalcBaseAndBitshift>
 8003a30:	4603      	mov	r3, r0
 8003a32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	223f      	movs	r2, #63	; 0x3f
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	f010803f 	.word	0xf010803f

08003a5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_DMA_Start_IT+0x26>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e040      	b.n	8003b04 <HAL_DMA_Start_IT+0xa8>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d12f      	bne.n	8003af6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fa58 	bl	8003f60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	223f      	movs	r2, #63	; 0x3f
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0216 	orr.w	r2, r2, #22
 8003aca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0208 	orr.w	r2, r2, #8
 8003ae2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	e005      	b.n	8003b02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
 8003b00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b1a:	f7ff fdd3 	bl	80036c4 <HAL_GetTick>
 8003b1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d008      	beq.n	8003b3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2280      	movs	r2, #128	; 0x80
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e052      	b.n	8003be4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0216 	bic.w	r2, r2, #22
 8003b4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <HAL_DMA_Abort+0x62>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0208 	bic.w	r2, r2, #8
 8003b7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b8e:	e013      	b.n	8003bb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b90:	f7ff fd98 	bl	80036c4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b05      	cmp	r3, #5
 8003b9c:	d90c      	bls.n	8003bb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2203      	movs	r2, #3
 8003bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e015      	b.n	8003be4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e4      	bne.n	8003b90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bca:	223f      	movs	r2, #63	; 0x3f
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d004      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2280      	movs	r2, #128	; 0x80
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e00c      	b.n	8003c24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2205      	movs	r2, #5
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c3c:	4b92      	ldr	r3, [pc, #584]	; (8003e88 <HAL_DMA_IRQHandler+0x258>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a92      	ldr	r2, [pc, #584]	; (8003e8c <HAL_DMA_IRQHandler+0x25c>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0a9b      	lsrs	r3, r3, #10
 8003c48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01a      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d013      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0204 	bic.w	r2, r2, #4
 8003c82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c88:	2208      	movs	r2, #8
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f043 0201 	orr.w	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d012      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	f043 0202 	orr.w	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d012      	beq.n	8003d08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	f043 0204 	orr.w	r2, r3, #4
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0c:	2210      	movs	r2, #16
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d043      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d03c      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d018      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d108      	bne.n	8003d60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d024      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	4798      	blx	r3
 8003d5e:	e01f      	b.n	8003da0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01b      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
 8003d70:	e016      	b.n	8003da0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d107      	bne.n	8003d90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0208 	bic.w	r2, r2, #8
 8003d8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	2220      	movs	r2, #32
 8003da6:	409a      	lsls	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 808e 	beq.w	8003ece <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8086 	beq.w	8003ece <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d136      	bne.n	8003e48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0216 	bic.w	r2, r2, #22
 8003de8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003df8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <HAL_DMA_IRQHandler+0x1da>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0208 	bic.w	r2, r2, #8
 8003e18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1e:	223f      	movs	r2, #63	; 0x3f
 8003e20:	409a      	lsls	r2, r3
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d07d      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	4798      	blx	r3
        }
        return;
 8003e46:	e078      	b.n	8003f3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d01c      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d108      	bne.n	8003e76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d030      	beq.n	8003ece <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4798      	blx	r3
 8003e74:	e02b      	b.n	8003ece <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d027      	beq.n	8003ece <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4798      	blx	r3
 8003e86:	e022      	b.n	8003ece <HAL_DMA_IRQHandler+0x29e>
 8003e88:	20000014 	.word	0x20000014
 8003e8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10f      	bne.n	8003ebe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0210 	bic.w	r2, r2, #16
 8003eac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d032      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d022      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2205      	movs	r2, #5
 8003ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	3301      	adds	r3, #1
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d307      	bcc.n	8003f16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f2      	bne.n	8003efa <HAL_DMA_IRQHandler+0x2ca>
 8003f14:	e000      	b.n	8003f18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003f16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	4798      	blx	r3
 8003f38:	e000      	b.n	8003f3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003f3a:	bf00      	nop
    }
  }
}
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop

08003f44 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f52:	b2db      	uxtb	r3, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d108      	bne.n	8003fa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f9e:	e007      	b.n	8003fb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	3b10      	subs	r3, #16
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <DMA_CalcBaseAndBitshift+0x64>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fd6:	4a13      	ldr	r2, [pc, #76]	; (8004024 <DMA_CalcBaseAndBitshift+0x68>)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d909      	bls.n	8003ffe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	1d1a      	adds	r2, r3, #4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	659a      	str	r2, [r3, #88]	; 0x58
 8003ffc:	e007      	b.n	800400e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	aaaaaaab 	.word	0xaaaaaaab
 8004024:	08008e30 	.word	0x08008e30

08004028 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d11f      	bne.n	8004082 <DMA_CheckFifoParam+0x5a>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b03      	cmp	r3, #3
 8004046:	d856      	bhi.n	80040f6 <DMA_CheckFifoParam+0xce>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <DMA_CheckFifoParam+0x28>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004061 	.word	0x08004061
 8004054:	08004073 	.word	0x08004073
 8004058:	08004061 	.word	0x08004061
 800405c:	080040f7 	.word	0x080040f7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d046      	beq.n	80040fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004070:	e043      	b.n	80040fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800407a:	d140      	bne.n	80040fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004080:	e03d      	b.n	80040fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800408a:	d121      	bne.n	80040d0 <DMA_CheckFifoParam+0xa8>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d837      	bhi.n	8004102 <DMA_CheckFifoParam+0xda>
 8004092:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <DMA_CheckFifoParam+0x70>)
 8004094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004098:	080040a9 	.word	0x080040a9
 800409c:	080040af 	.word	0x080040af
 80040a0:	080040a9 	.word	0x080040a9
 80040a4:	080040c1 	.word	0x080040c1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      break;
 80040ac:	e030      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d025      	beq.n	8004106 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040be:	e022      	b.n	8004106 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040c8:	d11f      	bne.n	800410a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040ce:	e01c      	b.n	800410a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d903      	bls.n	80040de <DMA_CheckFifoParam+0xb6>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d003      	beq.n	80040e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040dc:	e018      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
      break;
 80040e2:	e015      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00e      	beq.n	800410e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
      break;
 80040f4:	e00b      	b.n	800410e <DMA_CheckFifoParam+0xe6>
      break;
 80040f6:	bf00      	nop
 80040f8:	e00a      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 80040fa:	bf00      	nop
 80040fc:	e008      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 80040fe:	bf00      	nop
 8004100:	e006      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 8004102:	bf00      	nop
 8004104:	e004      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;   
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 800410e:	bf00      	nop
    }
  } 
  
  return status; 
 8004110:	7bfb      	ldrb	r3, [r7, #15]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop

08004120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004120:	b480      	push	{r7}
 8004122:	b089      	sub	sp, #36	; 0x24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	e159      	b.n	80043f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800413c:	2201      	movs	r2, #1
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	429a      	cmp	r2, r3
 8004156:	f040 8148 	bne.w	80043ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d005      	beq.n	8004172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800416e:	2b02      	cmp	r3, #2
 8004170:	d130      	bne.n	80041d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	2203      	movs	r2, #3
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041a8:	2201      	movs	r2, #1
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4013      	ands	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 0201 	and.w	r2, r3, #1
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d017      	beq.n	8004210 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2203      	movs	r2, #3
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d123      	bne.n	8004264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	08da      	lsrs	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3208      	adds	r2, #8
 8004224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	220f      	movs	r2, #15
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	08da      	lsrs	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3208      	adds	r2, #8
 800425e:	69b9      	ldr	r1, [r7, #24]
 8004260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	2203      	movs	r2, #3
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0203 	and.w	r2, r3, #3
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80a2 	beq.w	80043ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	4b57      	ldr	r3, [pc, #348]	; (8004408 <HAL_GPIO_Init+0x2e8>)
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	4a56      	ldr	r2, [pc, #344]	; (8004408 <HAL_GPIO_Init+0x2e8>)
 80042b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042b4:	6453      	str	r3, [r2, #68]	; 0x44
 80042b6:	4b54      	ldr	r3, [pc, #336]	; (8004408 <HAL_GPIO_Init+0x2e8>)
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042c2:	4a52      	ldr	r2, [pc, #328]	; (800440c <HAL_GPIO_Init+0x2ec>)
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	089b      	lsrs	r3, r3, #2
 80042c8:	3302      	adds	r3, #2
 80042ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	220f      	movs	r2, #15
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a49      	ldr	r2, [pc, #292]	; (8004410 <HAL_GPIO_Init+0x2f0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d019      	beq.n	8004322 <HAL_GPIO_Init+0x202>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a48      	ldr	r2, [pc, #288]	; (8004414 <HAL_GPIO_Init+0x2f4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_GPIO_Init+0x1fe>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a47      	ldr	r2, [pc, #284]	; (8004418 <HAL_GPIO_Init+0x2f8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00d      	beq.n	800431a <HAL_GPIO_Init+0x1fa>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a46      	ldr	r2, [pc, #280]	; (800441c <HAL_GPIO_Init+0x2fc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <HAL_GPIO_Init+0x1f6>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a45      	ldr	r2, [pc, #276]	; (8004420 <HAL_GPIO_Init+0x300>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <HAL_GPIO_Init+0x1f2>
 800430e:	2304      	movs	r3, #4
 8004310:	e008      	b.n	8004324 <HAL_GPIO_Init+0x204>
 8004312:	2307      	movs	r3, #7
 8004314:	e006      	b.n	8004324 <HAL_GPIO_Init+0x204>
 8004316:	2303      	movs	r3, #3
 8004318:	e004      	b.n	8004324 <HAL_GPIO_Init+0x204>
 800431a:	2302      	movs	r3, #2
 800431c:	e002      	b.n	8004324 <HAL_GPIO_Init+0x204>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <HAL_GPIO_Init+0x204>
 8004322:	2300      	movs	r3, #0
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	f002 0203 	and.w	r2, r2, #3
 800432a:	0092      	lsls	r2, r2, #2
 800432c:	4093      	lsls	r3, r2
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004334:	4935      	ldr	r1, [pc, #212]	; (800440c <HAL_GPIO_Init+0x2ec>)
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	089b      	lsrs	r3, r3, #2
 800433a:	3302      	adds	r3, #2
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004342:	4b38      	ldr	r3, [pc, #224]	; (8004424 <HAL_GPIO_Init+0x304>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	43db      	mvns	r3, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4013      	ands	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004366:	4a2f      	ldr	r2, [pc, #188]	; (8004424 <HAL_GPIO_Init+0x304>)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800436c:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <HAL_GPIO_Init+0x304>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004390:	4a24      	ldr	r2, [pc, #144]	; (8004424 <HAL_GPIO_Init+0x304>)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004396:	4b23      	ldr	r3, [pc, #140]	; (8004424 <HAL_GPIO_Init+0x304>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ba:	4a1a      	ldr	r2, [pc, #104]	; (8004424 <HAL_GPIO_Init+0x304>)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043c0:	4b18      	ldr	r3, [pc, #96]	; (8004424 <HAL_GPIO_Init+0x304>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043e4:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <HAL_GPIO_Init+0x304>)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3301      	adds	r3, #1
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b0f      	cmp	r3, #15
 80043f4:	f67f aea2 	bls.w	800413c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	3724      	adds	r7, #36	; 0x24
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800
 800440c:	40013800 	.word	0x40013800
 8004410:	40020000 	.word	0x40020000
 8004414:	40020400 	.word	0x40020400
 8004418:	40020800 	.word	0x40020800
 800441c:	40020c00 	.word	0x40020c00
 8004420:	40021000 	.word	0x40021000
 8004424:	40013c00 	.word	0x40013c00

08004428 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	887b      	ldrh	r3, [r7, #2]
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
 8004444:	e001      	b.n	800444a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	807b      	strh	r3, [r7, #2]
 8004464:	4613      	mov	r3, r2
 8004466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004468:	787b      	ldrb	r3, [r7, #1]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800446e:	887a      	ldrh	r2, [r7, #2]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004474:	e003      	b.n	800447e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004476:	887b      	ldrh	r3, [r7, #2]
 8004478:	041a      	lsls	r2, r3, #16
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	619a      	str	r2, [r3, #24]
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e12b      	b.n	80046f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fe fdf8 	bl	80030a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	; 0x24
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0201 	bic.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044f0:	f002 fa12 	bl	8006918 <HAL_RCC_GetPCLK1Freq>
 80044f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	4a81      	ldr	r2, [pc, #516]	; (8004700 <HAL_I2C_Init+0x274>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d807      	bhi.n	8004510 <HAL_I2C_Init+0x84>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4a80      	ldr	r2, [pc, #512]	; (8004704 <HAL_I2C_Init+0x278>)
 8004504:	4293      	cmp	r3, r2
 8004506:	bf94      	ite	ls
 8004508:	2301      	movls	r3, #1
 800450a:	2300      	movhi	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	e006      	b.n	800451e <HAL_I2C_Init+0x92>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4a7d      	ldr	r2, [pc, #500]	; (8004708 <HAL_I2C_Init+0x27c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	bf94      	ite	ls
 8004518:	2301      	movls	r3, #1
 800451a:	2300      	movhi	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e0e7      	b.n	80046f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4a78      	ldr	r2, [pc, #480]	; (800470c <HAL_I2C_Init+0x280>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0c9b      	lsrs	r3, r3, #18
 8004530:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4a6a      	ldr	r2, [pc, #424]	; (8004700 <HAL_I2C_Init+0x274>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d802      	bhi.n	8004560 <HAL_I2C_Init+0xd4>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	3301      	adds	r3, #1
 800455e:	e009      	b.n	8004574 <HAL_I2C_Init+0xe8>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004566:	fb02 f303 	mul.w	r3, r2, r3
 800456a:	4a69      	ldr	r2, [pc, #420]	; (8004710 <HAL_I2C_Init+0x284>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	099b      	lsrs	r3, r3, #6
 8004572:	3301      	adds	r3, #1
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	430b      	orrs	r3, r1
 800457a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004586:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	495c      	ldr	r1, [pc, #368]	; (8004700 <HAL_I2C_Init+0x274>)
 8004590:	428b      	cmp	r3, r1
 8004592:	d819      	bhi.n	80045c8 <HAL_I2C_Init+0x13c>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	1e59      	subs	r1, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	fbb1 f3f3 	udiv	r3, r1, r3
 80045a2:	1c59      	adds	r1, r3, #1
 80045a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045a8:	400b      	ands	r3, r1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_I2C_Init+0x138>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1e59      	subs	r1, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80045bc:	3301      	adds	r3, #1
 80045be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c2:	e051      	b.n	8004668 <HAL_I2C_Init+0x1dc>
 80045c4:	2304      	movs	r3, #4
 80045c6:	e04f      	b.n	8004668 <HAL_I2C_Init+0x1dc>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d111      	bne.n	80045f4 <HAL_I2C_Init+0x168>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	1e58      	subs	r0, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6859      	ldr	r1, [r3, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	440b      	add	r3, r1
 80045de:	fbb0 f3f3 	udiv	r3, r0, r3
 80045e2:	3301      	adds	r3, #1
 80045e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	e012      	b.n	800461a <HAL_I2C_Init+0x18e>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1e58      	subs	r0, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6859      	ldr	r1, [r3, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	0099      	lsls	r1, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	fbb0 f3f3 	udiv	r3, r0, r3
 800460a:	3301      	adds	r3, #1
 800460c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf0c      	ite	eq
 8004614:	2301      	moveq	r3, #1
 8004616:	2300      	movne	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_I2C_Init+0x196>
 800461e:	2301      	movs	r3, #1
 8004620:	e022      	b.n	8004668 <HAL_I2C_Init+0x1dc>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10e      	bne.n	8004648 <HAL_I2C_Init+0x1bc>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1e58      	subs	r0, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6859      	ldr	r1, [r3, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	440b      	add	r3, r1
 8004638:	fbb0 f3f3 	udiv	r3, r0, r3
 800463c:	3301      	adds	r3, #1
 800463e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004646:	e00f      	b.n	8004668 <HAL_I2C_Init+0x1dc>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1e58      	subs	r0, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	0099      	lsls	r1, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	fbb0 f3f3 	udiv	r3, r0, r3
 800465e:	3301      	adds	r3, #1
 8004660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	6809      	ldr	r1, [r1, #0]
 800466c:	4313      	orrs	r3, r2
 800466e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69da      	ldr	r2, [r3, #28]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004696:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6911      	ldr	r1, [r2, #16]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68d2      	ldr	r2, [r2, #12]
 80046a2:	4311      	orrs	r1, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	430b      	orrs	r3, r1
 80046aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	000186a0 	.word	0x000186a0
 8004704:	001e847f 	.word	0x001e847f
 8004708:	003d08ff 	.word	0x003d08ff
 800470c:	431bde83 	.word	0x431bde83
 8004710:	10624dd3 	.word	0x10624dd3

08004714 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004734:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	2b10      	cmp	r3, #16
 8004742:	d003      	beq.n	800474c <HAL_I2C_EV_IRQHandler+0x38>
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b40      	cmp	r3, #64	; 0x40
 8004748:	f040 80bd 	bne.w	80048c6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10d      	bne.n	8004782 <HAL_I2C_EV_IRQHandler+0x6e>
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800476c:	d003      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0x62>
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004774:	d101      	bne.n	800477a <HAL_I2C_EV_IRQHandler+0x66>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <HAL_I2C_EV_IRQHandler+0x68>
 800477a:	2300      	movs	r3, #0
 800477c:	2b01      	cmp	r3, #1
 800477e:	f000 812e 	beq.w	80049de <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00c      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x92>
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	0a5b      	lsrs	r3, r3, #9
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d006      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 fc55 	bl	8006048 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fd62 	bl	8005268 <I2C_Master_SB>
 80047a4:	e08e      	b.n	80048c4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	08db      	lsrs	r3, r3, #3
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <HAL_I2C_EV_IRQHandler+0xb2>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	0a5b      	lsrs	r3, r3, #9
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fdd8 	bl	8005374 <I2C_Master_ADD10>
 80047c4:	e07e      	b.n	80048c4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <HAL_I2C_EV_IRQHandler+0xd2>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	0a5b      	lsrs	r3, r3, #9
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fdf2 	bl	80053c8 <I2C_Master_ADDR>
 80047e4:	e06e      	b.n	80048c4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d037      	beq.n	8004862 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004800:	f000 80ef 	beq.w	80049e2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	09db      	lsrs	r3, r3, #7
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00f      	beq.n	8004830 <HAL_I2C_EV_IRQHandler+0x11c>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	0a9b      	lsrs	r3, r3, #10
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d009      	beq.n	8004830 <HAL_I2C_EV_IRQHandler+0x11c>
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d103      	bne.n	8004830 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f9ef 	bl	8004c0c <I2C_MasterTransmit_TXE>
 800482e:	e049      	b.n	80048c4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80d2 	beq.w	80049e2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	0a5b      	lsrs	r3, r3, #9
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80cb 	beq.w	80049e2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b10      	cmp	r3, #16
 8004850:	d103      	bne.n	800485a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fa76 	bl	8004d44 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004858:	e0c3      	b.n	80049e2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fada 	bl	8004e14 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004860:	e0bf      	b.n	80049e2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800486c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004870:	f000 80b7 	beq.w	80049e2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00f      	beq.n	80048a0 <HAL_I2C_EV_IRQHandler+0x18c>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	0a9b      	lsrs	r3, r3, #10
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d009      	beq.n	80048a0 <HAL_I2C_EV_IRQHandler+0x18c>
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	089b      	lsrs	r3, r3, #2
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d103      	bne.n	80048a0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fb4a 	bl	8004f32 <I2C_MasterReceive_RXNE>
 800489e:	e011      	b.n	80048c4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	089b      	lsrs	r3, r3, #2
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 809a 	beq.w	80049e2 <HAL_I2C_EV_IRQHandler+0x2ce>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	0a5b      	lsrs	r3, r3, #9
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8093 	beq.w	80049e2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fbe9 	bl	8005094 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048c2:	e08e      	b.n	80049e2 <HAL_I2C_EV_IRQHandler+0x2ce>
 80048c4:	e08d      	b.n	80049e2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d004      	beq.n	80048d8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	e007      	b.n	80048e8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d012      	beq.n	800491a <HAL_I2C_EV_IRQHandler+0x206>
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	0a5b      	lsrs	r3, r3, #9
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00c      	beq.n	800491a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004910:	69b9      	ldr	r1, [r7, #24]
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 ffa7 	bl	8005866 <I2C_Slave_ADDR>
 8004918:	e066      	b.n	80049e8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_I2C_EV_IRQHandler+0x226>
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	0a5b      	lsrs	r3, r3, #9
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 ffdc 	bl	80058f0 <I2C_Slave_STOPF>
 8004938:	e056      	b.n	80049e8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800493a:	7bbb      	ldrb	r3, [r7, #14]
 800493c:	2b21      	cmp	r3, #33	; 0x21
 800493e:	d002      	beq.n	8004946 <HAL_I2C_EV_IRQHandler+0x232>
 8004940:	7bbb      	ldrb	r3, [r7, #14]
 8004942:	2b29      	cmp	r3, #41	; 0x29
 8004944:	d125      	bne.n	8004992 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	09db      	lsrs	r3, r3, #7
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00f      	beq.n	8004972 <HAL_I2C_EV_IRQHandler+0x25e>
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	0a9b      	lsrs	r3, r3, #10
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <HAL_I2C_EV_IRQHandler+0x25e>
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	089b      	lsrs	r3, r3, #2
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d103      	bne.n	8004972 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 febd 	bl	80056ea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004970:	e039      	b.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	089b      	lsrs	r3, r3, #2
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d033      	beq.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2d2>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	0a5b      	lsrs	r3, r3, #9
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d02d      	beq.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 feea 	bl	8005764 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004990:	e029      	b.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	099b      	lsrs	r3, r3, #6
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00f      	beq.n	80049be <HAL_I2C_EV_IRQHandler+0x2aa>
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	0a9b      	lsrs	r3, r3, #10
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d009      	beq.n	80049be <HAL_I2C_EV_IRQHandler+0x2aa>
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	089b      	lsrs	r3, r3, #2
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d103      	bne.n	80049be <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fef5 	bl	80057a6 <I2C_SlaveReceive_RXNE>
 80049bc:	e014      	b.n	80049e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	089b      	lsrs	r3, r3, #2
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00e      	beq.n	80049e8 <HAL_I2C_EV_IRQHandler+0x2d4>
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	0a5b      	lsrs	r3, r3, #9
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 ff23 	bl	8005822 <I2C_SlaveReceive_BTF>
 80049dc:	e004      	b.n	80049e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80049de:	bf00      	nop
 80049e0:	e002      	b.n	80049e8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049e2:	bf00      	nop
 80049e4:	e000      	b.n	80049e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b08a      	sub	sp, #40	; 0x28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004a06:	2300      	movs	r3, #0
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a10:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00e      	beq.n	8004a3c <HAL_I2C_ER_IRQHandler+0x4e>
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	0a1b      	lsrs	r3, r3, #8
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a3a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	0a5b      	lsrs	r3, r3, #9
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00e      	beq.n	8004a66 <HAL_I2C_ER_IRQHandler+0x78>
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	0a1b      	lsrs	r3, r3, #8
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	f043 0302 	orr.w	r3, r3, #2
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a64:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	0a9b      	lsrs	r3, r3, #10
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d03f      	beq.n	8004af2 <HAL_I2C_ER_IRQHandler+0x104>
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d039      	beq.n	8004af2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004a7e:	7efb      	ldrb	r3, [r7, #27]
 8004a80:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a90:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a98:	7ebb      	ldrb	r3, [r7, #26]
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d112      	bne.n	8004ac4 <HAL_I2C_ER_IRQHandler+0xd6>
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10f      	bne.n	8004ac4 <HAL_I2C_ER_IRQHandler+0xd6>
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	2b21      	cmp	r3, #33	; 0x21
 8004aa8:	d008      	beq.n	8004abc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	2b29      	cmp	r3, #41	; 0x29
 8004aae:	d005      	beq.n	8004abc <HAL_I2C_ER_IRQHandler+0xce>
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	2b28      	cmp	r3, #40	; 0x28
 8004ab4:	d106      	bne.n	8004ac4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b21      	cmp	r3, #33	; 0x21
 8004aba:	d103      	bne.n	8004ac4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f001 f847 	bl	8005b50 <I2C_Slave_AF>
 8004ac2:	e016      	b.n	8004af2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004acc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	f043 0304 	orr.w	r3, r3, #4
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004ad6:	7efb      	ldrb	r3, [r7, #27]
 8004ad8:	2b10      	cmp	r3, #16
 8004ada:	d002      	beq.n	8004ae2 <HAL_I2C_ER_IRQHandler+0xf4>
 8004adc:	7efb      	ldrb	r3, [r7, #27]
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	d107      	bne.n	8004af2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	0adb      	lsrs	r3, r3, #11
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00e      	beq.n	8004b1c <HAL_I2C_ER_IRQHandler+0x12e>
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	0a1b      	lsrs	r3, r3, #8
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	f043 0308 	orr.w	r3, r3, #8
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004b1a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d008      	beq.n	8004b34 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f001 f87e 	bl	8005c30 <I2C_ITError>
  }
}
 8004b34:	bf00      	nop
 8004b36:	3728      	adds	r7, #40	; 0x28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d150      	bne.n	8004cd4 <I2C_MasterTransmit_TXE+0xc8>
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	2b21      	cmp	r3, #33	; 0x21
 8004c36:	d14d      	bne.n	8004cd4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d01d      	beq.n	8004c7a <I2C_MasterTransmit_TXE+0x6e>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d01a      	beq.n	8004c7a <I2C_MasterTransmit_TXE+0x6e>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c4a:	d016      	beq.n	8004c7a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c5a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2211      	movs	r2, #17
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff ff62 	bl	8004b3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c78:	e060      	b.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c88:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c98:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d107      	bne.n	8004cc4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff ff7d 	bl	8004bbc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cc2:	e03b      	b.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff35 	bl	8004b3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cd2:	e033      	b.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	2b21      	cmp	r3, #33	; 0x21
 8004cd8:	d005      	beq.n	8004ce6 <I2C_MasterTransmit_TXE+0xda>
 8004cda:	7bbb      	ldrb	r3, [r7, #14]
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	d12d      	bne.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	2b22      	cmp	r3, #34	; 0x22
 8004ce4:	d12a      	bne.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d108      	bne.n	8004d02 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d00:	e01c      	b.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b40      	cmp	r3, #64	; 0x40
 8004d0c:	d103      	bne.n	8004d16 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f880 	bl	8004e14 <I2C_MemoryTransmit_TXE_BTF>
}
 8004d14:	e012      	b.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	781a      	ldrb	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d3a:	e7ff      	b.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b21      	cmp	r3, #33	; 0x21
 8004d5c:	d156      	bne.n	8004e0c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d012      	beq.n	8004d8e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	781a      	ldrb	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d8c:	e03e      	b.n	8004e0c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d01d      	beq.n	8004dd0 <I2C_MasterTransmit_BTF+0x8c>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d01a      	beq.n	8004dd0 <I2C_MasterTransmit_BTF+0x8c>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004da0:	d016      	beq.n	8004dd0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004db0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2211      	movs	r2, #17
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff feb7 	bl	8004b3c <HAL_I2C_MasterTxCpltCallback>
}
 8004dce:	e01d      	b.n	8004e0c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dde:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff fe98 	bl	8004b3c <HAL_I2C_MasterTxCpltCallback>
}
 8004e0c:	bf00      	nop
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e22:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d11d      	bne.n	8004e68 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d10b      	bne.n	8004e4c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e44:	1c9a      	adds	r2, r3, #2
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e4a:	e06e      	b.n	8004f2a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	121b      	asrs	r3, r3, #8
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e66:	e060      	b.n	8004f2a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d10b      	bne.n	8004e88 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e86:	e050      	b.n	8004f2a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d14c      	bne.n	8004f2a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b22      	cmp	r3, #34	; 0x22
 8004e94:	d108      	bne.n	8004ea8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea4:	601a      	str	r2, [r3, #0]
}
 8004ea6:	e040      	b.n	8004f2a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d015      	beq.n	8004ede <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	2b21      	cmp	r3, #33	; 0x21
 8004eb6:	d112      	bne.n	8004ede <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004edc:	e025      	b.n	8004f2a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d120      	bne.n	8004f2a <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2b21      	cmp	r3, #33	; 0x21
 8004eec:	d11d      	bne.n	8004f2a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004efc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff fe49 	bl	8004bbc <HAL_I2C_MemTxCpltCallback>
}
 8004f2a:	bf00      	nop
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b22      	cmp	r3, #34	; 0x22
 8004f44:	f040 80a2 	bne.w	800508c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d921      	bls.n	8004f9a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	f040 8082 	bne.w	800508c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f96:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004f98:	e078      	b.n	800508c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d074      	beq.n	800508c <I2C_MasterReceive_RXNE+0x15a>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d002      	beq.n	8004fae <I2C_MasterReceive_RXNE+0x7c>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d16e      	bne.n	800508c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f001 f818 	bl	8005fe4 <I2C_WaitOnSTOPRequestThroughIT>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d142      	bne.n	8005040 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fd8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b40      	cmp	r3, #64	; 0x40
 8005012:	d10a      	bne.n	800502a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff fdd4 	bl	8004bd0 <HAL_I2C_MemRxCpltCallback>
}
 8005028:	e030      	b.n	800508c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2212      	movs	r2, #18
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff fd89 	bl	8004b50 <HAL_I2C_MasterRxCpltCallback>
}
 800503e:	e025      	b.n	800508c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800504e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691a      	ldr	r2, [r3, #16]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff fdac 	bl	8004be4 <HAL_I2C_ErrorCallback>
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d11b      	bne.n	80050e4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80050e2:	e0bd      	b.n	8005260 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d129      	bne.n	8005142 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d00a      	beq.n	800511a <I2C_MasterReceive_BTF+0x86>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d007      	beq.n	800511a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005118:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005140:	e08e      	b.n	8005260 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d176      	bne.n	800523a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d002      	beq.n	8005158 <I2C_MasterReceive_BTF+0xc4>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b10      	cmp	r3, #16
 8005156:	d108      	bne.n	800516a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e019      	b.n	800519e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b04      	cmp	r3, #4
 800516e:	d002      	beq.n	8005176 <I2C_MasterReceive_BTF+0xe2>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d108      	bne.n	8005188 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e00a      	b.n	800519e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b10      	cmp	r3, #16
 800518c:	d007      	beq.n	800519e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051f8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	d10a      	bne.n	8005224 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fcd7 	bl	8004bd0 <HAL_I2C_MemRxCpltCallback>
}
 8005222:	e01d      	b.n	8005260 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2212      	movs	r2, #18
 8005230:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fc8c 	bl	8004b50 <HAL_I2C_MasterRxCpltCallback>
}
 8005238:	e012      	b.n	8005260 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005260:	bf00      	nop
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d117      	bne.n	80052ac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005280:	2b00      	cmp	r3, #0
 8005282:	d109      	bne.n	8005298 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005288:	b2db      	uxtb	r3, r3
 800528a:	461a      	mov	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005294:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005296:	e067      	b.n	8005368 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	611a      	str	r2, [r3, #16]
}
 80052aa:	e05d      	b.n	8005368 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052b4:	d133      	bne.n	800531e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b21      	cmp	r3, #33	; 0x21
 80052c0:	d109      	bne.n	80052d6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052d2:	611a      	str	r2, [r3, #16]
 80052d4:	e008      	b.n	80052e8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f043 0301 	orr.w	r3, r3, #1
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d004      	beq.n	80052fa <I2C_Master_SB+0x92>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d108      	bne.n	800530c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d032      	beq.n	8005368 <I2C_Master_SB+0x100>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	2b00      	cmp	r3, #0
 800530a:	d02d      	beq.n	8005368 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800531a:	605a      	str	r2, [r3, #4]
}
 800531c:	e024      	b.n	8005368 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10e      	bne.n	8005344 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532a:	b29b      	uxth	r3, r3
 800532c:	11db      	asrs	r3, r3, #7
 800532e:	b2db      	uxtb	r3, r3
 8005330:	f003 0306 	and.w	r3, r3, #6
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f063 030f 	orn	r3, r3, #15
 800533a:	b2da      	uxtb	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	611a      	str	r2, [r3, #16]
}
 8005342:	e011      	b.n	8005368 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005348:	2b01      	cmp	r3, #1
 800534a:	d10d      	bne.n	8005368 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005350:	b29b      	uxth	r3, r3
 8005352:	11db      	asrs	r3, r3, #7
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f003 0306 	and.w	r3, r3, #6
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f063 030e 	orn	r3, r3, #14
 8005360:	b2da      	uxtb	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	611a      	str	r2, [r3, #16]
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005380:	b2da      	uxtb	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <I2C_Master_ADD10+0x26>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d108      	bne.n	80053ac <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00c      	beq.n	80053bc <I2C_Master_ADD10+0x48>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ba:	605a      	str	r2, [r3, #4]
  }
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b091      	sub	sp, #68	; 0x44
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b22      	cmp	r3, #34	; 0x22
 80053f0:	f040 8169 	bne.w	80056c6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10f      	bne.n	800541c <I2C_Master_ADDR+0x54>
 80053fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d10b      	bne.n	800541c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005404:	2300      	movs	r3, #0
 8005406:	633b      	str	r3, [r7, #48]	; 0x30
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	633b      	str	r3, [r7, #48]	; 0x30
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	633b      	str	r3, [r7, #48]	; 0x30
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	e160      	b.n	80056de <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005420:	2b00      	cmp	r3, #0
 8005422:	d11d      	bne.n	8005460 <I2C_Master_ADDR+0x98>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800542c:	d118      	bne.n	8005460 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542e:	2300      	movs	r3, #0
 8005430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005452:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	651a      	str	r2, [r3, #80]	; 0x50
 800545e:	e13e      	b.n	80056de <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d113      	bne.n	8005492 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546a:	2300      	movs	r3, #0
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	e115      	b.n	80056be <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	f040 808a 	bne.w	80055b2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054a4:	d137      	bne.n	8005516 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c4:	d113      	bne.n	80054ee <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d6:	2300      	movs	r3, #0
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	e0e7      	b.n	80056be <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ee:	2300      	movs	r3, #0
 80054f0:	623b      	str	r3, [r7, #32]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	623b      	str	r3, [r7, #32]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	623b      	str	r3, [r7, #32]
 8005502:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e0d3      	b.n	80056be <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005518:	2b08      	cmp	r3, #8
 800551a:	d02e      	beq.n	800557a <I2C_Master_ADDR+0x1b2>
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	2b20      	cmp	r3, #32
 8005520:	d02b      	beq.n	800557a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	2b12      	cmp	r3, #18
 8005526:	d102      	bne.n	800552e <I2C_Master_ADDR+0x166>
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	2b01      	cmp	r3, #1
 800552c:	d125      	bne.n	800557a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	2b04      	cmp	r3, #4
 8005532:	d00e      	beq.n	8005552 <I2C_Master_ADDR+0x18a>
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	2b02      	cmp	r3, #2
 8005538:	d00b      	beq.n	8005552 <I2C_Master_ADDR+0x18a>
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	2b10      	cmp	r3, #16
 800553e:	d008      	beq.n	8005552 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	e007      	b.n	8005562 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005560:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	61fb      	str	r3, [r7, #28]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	61fb      	str	r3, [r7, #28]
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	e0a1      	b.n	80056be <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005588:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800558a:	2300      	movs	r3, #0
 800558c:	61bb      	str	r3, [r7, #24]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	e085      	b.n	80056be <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d14d      	bne.n	8005658 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d016      	beq.n	80055f0 <I2C_Master_ADDR+0x228>
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d013      	beq.n	80055f0 <I2C_Master_ADDR+0x228>
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	2b10      	cmp	r3, #16
 80055cc:	d010      	beq.n	80055f0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055dc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	e007      	b.n	8005600 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055fe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800560a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800560e:	d117      	bne.n	8005640 <I2C_Master_ADDR+0x278>
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005616:	d00b      	beq.n	8005630 <I2C_Master_ADDR+0x268>
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	2b01      	cmp	r3, #1
 800561c:	d008      	beq.n	8005630 <I2C_Master_ADDR+0x268>
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	2b08      	cmp	r3, #8
 8005622:	d005      	beq.n	8005630 <I2C_Master_ADDR+0x268>
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	2b10      	cmp	r3, #16
 8005628:	d002      	beq.n	8005630 <I2C_Master_ADDR+0x268>
 800562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562c:	2b20      	cmp	r3, #32
 800562e:	d107      	bne.n	8005640 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800563e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	e032      	b.n	80056be <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005666:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005676:	d117      	bne.n	80056a8 <I2C_Master_ADDR+0x2e0>
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800567e:	d00b      	beq.n	8005698 <I2C_Master_ADDR+0x2d0>
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	2b01      	cmp	r3, #1
 8005684:	d008      	beq.n	8005698 <I2C_Master_ADDR+0x2d0>
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	2b08      	cmp	r3, #8
 800568a:	d005      	beq.n	8005698 <I2C_Master_ADDR+0x2d0>
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	2b10      	cmp	r3, #16
 8005690:	d002      	beq.n	8005698 <I2C_Master_ADDR+0x2d0>
 8005692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005694:	2b20      	cmp	r3, #32
 8005696:	d107      	bne.n	80056a8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056a6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a8:	2300      	movs	r3, #0
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80056c4:	e00b      	b.n	80056de <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	68fb      	ldr	r3, [r7, #12]
}
 80056dc:	e7ff      	b.n	80056de <I2C_Master_ADDR+0x316>
 80056de:	bf00      	nop
 80056e0:	3744      	adds	r7, #68	; 0x44
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d02b      	beq.n	800575c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d114      	bne.n	800575c <I2C_SlaveTransmit_TXE+0x72>
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	2b29      	cmp	r3, #41	; 0x29
 8005736:	d111      	bne.n	800575c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005746:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2221      	movs	r2, #33	; 0x21
 800574c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2228      	movs	r2, #40	; 0x28
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff fa04 	bl	8004b64 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d011      	beq.n	800579a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	781a      	ldrb	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d02c      	beq.n	800581a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d114      	bne.n	800581a <I2C_SlaveReceive_RXNE+0x74>
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b2a      	cmp	r3, #42	; 0x2a
 80057f4:	d111      	bne.n	800581a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005804:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2222      	movs	r2, #34	; 0x22
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2228      	movs	r2, #40	; 0x28
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff f9af 	bl	8004b78 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d012      	beq.n	800585a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005870:	2300      	movs	r3, #0
 8005872:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005880:	2b28      	cmp	r3, #40	; 0x28
 8005882:	d127      	bne.n	80058d4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005892:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	089b      	lsrs	r3, r3, #2
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	09db      	lsrs	r3, r3, #7
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	81bb      	strh	r3, [r7, #12]
 80058b6:	e002      	b.n	80058be <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80058c6:	89ba      	ldrh	r2, [r7, #12]
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff f95d 	bl	8004b8c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80058d2:	e008      	b.n	80058e6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0202 	mvn.w	r2, #2
 80058dc:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800590e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005910:	2300      	movs	r3, #0
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	60bb      	str	r3, [r7, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594c:	d172      	bne.n	8005a34 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b22      	cmp	r3, #34	; 0x22
 8005952:	d002      	beq.n	800595a <I2C_Slave_STOPF+0x6a>
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b2a      	cmp	r3, #42	; 0x2a
 8005958:	d135      	bne.n	80059c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f043 0204 	orr.w	r2, r3, #4
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800598c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	4618      	mov	r0, r3
 8005994:	f7fe fad6 	bl	8003f44 <HAL_DMA_GetState>
 8005998:	4603      	mov	r3, r0
 800599a:	2b01      	cmp	r3, #1
 800599c:	d049      	beq.n	8005a32 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	4a69      	ldr	r2, [pc, #420]	; (8005b48 <I2C_Slave_STOPF+0x258>)
 80059a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fe f91e 	bl	8003bec <HAL_DMA_Abort_IT>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d03d      	beq.n	8005a32 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059c0:	4610      	mov	r0, r2
 80059c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059c4:	e035      	b.n	8005a32 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0204 	orr.w	r2, r3, #4
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe faa0 	bl	8003f44 <HAL_DMA_GetState>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d014      	beq.n	8005a34 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0e:	4a4e      	ldr	r2, [pc, #312]	; (8005b48 <I2C_Slave_STOPF+0x258>)
 8005a10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe f8e8 	bl	8003bec <HAL_DMA_Abort_IT>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d008      	beq.n	8005a34 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4798      	blx	r3
 8005a30:	e000      	b.n	8005a34 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a32:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d03e      	beq.n	8005abc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d112      	bne.n	8005a72 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b40      	cmp	r3, #64	; 0x40
 8005a7e:	d112      	bne.n	8005aa6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	f043 0204 	orr.w	r2, r3, #4
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f8b3 	bl	8005c30 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005aca:	e039      	b.n	8005b40 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad0:	d109      	bne.n	8005ae6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2228      	movs	r2, #40	; 0x28
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff f849 	bl	8004b78 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b28      	cmp	r3, #40	; 0x28
 8005af0:	d111      	bne.n	8005b16 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a15      	ldr	r2, [pc, #84]	; (8005b4c <I2C_Slave_STOPF+0x25c>)
 8005af6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7ff f84a 	bl	8004ba8 <HAL_I2C_ListenCpltCallback>
}
 8005b14:	e014      	b.n	8005b40 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	2b22      	cmp	r3, #34	; 0x22
 8005b1c:	d002      	beq.n	8005b24 <I2C_Slave_STOPF+0x234>
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	2b22      	cmp	r3, #34	; 0x22
 8005b22:	d10d      	bne.n	8005b40 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff f81c 	bl	8004b78 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b40:	bf00      	nop
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	08005e95 	.word	0x08005e95
 8005b4c:	ffff0000 	.word	0xffff0000

08005b50 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d002      	beq.n	8005b72 <I2C_Slave_AF+0x22>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d129      	bne.n	8005bc6 <I2C_Slave_AF+0x76>
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
 8005b74:	2b28      	cmp	r3, #40	; 0x28
 8005b76:	d126      	bne.n	8005bc6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a2c      	ldr	r2, [pc, #176]	; (8005c2c <I2C_Slave_AF+0xdc>)
 8005b7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b8c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b96:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fe fff2 	bl	8004ba8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005bc4:	e02e      	b.n	8005c24 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b21      	cmp	r3, #33	; 0x21
 8005bca:	d126      	bne.n	8005c1a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <I2C_Slave_AF+0xdc>)
 8005bd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2221      	movs	r2, #33	; 0x21
 8005bd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bf6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c00:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c10:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fe ffa6 	bl	8004b64 <HAL_I2C_SlaveTxCpltCallback>
}
 8005c18:	e004      	b.n	8005c24 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c22:	615a      	str	r2, [r3, #20]
}
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	ffff0000 	.word	0xffff0000

08005c30 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	2b10      	cmp	r3, #16
 8005c4c:	d002      	beq.n	8005c54 <I2C_ITError+0x24>
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d10a      	bne.n	8005c6a <I2C_ITError+0x3a>
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	2b22      	cmp	r3, #34	; 0x22
 8005c58:	d107      	bne.n	8005c6a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c68:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c70:	2b28      	cmp	r3, #40	; 0x28
 8005c72:	d107      	bne.n	8005c84 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2228      	movs	r2, #40	; 0x28
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c82:	e015      	b.n	8005cb0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c92:	d00a      	beq.n	8005caa <I2C_ITError+0x7a>
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b60      	cmp	r3, #96	; 0x60
 8005c98:	d007      	beq.n	8005caa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cbe:	d162      	bne.n	8005d86 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d020      	beq.n	8005d20 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce2:	4a6a      	ldr	r2, [pc, #424]	; (8005e8c <I2C_ITError+0x25c>)
 8005ce4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fd ff7e 	bl	8003bec <HAL_DMA_Abort_IT>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 8089 	beq.w	8005e0a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	4798      	blx	r3
 8005d1e:	e074      	b.n	8005e0a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	4a59      	ldr	r2, [pc, #356]	; (8005e8c <I2C_ITError+0x25c>)
 8005d26:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fd ff5d 	bl	8003bec <HAL_DMA_Abort_IT>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d068      	beq.n	8005e0a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	d10b      	bne.n	8005d5e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0201 	bic.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d80:	4610      	mov	r0, r2
 8005d82:	4798      	blx	r3
 8005d84:	e041      	b.n	8005e0a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b60      	cmp	r3, #96	; 0x60
 8005d90:	d125      	bne.n	8005dde <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	d10b      	bne.n	8005dc6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0201 	bic.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fe ff0e 	bl	8004bf8 <HAL_I2C_AbortCpltCallback>
 8005ddc:	e015      	b.n	8005e0a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b40      	cmp	r3, #64	; 0x40
 8005dea:	d10b      	bne.n	8005e04 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7fe feed 	bl	8004be4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10e      	bne.n	8005e38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d109      	bne.n	8005e38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d104      	bne.n	8005e38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e46:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d113      	bne.n	8005e84 <I2C_ITError+0x254>
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b28      	cmp	r3, #40	; 0x28
 8005e60:	d110      	bne.n	8005e84 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a0a      	ldr	r2, [pc, #40]	; (8005e90 <I2C_ITError+0x260>)
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fe fe92 	bl	8004ba8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	08005e95 	.word	0x08005e95
 8005e90:	ffff0000 	.word	0xffff0000

08005e94 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005eae:	4b4b      	ldr	r3, [pc, #300]	; (8005fdc <I2C_DMAAbort+0x148>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	08db      	lsrs	r3, r3, #3
 8005eb4:	4a4a      	ldr	r2, [pc, #296]	; (8005fe0 <I2C_DMAAbort+0x14c>)
 8005eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eba:	0a1a      	lsrs	r2, r3, #8
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	00da      	lsls	r2, r3, #3
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	f043 0220 	orr.w	r2, r3, #32
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005eda:	e00a      	b.n	8005ef2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef0:	d0ea      	beq.n	8005ec8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efe:	2200      	movs	r2, #0
 8005f00:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	2200      	movs	r2, #0
 8005f10:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f20:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	2200      	movs	r2, #0
 8005f36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	2200      	movs	r2, #0
 8005f46:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0201 	bic.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b60      	cmp	r3, #96	; 0x60
 8005f62:	d10e      	bne.n	8005f82 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2200      	movs	r2, #0
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f7a:	6978      	ldr	r0, [r7, #20]
 8005f7c:	f7fe fe3c 	bl	8004bf8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f80:	e027      	b.n	8005fd2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f82:	7cfb      	ldrb	r3, [r7, #19]
 8005f84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f88:	2b28      	cmp	r3, #40	; 0x28
 8005f8a:	d117      	bne.n	8005fbc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0201 	orr.w	r2, r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005faa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2228      	movs	r2, #40	; 0x28
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fba:	e007      	b.n	8005fcc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005fcc:	6978      	ldr	r0, [r7, #20]
 8005fce:	f7fe fe09 	bl	8004be4 <HAL_I2C_ErrorCallback>
}
 8005fd2:	bf00      	nop
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000014 	.word	0x20000014
 8005fe0:	14f8b589 	.word	0x14f8b589

08005fe4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ff0:	4b13      	ldr	r3, [pc, #76]	; (8006040 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	08db      	lsrs	r3, r3, #3
 8005ff6:	4a13      	ldr	r2, [pc, #76]	; (8006044 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffc:	0a1a      	lsrs	r2, r3, #8
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3b01      	subs	r3, #1
 800600a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d107      	bne.n	8006022 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f043 0220 	orr.w	r2, r3, #32
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e008      	b.n	8006034 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800602c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006030:	d0e9      	beq.n	8006006 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	20000014 	.word	0x20000014
 8006044:	14f8b589 	.word	0x14f8b589

08006048 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006058:	d103      	bne.n	8006062 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006060:	e007      	b.n	8006072 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800606a:	d102      	bne.n	8006072 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2208      	movs	r2, #8
 8006070:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
	...

08006080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e264      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d075      	beq.n	800618a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800609e:	4ba3      	ldr	r3, [pc, #652]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d00c      	beq.n	80060c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060aa:	4ba0      	ldr	r3, [pc, #640]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d112      	bne.n	80060dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060b6:	4b9d      	ldr	r3, [pc, #628]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060c2:	d10b      	bne.n	80060dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060c4:	4b99      	ldr	r3, [pc, #612]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d05b      	beq.n	8006188 <HAL_RCC_OscConfig+0x108>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d157      	bne.n	8006188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e23f      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e4:	d106      	bne.n	80060f4 <HAL_RCC_OscConfig+0x74>
 80060e6:	4b91      	ldr	r3, [pc, #580]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a90      	ldr	r2, [pc, #576]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80060ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	e01d      	b.n	8006130 <HAL_RCC_OscConfig+0xb0>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060fc:	d10c      	bne.n	8006118 <HAL_RCC_OscConfig+0x98>
 80060fe:	4b8b      	ldr	r3, [pc, #556]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a8a      	ldr	r2, [pc, #552]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	4b88      	ldr	r3, [pc, #544]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a87      	ldr	r2, [pc, #540]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	e00b      	b.n	8006130 <HAL_RCC_OscConfig+0xb0>
 8006118:	4b84      	ldr	r3, [pc, #528]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a83      	ldr	r2, [pc, #524]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800611e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	4b81      	ldr	r3, [pc, #516]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a80      	ldr	r2, [pc, #512]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800612a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800612e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d013      	beq.n	8006160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006138:	f7fd fac4 	bl	80036c4 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006140:	f7fd fac0 	bl	80036c4 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b64      	cmp	r3, #100	; 0x64
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e204      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006152:	4b76      	ldr	r3, [pc, #472]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCC_OscConfig+0xc0>
 800615e:	e014      	b.n	800618a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006160:	f7fd fab0 	bl	80036c4 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006168:	f7fd faac 	bl	80036c4 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b64      	cmp	r3, #100	; 0x64
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e1f0      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800617a:	4b6c      	ldr	r3, [pc, #432]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f0      	bne.n	8006168 <HAL_RCC_OscConfig+0xe8>
 8006186:	e000      	b.n	800618a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d063      	beq.n	800625e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006196:	4b65      	ldr	r3, [pc, #404]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 030c 	and.w	r3, r3, #12
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00b      	beq.n	80061ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061a2:	4b62      	ldr	r3, [pc, #392]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d11c      	bne.n	80061e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061ae:	4b5f      	ldr	r3, [pc, #380]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d116      	bne.n	80061e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ba:	4b5c      	ldr	r3, [pc, #368]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_RCC_OscConfig+0x152>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d001      	beq.n	80061d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e1c4      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d2:	4b56      	ldr	r3, [pc, #344]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4952      	ldr	r1, [pc, #328]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061e6:	e03a      	b.n	800625e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d020      	beq.n	8006232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061f0:	4b4f      	ldr	r3, [pc, #316]	; (8006330 <HAL_RCC_OscConfig+0x2b0>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f6:	f7fd fa65 	bl	80036c4 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061fe:	f7fd fa61 	bl	80036c4 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e1a5      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006210:	4b46      	ldr	r3, [pc, #280]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f0      	beq.n	80061fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800621c:	4b43      	ldr	r3, [pc, #268]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	4940      	ldr	r1, [pc, #256]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 800622c:	4313      	orrs	r3, r2
 800622e:	600b      	str	r3, [r1, #0]
 8006230:	e015      	b.n	800625e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006232:	4b3f      	ldr	r3, [pc, #252]	; (8006330 <HAL_RCC_OscConfig+0x2b0>)
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006238:	f7fd fa44 	bl	80036c4 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006240:	f7fd fa40 	bl	80036c4 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e184      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006252:	4b36      	ldr	r3, [pc, #216]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1f0      	bne.n	8006240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d030      	beq.n	80062cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d016      	beq.n	80062a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006272:	4b30      	ldr	r3, [pc, #192]	; (8006334 <HAL_RCC_OscConfig+0x2b4>)
 8006274:	2201      	movs	r2, #1
 8006276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006278:	f7fd fa24 	bl	80036c4 <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006280:	f7fd fa20 	bl	80036c4 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e164      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006292:	4b26      	ldr	r3, [pc, #152]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 8006294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0x200>
 800629e:	e015      	b.n	80062cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062a0:	4b24      	ldr	r3, [pc, #144]	; (8006334 <HAL_RCC_OscConfig+0x2b4>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062a6:	f7fd fa0d 	bl	80036c4 <HAL_GetTick>
 80062aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062ac:	e008      	b.n	80062c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062ae:	f7fd fa09 	bl	80036c4 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e14d      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062c0:	4b1a      	ldr	r3, [pc, #104]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80062c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f0      	bne.n	80062ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80a0 	beq.w	800641a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062da:	2300      	movs	r3, #0
 80062dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062de:	4b13      	ldr	r3, [pc, #76]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10f      	bne.n	800630a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	4b0f      	ldr	r3, [pc, #60]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	4a0e      	ldr	r2, [pc, #56]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80062f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6413      	str	r3, [r2, #64]	; 0x40
 80062fa:	4b0c      	ldr	r3, [pc, #48]	; (800632c <HAL_RCC_OscConfig+0x2ac>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800630a:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <HAL_RCC_OscConfig+0x2b8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d121      	bne.n	800635a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006316:	4b08      	ldr	r3, [pc, #32]	; (8006338 <HAL_RCC_OscConfig+0x2b8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a07      	ldr	r2, [pc, #28]	; (8006338 <HAL_RCC_OscConfig+0x2b8>)
 800631c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006322:	f7fd f9cf 	bl	80036c4 <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006328:	e011      	b.n	800634e <HAL_RCC_OscConfig+0x2ce>
 800632a:	bf00      	nop
 800632c:	40023800 	.word	0x40023800
 8006330:	42470000 	.word	0x42470000
 8006334:	42470e80 	.word	0x42470e80
 8006338:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800633c:	f7fd f9c2 	bl	80036c4 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e106      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800634e:	4b85      	ldr	r3, [pc, #532]	; (8006564 <HAL_RCC_OscConfig+0x4e4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0f0      	beq.n	800633c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d106      	bne.n	8006370 <HAL_RCC_OscConfig+0x2f0>
 8006362:	4b81      	ldr	r3, [pc, #516]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 8006364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006366:	4a80      	ldr	r2, [pc, #512]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 8006368:	f043 0301 	orr.w	r3, r3, #1
 800636c:	6713      	str	r3, [r2, #112]	; 0x70
 800636e:	e01c      	b.n	80063aa <HAL_RCC_OscConfig+0x32a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2b05      	cmp	r3, #5
 8006376:	d10c      	bne.n	8006392 <HAL_RCC_OscConfig+0x312>
 8006378:	4b7b      	ldr	r3, [pc, #492]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 800637a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637c:	4a7a      	ldr	r2, [pc, #488]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 800637e:	f043 0304 	orr.w	r3, r3, #4
 8006382:	6713      	str	r3, [r2, #112]	; 0x70
 8006384:	4b78      	ldr	r3, [pc, #480]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 8006386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006388:	4a77      	ldr	r2, [pc, #476]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 800638a:	f043 0301 	orr.w	r3, r3, #1
 800638e:	6713      	str	r3, [r2, #112]	; 0x70
 8006390:	e00b      	b.n	80063aa <HAL_RCC_OscConfig+0x32a>
 8006392:	4b75      	ldr	r3, [pc, #468]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 8006394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006396:	4a74      	ldr	r2, [pc, #464]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 8006398:	f023 0301 	bic.w	r3, r3, #1
 800639c:	6713      	str	r3, [r2, #112]	; 0x70
 800639e:	4b72      	ldr	r3, [pc, #456]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 80063a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a2:	4a71      	ldr	r2, [pc, #452]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 80063a4:	f023 0304 	bic.w	r3, r3, #4
 80063a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d015      	beq.n	80063de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b2:	f7fd f987 	bl	80036c4 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063b8:	e00a      	b.n	80063d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ba:	f7fd f983 	bl	80036c4 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e0c5      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d0:	4b65      	ldr	r3, [pc, #404]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 80063d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0ee      	beq.n	80063ba <HAL_RCC_OscConfig+0x33a>
 80063dc:	e014      	b.n	8006408 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063de:	f7fd f971 	bl	80036c4 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063e4:	e00a      	b.n	80063fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063e6:	f7fd f96d 	bl	80036c4 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e0af      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063fc:	4b5a      	ldr	r3, [pc, #360]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 80063fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1ee      	bne.n	80063e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d105      	bne.n	800641a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800640e:	4b56      	ldr	r3, [pc, #344]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	4a55      	ldr	r2, [pc, #340]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 8006414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006418:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 809b 	beq.w	800655a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006424:	4b50      	ldr	r3, [pc, #320]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 030c 	and.w	r3, r3, #12
 800642c:	2b08      	cmp	r3, #8
 800642e:	d05c      	beq.n	80064ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d141      	bne.n	80064bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006438:	4b4c      	ldr	r3, [pc, #304]	; (800656c <HAL_RCC_OscConfig+0x4ec>)
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643e:	f7fd f941 	bl	80036c4 <HAL_GetTick>
 8006442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006444:	e008      	b.n	8006458 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006446:	f7fd f93d 	bl	80036c4 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d901      	bls.n	8006458 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e081      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006458:	4b43      	ldr	r3, [pc, #268]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1f0      	bne.n	8006446 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	019b      	lsls	r3, r3, #6
 8006474:	431a      	orrs	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	085b      	lsrs	r3, r3, #1
 800647c:	3b01      	subs	r3, #1
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	061b      	lsls	r3, r3, #24
 8006488:	4937      	ldr	r1, [pc, #220]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 800648a:	4313      	orrs	r3, r2
 800648c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800648e:	4b37      	ldr	r3, [pc, #220]	; (800656c <HAL_RCC_OscConfig+0x4ec>)
 8006490:	2201      	movs	r2, #1
 8006492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fd f916 	bl	80036c4 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800649c:	f7fd f912 	bl	80036c4 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e056      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ae:	4b2e      	ldr	r3, [pc, #184]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f0      	beq.n	800649c <HAL_RCC_OscConfig+0x41c>
 80064ba:	e04e      	b.n	800655a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064bc:	4b2b      	ldr	r3, [pc, #172]	; (800656c <HAL_RCC_OscConfig+0x4ec>)
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c2:	f7fd f8ff 	bl	80036c4 <HAL_GetTick>
 80064c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064c8:	e008      	b.n	80064dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064ca:	f7fd f8fb 	bl	80036c4 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e03f      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064dc:	4b22      	ldr	r3, [pc, #136]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1f0      	bne.n	80064ca <HAL_RCC_OscConfig+0x44a>
 80064e8:	e037      	b.n	800655a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e032      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064f6:	4b1c      	ldr	r3, [pc, #112]	; (8006568 <HAL_RCC_OscConfig+0x4e8>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d028      	beq.n	8006556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800650e:	429a      	cmp	r2, r3
 8006510:	d121      	bne.n	8006556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800651c:	429a      	cmp	r2, r3
 800651e:	d11a      	bne.n	8006556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006526:	4013      	ands	r3, r2
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800652c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800652e:	4293      	cmp	r3, r2
 8006530:	d111      	bne.n	8006556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	3b01      	subs	r3, #1
 8006540:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006542:	429a      	cmp	r2, r3
 8006544:	d107      	bne.n	8006556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006552:	429a      	cmp	r2, r3
 8006554:	d001      	beq.n	800655a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40007000 	.word	0x40007000
 8006568:	40023800 	.word	0x40023800
 800656c:	42470060 	.word	0x42470060

08006570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e0cc      	b.n	800671e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006584:	4b68      	ldr	r3, [pc, #416]	; (8006728 <HAL_RCC_ClockConfig+0x1b8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d90c      	bls.n	80065ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006592:	4b65      	ldr	r3, [pc, #404]	; (8006728 <HAL_RCC_ClockConfig+0x1b8>)
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800659a:	4b63      	ldr	r3, [pc, #396]	; (8006728 <HAL_RCC_ClockConfig+0x1b8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d001      	beq.n	80065ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e0b8      	b.n	800671e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d020      	beq.n	80065fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065c4:	4b59      	ldr	r3, [pc, #356]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	4a58      	ldr	r2, [pc, #352]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 80065ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d005      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065dc:	4b53      	ldr	r3, [pc, #332]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4a52      	ldr	r2, [pc, #328]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 80065e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065e8:	4b50      	ldr	r3, [pc, #320]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	494d      	ldr	r1, [pc, #308]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d044      	beq.n	8006690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d107      	bne.n	800661e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800660e:	4b47      	ldr	r3, [pc, #284]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d119      	bne.n	800664e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e07f      	b.n	800671e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	2b02      	cmp	r3, #2
 8006624:	d003      	beq.n	800662e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800662a:	2b03      	cmp	r3, #3
 800662c:	d107      	bne.n	800663e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800662e:	4b3f      	ldr	r3, [pc, #252]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e06f      	b.n	800671e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800663e:	4b3b      	ldr	r3, [pc, #236]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e067      	b.n	800671e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800664e:	4b37      	ldr	r3, [pc, #220]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f023 0203 	bic.w	r2, r3, #3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	4934      	ldr	r1, [pc, #208]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 800665c:	4313      	orrs	r3, r2
 800665e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006660:	f7fd f830 	bl	80036c4 <HAL_GetTick>
 8006664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006666:	e00a      	b.n	800667e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006668:	f7fd f82c 	bl	80036c4 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	f241 3288 	movw	r2, #5000	; 0x1388
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e04f      	b.n	800671e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800667e:	4b2b      	ldr	r3, [pc, #172]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 020c 	and.w	r2, r3, #12
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	429a      	cmp	r2, r3
 800668e:	d1eb      	bne.n	8006668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006690:	4b25      	ldr	r3, [pc, #148]	; (8006728 <HAL_RCC_ClockConfig+0x1b8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d20c      	bcs.n	80066b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800669e:	4b22      	ldr	r3, [pc, #136]	; (8006728 <HAL_RCC_ClockConfig+0x1b8>)
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066a6:	4b20      	ldr	r3, [pc, #128]	; (8006728 <HAL_RCC_ClockConfig+0x1b8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d001      	beq.n	80066b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e032      	b.n	800671e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d008      	beq.n	80066d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066c4:	4b19      	ldr	r3, [pc, #100]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	4916      	ldr	r1, [pc, #88]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d009      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066e2:	4b12      	ldr	r3, [pc, #72]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	490e      	ldr	r1, [pc, #56]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066f6:	f000 f821 	bl	800673c <HAL_RCC_GetSysClockFreq>
 80066fa:	4602      	mov	r2, r0
 80066fc:	4b0b      	ldr	r3, [pc, #44]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	091b      	lsrs	r3, r3, #4
 8006702:	f003 030f 	and.w	r3, r3, #15
 8006706:	490a      	ldr	r1, [pc, #40]	; (8006730 <HAL_RCC_ClockConfig+0x1c0>)
 8006708:	5ccb      	ldrb	r3, [r1, r3]
 800670a:	fa22 f303 	lsr.w	r3, r2, r3
 800670e:	4a09      	ldr	r2, [pc, #36]	; (8006734 <HAL_RCC_ClockConfig+0x1c4>)
 8006710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006712:	4b09      	ldr	r3, [pc, #36]	; (8006738 <HAL_RCC_ClockConfig+0x1c8>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4618      	mov	r0, r3
 8006718:	f7fc ff90 	bl	800363c <HAL_InitTick>

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	40023c00 	.word	0x40023c00
 800672c:	40023800 	.word	0x40023800
 8006730:	08008e18 	.word	0x08008e18
 8006734:	20000014 	.word	0x20000014
 8006738:	20000018 	.word	0x20000018

0800673c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800673c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006740:	b084      	sub	sp, #16
 8006742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	607b      	str	r3, [r7, #4]
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	2300      	movs	r3, #0
 800674e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006754:	4b67      	ldr	r3, [pc, #412]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 030c 	and.w	r3, r3, #12
 800675c:	2b08      	cmp	r3, #8
 800675e:	d00d      	beq.n	800677c <HAL_RCC_GetSysClockFreq+0x40>
 8006760:	2b08      	cmp	r3, #8
 8006762:	f200 80bd 	bhi.w	80068e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <HAL_RCC_GetSysClockFreq+0x34>
 800676a:	2b04      	cmp	r3, #4
 800676c:	d003      	beq.n	8006776 <HAL_RCC_GetSysClockFreq+0x3a>
 800676e:	e0b7      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006770:	4b61      	ldr	r3, [pc, #388]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006772:	60bb      	str	r3, [r7, #8]
       break;
 8006774:	e0b7      	b.n	80068e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006776:	4b61      	ldr	r3, [pc, #388]	; (80068fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006778:	60bb      	str	r3, [r7, #8]
      break;
 800677a:	e0b4      	b.n	80068e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800677c:	4b5d      	ldr	r3, [pc, #372]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006784:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006786:	4b5b      	ldr	r3, [pc, #364]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d04d      	beq.n	800682e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006792:	4b58      	ldr	r3, [pc, #352]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	099b      	lsrs	r3, r3, #6
 8006798:	461a      	mov	r2, r3
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80067a2:	f04f 0100 	mov.w	r1, #0
 80067a6:	ea02 0800 	and.w	r8, r2, r0
 80067aa:	ea03 0901 	and.w	r9, r3, r1
 80067ae:	4640      	mov	r0, r8
 80067b0:	4649      	mov	r1, r9
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	f04f 0300 	mov.w	r3, #0
 80067ba:	014b      	lsls	r3, r1, #5
 80067bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80067c0:	0142      	lsls	r2, r0, #5
 80067c2:	4610      	mov	r0, r2
 80067c4:	4619      	mov	r1, r3
 80067c6:	ebb0 0008 	subs.w	r0, r0, r8
 80067ca:	eb61 0109 	sbc.w	r1, r1, r9
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	f04f 0300 	mov.w	r3, #0
 80067d6:	018b      	lsls	r3, r1, #6
 80067d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80067dc:	0182      	lsls	r2, r0, #6
 80067de:	1a12      	subs	r2, r2, r0
 80067e0:	eb63 0301 	sbc.w	r3, r3, r1
 80067e4:	f04f 0000 	mov.w	r0, #0
 80067e8:	f04f 0100 	mov.w	r1, #0
 80067ec:	00d9      	lsls	r1, r3, #3
 80067ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067f2:	00d0      	lsls	r0, r2, #3
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	eb12 0208 	adds.w	r2, r2, r8
 80067fc:	eb43 0309 	adc.w	r3, r3, r9
 8006800:	f04f 0000 	mov.w	r0, #0
 8006804:	f04f 0100 	mov.w	r1, #0
 8006808:	0259      	lsls	r1, r3, #9
 800680a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800680e:	0250      	lsls	r0, r2, #9
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4610      	mov	r0, r2
 8006816:	4619      	mov	r1, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	461a      	mov	r2, r3
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	f7fa fac4 	bl	8000dac <__aeabi_uldivmod>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4613      	mov	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	e04a      	b.n	80068c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800682e:	4b31      	ldr	r3, [pc, #196]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	099b      	lsrs	r3, r3, #6
 8006834:	461a      	mov	r2, r3
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800683e:	f04f 0100 	mov.w	r1, #0
 8006842:	ea02 0400 	and.w	r4, r2, r0
 8006846:	ea03 0501 	and.w	r5, r3, r1
 800684a:	4620      	mov	r0, r4
 800684c:	4629      	mov	r1, r5
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	f04f 0300 	mov.w	r3, #0
 8006856:	014b      	lsls	r3, r1, #5
 8006858:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800685c:	0142      	lsls	r2, r0, #5
 800685e:	4610      	mov	r0, r2
 8006860:	4619      	mov	r1, r3
 8006862:	1b00      	subs	r0, r0, r4
 8006864:	eb61 0105 	sbc.w	r1, r1, r5
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	018b      	lsls	r3, r1, #6
 8006872:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006876:	0182      	lsls	r2, r0, #6
 8006878:	1a12      	subs	r2, r2, r0
 800687a:	eb63 0301 	sbc.w	r3, r3, r1
 800687e:	f04f 0000 	mov.w	r0, #0
 8006882:	f04f 0100 	mov.w	r1, #0
 8006886:	00d9      	lsls	r1, r3, #3
 8006888:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800688c:	00d0      	lsls	r0, r2, #3
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	1912      	adds	r2, r2, r4
 8006894:	eb45 0303 	adc.w	r3, r5, r3
 8006898:	f04f 0000 	mov.w	r0, #0
 800689c:	f04f 0100 	mov.w	r1, #0
 80068a0:	0299      	lsls	r1, r3, #10
 80068a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80068a6:	0290      	lsls	r0, r2, #10
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4610      	mov	r0, r2
 80068ae:	4619      	mov	r1, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	461a      	mov	r2, r3
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	f7fa fa78 	bl	8000dac <__aeabi_uldivmod>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4613      	mov	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068c4:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	0c1b      	lsrs	r3, r3, #16
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	3301      	adds	r3, #1
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068dc:	60bb      	str	r3, [r7, #8]
      break;
 80068de:	e002      	b.n	80068e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068e0:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80068e2:	60bb      	str	r3, [r7, #8]
      break;
 80068e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068e6:	68bb      	ldr	r3, [r7, #8]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80068f2:	bf00      	nop
 80068f4:	40023800 	.word	0x40023800
 80068f8:	00f42400 	.word	0x00f42400
 80068fc:	007a1200 	.word	0x007a1200

08006900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006904:	4b03      	ldr	r3, [pc, #12]	; (8006914 <HAL_RCC_GetHCLKFreq+0x14>)
 8006906:	681b      	ldr	r3, [r3, #0]
}
 8006908:	4618      	mov	r0, r3
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	20000014 	.word	0x20000014

08006918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800691c:	f7ff fff0 	bl	8006900 <HAL_RCC_GetHCLKFreq>
 8006920:	4602      	mov	r2, r0
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	0a9b      	lsrs	r3, r3, #10
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	4903      	ldr	r1, [pc, #12]	; (800693c <HAL_RCC_GetPCLK1Freq+0x24>)
 800692e:	5ccb      	ldrb	r3, [r1, r3]
 8006930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006934:	4618      	mov	r0, r3
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40023800 	.word	0x40023800
 800693c:	08008e28 	.word	0x08008e28

08006940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006944:	f7ff ffdc 	bl	8006900 <HAL_RCC_GetHCLKFreq>
 8006948:	4602      	mov	r2, r0
 800694a:	4b05      	ldr	r3, [pc, #20]	; (8006960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	0b5b      	lsrs	r3, r3, #13
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	4903      	ldr	r1, [pc, #12]	; (8006964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006956:	5ccb      	ldrb	r3, [r1, r3]
 8006958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800695c:	4618      	mov	r0, r3
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40023800 	.word	0x40023800
 8006964:	08008e28 	.word	0x08008e28

08006968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e041      	b.n	80069fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fc fc2a 	bl	80031e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4619      	mov	r1, r3
 80069a6:	4610      	mov	r0, r2
 80069a8:	f000 fdda 	bl	8007560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
	...

08006a08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d001      	beq.n	8006a20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e03c      	b.n	8006a9a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1e      	ldr	r2, [pc, #120]	; (8006aa8 <HAL_TIM_Base_Start+0xa0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d018      	beq.n	8006a64 <HAL_TIM_Base_Start+0x5c>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3a:	d013      	beq.n	8006a64 <HAL_TIM_Base_Start+0x5c>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a1a      	ldr	r2, [pc, #104]	; (8006aac <HAL_TIM_Base_Start+0xa4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00e      	beq.n	8006a64 <HAL_TIM_Base_Start+0x5c>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a19      	ldr	r2, [pc, #100]	; (8006ab0 <HAL_TIM_Base_Start+0xa8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d009      	beq.n	8006a64 <HAL_TIM_Base_Start+0x5c>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a17      	ldr	r2, [pc, #92]	; (8006ab4 <HAL_TIM_Base_Start+0xac>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d004      	beq.n	8006a64 <HAL_TIM_Base_Start+0x5c>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a16      	ldr	r2, [pc, #88]	; (8006ab8 <HAL_TIM_Base_Start+0xb0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d111      	bne.n	8006a88 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b06      	cmp	r3, #6
 8006a74:	d010      	beq.n	8006a98 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0201 	orr.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a86:	e007      	b.n	8006a98 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40000400 	.word	0x40000400
 8006ab0:	40000800 	.word	0x40000800
 8006ab4:	40000c00 	.word	0x40000c00
 8006ab8:	40014000 	.word	0x40014000

08006abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d001      	beq.n	8006ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e044      	b.n	8006b5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1e      	ldr	r2, [pc, #120]	; (8006b6c <HAL_TIM_Base_Start_IT+0xb0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d018      	beq.n	8006b28 <HAL_TIM_Base_Start_IT+0x6c>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006afe:	d013      	beq.n	8006b28 <HAL_TIM_Base_Start_IT+0x6c>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1a      	ldr	r2, [pc, #104]	; (8006b70 <HAL_TIM_Base_Start_IT+0xb4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00e      	beq.n	8006b28 <HAL_TIM_Base_Start_IT+0x6c>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a19      	ldr	r2, [pc, #100]	; (8006b74 <HAL_TIM_Base_Start_IT+0xb8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d009      	beq.n	8006b28 <HAL_TIM_Base_Start_IT+0x6c>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a17      	ldr	r2, [pc, #92]	; (8006b78 <HAL_TIM_Base_Start_IT+0xbc>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d004      	beq.n	8006b28 <HAL_TIM_Base_Start_IT+0x6c>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a16      	ldr	r2, [pc, #88]	; (8006b7c <HAL_TIM_Base_Start_IT+0xc0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d111      	bne.n	8006b4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b06      	cmp	r3, #6
 8006b38:	d010      	beq.n	8006b5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f042 0201 	orr.w	r2, r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4a:	e007      	b.n	8006b5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0201 	orr.w	r2, r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40010000 	.word	0x40010000
 8006b70:	40000400 	.word	0x40000400
 8006b74:	40000800 	.word	0x40000800
 8006b78:	40000c00 	.word	0x40000c00
 8006b7c:	40014000 	.word	0x40014000

08006b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e041      	b.n	8006c16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f839 	bl	8006c1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	f000 fcce 	bl	8007560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
	...

08006c34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d109      	bne.n	8006c58 <HAL_TIM_PWM_Start+0x24>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	bf14      	ite	ne
 8006c50:	2301      	movne	r3, #1
 8006c52:	2300      	moveq	r3, #0
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	e022      	b.n	8006c9e <HAL_TIM_PWM_Start+0x6a>
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d109      	bne.n	8006c72 <HAL_TIM_PWM_Start+0x3e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	bf14      	ite	ne
 8006c6a:	2301      	movne	r3, #1
 8006c6c:	2300      	moveq	r3, #0
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	e015      	b.n	8006c9e <HAL_TIM_PWM_Start+0x6a>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d109      	bne.n	8006c8c <HAL_TIM_PWM_Start+0x58>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	bf14      	ite	ne
 8006c84:	2301      	movne	r3, #1
 8006c86:	2300      	moveq	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	e008      	b.n	8006c9e <HAL_TIM_PWM_Start+0x6a>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	bf14      	ite	ne
 8006c98:	2301      	movne	r3, #1
 8006c9a:	2300      	moveq	r3, #0
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e068      	b.n	8006d78 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d104      	bne.n	8006cb6 <HAL_TIM_PWM_Start+0x82>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cb4:	e013      	b.n	8006cde <HAL_TIM_PWM_Start+0xaa>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d104      	bne.n	8006cc6 <HAL_TIM_PWM_Start+0x92>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cc4:	e00b      	b.n	8006cde <HAL_TIM_PWM_Start+0xaa>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d104      	bne.n	8006cd6 <HAL_TIM_PWM_Start+0xa2>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cd4:	e003      	b.n	8006cde <HAL_TIM_PWM_Start+0xaa>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fee0 	bl	8007aac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a23      	ldr	r2, [pc, #140]	; (8006d80 <HAL_TIM_PWM_Start+0x14c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d107      	bne.n	8006d06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a1d      	ldr	r2, [pc, #116]	; (8006d80 <HAL_TIM_PWM_Start+0x14c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d018      	beq.n	8006d42 <HAL_TIM_PWM_Start+0x10e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d18:	d013      	beq.n	8006d42 <HAL_TIM_PWM_Start+0x10e>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a19      	ldr	r2, [pc, #100]	; (8006d84 <HAL_TIM_PWM_Start+0x150>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00e      	beq.n	8006d42 <HAL_TIM_PWM_Start+0x10e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a17      	ldr	r2, [pc, #92]	; (8006d88 <HAL_TIM_PWM_Start+0x154>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d009      	beq.n	8006d42 <HAL_TIM_PWM_Start+0x10e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a16      	ldr	r2, [pc, #88]	; (8006d8c <HAL_TIM_PWM_Start+0x158>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d004      	beq.n	8006d42 <HAL_TIM_PWM_Start+0x10e>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a14      	ldr	r2, [pc, #80]	; (8006d90 <HAL_TIM_PWM_Start+0x15c>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d111      	bne.n	8006d66 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b06      	cmp	r3, #6
 8006d52:	d010      	beq.n	8006d76 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0201 	orr.w	r2, r2, #1
 8006d62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d64:	e007      	b.n	8006d76 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f042 0201 	orr.w	r2, r2, #1
 8006d74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40000400 	.word	0x40000400
 8006d88:	40000800 	.word	0x40000800
 8006d8c:	40000c00 	.word	0x40000c00
 8006d90:	40014000 	.word	0x40014000

08006d94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e097      	b.n	8006ed8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d106      	bne.n	8006dc2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7fc f9cb 	bl	8003158 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6812      	ldr	r2, [r2, #0]
 8006dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dd8:	f023 0307 	bic.w	r3, r3, #7
 8006ddc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4619      	mov	r1, r3
 8006de8:	4610      	mov	r0, r2
 8006dea:	f000 fbb9 	bl	8007560 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e16:	f023 0303 	bic.w	r3, r3, #3
 8006e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	4313      	orrs	r3, r2
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e34:	f023 030c 	bic.w	r3, r3, #12
 8006e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	021b      	lsls	r3, r3, #8
 8006e50:	4313      	orrs	r3, r2
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	011a      	lsls	r2, r3, #4
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	031b      	lsls	r3, r3, #12
 8006e64:	4313      	orrs	r3, r2
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e72:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	4313      	orrs	r3, r2
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ef0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ef8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f00:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f08:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d110      	bne.n	8006f32 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d102      	bne.n	8006f1c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f16:	7b7b      	ldrb	r3, [r7, #13]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d001      	beq.n	8006f20 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e069      	b.n	8006ff4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f30:	e031      	b.n	8006f96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d110      	bne.n	8006f5a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d102      	bne.n	8006f44 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f3e:	7b3b      	ldrb	r3, [r7, #12]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d001      	beq.n	8006f48 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e055      	b.n	8006ff4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f58:	e01d      	b.n	8006f96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d108      	bne.n	8006f72 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d105      	bne.n	8006f72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f66:	7b7b      	ldrb	r3, [r7, #13]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d102      	bne.n	8006f72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f6c:	7b3b      	ldrb	r3, [r7, #12]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d001      	beq.n	8006f76 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e03e      	b.n	8006ff4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2202      	movs	r2, #2
 8006f82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2202      	movs	r2, #2
 8006f92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_TIM_Encoder_Start+0xc4>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d008      	beq.n	8006fb4 <HAL_TIM_Encoder_Start+0xd4>
 8006fa2:	e00f      	b.n	8006fc4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	2100      	movs	r1, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fd7d 	bl	8007aac <TIM_CCxChannelCmd>
      break;
 8006fb2:	e016      	b.n	8006fe2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	2104      	movs	r1, #4
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fd75 	bl	8007aac <TIM_CCxChannelCmd>
      break;
 8006fc2:	e00e      	b.n	8006fe2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fd6d 	bl	8007aac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	2104      	movs	r1, #4
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fd66 	bl	8007aac <TIM_CCxChannelCmd>
      break;
 8006fe0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 0201 	orr.w	r2, r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b02      	cmp	r3, #2
 8007010:	d122      	bne.n	8007058 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b02      	cmp	r3, #2
 800701e:	d11b      	bne.n	8007058 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0202 	mvn.w	r2, #2
 8007028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa70 	bl	8007524 <HAL_TIM_IC_CaptureCallback>
 8007044:	e005      	b.n	8007052 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa62 	bl	8007510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fa73 	bl	8007538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b04      	cmp	r3, #4
 8007064:	d122      	bne.n	80070ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0304 	and.w	r3, r3, #4
 8007070:	2b04      	cmp	r3, #4
 8007072:	d11b      	bne.n	80070ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0204 	mvn.w	r2, #4
 800707c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fa46 	bl	8007524 <HAL_TIM_IC_CaptureCallback>
 8007098:	e005      	b.n	80070a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fa38 	bl	8007510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fa49 	bl	8007538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f003 0308 	and.w	r3, r3, #8
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	d122      	bne.n	8007100 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d11b      	bne.n	8007100 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0208 	mvn.w	r2, #8
 80070d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2204      	movs	r2, #4
 80070d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa1c 	bl	8007524 <HAL_TIM_IC_CaptureCallback>
 80070ec:	e005      	b.n	80070fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa0e 	bl	8007510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa1f 	bl	8007538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0310 	and.w	r3, r3, #16
 800710a:	2b10      	cmp	r3, #16
 800710c:	d122      	bne.n	8007154 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f003 0310 	and.w	r3, r3, #16
 8007118:	2b10      	cmp	r3, #16
 800711a:	d11b      	bne.n	8007154 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0210 	mvn.w	r2, #16
 8007124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2208      	movs	r2, #8
 800712a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f9f2 	bl	8007524 <HAL_TIM_IC_CaptureCallback>
 8007140:	e005      	b.n	800714e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f9e4 	bl	8007510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f9f5 	bl	8007538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b01      	cmp	r3, #1
 8007160:	d10e      	bne.n	8007180 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b01      	cmp	r3, #1
 800716e:	d107      	bne.n	8007180 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0201 	mvn.w	r2, #1
 8007178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7fa fc20 	bl	80019c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718a:	2b80      	cmp	r3, #128	; 0x80
 800718c:	d10e      	bne.n	80071ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007198:	2b80      	cmp	r3, #128	; 0x80
 800719a:	d107      	bne.n	80071ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fd1e 	bl	8007be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b6:	2b40      	cmp	r3, #64	; 0x40
 80071b8:	d10e      	bne.n	80071d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b40      	cmp	r3, #64	; 0x40
 80071c6:	d107      	bne.n	80071d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f9ba 	bl	800754c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f003 0320 	and.w	r3, r3, #32
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	d10e      	bne.n	8007204 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f003 0320 	and.w	r3, r3, #32
 80071f0:	2b20      	cmp	r3, #32
 80071f2:	d107      	bne.n	8007204 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f06f 0220 	mvn.w	r2, #32
 80071fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fce8 	bl	8007bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800721e:	2b01      	cmp	r3, #1
 8007220:	d101      	bne.n	8007226 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007222:	2302      	movs	r3, #2
 8007224:	e0ac      	b.n	8007380 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b0c      	cmp	r3, #12
 8007232:	f200 809f 	bhi.w	8007374 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007236:	a201      	add	r2, pc, #4	; (adr r2, 800723c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723c:	08007271 	.word	0x08007271
 8007240:	08007375 	.word	0x08007375
 8007244:	08007375 	.word	0x08007375
 8007248:	08007375 	.word	0x08007375
 800724c:	080072b1 	.word	0x080072b1
 8007250:	08007375 	.word	0x08007375
 8007254:	08007375 	.word	0x08007375
 8007258:	08007375 	.word	0x08007375
 800725c:	080072f3 	.word	0x080072f3
 8007260:	08007375 	.word	0x08007375
 8007264:	08007375 	.word	0x08007375
 8007268:	08007375 	.word	0x08007375
 800726c:	08007333 	.word	0x08007333
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 f9f2 	bl	8007660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699a      	ldr	r2, [r3, #24]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0208 	orr.w	r2, r2, #8
 800728a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0204 	bic.w	r2, r2, #4
 800729a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6999      	ldr	r1, [r3, #24]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	619a      	str	r2, [r3, #24]
      break;
 80072ae:	e062      	b.n	8007376 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fa38 	bl	800772c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6999      	ldr	r1, [r3, #24]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	021a      	lsls	r2, r3, #8
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	619a      	str	r2, [r3, #24]
      break;
 80072f0:	e041      	b.n	8007376 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68b9      	ldr	r1, [r7, #8]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 fa83 	bl	8007804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69da      	ldr	r2, [r3, #28]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f042 0208 	orr.w	r2, r2, #8
 800730c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69da      	ldr	r2, [r3, #28]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0204 	bic.w	r2, r2, #4
 800731c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69d9      	ldr	r1, [r3, #28]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	61da      	str	r2, [r3, #28]
      break;
 8007330:	e021      	b.n	8007376 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68b9      	ldr	r1, [r7, #8]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 facd 	bl	80078d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800734c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69da      	ldr	r2, [r3, #28]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69d9      	ldr	r1, [r3, #28]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	021a      	lsls	r2, r3, #8
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	61da      	str	r2, [r3, #28]
      break;
 8007372:	e000      	b.n	8007376 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007374:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <HAL_TIM_ConfigClockSource+0x18>
 800739c:	2302      	movs	r3, #2
 800739e:	e0b3      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x180>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d8:	d03e      	beq.n	8007458 <HAL_TIM_ConfigClockSource+0xd0>
 80073da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073de:	f200 8087 	bhi.w	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 80073e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e6:	f000 8085 	beq.w	80074f4 <HAL_TIM_ConfigClockSource+0x16c>
 80073ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ee:	d87f      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 80073f0:	2b70      	cmp	r3, #112	; 0x70
 80073f2:	d01a      	beq.n	800742a <HAL_TIM_ConfigClockSource+0xa2>
 80073f4:	2b70      	cmp	r3, #112	; 0x70
 80073f6:	d87b      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 80073f8:	2b60      	cmp	r3, #96	; 0x60
 80073fa:	d050      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x116>
 80073fc:	2b60      	cmp	r3, #96	; 0x60
 80073fe:	d877      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 8007400:	2b50      	cmp	r3, #80	; 0x50
 8007402:	d03c      	beq.n	800747e <HAL_TIM_ConfigClockSource+0xf6>
 8007404:	2b50      	cmp	r3, #80	; 0x50
 8007406:	d873      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 8007408:	2b40      	cmp	r3, #64	; 0x40
 800740a:	d058      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x136>
 800740c:	2b40      	cmp	r3, #64	; 0x40
 800740e:	d86f      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 8007410:	2b30      	cmp	r3, #48	; 0x30
 8007412:	d064      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x156>
 8007414:	2b30      	cmp	r3, #48	; 0x30
 8007416:	d86b      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 8007418:	2b20      	cmp	r3, #32
 800741a:	d060      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x156>
 800741c:	2b20      	cmp	r3, #32
 800741e:	d867      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d05c      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x156>
 8007424:	2b10      	cmp	r3, #16
 8007426:	d05a      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007428:	e062      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	6899      	ldr	r1, [r3, #8]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f000 fb17 	bl	8007a6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800744c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	609a      	str	r2, [r3, #8]
      break;
 8007456:	e04e      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	6899      	ldr	r1, [r3, #8]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f000 fb00 	bl	8007a6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689a      	ldr	r2, [r3, #8]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800747a:	609a      	str	r2, [r3, #8]
      break;
 800747c:	e03b      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6859      	ldr	r1, [r3, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	461a      	mov	r2, r3
 800748c:	f000 fa74 	bl	8007978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2150      	movs	r1, #80	; 0x50
 8007496:	4618      	mov	r0, r3
 8007498:	f000 facd 	bl	8007a36 <TIM_ITRx_SetConfig>
      break;
 800749c:	e02b      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	6859      	ldr	r1, [r3, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f000 fa93 	bl	80079d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2160      	movs	r1, #96	; 0x60
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fabd 	bl	8007a36 <TIM_ITRx_SetConfig>
      break;
 80074bc:	e01b      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	6859      	ldr	r1, [r3, #4]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	461a      	mov	r2, r3
 80074cc:	f000 fa54 	bl	8007978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2140      	movs	r1, #64	; 0x40
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 faad 	bl	8007a36 <TIM_ITRx_SetConfig>
      break;
 80074dc:	e00b      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4619      	mov	r1, r3
 80074e8:	4610      	mov	r0, r2
 80074ea:	f000 faa4 	bl	8007a36 <TIM_ITRx_SetConfig>
        break;
 80074ee:	e002      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80074f0:	bf00      	nop
 80074f2:	e000      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80074f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a34      	ldr	r2, [pc, #208]	; (8007644 <TIM_Base_SetConfig+0xe4>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00f      	beq.n	8007598 <TIM_Base_SetConfig+0x38>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757e:	d00b      	beq.n	8007598 <TIM_Base_SetConfig+0x38>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a31      	ldr	r2, [pc, #196]	; (8007648 <TIM_Base_SetConfig+0xe8>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d007      	beq.n	8007598 <TIM_Base_SetConfig+0x38>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a30      	ldr	r2, [pc, #192]	; (800764c <TIM_Base_SetConfig+0xec>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_Base_SetConfig+0x38>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a2f      	ldr	r2, [pc, #188]	; (8007650 <TIM_Base_SetConfig+0xf0>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d108      	bne.n	80075aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a25      	ldr	r2, [pc, #148]	; (8007644 <TIM_Base_SetConfig+0xe4>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d01b      	beq.n	80075ea <TIM_Base_SetConfig+0x8a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b8:	d017      	beq.n	80075ea <TIM_Base_SetConfig+0x8a>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a22      	ldr	r2, [pc, #136]	; (8007648 <TIM_Base_SetConfig+0xe8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d013      	beq.n	80075ea <TIM_Base_SetConfig+0x8a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a21      	ldr	r2, [pc, #132]	; (800764c <TIM_Base_SetConfig+0xec>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00f      	beq.n	80075ea <TIM_Base_SetConfig+0x8a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a20      	ldr	r2, [pc, #128]	; (8007650 <TIM_Base_SetConfig+0xf0>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00b      	beq.n	80075ea <TIM_Base_SetConfig+0x8a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a1f      	ldr	r2, [pc, #124]	; (8007654 <TIM_Base_SetConfig+0xf4>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d007      	beq.n	80075ea <TIM_Base_SetConfig+0x8a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a1e      	ldr	r2, [pc, #120]	; (8007658 <TIM_Base_SetConfig+0xf8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d003      	beq.n	80075ea <TIM_Base_SetConfig+0x8a>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a1d      	ldr	r2, [pc, #116]	; (800765c <TIM_Base_SetConfig+0xfc>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d108      	bne.n	80075fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a08      	ldr	r2, [pc, #32]	; (8007644 <TIM_Base_SetConfig+0xe4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d103      	bne.n	8007630 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	615a      	str	r2, [r3, #20]
}
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40010000 	.word	0x40010000
 8007648:	40000400 	.word	0x40000400
 800764c:	40000800 	.word	0x40000800
 8007650:	40000c00 	.word	0x40000c00
 8007654:	40014000 	.word	0x40014000
 8007658:	40014400 	.word	0x40014400
 800765c:	40014800 	.word	0x40014800

08007660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	f023 0201 	bic.w	r2, r3, #1
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 0303 	bic.w	r3, r3, #3
 8007696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f023 0302 	bic.w	r3, r3, #2
 80076a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a1c      	ldr	r2, [pc, #112]	; (8007728 <TIM_OC1_SetConfig+0xc8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d10c      	bne.n	80076d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f023 0308 	bic.w	r3, r3, #8
 80076c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f023 0304 	bic.w	r3, r3, #4
 80076d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a13      	ldr	r2, [pc, #76]	; (8007728 <TIM_OC1_SetConfig+0xc8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d111      	bne.n	8007702 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	4313      	orrs	r3, r2
 8007700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	621a      	str	r2, [r3, #32]
}
 800771c:	bf00      	nop
 800771e:	371c      	adds	r7, #28
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	40010000 	.word	0x40010000

0800772c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	f023 0210 	bic.w	r2, r3, #16
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800775a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	021b      	lsls	r3, r3, #8
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f023 0320 	bic.w	r3, r3, #32
 8007776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	011b      	lsls	r3, r3, #4
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a1e      	ldr	r2, [pc, #120]	; (8007800 <TIM_OC2_SetConfig+0xd4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d10d      	bne.n	80077a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	011b      	lsls	r3, r3, #4
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	4313      	orrs	r3, r2
 800779e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a15      	ldr	r2, [pc, #84]	; (8007800 <TIM_OC2_SetConfig+0xd4>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d113      	bne.n	80077d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	695b      	ldr	r3, [r3, #20]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	621a      	str	r2, [r3, #32]
}
 80077f2:	bf00      	nop
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40010000 	.word	0x40010000

08007804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0303 	bic.w	r3, r3, #3
 800783a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800784c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a1d      	ldr	r2, [pc, #116]	; (80078d4 <TIM_OC3_SetConfig+0xd0>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d10d      	bne.n	800787e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	021b      	lsls	r3, r3, #8
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	4313      	orrs	r3, r2
 8007874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800787c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a14      	ldr	r2, [pc, #80]	; (80078d4 <TIM_OC3_SetConfig+0xd0>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d113      	bne.n	80078ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800788c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	4313      	orrs	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	621a      	str	r2, [r3, #32]
}
 80078c8:	bf00      	nop
 80078ca:	371c      	adds	r7, #28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	40010000 	.word	0x40010000

080078d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800790e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	021b      	lsls	r3, r3, #8
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	031b      	lsls	r3, r3, #12
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a10      	ldr	r2, [pc, #64]	; (8007974 <TIM_OC4_SetConfig+0x9c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d109      	bne.n	800794c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800793e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	019b      	lsls	r3, r3, #6
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	4313      	orrs	r3, r2
 800794a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	621a      	str	r2, [r3, #32]
}
 8007966:	bf00      	nop
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40010000 	.word	0x40010000

08007978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	f023 0201 	bic.w	r2, r3, #1
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	011b      	lsls	r3, r3, #4
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f023 030a 	bic.w	r3, r3, #10
 80079b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	621a      	str	r2, [r3, #32]
}
 80079ca:	bf00      	nop
 80079cc:	371c      	adds	r7, #28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b087      	sub	sp, #28
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f023 0210 	bic.w	r2, r3, #16
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	031b      	lsls	r3, r3, #12
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	011b      	lsls	r3, r3, #4
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	693a      	ldr	r2, [r7, #16]
 8007a28:	621a      	str	r2, [r3, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b085      	sub	sp, #20
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f043 0307 	orr.w	r3, r3, #7
 8007a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	609a      	str	r2, [r3, #8]
}
 8007a60:	bf00      	nop
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	021a      	lsls	r2, r3, #8
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	609a      	str	r2, [r3, #8]
}
 8007aa0:	bf00      	nop
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f003 031f 	and.w	r3, r3, #31
 8007abe:	2201      	movs	r2, #1
 8007ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6a1a      	ldr	r2, [r3, #32]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	43db      	mvns	r3, r3
 8007ace:	401a      	ands	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6a1a      	ldr	r2, [r3, #32]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f003 031f 	and.w	r3, r3, #31
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	621a      	str	r2, [r3, #32]
}
 8007aea:	bf00      	nop
 8007aec:	371c      	adds	r7, #28
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
	...

08007af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e050      	b.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a1c      	ldr	r2, [pc, #112]	; (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d018      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5c:	d013      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a18      	ldr	r2, [pc, #96]	; (8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00e      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a16      	ldr	r2, [pc, #88]	; (8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d009      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a15      	ldr	r2, [pc, #84]	; (8007bcc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d004      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a13      	ldr	r2, [pc, #76]	; (8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d10c      	bne.n	8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40010000 	.word	0x40010000
 8007bc4:	40000400 	.word	0x40000400
 8007bc8:	40000800 	.word	0x40000800
 8007bcc:	40000c00 	.word	0x40000c00
 8007bd0:	40014000 	.word	0x40014000

08007bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e03f      	b.n	8007c8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7fb fb56 	bl	80032d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2224      	movs	r2, #36	; 0x24
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fd51 	bl	80086e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	691a      	ldr	r2, [r3, #16]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	695a      	ldr	r2, [r3, #20]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68da      	ldr	r2, [r3, #12]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	d153      	bne.n	8007d5a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <HAL_UART_Transmit_DMA+0x26>
 8007cb8:	88fb      	ldrh	r3, [r7, #6]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e04c      	b.n	8007d5c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_UART_Transmit_DMA+0x38>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e045      	b.n	8007d5c <HAL_UART_Transmit_DMA+0xc4>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	88fa      	ldrh	r2, [r7, #6]
 8007ce2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	88fa      	ldrh	r2, [r7, #6]
 8007ce8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2221      	movs	r2, #33	; 0x21
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfc:	4a19      	ldr	r2, [pc, #100]	; (8007d64 <HAL_UART_Transmit_DMA+0xcc>)
 8007cfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d04:	4a18      	ldr	r2, [pc, #96]	; (8007d68 <HAL_UART_Transmit_DMA+0xd0>)
 8007d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0c:	4a17      	ldr	r2, [pc, #92]	; (8007d6c <HAL_UART_Transmit_DMA+0xd4>)
 8007d0e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d14:	2200      	movs	r2, #0
 8007d16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007d18:	f107 0308 	add.w	r3, r7, #8
 8007d1c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	6819      	ldr	r1, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	88fb      	ldrh	r3, [r7, #6]
 8007d30:	f7fb fe94 	bl	8003a5c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d3c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	695a      	ldr	r2, [r3, #20]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d54:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	e000      	b.n	8007d5c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007d5a:	2302      	movs	r3, #2
  }
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	080081a5 	.word	0x080081a5
 8007d68:	080081f7 	.word	0x080081f7
 8007d6c:	080082df 	.word	0x080082df

08007d70 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	d11d      	bne.n	8007dc6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <HAL_UART_Receive_DMA+0x26>
 8007d90:	88fb      	ldrh	r3, [r7, #6]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e016      	b.n	8007dc8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d101      	bne.n	8007da8 <HAL_UART_Receive_DMA+0x38>
 8007da4:	2302      	movs	r3, #2
 8007da6:	e00f      	b.n	8007dc8 <HAL_UART_Receive_DMA+0x58>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007db6:	88fb      	ldrh	r3, [r7, #6]
 8007db8:	461a      	mov	r2, r3
 8007dba:	68b9      	ldr	r1, [r7, #8]
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 fad9 	bl	8008374 <UART_Start_Receive_DMA>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	e000      	b.n	8007dc8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007dc6:	2302      	movs	r3, #2
  }
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08a      	sub	sp, #40	; 0x28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10d      	bne.n	8007e22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	f003 0320 	and.w	r3, r3, #32
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d008      	beq.n	8007e22 <HAL_UART_IRQHandler+0x52>
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fbcd 	bl	80085ba <UART_Receive_IT>
      return;
 8007e20:	e17c      	b.n	800811c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f000 80b1 	beq.w	8007f8c <HAL_UART_IRQHandler+0x1bc>
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d105      	bne.n	8007e40 <HAL_UART_IRQHandler+0x70>
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 80a6 	beq.w	8007f8c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <HAL_UART_IRQHandler+0x90>
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	f043 0201 	orr.w	r2, r3, #1
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	f003 0304 	and.w	r3, r3, #4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <HAL_UART_IRQHandler+0xb0>
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d005      	beq.n	8007e80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e78:	f043 0202 	orr.w	r2, r3, #2
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	f003 0302 	and.w	r3, r3, #2
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <HAL_UART_IRQHandler+0xd0>
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	f043 0204 	orr.w	r2, r3, #4
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00f      	beq.n	8007eca <HAL_UART_IRQHandler+0xfa>
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	f003 0320 	and.w	r3, r3, #32
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d104      	bne.n	8007ebe <HAL_UART_IRQHandler+0xee>
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	f043 0208 	orr.w	r2, r3, #8
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 811f 	beq.w	8008112 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d007      	beq.n	8007eee <HAL_UART_IRQHandler+0x11e>
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	f003 0320 	and.w	r3, r3, #32
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fb66 	bl	80085ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef8:	2b40      	cmp	r3, #64	; 0x40
 8007efa:	bf0c      	ite	eq
 8007efc:	2301      	moveq	r3, #1
 8007efe:	2300      	movne	r3, #0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <HAL_UART_IRQHandler+0x146>
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d031      	beq.n	8007f7a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 faa6 	bl	8008468 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f26:	2b40      	cmp	r3, #64	; 0x40
 8007f28:	d123      	bne.n	8007f72 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	695a      	ldr	r2, [r3, #20]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f38:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d013      	beq.n	8007f6a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f46:	4a77      	ldr	r2, [pc, #476]	; (8008124 <HAL_UART_IRQHandler+0x354>)
 8007f48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fb fe4c 	bl	8003bec <HAL_DMA_Abort_IT>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d016      	beq.n	8007f88 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f64:	4610      	mov	r0, r2
 8007f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f68:	e00e      	b.n	8007f88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f904 	bl	8008178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f70:	e00a      	b.n	8007f88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f900 	bl	8008178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f78:	e006      	b.n	8007f88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f8fc 	bl	8008178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007f86:	e0c4      	b.n	8008112 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f88:	bf00      	nop
    return;
 8007f8a:	e0c2      	b.n	8008112 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	f040 80a2 	bne.w	80080da <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	f003 0310 	and.w	r3, r3, #16
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 809c 	beq.w	80080da <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	f003 0310 	and.w	r3, r3, #16
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 8096 	beq.w	80080da <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	60fb      	str	r3, [r7, #12]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fce:	2b40      	cmp	r3, #64	; 0x40
 8007fd0:	d14f      	bne.n	8008072 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007fdc:	8a3b      	ldrh	r3, [r7, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 8099 	beq.w	8008116 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fe8:	8a3a      	ldrh	r2, [r7, #16]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	f080 8093 	bcs.w	8008116 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	8a3a      	ldrh	r2, [r7, #16]
 8007ff4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffa:	69db      	ldr	r3, [r3, #28]
 8007ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008000:	d02b      	beq.n	800805a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68da      	ldr	r2, [r3, #12]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008010:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	695a      	ldr	r2, [r3, #20]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0201 	bic.w	r2, r2, #1
 8008020:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	695a      	ldr	r2, [r3, #20]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008030:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2220      	movs	r2, #32
 8008036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0210 	bic.w	r2, r2, #16
 800804e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008054:	4618      	mov	r0, r3
 8008056:	f7fb fd59 	bl	8003b0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008062:	b29b      	uxth	r3, r3
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	b29b      	uxth	r3, r3
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f88e 	bl	800818c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008070:	e051      	b.n	8008116 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800807a:	b29b      	uxth	r3, r3
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008084:	b29b      	uxth	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d047      	beq.n	800811a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800808a:	8a7b      	ldrh	r3, [r7, #18]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d044      	beq.n	800811a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800809e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695a      	ldr	r2, [r3, #20]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0201 	bic.w	r2, r2, #1
 80080ae:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 0210 	bic.w	r2, r2, #16
 80080cc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080ce:	8a7b      	ldrh	r3, [r7, #18]
 80080d0:	4619      	mov	r1, r3
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f85a 	bl	800818c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80080d8:	e01f      	b.n	800811a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d008      	beq.n	80080f6 <HAL_UART_IRQHandler+0x326>
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f9fb 	bl	80084ea <UART_Transmit_IT>
    return;
 80080f4:	e012      	b.n	800811c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00d      	beq.n	800811c <HAL_UART_IRQHandler+0x34c>
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008106:	2b00      	cmp	r3, #0
 8008108:	d008      	beq.n	800811c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa3d 	bl	800858a <UART_EndTransmit_IT>
    return;
 8008110:	e004      	b.n	800811c <HAL_UART_IRQHandler+0x34c>
    return;
 8008112:	bf00      	nop
 8008114:	e002      	b.n	800811c <HAL_UART_IRQHandler+0x34c>
      return;
 8008116:	bf00      	nop
 8008118:	e000      	b.n	800811c <HAL_UART_IRQHandler+0x34c>
      return;
 800811a:	bf00      	nop
  }
}
 800811c:	3728      	adds	r7, #40	; 0x28
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	080084c3 	.word	0x080084c3

08008128 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d113      	bne.n	80081e8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	695a      	ldr	r2, [r3, #20]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081d4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68da      	ldr	r2, [r3, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081e4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081e6:	e002      	b.n	80081ee <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f7ff ff9d 	bl	8008128 <HAL_UART_TxCpltCallback>
}
 80081ee:	bf00      	nop
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008202:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f7ff ff99 	bl	800813c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822a:	2b00      	cmp	r3, #0
 800822c:	d12a      	bne.n	8008284 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008242:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695a      	ldr	r2, [r3, #20]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0201 	bic.w	r2, r2, #1
 8008252:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	695a      	ldr	r2, [r3, #20]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008262:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2220      	movs	r2, #32
 8008268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	2b01      	cmp	r3, #1
 8008272:	d107      	bne.n	8008284 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 0210 	bic.w	r2, r2, #16
 8008282:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008288:	2b01      	cmp	r3, #1
 800828a:	d106      	bne.n	800829a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008290:	4619      	mov	r1, r3
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f7ff ff7a 	bl	800818c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008298:	e002      	b.n	80082a0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7ff ff58 	bl	8008150 <HAL_UART_RxCpltCallback>
}
 80082a0:	bf00      	nop
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d108      	bne.n	80082d0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082c2:	085b      	lsrs	r3, r3, #1
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	4619      	mov	r1, r3
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f7ff ff5f 	bl	800818c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082ce:	e002      	b.n	80082d6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7ff ff47 	bl	8008164 <HAL_UART_RxHalfCpltCallback>
}
 80082d6:	bf00      	nop
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fa:	2b80      	cmp	r3, #128	; 0x80
 80082fc:	bf0c      	ite	eq
 80082fe:	2301      	moveq	r3, #1
 8008300:	2300      	movne	r3, #0
 8008302:	b2db      	uxtb	r3, r3
 8008304:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b21      	cmp	r3, #33	; 0x21
 8008310:	d108      	bne.n	8008324 <UART_DMAError+0x46>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2200      	movs	r2, #0
 800831c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800831e:	68b8      	ldr	r0, [r7, #8]
 8008320:	f000 f88c 	bl	800843c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832e:	2b40      	cmp	r3, #64	; 0x40
 8008330:	bf0c      	ite	eq
 8008332:	2301      	moveq	r3, #1
 8008334:	2300      	movne	r3, #0
 8008336:	b2db      	uxtb	r3, r3
 8008338:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b22      	cmp	r3, #34	; 0x22
 8008344:	d108      	bne.n	8008358 <UART_DMAError+0x7a>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2200      	movs	r2, #0
 8008350:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008352:	68b8      	ldr	r0, [r7, #8]
 8008354:	f000 f888 	bl	8008468 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835c:	f043 0210 	orr.w	r2, r3, #16
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008364:	68b8      	ldr	r0, [r7, #8]
 8008366:	f7ff ff07 	bl	8008178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800836a:	bf00      	nop
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	88fa      	ldrh	r2, [r7, #6]
 800838c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2222      	movs	r2, #34	; 0x22
 8008398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a0:	4a23      	ldr	r2, [pc, #140]	; (8008430 <UART_Start_Receive_DMA+0xbc>)
 80083a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	4a22      	ldr	r2, [pc, #136]	; (8008434 <UART_Start_Receive_DMA+0xc0>)
 80083aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	4a21      	ldr	r2, [pc, #132]	; (8008438 <UART_Start_Receive_DMA+0xc4>)
 80083b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b8:	2200      	movs	r2, #0
 80083ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80083bc:	f107 0308 	add.w	r3, r7, #8
 80083c0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4619      	mov	r1, r3
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	f7fb fb42 	bl	8003a5c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80083d8:	2300      	movs	r3, #0
 80083da:	613b      	str	r3, [r7, #16]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	613b      	str	r3, [r7, #16]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	613b      	str	r3, [r7, #16]
 80083ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68da      	ldr	r2, [r3, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008404:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	695a      	ldr	r2, [r3, #20]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f042 0201 	orr.w	r2, r2, #1
 8008414:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	695a      	ldr	r2, [r3, #20]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008424:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	08008213 	.word	0x08008213
 8008434:	080082a9 	.word	0x080082a9
 8008438:	080082df 	.word	0x080082df

0800843c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68da      	ldr	r2, [r3, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008452:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2220      	movs	r2, #32
 8008458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800847e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695a      	ldr	r2, [r3, #20]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0201 	bic.w	r2, r2, #1
 800848e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008494:	2b01      	cmp	r3, #1
 8008496:	d107      	bne.n	80084a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f022 0210 	bic.w	r2, r2, #16
 80084a6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80084b6:	bf00      	nop
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7ff fe4b 	bl	8008178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b085      	sub	sp, #20
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b21      	cmp	r3, #33	; 0x21
 80084fc:	d13e      	bne.n	800857c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008506:	d114      	bne.n	8008532 <UART_Transmit_IT+0x48>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d110      	bne.n	8008532 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008524:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	1c9a      	adds	r2, r3, #2
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	621a      	str	r2, [r3, #32]
 8008530:	e008      	b.n	8008544 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	1c59      	adds	r1, r3, #1
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	6211      	str	r1, [r2, #32]
 800853c:	781a      	ldrb	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008548:	b29b      	uxth	r3, r3
 800854a:	3b01      	subs	r3, #1
 800854c:	b29b      	uxth	r3, r3
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	4619      	mov	r1, r3
 8008552:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10f      	bne.n	8008578 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68da      	ldr	r2, [r3, #12]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008566:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008576:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	e000      	b.n	800857e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800857c:	2302      	movs	r3, #2
  }
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68da      	ldr	r2, [r3, #12]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7ff fdbc 	bl	8008128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b22      	cmp	r3, #34	; 0x22
 80085cc:	f040 8087 	bne.w	80086de <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d8:	d117      	bne.n	800860a <UART_Receive_IT+0x50>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d113      	bne.n	800860a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008602:	1c9a      	adds	r2, r3, #2
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	629a      	str	r2, [r3, #40]	; 0x28
 8008608:	e026      	b.n	8008658 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008610:	2300      	movs	r3, #0
 8008612:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800861c:	d007      	beq.n	800862e <UART_Receive_IT+0x74>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10a      	bne.n	800863c <UART_Receive_IT+0x82>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d106      	bne.n	800863c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	b2da      	uxtb	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	e008      	b.n	800864e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008648:	b2da      	uxtb	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008652:	1c5a      	adds	r2, r3, #1
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800865c:	b29b      	uxth	r3, r3
 800865e:	3b01      	subs	r3, #1
 8008660:	b29b      	uxth	r3, r3
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	4619      	mov	r1, r3
 8008666:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008668:	2b00      	cmp	r3, #0
 800866a:	d136      	bne.n	80086da <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f022 0220 	bic.w	r2, r2, #32
 800867a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68da      	ldr	r2, [r3, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800868a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	695a      	ldr	r2, [r3, #20]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 0201 	bic.w	r2, r2, #1
 800869a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2220      	movs	r2, #32
 80086a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d10e      	bne.n	80086ca <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68da      	ldr	r2, [r3, #12]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f022 0210 	bic.w	r2, r2, #16
 80086ba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7ff fd62 	bl	800818c <HAL_UARTEx_RxEventCallback>
 80086c8:	e002      	b.n	80086d0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7ff fd40 	bl	8008150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	e002      	b.n	80086e0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	e000      	b.n	80086e0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80086de:	2302      	movs	r3, #2
  }
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	b09f      	sub	sp, #124	; 0x7c
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80086fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fe:	68d9      	ldr	r1, [r3, #12]
 8008700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	ea40 0301 	orr.w	r3, r0, r1
 8008708:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800870a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800870c:	689a      	ldr	r2, [r3, #8]
 800870e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	431a      	orrs	r2, r3
 8008714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	431a      	orrs	r2, r3
 800871a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	4313      	orrs	r3, r2
 8008720:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800872c:	f021 010c 	bic.w	r1, r1, #12
 8008730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008736:	430b      	orrs	r3, r1
 8008738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800873a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008746:	6999      	ldr	r1, [r3, #24]
 8008748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	ea40 0301 	orr.w	r3, r0, r1
 8008750:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	4bc5      	ldr	r3, [pc, #788]	; (8008a6c <UART_SetConfig+0x384>)
 8008758:	429a      	cmp	r2, r3
 800875a:	d004      	beq.n	8008766 <UART_SetConfig+0x7e>
 800875c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	4bc3      	ldr	r3, [pc, #780]	; (8008a70 <UART_SetConfig+0x388>)
 8008762:	429a      	cmp	r2, r3
 8008764:	d103      	bne.n	800876e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008766:	f7fe f8eb 	bl	8006940 <HAL_RCC_GetPCLK2Freq>
 800876a:	6778      	str	r0, [r7, #116]	; 0x74
 800876c:	e002      	b.n	8008774 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800876e:	f7fe f8d3 	bl	8006918 <HAL_RCC_GetPCLK1Freq>
 8008772:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800877c:	f040 80b6 	bne.w	80088ec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008782:	461c      	mov	r4, r3
 8008784:	f04f 0500 	mov.w	r5, #0
 8008788:	4622      	mov	r2, r4
 800878a:	462b      	mov	r3, r5
 800878c:	1891      	adds	r1, r2, r2
 800878e:	6439      	str	r1, [r7, #64]	; 0x40
 8008790:	415b      	adcs	r3, r3
 8008792:	647b      	str	r3, [r7, #68]	; 0x44
 8008794:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008798:	1912      	adds	r2, r2, r4
 800879a:	eb45 0303 	adc.w	r3, r5, r3
 800879e:	f04f 0000 	mov.w	r0, #0
 80087a2:	f04f 0100 	mov.w	r1, #0
 80087a6:	00d9      	lsls	r1, r3, #3
 80087a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087ac:	00d0      	lsls	r0, r2, #3
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	1911      	adds	r1, r2, r4
 80087b4:	6639      	str	r1, [r7, #96]	; 0x60
 80087b6:	416b      	adcs	r3, r5
 80087b8:	667b      	str	r3, [r7, #100]	; 0x64
 80087ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	461a      	mov	r2, r3
 80087c0:	f04f 0300 	mov.w	r3, #0
 80087c4:	1891      	adds	r1, r2, r2
 80087c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80087c8:	415b      	adcs	r3, r3
 80087ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80087d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80087d4:	f7f8 faea 	bl	8000dac <__aeabi_uldivmod>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4ba5      	ldr	r3, [pc, #660]	; (8008a74 <UART_SetConfig+0x38c>)
 80087de:	fba3 2302 	umull	r2, r3, r3, r2
 80087e2:	095b      	lsrs	r3, r3, #5
 80087e4:	011e      	lsls	r6, r3, #4
 80087e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087e8:	461c      	mov	r4, r3
 80087ea:	f04f 0500 	mov.w	r5, #0
 80087ee:	4622      	mov	r2, r4
 80087f0:	462b      	mov	r3, r5
 80087f2:	1891      	adds	r1, r2, r2
 80087f4:	6339      	str	r1, [r7, #48]	; 0x30
 80087f6:	415b      	adcs	r3, r3
 80087f8:	637b      	str	r3, [r7, #52]	; 0x34
 80087fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80087fe:	1912      	adds	r2, r2, r4
 8008800:	eb45 0303 	adc.w	r3, r5, r3
 8008804:	f04f 0000 	mov.w	r0, #0
 8008808:	f04f 0100 	mov.w	r1, #0
 800880c:	00d9      	lsls	r1, r3, #3
 800880e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008812:	00d0      	lsls	r0, r2, #3
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	1911      	adds	r1, r2, r4
 800881a:	65b9      	str	r1, [r7, #88]	; 0x58
 800881c:	416b      	adcs	r3, r5
 800881e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	461a      	mov	r2, r3
 8008826:	f04f 0300 	mov.w	r3, #0
 800882a:	1891      	adds	r1, r2, r2
 800882c:	62b9      	str	r1, [r7, #40]	; 0x28
 800882e:	415b      	adcs	r3, r3
 8008830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008836:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800883a:	f7f8 fab7 	bl	8000dac <__aeabi_uldivmod>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4b8c      	ldr	r3, [pc, #560]	; (8008a74 <UART_SetConfig+0x38c>)
 8008844:	fba3 1302 	umull	r1, r3, r3, r2
 8008848:	095b      	lsrs	r3, r3, #5
 800884a:	2164      	movs	r1, #100	; 0x64
 800884c:	fb01 f303 	mul.w	r3, r1, r3
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	3332      	adds	r3, #50	; 0x32
 8008856:	4a87      	ldr	r2, [pc, #540]	; (8008a74 <UART_SetConfig+0x38c>)
 8008858:	fba2 2303 	umull	r2, r3, r2, r3
 800885c:	095b      	lsrs	r3, r3, #5
 800885e:	005b      	lsls	r3, r3, #1
 8008860:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008864:	441e      	add	r6, r3
 8008866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008868:	4618      	mov	r0, r3
 800886a:	f04f 0100 	mov.w	r1, #0
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	1894      	adds	r4, r2, r2
 8008874:	623c      	str	r4, [r7, #32]
 8008876:	415b      	adcs	r3, r3
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
 800887a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800887e:	1812      	adds	r2, r2, r0
 8008880:	eb41 0303 	adc.w	r3, r1, r3
 8008884:	f04f 0400 	mov.w	r4, #0
 8008888:	f04f 0500 	mov.w	r5, #0
 800888c:	00dd      	lsls	r5, r3, #3
 800888e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008892:	00d4      	lsls	r4, r2, #3
 8008894:	4622      	mov	r2, r4
 8008896:	462b      	mov	r3, r5
 8008898:	1814      	adds	r4, r2, r0
 800889a:	653c      	str	r4, [r7, #80]	; 0x50
 800889c:	414b      	adcs	r3, r1
 800889e:	657b      	str	r3, [r7, #84]	; 0x54
 80088a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	461a      	mov	r2, r3
 80088a6:	f04f 0300 	mov.w	r3, #0
 80088aa:	1891      	adds	r1, r2, r2
 80088ac:	61b9      	str	r1, [r7, #24]
 80088ae:	415b      	adcs	r3, r3
 80088b0:	61fb      	str	r3, [r7, #28]
 80088b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80088ba:	f7f8 fa77 	bl	8000dac <__aeabi_uldivmod>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	4b6c      	ldr	r3, [pc, #432]	; (8008a74 <UART_SetConfig+0x38c>)
 80088c4:	fba3 1302 	umull	r1, r3, r3, r2
 80088c8:	095b      	lsrs	r3, r3, #5
 80088ca:	2164      	movs	r1, #100	; 0x64
 80088cc:	fb01 f303 	mul.w	r3, r1, r3
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	3332      	adds	r3, #50	; 0x32
 80088d6:	4a67      	ldr	r2, [pc, #412]	; (8008a74 <UART_SetConfig+0x38c>)
 80088d8:	fba2 2303 	umull	r2, r3, r2, r3
 80088dc:	095b      	lsrs	r3, r3, #5
 80088de:	f003 0207 	and.w	r2, r3, #7
 80088e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4432      	add	r2, r6
 80088e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80088ea:	e0b9      	b.n	8008a60 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088ee:	461c      	mov	r4, r3
 80088f0:	f04f 0500 	mov.w	r5, #0
 80088f4:	4622      	mov	r2, r4
 80088f6:	462b      	mov	r3, r5
 80088f8:	1891      	adds	r1, r2, r2
 80088fa:	6139      	str	r1, [r7, #16]
 80088fc:	415b      	adcs	r3, r3
 80088fe:	617b      	str	r3, [r7, #20]
 8008900:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008904:	1912      	adds	r2, r2, r4
 8008906:	eb45 0303 	adc.w	r3, r5, r3
 800890a:	f04f 0000 	mov.w	r0, #0
 800890e:	f04f 0100 	mov.w	r1, #0
 8008912:	00d9      	lsls	r1, r3, #3
 8008914:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008918:	00d0      	lsls	r0, r2, #3
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	eb12 0804 	adds.w	r8, r2, r4
 8008922:	eb43 0905 	adc.w	r9, r3, r5
 8008926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	4618      	mov	r0, r3
 800892c:	f04f 0100 	mov.w	r1, #0
 8008930:	f04f 0200 	mov.w	r2, #0
 8008934:	f04f 0300 	mov.w	r3, #0
 8008938:	008b      	lsls	r3, r1, #2
 800893a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800893e:	0082      	lsls	r2, r0, #2
 8008940:	4640      	mov	r0, r8
 8008942:	4649      	mov	r1, r9
 8008944:	f7f8 fa32 	bl	8000dac <__aeabi_uldivmod>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4b49      	ldr	r3, [pc, #292]	; (8008a74 <UART_SetConfig+0x38c>)
 800894e:	fba3 2302 	umull	r2, r3, r3, r2
 8008952:	095b      	lsrs	r3, r3, #5
 8008954:	011e      	lsls	r6, r3, #4
 8008956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008958:	4618      	mov	r0, r3
 800895a:	f04f 0100 	mov.w	r1, #0
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	1894      	adds	r4, r2, r2
 8008964:	60bc      	str	r4, [r7, #8]
 8008966:	415b      	adcs	r3, r3
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800896e:	1812      	adds	r2, r2, r0
 8008970:	eb41 0303 	adc.w	r3, r1, r3
 8008974:	f04f 0400 	mov.w	r4, #0
 8008978:	f04f 0500 	mov.w	r5, #0
 800897c:	00dd      	lsls	r5, r3, #3
 800897e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008982:	00d4      	lsls	r4, r2, #3
 8008984:	4622      	mov	r2, r4
 8008986:	462b      	mov	r3, r5
 8008988:	1814      	adds	r4, r2, r0
 800898a:	64bc      	str	r4, [r7, #72]	; 0x48
 800898c:	414b      	adcs	r3, r1
 800898e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	4618      	mov	r0, r3
 8008996:	f04f 0100 	mov.w	r1, #0
 800899a:	f04f 0200 	mov.w	r2, #0
 800899e:	f04f 0300 	mov.w	r3, #0
 80089a2:	008b      	lsls	r3, r1, #2
 80089a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089a8:	0082      	lsls	r2, r0, #2
 80089aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80089ae:	f7f8 f9fd 	bl	8000dac <__aeabi_uldivmod>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4b2f      	ldr	r3, [pc, #188]	; (8008a74 <UART_SetConfig+0x38c>)
 80089b8:	fba3 1302 	umull	r1, r3, r3, r2
 80089bc:	095b      	lsrs	r3, r3, #5
 80089be:	2164      	movs	r1, #100	; 0x64
 80089c0:	fb01 f303 	mul.w	r3, r1, r3
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	3332      	adds	r3, #50	; 0x32
 80089ca:	4a2a      	ldr	r2, [pc, #168]	; (8008a74 <UART_SetConfig+0x38c>)
 80089cc:	fba2 2303 	umull	r2, r3, r2, r3
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089d6:	441e      	add	r6, r3
 80089d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089da:	4618      	mov	r0, r3
 80089dc:	f04f 0100 	mov.w	r1, #0
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	1894      	adds	r4, r2, r2
 80089e6:	603c      	str	r4, [r7, #0]
 80089e8:	415b      	adcs	r3, r3
 80089ea:	607b      	str	r3, [r7, #4]
 80089ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f0:	1812      	adds	r2, r2, r0
 80089f2:	eb41 0303 	adc.w	r3, r1, r3
 80089f6:	f04f 0400 	mov.w	r4, #0
 80089fa:	f04f 0500 	mov.w	r5, #0
 80089fe:	00dd      	lsls	r5, r3, #3
 8008a00:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a04:	00d4      	lsls	r4, r2, #3
 8008a06:	4622      	mov	r2, r4
 8008a08:	462b      	mov	r3, r5
 8008a0a:	eb12 0a00 	adds.w	sl, r2, r0
 8008a0e:	eb43 0b01 	adc.w	fp, r3, r1
 8008a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f04f 0100 	mov.w	r1, #0
 8008a1c:	f04f 0200 	mov.w	r2, #0
 8008a20:	f04f 0300 	mov.w	r3, #0
 8008a24:	008b      	lsls	r3, r1, #2
 8008a26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a2a:	0082      	lsls	r2, r0, #2
 8008a2c:	4650      	mov	r0, sl
 8008a2e:	4659      	mov	r1, fp
 8008a30:	f7f8 f9bc 	bl	8000dac <__aeabi_uldivmod>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4b0e      	ldr	r3, [pc, #56]	; (8008a74 <UART_SetConfig+0x38c>)
 8008a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8008a3e:	095b      	lsrs	r3, r3, #5
 8008a40:	2164      	movs	r1, #100	; 0x64
 8008a42:	fb01 f303 	mul.w	r3, r1, r3
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	011b      	lsls	r3, r3, #4
 8008a4a:	3332      	adds	r3, #50	; 0x32
 8008a4c:	4a09      	ldr	r2, [pc, #36]	; (8008a74 <UART_SetConfig+0x38c>)
 8008a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a52:	095b      	lsrs	r3, r3, #5
 8008a54:	f003 020f 	and.w	r2, r3, #15
 8008a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4432      	add	r2, r6
 8008a5e:	609a      	str	r2, [r3, #8]
}
 8008a60:	bf00      	nop
 8008a62:	377c      	adds	r7, #124	; 0x7c
 8008a64:	46bd      	mov	sp, r7
 8008a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6a:	bf00      	nop
 8008a6c:	40011000 	.word	0x40011000
 8008a70:	40011400 	.word	0x40011400
 8008a74:	51eb851f 	.word	0x51eb851f

08008a78 <calloc>:
 8008a78:	4b02      	ldr	r3, [pc, #8]	; (8008a84 <calloc+0xc>)
 8008a7a:	460a      	mov	r2, r1
 8008a7c:	4601      	mov	r1, r0
 8008a7e:	6818      	ldr	r0, [r3, #0]
 8008a80:	f000 b842 	b.w	8008b08 <_calloc_r>
 8008a84:	20000020 	.word	0x20000020

08008a88 <__errno>:
 8008a88:	4b01      	ldr	r3, [pc, #4]	; (8008a90 <__errno+0x8>)
 8008a8a:	6818      	ldr	r0, [r3, #0]
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	20000020 	.word	0x20000020

08008a94 <__libc_init_array>:
 8008a94:	b570      	push	{r4, r5, r6, lr}
 8008a96:	4d0d      	ldr	r5, [pc, #52]	; (8008acc <__libc_init_array+0x38>)
 8008a98:	4c0d      	ldr	r4, [pc, #52]	; (8008ad0 <__libc_init_array+0x3c>)
 8008a9a:	1b64      	subs	r4, r4, r5
 8008a9c:	10a4      	asrs	r4, r4, #2
 8008a9e:	2600      	movs	r6, #0
 8008aa0:	42a6      	cmp	r6, r4
 8008aa2:	d109      	bne.n	8008ab8 <__libc_init_array+0x24>
 8008aa4:	4d0b      	ldr	r5, [pc, #44]	; (8008ad4 <__libc_init_array+0x40>)
 8008aa6:	4c0c      	ldr	r4, [pc, #48]	; (8008ad8 <__libc_init_array+0x44>)
 8008aa8:	f000 f99e 	bl	8008de8 <_init>
 8008aac:	1b64      	subs	r4, r4, r5
 8008aae:	10a4      	asrs	r4, r4, #2
 8008ab0:	2600      	movs	r6, #0
 8008ab2:	42a6      	cmp	r6, r4
 8008ab4:	d105      	bne.n	8008ac2 <__libc_init_array+0x2e>
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
 8008ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008abc:	4798      	blx	r3
 8008abe:	3601      	adds	r6, #1
 8008ac0:	e7ee      	b.n	8008aa0 <__libc_init_array+0xc>
 8008ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac6:	4798      	blx	r3
 8008ac8:	3601      	adds	r6, #1
 8008aca:	e7f2      	b.n	8008ab2 <__libc_init_array+0x1e>
 8008acc:	08008e40 	.word	0x08008e40
 8008ad0:	08008e40 	.word	0x08008e40
 8008ad4:	08008e40 	.word	0x08008e40
 8008ad8:	08008e44 	.word	0x08008e44

08008adc <memcpy>:
 8008adc:	440a      	add	r2, r1
 8008ade:	4291      	cmp	r1, r2
 8008ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ae4:	d100      	bne.n	8008ae8 <memcpy+0xc>
 8008ae6:	4770      	bx	lr
 8008ae8:	b510      	push	{r4, lr}
 8008aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008af2:	4291      	cmp	r1, r2
 8008af4:	d1f9      	bne.n	8008aea <memcpy+0xe>
 8008af6:	bd10      	pop	{r4, pc}

08008af8 <memset>:
 8008af8:	4402      	add	r2, r0
 8008afa:	4603      	mov	r3, r0
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d100      	bne.n	8008b02 <memset+0xa>
 8008b00:	4770      	bx	lr
 8008b02:	f803 1b01 	strb.w	r1, [r3], #1
 8008b06:	e7f9      	b.n	8008afc <memset+0x4>

08008b08 <_calloc_r>:
 8008b08:	b513      	push	{r0, r1, r4, lr}
 8008b0a:	434a      	muls	r2, r1
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	9201      	str	r2, [sp, #4]
 8008b10:	f000 f80a 	bl	8008b28 <_malloc_r>
 8008b14:	4604      	mov	r4, r0
 8008b16:	b118      	cbz	r0, 8008b20 <_calloc_r+0x18>
 8008b18:	9a01      	ldr	r2, [sp, #4]
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	f7ff ffec 	bl	8008af8 <memset>
 8008b20:	4620      	mov	r0, r4
 8008b22:	b002      	add	sp, #8
 8008b24:	bd10      	pop	{r4, pc}
	...

08008b28 <_malloc_r>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	1ccd      	adds	r5, r1, #3
 8008b2c:	f025 0503 	bic.w	r5, r5, #3
 8008b30:	3508      	adds	r5, #8
 8008b32:	2d0c      	cmp	r5, #12
 8008b34:	bf38      	it	cc
 8008b36:	250c      	movcc	r5, #12
 8008b38:	2d00      	cmp	r5, #0
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	db01      	blt.n	8008b42 <_malloc_r+0x1a>
 8008b3e:	42a9      	cmp	r1, r5
 8008b40:	d903      	bls.n	8008b4a <_malloc_r+0x22>
 8008b42:	230c      	movs	r3, #12
 8008b44:	6033      	str	r3, [r6, #0]
 8008b46:	2000      	movs	r0, #0
 8008b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b4a:	f000 f857 	bl	8008bfc <__malloc_lock>
 8008b4e:	4921      	ldr	r1, [pc, #132]	; (8008bd4 <_malloc_r+0xac>)
 8008b50:	680a      	ldr	r2, [r1, #0]
 8008b52:	4614      	mov	r4, r2
 8008b54:	b99c      	cbnz	r4, 8008b7e <_malloc_r+0x56>
 8008b56:	4f20      	ldr	r7, [pc, #128]	; (8008bd8 <_malloc_r+0xb0>)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	b923      	cbnz	r3, 8008b66 <_malloc_r+0x3e>
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f000 f83c 	bl	8008bdc <_sbrk_r>
 8008b64:	6038      	str	r0, [r7, #0]
 8008b66:	4629      	mov	r1, r5
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f000 f837 	bl	8008bdc <_sbrk_r>
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	d123      	bne.n	8008bba <_malloc_r+0x92>
 8008b72:	230c      	movs	r3, #12
 8008b74:	6033      	str	r3, [r6, #0]
 8008b76:	4630      	mov	r0, r6
 8008b78:	f000 f846 	bl	8008c08 <__malloc_unlock>
 8008b7c:	e7e3      	b.n	8008b46 <_malloc_r+0x1e>
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	1b5b      	subs	r3, r3, r5
 8008b82:	d417      	bmi.n	8008bb4 <_malloc_r+0x8c>
 8008b84:	2b0b      	cmp	r3, #11
 8008b86:	d903      	bls.n	8008b90 <_malloc_r+0x68>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	441c      	add	r4, r3
 8008b8c:	6025      	str	r5, [r4, #0]
 8008b8e:	e004      	b.n	8008b9a <_malloc_r+0x72>
 8008b90:	6863      	ldr	r3, [r4, #4]
 8008b92:	42a2      	cmp	r2, r4
 8008b94:	bf0c      	ite	eq
 8008b96:	600b      	streq	r3, [r1, #0]
 8008b98:	6053      	strne	r3, [r2, #4]
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f000 f834 	bl	8008c08 <__malloc_unlock>
 8008ba0:	f104 000b 	add.w	r0, r4, #11
 8008ba4:	1d23      	adds	r3, r4, #4
 8008ba6:	f020 0007 	bic.w	r0, r0, #7
 8008baa:	1ac2      	subs	r2, r0, r3
 8008bac:	d0cc      	beq.n	8008b48 <_malloc_r+0x20>
 8008bae:	1a1b      	subs	r3, r3, r0
 8008bb0:	50a3      	str	r3, [r4, r2]
 8008bb2:	e7c9      	b.n	8008b48 <_malloc_r+0x20>
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	6864      	ldr	r4, [r4, #4]
 8008bb8:	e7cc      	b.n	8008b54 <_malloc_r+0x2c>
 8008bba:	1cc4      	adds	r4, r0, #3
 8008bbc:	f024 0403 	bic.w	r4, r4, #3
 8008bc0:	42a0      	cmp	r0, r4
 8008bc2:	d0e3      	beq.n	8008b8c <_malloc_r+0x64>
 8008bc4:	1a21      	subs	r1, r4, r0
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	f000 f808 	bl	8008bdc <_sbrk_r>
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d1dd      	bne.n	8008b8c <_malloc_r+0x64>
 8008bd0:	e7cf      	b.n	8008b72 <_malloc_r+0x4a>
 8008bd2:	bf00      	nop
 8008bd4:	20000300 	.word	0x20000300
 8008bd8:	20000304 	.word	0x20000304

08008bdc <_sbrk_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4d06      	ldr	r5, [pc, #24]	; (8008bf8 <_sbrk_r+0x1c>)
 8008be0:	2300      	movs	r3, #0
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	602b      	str	r3, [r5, #0]
 8008be8:	f7fa fc90 	bl	800350c <_sbrk>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_sbrk_r+0x1a>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_sbrk_r+0x1a>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	2000053c 	.word	0x2000053c

08008bfc <__malloc_lock>:
 8008bfc:	4801      	ldr	r0, [pc, #4]	; (8008c04 <__malloc_lock+0x8>)
 8008bfe:	f000 b809 	b.w	8008c14 <__retarget_lock_acquire_recursive>
 8008c02:	bf00      	nop
 8008c04:	20000544 	.word	0x20000544

08008c08 <__malloc_unlock>:
 8008c08:	4801      	ldr	r0, [pc, #4]	; (8008c10 <__malloc_unlock+0x8>)
 8008c0a:	f000 b804 	b.w	8008c16 <__retarget_lock_release_recursive>
 8008c0e:	bf00      	nop
 8008c10:	20000544 	.word	0x20000544

08008c14 <__retarget_lock_acquire_recursive>:
 8008c14:	4770      	bx	lr

08008c16 <__retarget_lock_release_recursive>:
 8008c16:	4770      	bx	lr

08008c18 <sqrt>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	ed2d 8b02 	vpush	{d8}
 8008c1e:	ec55 4b10 	vmov	r4, r5, d0
 8008c22:	f000 f82d 	bl	8008c80 <__ieee754_sqrt>
 8008c26:	4b15      	ldr	r3, [pc, #84]	; (8008c7c <sqrt+0x64>)
 8008c28:	eeb0 8a40 	vmov.f32	s16, s0
 8008c2c:	eef0 8a60 	vmov.f32	s17, s1
 8008c30:	f993 3000 	ldrsb.w	r3, [r3]
 8008c34:	3301      	adds	r3, #1
 8008c36:	d019      	beq.n	8008c6c <sqrt+0x54>
 8008c38:	4622      	mov	r2, r4
 8008c3a:	462b      	mov	r3, r5
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	4629      	mov	r1, r5
 8008c40:	f7f7 ff20 	bl	8000a84 <__aeabi_dcmpun>
 8008c44:	b990      	cbnz	r0, 8008c6c <sqrt+0x54>
 8008c46:	2200      	movs	r2, #0
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	f7f7 fef1 	bl	8000a34 <__aeabi_dcmplt>
 8008c52:	b158      	cbz	r0, 8008c6c <sqrt+0x54>
 8008c54:	f7ff ff18 	bl	8008a88 <__errno>
 8008c58:	2321      	movs	r3, #33	; 0x21
 8008c5a:	6003      	str	r3, [r0, #0]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2300      	movs	r3, #0
 8008c60:	4610      	mov	r0, r2
 8008c62:	4619      	mov	r1, r3
 8008c64:	f7f7 fd9e 	bl	80007a4 <__aeabi_ddiv>
 8008c68:	ec41 0b18 	vmov	d8, r0, r1
 8008c6c:	eeb0 0a48 	vmov.f32	s0, s16
 8008c70:	eef0 0a68 	vmov.f32	s1, s17
 8008c74:	ecbd 8b02 	vpop	{d8}
 8008c78:	bd38      	pop	{r3, r4, r5, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000084 	.word	0x20000084

08008c80 <__ieee754_sqrt>:
 8008c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c84:	ec55 4b10 	vmov	r4, r5, d0
 8008c88:	4e56      	ldr	r6, [pc, #344]	; (8008de4 <__ieee754_sqrt+0x164>)
 8008c8a:	43ae      	bics	r6, r5
 8008c8c:	ee10 0a10 	vmov	r0, s0
 8008c90:	ee10 3a10 	vmov	r3, s0
 8008c94:	4629      	mov	r1, r5
 8008c96:	462a      	mov	r2, r5
 8008c98:	d110      	bne.n	8008cbc <__ieee754_sqrt+0x3c>
 8008c9a:	ee10 2a10 	vmov	r2, s0
 8008c9e:	462b      	mov	r3, r5
 8008ca0:	f7f7 fc56 	bl	8000550 <__aeabi_dmul>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	4620      	mov	r0, r4
 8008caa:	4629      	mov	r1, r5
 8008cac:	f7f7 fa9a 	bl	80001e4 <__adddf3>
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	ec45 4b10 	vmov	d0, r4, r5
 8008cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cbc:	2d00      	cmp	r5, #0
 8008cbe:	dc10      	bgt.n	8008ce2 <__ieee754_sqrt+0x62>
 8008cc0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008cc4:	4330      	orrs	r0, r6
 8008cc6:	d0f5      	beq.n	8008cb4 <__ieee754_sqrt+0x34>
 8008cc8:	b15d      	cbz	r5, 8008ce2 <__ieee754_sqrt+0x62>
 8008cca:	ee10 2a10 	vmov	r2, s0
 8008cce:	462b      	mov	r3, r5
 8008cd0:	ee10 0a10 	vmov	r0, s0
 8008cd4:	f7f7 fa84 	bl	80001e0 <__aeabi_dsub>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	f7f7 fd62 	bl	80007a4 <__aeabi_ddiv>
 8008ce0:	e7e6      	b.n	8008cb0 <__ieee754_sqrt+0x30>
 8008ce2:	1509      	asrs	r1, r1, #20
 8008ce4:	d076      	beq.n	8008dd4 <__ieee754_sqrt+0x154>
 8008ce6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008cea:	07ce      	lsls	r6, r1, #31
 8008cec:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008cf0:	bf5e      	ittt	pl
 8008cf2:	0fda      	lsrpl	r2, r3, #31
 8008cf4:	005b      	lslpl	r3, r3, #1
 8008cf6:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008cfa:	0fda      	lsrs	r2, r3, #31
 8008cfc:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008d00:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008d04:	2000      	movs	r0, #0
 8008d06:	106d      	asrs	r5, r5, #1
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	f04f 0e16 	mov.w	lr, #22
 8008d0e:	4684      	mov	ip, r0
 8008d10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d14:	eb0c 0401 	add.w	r4, ip, r1
 8008d18:	4294      	cmp	r4, r2
 8008d1a:	bfde      	ittt	le
 8008d1c:	1b12      	suble	r2, r2, r4
 8008d1e:	eb04 0c01 	addle.w	ip, r4, r1
 8008d22:	1840      	addle	r0, r0, r1
 8008d24:	0052      	lsls	r2, r2, #1
 8008d26:	f1be 0e01 	subs.w	lr, lr, #1
 8008d2a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008d2e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008d32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d36:	d1ed      	bne.n	8008d14 <__ieee754_sqrt+0x94>
 8008d38:	4671      	mov	r1, lr
 8008d3a:	2720      	movs	r7, #32
 8008d3c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008d40:	4562      	cmp	r2, ip
 8008d42:	eb04 060e 	add.w	r6, r4, lr
 8008d46:	dc02      	bgt.n	8008d4e <__ieee754_sqrt+0xce>
 8008d48:	d113      	bne.n	8008d72 <__ieee754_sqrt+0xf2>
 8008d4a:	429e      	cmp	r6, r3
 8008d4c:	d811      	bhi.n	8008d72 <__ieee754_sqrt+0xf2>
 8008d4e:	2e00      	cmp	r6, #0
 8008d50:	eb06 0e04 	add.w	lr, r6, r4
 8008d54:	da43      	bge.n	8008dde <__ieee754_sqrt+0x15e>
 8008d56:	f1be 0f00 	cmp.w	lr, #0
 8008d5a:	db40      	blt.n	8008dde <__ieee754_sqrt+0x15e>
 8008d5c:	f10c 0801 	add.w	r8, ip, #1
 8008d60:	eba2 020c 	sub.w	r2, r2, ip
 8008d64:	429e      	cmp	r6, r3
 8008d66:	bf88      	it	hi
 8008d68:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008d6c:	1b9b      	subs	r3, r3, r6
 8008d6e:	4421      	add	r1, r4
 8008d70:	46c4      	mov	ip, r8
 8008d72:	0052      	lsls	r2, r2, #1
 8008d74:	3f01      	subs	r7, #1
 8008d76:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008d7a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008d7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d82:	d1dd      	bne.n	8008d40 <__ieee754_sqrt+0xc0>
 8008d84:	4313      	orrs	r3, r2
 8008d86:	d006      	beq.n	8008d96 <__ieee754_sqrt+0x116>
 8008d88:	1c4c      	adds	r4, r1, #1
 8008d8a:	bf13      	iteet	ne
 8008d8c:	3101      	addne	r1, #1
 8008d8e:	3001      	addeq	r0, #1
 8008d90:	4639      	moveq	r1, r7
 8008d92:	f021 0101 	bicne.w	r1, r1, #1
 8008d96:	1043      	asrs	r3, r0, #1
 8008d98:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008d9c:	0849      	lsrs	r1, r1, #1
 8008d9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008da2:	07c2      	lsls	r2, r0, #31
 8008da4:	bf48      	it	mi
 8008da6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008daa:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008dae:	460c      	mov	r4, r1
 8008db0:	463d      	mov	r5, r7
 8008db2:	e77f      	b.n	8008cb4 <__ieee754_sqrt+0x34>
 8008db4:	0ada      	lsrs	r2, r3, #11
 8008db6:	3815      	subs	r0, #21
 8008db8:	055b      	lsls	r3, r3, #21
 8008dba:	2a00      	cmp	r2, #0
 8008dbc:	d0fa      	beq.n	8008db4 <__ieee754_sqrt+0x134>
 8008dbe:	02d7      	lsls	r7, r2, #11
 8008dc0:	d50a      	bpl.n	8008dd8 <__ieee754_sqrt+0x158>
 8008dc2:	f1c1 0420 	rsb	r4, r1, #32
 8008dc6:	fa23 f404 	lsr.w	r4, r3, r4
 8008dca:	1e4d      	subs	r5, r1, #1
 8008dcc:	408b      	lsls	r3, r1
 8008dce:	4322      	orrs	r2, r4
 8008dd0:	1b41      	subs	r1, r0, r5
 8008dd2:	e788      	b.n	8008ce6 <__ieee754_sqrt+0x66>
 8008dd4:	4608      	mov	r0, r1
 8008dd6:	e7f0      	b.n	8008dba <__ieee754_sqrt+0x13a>
 8008dd8:	0052      	lsls	r2, r2, #1
 8008dda:	3101      	adds	r1, #1
 8008ddc:	e7ef      	b.n	8008dbe <__ieee754_sqrt+0x13e>
 8008dde:	46e0      	mov	r8, ip
 8008de0:	e7be      	b.n	8008d60 <__ieee754_sqrt+0xe0>
 8008de2:	bf00      	nop
 8008de4:	7ff00000 	.word	0x7ff00000

08008de8 <_init>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	bf00      	nop
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr

08008df4 <_fini>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	bf00      	nop
 8008df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfa:	bc08      	pop	{r3}
 8008dfc:	469e      	mov	lr, r3
 8008dfe:	4770      	bx	lr
