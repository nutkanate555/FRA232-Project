
Project000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa78  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800ac10  0800ac10  0001ac10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac48  0800ac48  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac48  0800ac48  0001ac48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac50  0800ac50  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac50  0800ac50  0001ac50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac54  0800ac54  0001ac54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800ac58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  20000088  0800ace0  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  0800ace0  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe51  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f26  00000000  00000000  0002ff09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00031e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00032ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f59  00000000  00000000  00033e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fd2  00000000  00000000  0004ade9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b49  00000000  00000000  0005cdbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee904  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c14  00000000  00000000  000ee954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800abf8 	.word	0x0800abf8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	0800abf8 	.word	0x0800abf8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b974 	b.w	80010ac <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468e      	mov	lr, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d14d      	bne.n	8000e86 <__udivmoddi4+0xaa>
 8000dea:	428a      	cmp	r2, r1
 8000dec:	4694      	mov	ip, r2
 8000dee:	d969      	bls.n	8000ec4 <__udivmoddi4+0xe8>
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	b152      	cbz	r2, 8000e0c <__udivmoddi4+0x30>
 8000df6:	fa01 f302 	lsl.w	r3, r1, r2
 8000dfa:	f1c2 0120 	rsb	r1, r2, #32
 8000dfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000e02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e06:	ea41 0e03 	orr.w	lr, r1, r3
 8000e0a:	4094      	lsls	r4, r2
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	0c21      	lsrs	r1, r4, #16
 8000e12:	fbbe f6f8 	udiv	r6, lr, r8
 8000e16:	fa1f f78c 	uxth.w	r7, ip
 8000e1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e22:	fb06 f107 	mul.w	r1, r6, r7
 8000e26:	4299      	cmp	r1, r3
 8000e28:	d90a      	bls.n	8000e40 <__udivmoddi4+0x64>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e32:	f080 811f 	bcs.w	8001074 <__udivmoddi4+0x298>
 8000e36:	4299      	cmp	r1, r3
 8000e38:	f240 811c 	bls.w	8001074 <__udivmoddi4+0x298>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e48:	fb08 3310 	mls	r3, r8, r0, r3
 8000e4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e50:	fb00 f707 	mul.w	r7, r0, r7
 8000e54:	42a7      	cmp	r7, r4
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x92>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e60:	f080 810a 	bcs.w	8001078 <__udivmoddi4+0x29c>
 8000e64:	42a7      	cmp	r7, r4
 8000e66:	f240 8107 	bls.w	8001078 <__udivmoddi4+0x29c>
 8000e6a:	4464      	add	r4, ip
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	1be4      	subs	r4, r4, r7
 8000e74:	2600      	movs	r6, #0
 8000e76:	b11d      	cbz	r5, 8000e80 <__udivmoddi4+0xa4>
 8000e78:	40d4      	lsrs	r4, r2
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d909      	bls.n	8000e9e <__udivmoddi4+0xc2>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	f000 80ef 	beq.w	800106e <__udivmoddi4+0x292>
 8000e90:	2600      	movs	r6, #0
 8000e92:	e9c5 0100 	strd	r0, r1, [r5]
 8000e96:	4630      	mov	r0, r6
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	fab3 f683 	clz	r6, r3
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d14a      	bne.n	8000f3c <__udivmoddi4+0x160>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d302      	bcc.n	8000eb0 <__udivmoddi4+0xd4>
 8000eaa:	4282      	cmp	r2, r0
 8000eac:	f200 80f9 	bhi.w	80010a2 <__udivmoddi4+0x2c6>
 8000eb0:	1a84      	subs	r4, r0, r2
 8000eb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	469e      	mov	lr, r3
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	d0e0      	beq.n	8000e80 <__udivmoddi4+0xa4>
 8000ebe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ec2:	e7dd      	b.n	8000e80 <__udivmoddi4+0xa4>
 8000ec4:	b902      	cbnz	r2, 8000ec8 <__udivmoddi4+0xec>
 8000ec6:	deff      	udf	#255	; 0xff
 8000ec8:	fab2 f282 	clz	r2, r2
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f040 8092 	bne.w	8000ff6 <__udivmoddi4+0x21a>
 8000ed2:	eba1 010c 	sub.w	r1, r1, ip
 8000ed6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eda:	fa1f fe8c 	uxth.w	lr, ip
 8000ede:	2601      	movs	r6, #1
 8000ee0:	0c20      	lsrs	r0, r4, #16
 8000ee2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee6:	fb07 1113 	mls	r1, r7, r3, r1
 8000eea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eee:	fb0e f003 	mul.w	r0, lr, r3
 8000ef2:	4288      	cmp	r0, r1
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x12c>
 8000ef6:	eb1c 0101 	adds.w	r1, ip, r1
 8000efa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efe:	d202      	bcs.n	8000f06 <__udivmoddi4+0x12a>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f200 80cb 	bhi.w	800109c <__udivmoddi4+0x2c0>
 8000f06:	4643      	mov	r3, r8
 8000f08:	1a09      	subs	r1, r1, r0
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f10:	fb07 1110 	mls	r1, r7, r0, r1
 8000f14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f18:	fb0e fe00 	mul.w	lr, lr, r0
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x156>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f28:	d202      	bcs.n	8000f30 <__udivmoddi4+0x154>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	f200 80bb 	bhi.w	80010a6 <__udivmoddi4+0x2ca>
 8000f30:	4608      	mov	r0, r1
 8000f32:	eba4 040e 	sub.w	r4, r4, lr
 8000f36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f3a:	e79c      	b.n	8000e76 <__udivmoddi4+0x9a>
 8000f3c:	f1c6 0720 	rsb	r7, r6, #32
 8000f40:	40b3      	lsls	r3, r6
 8000f42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f52:	431c      	orrs	r4, r3
 8000f54:	40f9      	lsrs	r1, r7
 8000f56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f62:	0c20      	lsrs	r0, r4, #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fb09 1118 	mls	r1, r9, r8, r1
 8000f6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f70:	fb08 f00e 	mul.w	r0, r8, lr
 8000f74:	4288      	cmp	r0, r1
 8000f76:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7a:	d90b      	bls.n	8000f94 <__udivmoddi4+0x1b8>
 8000f7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f84:	f080 8088 	bcs.w	8001098 <__udivmoddi4+0x2bc>
 8000f88:	4288      	cmp	r0, r1
 8000f8a:	f240 8085 	bls.w	8001098 <__udivmoddi4+0x2bc>
 8000f8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f92:	4461      	add	r1, ip
 8000f94:	1a09      	subs	r1, r1, r0
 8000f96:	b2a4      	uxth	r4, r4
 8000f98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000fa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa8:	458e      	cmp	lr, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1e2>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb4:	d26c      	bcs.n	8001090 <__udivmoddi4+0x2b4>
 8000fb6:	458e      	cmp	lr, r1
 8000fb8:	d96a      	bls.n	8001090 <__udivmoddi4+0x2b4>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc6:	eba1 010e 	sub.w	r1, r1, lr
 8000fca:	42a1      	cmp	r1, r4
 8000fcc:	46c8      	mov	r8, r9
 8000fce:	46a6      	mov	lr, r4
 8000fd0:	d356      	bcc.n	8001080 <__udivmoddi4+0x2a4>
 8000fd2:	d053      	beq.n	800107c <__udivmoddi4+0x2a0>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x212>
 8000fd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000fda:	eb61 010e 	sbc.w	r1, r1, lr
 8000fde:	fa01 f707 	lsl.w	r7, r1, r7
 8000fe2:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe6:	40f1      	lsrs	r1, r6
 8000fe8:	431f      	orrs	r7, r3
 8000fea:	e9c5 7100 	strd	r7, r1, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	f1c2 0320 	rsb	r3, r2, #32
 8000ffa:	40d8      	lsrs	r0, r3
 8000ffc:	fa0c fc02 	lsl.w	ip, ip, r2
 8001000:	fa21 f303 	lsr.w	r3, r1, r3
 8001004:	4091      	lsls	r1, r2
 8001006:	4301      	orrs	r1, r0
 8001008:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800100c:	fa1f fe8c 	uxth.w	lr, ip
 8001010:	fbb3 f0f7 	udiv	r0, r3, r7
 8001014:	fb07 3610 	mls	r6, r7, r0, r3
 8001018:	0c0b      	lsrs	r3, r1, #16
 800101a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101e:	fb00 f60e 	mul.w	r6, r0, lr
 8001022:	429e      	cmp	r6, r3
 8001024:	fa04 f402 	lsl.w	r4, r4, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x260>
 800102a:	eb1c 0303 	adds.w	r3, ip, r3
 800102e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001032:	d22f      	bcs.n	8001094 <__udivmoddi4+0x2b8>
 8001034:	429e      	cmp	r6, r3
 8001036:	d92d      	bls.n	8001094 <__udivmoddi4+0x2b8>
 8001038:	3802      	subs	r0, #2
 800103a:	4463      	add	r3, ip
 800103c:	1b9b      	subs	r3, r3, r6
 800103e:	b289      	uxth	r1, r1
 8001040:	fbb3 f6f7 	udiv	r6, r3, r7
 8001044:	fb07 3316 	mls	r3, r7, r6, r3
 8001048:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104c:	fb06 f30e 	mul.w	r3, r6, lr
 8001050:	428b      	cmp	r3, r1
 8001052:	d908      	bls.n	8001066 <__udivmoddi4+0x28a>
 8001054:	eb1c 0101 	adds.w	r1, ip, r1
 8001058:	f106 38ff 	add.w	r8, r6, #4294967295
 800105c:	d216      	bcs.n	800108c <__udivmoddi4+0x2b0>
 800105e:	428b      	cmp	r3, r1
 8001060:	d914      	bls.n	800108c <__udivmoddi4+0x2b0>
 8001062:	3e02      	subs	r6, #2
 8001064:	4461      	add	r1, ip
 8001066:	1ac9      	subs	r1, r1, r3
 8001068:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800106c:	e738      	b.n	8000ee0 <__udivmoddi4+0x104>
 800106e:	462e      	mov	r6, r5
 8001070:	4628      	mov	r0, r5
 8001072:	e705      	b.n	8000e80 <__udivmoddi4+0xa4>
 8001074:	4606      	mov	r6, r0
 8001076:	e6e3      	b.n	8000e40 <__udivmoddi4+0x64>
 8001078:	4618      	mov	r0, r3
 800107a:	e6f8      	b.n	8000e6e <__udivmoddi4+0x92>
 800107c:	454b      	cmp	r3, r9
 800107e:	d2a9      	bcs.n	8000fd4 <__udivmoddi4+0x1f8>
 8001080:	ebb9 0802 	subs.w	r8, r9, r2
 8001084:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001088:	3801      	subs	r0, #1
 800108a:	e7a3      	b.n	8000fd4 <__udivmoddi4+0x1f8>
 800108c:	4646      	mov	r6, r8
 800108e:	e7ea      	b.n	8001066 <__udivmoddi4+0x28a>
 8001090:	4620      	mov	r0, r4
 8001092:	e794      	b.n	8000fbe <__udivmoddi4+0x1e2>
 8001094:	4640      	mov	r0, r8
 8001096:	e7d1      	b.n	800103c <__udivmoddi4+0x260>
 8001098:	46d0      	mov	r8, sl
 800109a:	e77b      	b.n	8000f94 <__udivmoddi4+0x1b8>
 800109c:	3b02      	subs	r3, #2
 800109e:	4461      	add	r1, ip
 80010a0:	e732      	b.n	8000f08 <__udivmoddi4+0x12c>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e709      	b.n	8000eba <__udivmoddi4+0xde>
 80010a6:	4464      	add	r4, ip
 80010a8:	3802      	subs	r0, #2
 80010aa:	e742      	b.n	8000f32 <__udivmoddi4+0x156>

080010ac <__aeabi_idiv0>:
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b8:	f003 fcb8 	bl	8004a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010bc:	f000 fa0a 	bl	80014d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c0:	f000 fc0c 	bl	80018dc <MX_GPIO_Init>
  MX_DMA_Init();
 80010c4:	f000 fbe2 	bl	800188c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010c8:	f000 fbb4 	bl	8001834 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010cc:	f000 fa98 	bl	8001600 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010d0:	f000 faee 	bl	80016b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010d4:	f000 fb38 	bl	8001748 <MX_TIM3_Init>
  MX_I2C1_Init();
 80010d8:	f000 fa64 	bl	80015a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010dc:	48b8      	ldr	r0, [pc, #736]	; (80013c0 <main+0x310>)
 80010de:	f007 fb13 	bl	8008708 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010e2:	213c      	movs	r1, #60	; 0x3c
 80010e4:	48b7      	ldr	r0, [pc, #732]	; (80013c4 <main+0x314>)
 80010e6:	f007 fd21 	bl	8008b2c <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010ea:	48b7      	ldr	r0, [pc, #732]	; (80013c8 <main+0x318>)
 80010ec:	f007 fab2 	bl	8008654 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010f0:	2100      	movs	r1, #0
 80010f2:	48b5      	ldr	r0, [pc, #724]	; (80013c8 <main+0x318>)
 80010f4:	f007 fbc4 	bl	8008880 <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010f8:	48b4      	ldr	r0, [pc, #720]	; (80013cc <main+0x31c>)
 80010fa:	f000 fdf9 	bl	8001cf0 <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010fe:	49b3      	ldr	r1, [pc, #716]	; (80013cc <main+0x31c>)
 8001100:	48b3      	ldr	r0, [pc, #716]	; (80013d0 <main+0x320>)
 8001102:	f000 fe0d 	bl	8001d20 <TrajectoryGenerationStructureInit>

  StabilizerPIDLoad();
 8001106:	f001 f807 	bl	8002118 <StabilizerPIDLoad>
  LinkMovingPIDLoad();
 800110a:	f000 fead 	bl	8001e68 <LinkMovingPIDLoad>
  VelocityPurePIDLoad();
 800110e:	f001 f837 	bl	8002180 <VelocityPurePIDLoad>

  Encoder_SetHome_Position();
 8001112:	f000 fd6f 	bl	8001bf4 <Encoder_SetHome_Position>

  ///UART init
  UART2.huart = &huart2;
 8001116:	4baf      	ldr	r3, [pc, #700]	; (80013d4 <main+0x324>)
 8001118:	4aaf      	ldr	r2, [pc, #700]	; (80013d8 <main+0x328>)
 800111a:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 800111c:	4bad      	ldr	r3, [pc, #692]	; (80013d4 <main+0x324>)
 800111e:	22ff      	movs	r2, #255	; 0xff
 8001120:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8001122:	4bac      	ldr	r3, [pc, #688]	; (80013d4 <main+0x324>)
 8001124:	22ff      	movs	r2, #255	; 0xff
 8001126:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 8001128:	48aa      	ldr	r0, [pc, #680]	; (80013d4 <main+0x324>)
 800112a:	f002 f8e7 	bl	80032fc <UARTInit>
  UARTResetStart(&UART2);
 800112e:	48a9      	ldr	r0, [pc, #676]	; (80013d4 <main+0x324>)
 8001130:	f002 f90c 	bl	800334c <UARTResetStart>

  HAL_Delay( 100 );
 8001134:	2064      	movs	r0, #100	; 0x64
 8001136:	f003 fceb 	bl	8004b10 <HAL_Delay>
  if (EndeffectorTestMode == 1)
 800113a:	4ba8      	ldr	r3, [pc, #672]	; (80013dc <main+0x32c>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d10c      	bne.n	800115c <main+0xac>
  {
	  while (1)
	  {
		  {
				uint8_t temp[1] = {0x45};
 8001142:	2345      	movs	r3, #69	; 0x45
 8001144:	713b      	strb	r3, [r7, #4]
				HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 8001146:	1d3a      	adds	r2, r7, #4
 8001148:	2301      	movs	r3, #1
 800114a:	2146      	movs	r1, #70	; 0x46
 800114c:	48a4      	ldr	r0, [pc, #656]	; (80013e0 <main+0x330>)
 800114e:	f004 fe35 	bl	8005dbc <HAL_I2C_Master_Transmit_IT>
				HAL_Delay( 6000 );
 8001152:	f241 7070 	movw	r0, #6000	; 0x1770
 8001156:	f003 fcdb 	bl	8004b10 <HAL_Delay>
		  {
 800115a:	e7f2      	b.n	8001142 <main+0x92>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 800115c:	489d      	ldr	r0, [pc, #628]	; (80013d4 <main+0x324>)
 800115e:	f002 f919 	bl	8003394 <UARTReadChar>
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 8001166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116e:	d005      	beq.n	800117c <main+0xcc>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 8001170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001174:	4997      	ldr	r1, [pc, #604]	; (80013d4 <main+0x324>)
 8001176:	4618      	mov	r0, r3
 8001178:	f002 f9f2 	bl	8003560 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 800117c:	4b99      	ldr	r3, [pc, #612]	; (80013e4 <main+0x334>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b08      	cmp	r3, #8
 8001182:	f200 8177 	bhi.w	8001474 <main+0x3c4>
 8001186:	a201      	add	r2, pc, #4	; (adr r2, 800118c <main+0xdc>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	080011b1 	.word	0x080011b1
 8001190:	080011df 	.word	0x080011df
 8001194:	080011fb 	.word	0x080011fb
 8001198:	08001215 	.word	0x08001215
 800119c:	0800122f 	.word	0x0800122f
 80011a0:	08001277 	.word	0x08001277
 80011a4:	08001305 	.word	0x08001305
 80011a8:	0800144d 	.word	0x0800144d
 80011ac:	0800145b 	.word	0x0800145b
	  {
	  	  case STATE_Disconnected:
	  		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0)
 80011b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b4:	488c      	ldr	r0, [pc, #560]	; (80013e8 <main+0x338>)
 80011b6:	f004 fb75 	bl	80058a4 <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d103      	bne.n	80011c8 <main+0x118>
	  		  {
	  			  LAMP_ON(0);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f002 fe85 	bl	8003ed0 <LAMP_ON>
 80011c6:	e002      	b.n	80011ce <main+0x11e>
	  		  }
	  		  else
	  		  {
	  			  LAMP_ON(4);
 80011c8:	2004      	movs	r0, #4
 80011ca:	f002 fe81 	bl	8003ed0 <LAMP_ON>
	  		  }
	  		  UpdateMunmunBotState();
 80011ce:	f003 f8c9 	bl	8004364 <UpdateMunmunBotState>
	  		  sethomeTrigger = 0;
 80011d2:	4b86      	ldr	r3, [pc, #536]	; (80013ec <main+0x33c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 80011d8:	f002 feea 	bl	8003fb0 <Emergency_switch_trigger>
	  		  break;
 80011dc:	e14a      	b.n	8001474 <main+0x3c4>

	  	  case STATE_Idle:
	  		  LAMP_ON(1);
 80011de:	2001      	movs	r0, #1
 80011e0:	f002 fe76 	bl	8003ed0 <LAMP_ON>
	  		  UpdateMunmunBotState();
 80011e4:	f003 f8be 	bl	8004364 <UpdateMunmunBotState>
//	  		  Stabilizing_the_LINK( StabilizePosition );
//	  		  Controlling_the_LINK_Velo( StabilizeVelocity );
	  		  if ( sethomeTrigger == 1 )
 80011e8:	4b80      	ldr	r3, [pc, #512]	; (80013ec <main+0x33c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <main+0x144>
	  		  {
	  			  Encoder_SetHome_Position();
 80011f0:	f000 fd00 	bl	8001bf4 <Encoder_SetHome_Position>
	  		  }
	  		  Emergency_switch_trigger();
 80011f4:	f002 fedc 	bl	8003fb0 <Emergency_switch_trigger>
		  	  break;
 80011f8:	e13c      	b.n	8001474 <main+0x3c4>

	  	  case STATE_PrepareDATA:
	  		  sethomeTrigger = 0;
 80011fa:	4b7c      	ldr	r3, [pc, #496]	; (80013ec <main+0x33c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
	  		  UpdateMunmunBotState();
 8001200:	f003 f8b0 	bl	8004364 <UpdateMunmunBotState>
	  		  LAMP_ON(2);
 8001204:	2002      	movs	r0, #2
 8001206:	f002 fe63 	bl	8003ed0 <LAMP_ON>
	  		  TrajectoryGenerationPrepareDATA();
 800120a:	f001 f825 	bl	8002258 <TrajectoryGenerationPrepareDATA>
	  		  Emergency_switch_trigger();
 800120e:	f002 fecf 	bl	8003fb0 <Emergency_switch_trigger>
		  	  break;
 8001212:	e12f      	b.n	8001474 <main+0x3c4>

	  	  case STATE_Calculation:
	  		  LAMP_ON(2);
 8001214:	2002      	movs	r0, #2
 8001216:	f002 fe5b 	bl	8003ed0 <LAMP_ON>
	  		  UpdateMunmunBotState();
 800121a:	f003 f8a3 	bl	8004364 <UpdateMunmunBotState>
	  		  TrajectoryGenerationCalculation();
 800121e:	f001 f977 	bl	8002510 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 8001222:	4b70      	ldr	r3, [pc, #448]	; (80013e4 <main+0x334>)
 8001224:	2204      	movs	r2, #4
 8001226:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 8001228:	f002 fec2 	bl	8003fb0 <Emergency_switch_trigger>
	  		  break;
 800122c:	e122      	b.n	8001474 <main+0x3c4>

	   	  case STATE_Link_Moving:
	   		  LAMP_ON(2);
 800122e:	2002      	movs	r0, #2
 8001230:	f002 fe4e 	bl	8003ed0 <LAMP_ON>
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8001234:	f000 fd42 	bl	8001cbc <micros>
 8001238:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <main+0x320>)
 800123a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800123e:	1a84      	subs	r4, r0, r2
 8001240:	eb61 0503 	sbc.w	r5, r1, r3
 8001244:	4b62      	ldr	r3, [pc, #392]	; (80013d0 <main+0x320>)
 8001246:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800124a:	4294      	cmp	r4, r2
 800124c:	eb75 0303 	sbcs.w	r3, r5, r3
 8001250:	d30e      	bcc.n	8001270 <main+0x1c0>
	   		  {
	   			  Controlling_the_LINK();
 8001252:	f002 ff07 	bl	8004064 <Controlling_the_LINK>


				  if (Moving_Link_Task_Flag == 1)
 8001256:	4b66      	ldr	r3, [pc, #408]	; (80013f0 <main+0x340>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d108      	bne.n	8001270 <main+0x1c0>
				  {
					  Munmunbot_State = STATE_Stabilized_Link;
 800125e:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <main+0x334>)
 8001260:	2205      	movs	r2, #5
 8001262:	701a      	strb	r2, [r3, #0]
					  StabilizePosition = TrjStruc.Desire_Theta;
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <main+0x320>)
 8001266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001268:	4a62      	ldr	r2, [pc, #392]	; (80013f4 <main+0x344>)
 800126a:	6013      	str	r3, [r2, #0]
					  PID_Reset();
 800126c:	f002 fdc0 	bl	8003df0 <PID_Reset>
				  }
	   		  }
	  		  Emergency_switch_trigger();
 8001270:	f002 fe9e 	bl	8003fb0 <Emergency_switch_trigger>
	  		  break;
 8001274:	e0fe      	b.n	8001474 <main+0x3c4>

	   	  case STATE_Stabilized_Link:
	   		  LAMP_ON(2);
 8001276:	2002      	movs	r0, #2
 8001278:	f002 fe2a 	bl	8003ed0 <LAMP_ON>
//	   		  Stabilizing_the_LINK( StabilizePosition );
	   		  HackTheLink( StabilizePosition );
 800127c:	4b5d      	ldr	r3, [pc, #372]	; (80013f4 <main+0x344>)
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	eeb0 0a67 	vmov.f32	s0, s15
 8001286:	f002 ff55 	bl	8004134 <HackTheLink>
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 800128a:	4b5b      	ldr	r3, [pc, #364]	; (80013f8 <main+0x348>)
 800128c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001290:	4b4f      	ldr	r3, [pc, #316]	; (80013d0 <main+0x320>)
 8001292:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001296:	4b59      	ldr	r3, [pc, #356]	; (80013fc <main+0x34c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80012a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	d826      	bhi.n	80012fe <main+0x24e>
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 80012b0:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <main+0x348>)
 80012b2:	ed93 7a08 	vldr	s14, [r3, #32]
 80012b6:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <main+0x320>)
 80012b8:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80012bc:	4b4f      	ldr	r3, [pc, #316]	; (80013fc <main+0x34c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 80012cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	db13      	blt.n	80012fe <main+0x24e>
					  (Moving_Link_Task_Flag == 1))
 80012d6:	4b46      	ldr	r3, [pc, #280]	; (80013f0 <main+0x340>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d10f      	bne.n	80012fe <main+0x24e>
			  {
				    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80012de:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <main+0x318>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2200      	movs	r2, #0
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34
					Munmunbot_State = STATE_Verified;
 80012e6:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <main+0x334>)
 80012e8:	2206      	movs	r2, #6
 80012ea:	701a      	strb	r2, [r3, #0]
					Verified_Timestamp = micros();
 80012ec:	f000 fce6 	bl	8001cbc <micros>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4942      	ldr	r1, [pc, #264]	; (8001400 <main+0x350>)
 80012f6:	e9c1 2300 	strd	r2, r3, [r1]
					PID_Reset();
 80012fa:	f002 fd79 	bl	8003df0 <PID_Reset>
			  }
	   		  Emergency_switch_trigger();
 80012fe:	f002 fe57 	bl	8003fb0 <Emergency_switch_trigger>
	   		  break;
 8001302:	e0b7      	b.n	8001474 <main+0x3c4>
	   	  case STATE_Verified:
	   	  {
	   		  LAMP_ON(2);
 8001304:	2002      	movs	r0, #2
 8001306:	f002 fde3 	bl	8003ed0 <LAMP_ON>
	   		  UpdateMunmunBotState();
 800130a:	f003 f82b 	bl	8004364 <UpdateMunmunBotState>
	   		  if ( micros()-Verified_Timestamp >= 0.5*1000000  )
 800130e:	f000 fcd5 	bl	8001cbc <micros>
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <main+0x350>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	ebb0 0802 	subs.w	r8, r0, r2
 800131c:	eb61 0903 	sbc.w	r9, r1, r3
 8001320:	4640      	mov	r0, r8
 8001322:	4649      	mov	r1, r9
 8001324:	f7ff f8de 	bl	80004e4 <__aeabi_ul2d>
 8001328:	a323      	add	r3, pc, #140	; (adr r3, 80013b8 <main+0x308>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7ff fb95 	bl	8000a5c <__aeabi_dcmpge>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 8086 	beq.w	8001446 <main+0x396>
	   		  {

				  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <main+0x348>)
 800133c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <main+0x320>)
 8001342:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <main+0x34c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001356:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135e:	d86f      	bhi.n	8001440 <main+0x390>
						  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <main+0x348>)
 8001362:	ed93 7a08 	vldr	s14, [r3, #32]
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <main+0x320>)
 8001368:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <main+0x34c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001378:	ee76 7ae7 	vsub.f32	s15, s13, s15
				  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + AcceptableError) &&
 800137c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	db5c      	blt.n	8001440 <main+0x390>
						  (Moving_Link_Task_Flag == 1))
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <main+0x340>)
 8001388:	781b      	ldrb	r3, [r3, #0]
						  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - AcceptableError) &&
 800138a:	2b01      	cmp	r3, #1
 800138c:	d158      	bne.n	8001440 <main+0x390>
				  {
					  if(MovingLinkMode == LMM_Set_Pos_Directly)
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <main+0x354>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d138      	bne.n	8001408 <main+0x358>
					  {
						Munmunbot_State = STATE_Idle;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <main+0x334>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
						MovingLinkMode = LMM_Not_Set;
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <main+0x354>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
						StabilizePosition = TrjStruc.Desire_Theta;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <main+0x320>)
 80013a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013a6:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <main+0x344>)
 80013a8:	6013      	str	r3, [r2, #0]
						PID_Reset();
 80013aa:	f002 fd21 	bl	8003df0 <PID_Reset>
						ACK2Return(&UART2);
 80013ae:	4809      	ldr	r0, [pc, #36]	; (80013d4 <main+0x324>)
 80013b0:	f002 f8c4 	bl	800353c <ACK2Return>
 80013b4:	e03c      	b.n	8001430 <main+0x380>
 80013b6:	bf00      	nop
 80013b8:	00000000 	.word	0x00000000
 80013bc:	411e8480 	.word	0x411e8480
 80013c0:	20000140 	.word	0x20000140
 80013c4:	200000f8 	.word	0x200000f8
 80013c8:	20000188 	.word	0x20000188
 80013cc:	200005c0 	.word	0x200005c0
 80013d0:	20000530 	.word	0x20000530
 80013d4:	200002e0 	.word	0x200002e0
 80013d8:	200001d0 	.word	0x200001d0
 80013dc:	200005cd 	.word	0x200005cd
 80013e0:	200000a4 	.word	0x200000a4
 80013e4:	20000301 	.word	0x20000301
 80013e8:	40020400 	.word	0x40020400
 80013ec:	20000411 	.word	0x20000411
 80013f0:	20000410 	.word	0x20000410
 80013f4:	20000420 	.word	0x20000420
 80013f8:	20000430 	.word	0x20000430
 80013fc:	20000015 	.word	0x20000015
 8001400:	20000428 	.word	0x20000428
 8001404:	20000406 	.word	0x20000406
					  }

					  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <main+0x3f8>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d003      	beq.n	8001418 <main+0x368>
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <main+0x3f8>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d10b      	bne.n	8001430 <main+0x380>
					  {
						Munmunbot_State = STATE_End_Effector_Working;
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <main+0x3fc>)
 800141a:	2207      	movs	r2, #7
 800141c:	701a      	strb	r2, [r3, #0]
						GripperState = 0;
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <main+0x400>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
						StabilizePosition = TrjStruc.Desire_Theta;
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <main+0x404>)
 8001426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001428:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <main+0x408>)
 800142a:	6013      	str	r3, [r2, #0]
						PID_Reset();
 800142c:	f002 fce0 	bl	8003df0 <PID_Reset>
					  }
					 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <main+0x40c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
					 Moving_Link_Task_Flag = 0;
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <main+0x410>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	e002      	b.n	8001446 <main+0x396>
				  }
				  else
				  {
					  Munmunbot_State =  STATE_Stabilized_Link;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <main+0x3fc>)
 8001442:	2205      	movs	r2, #5
 8001444:	701a      	strb	r2, [r3, #0]
				  }
	   		  }
	   		  Emergency_switch_trigger();
 8001446:	f002 fdb3 	bl	8003fb0 <Emergency_switch_trigger>
	   		  break;
 800144a:	e013      	b.n	8001474 <main+0x3c4>
	   	  }
	  	  case STATE_End_Effector_Working:
	  		  UpdateMunmunBotState();
 800144c:	f002 ff8a 	bl	8004364 <UpdateMunmunBotState>
	  		  EndEffectorWorkingState();
 8001450:	f002 ffa6 	bl	80043a0 <EndEffectorWorkingState>
	  		  Emergency_switch_trigger();
 8001454:	f002 fdac 	bl	8003fb0 <Emergency_switch_trigger>
	  		  break;
 8001458:	e00c      	b.n	8001474 <main+0x3c4>

	  	  case STATE_SetHome:
	  		  sethomeTrigger = 0;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <main+0x414>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	  		  LAMP_ON(2);
 8001460:	2002      	movs	r0, #2
 8001462:	f002 fd35 	bl	8003ed0 <LAMP_ON>
	  		  UpdateMunmunBotState();
 8001466:	f002 ff7d 	bl	8004364 <UpdateMunmunBotState>
	  		  SETHOME_StateMachine_Function();
 800146a:	f002 ff2f 	bl	80042cc <SETHOME_StateMachine_Function>
	  		  Emergency_switch_trigger();
 800146e:	f002 fd9f 	bl	8003fb0 <Emergency_switch_trigger>
	  		  break;
 8001472:	bf00      	nop

	  }

	  if ( pidSetZeroFlag != 0 )
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <main+0x418>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d010      	beq.n	800149e <main+0x3ee>
	  {
		  pidSetZeroFlag = 0;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <main+0x418>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <main+0x40c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2200      	movs	r2, #0
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
		  TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <main+0x41c>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <main+0x404>)
 8001490:	66d3      	str	r3, [r2, #108]	; 0x6c
		  TrjStruc.AngularVelocityDesire = 0;
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <main+0x404>)
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
		  PID_Reset();
 800149a:	f002 fca9 	bl	8003df0 <PID_Reset>
	  }



	  UARTTxDumpBuffer(&UART2);
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <main+0x420>)
 80014a0:	f001 ffa2 	bl	80033e8 <UARTTxDumpBuffer>
  {
 80014a4:	e65a      	b.n	800115c <main+0xac>
 80014a6:	bf00      	nop
 80014a8:	20000406 	.word	0x20000406
 80014ac:	20000301 	.word	0x20000301
 80014b0:	20000412 	.word	0x20000412
 80014b4:	20000530 	.word	0x20000530
 80014b8:	20000420 	.word	0x20000420
 80014bc:	20000188 	.word	0x20000188
 80014c0:	20000410 	.word	0x20000410
 80014c4:	20000411 	.word	0x20000411
 80014c8:	200002d4 	.word	0x200002d4
 80014cc:	20000430 	.word	0x20000430
 80014d0:	200002e0 	.word	0x200002e0

080014d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	; 0x50
 80014d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	2230      	movs	r2, #48	; 0x30
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f009 f9da 	bl	800a89c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <SystemClock_Config+0xc8>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a26      	ldr	r2, [pc, #152]	; (800159c <SystemClock_Config+0xc8>)
 8001502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <SystemClock_Config+0xc8>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <SystemClock_Config+0xcc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a20      	ldr	r2, [pc, #128]	; (80015a0 <SystemClock_Config+0xcc>)
 800151e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <SystemClock_Config+0xcc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001530:	2302      	movs	r3, #2
 8001532:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001534:	2301      	movs	r3, #1
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001538:	2310      	movs	r3, #16
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153c:	2302      	movs	r3, #2
 800153e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001540:	2300      	movs	r3, #0
 8001542:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001544:	2308      	movs	r3, #8
 8001546:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001548:	2364      	movs	r3, #100	; 0x64
 800154a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800154c:	2302      	movs	r3, #2
 800154e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001550:	2304      	movs	r3, #4
 8001552:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001554:	f107 0320 	add.w	r3, r7, #32
 8001558:	4618      	mov	r0, r3
 800155a:	f006 fb93 	bl	8007c84 <HAL_RCC_OscConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001564:	f002 ff78 	bl	8004458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001568:	230f      	movs	r3, #15
 800156a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156c:	2302      	movs	r3, #2
 800156e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2103      	movs	r1, #3
 8001584:	4618      	mov	r0, r3
 8001586:	f006 fdf5 	bl	8008174 <HAL_RCC_ClockConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001590:	f002 ff62 	bl	8004458 <Error_Handler>
  }
}
 8001594:	bf00      	nop
 8001596:	3750      	adds	r7, #80	; 0x50
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000

080015a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <MX_I2C1_Init+0x58>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80015b4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015d8:	2200      	movs	r2, #0
 80015da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015de:	2200      	movs	r2, #0
 80015e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015e4:	f004 f9a8 	bl	8005938 <HAL_I2C_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80015ee:	f002 ff33 	bl	8004458 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200000a4 	.word	0x200000a4
 80015fc:	40005400 	.word	0x40005400

08001600 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2224      	movs	r2, #36	; 0x24
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f009 f944 	bl	800a89c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_TIM1_Init+0xa8>)
 800161e:	4a23      	ldr	r2, [pc, #140]	; (80016ac <MX_TIM1_Init+0xac>)
 8001620:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_TIM1_Init+0xa8>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_TIM1_Init+0xa8>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24575;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_TIM1_Init+0xa8>)
 8001630:	f645 72ff 	movw	r2, #24575	; 0x5fff
 8001634:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MX_TIM1_Init+0xa8>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_TIM1_Init+0xa8>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_TIM1_Init+0xa8>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001648:	2303      	movs	r3, #3
 800164a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001650:	2301      	movs	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001658:	2302      	movs	r3, #2
 800165a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001660:	2301      	movs	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_TIM1_Init+0xa8>)
 8001674:	f007 f9b4 	bl	80089e0 <HAL_TIM_Encoder_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800167e:	f002 feeb 	bl	8004458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_TIM1_Init+0xa8>)
 8001690:	f008 f858 	bl	8009744 <HAL_TIMEx_MasterConfigSynchronization>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800169a:	f002 fedd 	bl	8004458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3730      	adds	r7, #48	; 0x30
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200000f8 	.word	0x200000f8
 80016ac:	40010000 	.word	0x40010000

080016b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_TIM2_Init+0x94>)
 80016ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_TIM2_Init+0x94>)
 80016d6:	2263      	movs	r2, #99	; 0x63
 80016d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_TIM2_Init+0x94>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_TIM2_Init+0x94>)
 80016e2:	f04f 32ff 	mov.w	r2, #4294967295
 80016e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_TIM2_Init+0x94>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_TIM2_Init+0x94>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f4:	4813      	ldr	r0, [pc, #76]	; (8001744 <MX_TIM2_Init+0x94>)
 80016f6:	f006 ff5d 	bl	80085b4 <HAL_TIM_Base_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001700:	f002 feaa 	bl	8004458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <MX_TIM2_Init+0x94>)
 8001712:	f007 fc5f 	bl	8008fd4 <HAL_TIM_ConfigClockSource>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800171c:	f002 fe9c 	bl	8004458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001728:	463b      	mov	r3, r7
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_TIM2_Init+0x94>)
 800172e:	f008 f809 	bl	8009744 <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001738:	f002 fe8e 	bl	8004458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000140 	.word	0x20000140

08001748 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08e      	sub	sp, #56	; 0x38
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	f107 0320 	add.w	r3, r7, #32
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	615a      	str	r2, [r3, #20]
 8001776:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001778:	4b2c      	ldr	r3, [pc, #176]	; (800182c <MX_TIM3_Init+0xe4>)
 800177a:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <MX_TIM3_Init+0xe8>)
 800177c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <MX_TIM3_Init+0xe4>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <MX_TIM3_Init+0xe4>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800178a:	4b28      	ldr	r3, [pc, #160]	; (800182c <MX_TIM3_Init+0xe4>)
 800178c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001790:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <MX_TIM3_Init+0xe4>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <MX_TIM3_Init+0xe4>)
 800179a:	2200      	movs	r2, #0
 800179c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800179e:	4823      	ldr	r0, [pc, #140]	; (800182c <MX_TIM3_Init+0xe4>)
 80017a0:	f006 ff08 	bl	80085b4 <HAL_TIM_Base_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017aa:	f002 fe55 	bl	8004458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b8:	4619      	mov	r1, r3
 80017ba:	481c      	ldr	r0, [pc, #112]	; (800182c <MX_TIM3_Init+0xe4>)
 80017bc:	f007 fc0a 	bl	8008fd4 <HAL_TIM_ConfigClockSource>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80017c6:	f002 fe47 	bl	8004458 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017ca:	4818      	ldr	r0, [pc, #96]	; (800182c <MX_TIM3_Init+0xe4>)
 80017cc:	f006 fffe 	bl	80087cc <HAL_TIM_PWM_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80017d6:	f002 fe3f 	bl	8004458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017e2:	f107 0320 	add.w	r3, r7, #32
 80017e6:	4619      	mov	r1, r3
 80017e8:	4810      	ldr	r0, [pc, #64]	; (800182c <MX_TIM3_Init+0xe4>)
 80017ea:	f007 ffab 	bl	8009744 <HAL_TIMEx_MasterConfigSynchronization>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017f4:	f002 fe30 	bl	8004458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f8:	2360      	movs	r3, #96	; 0x60
 80017fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	4619      	mov	r1, r3
 800180e:	4807      	ldr	r0, [pc, #28]	; (800182c <MX_TIM3_Init+0xe4>)
 8001810:	f007 fb22 	bl	8008e58 <HAL_TIM_PWM_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800181a:	f002 fe1d 	bl	8004458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800181e:	4803      	ldr	r0, [pc, #12]	; (800182c <MX_TIM3_Init+0xe4>)
 8001820:	f002 ff24 	bl	800466c <HAL_TIM_MspPostInit>

}
 8001824:	bf00      	nop
 8001826:	3738      	adds	r7, #56	; 0x38
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000188 	.word	0x20000188
 8001830:	40000400 	.word	0x40000400

08001834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_USART2_UART_Init+0x50>)
 800183a:	4a13      	ldr	r2, [pc, #76]	; (8001888 <MX_USART2_UART_Init+0x54>)
 800183c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_USART2_UART_Init+0x50>)
 8001840:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_USART2_UART_Init+0x50>)
 8001848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800184c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <MX_USART2_UART_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <MX_USART2_UART_Init+0x50>)
 8001856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_USART2_UART_Init+0x50>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <MX_USART2_UART_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <MX_USART2_UART_Init+0x50>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_USART2_UART_Init+0x50>)
 8001870:	f007 ffea 	bl	8009848 <HAL_UART_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800187a:	f002 fded 	bl	8004458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200001d0 	.word	0x200001d0
 8001888:	40004400 	.word	0x40004400

0800188c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <MX_DMA_Init+0x4c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <MX_DMA_Init+0x4c>)
 800189c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <MX_DMA_Init+0x4c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2010      	movs	r0, #16
 80018b4:	f003 fa2b 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018b8:	2010      	movs	r0, #16
 80018ba:	f003 fa44 	bl	8004d46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2011      	movs	r0, #17
 80018c4:	f003 fa23 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80018c8:	2011      	movs	r0, #17
 80018ca:	f003 fa3c 	bl	8004d46 <HAL_NVIC_EnableIRQ>

}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b5f      	ldr	r3, [pc, #380]	; (8001a74 <MX_GPIO_Init+0x198>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a5e      	ldr	r2, [pc, #376]	; (8001a74 <MX_GPIO_Init+0x198>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b5c      	ldr	r3, [pc, #368]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b58      	ldr	r3, [pc, #352]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a57      	ldr	r2, [pc, #348]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b55      	ldr	r3, [pc, #340]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	4b51      	ldr	r3, [pc, #324]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a50      	ldr	r2, [pc, #320]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b4e      	ldr	r3, [pc, #312]	; (8001a74 <MX_GPIO_Init+0x198>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <MX_GPIO_Init+0x198>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a49      	ldr	r2, [pc, #292]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <MX_GPIO_Init+0x198>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2120      	movs	r1, #32
 8001966:	4844      	ldr	r0, [pc, #272]	; (8001a78 <MX_GPIO_Init+0x19c>)
 8001968:	f003 ffb4 	bl	80058d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lamp1_Pin|Lamp2_Pin, GPIO_PIN_SET);
 800196c:	2201      	movs	r2, #1
 800196e:	2106      	movs	r1, #6
 8001970:	4842      	ldr	r0, [pc, #264]	; (8001a7c <MX_GPIO_Init+0x1a0>)
 8001972:	f003 ffaf 	bl	80058d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2180      	movs	r1, #128	; 0x80
 800197a:	4841      	ldr	r0, [pc, #260]	; (8001a80 <MX_GPIO_Init+0x1a4>)
 800197c:	f003 ffaa 	bl	80058d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp3_GPIO_Port, Lamp3_Pin, GPIO_PIN_SET);
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001986:	483c      	ldr	r0, [pc, #240]	; (8001a78 <MX_GPIO_Init+0x19c>)
 8001988:	f003 ffa4 	bl	80058d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800198c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001992:	4b3c      	ldr	r3, [pc, #240]	; (8001a84 <MX_GPIO_Init+0x1a8>)
 8001994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4837      	ldr	r0, [pc, #220]	; (8001a80 <MX_GPIO_Init+0x1a4>)
 80019a2:	f003 fdfb 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Lamp3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Lamp3_Pin;
 80019a6:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80019aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	482e      	ldr	r0, [pc, #184]	; (8001a78 <MX_GPIO_Init+0x19c>)
 80019c0:	f003 fdec 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : Lamp1_Pin Lamp2_Pin */
  GPIO_InitStruct.Pin = Lamp1_Pin|Lamp2_Pin;
 80019c4:	2306      	movs	r3, #6
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4828      	ldr	r0, [pc, #160]	; (8001a7c <MX_GPIO_Init+0x1a0>)
 80019dc:	f003 fdde 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Switch_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Signal_Pin;
 80019e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Switch_Signal_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4821      	ldr	r0, [pc, #132]	; (8001a7c <MX_GPIO_Init+0x1a0>)
 80019f6:	f003 fdd1 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : Index_Signal_Pin */
  GPIO_InitStruct.Pin = Index_Signal_Pin;
 80019fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a00:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <MX_GPIO_Init+0x1ac>)
 8001a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Index_Signal_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	481b      	ldr	r0, [pc, #108]	; (8001a7c <MX_GPIO_Init+0x1a0>)
 8001a10:	f003 fdc4 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4815      	ldr	r0, [pc, #84]	; (8001a80 <MX_GPIO_Init+0x1a4>)
 8001a2c:	f003 fdb6 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitchSignal_Pin */
  GPIO_InitStruct.Pin = LimitSwitchSignal_Pin;
 8001a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MX_GPIO_Init+0x1ac>)
 8001a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitchSignal_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	480e      	ldr	r0, [pc, #56]	; (8001a80 <MX_GPIO_Init+0x1a4>)
 8001a46:	f003 fda9 	bl	800559c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2017      	movs	r0, #23
 8001a50:	f003 f95d 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a54:	2017      	movs	r0, #23
 8001a56:	f003 f976 	bl	8004d46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2028      	movs	r0, #40	; 0x28
 8001a60:	f003 f955 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a64:	2028      	movs	r0, #40	; 0x28
 8001a66:	f003 f96e 	bl	8004d46 <HAL_NVIC_EnableIRQ>

}
 8001a6a:	bf00      	nop
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40020800 	.word	0x40020800
 8001a84:	10210000 	.word	0x10210000
 8001a88:	10110000 	.word	0x10110000

08001a8c <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 12288
#define  MAX_ENCODER_PERIOD 24576

void EncoderVelocityAndPosition_Update()
{
 8001a8c:	b5b0      	push	{r4, r5, r7, lr}
 8001a8e:	ed2d 8b02 	vpush	{d8}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0

	static float EncoderLastVelocity = 0;
	static float Velocity_Output = 0;
	static float Acceration_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <EncoderVelocityAndPosition_Update+0x130>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
	uint64_t EncoderNowTimestamp = micros();
 8001a9e:	f000 f90d 	bl	8001cbc <micros>
 8001aa2:	e9c7 0106 	strd	r0, r1, [r7, #24]

	int32_t EncoderPositionDiff;
	float EncoderVelocityDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001aa6:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <EncoderVelocityAndPosition_Update+0x134>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ab0:	1a84      	subs	r4, r0, r2
 8001ab2:	eb61 0503 	sbc.w	r5, r1, r3
 8001ab6:	e9c7 4504 	strd	r4, r5, [r7, #16]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001aba:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <EncoderVelocityAndPosition_Update+0x138>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	60fb      	str	r3, [r7, #12]

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8001ac4:	4a3f      	ldr	r2, [pc, #252]	; (8001bc4 <EncoderVelocityAndPosition_Update+0x138>)
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001aca:	493d      	ldr	r1, [pc, #244]	; (8001bc0 <EncoderVelocityAndPosition_Update+0x134>)
 8001acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad0:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ade:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <EncoderVelocityAndPosition_Update+0x13c>)
 8001ae0:	edc3 7a08 	vstr	s15, [r3, #32]
	StabilizerPIDController.OutputFeedback = EncoderNowPosition;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <EncoderVelocityAndPosition_Update+0x140>)
 8001af0:	edc3 7a08 	vstr	s15, [r3, #32]
	// LPF
	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a36      	ldr	r2, [pc, #216]	; (8001bd0 <EncoderVelocityAndPosition_Update+0x144>)
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b08:	f7ff f90a 	bl	8000d20 <__aeabi_ul2f>
 8001b0c:	ee07 0a10 	vmov	s14, r0
 8001b10:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <EncoderVelocityAndPosition_Update+0x148>)
 8001b16:	edc3 7a00 	vstr	s15, [r3]
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*299))/300.0;
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <EncoderVelocityAndPosition_Update+0x14c>)
 8001b1c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b20:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001bdc <EncoderVelocityAndPosition_Update+0x150>
 8001b24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b28:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <EncoderVelocityAndPosition_Update+0x148>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b32:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001be0 <EncoderVelocityAndPosition_Update+0x154>
 8001b36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <EncoderVelocityAndPosition_Update+0x14c>)
 8001b3c:	edc3 7a08 	vstr	s15, [r3, #32]
//	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*49))/50.0;

	float EncoderNowVelocity = VelocityPIDController.OutputFeedback;
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <EncoderVelocityAndPosition_Update+0x14c>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	60bb      	str	r3, [r7, #8]

	EncoderVelocityDiff = EncoderNowVelocity - EncoderLastVelocity;
 8001b46:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <EncoderVelocityAndPosition_Update+0x158>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b54:	edc7 7a01 	vstr	s15, [r7, #4]
	EncoderLastVelocity = VelocityPIDController.OutputFeedback;
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <EncoderVelocityAndPosition_Update+0x14c>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a21      	ldr	r2, [pc, #132]	; (8001be4 <EncoderVelocityAndPosition_Update+0x158>)
 8001b5e:	6013      	str	r3, [r2, #0]

	Acceration_Output = ( EncoderVelocityDiff * 1000000)  / (float) EncoderTimeDiff;
 8001b60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b64:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001be8 <EncoderVelocityAndPosition_Update+0x15c>
 8001b68:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001b6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b70:	f7ff f8d6 	bl	8000d20 <__aeabi_ul2f>
 8001b74:	ee07 0a10 	vmov	s14, r0
 8001b78:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <EncoderVelocityAndPosition_Update+0x160>)
 8001b7e:	edc3 7a00 	vstr	s15, [r3]
	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*299))/300.0;
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <EncoderVelocityAndPosition_Update+0x164>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001bdc <EncoderVelocityAndPosition_Update+0x150>
 8001b8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <EncoderVelocityAndPosition_Update+0x160>)
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b9a:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001be0 <EncoderVelocityAndPosition_Update+0x154>
 8001b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <EncoderVelocityAndPosition_Update+0x160>)
 8001ba4:	edc3 7a00 	vstr	s15, [r3]
//	Acceration_Output = (Acceration_Output + (EstimatedAngularAcceration*49))/50.0;
	EstimatedAngularAcceration = ( Acceration_Output );
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <EncoderVelocityAndPosition_Update+0x160>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <EncoderVelocityAndPosition_Update+0x164>)
 8001bae:	6013      	str	r3, [r2, #0]

}
 8001bb0:	bf00      	nop
 8001bb2:	3728      	adds	r7, #40	; 0x28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	ecbd 8b02 	vpop	{d8}
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	200000f8 	.word	0x200000f8
 8001bc0:	200005d8 	.word	0x200005d8
 8001bc4:	200005e0 	.word	0x200005e0
 8001bc8:	20000430 	.word	0x20000430
 8001bcc:	200004f0 	.word	0x200004f0
 8001bd0:	000f4240 	.word	0x000f4240
 8001bd4:	200005e4 	.word	0x200005e4
 8001bd8:	20000470 	.word	0x20000470
 8001bdc:	43958000 	.word	0x43958000
 8001be0:	43960000 	.word	0x43960000
 8001be4:	200005e8 	.word	0x200005e8
 8001be8:	49742400 	.word	0x49742400
 8001bec:	200005ec 	.word	0x200005ec
 8001bf0:	200005d0 	.word	0x200005d0

08001bf4 <Encoder_SetHome_Position>:


void Encoder_SetHome_Position()
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <Encoder_SetHome_Position+0x2c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <Encoder_SetHome_Position+0x30>)
 8001bfe:	6852      	ldr	r2, [r2, #4]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
	StabilizePosition = CUSSStruc.PPRxQEI;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <Encoder_SetHome_Position+0x30>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <Encoder_SetHome_Position+0x34>)
 8001c10:	edc3 7a00 	vstr	s15, [r3]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200000f8 	.word	0x200000f8
 8001c24:	200005c0 	.word	0x200005c0
 8001c28:	20000420 	.word	0x20000420

08001c2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b4b0      	push	{r4, r5, r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d108      	bne.n	8001c4e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 4294967295;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	1e54      	subs	r4, r2, #1
 8001c44:	f143 0500 	adc.w	r5, r3, #0
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001c4a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bcb0      	pop	{r4, r5, r7}
 8001c56:	4770      	bx	lr
 8001c58:	20000140 	.word	0x20000140
 8001c5c:	200002d8 	.word	0x200002d8

08001c60 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
    if ((GPIO_Pin == GPIO_PIN_8))  //13 -> BlueButton, 8 -> Limitswitch
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c70:	d10a      	bne.n	8001c88 <HAL_GPIO_EXTI_Callback+0x28>
	{
    	if (Munmunbot_State == STATE_SetHome)
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d106      	bne.n	8001c88 <HAL_GPIO_EXTI_Callback+0x28>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d102      	bne.n	8001c88 <HAL_GPIO_EXTI_Callback+0x28>
    		{
//    			Encoder_SetHome_Position();
    			SethomeMode = SetHomeState_2;
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001c84:	2202      	movs	r2, #2
 8001c86:	701a      	strb	r2, [r3, #0]
//    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
//				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
    		}
    	}
	}
    if (GPIO_Pin == GPIO_PIN_13)  //13 -> BlueButton, 8 -> Limitswitch
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c8e:	d10a      	bne.n	8001ca6 <HAL_GPIO_EXTI_Callback+0x46>
	{
    	if (Munmunbot_State == STATE_SetHome)
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d106      	bne.n	8001ca6 <HAL_GPIO_EXTI_Callback+0x46>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d102      	bne.n	8001ca6 <HAL_GPIO_EXTI_Callback+0x46>
    		{
//    			Encoder_SetHome_Position();
    			SethomeMode = SetHomeState_2;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	701a      	strb	r2, [r3, #0]
    	}

	}


}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000301 	.word	0x20000301
 8001cb8:	20000302 	.word	0x20000302

08001cbc <micros>:

uint64_t micros()
{
 8001cbc:	b4b0      	push	{r4, r5, r7}
 8001cbe:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <micros+0x2c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <micros+0x30>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	1884      	adds	r4, r0, r2
 8001cd4:	eb41 0503 	adc.w	r5, r1, r3
 8001cd8:	4622      	mov	r2, r4
 8001cda:	462b      	mov	r3, r5
}
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bcb0      	pop	{r4, r5, r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000140 	.word	0x20000140
 8001cec:	200002d8 	.word	0x200002d8

08001cf0 <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cfe:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	009a      	lsls	r2, r3, #2
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 10;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a03      	ldr	r2, [pc, #12]	; (8001d1c <ConverterUnitSystemStructureInit+0x2c>)
 8001d0e:	609a      	str	r2, [r3, #8]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	41200000 	.word	0x41200000

08001d20 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.4*(CUSSvar->PPRxQEI))/(3.1416*2.0);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fb94 	bl	800045c <__aeabi_ui2d>
 8001d34:	a347      	add	r3, pc, #284	; (adr r3, 8001e54 <TrajectoryGenerationStructureInit+0x134>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fc09 	bl	8000550 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	a345      	add	r3, pc, #276	; (adr r3, 8001e5c <TrajectoryGenerationStructureInit+0x13c>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fd2a 	bl	80007a4 <__aeabi_ddiv>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f7fe feca 	bl	8000af0 <__aeabi_d2f>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	615a      	str	r2, [r3, #20]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fb74 	bl	800045c <__aeabi_ui2d>
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <TrajectoryGenerationStructureInit+0x128>)
 8001d7a:	f7fe fd13 	bl	80007a4 <__aeabi_ddiv>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f7fe feb3 	bl	8000af0 <__aeabi_d2f>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = CUSSStruc.PPRxQEI;  /// PPRxQEI == 0 degree
 8001d90:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <TrajectoryGenerationStructureInit+0x12c>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	ee07 3a90 	vmov	s15, r3
 8001d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	TGSvar->Mode = 0;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	TGSvar->Submode = 0;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	TGSvar->Loop_Freq = 1000;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001db8:	659a      	str	r2, [r3, #88]	; 0x58
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <TrajectoryGenerationStructureInit+0x130>)
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	461c      	mov	r4, r3
 8001dc8:	4615      	mov	r5, r2
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	e9c3 4518 	strd	r4, r5, [r3, #96]	; 0x60
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	edd3 6a04 	vldr	s13, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	edc3 7a03 	vstr	s15, [r3, #12]
	TGSvar->AngularVelocityFinalMin = 0*1.8*(CUSSvar->PPRxQEI)/60.0;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fb2b 	bl	800045c <__aeabi_ui2d>
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	f7fe fb9f 	bl	8000550 <__aeabi_dmul>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <TrajectoryGenerationStructureInit+0x128>)
 8001e20:	f7fe fcc0 	bl	80007a4 <__aeabi_ddiv>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7fe fe60 	bl	8000af0 <__aeabi_d2f>
 8001e30:	4602      	mov	r2, r0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	679a      	str	r2, [r3, #120]	; 0x78
	TGSvar->Alpha = 1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e3c:	67da      	str	r2, [r3, #124]	; 0x7c

}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bdb0      	pop	{r4, r5, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	404e0000 	.word	0x404e0000
 8001e4c:	200005c0 	.word	0x200005c0
 8001e50:	000f4240 	.word	0x000f4240
 8001e54:	9999999a 	.word	0x9999999a
 8001e58:	3fd99999 	.word	0x3fd99999
 8001e5c:	2e48e8a7 	.word	0x2e48e8a7
 8001e60:	401921ff 	.word	0x401921ff
 8001e64:	00000000 	.word	0x00000000

08001e68 <LinkMovingPIDLoad>:

void LinkMovingPIDLoad()
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	PositionPIDController.Kp = 0;
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <LinkMovingPIDLoad+0x90>)
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
	PositionPIDController.Ki = 0;
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <LinkMovingPIDLoad+0x90>)
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
	PositionPIDController.Kd = 0;
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <LinkMovingPIDLoad+0x90>)
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
	PositionPIDController.offSet = 0;
 8001e84:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <LinkMovingPIDLoad+0x90>)
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
	PositionPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <LinkMovingPIDLoad+0x94>)
 8001e8e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f7fe fb25 	bl	80004e4 <__aeabi_ul2d>
 8001e9a:	a315      	add	r3, pc, #84	; (adr r3, 8001ef0 <LinkMovingPIDLoad+0x88>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	f7fe fc80 	bl	80007a4 <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4913      	ldr	r1, [pc, #76]	; (8001ef8 <LinkMovingPIDLoad+0x90>)
 8001eaa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	VelocityPIDController.Kp = 6;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <LinkMovingPIDLoad+0x98>)
 8001eb0:	4a14      	ldr	r2, [pc, #80]	; (8001f04 <LinkMovingPIDLoad+0x9c>)
 8001eb2:	601a      	str	r2, [r3, #0]
	VelocityPIDController.Ki = 10;
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <LinkMovingPIDLoad+0x98>)
 8001eb6:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <LinkMovingPIDLoad+0xa0>)
 8001eb8:	605a      	str	r2, [r3, #4]
	VelocityPIDController.Kd = 0.00005;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <LinkMovingPIDLoad+0x98>)
 8001ebc:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <LinkMovingPIDLoad+0xa4>)
 8001ebe:	609a      	str	r2, [r3, #8]
	VelocityPIDController.offSet = 1500;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <LinkMovingPIDLoad+0x98>)
 8001ec2:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <LinkMovingPIDLoad+0xa8>)
 8001ec4:	611a      	str	r2, [r3, #16]
	VelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <LinkMovingPIDLoad+0x94>)
 8001ec8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f7fe fb08 	bl	80004e4 <__aeabi_ul2d>
 8001ed4:	a306      	add	r3, pc, #24	; (adr r3, 8001ef0 <LinkMovingPIDLoad+0x88>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fc63 	bl	80007a4 <__aeabi_ddiv>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4907      	ldr	r1, [pc, #28]	; (8001f00 <LinkMovingPIDLoad+0x98>)
 8001ee4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	f3af 8000 	nop.w
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	412e8480 	.word	0x412e8480
 8001ef8:	20000430 	.word	0x20000430
 8001efc:	20000530 	.word	0x20000530
 8001f00:	20000470 	.word	0x20000470
 8001f04:	40c00000 	.word	0x40c00000
 8001f08:	41200000 	.word	0x41200000
 8001f0c:	3851b717 	.word	0x3851b717
 8001f10:	44bb8000 	.word	0x44bb8000
 8001f14:	00000000 	.word	0x00000000

08001f18 <LinkMovingPID45to355Load>:

void LinkMovingPID45to355Load()
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	PositionPIDController.Kp = 0;
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <LinkMovingPID45to355Load+0x90>)
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
	PositionPIDController.Ki = 0;
 8001f24:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <LinkMovingPID45to355Load+0x90>)
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	605a      	str	r2, [r3, #4]
	PositionPIDController.Kd = 0;
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <LinkMovingPID45to355Load+0x90>)
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
	PositionPIDController.offSet = 0;
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <LinkMovingPID45to355Load+0x90>)
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
	PositionPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <LinkMovingPID45to355Load+0x94>)
 8001f3e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f7fe facd 	bl	80004e4 <__aeabi_ul2d>
 8001f4a:	a315      	add	r3, pc, #84	; (adr r3, 8001fa0 <LinkMovingPID45to355Load+0x88>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	f7fe fc28 	bl	80007a4 <__aeabi_ddiv>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4913      	ldr	r1, [pc, #76]	; (8001fa8 <LinkMovingPID45to355Load+0x90>)
 8001f5a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	VelocityPIDController.Kp = 5;
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <LinkMovingPID45to355Load+0x98>)
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <LinkMovingPID45to355Load+0x9c>)
 8001f62:	601a      	str	r2, [r3, #0]
	VelocityPIDController.Ki = 10;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <LinkMovingPID45to355Load+0x98>)
 8001f66:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <LinkMovingPID45to355Load+0xa0>)
 8001f68:	605a      	str	r2, [r3, #4]
//	VelocityPIDController.Kd = 0.00005;
	VelocityPIDController.Kd = 2;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <LinkMovingPID45to355Load+0x98>)
 8001f6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f70:	609a      	str	r2, [r3, #8]
	VelocityPIDController.offSet = 1500;
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <LinkMovingPID45to355Load+0x98>)
 8001f74:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <LinkMovingPID45to355Load+0xa4>)
 8001f76:	611a      	str	r2, [r3, #16]
	VelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <LinkMovingPID45to355Load+0x94>)
 8001f7a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f7fe faaf 	bl	80004e4 <__aeabi_ul2d>
 8001f86:	a306      	add	r3, pc, #24	; (adr r3, 8001fa0 <LinkMovingPID45to355Load+0x88>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe fc0a 	bl	80007a4 <__aeabi_ddiv>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4906      	ldr	r1, [pc, #24]	; (8001fb0 <LinkMovingPID45to355Load+0x98>)
 8001f96:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	00000000 	.word	0x00000000
 8001fa4:	412e8480 	.word	0x412e8480
 8001fa8:	20000430 	.word	0x20000430
 8001fac:	20000530 	.word	0x20000530
 8001fb0:	20000470 	.word	0x20000470
 8001fb4:	40a00000 	.word	0x40a00000
 8001fb8:	41200000 	.word	0x41200000
 8001fbc:	44bb8000 	.word	0x44bb8000

08001fc0 <LinkMovingPID10to45Load>:

void LinkMovingPID10to45Load()
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	PositionPIDController.Kp = 0;
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <LinkMovingPID10to45Load+0x90>)
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
	PositionPIDController.Ki = 0;
 8001fcc:	4b20      	ldr	r3, [pc, #128]	; (8002050 <LinkMovingPID10to45Load+0x90>)
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	605a      	str	r2, [r3, #4]
	PositionPIDController.Kd = 0;
 8001fd4:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <LinkMovingPID10to45Load+0x90>)
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
	PositionPIDController.offSet = 0;
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <LinkMovingPID10to45Load+0x90>)
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
	PositionPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <LinkMovingPID10to45Load+0x94>)
 8001fe6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fa79 	bl	80004e4 <__aeabi_ul2d>
 8001ff2:	a315      	add	r3, pc, #84	; (adr r3, 8002048 <LinkMovingPID10to45Load+0x88>)
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	f7fe fbd4 	bl	80007a4 <__aeabi_ddiv>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4913      	ldr	r1, [pc, #76]	; (8002050 <LinkMovingPID10to45Load+0x90>)
 8002002:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	VelocityPIDController.Kp = 3.5;
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <LinkMovingPID10to45Load+0x98>)
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <LinkMovingPID10to45Load+0x9c>)
 800200a:	601a      	str	r2, [r3, #0]
	VelocityPIDController.Ki = 7;
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <LinkMovingPID10to45Load+0x98>)
 800200e:	4a14      	ldr	r2, [pc, #80]	; (8002060 <LinkMovingPID10to45Load+0xa0>)
 8002010:	605a      	str	r2, [r3, #4]
	VelocityPIDController.Kd = 0.00005;
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <LinkMovingPID10to45Load+0x98>)
 8002014:	4a13      	ldr	r2, [pc, #76]	; (8002064 <LinkMovingPID10to45Load+0xa4>)
 8002016:	609a      	str	r2, [r3, #8]
	VelocityPIDController.offSet = 1500;
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <LinkMovingPID10to45Load+0x98>)
 800201a:	4a13      	ldr	r2, [pc, #76]	; (8002068 <LinkMovingPID10to45Load+0xa8>)
 800201c:	611a      	str	r2, [r3, #16]
	VelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <LinkMovingPID10to45Load+0x94>)
 8002020:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fa5c 	bl	80004e4 <__aeabi_ul2d>
 800202c:	a306      	add	r3, pc, #24	; (adr r3, 8002048 <LinkMovingPID10to45Load+0x88>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe fbb7 	bl	80007a4 <__aeabi_ddiv>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4907      	ldr	r1, [pc, #28]	; (8002058 <LinkMovingPID10to45Load+0x98>)
 800203c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	f3af 8000 	nop.w
 8002048:	00000000 	.word	0x00000000
 800204c:	412e8480 	.word	0x412e8480
 8002050:	20000430 	.word	0x20000430
 8002054:	20000530 	.word	0x20000530
 8002058:	20000470 	.word	0x20000470
 800205c:	40600000 	.word	0x40600000
 8002060:	40e00000 	.word	0x40e00000
 8002064:	3851b717 	.word	0x3851b717
 8002068:	44bb8000 	.word	0x44bb8000
 800206c:	00000000 	.word	0x00000000

08002070 <LinkMovingPID0to9Load>:

void LinkMovingPID0to9Load()
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	PositionPIDController.Kp = 0;
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <LinkMovingPID0to9Load+0x90>)
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
	PositionPIDController.Ki = 0;
 800207c:	4b20      	ldr	r3, [pc, #128]	; (8002100 <LinkMovingPID0to9Load+0x90>)
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	605a      	str	r2, [r3, #4]
	PositionPIDController.Kd = 0;
 8002084:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <LinkMovingPID0to9Load+0x90>)
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
	PositionPIDController.offSet = 0;
 800208c:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <LinkMovingPID0to9Load+0x90>)
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
	PositionPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <LinkMovingPID0to9Load+0x94>)
 8002096:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f7fe fa21 	bl	80004e4 <__aeabi_ul2d>
 80020a2:	a315      	add	r3, pc, #84	; (adr r3, 80020f8 <LinkMovingPID0to9Load+0x88>)
 80020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a8:	f7fe fb7c 	bl	80007a4 <__aeabi_ddiv>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4913      	ldr	r1, [pc, #76]	; (8002100 <LinkMovingPID0to9Load+0x90>)
 80020b2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	VelocityPIDController.Kp = 1;
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <LinkMovingPID0to9Load+0x98>)
 80020b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020bc:	601a      	str	r2, [r3, #0]
	VelocityPIDController.Ki = 5;
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <LinkMovingPID0to9Load+0x98>)
 80020c0:	4a12      	ldr	r2, [pc, #72]	; (800210c <LinkMovingPID0to9Load+0x9c>)
 80020c2:	605a      	str	r2, [r3, #4]
	VelocityPIDController.Kd = 0.00005;
 80020c4:	4b10      	ldr	r3, [pc, #64]	; (8002108 <LinkMovingPID0to9Load+0x98>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	; (8002110 <LinkMovingPID0to9Load+0xa0>)
 80020c8:	609a      	str	r2, [r3, #8]
	VelocityPIDController.offSet = 1500;
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <LinkMovingPID0to9Load+0x98>)
 80020cc:	4a11      	ldr	r2, [pc, #68]	; (8002114 <LinkMovingPID0to9Load+0xa4>)
 80020ce:	611a      	str	r2, [r3, #16]
	VelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <LinkMovingPID0to9Load+0x94>)
 80020d2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fa03 	bl	80004e4 <__aeabi_ul2d>
 80020de:	a306      	add	r3, pc, #24	; (adr r3, 80020f8 <LinkMovingPID0to9Load+0x88>)
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	f7fe fb5e 	bl	80007a4 <__aeabi_ddiv>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4906      	ldr	r1, [pc, #24]	; (8002108 <LinkMovingPID0to9Load+0x98>)
 80020ee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	00000000 	.word	0x00000000
 80020fc:	412e8480 	.word	0x412e8480
 8002100:	20000430 	.word	0x20000430
 8002104:	20000530 	.word	0x20000530
 8002108:	20000470 	.word	0x20000470
 800210c:	40a00000 	.word	0x40a00000
 8002110:	3851b717 	.word	0x3851b717
 8002114:	44bb8000 	.word	0x44bb8000

08002118 <StabilizerPIDLoad>:

void StabilizerPIDLoad()
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
//	StabilizerPIDController.Kp = 35;
//	StabilizerPIDController.Ki = 17;
	StabilizerPIDController.Kp = 0.0000000000001;
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <StabilizerPIDLoad+0x50>)
 800211e:	4a13      	ldr	r2, [pc, #76]	; (800216c <StabilizerPIDLoad+0x54>)
 8002120:	601a      	str	r2, [r3, #0]
	StabilizerPIDController.Ki = 1.3;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <StabilizerPIDLoad+0x50>)
 8002124:	4a12      	ldr	r2, [pc, #72]	; (8002170 <StabilizerPIDLoad+0x58>)
 8002126:	605a      	str	r2, [r3, #4]
	StabilizerPIDController.Kd = 0;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <StabilizerPIDLoad+0x50>)
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
	StabilizerPIDController.offSet = 1200;
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <StabilizerPIDLoad+0x50>)
 8002132:	4a10      	ldr	r2, [pc, #64]	; (8002174 <StabilizerPIDLoad+0x5c>)
 8002134:	611a      	str	r2, [r3, #16]
	StabilizerPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <StabilizerPIDLoad+0x60>)
 8002138:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	f7fe f9d0 	bl	80004e4 <__aeabi_ul2d>
 8002144:	a306      	add	r3, pc, #24	; (adr r3, 8002160 <StabilizerPIDLoad+0x48>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	f7fe fb2b 	bl	80007a4 <__aeabi_ddiv>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4905      	ldr	r1, [pc, #20]	; (8002168 <StabilizerPIDLoad+0x50>)
 8002154:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	f3af 8000 	nop.w
 8002160:	00000000 	.word	0x00000000
 8002164:	412e8480 	.word	0x412e8480
 8002168:	200004f0 	.word	0x200004f0
 800216c:	29e12e13 	.word	0x29e12e13
 8002170:	3fa66666 	.word	0x3fa66666
 8002174:	44960000 	.word	0x44960000
 8002178:	20000530 	.word	0x20000530
 800217c:	00000000 	.word	0x00000000

08002180 <VelocityPurePIDLoad>:

void VelocityPurePIDLoad()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	PureVelocityPIDController.Kp = 5;
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <VelocityPurePIDLoad+0x50>)
 8002186:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <VelocityPurePIDLoad+0x54>)
 8002188:	601a      	str	r2, [r3, #0]
	PureVelocityPIDController.Ki = 15;
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <VelocityPurePIDLoad+0x50>)
 800218c:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <VelocityPurePIDLoad+0x58>)
 800218e:	605a      	str	r2, [r3, #4]
	PureVelocityPIDController.Kd = 0.00005;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <VelocityPurePIDLoad+0x50>)
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <VelocityPurePIDLoad+0x5c>)
 8002194:	609a      	str	r2, [r3, #8]
	PureVelocityPIDController.offSet = 1500;
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <VelocityPurePIDLoad+0x50>)
 8002198:	4a11      	ldr	r2, [pc, #68]	; (80021e0 <VelocityPurePIDLoad+0x60>)
 800219a:	611a      	str	r2, [r3, #16]
	PureVelocityPIDController.SamplingTime = ( TrjStruc.Loop_Period )/1000000.0;
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <VelocityPurePIDLoad+0x64>)
 800219e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7fe f99d 	bl	80004e4 <__aeabi_ul2d>
 80021aa:	a307      	add	r3, pc, #28	; (adr r3, 80021c8 <VelocityPurePIDLoad+0x48>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fe faf8 	bl	80007a4 <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4905      	ldr	r1, [pc, #20]	; (80021d0 <VelocityPurePIDLoad+0x50>)
 80021ba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	f3af 8000 	nop.w
 80021c8:	00000000 	.word	0x00000000
 80021cc:	412e8480 	.word	0x412e8480
 80021d0:	200004b0 	.word	0x200004b0
 80021d4:	40a00000 	.word	0x40a00000
 80021d8:	41700000 	.word	0x41700000
 80021dc:	3851b717 	.word	0x3851b717
 80021e0:	44bb8000 	.word	0x44bb8000
 80021e4:	20000530 	.word	0x20000530

080021e8 <TrajectoryGenerationVelocityMaxSetting>:


void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp))/(60.0);   ///RPM to pps
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	edd3 7a02 	vldr	s15, [r3, #8]
 8002204:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002208:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002250 <TrajectoryGenerationVelocityMaxSetting+0x68>
 800220c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	edc3 7a04 	vstr	s15, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	edd3 6a04 	vldr	s13, [r3, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	42700000 	.word	0x42700000
 8002254:	00000000 	.word	0x00000000

08002258 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	// fix start position base on Encoder
	TrjStruc.Start_Theta = htim1.Instance->CNT;
 800225c:	4b9e      	ldr	r3, [pc, #632]	; (80024d8 <TrajectoryGenerationPrepareDATA+0x280>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800226a:	4b9c      	ldr	r3, [pc, #624]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 800226c:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	if (MovingLinkMode == LMM_Set_Pos_Directly)
 8002270:	4b9b      	ldr	r3, [pc, #620]	; (80024e0 <TrajectoryGenerationPrepareDATA+0x288>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d165      	bne.n	8002344 <TrajectoryGenerationPrepareDATA+0xec>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 8002278:	4b9a      	ldr	r3, [pc, #616]	; (80024e4 <TrajectoryGenerationPrepareDATA+0x28c>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b9a      	ldr	r3, [pc, #616]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x290>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f8e8 	bl	800045c <__aeabi_ui2d>
 800228c:	a390      	add	r3, pc, #576	; (adr r3, 80024d0 <TrajectoryGenerationPrepareDATA+0x278>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	f7fe fa87 	bl	80007a4 <__aeabi_ddiv>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4610      	mov	r0, r2
 800229c:	4619      	mov	r1, r3
 800229e:	f7fe fc27 	bl	8000af0 <__aeabi_d2f>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a8d      	ldr	r2, [pc, #564]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 80022a6:	6693      	str	r3, [r2, #104]	; 0x68
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 80022a8:	4b8c      	ldr	r3, [pc, #560]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 80022aa:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80022ae:	4b8e      	ldr	r3, [pc, #568]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x290>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c2:	db0d      	blt.n	80022e0 <TrajectoryGenerationPrepareDATA+0x88>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 80022c4:	4b85      	ldr	r3, [pc, #532]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 80022c6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80022ca:	4b87      	ldr	r3, [pc, #540]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x290>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022da:	4b80      	ldr	r3, [pc, #512]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 80022dc:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		  }
		  TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 80022e0:	4b7e      	ldr	r3, [pc, #504]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 80022e2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80022e6:	4b80      	ldr	r3, [pc, #512]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x290>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f6:	4b79      	ldr	r3, [pc, #484]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 80022f8:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

		  if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 80022fc:	4b77      	ldr	r3, [pc, #476]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 80022fe:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002302:	4b76      	ldr	r3, [pc, #472]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 8002304:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002308:	eeb4 7a67 	vcmp.f32	s14, s15
 800230c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002310:	d00e      	beq.n	8002330 <TrajectoryGenerationPrepareDATA+0xd8>
		  {
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8002312:	4b72      	ldr	r3, [pc, #456]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 8002314:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002318:	4b70      	ldr	r3, [pc, #448]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 800231a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800231e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002322:	4b6e      	ldr	r3, [pc, #440]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 8002324:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			  Munmunbot_State = STATE_Calculation;
 8002328:	4b70      	ldr	r3, [pc, #448]	; (80024ec <TrajectoryGenerationPrepareDATA+0x294>)
 800232a:	2203      	movs	r2, #3
 800232c:	701a      	strb	r2, [r3, #0]
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
		ACK2Return(&UART2);
	  }
}
 800232e:	e0cd      	b.n	80024cc <TrajectoryGenerationPrepareDATA+0x274>
			Munmunbot_State = STATE_Idle;
 8002330:	4b6e      	ldr	r3, [pc, #440]	; (80024ec <TrajectoryGenerationPrepareDATA+0x294>)
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8002336:	4b6a      	ldr	r3, [pc, #424]	; (80024e0 <TrajectoryGenerationPrepareDATA+0x288>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
			ACK2Return(&UART2);
 800233c:	486c      	ldr	r0, [pc, #432]	; (80024f0 <TrajectoryGenerationPrepareDATA+0x298>)
 800233e:	f001 f8fd 	bl	800353c <ACK2Return>
}
 8002342:	e0c3      	b.n	80024cc <TrajectoryGenerationPrepareDATA+0x274>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 8002344:	4b66      	ldr	r3, [pc, #408]	; (80024e0 <TrajectoryGenerationPrepareDATA+0x288>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d004      	beq.n	8002356 <TrajectoryGenerationPrepareDATA+0xfe>
 800234c:	4b64      	ldr	r3, [pc, #400]	; (80024e0 <TrajectoryGenerationPrepareDATA+0x288>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b03      	cmp	r3, #3
 8002352:	f040 80b1 	bne.w	80024b8 <TrajectoryGenerationPrepareDATA+0x260>
		  if (NumberOfStationToGo == 0)
 8002356:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x29c>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10f      	bne.n	800237e <TrajectoryGenerationPrepareDATA+0x126>
				Munmunbot_State = STATE_Idle;
 800235e:	4b63      	ldr	r3, [pc, #396]	; (80024ec <TrajectoryGenerationPrepareDATA+0x294>)
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 8002364:	4b64      	ldr	r3, [pc, #400]	; (80024f8 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 800236a:	4b62      	ldr	r3, [pc, #392]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x29c>)
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8002370:	4b5b      	ldr	r3, [pc, #364]	; (80024e0 <TrajectoryGenerationPrepareDATA+0x288>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 8002376:	485e      	ldr	r0, [pc, #376]	; (80024f0 <TrajectoryGenerationPrepareDATA+0x298>)
 8002378:	f001 f8e0 	bl	800353c <ACK2Return>
		  if (NumberOfStationToGo == 0)
 800237c:	e0a6      	b.n	80024cc <TrajectoryGenerationPrepareDATA+0x274>
			Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 800237e:	4b5e      	ldr	r3, [pc, #376]	; (80024f8 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	4b5d      	ldr	r3, [pc, #372]	; (80024fc <TrajectoryGenerationPrepareDATA+0x2a4>)
 8002386:	5c9a      	ldrb	r2, [r3, r2]
 8002388:	4b5d      	ldr	r3, [pc, #372]	; (8002500 <TrajectoryGenerationPrepareDATA+0x2a8>)
 800238a:	701a      	strb	r2, [r3, #0]
			if (Current_Station > 10)   //pass input
 800238c:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <TrajectoryGenerationPrepareDATA+0x2a8>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b0a      	cmp	r3, #10
 8002392:	d90c      	bls.n	80023ae <TrajectoryGenerationPrepareDATA+0x156>
				NumberOfStationPTR += 1;
 8002394:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	3301      	adds	r3, #1
 800239a:	b2da      	uxtb	r2, r3
 800239c:	4b56      	ldr	r3, [pc, #344]	; (80024f8 <TrajectoryGenerationPrepareDATA+0x2a0>)
 800239e:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 80023a0:	4b54      	ldr	r3, [pc, #336]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x29c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b52      	ldr	r3, [pc, #328]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x29c>)
 80023aa:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 80023ac:	e08e      	b.n	80024cc <TrajectoryGenerationPrepareDATA+0x274>
				TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0))*5.0;   ///fix this if change algorithm
 80023ae:	4b54      	ldr	r3, [pc, #336]	; (8002500 <TrajectoryGenerationPrepareDATA+0x2a8>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	4a53      	ldr	r2, [pc, #332]	; (8002504 <TrajectoryGenerationPrepareDATA+0x2ac>)
 80023b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b4a      	ldr	r3, [pc, #296]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x290>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f849 	bl	800045c <__aeabi_ui2d>
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	4b4e      	ldr	r3, [pc, #312]	; (8002508 <TrajectoryGenerationPrepareDATA+0x2b0>)
 80023d0:	f7fe f9e8 	bl	80007a4 <__aeabi_ddiv>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	4b4a      	ldr	r3, [pc, #296]	; (800250c <TrajectoryGenerationPrepareDATA+0x2b4>)
 80023e2:	f7fe f8b5 	bl	8000550 <__aeabi_dmul>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fb7f 	bl	8000af0 <__aeabi_d2f>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4a39      	ldr	r2, [pc, #228]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 80023f6:	6693      	str	r3, [r2, #104]	; 0x68
				if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)  ///wrap input into 1 revolute. ///shouldn't happen
 80023f8:	4b38      	ldr	r3, [pc, #224]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 80023fa:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x290>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	ee07 3a90 	vmov	s15, r3
 8002406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800240a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002412:	db0d      	blt.n	8002430 <TrajectoryGenerationPrepareDATA+0x1d8>
					TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8002414:	4b31      	ldr	r3, [pc, #196]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 8002416:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x290>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242a:	4b2c      	ldr	r3, [pc, #176]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 800242c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8002430:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 8002432:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002436:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <TrajectoryGenerationPrepareDATA+0x290>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002446:	4b25      	ldr	r3, [pc, #148]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 8002448:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
				if (TrjStruc.Desire_Theta == TrjStruc.Start_Theta)
 800244c:	4b23      	ldr	r3, [pc, #140]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 800244e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002452:	4b22      	ldr	r3, [pc, #136]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 8002454:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002458:	eeb4 7a67 	vcmp.f32	s14, s15
 800245c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002460:	d10f      	bne.n	8002482 <TrajectoryGenerationPrepareDATA+0x22a>
					NumberOfStationPTR += 1;
 8002462:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <TrajectoryGenerationPrepareDATA+0x2a0>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <TrajectoryGenerationPrepareDATA+0x2a0>)
 800246c:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 800246e:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x29c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	3b01      	subs	r3, #1
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x29c>)
 8002478:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_End_Effector_Working;
 800247a:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <TrajectoryGenerationPrepareDATA+0x294>)
 800247c:	2207      	movs	r2, #7
 800247e:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8002480:	e024      	b.n	80024cc <TrajectoryGenerationPrepareDATA+0x274>
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 8002484:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 800248a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800248e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <TrajectoryGenerationPrepareDATA+0x284>)
 8002494:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
					Munmunbot_State = STATE_Calculation;
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <TrajectoryGenerationPrepareDATA+0x294>)
 800249a:	2203      	movs	r2, #3
 800249c:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <TrajectoryGenerationPrepareDATA+0x2a0>)
 80024a8:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x29c>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <TrajectoryGenerationPrepareDATA+0x29c>)
 80024b4:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 80024b6:	e009      	b.n	80024cc <TrajectoryGenerationPrepareDATA+0x274>
		MovingLinkMode = LMM_Not_Set;
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <TrajectoryGenerationPrepareDATA+0x288>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <TrajectoryGenerationPrepareDATA+0x294>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
		ACK2Return(&UART2);
 80024c4:	480a      	ldr	r0, [pc, #40]	; (80024f0 <TrajectoryGenerationPrepareDATA+0x298>)
 80024c6:	f001 f839 	bl	800353c <ACK2Return>
}
 80024ca:	e7ff      	b.n	80024cc <TrajectoryGenerationPrepareDATA+0x274>
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	99999999 	.word	0x99999999
 80024d4:	40eeadf9 	.word	0x40eeadf9
 80024d8:	200000f8 	.word	0x200000f8
 80024dc:	20000530 	.word	0x20000530
 80024e0:	20000406 	.word	0x20000406
 80024e4:	20000404 	.word	0x20000404
 80024e8:	200005c0 	.word	0x200005c0
 80024ec:	20000301 	.word	0x20000301
 80024f0:	200002e0 	.word	0x200002e0
 80024f4:	20000408 	.word	0x20000408
 80024f8:	20000409 	.word	0x20000409
 80024fc:	20000304 	.word	0x20000304
 8002500:	20000407 	.word	0x20000407
 8002504:	20000000 	.word	0x20000000
 8002508:	40768000 	.word	0x40768000
 800250c:	40140000 	.word	0x40140000

08002510 <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 8002510:	b5b0      	push	{r4, r5, r7, lr}
 8002512:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 8002514:	4bb0      	ldr	r3, [pc, #704]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002516:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800251a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	d51b      	bpl.n	800255c <TrajectoryGenerationCalculation+0x4c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 8002524:	4bac      	ldr	r3, [pc, #688]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002526:	edd3 7a05 	vldr	s15, [r3, #20]
 800252a:	eef1 7a67 	vneg.f32	s15, s15
 800252e:	4baa      	ldr	r3, [pc, #680]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002530:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 8002534:	4ba8      	ldr	r3, [pc, #672]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002536:	edd3 7a04 	vldr	s15, [r3, #16]
 800253a:	eef1 7a67 	vneg.f32	s15, s15
 800253e:	4ba6      	ldr	r3, [pc, #664]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002540:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 8002544:	4ba4      	ldr	r3, [pc, #656]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002546:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800254a:	eef1 7a67 	vneg.f32	s15, s15
 800254e:	4ba2      	ldr	r3, [pc, #648]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002550:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		 TrjStruc.Alpha = -1;
 8002554:	4ba0      	ldr	r3, [pc, #640]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002556:	4aa1      	ldr	r2, [pc, #644]	; (80027dc <TrajectoryGenerationCalculation+0x2cc>)
 8002558:	67da      	str	r2, [r3, #124]	; 0x7c
 800255a:	e017      	b.n	800258c <TrajectoryGenerationCalculation+0x7c>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 800255c:	4b9e      	ldr	r3, [pc, #632]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800255e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002562:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256a:	dd0f      	ble.n	800258c <TrajectoryGenerationCalculation+0x7c>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 800256c:	4b9a      	ldr	r3, [pc, #616]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	4a99      	ldr	r2, [pc, #612]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002572:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 8002574:	4b98      	ldr	r3, [pc, #608]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	4a97      	ldr	r2, [pc, #604]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800257a:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 800257c:	4b96      	ldr	r3, [pc, #600]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	4a95      	ldr	r2, [pc, #596]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002582:	6753      	str	r3, [r2, #116]	; 0x74
		 TrjStruc.Alpha = 1;
 8002584:	4b94      	ldr	r3, [pc, #592]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002586:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800258a:	67da      	str	r2, [r3, #124]	; 0x7c
	  }

	 if ( PIDTunerMode == 0 )
 800258c:	4b94      	ldr	r3, [pc, #592]	; (80027e0 <TrajectoryGenerationCalculation+0x2d0>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d13d      	bne.n	8002610 <TrajectoryGenerationCalculation+0x100>
	 {
		 if ( TrjStruc.Abs_Delta_Theta >= ( 45*8192.0/360.0 ) )
 8002594:	4b90      	ldr	r3, [pc, #576]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002596:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800259a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80027e4 <TrajectoryGenerationCalculation+0x2d4>
 800259e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a6:	db02      	blt.n	80025ae <TrajectoryGenerationCalculation+0x9e>
		 {
			 LinkMovingPID45to355Load();
 80025a8:	f7ff fcb6 	bl	8001f18 <LinkMovingPID45to355Load>
 80025ac:	e030      	b.n	8002610 <TrajectoryGenerationCalculation+0x100>
		 }
		 else if ( ( TrjStruc.Abs_Delta_Theta >= ( 10*8192.0/360.0 ) ) && ( TrjStruc.Abs_Delta_Theta < ( 45*8192.0/360.0 ) ) )
 80025ae:	4b8a      	ldr	r3, [pc, #552]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80025b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ff74 	bl	80004a0 <__aeabi_f2d>
 80025b8:	a385      	add	r3, pc, #532	; (adr r3, 80027d0 <TrajectoryGenerationCalculation+0x2c0>)
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	f7fe fa4d 	bl	8000a5c <__aeabi_dcmpge>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00c      	beq.n	80025e2 <TrajectoryGenerationCalculation+0xd2>
 80025c8:	4b83      	ldr	r3, [pc, #524]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80025ca:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80025ce:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80027e4 <TrajectoryGenerationCalculation+0x2d4>
 80025d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	d502      	bpl.n	80025e2 <TrajectoryGenerationCalculation+0xd2>
		 {
			 LinkMovingPID10to45Load();
 80025dc:	f7ff fcf0 	bl	8001fc0 <LinkMovingPID10to45Load>
 80025e0:	e016      	b.n	8002610 <TrajectoryGenerationCalculation+0x100>
		 }
		 else if ( ( TrjStruc.Abs_Delta_Theta >= ( 0*8192.0/360.0 ) ) && ( TrjStruc.Abs_Delta_Theta < ( 10*8192.0/360.0 ) ) )
 80025e2:	4b7d      	ldr	r3, [pc, #500]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80025e4:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80025e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f0:	db0e      	blt.n	8002610 <TrajectoryGenerationCalculation+0x100>
 80025f2:	4b79      	ldr	r3, [pc, #484]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80025f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ff52 	bl	80004a0 <__aeabi_f2d>
 80025fc:	a374      	add	r3, pc, #464	; (adr r3, 80027d0 <TrajectoryGenerationCalculation+0x2c0>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fe fa17 	bl	8000a34 <__aeabi_dcmplt>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <TrajectoryGenerationCalculation+0x100>
		 {
			 LinkMovingPID0to9Load();
 800260c:	f7ff fd30 	bl	8002070 <LinkMovingPID0to9Load>
		 }
	 }

	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 8002610:	4b71      	ldr	r3, [pc, #452]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002612:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002616:	4b70      	ldr	r3, [pc, #448]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002618:	edd3 7a03 	vldr	s15, [r3, #12]
 800261c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002624:	d55a      	bpl.n	80026dc <TrajectoryGenerationCalculation+0x1cc>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 8002626:	4b6c      	ldr	r3, [pc, #432]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002628:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800262c:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800262e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002632:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002636:	ee16 0a90 	vmov	r0, s13
 800263a:	f7fd ff31 	bl	80004a0 <__aeabi_f2d>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	ec43 2b10 	vmov	d0, r2, r3
 8002646:	f008 f9f9 	bl	800aa3c <sqrt>
 800264a:	ec53 2b10 	vmov	r2, r3, d0
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	f7fe fa4d 	bl	8000af0 <__aeabi_d2f>
 8002656:	4603      	mov	r3, r0
 8002658:	4a5f      	ldr	r2, [pc, #380]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800265a:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 800265c:	4b5e      	ldr	r3, [pc, #376]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800265e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002660:	4a5d      	ldr	r2, [pc, #372]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002662:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 8002664:	4b5c      	ldr	r3, [pc, #368]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002666:	ed93 7a07 	vldr	s14, [r3, #28]
 800266a:	4b5b      	ldr	r3, [pc, #364]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800266c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002672:	edd3 7a01 	vldr	s15, [r3, #4]
 8002676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800267a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267e:	ee17 0a90 	vmov	r0, s15
 8002682:	f7fd ff0d 	bl	80004a0 <__aeabi_f2d>
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800268e:	f7fe f889 	bl	80007a4 <__aeabi_ddiv>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4614      	mov	r4, r2
 8002698:	461d      	mov	r5, r3
 800269a:	4b4f      	ldr	r3, [pc, #316]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fd fefe 	bl	80004a0 <__aeabi_f2d>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4620      	mov	r0, r4
 80026aa:	4629      	mov	r1, r5
 80026ac:	f7fd fd9a 	bl	80001e4 <__adddf3>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	f7fe fa1a 	bl	8000af0 <__aeabi_d2f>
 80026bc:	4603      	mov	r3, r0
 80026be:	4a46      	ldr	r2, [pc, #280]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80026c0:	62d3      	str	r3, [r2, #44]	; 0x2c
		 TrjStruc.Mode = 0;
 80026c2:	4b45      	ldr	r3, [pc, #276]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		 TrjStruc.Submode = 0;
 80026ca:	4b43      	ldr	r3, [pc, #268]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		 TrjStruc.Subsubmode = 0;
 80026d2:	4b41      	ldr	r3, [pc, #260]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80026da:	e069      	b.n	80027b0 <TrajectoryGenerationCalculation+0x2a0>
	  }
	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 80026dc:	4b3e      	ldr	r3, [pc, #248]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80026de:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80026e2:	4b3d      	ldr	r3, [pc, #244]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80026e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80026e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f0:	db5e      	blt.n	80027b0 <TrajectoryGenerationCalculation+0x2a0>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 80026f2:	4b39      	ldr	r3, [pc, #228]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80026f4:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80026f8:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80026fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80026fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002702:	4b35      	ldr	r3, [pc, #212]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002704:	ed93 7a04 	vldr	s14, [r3, #16]
 8002708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800270c:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800270e:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002716:	4a30      	ldr	r2, [pc, #192]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002718:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 800271a:	4b2f      	ldr	r3, [pc, #188]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800271c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002720:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002722:	edd3 6a00 	vldr	s13, [r3]
 8002726:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002734:	ee17 0a90 	vmov	r0, s15
 8002738:	f7fd feb2 	bl	80004a0 <__aeabi_f2d>
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002744:	f7fe f82e 	bl	80007a4 <__aeabi_ddiv>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4614      	mov	r4, r2
 800274e:	461d      	mov	r5, r3
 8002750:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd fea3 	bl	80004a0 <__aeabi_f2d>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4620      	mov	r0, r4
 8002760:	4629      	mov	r1, r5
 8002762:	f7fd fd3f 	bl	80001e4 <__adddf3>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	f7fe f9bf 	bl	8000af0 <__aeabi_d2f>
 8002772:	4603      	mov	r3, r0
 8002774:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002776:	62d3      	str	r3, [r2, #44]	; 0x2c
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800277a:	ed93 7a06 	vldr	s14, [r3, #24]
 800277e:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002780:	edd3 7a02 	vldr	s15, [r3, #8]
 8002784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800278a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 8002794:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  TrjStruc.Mode = 1;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 800279a:	2201      	movs	r2, #1
 800279c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		  TrjStruc.Submode = 0;
 80027a0:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		  TrjStruc.Subsubmode = 0;
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  }
	 TrjStruc.Equation_Timestamp = micros();
 80027b0:	f7ff fa84 	bl	8001cbc <micros>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4907      	ldr	r1, [pc, #28]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80027ba:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 TrjStruc.Loop_Timestamp = micros();
 80027be:	f7ff fa7d 	bl	8001cbc <micros>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4904      	ldr	r1, [pc, #16]	; (80027d8 <TrajectoryGenerationCalculation+0x2c8>)
 80027c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80027cc:	bf00      	nop
 80027ce:	bdb0      	pop	{r4, r5, r7, pc}
 80027d0:	1c71c71c 	.word	0x1c71c71c
 80027d4:	406c71c7 	.word	0x406c71c7
 80027d8:	20000530 	.word	0x20000530
 80027dc:	bf800000 	.word	0xbf800000
 80027e0:	200005cc 	.word	0x200005cc
 80027e4:	44800000 	.word	0x44800000

080027e8 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 80027e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ec:	ed2d 8b02 	vpush	{d8}
 80027f0:	b091      	sub	sp, #68	; 0x44
 80027f2:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 80027f4:	f7ff fa62 	bl	8001cbc <micros>
 80027f8:	4ba3      	ldr	r3, [pc, #652]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 80027fa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80027fe:	1a84      	subs	r4, r0, r2
 8002800:	eb61 0503 	sbc.w	r5, r1, r3
 8002804:	4620      	mov	r0, r4
 8002806:	4629      	mov	r1, r5
 8002808:	f7fd fe6c 	bl	80004e4 <__aeabi_ul2d>
 800280c:	a39c      	add	r3, pc, #624	; (adr r3, 8002a80 <TrajectoryGenerationProcess+0x298>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f7fd ffc7 	bl	80007a4 <__aeabi_ddiv>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	4b9a      	ldr	r3, [pc, #616]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002820:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38

	 switch (TrjStruc.Mode)
 8002824:	4b98      	ldr	r3, [pc, #608]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800282a:	2b02      	cmp	r3, #2
 800282c:	f000 83b0 	beq.w	8002f90 <TrajectoryGenerationProcess+0x7a8>
 8002830:	2b02      	cmp	r3, #2
 8002832:	f200 83bc 	bhi.w	8002fae <TrajectoryGenerationProcess+0x7c6>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <TrajectoryGenerationProcess+0x5a>
 800283a:	2b01      	cmp	r3, #1
 800283c:	f000 81b8 	beq.w	8002bb0 <TrajectoryGenerationProcess+0x3c8>
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  TrjStruc.AngularVelocityDesire = 0;
			  break;
		  }
}
 8002840:	e3b5      	b.n	8002fae <TrajectoryGenerationProcess+0x7c6>
			  if (TrjStruc.Submode == 0)
 8002842:	4b91      	ldr	r3, [pc, #580]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002848:	2b00      	cmp	r3, #0
 800284a:	d16f      	bne.n	800292c <TrajectoryGenerationProcess+0x144>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 800284c:	4b8e      	ldr	r3, [pc, #568]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fe25 	bl	80004a0 <__aeabi_f2d>
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	4b8c      	ldr	r3, [pc, #560]	; (8002a8c <TrajectoryGenerationProcess+0x2a4>)
 800285c:	f7fd fe78 	bl	8000550 <__aeabi_dmul>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4614      	mov	r4, r2
 8002866:	461d      	mov	r5, r3
 8002868:	4b87      	ldr	r3, [pc, #540]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 800286a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800286e:	4b86      	ldr	r3, [pc, #536]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002870:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002874:	f7fd fe6c 	bl	8000550 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4620      	mov	r0, r4
 800287e:	4629      	mov	r1, r5
 8002880:	f7fd fe66 	bl	8000550 <__aeabi_dmul>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4614      	mov	r4, r2
 800288a:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 800288c:	4b7e      	ldr	r3, [pc, #504]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	4618      	mov	r0, r3
 8002892:	f7fd fe05 	bl	80004a0 <__aeabi_f2d>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4620      	mov	r0, r4
 800289c:	4629      	mov	r1, r5
 800289e:	f7fd fca1 	bl	80001e4 <__adddf3>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f7fe f921 	bl	8000af0 <__aeabi_d2f>
 80028ae:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80028b0:	4a75      	ldr	r2, [pc, #468]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 80028b2:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 80028b4:	4b74      	ldr	r3, [pc, #464]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fdf1 	bl	80004a0 <__aeabi_f2d>
 80028be:	4b72      	ldr	r3, [pc, #456]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 80028c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80028c4:	f7fd fe44 	bl	8000550 <__aeabi_dmul>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	f7fe f90e 	bl	8000af0 <__aeabi_d2f>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4a6c      	ldr	r2, [pc, #432]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 80028d8:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80028da:	f7ff f9ef 	bl	8001cbc <micros>
 80028de:	4b6a      	ldr	r3, [pc, #424]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 80028e0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80028e4:	1a84      	subs	r4, r0, r2
 80028e6:	63bc      	str	r4, [r7, #56]	; 0x38
 80028e8:	eb61 0303 	sbc.w	r3, r1, r3
 80028ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80028f2:	f7fe fa15 	bl	8000d20 <__aeabi_ul2f>
 80028f6:	ee06 0a90 	vmov	s13, r0
 80028fa:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 80028fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002900:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002a90 <TrajectoryGenerationProcess+0x2a8>
 8002904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002908:	eef4 6ae7 	vcmpe.f32	s13, s15
 800290c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002910:	da00      	bge.n	8002914 <TrajectoryGenerationProcess+0x12c>
			  break;
 8002912:	e349      	b.n	8002fa8 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 8002914:	f7ff f9d2 	bl	8001cbc <micros>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	495a      	ldr	r1, [pc, #360]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 800291e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 8002922:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002924:	2201      	movs	r2, #1
 8002926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 800292a:	e33d      	b.n	8002fa8 <TrajectoryGenerationProcess+0x7c0>
			  else if (TrjStruc.Submode == 1)
 800292c:	4b56      	ldr	r3, [pc, #344]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 800292e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002932:	2b01      	cmp	r3, #1
 8002934:	f040 8338 	bne.w	8002fa8 <TrajectoryGenerationProcess+0x7c0>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fdaf 	bl	80004a0 <__aeabi_f2d>
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <TrajectoryGenerationProcess+0x2ac>)
 8002948:	f7fd fe02 	bl	8000550 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4614      	mov	r4, r2
 8002952:	461d      	mov	r5, r3
 8002954:	4b4c      	ldr	r3, [pc, #304]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002956:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800295a:	4b4b      	ldr	r3, [pc, #300]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 800295c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002960:	f7fd fdf6 	bl	8000550 <__aeabi_dmul>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4620      	mov	r0, r4
 800296a:	4629      	mov	r1, r5
 800296c:	f7fd fdf0 	bl	8000550 <__aeabi_dmul>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4614      	mov	r4, r2
 8002976:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 8002978:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 800297a:	ed93 7a07 	vldr	s14, [r3, #28]
 800297e:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002980:	edd3 7a01 	vldr	s15, [r3, #4]
 8002984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002988:	ee17 0a90 	vmov	r0, s15
 800298c:	f7fd fd88 	bl	80004a0 <__aeabi_f2d>
 8002990:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002992:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002996:	f7fd fddb 	bl	8000550 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4620      	mov	r0, r4
 80029a0:	4629      	mov	r1, r5
 80029a2:	f7fd fc1f 	bl	80001e4 <__adddf3>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4614      	mov	r4, r2
 80029ac:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 80029ae:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd fd74 	bl	80004a0 <__aeabi_f2d>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4620      	mov	r0, r4
 80029be:	4629      	mov	r1, r5
 80029c0:	f7fd fc10 	bl	80001e4 <__adddf3>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f7fe f890 	bl	8000af0 <__aeabi_d2f>
 80029d0:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80029d2:	4a2d      	ldr	r2, [pc, #180]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 80029d4:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 80029d6:	4b2c      	ldr	r3, [pc, #176]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d15b      	bne.n	8002a98 <TrajectoryGenerationProcess+0x2b0>
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 80029e0:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fd5b 	bl	80004a0 <__aeabi_f2d>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	633a      	str	r2, [r7, #48]	; 0x30
 80029f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 80029f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80029fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a00:	f7fd fda6 	bl	8000550 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4614      	mov	r4, r2
 8002a0a:	461d      	mov	r5, r3
													   (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular);
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002a0e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002a14:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1c:	ee17 0a90 	vmov	r0, s15
 8002a20:	f7fd fd3e 	bl	80004a0 <__aeabi_f2d>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
					  TrjStruc.AngularVelocityDesire = ( -1.0*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec ) +
 8002a28:	4620      	mov	r0, r4
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	f7fd fbda 	bl	80001e4 <__adddf3>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f7fe f85a 	bl	8000af0 <__aeabi_d2f>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002a40:	6253      	str	r3, [r2, #36]	; 0x24
					  if ( TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <= TrjStruc.AngularVelocityFinalMin )
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002a44:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002a4a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002a54:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002a58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a60:	d875      	bhi.n	8002b4e <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 1;
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 8002a6a:	f7ff f927 	bl	8001cbc <micros>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4905      	ldr	r1, [pc, #20]	; (8002a88 <TrajectoryGenerationProcess+0x2a0>)
 8002a74:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002a78:	e069      	b.n	8002b4e <TrajectoryGenerationProcess+0x366>
 8002a7a:	bf00      	nop
 8002a7c:	f3af 8000 	nop.w
 8002a80:	00000000 	.word	0x00000000
 8002a84:	412e8480 	.word	0x412e8480
 8002a88:	20000530 	.word	0x20000530
 8002a8c:	3fe00000 	.word	0x3fe00000
 8002a90:	49742400 	.word	0x49742400
 8002a94:	bfe00000 	.word	0xbfe00000
				  else if ( TrjStruc.Subsubmode == 1 )
 8002a98:	4ba9      	ldr	r3, [pc, #676]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d14c      	bne.n	8002b3c <TrajectoryGenerationProcess+0x354>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 8002aa2:	4ba7      	ldr	r3, [pc, #668]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002aa4:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002aa8:	4ba5      	ldr	r3, [pc, #660]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002aaa:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab2:	4ba3      	ldr	r3, [pc, #652]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002ab4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeTriangular*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 8002ab8:	f7ff f900 	bl	8001cbc <micros>
 8002abc:	4ba0      	ldr	r3, [pc, #640]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002abe:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002ac2:	1a84      	subs	r4, r0, r2
 8002ac4:	62bc      	str	r4, [r7, #40]	; 0x28
 8002ac6:	eb61 0303 	sbc.w	r3, r1, r3
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002acc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ad0:	f7fd fd08 	bl	80004e4 <__aeabi_ul2d>
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	460d      	mov	r5, r1
 8002ad8:	4b99      	ldr	r3, [pc, #612]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002ada:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ade:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8002d44 <TrajectoryGenerationProcess+0x55c>
 8002ae2:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002ae6:	4b96      	ldr	r3, [pc, #600]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002ae8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002aec:	4b94      	ldr	r3, [pc, #592]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002aee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002af2:	1a86      	subs	r6, r0, r2
 8002af4:	623e      	str	r6, [r7, #32]
 8002af6:	eb61 0303 	sbc.w	r3, r1, r3
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b00:	f7fe f90e 	bl	8000d20 <__aeabi_ul2f>
 8002b04:	ee07 0a90 	vmov	s15, r0
 8002b08:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002b0c:	ee17 0a90 	vmov	r0, s15
 8002b10:	f7fd fcc6 	bl	80004a0 <__aeabi_f2d>
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b1c:	f7fd fe42 	bl	80007a4 <__aeabi_ddiv>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4620      	mov	r0, r4
 8002b26:	4629      	mov	r1, r5
 8002b28:	f7fd ff98 	bl	8000a5c <__aeabi_dcmpge>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00d      	beq.n	8002b4e <TrajectoryGenerationProcess+0x366>
						  TrjStruc.Subsubmode = 2;
 8002b32:	4b83      	ldr	r3, [pc, #524]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002b34:	2202      	movs	r2, #2
 8002b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002b3a:	e008      	b.n	8002b4e <TrajectoryGenerationProcess+0x366>
				  else if ( TrjStruc.Subsubmode == 2 )
 8002b3c:	4b80      	ldr	r3, [pc, #512]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d103      	bne.n	8002b4e <TrajectoryGenerationProcess+0x366>
					  TrjStruc.AngularVelocityDesire = 0;
 8002b46:	4b7e      	ldr	r3, [pc, #504]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 8002b4e:	f7ff f8b5 	bl	8001cbc <micros>
 8002b52:	4b7b      	ldr	r3, [pc, #492]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002b54:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002b58:	1a84      	subs	r4, r0, r2
 8002b5a:	61bc      	str	r4, [r7, #24]
 8002b5c:	eb61 0303 	sbc.w	r3, r1, r3
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b66:	f7fe f8db 	bl	8000d20 <__aeabi_ul2f>
 8002b6a:	ee06 0a90 	vmov	s13, r0
 8002b6e:	4b74      	ldr	r3, [pc, #464]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002b70:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b74:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002d44 <TrajectoryGenerationProcess+0x55c>
 8002b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b7c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b84:	da00      	bge.n	8002b88 <TrajectoryGenerationProcess+0x3a0>
			  break;
 8002b86:	e20f      	b.n	8002fa8 <TrajectoryGenerationProcess+0x7c0>
					  TrjStruc.Equation_Timestamp = micros();
 8002b88:	f7ff f898 	bl	8001cbc <micros>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	496b      	ldr	r1, [pc, #428]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002b92:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002b96:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 8002b9e:	4b68      	ldr	r3, [pc, #416]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002ba6:	4b66      	ldr	r3, [pc, #408]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 8002bae:	e1fb      	b.n	8002fa8 <TrajectoryGenerationProcess+0x7c0>
			  if (TrjStruc.Submode == 0)
 8002bb0:	4b63      	ldr	r3, [pc, #396]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d16e      	bne.n	8002c98 <TrajectoryGenerationProcess+0x4b0>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002bba:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fc6e 	bl	80004a0 <__aeabi_f2d>
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	4b5f      	ldr	r3, [pc, #380]	; (8002d48 <TrajectoryGenerationProcess+0x560>)
 8002bca:	f7fd fcc1 	bl	8000550 <__aeabi_dmul>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4614      	mov	r4, r2
 8002bd4:	461d      	mov	r5, r3
 8002bd6:	4b5a      	ldr	r3, [pc, #360]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002bd8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002bdc:	4b58      	ldr	r3, [pc, #352]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002bde:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002be2:	f7fd fcb5 	bl	8000550 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4620      	mov	r0, r4
 8002bec:	4629      	mov	r1, r5
 8002bee:	f7fd fcaf 	bl	8000550 <__aeabi_dmul>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4614      	mov	r4, r2
 8002bf8:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 8002bfa:	4b51      	ldr	r3, [pc, #324]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fc4e 	bl	80004a0 <__aeabi_f2d>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4620      	mov	r0, r4
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	f7fd faea 	bl	80001e4 <__adddf3>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	f7fd ff6a 	bl	8000af0 <__aeabi_d2f>
 8002c1c:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002c1e:	4a48      	ldr	r2, [pc, #288]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002c20:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularAcceration * TrjStruc.Equation_Realtime_Sec;
 8002c22:	4b47      	ldr	r3, [pc, #284]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fc3a 	bl	80004a0 <__aeabi_f2d>
 8002c2c:	4b44      	ldr	r3, [pc, #272]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002c2e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c32:	f7fd fc8d 	bl	8000550 <__aeabi_dmul>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f7fd ff57 	bl	8000af0 <__aeabi_d2f>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4a3e      	ldr	r2, [pc, #248]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002c46:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002c48:	f7ff f838 	bl	8001cbc <micros>
 8002c4c:	4b3c      	ldr	r3, [pc, #240]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002c4e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002c52:	ebb0 0a02 	subs.w	sl, r0, r2
 8002c56:	eb61 0b03 	sbc.w	fp, r1, r3
 8002c5a:	4650      	mov	r0, sl
 8002c5c:	4659      	mov	r1, fp
 8002c5e:	f7fe f85f 	bl	8000d20 <__aeabi_ul2f>
 8002c62:	ee06 0a90 	vmov	s13, r0
 8002c66:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002d44 <TrajectoryGenerationProcess+0x55c>
 8002c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c74:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7c:	da00      	bge.n	8002c80 <TrajectoryGenerationProcess+0x498>
			  break;
 8002c7e:	e195      	b.n	8002fac <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002c80:	f7ff f81c 	bl	8001cbc <micros>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	492d      	ldr	r1, [pc, #180]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002c8a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 1;
 8002c8e:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 8002c96:	e189      	b.n	8002fac <TrajectoryGenerationProcess+0x7c4>
			  else if (TrjStruc.Submode == 1)
 8002c98:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d154      	bne.n	8002d4c <TrajectoryGenerationProcess+0x564>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002ca2:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fbfa 	bl	80004a0 <__aeabi_f2d>
 8002cac:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002cae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002cb2:	f7fd fc4d 	bl	8000550 <__aeabi_dmul>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4614      	mov	r4, r2
 8002cbc:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fbec 	bl	80004a0 <__aeabi_f2d>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4620      	mov	r0, r4
 8002cce:	4629      	mov	r1, r5
 8002cd0:	f7fd fa88 	bl	80001e4 <__adddf3>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f7fd ff08 	bl	8000af0 <__aeabi_d2f>
 8002ce0:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002ce2:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002ce4:	6213      	str	r3, [r2, #32]
				  TrjStruc.AngularVelocityDesire = TrjStruc.AngularVelocity;
 8002ce6:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002cec:	6253      	str	r3, [r2, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 8002cee:	f7fe ffe5 	bl	8001cbc <micros>
 8002cf2:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002cf4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002cf8:	ebb0 0802 	subs.w	r8, r0, r2
 8002cfc:	eb61 0903 	sbc.w	r9, r1, r3
 8002d00:	4640      	mov	r0, r8
 8002d02:	4649      	mov	r1, r9
 8002d04:	f7fe f80c 	bl	8000d20 <__aeabi_ul2f>
 8002d08:	ee06 0a90 	vmov	s13, r0
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002d0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d12:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002d44 <TrajectoryGenerationProcess+0x55c>
 8002d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d1a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d22:	da00      	bge.n	8002d26 <TrajectoryGenerationProcess+0x53e>
			  break;
 8002d24:	e142      	b.n	8002fac <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002d26:	f7fe ffc9 	bl	8001cbc <micros>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4904      	ldr	r1, [pc, #16]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002d30:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 2;
 8002d34:	4b02      	ldr	r3, [pc, #8]	; (8002d40 <TrajectoryGenerationProcess+0x558>)
 8002d36:	2202      	movs	r2, #2
 8002d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			  break;
 8002d3c:	e136      	b.n	8002fac <TrajectoryGenerationProcess+0x7c4>
 8002d3e:	bf00      	nop
 8002d40:	20000530 	.word	0x20000530
 8002d44:	49742400 	.word	0x49742400
 8002d48:	3fe00000 	.word	0x3fe00000
			  else if (TrjStruc.Submode == 2)
 8002d4c:	4b9b      	ldr	r3, [pc, #620]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	f040 812a 	bne.w	8002fac <TrajectoryGenerationProcess+0x7c4>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002d58:	4b98      	ldr	r3, [pc, #608]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fb9f 	bl	80004a0 <__aeabi_f2d>
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	4b96      	ldr	r3, [pc, #600]	; (8002fc0 <TrajectoryGenerationProcess+0x7d8>)
 8002d68:	f7fd fbf2 	bl	8000550 <__aeabi_dmul>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4614      	mov	r4, r2
 8002d72:	461d      	mov	r5, r3
 8002d74:	4b91      	ldr	r3, [pc, #580]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002d76:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002d7a:	4b90      	ldr	r3, [pc, #576]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002d7c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d80:	f7fd fbe6 	bl	8000550 <__aeabi_dmul>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4620      	mov	r0, r4
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	f7fd fbe0 	bl	8000550 <__aeabi_dmul>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4614      	mov	r4, r2
 8002d96:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002d98:	4b88      	ldr	r3, [pc, #544]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fb7f 	bl	80004a0 <__aeabi_f2d>
 8002da2:	4b86      	ldr	r3, [pc, #536]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002da4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002da8:	f7fd fbd2 	bl	8000550 <__aeabi_dmul>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4620      	mov	r0, r4
 8002db2:	4629      	mov	r1, r5
 8002db4:	f7fd fa16 	bl	80001e4 <__adddf3>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4614      	mov	r4, r2
 8002dbe:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 8002dc0:	4b7e      	ldr	r3, [pc, #504]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fb6b 	bl	80004a0 <__aeabi_f2d>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4620      	mov	r0, r4
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	f7fd fa07 	bl	80001e4 <__adddf3>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f7fd fe87 	bl	8000af0 <__aeabi_d2f>
 8002de2:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002de4:	4a75      	ldr	r2, [pc, #468]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002de6:	6213      	str	r3, [r2, #32]
				  if ( TrjStruc.Subsubmode == 0 )
 8002de8:	4b74      	ldr	r3, [pc, #464]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d142      	bne.n	8002e78 <TrajectoryGenerationProcess+0x690>
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 8002df2:	4b72      	ldr	r3, [pc, #456]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002df4:	edd3 7a07 	vldr	s15, [r3, #28]
 8002df8:	eef1 7a67 	vneg.f32	s15, s15
 8002dfc:	ee17 3a90 	vmov	r3, s15
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd fb4d 	bl	80004a0 <__aeabi_f2d>
 8002e06:	4b6d      	ldr	r3, [pc, #436]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002e08:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e0c:	f7fd fba0 	bl	8000550 <__aeabi_dmul>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4614      	mov	r4, r2
 8002e16:	461d      	mov	r5, r3
							                           + ( TrjStruc.AngularVelocity );
 8002e18:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fb3f 	bl	80004a0 <__aeabi_f2d>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4620      	mov	r0, r4
 8002e28:	4629      	mov	r1, r5
 8002e2a:	f7fd f9db 	bl	80001e4 <__adddf3>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	f7fd fe5b 	bl	8000af0 <__aeabi_d2f>
 8002e3a:	4603      	mov	r3, r0
					  TrjStruc.AngularVelocityDesire = ( -1*TrjStruc.AngularAcceration*TrjStruc.Equation_Realtime_Sec )
 8002e3c:	4a5f      	ldr	r2, [pc, #380]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002e3e:	6253      	str	r3, [r2, #36]	; 0x24
					  if (  TrjStruc.Alpha * TrjStruc.AngularVelocityDesire <=  TrjStruc.AngularVelocityFinalMin )
 8002e40:	4b5e      	ldr	r3, [pc, #376]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002e42:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002e46:	4b5d      	ldr	r3, [pc, #372]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002e48:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e50:	4b5a      	ldr	r3, [pc, #360]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002e52:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5e:	d866      	bhi.n	8002f2e <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 1;
 8002e60:	4b56      	ldr	r3, [pc, #344]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						  TrjStruc.Velocity_Timestamp = micros();
 8002e68:	f7fe ff28 	bl	8001cbc <micros>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4952      	ldr	r1, [pc, #328]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002e72:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002e76:	e05a      	b.n	8002f2e <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 1 )
 8002e78:	4b50      	ldr	r3, [pc, #320]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d14c      	bne.n	8002f1c <TrajectoryGenerationProcess+0x734>
					  TrjStruc.AngularVelocityDesire = TrjStruc.Alpha * TrjStruc.AngularVelocityFinalMin;
 8002e82:	4b4e      	ldr	r3, [pc, #312]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002e84:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002e88:	4b4c      	ldr	r3, [pc, #304]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002e8a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e92:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002e94:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					  if (micros()-TrjStruc.Velocity_Timestamp >= ((TrjStruc.BlendTimeLSPB*1000000)-(TrjStruc.Velocity_Timestamp - TrjStruc.Equation_Timestamp))/2.0)
 8002e98:	f7fe ff10 	bl	8001cbc <micros>
 8002e9c:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002e9e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002ea2:	1a84      	subs	r4, r0, r2
 8002ea4:	613c      	str	r4, [r7, #16]
 8002ea6:	eb61 0303 	sbc.w	r3, r1, r3
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002eb0:	f7fd fb18 	bl	80004e4 <__aeabi_ul2d>
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	460d      	mov	r5, r1
 8002eb8:	4b40      	ldr	r3, [pc, #256]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002fc4 <TrajectoryGenerationProcess+0x7dc>
 8002ec2:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002ec6:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002ec8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002ecc:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002ece:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002ed2:	1a86      	subs	r6, r0, r2
 8002ed4:	60be      	str	r6, [r7, #8]
 8002ed6:	eb61 0303 	sbc.w	r3, r1, r3
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ee0:	f7fd ff1e 	bl	8000d20 <__aeabi_ul2f>
 8002ee4:	ee07 0a90 	vmov	s15, r0
 8002ee8:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002eec:	ee17 0a90 	vmov	r0, s15
 8002ef0:	f7fd fad6 	bl	80004a0 <__aeabi_f2d>
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002efc:	f7fd fc52 	bl	80007a4 <__aeabi_ddiv>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4620      	mov	r0, r4
 8002f06:	4629      	mov	r1, r5
 8002f08:	f7fd fda8 	bl	8000a5c <__aeabi_dcmpge>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <TrajectoryGenerationProcess+0x746>
						  TrjStruc.Subsubmode = 2;
 8002f12:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002f14:	2202      	movs	r2, #2
 8002f16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002f1a:	e008      	b.n	8002f2e <TrajectoryGenerationProcess+0x746>
				  else if ( TrjStruc.Subsubmode == 2 )
 8002f1c:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d103      	bne.n	8002f2e <TrajectoryGenerationProcess+0x746>
					  TrjStruc.AngularVelocityDesire = 0;
 8002f26:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 8002f2e:	f7fe fec5 	bl	8001cbc <micros>
 8002f32:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002f34:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f38:	1a84      	subs	r4, r0, r2
 8002f3a:	603c      	str	r4, [r7, #0]
 8002f3c:	eb61 0303 	sbc.w	r3, r1, r3
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f46:	f7fd feeb 	bl	8000d20 <__aeabi_ul2f>
 8002f4a:	ee06 0a90 	vmov	s13, r0
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002fc4 <TrajectoryGenerationProcess+0x7dc>
 8002f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f5c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f64:	da00      	bge.n	8002f68 <TrajectoryGenerationProcess+0x780>
			  break;
 8002f66:	e021      	b.n	8002fac <TrajectoryGenerationProcess+0x7c4>
					  TrjStruc.Equation_Timestamp = micros();
 8002f68:	f7fe fea8 	bl	8001cbc <micros>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4912      	ldr	r1, [pc, #72]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002f72:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  TrjStruc.Submode = 0;
 8002f76:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					  TrjStruc.Subsubmode = 0;
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002f88:	2202      	movs	r2, #2
 8002f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			  break;
 8002f8e:	e00d      	b.n	8002fac <TrajectoryGenerationProcess+0x7c4>
			  Moving_Link_Task_Flag = 1;
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <TrajectoryGenerationProcess+0x7e0>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f9a:	4a08      	ldr	r2, [pc, #32]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002f9c:	6213      	str	r3, [r2, #32]
			  TrjStruc.AngularVelocityDesire = 0;
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <TrajectoryGenerationProcess+0x7d4>)
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
			  break;
 8002fa6:	e002      	b.n	8002fae <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002fa8:	bf00      	nop
 8002faa:	e000      	b.n	8002fae <TrajectoryGenerationProcess+0x7c6>
			  break;
 8002fac:	bf00      	nop
}
 8002fae:	bf00      	nop
 8002fb0:	3744      	adds	r7, #68	; 0x44
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	ecbd 8b02 	vpop	{d8}
 8002fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fbc:	20000530 	.word	0x20000530
 8002fc0:	bfe00000 	.word	0xbfe00000
 8002fc4:	49742400 	.word	0x49742400
 8002fc8:	20000410 	.word	0x20000410

08002fcc <PIDController2in1>:

void PIDController2in1()
{
 8002fcc:	b5b0      	push	{r4, r5, r7, lr}
 8002fce:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 8002fd0:	4b7f      	ldr	r3, [pc, #508]	; (80031d0 <PIDController2in1+0x204>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	4a7f      	ldr	r2, [pc, #508]	; (80031d4 <PIDController2in1+0x208>)
 8002fd6:	61d3      	str	r3, [r2, #28]
    PositionPIDController.NowError = PositionPIDController.OutputDesire - PositionPIDController.OutputFeedback;
 8002fd8:	4b7e      	ldr	r3, [pc, #504]	; (80031d4 <PIDController2in1+0x208>)
 8002fda:	ed93 7a07 	vldr	s14, [r3, #28]
 8002fde:	4b7d      	ldr	r3, [pc, #500]	; (80031d4 <PIDController2in1+0x208>)
 8002fe0:	edd3 7a08 	vldr	s15, [r3, #32]
 8002fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe8:	4b7a      	ldr	r3, [pc, #488]	; (80031d4 <PIDController2in1+0x208>)
 8002fea:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 8002fee:	4b79      	ldr	r3, [pc, #484]	; (80031d4 <PIDController2in1+0x208>)
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd fa54 	bl	80004a0 <__aeabi_f2d>
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	460d      	mov	r5, r1
 8002ffc:	4b75      	ldr	r3, [pc, #468]	; (80031d4 <PIDController2in1+0x208>)
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd fa4d 	bl	80004a0 <__aeabi_f2d>
 8003006:	4b73      	ldr	r3, [pc, #460]	; (80031d4 <PIDController2in1+0x208>)
 8003008:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800300c:	f7fd faa0 	bl	8000550 <__aeabi_dmul>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4620      	mov	r0, r4
 8003016:	4629      	mov	r1, r5
 8003018:	f7fd f8e4 	bl	80001e4 <__adddf3>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	f7fd fd64 	bl	8000af0 <__aeabi_d2f>
 8003028:	4603      	mov	r3, r0
 800302a:	4a6a      	ldr	r2, [pc, #424]	; (80031d4 <PIDController2in1+0x208>)
 800302c:	6253      	str	r3, [r2, #36]	; 0x24
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 800302e:	4b69      	ldr	r3, [pc, #420]	; (80031d4 <PIDController2in1+0x208>)
 8003030:	ed93 7a00 	vldr	s14, [r3]
 8003034:	4b67      	ldr	r3, [pc, #412]	; (80031d4 <PIDController2in1+0x208>)
 8003036:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800303a:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 800303e:	4b65      	ldr	r3, [pc, #404]	; (80031d4 <PIDController2in1+0x208>)
 8003040:	edd3 6a01 	vldr	s13, [r3, #4]
 8003044:	4b63      	ldr	r3, [pc, #396]	; (80031d4 <PIDController2in1+0x208>)
 8003046:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800304a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800304e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003052:	ee17 0a90 	vmov	r0, s15
 8003056:	f7fd fa23 	bl	80004a0 <__aeabi_f2d>
 800305a:	4604      	mov	r4, r0
 800305c:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime);
 800305e:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <PIDController2in1+0x208>)
 8003060:	ed93 7a02 	vldr	s14, [r3, #8]
 8003064:	4b5b      	ldr	r3, [pc, #364]	; (80031d4 <PIDController2in1+0x208>)
 8003066:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800306a:	4b5a      	ldr	r3, [pc, #360]	; (80031d4 <PIDController2in1+0x208>)
 800306c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003070:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003078:	ee17 0a90 	vmov	r0, s15
 800307c:	f7fd fa10 	bl	80004a0 <__aeabi_f2d>
 8003080:	4b54      	ldr	r3, [pc, #336]	; (80031d4 <PIDController2in1+0x208>)
 8003082:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003086:	f7fd fb8d 	bl	80007a4 <__aeabi_ddiv>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4620      	mov	r0, r4
 8003090:	4629      	mov	r1, r5
 8003092:	f7fd f8a7 	bl	80001e4 <__adddf3>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f7fd fd27 	bl	8000af0 <__aeabi_d2f>
 80030a2:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 80030a4:	4a4b      	ldr	r2, [pc, #300]	; (80031d4 <PIDController2in1+0x208>)
 80030a6:	6153      	str	r3, [r2, #20]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 80030a8:	4b4a      	ldr	r3, [pc, #296]	; (80031d4 <PIDController2in1+0x208>)
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	4a49      	ldr	r2, [pc, #292]	; (80031d4 <PIDController2in1+0x208>)
 80030ae:	62d3      	str	r3, [r2, #44]	; 0x2c

    VelocityPIDController.OutputDesire = PositionPIDController.ControllerOutput + TrjStruc.AngularVelocityDesire;
 80030b0:	4b48      	ldr	r3, [pc, #288]	; (80031d4 <PIDController2in1+0x208>)
 80030b2:	ed93 7a05 	vldr	s14, [r3, #20]
 80030b6:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <PIDController2in1+0x204>)
 80030b8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80030bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c0:	4b45      	ldr	r3, [pc, #276]	; (80031d8 <PIDController2in1+0x20c>)
 80030c2:	edc3 7a07 	vstr	s15, [r3, #28]
    VelocityPIDController.NowError = VelocityPIDController.OutputDesire - VelocityPIDController.OutputFeedback;
 80030c6:	4b44      	ldr	r3, [pc, #272]	; (80031d8 <PIDController2in1+0x20c>)
 80030c8:	ed93 7a07 	vldr	s14, [r3, #28]
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <PIDController2in1+0x20c>)
 80030ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80030d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d6:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <PIDController2in1+0x20c>)
 80030d8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    VelocityPIDController.Integral_Value += VelocityPIDController.NowError*VelocityPIDController.SamplingTime;
 80030dc:	4b3e      	ldr	r3, [pc, #248]	; (80031d8 <PIDController2in1+0x20c>)
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd f9dd 	bl	80004a0 <__aeabi_f2d>
 80030e6:	4604      	mov	r4, r0
 80030e8:	460d      	mov	r5, r1
 80030ea:	4b3b      	ldr	r3, [pc, #236]	; (80031d8 <PIDController2in1+0x20c>)
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd f9d6 	bl	80004a0 <__aeabi_f2d>
 80030f4:	4b38      	ldr	r3, [pc, #224]	; (80031d8 <PIDController2in1+0x20c>)
 80030f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80030fa:	f7fd fa29 	bl	8000550 <__aeabi_dmul>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4620      	mov	r0, r4
 8003104:	4629      	mov	r1, r5
 8003106:	f7fd f86d 	bl	80001e4 <__adddf3>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	f7fd fced 	bl	8000af0 <__aeabi_d2f>
 8003116:	4603      	mov	r3, r0
 8003118:	4a2f      	ldr	r2, [pc, #188]	; (80031d8 <PIDController2in1+0x20c>)
 800311a:	6253      	str	r3, [r2, #36]	; 0x24
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 800311c:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <PIDController2in1+0x20c>)
 800311e:	ed93 7a00 	vldr	s14, [r3]
 8003122:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <PIDController2in1+0x20c>)
 8003124:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003128:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
 800312c:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <PIDController2in1+0x20c>)
 800312e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003132:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <PIDController2in1+0x20c>)
 8003134:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800313c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003140:	ee17 0a90 	vmov	r0, s15
 8003144:	f7fd f9ac 	bl	80004a0 <__aeabi_f2d>
 8003148:	4604      	mov	r4, r0
 800314a:	460d      	mov	r5, r1
					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime)
 800314c:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <PIDController2in1+0x20c>)
 800314e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003152:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <PIDController2in1+0x20c>)
 8003154:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003158:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <PIDController2in1+0x20c>)
 800315a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800315e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003166:	ee17 0a90 	vmov	r0, s15
 800316a:	f7fd f999 	bl	80004a0 <__aeabi_f2d>
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <PIDController2in1+0x20c>)
 8003170:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003174:	f7fd fb16 	bl	80007a4 <__aeabi_ddiv>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4620      	mov	r0, r4
 800317e:	4629      	mov	r1, r5
 8003180:	f7fd f830 	bl	80001e4 <__adddf3>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4614      	mov	r4, r2
 800318a:	461d      	mov	r5, r3
					  +( TrjStruc.Alpha * VelocityPIDController.offSet );
 800318c:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <PIDController2in1+0x204>)
 800318e:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8003192:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <PIDController2in1+0x20c>)
 8003194:	edd3 7a04 	vldr	s15, [r3, #16]
 8003198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319c:	ee17 0a90 	vmov	r0, s15
 80031a0:	f7fd f97e 	bl	80004a0 <__aeabi_f2d>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4620      	mov	r0, r4
 80031aa:	4629      	mov	r1, r5
 80031ac:	f7fd f81a 	bl	80001e4 <__adddf3>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	f7fd fc9a 	bl	8000af0 <__aeabi_d2f>
 80031bc:	4603      	mov	r3, r0
    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
 80031be:	4a06      	ldr	r2, [pc, #24]	; (80031d8 <PIDController2in1+0x20c>)
 80031c0:	6153      	str	r3, [r2, #20]
    VelocityPIDController.PreviousError = VelocityPIDController.NowError;
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <PIDController2in1+0x20c>)
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <PIDController2in1+0x20c>)
 80031c8:	62d3      	str	r3, [r2, #44]	; 0x2c

}
 80031ca:	bf00      	nop
 80031cc:	bdb0      	pop	{r4, r5, r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000530 	.word	0x20000530
 80031d4:	20000430 	.word	0x20000430
 80031d8:	20000470 	.word	0x20000470

080031dc <PureVeloPID>:

	StabilizerPIDController.PreviousError = StabilizerPIDController.NowError;
}

void PureVeloPID()
{
 80031dc:	b5b0      	push	{r4, r5, r7, lr}
 80031de:	af00      	add	r7, sp, #0
	PureVelocityPIDController.OutputDesire = TrjStruc.AngularVelocityDesire;
 80031e0:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <PureVeloPID+0x114>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	4a43      	ldr	r2, [pc, #268]	; (80032f4 <PureVeloPID+0x118>)
 80031e6:	61d3      	str	r3, [r2, #28]
	PureVelocityPIDController.NowError = PureVelocityPIDController.OutputDesire - VelocityPIDController.OutputFeedback;
 80031e8:	4b42      	ldr	r3, [pc, #264]	; (80032f4 <PureVeloPID+0x118>)
 80031ea:	ed93 7a07 	vldr	s14, [r3, #28]
 80031ee:	4b42      	ldr	r3, [pc, #264]	; (80032f8 <PureVeloPID+0x11c>)
 80031f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80031f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f8:	4b3e      	ldr	r3, [pc, #248]	; (80032f4 <PureVeloPID+0x118>)
 80031fa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	PureVelocityPIDController.Integral_Value += PureVelocityPIDController.NowError*PureVelocityPIDController.SamplingTime;
 80031fe:	4b3d      	ldr	r3, [pc, #244]	; (80032f4 <PureVeloPID+0x118>)
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd f94c 	bl	80004a0 <__aeabi_f2d>
 8003208:	4604      	mov	r4, r0
 800320a:	460d      	mov	r5, r1
 800320c:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <PureVeloPID+0x118>)
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd f945 	bl	80004a0 <__aeabi_f2d>
 8003216:	4b37      	ldr	r3, [pc, #220]	; (80032f4 <PureVeloPID+0x118>)
 8003218:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800321c:	f7fd f998 	bl	8000550 <__aeabi_dmul>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4620      	mov	r0, r4
 8003226:	4629      	mov	r1, r5
 8003228:	f7fc ffdc 	bl	80001e4 <__adddf3>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	f7fd fc5c 	bl	8000af0 <__aeabi_d2f>
 8003238:	4603      	mov	r3, r0
 800323a:	4a2e      	ldr	r2, [pc, #184]	; (80032f4 <PureVeloPID+0x118>)
 800323c:	6253      	str	r3, [r2, #36]	; 0x24
	PureVelocityPIDController.ControllerOutput = (PureVelocityPIDController.Kp*PureVelocityPIDController.NowError)
 800323e:	4b2d      	ldr	r3, [pc, #180]	; (80032f4 <PureVeloPID+0x118>)
 8003240:	ed93 7a00 	vldr	s14, [r3]
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <PureVeloPID+0x118>)
 8003246:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800324a:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PureVelocityPIDController.Ki * PureVelocityPIDController.Integral_Value)
 800324e:	4b29      	ldr	r3, [pc, #164]	; (80032f4 <PureVeloPID+0x118>)
 8003250:	edd3 6a01 	vldr	s13, [r3, #4]
 8003254:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <PureVeloPID+0x118>)
 8003256:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800325a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800325e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003262:	ee17 0a90 	vmov	r0, s15
 8003266:	f7fd f91b 	bl	80004a0 <__aeabi_f2d>
 800326a:	4604      	mov	r4, r0
 800326c:	460d      	mov	r5, r1
					  +(PureVelocityPIDController.Kd * (PureVelocityPIDController.NowError-PureVelocityPIDController.PreviousError)/PureVelocityPIDController.SamplingTime)
 800326e:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <PureVeloPID+0x118>)
 8003270:	ed93 7a02 	vldr	s14, [r3, #8]
 8003274:	4b1f      	ldr	r3, [pc, #124]	; (80032f4 <PureVeloPID+0x118>)
 8003276:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800327a:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <PureVeloPID+0x118>)
 800327c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003280:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003288:	ee17 0a90 	vmov	r0, s15
 800328c:	f7fd f908 	bl	80004a0 <__aeabi_f2d>
 8003290:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <PureVeloPID+0x118>)
 8003292:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003296:	f7fd fa85 	bl	80007a4 <__aeabi_ddiv>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4620      	mov	r0, r4
 80032a0:	4629      	mov	r1, r5
 80032a2:	f7fc ff9f 	bl	80001e4 <__adddf3>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4614      	mov	r4, r2
 80032ac:	461d      	mov	r5, r3
					  +( TrjStruc.Alpha * PureVelocityPIDController.offSet );
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <PureVeloPID+0x114>)
 80032b0:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <PureVeloPID+0x118>)
 80032b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80032ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032be:	ee17 0a90 	vmov	r0, s15
 80032c2:	f7fd f8ed 	bl	80004a0 <__aeabi_f2d>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4620      	mov	r0, r4
 80032cc:	4629      	mov	r1, r5
 80032ce:	f7fc ff89 	bl	80001e4 <__adddf3>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	f7fd fc09 	bl	8000af0 <__aeabi_d2f>
 80032de:	4603      	mov	r3, r0
	PureVelocityPIDController.ControllerOutput = (PureVelocityPIDController.Kp*PureVelocityPIDController.NowError)
 80032e0:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <PureVeloPID+0x118>)
 80032e2:	6153      	str	r3, [r2, #20]
	PureVelocityPIDController.PreviousError = PureVelocityPIDController.NowError;
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <PureVeloPID+0x118>)
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	4a02      	ldr	r2, [pc, #8]	; (80032f4 <PureVeloPID+0x118>)
 80032ea:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80032ec:	bf00      	nop
 80032ee:	bdb0      	pop	{r4, r5, r7, pc}
 80032f0:	20000530 	.word	0x20000530
 80032f4:	200004b0 	.word	0x200004b0
 80032f8:	20000470 	.word	0x20000470

080032fc <UARTInit>:



///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <UARTInit+0x4c>)
 8003306:	88db      	ldrh	r3, [r3, #6]
 8003308:	4619      	mov	r1, r3
 800330a:	2001      	movs	r0, #1
 800330c:	f007 fa86 	bl	800a81c <calloc>
 8003310:	4603      	mov	r3, r0
 8003312:	461a      	mov	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <UARTInit+0x4c>)
 800331a:	889b      	ldrh	r3, [r3, #4]
 800331c:	4619      	mov	r1, r3
 800331e:	2001      	movs	r0, #1
 8003320:	f007 fa7c 	bl	800a81c <calloc>
 8003324:	4603      	mov	r3, r0
 8003326:	461a      	mov	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	81da      	strh	r2, [r3, #14]
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200002e0 	.word	0x200002e0

0800334c <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6919      	ldr	r1, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	88db      	ldrh	r3, [r3, #6]
 8003360:	461a      	mov	r2, r3
 8003362:	f006 fb2b 	bl	80099bc <HAL_UART_Receive_DMA>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	88db      	ldrh	r3, [r3, #6]
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	1ad3      	subs	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 800339c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033a0:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8a9b      	ldrh	r3, [r3, #20]
 80033a6:	461c      	mov	r4, r3
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ffe0 	bl	800336e <UARTGetRxHead>
 80033ae:	4603      	mov	r3, r0
 80033b0:	429c      	cmp	r4, r3
 80033b2:	d013      	beq.n	80033dc <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	8a92      	ldrh	r2, [r2, #20]
 80033bc:	4413      	add	r3, r2
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8a9b      	ldrh	r3, [r3, #20]
 80033c6:	3301      	adds	r3, #1
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	88d2      	ldrh	r2, [r2, #6]
 80033cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80033d0:	fb01 f202 	mul.w	r2, r1, r2
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 80033dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd90      	pop	{r4, r7, pc}

080033e8 <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d13d      	bne.n	800347a <UARTTxDumpBuffer+0x92>
 80033fe:	4b21      	ldr	r3, [pc, #132]	; (8003484 <UARTTxDumpBuffer+0x9c>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d139      	bne.n	800347a <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8003406:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <UARTTxDumpBuffer+0x9c>)
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	89da      	ldrh	r2, [r3, #14]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	899b      	ldrh	r3, [r3, #12]
 8003414:	429a      	cmp	r2, r3
 8003416:	d02d      	beq.n	8003474 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	89da      	ldrh	r2, [r3, #14]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8003420:	429a      	cmp	r2, r3
 8003422:	d906      	bls.n	8003432 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	89da      	ldrh	r2, [r3, #14]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	b29b      	uxth	r3, r3
 8003430:	e005      	b.n	800343e <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	889a      	ldrh	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	b29b      	uxth	r3, r3
 800343e:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	8992      	ldrh	r2, [r2, #12]
 800344c:	4413      	add	r3, r2
 800344e:	89fa      	ldrh	r2, [r7, #14]
 8003450:	4619      	mov	r1, r3
 8003452:	f006 fa47 	bl	80098e4 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	899b      	ldrh	r3, [r3, #12]
 800345a:	461a      	mov	r2, r3
 800345c:	89fb      	ldrh	r3, [r7, #14]
 800345e:	4413      	add	r3, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	8892      	ldrh	r2, [r2, #4]
 8003464:	fb93 f1f2 	sdiv	r1, r3, r2
 8003468:	fb01 f202 	mul.w	r2, r1, r2
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	b29a      	uxth	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <UARTTxDumpBuffer+0x9c>)
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
	}
}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200005f0 	.word	0x200005f0

08003488 <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	889b      	ldrh	r3, [r3, #4]
 800349a:	88fa      	ldrh	r2, [r7, #6]
 800349c:	4293      	cmp	r3, r2
 800349e:	bf28      	it	cs
 80034a0:	4613      	movcs	r3, r2
 80034a2:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80034a4:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	889b      	ldrh	r3, [r3, #4]
 80034aa:	4619      	mov	r1, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	89db      	ldrh	r3, [r3, #14]
 80034b0:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80034b2:	4293      	cmp	r3, r2
 80034b4:	bfa8      	it	ge
 80034b6:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 80034b8:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	89d2      	ldrh	r2, [r2, #14]
 80034c2:	4413      	add	r3, r2
 80034c4:	8aba      	ldrh	r2, [r7, #20]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f007 f9d9 	bl	800a880 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	89db      	ldrh	r3, [r3, #14]
 80034d2:	461a      	mov	r2, r3
 80034d4:	8afb      	ldrh	r3, [r7, #22]
 80034d6:	4413      	add	r3, r2
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	8892      	ldrh	r2, [r2, #4]
 80034dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80034e0:	fb01 f202 	mul.w	r2, r1, r2
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80034ec:	8afa      	ldrh	r2, [r7, #22]
 80034ee:	8abb      	ldrh	r3, [r7, #20]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d00a      	beq.n	800350a <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6898      	ldr	r0, [r3, #8]
 80034f8:	8abb      	ldrh	r3, [r7, #20]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 80034fe:	8afa      	ldrh	r2, [r7, #22]
 8003500:	8abb      	ldrh	r3, [r7, #20]
 8003502:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003504:	461a      	mov	r2, r3
 8003506:	f007 f9bb 	bl	800a880 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff ff6c 	bl	80033e8 <UARTTxDumpBuffer>

}
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 8003520:	f247 5358 	movw	r3, #30040	; 0x7558
 8003524:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 8003526:	f107 030c 	add.w	r3, r7, #12
 800352a:	2202      	movs	r2, #2
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff ffaa 	bl	8003488 <UARTTxWrite>
	}
}
 8003534:	bf00      	nop
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 8003544:	f646 6346 	movw	r3, #28230	; 0x6e46
 8003548:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 800354a:	f107 030c 	add.w	r3, r7, #12
 800354e:	2202      	movs	r2, #2
 8003550:	4619      	mov	r1, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ff98 	bl	8003488 <UARTTxWrite>
	}
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 8003560:	b5b0      	push	{r4, r5, r7, lr}
 8003562:	b08e      	sub	sp, #56	; 0x38
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 800356c:	4b8b      	ldr	r3, [pc, #556]	; (800379c <Munmunbot_Protocol+0x23c>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b05      	cmp	r3, #5
 8003572:	f200 8428 	bhi.w	8003dc6 <Munmunbot_Protocol+0x866>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <Munmunbot_Protocol+0x1c>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	08003595 	.word	0x08003595
 8003580:	08003649 	.word	0x08003649
 8003584:	0800368b 	.word	0x0800368b
 8003588:	080036d9 	.word	0x080036d9
 800358c:	080036fd 	.word	0x080036fd
 8003590:	080037bd 	.word	0x080037bd
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 8003594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003598:	111b      	asrs	r3, r3, #4
 800359a:	b21b      	sxth	r3, r3
 800359c:	b29b      	uxth	r3, r3
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	f040 840c 	bne.w	8003dc0 <Munmunbot_Protocol+0x860>
			{
				CheckSum = dataIn;
 80035a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ac:	4a7c      	ldr	r2, [pc, #496]	; (80037a0 <Munmunbot_Protocol+0x240>)
 80035ae:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4b7a      	ldr	r3, [pc, #488]	; (80037a4 <Munmunbot_Protocol+0x244>)
 80035bc:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 80035be:	4b79      	ldr	r3, [pc, #484]	; (80037a4 <Munmunbot_Protocol+0x244>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b07      	cmp	r3, #7
 80035c4:	d103      	bne.n	80035ce <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 80035c6:	4b75      	ldr	r3, [pc, #468]	; (800379c <Munmunbot_Protocol+0x23c>)
 80035c8:	2203      	movs	r2, #3
 80035ca:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 80035cc:	e3f8      	b.n	8003dc0 <Munmunbot_Protocol+0x860>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 80035ce:	4b75      	ldr	r3, [pc, #468]	; (80037a4 <Munmunbot_Protocol+0x244>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d00b      	beq.n	80035ee <Munmunbot_Protocol+0x8e>
 80035d6:	4b73      	ldr	r3, [pc, #460]	; (80037a4 <Munmunbot_Protocol+0x244>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d007      	beq.n	80035ee <Munmunbot_Protocol+0x8e>
 80035de:	4b71      	ldr	r3, [pc, #452]	; (80037a4 <Munmunbot_Protocol+0x244>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d003      	beq.n	80035ee <Munmunbot_Protocol+0x8e>
 80035e6:	4b6f      	ldr	r3, [pc, #444]	; (80037a4 <Munmunbot_Protocol+0x244>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d103      	bne.n	80035f6 <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 80035ee:	4b6b      	ldr	r3, [pc, #428]	; (800379c <Munmunbot_Protocol+0x23c>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	701a      	strb	r2, [r3, #0]
			break;
 80035f4:	e3e4      	b.n	8003dc0 <Munmunbot_Protocol+0x860>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 80035f6:	4b6b      	ldr	r3, [pc, #428]	; (80037a4 <Munmunbot_Protocol+0x244>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d020      	beq.n	8003640 <Munmunbot_Protocol+0xe0>
 80035fe:	4b69      	ldr	r3, [pc, #420]	; (80037a4 <Munmunbot_Protocol+0x244>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d01c      	beq.n	8003640 <Munmunbot_Protocol+0xe0>
 8003606:	4b67      	ldr	r3, [pc, #412]	; (80037a4 <Munmunbot_Protocol+0x244>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b08      	cmp	r3, #8
 800360c:	d018      	beq.n	8003640 <Munmunbot_Protocol+0xe0>
 800360e:	4b65      	ldr	r3, [pc, #404]	; (80037a4 <Munmunbot_Protocol+0x244>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b09      	cmp	r3, #9
 8003614:	d014      	beq.n	8003640 <Munmunbot_Protocol+0xe0>
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <Munmunbot_Protocol+0x244>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b0a      	cmp	r3, #10
 800361c:	d010      	beq.n	8003640 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 800361e:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <Munmunbot_Protocol+0x244>)
 8003620:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8003622:	2b0b      	cmp	r3, #11
 8003624:	d00c      	beq.n	8003640 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8003626:	4b5f      	ldr	r3, [pc, #380]	; (80037a4 <Munmunbot_Protocol+0x244>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d008      	beq.n	8003640 <Munmunbot_Protocol+0xe0>
 800362e:	4b5d      	ldr	r3, [pc, #372]	; (80037a4 <Munmunbot_Protocol+0x244>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b0d      	cmp	r3, #13
 8003634:	d004      	beq.n	8003640 <Munmunbot_Protocol+0xe0>
 8003636:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <Munmunbot_Protocol+0x244>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b0e      	cmp	r3, #14
 800363c:	f040 83c0 	bne.w	8003dc0 <Munmunbot_Protocol+0x860>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 8003640:	4b56      	ldr	r3, [pc, #344]	; (800379c <Munmunbot_Protocol+0x23c>)
 8003642:	2205      	movs	r2, #5
 8003644:	701a      	strb	r2, [r3, #0]
			break;
 8003646:	e3bb      	b.n	8003dc0 <Munmunbot_Protocol+0x860>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 8003648:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800364c:	4b54      	ldr	r3, [pc, #336]	; (80037a0 <Munmunbot_Protocol+0x240>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4413      	add	r3, r2
 8003652:	4a53      	ldr	r2, [pc, #332]	; (80037a0 <Munmunbot_Protocol+0x240>)
 8003654:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	b29a      	uxth	r2, r3
 800365c:	4b52      	ldr	r3, [pc, #328]	; (80037a8 <Munmunbot_Protocol+0x248>)
 800365e:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	b2da      	uxtb	r2, r3
 800366a:	4b50      	ldr	r3, [pc, #320]	; (80037ac <Munmunbot_Protocol+0x24c>)
 800366c:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 800366e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003672:	111b      	asrs	r3, r3, #4
 8003674:	b21b      	sxth	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4b4b      	ldr	r3, [pc, #300]	; (80037ac <Munmunbot_Protocol+0x24c>)
 8003680:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 8003682:	4b46      	ldr	r3, [pc, #280]	; (800379c <Munmunbot_Protocol+0x23c>)
 8003684:	2202      	movs	r2, #2
 8003686:	701a      	strb	r2, [r3, #0]

			 break;
 8003688:	e39d      	b.n	8003dc6 <Munmunbot_Protocol+0x866>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 800368a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800368e:	4b44      	ldr	r3, [pc, #272]	; (80037a0 <Munmunbot_Protocol+0x240>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4413      	add	r3, r2
 8003694:	4a42      	ldr	r2, [pc, #264]	; (80037a0 <Munmunbot_Protocol+0x240>)
 8003696:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	b21a      	sxth	r2, r3
 800369e:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <Munmunbot_Protocol+0x248>)
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	b21b      	sxth	r3, r3
 80036a4:	4313      	orrs	r3, r2
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <Munmunbot_Protocol+0x248>)
 80036ac:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	4b3c      	ldr	r3, [pc, #240]	; (80037ac <Munmunbot_Protocol+0x24c>)
 80036ba:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 80036bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036c0:	111b      	asrs	r3, r3, #4
 80036c2:	b21b      	sxth	r3, r3
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	4b37      	ldr	r3, [pc, #220]	; (80037ac <Munmunbot_Protocol+0x24c>)
 80036ce:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 80036d0:	4b32      	ldr	r3, [pc, #200]	; (800379c <Munmunbot_Protocol+0x23c>)
 80036d2:	2205      	movs	r2, #5
 80036d4:	701a      	strb	r2, [r3, #0]
			 break;
 80036d6:	e376      	b.n	8003dc6 <Munmunbot_Protocol+0x866>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 80036d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036dc:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <Munmunbot_Protocol+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4413      	add	r3, r2
 80036e2:	4a2f      	ldr	r2, [pc, #188]	; (80037a0 <Munmunbot_Protocol+0x240>)
 80036e4:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 80036e6:	88fa      	ldrh	r2, [r7, #6]
 80036e8:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <Munmunbot_Protocol+0x250>)
 80036ea:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 80036ec:	4b30      	ldr	r3, [pc, #192]	; (80037b0 <Munmunbot_Protocol+0x250>)
 80036ee:	881a      	ldrh	r2, [r3, #0]
 80036f0:	4b30      	ldr	r3, [pc, #192]	; (80037b4 <Munmunbot_Protocol+0x254>)
 80036f2:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 80036f4:	4b29      	ldr	r3, [pc, #164]	; (800379c <Munmunbot_Protocol+0x23c>)
 80036f6:	2204      	movs	r2, #4
 80036f8:	701a      	strb	r2, [r3, #0]

		   break;
 80036fa:	e364      	b.n	8003dc6 <Munmunbot_Protocol+0x866>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 80036fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003700:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <Munmunbot_Protocol+0x240>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4413      	add	r3, r2
 8003706:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <Munmunbot_Protocol+0x240>)
 8003708:	6013      	str	r3, [r2, #0]
				if (n_station >= 2)
 800370a:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <Munmunbot_Protocol+0x250>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d927      	bls.n	8003762 <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	4a28      	ldr	r2, [pc, #160]	; (80037b8 <Munmunbot_Protocol+0x258>)
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	b2d9      	uxtb	r1, r3
 8003720:	4b22      	ldr	r3, [pc, #136]	; (80037ac <Munmunbot_Protocol+0x24c>)
 8003722:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8003724:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <Munmunbot_Protocol+0x258>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	b2da      	uxtb	r2, r3
 800372c:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <Munmunbot_Protocol+0x258>)
 800372e:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 8003730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003734:	111b      	asrs	r3, r3, #4
 8003736:	b21b      	sxth	r3, r3
 8003738:	b2db      	uxtb	r3, r3
 800373a:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <Munmunbot_Protocol+0x258>)
 800373c:	7812      	ldrb	r2, [r2, #0]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	b2d9      	uxtb	r1, r3
 8003744:	4b19      	ldr	r3, [pc, #100]	; (80037ac <Munmunbot_Protocol+0x24c>)
 8003746:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <Munmunbot_Protocol+0x258>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	3301      	adds	r3, #1
 800374e:	b2da      	uxtb	r2, r3
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <Munmunbot_Protocol+0x258>)
 8003752:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 8003754:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <Munmunbot_Protocol+0x250>)
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	3b02      	subs	r3, #2
 800375a:	b29a      	uxth	r2, r3
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <Munmunbot_Protocol+0x250>)
 800375e:	801a      	strh	r2, [r3, #0]
 8003760:	e012      	b.n	8003788 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <Munmunbot_Protocol+0x250>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d10e      	bne.n	8003788 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <Munmunbot_Protocol+0x258>)
 8003770:	7812      	ldrb	r2, [r2, #0]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	b2d9      	uxtb	r1, r3
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <Munmunbot_Protocol+0x24c>)
 800377a:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <Munmunbot_Protocol+0x250>)
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <Munmunbot_Protocol+0x250>)
 8003786:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <Munmunbot_Protocol+0x250>)
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f040 8319 	bne.w	8003dc4 <Munmunbot_Protocol+0x864>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 8003792:	4b02      	ldr	r3, [pc, #8]	; (800379c <Munmunbot_Protocol+0x23c>)
 8003794:	2205      	movs	r2, #5
 8003796:	701a      	strb	r2, [r3, #0]
				}
				break;
 8003798:	e314      	b.n	8003dc4 <Munmunbot_Protocol+0x864>
 800379a:	bf00      	nop
 800379c:	20000300 	.word	0x20000300
 80037a0:	200005f4 	.word	0x200005f4
 80037a4:	200005f8 	.word	0x200005f8
 80037a8:	200005fa 	.word	0x200005fa
 80037ac:	200005fc 	.word	0x200005fc
 80037b0:	200006fc 	.word	0x200006fc
 80037b4:	200006fe 	.word	0x200006fe
 80037b8:	20000700 	.word	0x20000700

			case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 80037bc:	4b8c      	ldr	r3, [pc, #560]	; (80039f0 <Munmunbot_Protocol+0x490>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	4a8a      	ldr	r2, [pc, #552]	; (80039f0 <Munmunbot_Protocol+0x490>)
 80037c6:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 80037c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037cc:	4b88      	ldr	r3, [pc, #544]	; (80039f0 <Munmunbot_Protocol+0x490>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	f040 82e1 	bne.w	8003d98 <Munmunbot_Protocol+0x838>
				{

					switch (ProtocolMode)
 80037d6:	4b87      	ldr	r3, [pc, #540]	; (80039f4 <Munmunbot_Protocol+0x494>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	3b01      	subs	r3, #1
 80037dc:	2b0d      	cmp	r3, #13
 80037de:	f200 82dc 	bhi.w	8003d9a <Munmunbot_Protocol+0x83a>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <Munmunbot_Protocol+0x288>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	08003821 	.word	0x08003821
 80037ec:	08003895 	.word	0x08003895
 80037f0:	080038af 	.word	0x080038af
 80037f4:	080038c5 	.word	0x080038c5
 80037f8:	08003927 	.word	0x08003927
 80037fc:	08003945 	.word	0x08003945
 8003800:	08003969 	.word	0x08003969
 8003804:	080039b3 	.word	0x080039b3
 8003808:	08003a29 	.word	0x08003a29
 800380c:	08003acf 	.word	0x08003acf
 8003810:	08003bd5 	.word	0x08003bd5
 8003814:	08003d03 	.word	0x08003d03
 8003818:	08003d19 	.word	0x08003d19
 800381c:	08003d79 	.word	0x08003d79
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 8003820:	2391      	movs	r3, #145	; 0x91
 8003822:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 8003826:	4b74      	ldr	r3, [pc, #464]	; (80039f8 <Munmunbot_Protocol+0x498>)
 8003828:	785b      	ldrb	r3, [r3, #1]
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	b25a      	sxtb	r2, r3
 800382e:	4b72      	ldr	r3, [pc, #456]	; (80039f8 <Munmunbot_Protocol+0x498>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	b25b      	sxtb	r3, r3
 8003834:	4313      	orrs	r3, r2
 8003836:	b25b      	sxtb	r3, r3
 8003838:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 800383a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 800383e:	4b6e      	ldr	r3, [pc, #440]	; (80039f8 <Munmunbot_Protocol+0x498>)
 8003840:	78db      	ldrb	r3, [r3, #3]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	b25a      	sxtb	r2, r3
 8003846:	4b6c      	ldr	r3, [pc, #432]	; (80039f8 <Munmunbot_Protocol+0x498>)
 8003848:	789b      	ldrb	r3, [r3, #2]
 800384a:	b25b      	sxtb	r3, r3
 800384c:	4313      	orrs	r3, r2
 800384e:	b25b      	sxtb	r3, r3
 8003850:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8003852:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003856:	2300      	movs	r3, #0
 8003858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800385c:	2358      	movs	r3, #88	; 0x58
 800385e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003862:	2375      	movs	r3, #117	; 0x75
 8003864:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 8003868:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800386c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003870:	4413      	add	r3, r2
 8003872:	b2da      	uxtb	r2, r3
 8003874:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003878:	4413      	add	r3, r2
 800387a:	b2db      	uxtb	r3, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						UARTTxWrite(uart, temp, 6);
 8003884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003888:	2206      	movs	r2, #6
 800388a:	4619      	mov	r1, r3
 800388c:	6838      	ldr	r0, [r7, #0]
 800388e:	f7ff fdfb 	bl	8003488 <UARTTxWrite>
						}
						break;
 8003892:	e282      	b.n	8003d9a <Munmunbot_Protocol+0x83a>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <Munmunbot_Protocol+0x49c>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d104      	bne.n	80038a6 <Munmunbot_Protocol+0x346>
						{
							Munmunbot_State = STATE_Idle;
 800389c:	4b57      	ldr	r3, [pc, #348]	; (80039fc <Munmunbot_Protocol+0x49c>)
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 80038a2:	f000 faa5 	bl	8003df0 <PID_Reset>
						}
						ACK1Return(uart);
 80038a6:	6838      	ldr	r0, [r7, #0]
 80038a8:	f7ff fe36 	bl	8003518 <ACK1Return>
						break;
 80038ac:	e275      	b.n	8003d9a <Munmunbot_Protocol+0x83a>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80038ae:	4b53      	ldr	r3, [pc, #332]	; (80039fc <Munmunbot_Protocol+0x49c>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d102      	bne.n	80038bc <Munmunbot_Protocol+0x35c>
						{
							Munmunbot_State = STATE_Disconnected;
 80038b6:	4b51      	ldr	r3, [pc, #324]	; (80039fc <Munmunbot_Protocol+0x49c>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80038bc:	6838      	ldr	r0, [r7, #0]
 80038be:	f7ff fe2b 	bl	8003518 <ACK1Return>
						break;
 80038c2:	e26a      	b.n	8003d9a <Munmunbot_Protocol+0x83a>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 80038c4:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <Munmunbot_Protocol+0x49c>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d128      	bne.n	800391e <Munmunbot_Protocol+0x3be>
						{
							CUSSStruc.RPMp = 0.925*(Data_HAck*10.0)/255.0;
 80038cc:	4b4c      	ldr	r3, [pc, #304]	; (8003a00 <Munmunbot_Protocol+0x4a0>)
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fc fdd3 	bl	800047c <__aeabi_i2d>
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	4b4a      	ldr	r3, [pc, #296]	; (8003a04 <Munmunbot_Protocol+0x4a4>)
 80038dc:	f7fc fe38 	bl	8000550 <__aeabi_dmul>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	a33d      	add	r3, pc, #244	; (adr r3, 80039e0 <Munmunbot_Protocol+0x480>)
 80038ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ee:	f7fc fe2f 	bl	8000550 <__aeabi_dmul>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4610      	mov	r0, r2
 80038f8:	4619      	mov	r1, r3
 80038fa:	a33b      	add	r3, pc, #236	; (adr r3, 80039e8 <Munmunbot_Protocol+0x488>)
 80038fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003900:	f7fc ff50 	bl	80007a4 <__aeabi_ddiv>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4610      	mov	r0, r2
 800390a:	4619      	mov	r1, r3
 800390c:	f7fd f8f0 	bl	8000af0 <__aeabi_d2f>
 8003910:	4603      	mov	r3, r0
 8003912:	4a3d      	ldr	r2, [pc, #244]	; (8003a08 <Munmunbot_Protocol+0x4a8>)
 8003914:	6093      	str	r3, [r2, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 8003916:	493c      	ldr	r1, [pc, #240]	; (8003a08 <Munmunbot_Protocol+0x4a8>)
 8003918:	483c      	ldr	r0, [pc, #240]	; (8003a0c <Munmunbot_Protocol+0x4ac>)
 800391a:	f7fe fc65 	bl	80021e8 <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 800391e:	6838      	ldr	r0, [r7, #0]
 8003920:	f7ff fdfa 	bl	8003518 <ACK1Return>
						break;
 8003924:	e239      	b.n	8003d9a <Munmunbot_Protocol+0x83a>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003926:	4b35      	ldr	r3, [pc, #212]	; (80039fc <Munmunbot_Protocol+0x49c>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d106      	bne.n	800393c <Munmunbot_Protocol+0x3dc>
						{
							Angularpos_InputNumber = Data_HAck;
 800392e:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <Munmunbot_Protocol+0x4a0>)
 8003930:	881a      	ldrh	r2, [r3, #0]
 8003932:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <Munmunbot_Protocol+0x4b0>)
 8003934:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 8003936:	4b37      	ldr	r3, [pc, #220]	; (8003a14 <Munmunbot_Protocol+0x4b4>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 800393c:	6838      	ldr	r0, [r7, #0]
 800393e:	f7ff fdeb 	bl	8003518 <ACK1Return>
						break;
 8003942:	e22a      	b.n	8003d9a <Munmunbot_Protocol+0x83a>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003944:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <Munmunbot_Protocol+0x49c>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d109      	bne.n	8003960 <Munmunbot_Protocol+0x400>
						{
//							Angularpos_InputArray[0] = parameter[0];
							Angularpos_InputArray[0] = parameter[2];    //150 0x00 0x0A Checksum
 800394c:	4b2a      	ldr	r3, [pc, #168]	; (80039f8 <Munmunbot_Protocol+0x498>)
 800394e:	789a      	ldrb	r2, [r3, #2]
 8003950:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <Munmunbot_Protocol+0x4b8>)
 8003952:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 8003954:	4b2f      	ldr	r3, [pc, #188]	; (8003a14 <Munmunbot_Protocol+0x4b4>)
 8003956:	2202      	movs	r2, #2
 8003958:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 800395a:	4b30      	ldr	r3, [pc, #192]	; (8003a1c <Munmunbot_Protocol+0x4bc>)
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003960:	6838      	ldr	r0, [r7, #0]
 8003962:	f7ff fdd9 	bl	8003518 <ACK1Return>
						break;
 8003966:	e218      	b.n	8003d9a <Munmunbot_Protocol+0x83a>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <Munmunbot_Protocol+0x49c>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d11c      	bne.n	80039aa <Munmunbot_Protocol+0x44a>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 8003970:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <Munmunbot_Protocol+0x4b4>)
 8003972:	2203      	movs	r2, #3
 8003974:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8003976:	2300      	movs	r3, #0
 8003978:	637b      	str	r3, [r7, #52]	; 0x34
 800397a:	e00b      	b.n	8003994 <Munmunbot_Protocol+0x434>
							{
								Angularpos_InputArray[i] = parameter[i];
 800397c:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <Munmunbot_Protocol+0x498>)
 800397e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003980:	4413      	add	r3, r2
 8003982:	7819      	ldrb	r1, [r3, #0]
 8003984:	4a24      	ldr	r2, [pc, #144]	; (8003a18 <Munmunbot_Protocol+0x4b8>)
 8003986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003988:	4413      	add	r3, r2
 800398a:	460a      	mov	r2, r1
 800398c:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 800398e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003990:	3301      	adds	r3, #1
 8003992:	637b      	str	r3, [r7, #52]	; 0x34
 8003994:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <Munmunbot_Protocol+0x4c0>)
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399c:	4293      	cmp	r3, r2
 800399e:	dbed      	blt.n	800397c <Munmunbot_Protocol+0x41c>
							}
							NumberOfStationToGo = n_station_mem;
 80039a0:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <Munmunbot_Protocol+0x4c0>)
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <Munmunbot_Protocol+0x4bc>)
 80039a8:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 80039aa:	6838      	ldr	r0, [r7, #0]
 80039ac:	f7ff fdb4 	bl	8003518 <ACK1Return>
						break;
 80039b0:	e1f3      	b.n	8003d9a <Munmunbot_Protocol+0x83a>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <Munmunbot_Protocol+0x49c>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d108      	bne.n	80039cc <Munmunbot_Protocol+0x46c>
						{
							Munmunbot_State = STATE_PrepareDATA;
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <Munmunbot_Protocol+0x49c>)
 80039bc:	2202      	movs	r2, #2
 80039be:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 80039c0:	f000 fa16 	bl	8003df0 <PID_Reset>
							ACK1Return(uart);
 80039c4:	6838      	ldr	r0, [r7, #0]
 80039c6:	f7ff fda7 	bl	8003518 <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};  ///ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 80039ca:	e1e6      	b.n	8003d9a <Munmunbot_Protocol+0x83a>
								uint8_t temp[] =
 80039cc:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <Munmunbot_Protocol+0x4c4>)
 80039ce:	623b      	str	r3, [r7, #32]
								UARTTxWrite(uart, temp, 4);
 80039d0:	f107 0320 	add.w	r3, r7, #32
 80039d4:	2204      	movs	r2, #4
 80039d6:	4619      	mov	r1, r3
 80039d8:	6838      	ldr	r0, [r7, #0]
 80039da:	f7ff fd55 	bl	8003488 <UARTTxWrite>
						break;
 80039de:	e1dc      	b.n	8003d9a <Munmunbot_Protocol+0x83a>
 80039e0:	9999999a 	.word	0x9999999a
 80039e4:	3fed9999 	.word	0x3fed9999
 80039e8:	00000000 	.word	0x00000000
 80039ec:	406fe000 	.word	0x406fe000
 80039f0:	200005f4 	.word	0x200005f4
 80039f4:	200005f8 	.word	0x200005f8
 80039f8:	200005fc 	.word	0x200005fc
 80039fc:	20000301 	.word	0x20000301
 8003a00:	200005fa 	.word	0x200005fa
 8003a04:	40240000 	.word	0x40240000
 8003a08:	200005c0 	.word	0x200005c0
 8003a0c:	20000530 	.word	0x20000530
 8003a10:	20000404 	.word	0x20000404
 8003a14:	20000406 	.word	0x20000406
 8003a18:	20000304 	.word	0x20000304
 8003a1c:	20000408 	.word	0x20000408
 8003a20:	200006fe 	.word	0x200006fe
 8003a24:	6e467558 	.word	0x6e467558

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 8003a28:	4ac7      	ldr	r2, [pc, #796]	; (8003d48 <Munmunbot_Protocol+0x7e8>)
 8003a2a:	f107 0318 	add.w	r3, r7, #24
 8003a2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a32:	6018      	str	r0, [r3, #0]
 8003a34:	3304      	adds	r3, #4
 8003a36:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0}; ///ACK1 + Mode 9
							uint8_t Shift = 2;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
							DataForReturn = Current_Station&(0xff);
 8003a3e:	4bc3      	ldr	r3, [pc, #780]	; (8003d4c <Munmunbot_Protocol+0x7ec>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	4bc2      	ldr	r3, [pc, #776]	; (8003d50 <Munmunbot_Protocol+0x7f0>)
 8003a46:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8003a48:	4bc1      	ldr	r3, [pc, #772]	; (8003d50 <Munmunbot_Protocol+0x7f0>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a54:	3301      	adds	r3, #1
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	3338      	adds	r3, #56	; 0x38
 8003a5a:	443b      	add	r3, r7
 8003a5c:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8003a60:	4bbb      	ldr	r3, [pc, #748]	; (8003d50 <Munmunbot_Protocol+0x7f0>)
 8003a62:	881a      	ldrh	r2, [r3, #0]
 8003a64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a68:	3302      	adds	r3, #2
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	3338      	adds	r3, #56	; 0x38
 8003a6e:	443b      	add	r3, r7
 8003a70:	f803 2c20 	strb.w	r2, [r3, #-32]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8003a74:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a78:	3338      	adds	r3, #56	; 0x38
 8003a7a:	443b      	add	r3, r7
 8003a7c:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8003a80:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a84:	3301      	adds	r3, #1
 8003a86:	3338      	adds	r3, #56	; 0x38
 8003a88:	443b      	add	r3, r7
 8003a8a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003a8e:	4413      	add	r3, r2
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a96:	3302      	adds	r3, #2
 8003a98:	3338      	adds	r3, #56	; 0x38
 8003a9a:	443b      	add	r3, r7
 8003a9c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003aa8:	3303      	adds	r3, #3
 8003aaa:	43d2      	mvns	r2, r2
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	3338      	adds	r3, #56	; 0x38
 8003ab0:	443b      	add	r3, r7
 8003ab2:	f803 2c20 	strb.w	r2, [r3, #-32]
							UARTTxWrite(uart, temp, 4+Shift);
 8003ab6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3304      	adds	r3, #4
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	f107 0318 	add.w	r3, r7, #24
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6838      	ldr	r0, [r7, #0]
 8003ac8:	f7ff fcde 	bl	8003488 <UARTTxWrite>
						}

						break;
 8003acc:	e165      	b.n	8003d9a <Munmunbot_Protocol+0x83a>

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 8003ace:	4aa1      	ldr	r2, [pc, #644]	; (8003d54 <Munmunbot_Protocol+0x7f4>)
 8003ad0:	f107 0310 	add.w	r3, r7, #16
 8003ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ad8:	6018      	str	r0, [r3, #0]
 8003ada:	3304      	adds	r3, #4
 8003adc:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,154, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
							DataForReturn = ((((int) htim1.Instance->CNT) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
 8003ae4:	4b9c      	ldr	r3, [pc, #624]	; (8003d58 <Munmunbot_Protocol+0x7f8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	4a9c      	ldr	r2, [pc, #624]	; (8003d5c <Munmunbot_Protocol+0x7fc>)
 8003aec:	6852      	ldr	r2, [r2, #4]
 8003aee:	fbb3 f1f2 	udiv	r1, r3, r2
 8003af2:	fb01 f202 	mul.w	r2, r1, r2
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fc fcae 	bl	800045c <__aeabi_ui2d>
 8003b00:	a38b      	add	r3, pc, #556	; (adr r3, 8003d30 <Munmunbot_Protocol+0x7d0>)
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f7fc fd23 	bl	8000550 <__aeabi_dmul>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4610      	mov	r0, r2
 8003b10:	4619      	mov	r1, r3
 8003b12:	a389      	add	r3, pc, #548	; (adr r3, 8003d38 <Munmunbot_Protocol+0x7d8>)
 8003b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b18:	f7fc fd1a 	bl	8000550 <__aeabi_dmul>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4614      	mov	r4, r2
 8003b22:	461d      	mov	r5, r3
 8003b24:	4b8d      	ldr	r3, [pc, #564]	; (8003d5c <Munmunbot_Protocol+0x7fc>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fc fc97 	bl	800045c <__aeabi_ui2d>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4620      	mov	r0, r4
 8003b34:	4629      	mov	r1, r5
 8003b36:	f7fc fe35 	bl	80007a4 <__aeabi_ddiv>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	f7fc ffb5 	bl	8000ab0 <__aeabi_d2uiz>
 8003b46:	4603      	mov	r3, r0
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	4b81      	ldr	r3, [pc, #516]	; (8003d50 <Munmunbot_Protocol+0x7f0>)
 8003b4c:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8003b4e:	4b80      	ldr	r3, [pc, #512]	; (8003d50 <Munmunbot_Protocol+0x7f0>)
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	3338      	adds	r3, #56	; 0x38
 8003b60:	443b      	add	r3, r7
 8003b62:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8003b66:	4b7a      	ldr	r3, [pc, #488]	; (8003d50 <Munmunbot_Protocol+0x7f0>)
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b6e:	3302      	adds	r3, #2
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	3338      	adds	r3, #56	; 0x38
 8003b74:	443b      	add	r3, r7
 8003b76:	f803 2c28 	strb.w	r2, [r3, #-40]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8003b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b7e:	3338      	adds	r3, #56	; 0x38
 8003b80:	443b      	add	r3, r7
 8003b82:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 8003b86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	3338      	adds	r3, #56	; 0x38
 8003b8e:	443b      	add	r3, r7
 8003b90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b94:	4413      	add	r3, r2
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	3338      	adds	r3, #56	; 0x38
 8003ba0:	443b      	add	r3, r7
 8003ba2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bae:	3303      	adds	r3, #3
 8003bb0:	43d2      	mvns	r2, r2
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	3338      	adds	r3, #56	; 0x38
 8003bb6:	443b      	add	r3, r7
 8003bb8:	f803 2c28 	strb.w	r2, [r3, #-40]
							UARTTxWrite(uart, temp, 4+Shift);
 8003bbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	f107 0310 	add.w	r3, r7, #16
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6838      	ldr	r0, [r7, #0]
 8003bce:	f7ff fc5b 	bl	8003488 <UARTTxWrite>
						}
						break;
 8003bd2:	e0e2      	b.n	8003d9a <Munmunbot_Protocol+0x83a>

					case 11: /// Return Angular Velocity Max  ##Complete##
						{
							uint8_t temp[] =
 8003bd4:	4a62      	ldr	r2, [pc, #392]	; (8003d60 <Munmunbot_Protocol+0x800>)
 8003bd6:	f107 0308 	add.w	r3, r7, #8
 8003bda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bde:	6018      	str	r0, [r3, #0]
 8003be0:	3304      	adds	r3, #4
 8003be2:	8019      	strh	r1, [r3, #0]
							{ 0x58, 0x75, 155, 0b0,  0b0, 0b0 };
							uint8_t Shift = 2;
 8003be4:	2302      	movs	r3, #2
 8003be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							float temp3 = ( abs( VelocityPIDController.OutputFeedback )*60.0 )/( ( float ) CUSSStruc.PPRxQEI );
 8003bea:	4b5e      	ldr	r3, [pc, #376]	; (8003d64 <Munmunbot_Protocol+0x804>)
 8003bec:	edd3 7a08 	vldr	s15, [r3, #32]
 8003bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bf4:	ee17 3a90 	vmov	r3, s15
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bfb8      	it	lt
 8003bfc:	425b      	neglt	r3, r3
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fc fc3c 	bl	800047c <__aeabi_i2d>
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	4b57      	ldr	r3, [pc, #348]	; (8003d68 <Munmunbot_Protocol+0x808>)
 8003c0a:	f7fc fca1 	bl	8000550 <__aeabi_dmul>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4614      	mov	r4, r2
 8003c14:	461d      	mov	r5, r3
 8003c16:	4b51      	ldr	r3, [pc, #324]	; (8003d5c <Munmunbot_Protocol+0x7fc>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	ee17 0a90 	vmov	r0, s15
 8003c26:	f7fc fc3b 	bl	80004a0 <__aeabi_f2d>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4620      	mov	r0, r4
 8003c30:	4629      	mov	r1, r5
 8003c32:	f7fc fdb7 	bl	80007a4 <__aeabi_ddiv>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f7fc ff57 	bl	8000af0 <__aeabi_d2f>
 8003c42:	4603      	mov	r3, r0
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
							DataForReturn = ( temp3 * 255.0 )/10.0;
 8003c46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c48:	f7fc fc2a 	bl	80004a0 <__aeabi_f2d>
 8003c4c:	a33c      	add	r3, pc, #240	; (adr r3, 8003d40 <Munmunbot_Protocol+0x7e0>)
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f7fc fc7d 	bl	8000550 <__aeabi_dmul>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	4b42      	ldr	r3, [pc, #264]	; (8003d6c <Munmunbot_Protocol+0x80c>)
 8003c64:	f7fc fd9e 	bl	80007a4 <__aeabi_ddiv>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f7fc ff1e 	bl	8000ab0 <__aeabi_d2uiz>
 8003c74:	4603      	mov	r3, r0
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <Munmunbot_Protocol+0x7f0>)
 8003c7a:	801a      	strh	r2, [r3, #0]
							temp[ 1+Shift ] = ( DataForReturn>>8 )&( 0xff );
 8003c7c:	4b34      	ldr	r3, [pc, #208]	; (8003d50 <Munmunbot_Protocol+0x7f0>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c88:	3301      	adds	r3, #1
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	3338      	adds	r3, #56	; 0x38
 8003c8e:	443b      	add	r3, r7
 8003c90:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 2+Shift ] = ( DataForReturn )&( 0xff );
 8003c94:	4b2e      	ldr	r3, [pc, #184]	; (8003d50 <Munmunbot_Protocol+0x7f0>)
 8003c96:	881a      	ldrh	r2, [r3, #0]
 8003c98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c9c:	3302      	adds	r3, #2
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	3338      	adds	r3, #56	; 0x38
 8003ca2:	443b      	add	r3, r7
 8003ca4:	f803 2c30 	strb.w	r2, [r3, #-48]
							temp[ 3+Shift ] = ~( temp[ 0+Shift ]+temp[ 1+Shift ]+temp[ 2+Shift ] );
 8003ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cac:	3338      	adds	r3, #56	; 0x38
 8003cae:	443b      	add	r3, r7
 8003cb0:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8003cb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cb8:	3301      	adds	r3, #1
 8003cba:	3338      	adds	r3, #56	; 0x38
 8003cbc:	443b      	add	r3, r7
 8003cbe:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cca:	3302      	adds	r3, #2
 8003ccc:	3338      	adds	r3, #56	; 0x38
 8003cce:	443b      	add	r3, r7
 8003cd0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cdc:	3303      	adds	r3, #3
 8003cde:	43d2      	mvns	r2, r2
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	3338      	adds	r3, #56	; 0x38
 8003ce4:	443b      	add	r3, r7
 8003ce6:	f803 2c30 	strb.w	r2, [r3, #-48]
							UARTTxWrite( uart, temp, 4+Shift );
 8003cea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	f107 0308 	add.w	r3, r7, #8
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	6838      	ldr	r0, [r7, #0]
 8003cfc:	f7ff fbc4 	bl	8003488 <UARTTxWrite>
						}
						break;
 8003d00:	e04b      	b.n	8003d9a <Munmunbot_Protocol+0x83a>

					case 12:  //Enable Gripper
						if (Munmunbot_State == STATE_Idle)
 8003d02:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <Munmunbot_Protocol+0x810>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d102      	bne.n	8003d10 <Munmunbot_Protocol+0x7b0>
						{
							GripperEnable = 1;
 8003d0a:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <Munmunbot_Protocol+0x814>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003d10:	6838      	ldr	r0, [r7, #0]
 8003d12:	f7ff fc01 	bl	8003518 <ACK1Return>
						break;
 8003d16:	e040      	b.n	8003d9a <Munmunbot_Protocol+0x83a>
					case 13: //Disable Gripper
						if (Munmunbot_State == STATE_Idle)
 8003d18:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <Munmunbot_Protocol+0x810>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d102      	bne.n	8003d26 <Munmunbot_Protocol+0x7c6>
						{
							GripperEnable = 0;
 8003d20:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <Munmunbot_Protocol+0x814>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003d26:	6838      	ldr	r0, [r7, #0]
 8003d28:	f7ff fbf6 	bl	8003518 <ACK1Return>
						break;
 8003d2c:	e035      	b.n	8003d9a <Munmunbot_Protocol+0x83a>
 8003d2e:	bf00      	nop
 8003d30:	9ba5e354 	.word	0x9ba5e354
 8003d34:	400920c4 	.word	0x400920c4
 8003d38:	00000000 	.word	0x00000000
 8003d3c:	40c38800 	.word	0x40c38800
 8003d40:	00000000 	.word	0x00000000
 8003d44:	406fe000 	.word	0x406fe000
 8003d48:	0800ac10 	.word	0x0800ac10
 8003d4c:	20000407 	.word	0x20000407
 8003d50:	20000702 	.word	0x20000702
 8003d54:	0800ac18 	.word	0x0800ac18
 8003d58:	200000f8 	.word	0x200000f8
 8003d5c:	200005c0 	.word	0x200005c0
 8003d60:	0800ac20 	.word	0x0800ac20
 8003d64:	20000470 	.word	0x20000470
 8003d68:	404e0000 	.word	0x404e0000
 8003d6c:	40240000 	.word	0x40240000
 8003d70:	20000301 	.word	0x20000301
 8003d74:	20000014 	.word	0x20000014

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8003d78:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <Munmunbot_Protocol+0x870>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d107      	bne.n	8003d90 <Munmunbot_Protocol+0x830>
						{
							Munmunbot_State = STATE_SetHome;
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <Munmunbot_Protocol+0x870>)
 8003d82:	2208      	movs	r2, #8
 8003d84:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 8003d86:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <Munmunbot_Protocol+0x874>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	701a      	strb	r2, [r3, #0]
							PID_Reset();
 8003d8c:	f000 f830 	bl	8003df0 <PID_Reset>
						}
						ACK1Return(uart);
 8003d90:	6838      	ldr	r0, [r7, #0]
 8003d92:	f7ff fbc1 	bl	8003518 <ACK1Return>
						break;
 8003d96:	e000      	b.n	8003d9a <Munmunbot_Protocol+0x83a>
				    }
			   }
 8003d98:	bf00      	nop
			n_station = 0;
 8003d9a:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <Munmunbot_Protocol+0x878>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <Munmunbot_Protocol+0x87c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <Munmunbot_Protocol+0x880>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 8003dac:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <Munmunbot_Protocol+0x884>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 8003db2:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <Munmunbot_Protocol+0x888>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
			Munmunbot_Protocol_State = PP_STARTandMode;
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <Munmunbot_Protocol+0x88c>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
			break;
 8003dbe:	e002      	b.n	8003dc6 <Munmunbot_Protocol+0x866>
			break;
 8003dc0:	bf00      	nop
 8003dc2:	e000      	b.n	8003dc6 <Munmunbot_Protocol+0x866>
				break;
 8003dc4:	bf00      	nop
			}
	}
}
 8003dc6:	bf00      	nop
 8003dc8:	3738      	adds	r7, #56	; 0x38
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000301 	.word	0x20000301
 8003dd4:	20000302 	.word	0x20000302
 8003dd8:	200006fc 	.word	0x200006fc
 8003ddc:	200005f8 	.word	0x200005f8
 8003de0:	20000700 	.word	0x20000700
 8003de4:	200005fa 	.word	0x200005fa
 8003de8:	200005f4 	.word	0x200005f4
 8003dec:	20000300 	.word	0x20000300

08003df0 <PID_Reset>:

void PID_Reset()
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
	PositionPIDController.PreviousError = 0;
 8003df4:	4b32      	ldr	r3, [pc, #200]	; (8003ec0 <PID_Reset+0xd0>)
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c
	PositionPIDController.Integral_Value = 0;
 8003dfc:	4b30      	ldr	r3, [pc, #192]	; (8003ec0 <PID_Reset+0xd0>)
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24
	PositionPIDController.ControllerOutput = 0;
 8003e04:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <PID_Reset+0xd0>)
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	615a      	str	r2, [r3, #20]
	PositionPIDController.NowError = 0;
 8003e0c:	4b2c      	ldr	r3, [pc, #176]	; (8003ec0 <PID_Reset+0xd0>)
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	629a      	str	r2, [r3, #40]	; 0x28
	PositionPIDController.PreviousPreviousError = 0;
 8003e14:	4b2a      	ldr	r3, [pc, #168]	; (8003ec0 <PID_Reset+0xd0>)
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30
	PositionPIDController.PreviousControllerOutput = 0;
 8003e1c:	4b28      	ldr	r3, [pc, #160]	; (8003ec0 <PID_Reset+0xd0>)
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	619a      	str	r2, [r3, #24]


	VelocityPIDController.PreviousError = 0;
 8003e24:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <PID_Reset+0xd4>)
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c
	VelocityPIDController.Integral_Value = 0;
 8003e2c:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <PID_Reset+0xd4>)
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24
	VelocityPIDController.ControllerOutput = 0;
 8003e34:	4b23      	ldr	r3, [pc, #140]	; (8003ec4 <PID_Reset+0xd4>)
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	615a      	str	r2, [r3, #20]
	VelocityPIDController.NowError = 0;
 8003e3c:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <PID_Reset+0xd4>)
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28
	VelocityPIDController.PreviousPreviousError = 0;
 8003e44:	4b1f      	ldr	r3, [pc, #124]	; (8003ec4 <PID_Reset+0xd4>)
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
	VelocityPIDController.PreviousControllerOutput = 0;
 8003e4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <PID_Reset+0xd4>)
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	619a      	str	r2, [r3, #24]

	StabilizerPIDController.PreviousError = 0;
 8003e54:	4b1c      	ldr	r3, [pc, #112]	; (8003ec8 <PID_Reset+0xd8>)
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	62da      	str	r2, [r3, #44]	; 0x2c
	StabilizerPIDController.Integral_Value = 0;
 8003e5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <PID_Reset+0xd8>)
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24
	StabilizerPIDController.ControllerOutput = 0;
 8003e64:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <PID_Reset+0xd8>)
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	615a      	str	r2, [r3, #20]
	StabilizerPIDController.NowError = 0;
 8003e6c:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <PID_Reset+0xd8>)
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
	StabilizerPIDController.PreviousPreviousError = 0;
 8003e74:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <PID_Reset+0xd8>)
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
	StabilizerPIDController.PreviousControllerOutput = 0;
 8003e7c:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <PID_Reset+0xd8>)
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	619a      	str	r2, [r3, #24]

	PureVelocityPIDController.PreviousError = 0;
 8003e84:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <PID_Reset+0xdc>)
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c
	PureVelocityPIDController.Integral_Value = 0;
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <PID_Reset+0xdc>)
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	625a      	str	r2, [r3, #36]	; 0x24
	PureVelocityPIDController.ControllerOutput = 0;
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <PID_Reset+0xdc>)
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	615a      	str	r2, [r3, #20]
	PureVelocityPIDController.NowError = 0;
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <PID_Reset+0xdc>)
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28
	PureVelocityPIDController.PreviousPreviousError = 0;
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <PID_Reset+0xdc>)
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
	PureVelocityPIDController.PreviousControllerOutput = 0;
 8003eac:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <PID_Reset+0xdc>)
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	619a      	str	r2, [r3, #24]
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000430 	.word	0x20000430
 8003ec4:	20000470 	.word	0x20000470
 8003ec8:	200004f0 	.word	0x200004f0
 8003ecc:	200004b0 	.word	0x200004b0

08003ed0 <LAMP_ON>:

void LAMP_ON(uint8_t lampnumber)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	71fb      	strb	r3, [r7, #7]
	if (lampnumber == 0)
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d110      	bne.n	8003f02 <LAMP_ON+0x32>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	4830      	ldr	r0, [pc, #192]	; (8003fa8 <LAMP_ON+0xd8>)
 8003ee6:	f001 fcf5 	bl	80058d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003eea:	2201      	movs	r2, #1
 8003eec:	2104      	movs	r1, #4
 8003eee:	482e      	ldr	r0, [pc, #184]	; (8003fa8 <LAMP_ON+0xd8>)
 8003ef0:	f001 fcf0 	bl	80058d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003efa:	482c      	ldr	r0, [pc, #176]	; (8003fac <LAMP_ON+0xdc>)
 8003efc:	f001 fcea 	bl	80058d4 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
	}
}
 8003f00:	e04e      	b.n	8003fa0 <LAMP_ON+0xd0>
	else if (lampnumber == 1)
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d110      	bne.n	8003f2a <LAMP_ON+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	4826      	ldr	r0, [pc, #152]	; (8003fa8 <LAMP_ON+0xd8>)
 8003f0e:	f001 fce1 	bl	80058d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003f12:	2201      	movs	r2, #1
 8003f14:	2104      	movs	r1, #4
 8003f16:	4824      	ldr	r0, [pc, #144]	; (8003fa8 <LAMP_ON+0xd8>)
 8003f18:	f001 fcdc 	bl	80058d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f22:	4822      	ldr	r0, [pc, #136]	; (8003fac <LAMP_ON+0xdc>)
 8003f24:	f001 fcd6 	bl	80058d4 <HAL_GPIO_WritePin>
}
 8003f28:	e03a      	b.n	8003fa0 <LAMP_ON+0xd0>
	else if (lampnumber == 2)
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d110      	bne.n	8003f52 <LAMP_ON+0x82>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003f30:	2201      	movs	r2, #1
 8003f32:	2102      	movs	r1, #2
 8003f34:	481c      	ldr	r0, [pc, #112]	; (8003fa8 <LAMP_ON+0xd8>)
 8003f36:	f001 fccd 	bl	80058d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2104      	movs	r1, #4
 8003f3e:	481a      	ldr	r0, [pc, #104]	; (8003fa8 <LAMP_ON+0xd8>)
 8003f40:	f001 fcc8 	bl	80058d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003f44:	2201      	movs	r2, #1
 8003f46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f4a:	4818      	ldr	r0, [pc, #96]	; (8003fac <LAMP_ON+0xdc>)
 8003f4c:	f001 fcc2 	bl	80058d4 <HAL_GPIO_WritePin>
}
 8003f50:	e026      	b.n	8003fa0 <LAMP_ON+0xd0>
	else if (lampnumber == 3)
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d110      	bne.n	8003f7a <LAMP_ON+0xaa>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8003f58:	2201      	movs	r2, #1
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	4812      	ldr	r0, [pc, #72]	; (8003fa8 <LAMP_ON+0xd8>)
 8003f5e:	f001 fcb9 	bl	80058d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003f62:	2201      	movs	r2, #1
 8003f64:	2104      	movs	r1, #4
 8003f66:	4810      	ldr	r0, [pc, #64]	; (8003fa8 <LAMP_ON+0xd8>)
 8003f68:	f001 fcb4 	bl	80058d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f72:	480e      	ldr	r0, [pc, #56]	; (8003fac <LAMP_ON+0xdc>)
 8003f74:	f001 fcae 	bl	80058d4 <HAL_GPIO_WritePin>
}
 8003f78:	e012      	b.n	8003fa0 <LAMP_ON+0xd0>
	else if (lampnumber == 4)
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d10f      	bne.n	8003fa0 <LAMP_ON+0xd0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8003f80:	2200      	movs	r2, #0
 8003f82:	2102      	movs	r1, #2
 8003f84:	4808      	ldr	r0, [pc, #32]	; (8003fa8 <LAMP_ON+0xd8>)
 8003f86:	f001 fca5 	bl	80058d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2104      	movs	r1, #4
 8003f8e:	4806      	ldr	r0, [pc, #24]	; (8003fa8 <LAMP_ON+0xd8>)
 8003f90:	f001 fca0 	bl	80058d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003f94:	2200      	movs	r2, #0
 8003f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f9a:	4804      	ldr	r0, [pc, #16]	; (8003fac <LAMP_ON+0xdc>)
 8003f9c:	f001 fc9a 	bl	80058d4 <HAL_GPIO_WritePin>
}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40020400 	.word	0x40020400
 8003fac:	40020000 	.word	0x40020000

08003fb0 <Emergency_switch_trigger>:

void Emergency_switch_trigger()
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1)
 8003fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fb8:	481f      	ldr	r0, [pc, #124]	; (8004038 <Emergency_switch_trigger+0x88>)
 8003fba:	f001 fc73 	bl	80058a4 <HAL_GPIO_ReadPin>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d136      	bne.n	8004032 <Emergency_switch_trigger+0x82>
	{
		// Reset State Machine All
		Munmunbot_State = STATE_Disconnected;
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	; (800403c <Emergency_switch_trigger+0x8c>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	701a      	strb	r2, [r3, #0]
		MovingLinkMode = LMM_Not_Set;
 8003fca:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <Emergency_switch_trigger+0x90>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
		SethomeMode = SetHomeState_0;
 8003fd0:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <Emergency_switch_trigger+0x94>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
		TrjStruc.Mode = 0;
 8003fd6:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <Emergency_switch_trigger+0x98>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		TrjStruc.Submode = 0;
 8003fde:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <Emergency_switch_trigger+0x98>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		// Send back ACK to User-interface
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <Emergency_switch_trigger+0x8c>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d00b      	beq.n	8004006 <Emergency_switch_trigger+0x56>
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <Emergency_switch_trigger+0x8c>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d007      	beq.n	8004006 <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <Emergency_switch_trigger+0x8c>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
		if ((Munmunbot_State == STATE_Calculation) || (Munmunbot_State == STATE_PrepareDATA) ||
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d003      	beq.n	8004006 <Emergency_switch_trigger+0x56>
				(Munmunbot_State == STATE_Link_Moving) || (Munmunbot_State == STATE_End_Effector_Working))
 8003ffe:	4b0f      	ldr	r3, [pc, #60]	; (800403c <Emergency_switch_trigger+0x8c>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b07      	cmp	r3, #7
 8004004:	d102      	bne.n	800400c <Emergency_switch_trigger+0x5c>
		{
			ACK2Return(&UART2);
 8004006:	4811      	ldr	r0, [pc, #68]	; (800404c <Emergency_switch_trigger+0x9c>)
 8004008:	f7ff fa98 	bl	800353c <ACK2Return>
		}

		// Reset variable
		NumberOfStationToGo = 0;
 800400c:	4b10      	ldr	r3, [pc, #64]	; (8004050 <Emergency_switch_trigger+0xa0>)
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]
		NumberOfStationPTR = 0;
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <Emergency_switch_trigger+0xa4>)
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
		Moving_Link_Task_Flag = 0;
 8004018:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <Emergency_switch_trigger+0xa8>)
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]

		// Stop the Motor
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <Emergency_switch_trigger+0xac>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8004026:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <Emergency_switch_trigger+0xb0>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	4a07      	ldr	r2, [pc, #28]	; (8004048 <Emergency_switch_trigger+0x98>)
 800402c:	66d3      	str	r3, [r2, #108]	; 0x6c

		PID_Reset();
 800402e:	f7ff fedf 	bl	8003df0 <PID_Reset>
	}
}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40020400 	.word	0x40020400
 800403c:	20000301 	.word	0x20000301
 8004040:	20000406 	.word	0x20000406
 8004044:	20000302 	.word	0x20000302
 8004048:	20000530 	.word	0x20000530
 800404c:	200002e0 	.word	0x200002e0
 8004050:	20000408 	.word	0x20000408
 8004054:	20000409 	.word	0x20000409
 8004058:	20000410 	.word	0x20000410
 800405c:	20000188 	.word	0x20000188
 8004060:	20000430 	.word	0x20000430

08004064 <Controlling_the_LINK>:

void Controlling_the_LINK()
{
 8004064:	b5b0      	push	{r4, r5, r7, lr}
 8004066:	af00      	add	r7, sp, #0
	  // GEN Trajectory
	  TrajectoryGenerationProcess();
 8004068:	f7fe fbbe 	bl	80027e8 <TrajectoryGenerationProcess>
	  EncoderVelocityAndPosition_Update();
 800406c:	f7fd fd0e 	bl	8001a8c <EncoderVelocityAndPosition_Update>
	  PIDController2in1();  ///use only position
 8004070:	f7fe ffac 	bl	8002fcc <PIDController2in1>
//	  Plant_input = PositionPIDController.ControllerOutput;
	  Plant_input = VelocityPIDController.ControllerOutput;
 8004074:	4b29      	ldr	r3, [pc, #164]	; (800411c <Controlling_the_LINK+0xb8>)
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	4a29      	ldr	r2, [pc, #164]	; (8004120 <Controlling_the_LINK+0xbc>)
 800407a:	6013      	str	r3, [r2, #0]

	  if (Plant_input >= 0) /// Setting DIR
 800407c:	4b28      	ldr	r3, [pc, #160]	; (8004120 <Controlling_the_LINK+0xbc>)
 800407e:	edd3 7a00 	vldr	s15, [r3]
 8004082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408a:	db0c      	blt.n	80040a6 <Controlling_the_LINK+0x42>
	  {
		  DCMotorStruc.DIR = 1;
 800408c:	4b25      	ldr	r3, [pc, #148]	; (8004124 <Controlling_the_LINK+0xc0>)
 800408e:	2201      	movs	r2, #1
 8004090:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 8004092:	4b23      	ldr	r3, [pc, #140]	; (8004120 <Controlling_the_LINK+0xbc>)
 8004094:	edd3 7a00 	vldr	s15, [r3]
 8004098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800409c:	ee17 2a90 	vmov	r2, s15
 80040a0:	4b20      	ldr	r3, [pc, #128]	; (8004124 <Controlling_the_LINK+0xc0>)
 80040a2:	605a      	str	r2, [r3, #4]
 80040a4:	e01b      	b.n	80040de <Controlling_the_LINK+0x7a>
	  }
	  else if (Plant_input < 0)
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <Controlling_the_LINK+0xbc>)
 80040a8:	edd3 7a00 	vldr	s15, [r3]
 80040ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b4:	d513      	bpl.n	80040de <Controlling_the_LINK+0x7a>
	  {
		  DCMotorStruc.DIR = 0;
 80040b6:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <Controlling_the_LINK+0xc0>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 80040bc:	4b18      	ldr	r3, [pc, #96]	; (8004120 <Controlling_the_LINK+0xbc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fc f9ed 	bl	80004a0 <__aeabi_f2d>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4614      	mov	r4, r2
 80040cc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80040d0:	4620      	mov	r0, r4
 80040d2:	4629      	mov	r1, r5
 80040d4:	f7fc fcec 	bl	8000ab0 <__aeabi_d2uiz>
 80040d8:	4603      	mov	r3, r0
 80040da:	4a12      	ldr	r2, [pc, #72]	; (8004124 <Controlling_the_LINK+0xc0>)
 80040dc:	6053      	str	r3, [r2, #4]
	  }

	  if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 80040de:	4b11      	ldr	r3, [pc, #68]	; (8004124 <Controlling_the_LINK+0xc0>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d903      	bls.n	80040f2 <Controlling_the_LINK+0x8e>
	  {
		 DCMotorStruc.PWMOut = 10000;
 80040ea:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <Controlling_the_LINK+0xc0>)
 80040ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80040f0:	605a      	str	r2, [r3, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <Controlling_the_LINK+0xc0>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	2180      	movs	r1, #128	; 0x80
 80040fa:	480b      	ldr	r0, [pc, #44]	; (8004128 <Controlling_the_LINK+0xc4>)
 80040fc:	f001 fbea 	bl	80058d4 <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <Controlling_the_LINK+0xc8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a07      	ldr	r2, [pc, #28]	; (8004124 <Controlling_the_LINK+0xc0>)
 8004106:	6852      	ldr	r2, [r2, #4]
 8004108:	635a      	str	r2, [r3, #52]	; 0x34
	  TrjStruc.Loop_Timestamp = micros();
 800410a:	f7fd fdd7 	bl	8001cbc <micros>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4907      	ldr	r1, [pc, #28]	; (8004130 <Controlling_the_LINK+0xcc>)
 8004114:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8004118:	bf00      	nop
 800411a:	bdb0      	pop	{r4, r5, r7, pc}
 800411c:	20000470 	.word	0x20000470
 8004120:	2000040c 	.word	0x2000040c
 8004124:	200002f8 	.word	0x200002f8
 8004128:	40020800 	.word	0x40020800
 800412c:	20000188 	.word	0x20000188
 8004130:	20000530 	.word	0x20000530

08004134 <HackTheLink>:
		TrjStruc.Loop_Timestamp = micros();
	}
}

void HackTheLink( float Position )
{
 8004134:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	ed87 0a01 	vstr	s0, [r7, #4]
	if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8004140:	f7fd fdbc 	bl	8001cbc <micros>
 8004144:	4b57      	ldr	r3, [pc, #348]	; (80042a4 <HackTheLink+0x170>)
 8004146:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800414a:	1a84      	subs	r4, r0, r2
 800414c:	eb61 0503 	sbc.w	r5, r1, r3
 8004150:	4b54      	ldr	r3, [pc, #336]	; (80042a4 <HackTheLink+0x170>)
 8004152:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004156:	4294      	cmp	r4, r2
 8004158:	eb75 0303 	sbcs.w	r3, r5, r3
 800415c:	f0c0 809c 	bcc.w	8004298 <HackTheLink+0x164>
	{
		TrjStruc.AngularDisplacementDesire = Position;
 8004160:	4a50      	ldr	r2, [pc, #320]	; (80042a4 <HackTheLink+0x170>)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6213      	str	r3, [r2, #32]
		EncoderVelocityAndPosition_Update();
 8004166:	f7fd fc91 	bl	8001a8c <EncoderVelocityAndPosition_Update>

		if ((PositionPIDController.OutputFeedback <= Position + AcceptableError) &&
 800416a:	4b4f      	ldr	r3, [pc, #316]	; (80042a8 <HackTheLink+0x174>)
 800416c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004170:	4b4e      	ldr	r3, [pc, #312]	; (80042ac <HackTheLink+0x178>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	ee07 3a90 	vmov	s15, r3
 8004178:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800417c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004180:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418c:	d811      	bhi.n	80041b2 <HackTheLink+0x7e>
				(PositionPIDController.OutputFeedback >= Position - AcceptableError))
 800418e:	4b46      	ldr	r3, [pc, #280]	; (80042a8 <HackTheLink+0x174>)
 8004190:	ed93 7a08 	vldr	s14, [r3, #32]
 8004194:	4b45      	ldr	r3, [pc, #276]	; (80042ac <HackTheLink+0x178>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	ee07 3a90 	vmov	s15, r3
 800419c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041a0:	edd7 6a01 	vldr	s13, [r7, #4]
 80041a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
		if ((PositionPIDController.OutputFeedback <= Position + AcceptableError) &&
 80041a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b0:	da1e      	bge.n	80041f0 <HackTheLink+0xbc>
		{
//			Plant_input = 1500;
		}
		else if ( Position - PositionPIDController.OutputFeedback >= 0)
 80041b2:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <HackTheLink+0x174>)
 80041b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80041b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80041bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c8:	db03      	blt.n	80041d2 <HackTheLink+0x9e>
		{
			TrjStruc.AngularVelocityDesire = 0.5*(8192.0/60.0);
 80041ca:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <HackTheLink+0x170>)
 80041cc:	4a38      	ldr	r2, [pc, #224]	; (80042b0 <HackTheLink+0x17c>)
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24
 80041d0:	e00e      	b.n	80041f0 <HackTheLink+0xbc>
		}
		else if ( Position - PositionPIDController.OutputFeedback < 0)
 80041d2:	4b35      	ldr	r3, [pc, #212]	; (80042a8 <HackTheLink+0x174>)
 80041d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80041d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80041dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e8:	d502      	bpl.n	80041f0 <HackTheLink+0xbc>
		{
			TrjStruc.AngularVelocityDesire = -0.5*(8192.0/60.0);
 80041ea:	4b2e      	ldr	r3, [pc, #184]	; (80042a4 <HackTheLink+0x170>)
 80041ec:	4a31      	ldr	r2, [pc, #196]	; (80042b4 <HackTheLink+0x180>)
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24
		}
		PureVeloPID();
 80041f0:	f7fe fff4 	bl	80031dc <PureVeloPID>
		Plant_input = PureVelocityPIDController.ControllerOutput;
 80041f4:	4b30      	ldr	r3, [pc, #192]	; (80042b8 <HackTheLink+0x184>)
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	4a30      	ldr	r2, [pc, #192]	; (80042bc <HackTheLink+0x188>)
 80041fa:	6013      	str	r3, [r2, #0]

		if (Plant_input >= 0) /// Setting DIR
 80041fc:	4b2f      	ldr	r3, [pc, #188]	; (80042bc <HackTheLink+0x188>)
 80041fe:	edd3 7a00 	vldr	s15, [r3]
 8004202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420a:	db0c      	blt.n	8004226 <HackTheLink+0xf2>
		{
		  DCMotorStruc.DIR = 1;
 800420c:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <HackTheLink+0x18c>)
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input);
 8004212:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <HackTheLink+0x188>)
 8004214:	edd3 7a00 	vldr	s15, [r3]
 8004218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421c:	ee17 2a90 	vmov	r2, s15
 8004220:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <HackTheLink+0x18c>)
 8004222:	605a      	str	r2, [r3, #4]
 8004224:	e01b      	b.n	800425e <HackTheLink+0x12a>
		}
		else if (Plant_input < 0)
 8004226:	4b25      	ldr	r3, [pc, #148]	; (80042bc <HackTheLink+0x188>)
 8004228:	edd3 7a00 	vldr	s15, [r3]
 800422c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004234:	d513      	bpl.n	800425e <HackTheLink+0x12a>
		{
		  DCMotorStruc.DIR = 0;
 8004236:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <HackTheLink+0x18c>)
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
		  DCMotorStruc.PWMOut = (uint32_t) (Plant_input * -1.0);
 800423c:	4b1f      	ldr	r3, [pc, #124]	; (80042bc <HackTheLink+0x188>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fc f92d 	bl	80004a0 <__aeabi_f2d>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4690      	mov	r8, r2
 800424c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004250:	4640      	mov	r0, r8
 8004252:	4649      	mov	r1, r9
 8004254:	f7fc fc2c 	bl	8000ab0 <__aeabi_d2uiz>
 8004258:	4603      	mov	r3, r0
 800425a:	4a19      	ldr	r2, [pc, #100]	; (80042c0 <HackTheLink+0x18c>)
 800425c:	6053      	str	r3, [r2, #4]
		}

		if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 800425e:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <HackTheLink+0x18c>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f242 7210 	movw	r2, #10000	; 0x2710
 8004266:	4293      	cmp	r3, r2
 8004268:	d903      	bls.n	8004272 <HackTheLink+0x13e>
		{
		 DCMotorStruc.PWMOut = 10000;
 800426a:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <HackTheLink+0x18c>)
 800426c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004270:	605a      	str	r2, [r3, #4]
		}

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 8004272:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <HackTheLink+0x18c>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	4812      	ldr	r0, [pc, #72]	; (80042c4 <HackTheLink+0x190>)
 800427c:	f001 fb2a 	bl	80058d4 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 8004280:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <HackTheLink+0x194>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a0e      	ldr	r2, [pc, #56]	; (80042c0 <HackTheLink+0x18c>)
 8004286:	6852      	ldr	r2, [r2, #4]
 8004288:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Loop_Timestamp = micros();
 800428a:	f7fd fd17 	bl	8001cbc <micros>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4904      	ldr	r1, [pc, #16]	; (80042a4 <HackTheLink+0x170>)
 8004294:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}
}
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042a2:	bf00      	nop
 80042a4:	20000530 	.word	0x20000530
 80042a8:	20000430 	.word	0x20000430
 80042ac:	20000015 	.word	0x20000015
 80042b0:	42888889 	.word	0x42888889
 80042b4:	c2888889 	.word	0xc2888889
 80042b8:	200004b0 	.word	0x200004b0
 80042bc:	2000040c 	.word	0x2000040c
 80042c0:	200002f8 	.word	0x200002f8
 80042c4:	40020800 	.word	0x40020800
 80042c8:	20000188 	.word	0x20000188

080042cc <SETHOME_StateMachine_Function>:

void SETHOME_StateMachine_Function()
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 80042d0:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <SETHOME_StateMachine_Function+0x74>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d013      	beq.n	8004300 <SETHOME_StateMachine_Function+0x34>
 80042d8:	2b02      	cmp	r3, #2
 80042da:	dc2e      	bgt.n	800433a <SETHOME_StateMachine_Function+0x6e>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <SETHOME_StateMachine_Function+0x18>
 80042e0:	2b01      	cmp	r3, #1
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2700);
			SethomeMode = SetHomeState_1;
			break;
		case SetHomeState_1:
			break;
 80042e2:	e02a      	b.n	800433a <SETHOME_StateMachine_Function+0x6e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80042e4:	2200      	movs	r2, #0
 80042e6:	2180      	movs	r1, #128	; 0x80
 80042e8:	4816      	ldr	r0, [pc, #88]	; (8004344 <SETHOME_StateMachine_Function+0x78>)
 80042ea:	f001 faf3 	bl	80058d4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2700);
 80042ee:	4b16      	ldr	r3, [pc, #88]	; (8004348 <SETHOME_StateMachine_Function+0x7c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f640 228c 	movw	r2, #2700	; 0xa8c
 80042f6:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <SETHOME_StateMachine_Function+0x74>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
			break;
 80042fe:	e01c      	b.n	800433a <SETHOME_StateMachine_Function+0x6e>
		case SetHomeState_2:
			Munmunbot_State = STATE_Idle;
 8004300:	4b12      	ldr	r3, [pc, #72]	; (800434c <SETHOME_StateMachine_Function+0x80>)
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <SETHOME_StateMachine_Function+0x84>)
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800430c:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <SETHOME_StateMachine_Function+0x7c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2200      	movs	r2, #0
 8004312:	635a      	str	r2, [r3, #52]	; 0x34
			TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <SETHOME_StateMachine_Function+0x88>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <SETHOME_StateMachine_Function+0x8c>)
 8004324:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			Moving_Link_Task_Flag = 0;
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <SETHOME_StateMachine_Function+0x90>)
 800432a:	2200      	movs	r2, #0
 800432c:	701a      	strb	r2, [r3, #0]
			sethomeTrigger = 1;
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <SETHOME_StateMachine_Function+0x94>)
 8004330:	2201      	movs	r2, #1
 8004332:	701a      	strb	r2, [r3, #0]
			PID_Reset();
 8004334:	f7ff fd5c 	bl	8003df0 <PID_Reset>

			break;
 8004338:	bf00      	nop

     }

}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000302 	.word	0x20000302
 8004344:	40020800 	.word	0x40020800
 8004348:	20000188 	.word	0x20000188
 800434c:	20000301 	.word	0x20000301
 8004350:	20000406 	.word	0x20000406
 8004354:	200000f8 	.word	0x200000f8
 8004358:	20000530 	.word	0x20000530
 800435c:	20000410 	.word	0x20000410
 8004360:	20000411 	.word	0x20000411

08004364 <UpdateMunmunBotState>:

void UpdateMunmunBotState()
{
 8004364:	b5b0      	push	{r4, r5, r7, lr}
 8004366:	af00      	add	r7, sp, #0
	if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8004368:	f7fd fca8 	bl	8001cbc <micros>
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <UpdateMunmunBotState+0x38>)
 800436e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004372:	1a84      	subs	r4, r0, r2
 8004374:	eb61 0503 	sbc.w	r5, r1, r3
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <UpdateMunmunBotState+0x38>)
 800437a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800437e:	4294      	cmp	r4, r2
 8004380:	eb75 0303 	sbcs.w	r3, r5, r3
 8004384:	d308      	bcc.n	8004398 <UpdateMunmunBotState+0x34>
	{
		EncoderVelocityAndPosition_Update();
 8004386:	f7fd fb81 	bl	8001a8c <EncoderVelocityAndPosition_Update>
		TrjStruc.Loop_Timestamp = micros();
 800438a:	f7fd fc97 	bl	8001cbc <micros>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4902      	ldr	r1, [pc, #8]	; (800439c <UpdateMunmunBotState+0x38>)
 8004394:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}
}
 8004398:	bf00      	nop
 800439a:	bdb0      	pop	{r4, r5, r7, pc}
 800439c:	20000530 	.word	0x20000530

080043a0 <EndEffectorWorkingState>:
		Timestamp_EndEffectorDebug = micros();
	}
}

void EndEffectorWorkingState()
{
 80043a0:	b5b0      	push	{r4, r5, r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af02      	add	r7, sp, #8
	  if(GripperEnable == 1)
 80043a6:	4b25      	ldr	r3, [pc, #148]	; (800443c <EndEffectorWorkingState+0x9c>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d13b      	bne.n	8004426 <EndEffectorWorkingState+0x86>
	  {
		if (GripperState == 0)
 80043ae:	4b24      	ldr	r3, [pc, #144]	; (8004440 <EndEffectorWorkingState+0xa0>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d11d      	bne.n	80043f2 <EndEffectorWorkingState+0x52>
		{
			LAMP_ON(3);
 80043b6:	2003      	movs	r0, #3
 80043b8:	f7ff fd8a 	bl	8003ed0 <LAMP_ON>
			{
				uint8_t temp[1] = {0x45};
 80043bc:	2345      	movs	r3, #69	; 0x45
 80043be:	713b      	strb	r3, [r7, #4]
				HAL_I2C_Master_Transmit(&hi2c1, (0x23 << 1) , temp, 1, 100);
 80043c0:	1d3a      	adds	r2, r7, #4
 80043c2:	2364      	movs	r3, #100	; 0x64
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	2301      	movs	r3, #1
 80043c8:	2146      	movs	r1, #70	; 0x46
 80043ca:	481e      	ldr	r0, [pc, #120]	; (8004444 <EndEffectorWorkingState+0xa4>)
 80043cc:	f001 fbf8 	bl	8005bc0 <HAL_I2C_Master_Transmit>
				EndeffectorTestMode = EndeffectorTestMode + 3;
 80043d0:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <EndEffectorWorkingState+0xa8>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	3303      	adds	r3, #3
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <EndEffectorWorkingState+0xa8>)
 80043da:	701a      	strb	r2, [r3, #0]
			}
			GripperState = 1;
 80043dc:	4b18      	ldr	r3, [pc, #96]	; (8004440 <EndEffectorWorkingState+0xa0>)
 80043de:	2201      	movs	r2, #1
 80043e0:	701a      	strb	r2, [r3, #0]
			Timestamp_Gripper = micros();
 80043e2:	f7fd fc6b 	bl	8001cbc <micros>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4918      	ldr	r1, [pc, #96]	; (800444c <EndEffectorWorkingState+0xac>)
 80043ec:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  else if(GripperEnable == 0)
	  {
		 Munmunbot_State = STATE_PrepareDATA;
	  }
}
 80043f0:	e020      	b.n	8004434 <EndEffectorWorkingState+0x94>
		else if (GripperState != 0)
 80043f2:	4b13      	ldr	r3, [pc, #76]	; (8004440 <EndEffectorWorkingState+0xa0>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01c      	beq.n	8004434 <EndEffectorWorkingState+0x94>
			if (micros() - Timestamp_Gripper >= 5100000)
 80043fa:	f7fd fc5f 	bl	8001cbc <micros>
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <EndEffectorWorkingState+0xac>)
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	1a84      	subs	r4, r0, r2
 8004406:	eb61 0503 	sbc.w	r5, r1, r3
 800440a:	4b11      	ldr	r3, [pc, #68]	; (8004450 <EndEffectorWorkingState+0xb0>)
 800440c:	429c      	cmp	r4, r3
 800440e:	f175 0300 	sbcs.w	r3, r5, #0
 8004412:	d30f      	bcc.n	8004434 <EndEffectorWorkingState+0x94>
				GripperState = 0;
 8004414:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <EndEffectorWorkingState+0xa0>)
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
				Munmunbot_State = STATE_PrepareDATA;
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <EndEffectorWorkingState+0xb4>)
 800441c:	2202      	movs	r2, #2
 800441e:	701a      	strb	r2, [r3, #0]
				PID_Reset();
 8004420:	f7ff fce6 	bl	8003df0 <PID_Reset>
}
 8004424:	e006      	b.n	8004434 <EndEffectorWorkingState+0x94>
	  else if(GripperEnable == 0)
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <EndEffectorWorkingState+0x9c>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <EndEffectorWorkingState+0x94>
		 Munmunbot_State = STATE_PrepareDATA;
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <EndEffectorWorkingState+0xb4>)
 8004430:	2202      	movs	r2, #2
 8004432:	701a      	strb	r2, [r3, #0]
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bdb0      	pop	{r4, r5, r7, pc}
 800443c:	20000014 	.word	0x20000014
 8004440:	20000412 	.word	0x20000412
 8004444:	200000a4 	.word	0x200000a4
 8004448:	200005cd 	.word	0x200005cd
 800444c:	20000418 	.word	0x20000418
 8004450:	004dd1e0 	.word	0x004dd1e0
 8004454:	20000301 	.word	0x20000301

08004458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800445c:	b672      	cpsid	i
}
 800445e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004460:	e7fe      	b.n	8004460 <Error_Handler+0x8>
	...

08004464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <HAL_MspInit+0x4c>)
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	4a0f      	ldr	r2, [pc, #60]	; (80044b0 <HAL_MspInit+0x4c>)
 8004474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004478:	6453      	str	r3, [r2, #68]	; 0x44
 800447a:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <HAL_MspInit+0x4c>)
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <HAL_MspInit+0x4c>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	4a08      	ldr	r2, [pc, #32]	; (80044b0 <HAL_MspInit+0x4c>)
 8004490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004494:	6413      	str	r3, [r2, #64]	; 0x40
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_MspInit+0x4c>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80044a2:	2007      	movs	r0, #7
 80044a4:	f000 fc28 	bl	8004cf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044a8:	bf00      	nop
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40023800 	.word	0x40023800

080044b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	; 0x28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044bc:	f107 0314 	add.w	r3, r7, #20
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	609a      	str	r2, [r3, #8]
 80044c8:	60da      	str	r2, [r3, #12]
 80044ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a21      	ldr	r2, [pc, #132]	; (8004558 <HAL_I2C_MspInit+0xa4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d13c      	bne.n	8004550 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	4b20      	ldr	r3, [pc, #128]	; (800455c <HAL_I2C_MspInit+0xa8>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	4a1f      	ldr	r2, [pc, #124]	; (800455c <HAL_I2C_MspInit+0xa8>)
 80044e0:	f043 0302 	orr.w	r3, r3, #2
 80044e4:	6313      	str	r3, [r2, #48]	; 0x30
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <HAL_I2C_MspInit+0xa8>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80044f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80044f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044f8:	2312      	movs	r3, #18
 80044fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044fc:	2301      	movs	r3, #1
 80044fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004500:	2303      	movs	r3, #3
 8004502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004504:	2304      	movs	r3, #4
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004508:	f107 0314 	add.w	r3, r7, #20
 800450c:	4619      	mov	r1, r3
 800450e:	4814      	ldr	r0, [pc, #80]	; (8004560 <HAL_I2C_MspInit+0xac>)
 8004510:	f001 f844 	bl	800559c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	4b10      	ldr	r3, [pc, #64]	; (800455c <HAL_I2C_MspInit+0xa8>)
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	4a0f      	ldr	r2, [pc, #60]	; (800455c <HAL_I2C_MspInit+0xa8>)
 800451e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004522:	6413      	str	r3, [r2, #64]	; 0x40
 8004524:	4b0d      	ldr	r3, [pc, #52]	; (800455c <HAL_I2C_MspInit+0xa8>)
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004530:	2200      	movs	r2, #0
 8004532:	2100      	movs	r1, #0
 8004534:	201f      	movs	r0, #31
 8004536:	f000 fbea 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800453a:	201f      	movs	r0, #31
 800453c:	f000 fc03 	bl	8004d46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004540:	2200      	movs	r2, #0
 8004542:	2100      	movs	r1, #0
 8004544:	2020      	movs	r0, #32
 8004546:	f000 fbe2 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800454a:	2020      	movs	r0, #32
 800454c:	f000 fbfb 	bl	8004d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004550:	bf00      	nop
 8004552:	3728      	adds	r7, #40	; 0x28
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40005400 	.word	0x40005400
 800455c:	40023800 	.word	0x40023800
 8004560:	40020400 	.word	0x40020400

08004564 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08a      	sub	sp, #40	; 0x28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456c:	f107 0314 	add.w	r3, r7, #20
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	605a      	str	r2, [r3, #4]
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <HAL_TIM_Encoder_MspInit+0x84>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d12c      	bne.n	80045e0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	4b18      	ldr	r3, [pc, #96]	; (80045ec <HAL_TIM_Encoder_MspInit+0x88>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	4a17      	ldr	r2, [pc, #92]	; (80045ec <HAL_TIM_Encoder_MspInit+0x88>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6453      	str	r3, [r2, #68]	; 0x44
 8004596:	4b15      	ldr	r3, [pc, #84]	; (80045ec <HAL_TIM_Encoder_MspInit+0x88>)
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	4b11      	ldr	r3, [pc, #68]	; (80045ec <HAL_TIM_Encoder_MspInit+0x88>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	4a10      	ldr	r2, [pc, #64]	; (80045ec <HAL_TIM_Encoder_MspInit+0x88>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6313      	str	r3, [r2, #48]	; 0x30
 80045b2:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <HAL_TIM_Encoder_MspInit+0x88>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 80045be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c4:	2302      	movs	r3, #2
 80045c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045cc:	2300      	movs	r3, #0
 80045ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045d0:	2301      	movs	r3, #1
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d4:	f107 0314 	add.w	r3, r7, #20
 80045d8:	4619      	mov	r1, r3
 80045da:	4805      	ldr	r0, [pc, #20]	; (80045f0 <HAL_TIM_Encoder_MspInit+0x8c>)
 80045dc:	f000 ffde 	bl	800559c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80045e0:	bf00      	nop
 80045e2:	3728      	adds	r7, #40	; 0x28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40010000 	.word	0x40010000
 80045ec:	40023800 	.word	0x40023800
 80045f0:	40020000 	.word	0x40020000

080045f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	d116      	bne.n	8004634 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	4b16      	ldr	r3, [pc, #88]	; (8004664 <HAL_TIM_Base_MspInit+0x70>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	4a15      	ldr	r2, [pc, #84]	; (8004664 <HAL_TIM_Base_MspInit+0x70>)
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	6413      	str	r3, [r2, #64]	; 0x40
 8004616:	4b13      	ldr	r3, [pc, #76]	; (8004664 <HAL_TIM_Base_MspInit+0x70>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004622:	2200      	movs	r2, #0
 8004624:	2100      	movs	r1, #0
 8004626:	201c      	movs	r0, #28
 8004628:	f000 fb71 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800462c:	201c      	movs	r0, #28
 800462e:	f000 fb8a 	bl	8004d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004632:	e012      	b.n	800465a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0b      	ldr	r2, [pc, #44]	; (8004668 <HAL_TIM_Base_MspInit+0x74>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d10d      	bne.n	800465a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	4b08      	ldr	r3, [pc, #32]	; (8004664 <HAL_TIM_Base_MspInit+0x70>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	4a07      	ldr	r2, [pc, #28]	; (8004664 <HAL_TIM_Base_MspInit+0x70>)
 8004648:	f043 0302 	orr.w	r3, r3, #2
 800464c:	6413      	str	r3, [r2, #64]	; 0x40
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_TIM_Base_MspInit+0x70>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	68bb      	ldr	r3, [r7, #8]
}
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40023800 	.word	0x40023800
 8004668:	40000400 	.word	0x40000400

0800466c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004674:	f107 030c 	add.w	r3, r7, #12
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	609a      	str	r2, [r3, #8]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <HAL_TIM_MspPostInit+0x68>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d11d      	bne.n	80046ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <HAL_TIM_MspPostInit+0x6c>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <HAL_TIM_MspPostInit+0x6c>)
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	6313      	str	r3, [r2, #48]	; 0x30
 800469e:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <HAL_TIM_MspPostInit+0x6c>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 80046aa:	2340      	movs	r3, #64	; 0x40
 80046ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ae:	2302      	movs	r3, #2
 80046b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046ba:	2302      	movs	r3, #2
 80046bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 80046be:	f107 030c 	add.w	r3, r7, #12
 80046c2:	4619      	mov	r1, r3
 80046c4:	4805      	ldr	r0, [pc, #20]	; (80046dc <HAL_TIM_MspPostInit+0x70>)
 80046c6:	f000 ff69 	bl	800559c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80046ca:	bf00      	nop
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40023800 	.word	0x40023800
 80046dc:	40020000 	.word	0x40020000

080046e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e8:	f107 0314 	add.w	r3, r7, #20
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a4c      	ldr	r2, [pc, #304]	; (8004830 <HAL_UART_MspInit+0x150>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	f040 8091 	bne.w	8004826 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004704:	2300      	movs	r3, #0
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	4b4a      	ldr	r3, [pc, #296]	; (8004834 <HAL_UART_MspInit+0x154>)
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	4a49      	ldr	r2, [pc, #292]	; (8004834 <HAL_UART_MspInit+0x154>)
 800470e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004712:	6413      	str	r3, [r2, #64]	; 0x40
 8004714:	4b47      	ldr	r3, [pc, #284]	; (8004834 <HAL_UART_MspInit+0x154>)
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	4b43      	ldr	r3, [pc, #268]	; (8004834 <HAL_UART_MspInit+0x154>)
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	4a42      	ldr	r2, [pc, #264]	; (8004834 <HAL_UART_MspInit+0x154>)
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	6313      	str	r3, [r2, #48]	; 0x30
 8004730:	4b40      	ldr	r3, [pc, #256]	; (8004834 <HAL_UART_MspInit+0x154>)
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800473c:	230c      	movs	r3, #12
 800473e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004740:	2302      	movs	r3, #2
 8004742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004748:	2303      	movs	r3, #3
 800474a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800474c:	2307      	movs	r3, #7
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	4619      	mov	r1, r3
 8004756:	4838      	ldr	r0, [pc, #224]	; (8004838 <HAL_UART_MspInit+0x158>)
 8004758:	f000 ff20 	bl	800559c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800475c:	4b37      	ldr	r3, [pc, #220]	; (800483c <HAL_UART_MspInit+0x15c>)
 800475e:	4a38      	ldr	r2, [pc, #224]	; (8004840 <HAL_UART_MspInit+0x160>)
 8004760:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004762:	4b36      	ldr	r3, [pc, #216]	; (800483c <HAL_UART_MspInit+0x15c>)
 8004764:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004768:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800476a:	4b34      	ldr	r3, [pc, #208]	; (800483c <HAL_UART_MspInit+0x15c>)
 800476c:	2240      	movs	r2, #64	; 0x40
 800476e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004770:	4b32      	ldr	r3, [pc, #200]	; (800483c <HAL_UART_MspInit+0x15c>)
 8004772:	2200      	movs	r2, #0
 8004774:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004776:	4b31      	ldr	r3, [pc, #196]	; (800483c <HAL_UART_MspInit+0x15c>)
 8004778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800477c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800477e:	4b2f      	ldr	r3, [pc, #188]	; (800483c <HAL_UART_MspInit+0x15c>)
 8004780:	2200      	movs	r2, #0
 8004782:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004784:	4b2d      	ldr	r3, [pc, #180]	; (800483c <HAL_UART_MspInit+0x15c>)
 8004786:	2200      	movs	r2, #0
 8004788:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800478a:	4b2c      	ldr	r3, [pc, #176]	; (800483c <HAL_UART_MspInit+0x15c>)
 800478c:	2200      	movs	r2, #0
 800478e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004790:	4b2a      	ldr	r3, [pc, #168]	; (800483c <HAL_UART_MspInit+0x15c>)
 8004792:	2200      	movs	r2, #0
 8004794:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004796:	4b29      	ldr	r3, [pc, #164]	; (800483c <HAL_UART_MspInit+0x15c>)
 8004798:	2200      	movs	r2, #0
 800479a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800479c:	4827      	ldr	r0, [pc, #156]	; (800483c <HAL_UART_MspInit+0x15c>)
 800479e:	f000 faed 	bl	8004d7c <HAL_DMA_Init>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80047a8:	f7ff fe56 	bl	8004458 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a23      	ldr	r2, [pc, #140]	; (800483c <HAL_UART_MspInit+0x15c>)
 80047b0:	635a      	str	r2, [r3, #52]	; 0x34
 80047b2:	4a22      	ldr	r2, [pc, #136]	; (800483c <HAL_UART_MspInit+0x15c>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80047b8:	4b22      	ldr	r3, [pc, #136]	; (8004844 <HAL_UART_MspInit+0x164>)
 80047ba:	4a23      	ldr	r2, [pc, #140]	; (8004848 <HAL_UART_MspInit+0x168>)
 80047bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80047be:	4b21      	ldr	r3, [pc, #132]	; (8004844 <HAL_UART_MspInit+0x164>)
 80047c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047c6:	4b1f      	ldr	r3, [pc, #124]	; (8004844 <HAL_UART_MspInit+0x164>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047cc:	4b1d      	ldr	r3, [pc, #116]	; (8004844 <HAL_UART_MspInit+0x164>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047d2:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <HAL_UART_MspInit+0x164>)
 80047d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047da:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <HAL_UART_MspInit+0x164>)
 80047dc:	2200      	movs	r2, #0
 80047de:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047e0:	4b18      	ldr	r3, [pc, #96]	; (8004844 <HAL_UART_MspInit+0x164>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80047e6:	4b17      	ldr	r3, [pc, #92]	; (8004844 <HAL_UART_MspInit+0x164>)
 80047e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047ee:	4b15      	ldr	r3, [pc, #84]	; (8004844 <HAL_UART_MspInit+0x164>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047f4:	4b13      	ldr	r3, [pc, #76]	; (8004844 <HAL_UART_MspInit+0x164>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80047fa:	4812      	ldr	r0, [pc, #72]	; (8004844 <HAL_UART_MspInit+0x164>)
 80047fc:	f000 fabe 	bl	8004d7c <HAL_DMA_Init>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004806:	f7ff fe27 	bl	8004458 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a0d      	ldr	r2, [pc, #52]	; (8004844 <HAL_UART_MspInit+0x164>)
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
 8004810:	4a0c      	ldr	r2, [pc, #48]	; (8004844 <HAL_UART_MspInit+0x164>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004816:	2200      	movs	r2, #0
 8004818:	2100      	movs	r1, #0
 800481a:	2026      	movs	r0, #38	; 0x26
 800481c:	f000 fa77 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004820:	2026      	movs	r0, #38	; 0x26
 8004822:	f000 fa90 	bl	8004d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004826:	bf00      	nop
 8004828:	3728      	adds	r7, #40	; 0x28
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40004400 	.word	0x40004400
 8004834:	40023800 	.word	0x40023800
 8004838:	40020000 	.word	0x40020000
 800483c:	20000214 	.word	0x20000214
 8004840:	400260a0 	.word	0x400260a0
 8004844:	20000274 	.word	0x20000274
 8004848:	40026088 	.word	0x40026088

0800484c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004850:	e7fe      	b.n	8004850 <NMI_Handler+0x4>

08004852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004852:	b480      	push	{r7}
 8004854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004856:	e7fe      	b.n	8004856 <HardFault_Handler+0x4>

08004858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800485c:	e7fe      	b.n	800485c <MemManage_Handler+0x4>

0800485e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800485e:	b480      	push	{r7}
 8004860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004862:	e7fe      	b.n	8004862 <BusFault_Handler+0x4>

08004864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004868:	e7fe      	b.n	8004868 <UsageFault_Handler+0x4>

0800486a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800486e:	bf00      	nop
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800487c:	bf00      	nop
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800488a:	bf00      	nop
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004898:	f000 f91a 	bl	8004ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800489c:	bf00      	nop
 800489e:	bd80      	pop	{r7, pc}

080048a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80048a4:	4802      	ldr	r0, [pc, #8]	; (80048b0 <DMA1_Stream5_IRQHandler+0x10>)
 80048a6:	f000 fc01 	bl	80050ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000274 	.word	0x20000274

080048b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80048b8:	4802      	ldr	r0, [pc, #8]	; (80048c4 <DMA1_Stream6_IRQHandler+0x10>)
 80048ba:	f000 fbf7 	bl	80050ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000214 	.word	0x20000214

080048c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80048cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80048d0:	f001 f81a 	bl	8005908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80048d4:	bf00      	nop
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048dc:	4802      	ldr	r0, [pc, #8]	; (80048e8 <TIM2_IRQHandler+0x10>)
 80048de:	f004 f9b3 	bl	8008c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000140 	.word	0x20000140

080048ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80048f0:	4802      	ldr	r0, [pc, #8]	; (80048fc <I2C1_EV_IRQHandler+0x10>)
 80048f2:	f001 fb09 	bl	8005f08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	200000a4 	.word	0x200000a4

08004900 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004904:	4802      	ldr	r0, [pc, #8]	; (8004910 <I2C1_ER_IRQHandler+0x10>)
 8004906:	f001 fc6c 	bl	80061e2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800490a:	bf00      	nop
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200000a4 	.word	0x200000a4

08004914 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004918:	4802      	ldr	r0, [pc, #8]	; (8004924 <USART2_IRQHandler+0x10>)
 800491a:	f005 f87f 	bl	8009a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	200001d0 	.word	0x200001d0

08004928 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800492c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004930:	f000 ffea 	bl	8005908 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004934:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004938:	f000 ffe6 	bl	8005908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800493c:	bf00      	nop
 800493e:	bd80      	pop	{r7, pc}

08004940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004948:	4a14      	ldr	r2, [pc, #80]	; (800499c <_sbrk+0x5c>)
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <_sbrk+0x60>)
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004954:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <_sbrk+0x64>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <_sbrk+0x64>)
 800495e:	4a12      	ldr	r2, [pc, #72]	; (80049a8 <_sbrk+0x68>)
 8004960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <_sbrk+0x64>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4413      	add	r3, r2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	429a      	cmp	r2, r3
 800496e:	d207      	bcs.n	8004980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004970:	f005 ff5c 	bl	800a82c <__errno>
 8004974:	4603      	mov	r3, r0
 8004976:	220c      	movs	r2, #12
 8004978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295
 800497e:	e009      	b.n	8004994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004980:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <_sbrk+0x64>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004986:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <_sbrk+0x64>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	4a05      	ldr	r2, [pc, #20]	; (80049a4 <_sbrk+0x64>)
 8004990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004992:	68fb      	ldr	r3, [r7, #12]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20020000 	.word	0x20020000
 80049a0:	00000400 	.word	0x00000400
 80049a4:	20000704 	.word	0x20000704
 80049a8:	20000720 	.word	0x20000720

080049ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049b0:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <SystemInit+0x28>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b6:	4a07      	ldr	r2, [pc, #28]	; (80049d4 <SystemInit+0x28>)
 80049b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049c0:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <SystemInit+0x28>)
 80049c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049c6:	609a      	str	r2, [r3, #8]
#endif
}
 80049c8:	bf00      	nop
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	e000ed00 	.word	0xe000ed00

080049d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80049d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80049dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80049de:	e003      	b.n	80049e8 <LoopCopyDataInit>

080049e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80049e0:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80049e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80049e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80049e6:	3104      	adds	r1, #4

080049e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80049e8:	480b      	ldr	r0, [pc, #44]	; (8004a18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80049ea:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80049ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80049ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80049f0:	d3f6      	bcc.n	80049e0 <CopyDataInit>
  ldr  r2, =_sbss
 80049f2:	4a0b      	ldr	r2, [pc, #44]	; (8004a20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80049f4:	e002      	b.n	80049fc <LoopFillZerobss>

080049f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80049f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80049f8:	f842 3b04 	str.w	r3, [r2], #4

080049fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80049fc:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80049fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a00:	d3f9      	bcc.n	80049f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a02:	f7ff ffd3 	bl	80049ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a06:	f005 ff17 	bl	800a838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a0a:	f7fc fb51 	bl	80010b0 <main>
  bx  lr    
 8004a0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004a14:	0800ac58 	.word	0x0800ac58
  ldr  r0, =_sdata
 8004a18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a1c:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8004a20:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8004a24:	2000071c 	.word	0x2000071c

08004a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a28:	e7fe      	b.n	8004a28 <ADC_IRQHandler>
	...

08004a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a30:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <HAL_Init+0x40>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <HAL_Init+0x40>)
 8004a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_Init+0x40>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <HAL_Init+0x40>)
 8004a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <HAL_Init+0x40>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <HAL_Init+0x40>)
 8004a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a54:	2003      	movs	r0, #3
 8004a56:	f000 f94f 	bl	8004cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f000 f808 	bl	8004a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a60:	f7ff fd00 	bl	8004464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023c00 	.word	0x40023c00

08004a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a78:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <HAL_InitTick+0x54>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <HAL_InitTick+0x58>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	4619      	mov	r1, r3
 8004a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f967 	bl	8004d62 <HAL_SYSTICK_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e00e      	b.n	8004abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b0f      	cmp	r3, #15
 8004aa2:	d80a      	bhi.n	8004aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	f000 f92f 	bl	8004d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ab0:	4a06      	ldr	r2, [pc, #24]	; (8004acc <HAL_InitTick+0x5c>)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e000      	b.n	8004abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20000018 	.word	0x20000018
 8004ac8:	20000020 	.word	0x20000020
 8004acc:	2000001c 	.word	0x2000001c

08004ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_IncTick+0x20>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <HAL_IncTick+0x24>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4413      	add	r3, r2
 8004ae0:	4a04      	ldr	r2, [pc, #16]	; (8004af4 <HAL_IncTick+0x24>)
 8004ae2:	6013      	str	r3, [r2, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000020 	.word	0x20000020
 8004af4:	20000708 	.word	0x20000708

08004af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return uwTick;
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <HAL_GetTick+0x14>)
 8004afe:	681b      	ldr	r3, [r3, #0]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20000708 	.word	0x20000708

08004b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b18:	f7ff ffee 	bl	8004af8 <HAL_GetTick>
 8004b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d005      	beq.n	8004b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <HAL_Delay+0x44>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b36:	bf00      	nop
 8004b38:	f7ff ffde 	bl	8004af8 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d8f7      	bhi.n	8004b38 <HAL_Delay+0x28>
  {
  }
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000020 	.word	0x20000020

08004b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <__NVIC_SetPriorityGrouping+0x44>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b74:	4013      	ands	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b8a:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <__NVIC_SetPriorityGrouping+0x44>)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	60d3      	str	r3, [r2, #12]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	0a1b      	lsrs	r3, r3, #8
 8004baa:	f003 0307 	and.w	r3, r3, #7
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	db0b      	blt.n	8004be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	f003 021f 	and.w	r2, r3, #31
 8004bd4:	4907      	ldr	r1, [pc, #28]	; (8004bf4 <__NVIC_EnableIRQ+0x38>)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2001      	movs	r0, #1
 8004bde:	fa00 f202 	lsl.w	r2, r0, r2
 8004be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	e000e100 	.word	0xe000e100

08004bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	db0a      	blt.n	8004c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	490c      	ldr	r1, [pc, #48]	; (8004c44 <__NVIC_SetPriority+0x4c>)
 8004c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c16:	0112      	lsls	r2, r2, #4
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c20:	e00a      	b.n	8004c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4908      	ldr	r1, [pc, #32]	; (8004c48 <__NVIC_SetPriority+0x50>)
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	3b04      	subs	r3, #4
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	440b      	add	r3, r1
 8004c36:	761a      	strb	r2, [r3, #24]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	e000e100 	.word	0xe000e100
 8004c48:	e000ed00 	.word	0xe000ed00

08004c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	; 0x24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f1c3 0307 	rsb	r3, r3, #7
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	bf28      	it	cs
 8004c6a:	2304      	movcs	r3, #4
 8004c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2b06      	cmp	r3, #6
 8004c74:	d902      	bls.n	8004c7c <NVIC_EncodePriority+0x30>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3b03      	subs	r3, #3
 8004c7a:	e000      	b.n	8004c7e <NVIC_EncodePriority+0x32>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	401a      	ands	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c94:	f04f 31ff 	mov.w	r1, #4294967295
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	43d9      	mvns	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	4313      	orrs	r3, r2
         );
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3724      	adds	r7, #36	; 0x24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc4:	d301      	bcc.n	8004cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e00f      	b.n	8004cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cca:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <SysTick_Config+0x40>)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cd2:	210f      	movs	r1, #15
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	f7ff ff8e 	bl	8004bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <SysTick_Config+0x40>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ce2:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <SysTick_Config+0x40>)
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	e000e010 	.word	0xe000e010

08004cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ff29 	bl	8004b58 <__NVIC_SetPriorityGrouping>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b086      	sub	sp, #24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	4603      	mov	r3, r0
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d20:	f7ff ff3e 	bl	8004ba0 <__NVIC_GetPriorityGrouping>
 8004d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	6978      	ldr	r0, [r7, #20]
 8004d2c:	f7ff ff8e 	bl	8004c4c <NVIC_EncodePriority>
 8004d30:	4602      	mov	r2, r0
 8004d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d36:	4611      	mov	r1, r2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff ff5d 	bl	8004bf8 <__NVIC_SetPriority>
}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ff31 	bl	8004bbc <__NVIC_EnableIRQ>
}
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff ffa2 	bl	8004cb4 <SysTick_Config>
 8004d70:	4603      	mov	r3, r0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d88:	f7ff feb6 	bl	8004af8 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e099      	b.n	8004ecc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004db8:	e00f      	b.n	8004dda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dba:	f7ff fe9d 	bl	8004af8 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b05      	cmp	r3, #5
 8004dc6:	d908      	bls.n	8004dda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e078      	b.n	8004ecc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e8      	bne.n	8004dba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4b38      	ldr	r3, [pc, #224]	; (8004ed4 <HAL_DMA_Init+0x158>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d107      	bne.n	8004e44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f023 0307 	bic.w	r3, r3, #7
 8004e5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d117      	bne.n	8004e9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00e      	beq.n	8004e9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fb0f 	bl	80054a4 <DMA_CheckFifoParam>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2240      	movs	r2, #64	; 0x40
 8004e90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e016      	b.n	8004ecc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fac6 	bl	8005438 <DMA_CalcBaseAndBitshift>
 8004eac:	4603      	mov	r3, r0
 8004eae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb4:	223f      	movs	r2, #63	; 0x3f
 8004eb6:	409a      	lsls	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	f010803f 	.word	0xf010803f

08004ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_DMA_Start_IT+0x26>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e040      	b.n	8004f80 <HAL_DMA_Start_IT+0xa8>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d12f      	bne.n	8004f72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 fa58 	bl	80053dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f30:	223f      	movs	r2, #63	; 0x3f
 8004f32:	409a      	lsls	r2, r3
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0216 	orr.w	r2, r2, #22
 8004f46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0208 	orr.w	r2, r2, #8
 8004f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e005      	b.n	8004f7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f96:	f7ff fdaf 	bl	8004af8 <HAL_GetTick>
 8004f9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d008      	beq.n	8004fba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2280      	movs	r2, #128	; 0x80
 8004fac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e052      	b.n	8005060 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0216 	bic.w	r2, r2, #22
 8004fc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695a      	ldr	r2, [r3, #20]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d103      	bne.n	8004fea <HAL_DMA_Abort+0x62>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0208 	bic.w	r2, r2, #8
 8004ff8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0201 	bic.w	r2, r2, #1
 8005008:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800500a:	e013      	b.n	8005034 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800500c:	f7ff fd74 	bl	8004af8 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b05      	cmp	r3, #5
 8005018:	d90c      	bls.n	8005034 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2203      	movs	r2, #3
 800502c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e015      	b.n	8005060 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e4      	bne.n	800500c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005046:	223f      	movs	r2, #63	; 0x3f
 8005048:	409a      	lsls	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d004      	beq.n	8005086 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2280      	movs	r2, #128	; 0x80
 8005080:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e00c      	b.n	80050a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2205      	movs	r2, #5
 800508a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050b8:	4b8e      	ldr	r3, [pc, #568]	; (80052f4 <HAL_DMA_IRQHandler+0x248>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a8e      	ldr	r2, [pc, #568]	; (80052f8 <HAL_DMA_IRQHandler+0x24c>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	0a9b      	lsrs	r3, r3, #10
 80050c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d6:	2208      	movs	r2, #8
 80050d8:	409a      	lsls	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01a      	beq.n	8005118 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d013      	beq.n	8005118 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0204 	bic.w	r2, r2, #4
 80050fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005104:	2208      	movs	r2, #8
 8005106:	409a      	lsls	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005110:	f043 0201 	orr.w	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511c:	2201      	movs	r2, #1
 800511e:	409a      	lsls	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d012      	beq.n	800514e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00b      	beq.n	800514e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513a:	2201      	movs	r2, #1
 800513c:	409a      	lsls	r2, r3
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005146:	f043 0202 	orr.w	r2, r3, #2
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	2204      	movs	r2, #4
 8005154:	409a      	lsls	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4013      	ands	r3, r2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d012      	beq.n	8005184 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00b      	beq.n	8005184 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005170:	2204      	movs	r2, #4
 8005172:	409a      	lsls	r2, r3
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517c:	f043 0204 	orr.w	r2, r3, #4
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005188:	2210      	movs	r2, #16
 800518a:	409a      	lsls	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4013      	ands	r3, r2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d043      	beq.n	800521c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d03c      	beq.n	800521c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a6:	2210      	movs	r2, #16
 80051a8:	409a      	lsls	r2, r3
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d018      	beq.n	80051ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d108      	bne.n	80051dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d024      	beq.n	800521c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	4798      	blx	r3
 80051da:	e01f      	b.n	800521c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01b      	beq.n	800521c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
 80051ec:	e016      	b.n	800521c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d107      	bne.n	800520c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0208 	bic.w	r2, r2, #8
 800520a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005220:	2220      	movs	r2, #32
 8005222:	409a      	lsls	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4013      	ands	r3, r2
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 808f 	beq.w	800534c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8087 	beq.w	800534c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005242:	2220      	movs	r2, #32
 8005244:	409a      	lsls	r2, r3
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b05      	cmp	r3, #5
 8005254:	d136      	bne.n	80052c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0216 	bic.w	r2, r2, #22
 8005264:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695a      	ldr	r2, [r3, #20]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005274:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d103      	bne.n	8005286 <HAL_DMA_IRQHandler+0x1da>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0208 	bic.w	r2, r2, #8
 8005294:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529a:	223f      	movs	r2, #63	; 0x3f
 800529c:	409a      	lsls	r2, r3
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d07e      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
        }
        return;
 80052c2:	e079      	b.n	80053b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01d      	beq.n	800530e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10d      	bne.n	80052fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d031      	beq.n	800534c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	4798      	blx	r3
 80052f0:	e02c      	b.n	800534c <HAL_DMA_IRQHandler+0x2a0>
 80052f2:	bf00      	nop
 80052f4:	20000018 	.word	0x20000018
 80052f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d023      	beq.n	800534c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
 800530c:	e01e      	b.n	800534c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10f      	bne.n	800533c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0210 	bic.w	r2, r2, #16
 800532a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	2b00      	cmp	r3, #0
 8005352:	d032      	beq.n	80053ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d022      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2205      	movs	r2, #5
 8005364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0201 	bic.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	3301      	adds	r3, #1
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	429a      	cmp	r2, r3
 8005382:	d307      	bcc.n	8005394 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f2      	bne.n	8005378 <HAL_DMA_IRQHandler+0x2cc>
 8005392:	e000      	b.n	8005396 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005394:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	4798      	blx	r3
 80053b6:	e000      	b.n	80053ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80053b8:	bf00      	nop
    }
  }
}
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053ce:	b2db      	uxtb	r3, r3
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	d108      	bne.n	800541c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800541a:	e007      	b.n	800542c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	60da      	str	r2, [r3, #12]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	3b10      	subs	r3, #16
 8005448:	4a14      	ldr	r2, [pc, #80]	; (800549c <DMA_CalcBaseAndBitshift+0x64>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005452:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <DMA_CalcBaseAndBitshift+0x68>)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b03      	cmp	r3, #3
 8005464:	d909      	bls.n	800547a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800546e:	f023 0303 	bic.w	r3, r3, #3
 8005472:	1d1a      	adds	r2, r3, #4
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	659a      	str	r2, [r3, #88]	; 0x58
 8005478:	e007      	b.n	800548a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005482:	f023 0303 	bic.w	r3, r3, #3
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	aaaaaaab 	.word	0xaaaaaaab
 80054a0:	0800ac40 	.word	0x0800ac40

080054a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11f      	bne.n	80054fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d856      	bhi.n	8005572 <DMA_CheckFifoParam+0xce>
 80054c4:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <DMA_CheckFifoParam+0x28>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054ef 	.word	0x080054ef
 80054d4:	080054dd 	.word	0x080054dd
 80054d8:	08005573 	.word	0x08005573
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d046      	beq.n	8005576 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ec:	e043      	b.n	8005576 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054f6:	d140      	bne.n	800557a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054fc:	e03d      	b.n	800557a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005506:	d121      	bne.n	800554c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d837      	bhi.n	800557e <DMA_CheckFifoParam+0xda>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <DMA_CheckFifoParam+0x70>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005525 	.word	0x08005525
 8005518:	0800552b 	.word	0x0800552b
 800551c:	08005525 	.word	0x08005525
 8005520:	0800553d 	.word	0x0800553d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
      break;
 8005528:	e030      	b.n	800558c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d025      	beq.n	8005582 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800553a:	e022      	b.n	8005582 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005544:	d11f      	bne.n	8005586 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800554a:	e01c      	b.n	8005586 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d903      	bls.n	800555a <DMA_CheckFifoParam+0xb6>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d003      	beq.n	8005560 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005558:	e018      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	73fb      	strb	r3, [r7, #15]
      break;
 800555e:	e015      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00e      	beq.n	800558a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
      break;
 8005570:	e00b      	b.n	800558a <DMA_CheckFifoParam+0xe6>
      break;
 8005572:	bf00      	nop
 8005574:	e00a      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 8005576:	bf00      	nop
 8005578:	e008      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 800557a:	bf00      	nop
 800557c:	e006      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 800557e:	bf00      	nop
 8005580:	e004      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 8005582:	bf00      	nop
 8005584:	e002      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;   
 8005586:	bf00      	nop
 8005588:	e000      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 800558a:	bf00      	nop
    }
  } 
  
  return status; 
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop

0800559c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800559c:	b480      	push	{r7}
 800559e:	b089      	sub	sp, #36	; 0x24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	e159      	b.n	800586c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055b8:	2201      	movs	r2, #1
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4013      	ands	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	f040 8148 	bne.w	8005866 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d005      	beq.n	80055ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d130      	bne.n	8005650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	2203      	movs	r2, #3
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43db      	mvns	r3, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4013      	ands	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4313      	orrs	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005624:	2201      	movs	r2, #1
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	f003 0201 	and.w	r2, r3, #1
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4313      	orrs	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	2b03      	cmp	r3, #3
 800565a:	d017      	beq.n	800568c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	2203      	movs	r2, #3
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4313      	orrs	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d123      	bne.n	80056e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	08da      	lsrs	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3208      	adds	r2, #8
 80056a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	220f      	movs	r2, #15
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4013      	ands	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	08da      	lsrs	r2, r3, #3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3208      	adds	r2, #8
 80056da:	69b9      	ldr	r1, [r7, #24]
 80056dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	2203      	movs	r2, #3
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4013      	ands	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 0203 	and.w	r2, r3, #3
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4313      	orrs	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80a2 	beq.w	8005866 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	4b57      	ldr	r3, [pc, #348]	; (8005884 <HAL_GPIO_Init+0x2e8>)
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572a:	4a56      	ldr	r2, [pc, #344]	; (8005884 <HAL_GPIO_Init+0x2e8>)
 800572c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005730:	6453      	str	r3, [r2, #68]	; 0x44
 8005732:	4b54      	ldr	r3, [pc, #336]	; (8005884 <HAL_GPIO_Init+0x2e8>)
 8005734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800573e:	4a52      	ldr	r2, [pc, #328]	; (8005888 <HAL_GPIO_Init+0x2ec>)
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	089b      	lsrs	r3, r3, #2
 8005744:	3302      	adds	r3, #2
 8005746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	220f      	movs	r2, #15
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4013      	ands	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a49      	ldr	r2, [pc, #292]	; (800588c <HAL_GPIO_Init+0x2f0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d019      	beq.n	800579e <HAL_GPIO_Init+0x202>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a48      	ldr	r2, [pc, #288]	; (8005890 <HAL_GPIO_Init+0x2f4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <HAL_GPIO_Init+0x1fe>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a47      	ldr	r2, [pc, #284]	; (8005894 <HAL_GPIO_Init+0x2f8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00d      	beq.n	8005796 <HAL_GPIO_Init+0x1fa>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a46      	ldr	r2, [pc, #280]	; (8005898 <HAL_GPIO_Init+0x2fc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <HAL_GPIO_Init+0x1f6>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a45      	ldr	r2, [pc, #276]	; (800589c <HAL_GPIO_Init+0x300>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d101      	bne.n	800578e <HAL_GPIO_Init+0x1f2>
 800578a:	2304      	movs	r3, #4
 800578c:	e008      	b.n	80057a0 <HAL_GPIO_Init+0x204>
 800578e:	2307      	movs	r3, #7
 8005790:	e006      	b.n	80057a0 <HAL_GPIO_Init+0x204>
 8005792:	2303      	movs	r3, #3
 8005794:	e004      	b.n	80057a0 <HAL_GPIO_Init+0x204>
 8005796:	2302      	movs	r3, #2
 8005798:	e002      	b.n	80057a0 <HAL_GPIO_Init+0x204>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <HAL_GPIO_Init+0x204>
 800579e:	2300      	movs	r3, #0
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	f002 0203 	and.w	r2, r2, #3
 80057a6:	0092      	lsls	r2, r2, #2
 80057a8:	4093      	lsls	r3, r2
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057b0:	4935      	ldr	r1, [pc, #212]	; (8005888 <HAL_GPIO_Init+0x2ec>)
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	089b      	lsrs	r3, r3, #2
 80057b6:	3302      	adds	r3, #2
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057be:	4b38      	ldr	r3, [pc, #224]	; (80058a0 <HAL_GPIO_Init+0x304>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	43db      	mvns	r3, r3
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	4013      	ands	r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057e2:	4a2f      	ldr	r2, [pc, #188]	; (80058a0 <HAL_GPIO_Init+0x304>)
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80057e8:	4b2d      	ldr	r3, [pc, #180]	; (80058a0 <HAL_GPIO_Init+0x304>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	43db      	mvns	r3, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4013      	ands	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800580c:	4a24      	ldr	r2, [pc, #144]	; (80058a0 <HAL_GPIO_Init+0x304>)
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005812:	4b23      	ldr	r3, [pc, #140]	; (80058a0 <HAL_GPIO_Init+0x304>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	43db      	mvns	r3, r3
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	4013      	ands	r3, r2
 8005820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005836:	4a1a      	ldr	r2, [pc, #104]	; (80058a0 <HAL_GPIO_Init+0x304>)
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800583c:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <HAL_GPIO_Init+0x304>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	43db      	mvns	r3, r3
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	4013      	ands	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005860:	4a0f      	ldr	r2, [pc, #60]	; (80058a0 <HAL_GPIO_Init+0x304>)
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	3301      	adds	r3, #1
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	2b0f      	cmp	r3, #15
 8005870:	f67f aea2 	bls.w	80055b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	3724      	adds	r7, #36	; 0x24
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40023800 	.word	0x40023800
 8005888:	40013800 	.word	0x40013800
 800588c:	40020000 	.word	0x40020000
 8005890:	40020400 	.word	0x40020400
 8005894:	40020800 	.word	0x40020800
 8005898:	40020c00 	.word	0x40020c00
 800589c:	40021000 	.word	0x40021000
 80058a0:	40013c00 	.word	0x40013c00

080058a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	887b      	ldrh	r3, [r7, #2]
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058bc:	2301      	movs	r3, #1
 80058be:	73fb      	strb	r3, [r7, #15]
 80058c0:	e001      	b.n	80058c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	807b      	strh	r3, [r7, #2]
 80058e0:	4613      	mov	r3, r2
 80058e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058e4:	787b      	ldrb	r3, [r7, #1]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ea:	887a      	ldrh	r2, [r7, #2]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058f0:	e003      	b.n	80058fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058f2:	887b      	ldrh	r3, [r7, #2]
 80058f4:	041a      	lsls	r2, r3, #16
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	619a      	str	r2, [r3, #24]
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
	...

08005908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005912:	4b08      	ldr	r3, [pc, #32]	; (8005934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005914:	695a      	ldr	r2, [r3, #20]
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	4013      	ands	r3, r2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d006      	beq.n	800592c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800591e:	4a05      	ldr	r2, [pc, #20]	; (8005934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	4618      	mov	r0, r3
 8005928:	f7fc f99a 	bl	8001c60 <HAL_GPIO_EXTI_Callback>
  }
}
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	40013c00 	.word	0x40013c00

08005938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e12b      	b.n	8005ba2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fe fda8 	bl	80044b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2224      	movs	r2, #36	; 0x24
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0201 	bic.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800598a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800599a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800599c:	f002 fde2 	bl	8008564 <HAL_RCC_GetPCLK1Freq>
 80059a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4a81      	ldr	r2, [pc, #516]	; (8005bac <HAL_I2C_Init+0x274>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d807      	bhi.n	80059bc <HAL_I2C_Init+0x84>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4a80      	ldr	r2, [pc, #512]	; (8005bb0 <HAL_I2C_Init+0x278>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	bf94      	ite	ls
 80059b4:	2301      	movls	r3, #1
 80059b6:	2300      	movhi	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	e006      	b.n	80059ca <HAL_I2C_Init+0x92>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4a7d      	ldr	r2, [pc, #500]	; (8005bb4 <HAL_I2C_Init+0x27c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	bf94      	ite	ls
 80059c4:	2301      	movls	r3, #1
 80059c6:	2300      	movhi	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e0e7      	b.n	8005ba2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a78      	ldr	r2, [pc, #480]	; (8005bb8 <HAL_I2C_Init+0x280>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	0c9b      	lsrs	r3, r3, #18
 80059dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4a6a      	ldr	r2, [pc, #424]	; (8005bac <HAL_I2C_Init+0x274>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d802      	bhi.n	8005a0c <HAL_I2C_Init+0xd4>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	e009      	b.n	8005a20 <HAL_I2C_Init+0xe8>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a12:	fb02 f303 	mul.w	r3, r2, r3
 8005a16:	4a69      	ldr	r2, [pc, #420]	; (8005bbc <HAL_I2C_Init+0x284>)
 8005a18:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1c:	099b      	lsrs	r3, r3, #6
 8005a1e:	3301      	adds	r3, #1
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	430b      	orrs	r3, r1
 8005a26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	495c      	ldr	r1, [pc, #368]	; (8005bac <HAL_I2C_Init+0x274>)
 8005a3c:	428b      	cmp	r3, r1
 8005a3e:	d819      	bhi.n	8005a74 <HAL_I2C_Init+0x13c>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	1e59      	subs	r1, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a4e:	1c59      	adds	r1, r3, #1
 8005a50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a54:	400b      	ands	r3, r1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_I2C_Init+0x138>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1e59      	subs	r1, r3, #1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a68:	3301      	adds	r3, #1
 8005a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a6e:	e051      	b.n	8005b14 <HAL_I2C_Init+0x1dc>
 8005a70:	2304      	movs	r3, #4
 8005a72:	e04f      	b.n	8005b14 <HAL_I2C_Init+0x1dc>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d111      	bne.n	8005aa0 <HAL_I2C_Init+0x168>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	1e58      	subs	r0, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6859      	ldr	r1, [r3, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	440b      	add	r3, r1
 8005a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a8e:	3301      	adds	r3, #1
 8005a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bf0c      	ite	eq
 8005a98:	2301      	moveq	r3, #1
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e012      	b.n	8005ac6 <HAL_I2C_Init+0x18e>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	1e58      	subs	r0, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6859      	ldr	r1, [r3, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	0099      	lsls	r1, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	bf0c      	ite	eq
 8005ac0:	2301      	moveq	r3, #1
 8005ac2:	2300      	movne	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_I2C_Init+0x196>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e022      	b.n	8005b14 <HAL_I2C_Init+0x1dc>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10e      	bne.n	8005af4 <HAL_I2C_Init+0x1bc>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1e58      	subs	r0, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6859      	ldr	r1, [r3, #4]
 8005ade:	460b      	mov	r3, r1
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	440b      	add	r3, r1
 8005ae4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ae8:	3301      	adds	r3, #1
 8005aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af2:	e00f      	b.n	8005b14 <HAL_I2C_Init+0x1dc>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	1e58      	subs	r0, r3, #1
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6859      	ldr	r1, [r3, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	0099      	lsls	r1, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	6809      	ldr	r1, [r1, #0]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69da      	ldr	r2, [r3, #28]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6911      	ldr	r1, [r2, #16]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68d2      	ldr	r2, [r2, #12]
 8005b4e:	4311      	orrs	r1, r2
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	430b      	orrs	r3, r1
 8005b56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	000186a0 	.word	0x000186a0
 8005bb0:	001e847f 	.word	0x001e847f
 8005bb4:	003d08ff 	.word	0x003d08ff
 8005bb8:	431bde83 	.word	0x431bde83
 8005bbc:	10624dd3 	.word	0x10624dd3

08005bc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	460b      	mov	r3, r1
 8005bce:	817b      	strh	r3, [r7, #10]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bd4:	f7fe ff90 	bl	8004af8 <HAL_GetTick>
 8005bd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	f040 80e0 	bne.w	8005da8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	2319      	movs	r3, #25
 8005bee:	2201      	movs	r2, #1
 8005bf0:	4970      	ldr	r1, [pc, #448]	; (8005db4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f001 fe72 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e0d3      	b.n	8005daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_I2C_Master_Transmit+0x50>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e0cc      	b.n	8005daa <HAL_I2C_Master_Transmit+0x1ea>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d007      	beq.n	8005c36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0201 	orr.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2221      	movs	r2, #33	; 0x21
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2210      	movs	r2, #16
 8005c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	893a      	ldrh	r2, [r7, #8]
 8005c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a50      	ldr	r2, [pc, #320]	; (8005db8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005c76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c78:	8979      	ldrh	r1, [r7, #10]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	6a3a      	ldr	r2, [r7, #32]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f001 fd02 	bl	8007688 <I2C_MasterRequestWrite>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e08d      	b.n	8005daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c8e:	2300      	movs	r3, #0
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005ca4:	e066      	b.n	8005d74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	6a39      	ldr	r1, [r7, #32]
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f001 feec 	bl	8007a88 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00d      	beq.n	8005cd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d107      	bne.n	8005cce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ccc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e06b      	b.n	8005daa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	781a      	ldrb	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d11b      	bne.n	8005d48 <HAL_I2C_Master_Transmit+0x188>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d017      	beq.n	8005d48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	781a      	ldrb	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	6a39      	ldr	r1, [r7, #32]
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f001 fedc 	bl	8007b0a <I2C_WaitOnBTFFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00d      	beq.n	8005d74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d107      	bne.n	8005d70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e01a      	b.n	8005daa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d194      	bne.n	8005ca6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	e000      	b.n	8005daa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005da8:	2302      	movs	r3, #2
  }
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	00100002 	.word	0x00100002
 8005db8:	ffff0000 	.word	0xffff0000

08005dbc <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	607a      	str	r2, [r7, #4]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	460b      	mov	r3, r1
 8005dca:	817b      	strh	r3, [r7, #10]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b20      	cmp	r3, #32
 8005dde:	f040 8085 	bne.w	8005eec <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005de2:	4b46      	ldr	r3, [pc, #280]	; (8005efc <HAL_I2C_Master_Transmit_IT+0x140>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	08db      	lsrs	r3, r3, #3
 8005de8:	4a45      	ldr	r2, [pc, #276]	; (8005f00 <HAL_I2C_Master_Transmit_IT+0x144>)
 8005dea:	fba2 2303 	umull	r2, r3, r2, r3
 8005dee:	0a1a      	lsrs	r2, r3, #8
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	009a      	lsls	r2, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d116      	bne.n	8005e36 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	f043 0220 	orr.w	r2, r3, #32
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e05b      	b.n	8005eee <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d0db      	beq.n	8005dfc <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_I2C_Master_Transmit_IT+0x96>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e04d      	b.n	8005eee <HAL_I2C_Master_Transmit_IT+0x132>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d007      	beq.n	8005e78 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2221      	movs	r2, #33	; 0x21
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2210      	movs	r2, #16
 8005e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	893a      	ldrh	r2, [r7, #8]
 8005ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4a13      	ldr	r2, [pc, #76]	; (8005f04 <HAL_I2C_Master_Transmit_IT+0x148>)
 8005eb8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005eba:	897a      	ldrh	r2, [r7, #10]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ece:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005ee6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e000      	b.n	8005eee <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005eec:	2302      	movs	r3, #2
  }
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000018 	.word	0x20000018
 8005f00:	14f8b589 	.word	0x14f8b589
 8005f04:	ffff0000 	.word	0xffff0000

08005f08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f30:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d003      	beq.n	8005f40 <HAL_I2C_EV_IRQHandler+0x38>
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	2b40      	cmp	r3, #64	; 0x40
 8005f3c:	f040 80bd 	bne.w	80060ba <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10d      	bne.n	8005f76 <HAL_I2C_EV_IRQHandler+0x6e>
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005f60:	d003      	beq.n	8005f6a <HAL_I2C_EV_IRQHandler+0x62>
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005f68:	d101      	bne.n	8005f6e <HAL_I2C_EV_IRQHandler+0x66>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <HAL_I2C_EV_IRQHandler+0x68>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	f000 812e 	beq.w	80061d2 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00c      	beq.n	8005f9a <HAL_I2C_EV_IRQHandler+0x92>
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	0a5b      	lsrs	r3, r3, #9
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d006      	beq.n	8005f9a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 fe5e 	bl	8007c4e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fd62 	bl	8006a5c <I2C_Master_SB>
 8005f98:	e08e      	b.n	80060b8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	08db      	lsrs	r3, r3, #3
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d009      	beq.n	8005fba <HAL_I2C_EV_IRQHandler+0xb2>
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	0a5b      	lsrs	r3, r3, #9
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fdd8 	bl	8006b68 <I2C_Master_ADD10>
 8005fb8:	e07e      	b.n	80060b8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	085b      	lsrs	r3, r3, #1
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d009      	beq.n	8005fda <HAL_I2C_EV_IRQHandler+0xd2>
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	0a5b      	lsrs	r3, r3, #9
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fdf2 	bl	8006bbc <I2C_Master_ADDR>
 8005fd8:	e06e      	b.n	80060b8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	089b      	lsrs	r3, r3, #2
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d037      	beq.n	8006056 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff4:	f000 80ef 	beq.w	80061d6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	09db      	lsrs	r3, r3, #7
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00f      	beq.n	8006024 <HAL_I2C_EV_IRQHandler+0x11c>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	0a9b      	lsrs	r3, r3, #10
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d009      	beq.n	8006024 <HAL_I2C_EV_IRQHandler+0x11c>
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	089b      	lsrs	r3, r3, #2
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d103      	bne.n	8006024 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f9ef 	bl	8006400 <I2C_MasterTransmit_TXE>
 8006022:	e049      	b.n	80060b8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	089b      	lsrs	r3, r3, #2
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 80d2 	beq.w	80061d6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	0a5b      	lsrs	r3, r3, #9
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 80cb 	beq.w	80061d6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	2b10      	cmp	r3, #16
 8006044:	d103      	bne.n	800604e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa76 	bl	8006538 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800604c:	e0c3      	b.n	80061d6 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fada 	bl	8006608 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006054:	e0bf      	b.n	80061d6 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006064:	f000 80b7 	beq.w	80061d6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	099b      	lsrs	r3, r3, #6
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00f      	beq.n	8006094 <HAL_I2C_EV_IRQHandler+0x18c>
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	0a9b      	lsrs	r3, r3, #10
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d009      	beq.n	8006094 <HAL_I2C_EV_IRQHandler+0x18c>
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	089b      	lsrs	r3, r3, #2
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fb4a 	bl	8006726 <I2C_MasterReceive_RXNE>
 8006092:	e011      	b.n	80060b8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	089b      	lsrs	r3, r3, #2
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 809a 	beq.w	80061d6 <HAL_I2C_EV_IRQHandler+0x2ce>
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	0a5b      	lsrs	r3, r3, #9
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 8093 	beq.w	80061d6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fbe9 	bl	8006888 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060b6:	e08e      	b.n	80061d6 <HAL_I2C_EV_IRQHandler+0x2ce>
 80060b8:	e08d      	b.n	80061d6 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d004      	beq.n	80060cc <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	61fb      	str	r3, [r7, #28]
 80060ca:	e007      	b.n	80060dc <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	085b      	lsrs	r3, r3, #1
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d012      	beq.n	800610e <HAL_I2C_EV_IRQHandler+0x206>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	0a5b      	lsrs	r3, r3, #9
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00c      	beq.n	800610e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006104:	69b9      	ldr	r1, [r7, #24]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 ffa7 	bl	800705a <I2C_Slave_ADDR>
 800610c:	e066      	b.n	80061dc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	091b      	lsrs	r3, r3, #4
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <HAL_I2C_EV_IRQHandler+0x226>
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	0a5b      	lsrs	r3, r3, #9
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 ffdc 	bl	80070e4 <I2C_Slave_STOPF>
 800612c:	e056      	b.n	80061dc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	2b21      	cmp	r3, #33	; 0x21
 8006132:	d002      	beq.n	800613a <HAL_I2C_EV_IRQHandler+0x232>
 8006134:	7bbb      	ldrb	r3, [r7, #14]
 8006136:	2b29      	cmp	r3, #41	; 0x29
 8006138:	d125      	bne.n	8006186 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	09db      	lsrs	r3, r3, #7
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00f      	beq.n	8006166 <HAL_I2C_EV_IRQHandler+0x25e>
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	0a9b      	lsrs	r3, r3, #10
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <HAL_I2C_EV_IRQHandler+0x25e>
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	089b      	lsrs	r3, r3, #2
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d103      	bne.n	8006166 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 febd 	bl	8006ede <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006164:	e039      	b.n	80061da <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	089b      	lsrs	r3, r3, #2
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d033      	beq.n	80061da <HAL_I2C_EV_IRQHandler+0x2d2>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	0a5b      	lsrs	r3, r3, #9
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d02d      	beq.n	80061da <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 feea 	bl	8006f58 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006184:	e029      	b.n	80061da <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	099b      	lsrs	r3, r3, #6
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00f      	beq.n	80061b2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	0a9b      	lsrs	r3, r3, #10
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d009      	beq.n	80061b2 <HAL_I2C_EV_IRQHandler+0x2aa>
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	089b      	lsrs	r3, r3, #2
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d103      	bne.n	80061b2 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fef5 	bl	8006f9a <I2C_SlaveReceive_RXNE>
 80061b0:	e014      	b.n	80061dc <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	089b      	lsrs	r3, r3, #2
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00e      	beq.n	80061dc <HAL_I2C_EV_IRQHandler+0x2d4>
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	0a5b      	lsrs	r3, r3, #9
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d008      	beq.n	80061dc <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 ff23 	bl	8007016 <I2C_SlaveReceive_BTF>
 80061d0:	e004      	b.n	80061dc <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80061d2:	bf00      	nop
 80061d4:	e002      	b.n	80061dc <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061d6:	bf00      	nop
 80061d8:	e000      	b.n	80061dc <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061da:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b08a      	sub	sp, #40	; 0x28
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80061fa:	2300      	movs	r3, #0
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006204:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00e      	beq.n	8006230 <HAL_I2C_ER_IRQHandler+0x4e>
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	0a1b      	lsrs	r3, r3, #8
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d008      	beq.n	8006230 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800622e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	0a5b      	lsrs	r3, r3, #9
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00e      	beq.n	800625a <HAL_I2C_ER_IRQHandler+0x78>
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	0a1b      	lsrs	r3, r3, #8
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	f043 0302 	orr.w	r3, r3, #2
 800624e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006258:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	0a9b      	lsrs	r3, r3, #10
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d03f      	beq.n	80062e6 <HAL_I2C_ER_IRQHandler+0x104>
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	0a1b      	lsrs	r3, r3, #8
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d039      	beq.n	80062e6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006272:	7efb      	ldrb	r3, [r7, #27]
 8006274:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627a:	b29b      	uxth	r3, r3
 800627c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006284:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800628c:	7ebb      	ldrb	r3, [r7, #26]
 800628e:	2b20      	cmp	r3, #32
 8006290:	d112      	bne.n	80062b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10f      	bne.n	80062b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006298:	7cfb      	ldrb	r3, [r7, #19]
 800629a:	2b21      	cmp	r3, #33	; 0x21
 800629c:	d008      	beq.n	80062b0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800629e:	7cfb      	ldrb	r3, [r7, #19]
 80062a0:	2b29      	cmp	r3, #41	; 0x29
 80062a2:	d005      	beq.n	80062b0 <HAL_I2C_ER_IRQHandler+0xce>
 80062a4:	7cfb      	ldrb	r3, [r7, #19]
 80062a6:	2b28      	cmp	r3, #40	; 0x28
 80062a8:	d106      	bne.n	80062b8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b21      	cmp	r3, #33	; 0x21
 80062ae:	d103      	bne.n	80062b8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 f847 	bl	8007344 <I2C_Slave_AF>
 80062b6:	e016      	b.n	80062e6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062c0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	f043 0304 	orr.w	r3, r3, #4
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80062ca:	7efb      	ldrb	r3, [r7, #27]
 80062cc:	2b10      	cmp	r3, #16
 80062ce:	d002      	beq.n	80062d6 <HAL_I2C_ER_IRQHandler+0xf4>
 80062d0:	7efb      	ldrb	r3, [r7, #27]
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d107      	bne.n	80062e6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	0adb      	lsrs	r3, r3, #11
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00e      	beq.n	8006310 <HAL_I2C_ER_IRQHandler+0x12e>
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	0a1b      	lsrs	r3, r3, #8
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d008      	beq.n	8006310 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	f043 0308 	orr.w	r3, r3, #8
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800630e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	d008      	beq.n	8006328 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 f87e 	bl	8007424 <I2C_ITError>
  }
}
 8006328:	bf00      	nop
 800632a:	3728      	adds	r7, #40	; 0x28
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	70fb      	strb	r3, [r7, #3]
 800638c:	4613      	mov	r3, r2
 800638e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800640e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006416:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006422:	2b00      	cmp	r3, #0
 8006424:	d150      	bne.n	80064c8 <I2C_MasterTransmit_TXE+0xc8>
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	2b21      	cmp	r3, #33	; 0x21
 800642a:	d14d      	bne.n	80064c8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b08      	cmp	r3, #8
 8006430:	d01d      	beq.n	800646e <I2C_MasterTransmit_TXE+0x6e>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b20      	cmp	r3, #32
 8006436:	d01a      	beq.n	800646e <I2C_MasterTransmit_TXE+0x6e>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800643e:	d016      	beq.n	800646e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800644e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2211      	movs	r2, #17
 8006454:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2220      	movs	r2, #32
 8006462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff ff62 	bl	8006330 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800646c:	e060      	b.n	8006530 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800647c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800648c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b40      	cmp	r3, #64	; 0x40
 80064a6:	d107      	bne.n	80064b8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff ff7d 	bl	80063b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064b6:	e03b      	b.n	8006530 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff ff35 	bl	8006330 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064c6:	e033      	b.n	8006530 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	2b21      	cmp	r3, #33	; 0x21
 80064cc:	d005      	beq.n	80064da <I2C_MasterTransmit_TXE+0xda>
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	d12d      	bne.n	8006530 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b22      	cmp	r3, #34	; 0x22
 80064d8:	d12a      	bne.n	8006530 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064de:	b29b      	uxth	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d108      	bne.n	80064f6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80064f4:	e01c      	b.n	8006530 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b40      	cmp	r3, #64	; 0x40
 8006500:	d103      	bne.n	800650a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f880 	bl	8006608 <I2C_MemoryTransmit_TXE_BTF>
}
 8006508:	e012      	b.n	8006530 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	781a      	ldrb	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800652e:	e7ff      	b.n	8006530 <I2C_MasterTransmit_TXE+0x130>
 8006530:	bf00      	nop
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b21      	cmp	r3, #33	; 0x21
 8006550:	d156      	bne.n	8006600 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d012      	beq.n	8006582 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	781a      	ldrb	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006580:	e03e      	b.n	8006600 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b08      	cmp	r3, #8
 8006586:	d01d      	beq.n	80065c4 <I2C_MasterTransmit_BTF+0x8c>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b20      	cmp	r3, #32
 800658c:	d01a      	beq.n	80065c4 <I2C_MasterTransmit_BTF+0x8c>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006594:	d016      	beq.n	80065c4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065a4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2211      	movs	r2, #17
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff feb7 	bl	8006330 <HAL_I2C_MasterTxCpltCallback>
}
 80065c2:	e01d      	b.n	8006600 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065d2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fe98 	bl	8006330 <HAL_I2C_MasterTxCpltCallback>
}
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006616:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	2b00      	cmp	r3, #0
 800661e:	d11d      	bne.n	800665c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006624:	2b01      	cmp	r3, #1
 8006626:	d10b      	bne.n	8006640 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800662c:	b2da      	uxtb	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006638:	1c9a      	adds	r2, r3, #2
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800663e:	e06e      	b.n	800671e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006644:	b29b      	uxth	r3, r3
 8006646:	121b      	asrs	r3, r3, #8
 8006648:	b2da      	uxtb	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	651a      	str	r2, [r3, #80]	; 0x50
}
 800665a:	e060      	b.n	800671e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006660:	2b01      	cmp	r3, #1
 8006662:	d10b      	bne.n	800667c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006668:	b2da      	uxtb	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	651a      	str	r2, [r3, #80]	; 0x50
}
 800667a:	e050      	b.n	800671e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006680:	2b02      	cmp	r3, #2
 8006682:	d14c      	bne.n	800671e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	2b22      	cmp	r3, #34	; 0x22
 8006688:	d108      	bne.n	800669c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006698:	601a      	str	r2, [r3, #0]
}
 800669a:	e040      	b.n	800671e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d015      	beq.n	80066d2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	2b21      	cmp	r3, #33	; 0x21
 80066aa:	d112      	bne.n	80066d2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80066d0:	e025      	b.n	800671e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d120      	bne.n	800671e <I2C_MemoryTransmit_TXE_BTF+0x116>
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b21      	cmp	r3, #33	; 0x21
 80066e0:	d11d      	bne.n	800671e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066f0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006700:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff fe49 	bl	80063b0 <HAL_I2C_MemTxCpltCallback>
}
 800671e:	bf00      	nop
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b22      	cmp	r3, #34	; 0x22
 8006738:	f040 80a2 	bne.w	8006880 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006740:	b29b      	uxth	r3, r3
 8006742:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b03      	cmp	r3, #3
 8006748:	d921      	bls.n	800678e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	691a      	ldr	r2, [r3, #16]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006766:	b29b      	uxth	r3, r3
 8006768:	3b01      	subs	r3, #1
 800676a:	b29a      	uxth	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b03      	cmp	r3, #3
 8006778:	f040 8082 	bne.w	8006880 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800678a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800678c:	e078      	b.n	8006880 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	2b02      	cmp	r3, #2
 8006794:	d074      	beq.n	8006880 <I2C_MasterReceive_RXNE+0x15a>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d002      	beq.n	80067a2 <I2C_MasterReceive_RXNE+0x7c>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d16e      	bne.n	8006880 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 f9f2 	bl	8007b8c <I2C_WaitOnSTOPRequestThroughIT>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d142      	bne.n	8006834 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067bc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b40      	cmp	r3, #64	; 0x40
 8006806:	d10a      	bne.n	800681e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff fdd4 	bl	80063c4 <HAL_I2C_MemRxCpltCallback>
}
 800681c:	e030      	b.n	8006880 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2212      	movs	r2, #18
 800682a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff fd89 	bl	8006344 <HAL_I2C_MasterRxCpltCallback>
}
 8006832:	e025      	b.n	8006880 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006842:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7ff fdac 	bl	80063d8 <HAL_I2C_ErrorCallback>
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b04      	cmp	r3, #4
 800689e:	d11b      	bne.n	80068d8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ae:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80068d6:	e0bd      	b.n	8006a54 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d129      	bne.n	8006936 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d00a      	beq.n	800690e <I2C_MasterReceive_BTF+0x86>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d007      	beq.n	800690e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800690c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006934:	e08e      	b.n	8006a54 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d176      	bne.n	8006a2e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d002      	beq.n	800694c <I2C_MasterReceive_BTF+0xc4>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b10      	cmp	r3, #16
 800694a:	d108      	bne.n	800695e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	e019      	b.n	8006992 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b04      	cmp	r3, #4
 8006962:	d002      	beq.n	800696a <I2C_MasterReceive_BTF+0xe2>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d108      	bne.n	800697c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e00a      	b.n	8006992 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b10      	cmp	r3, #16
 8006980:	d007      	beq.n	8006992 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006990:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	b2d2      	uxtb	r2, r2
 800699e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80069ec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2220      	movs	r2, #32
 80069f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	d10a      	bne.n	8006a18 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff fcd7 	bl	80063c4 <HAL_I2C_MemRxCpltCallback>
}
 8006a16:	e01d      	b.n	8006a54 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2212      	movs	r2, #18
 8006a24:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fc8c 	bl	8006344 <HAL_I2C_MasterRxCpltCallback>
}
 8006a2c:	e012      	b.n	8006a54 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a54:	bf00      	nop
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b40      	cmp	r3, #64	; 0x40
 8006a6e:	d117      	bne.n	8006aa0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a88:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006a8a:	e067      	b.n	8006b5c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	611a      	str	r2, [r3, #16]
}
 8006a9e:	e05d      	b.n	8006b5c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006aa8:	d133      	bne.n	8006b12 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b21      	cmp	r3, #33	; 0x21
 8006ab4:	d109      	bne.n	8006aca <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	461a      	mov	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ac6:	611a      	str	r2, [r3, #16]
 8006ac8:	e008      	b.n	8006adc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	f043 0301 	orr.w	r3, r3, #1
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d004      	beq.n	8006aee <I2C_Master_SB+0x92>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d108      	bne.n	8006b00 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d032      	beq.n	8006b5c <I2C_Master_SB+0x100>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d02d      	beq.n	8006b5c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b0e:	605a      	str	r2, [r3, #4]
}
 8006b10:	e024      	b.n	8006b5c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10e      	bne.n	8006b38 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	11db      	asrs	r3, r3, #7
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 0306 	and.w	r3, r3, #6
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	f063 030f 	orn	r3, r3, #15
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	611a      	str	r2, [r3, #16]
}
 8006b36:	e011      	b.n	8006b5c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d10d      	bne.n	8006b5c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	11db      	asrs	r3, r3, #7
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	f003 0306 	and.w	r3, r3, #6
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f063 030e 	orn	r3, r3, #14
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	611a      	str	r2, [r3, #16]
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d004      	beq.n	8006b8e <I2C_Master_ADD10+0x26>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d108      	bne.n	8006ba0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00c      	beq.n	8006bb0 <I2C_Master_ADD10+0x48>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d007      	beq.n	8006bb0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bae:	605a      	str	r2, [r3, #4]
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b091      	sub	sp, #68	; 0x44
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b22      	cmp	r3, #34	; 0x22
 8006be4:	f040 8169 	bne.w	8006eba <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10f      	bne.n	8006c10 <I2C_Master_ADDR+0x54>
 8006bf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006bf4:	2b40      	cmp	r3, #64	; 0x40
 8006bf6:	d10b      	bne.n	8006c10 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	633b      	str	r3, [r7, #48]	; 0x30
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	e160      	b.n	8006ed2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d11d      	bne.n	8006c54 <I2C_Master_ADDR+0x98>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c20:	d118      	bne.n	8006c54 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c22:	2300      	movs	r3, #0
 8006c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c46:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	651a      	str	r2, [r3, #80]	; 0x50
 8006c52:	e13e      	b.n	8006ed2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d113      	bne.n	8006c86 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c5e:	2300      	movs	r3, #0
 8006c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	e115      	b.n	8006eb2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	f040 808a 	bne.w	8006da6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c98:	d137      	bne.n	8006d0a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb8:	d113      	bne.n	8006ce2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	e0e7      	b.n	8006eb2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	623b      	str	r3, [r7, #32]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	623b      	str	r3, [r7, #32]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	623b      	str	r3, [r7, #32]
 8006cf6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	e0d3      	b.n	8006eb2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d02e      	beq.n	8006d6e <I2C_Master_ADDR+0x1b2>
 8006d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d12:	2b20      	cmp	r3, #32
 8006d14:	d02b      	beq.n	8006d6e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d18:	2b12      	cmp	r3, #18
 8006d1a:	d102      	bne.n	8006d22 <I2C_Master_ADDR+0x166>
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d125      	bne.n	8006d6e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d00e      	beq.n	8006d46 <I2C_Master_ADDR+0x18a>
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d00b      	beq.n	8006d46 <I2C_Master_ADDR+0x18a>
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	2b10      	cmp	r3, #16
 8006d32:	d008      	beq.n	8006d46 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e007      	b.n	8006d56 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d54:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d56:	2300      	movs	r3, #0
 8006d58:	61fb      	str	r3, [r7, #28]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	61fb      	str	r3, [r7, #28]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	e0a1      	b.n	8006eb2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d7c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d7e:	2300      	movs	r3, #0
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	e085      	b.n	8006eb2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d14d      	bne.n	8006e4c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d016      	beq.n	8006de4 <I2C_Master_ADDR+0x228>
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d013      	beq.n	8006de4 <I2C_Master_ADDR+0x228>
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	2b10      	cmp	r3, #16
 8006dc0:	d010      	beq.n	8006de4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	e007      	b.n	8006df4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006df2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e02:	d117      	bne.n	8006e34 <I2C_Master_ADDR+0x278>
 8006e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e0a:	d00b      	beq.n	8006e24 <I2C_Master_ADDR+0x268>
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d008      	beq.n	8006e24 <I2C_Master_ADDR+0x268>
 8006e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d005      	beq.n	8006e24 <I2C_Master_ADDR+0x268>
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	2b10      	cmp	r3, #16
 8006e1c:	d002      	beq.n	8006e24 <I2C_Master_ADDR+0x268>
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d107      	bne.n	8006e34 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e32:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e34:	2300      	movs	r3, #0
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	e032      	b.n	8006eb2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e5a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e6a:	d117      	bne.n	8006e9c <I2C_Master_ADDR+0x2e0>
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e72:	d00b      	beq.n	8006e8c <I2C_Master_ADDR+0x2d0>
 8006e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d008      	beq.n	8006e8c <I2C_Master_ADDR+0x2d0>
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d005      	beq.n	8006e8c <I2C_Master_ADDR+0x2d0>
 8006e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e82:	2b10      	cmp	r3, #16
 8006e84:	d002      	beq.n	8006e8c <I2C_Master_ADDR+0x2d0>
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d107      	bne.n	8006e9c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e9a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	613b      	str	r3, [r7, #16]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	613b      	str	r3, [r7, #16]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	613b      	str	r3, [r7, #16]
 8006eb0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006eb8:	e00b      	b.n	8006ed2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	68fb      	ldr	r3, [r7, #12]
}
 8006ed0:	e7ff      	b.n	8006ed2 <I2C_Master_ADDR+0x316>
 8006ed2:	bf00      	nop
 8006ed4:	3744      	adds	r7, #68	; 0x44
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d02b      	beq.n	8006f50 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	781a      	ldrb	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d114      	bne.n	8006f50 <I2C_SlaveTransmit_TXE+0x72>
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	2b29      	cmp	r3, #41	; 0x29
 8006f2a:	d111      	bne.n	8006f50 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f3a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2221      	movs	r2, #33	; 0x21
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2228      	movs	r2, #40	; 0x28
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff fa04 	bl	8006358 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006f50:	bf00      	nop
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d011      	beq.n	8006f8e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	781a      	ldrb	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d02c      	beq.n	800700e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d114      	bne.n	800700e <I2C_SlaveReceive_RXNE+0x74>
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8006fe8:	d111      	bne.n	800700e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2222      	movs	r2, #34	; 0x22
 8006ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2228      	movs	r2, #40	; 0x28
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff f9af 	bl	800636c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800700e:	bf00      	nop
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d012      	beq.n	800704e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691a      	ldr	r2, [r3, #16]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706e:	b2db      	uxtb	r3, r3
 8007070:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007074:	2b28      	cmp	r3, #40	; 0x28
 8007076:	d127      	bne.n	80070c8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007086:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	089b      	lsrs	r3, r3, #2
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007094:	2301      	movs	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	09db      	lsrs	r3, r3, #7
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d103      	bne.n	80070ac <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	81bb      	strh	r3, [r7, #12]
 80070aa:	e002      	b.n	80070b2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80070ba:	89ba      	ldrh	r2, [r7, #12]
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7ff f95d 	bl	8006380 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80070c6:	e008      	b.n	80070da <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0202 	mvn.w	r2, #2
 80070d0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007102:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007104:	2300      	movs	r3, #0
 8007106:	60bb      	str	r3, [r7, #8]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	60bb      	str	r3, [r7, #8]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0201 	orr.w	r2, r2, #1
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007130:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800713c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007140:	d172      	bne.n	8007228 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	2b22      	cmp	r3, #34	; 0x22
 8007146:	d002      	beq.n	800714e <I2C_Slave_STOPF+0x6a>
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	2b2a      	cmp	r3, #42	; 0x2a
 800714c:	d135      	bne.n	80071ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	b29a      	uxth	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007160:	b29b      	uxth	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	f043 0204 	orr.w	r2, r3, #4
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007180:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe f91a 	bl	80053c0 <HAL_DMA_GetState>
 800718c:	4603      	mov	r3, r0
 800718e:	2b01      	cmp	r3, #1
 8007190:	d049      	beq.n	8007226 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007196:	4a69      	ldr	r2, [pc, #420]	; (800733c <I2C_Slave_STOPF+0x258>)
 8007198:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fd ff62 	bl	8005068 <HAL_DMA_Abort_IT>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d03d      	beq.n	8007226 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071b8:	e035      	b.n	8007226 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	f043 0204 	orr.w	r2, r3, #4
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fe f8e4 	bl	80053c0 <HAL_DMA_GetState>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d014      	beq.n	8007228 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007202:	4a4e      	ldr	r2, [pc, #312]	; (800733c <I2C_Slave_STOPF+0x258>)
 8007204:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720a:	4618      	mov	r0, r3
 800720c:	f7fd ff2c 	bl	8005068 <HAL_DMA_Abort_IT>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d008      	beq.n	8007228 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007220:	4610      	mov	r0, r2
 8007222:	4798      	blx	r3
 8007224:	e000      	b.n	8007228 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007226:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d03e      	beq.n	80072b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b04      	cmp	r3, #4
 800723e:	d112      	bne.n	8007266 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	691a      	ldr	r2, [r3, #16]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b29a      	uxth	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007270:	2b40      	cmp	r3, #64	; 0x40
 8007272:	d112      	bne.n	800729a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a8:	f043 0204 	orr.w	r2, r3, #4
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f8b3 	bl	8007424 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80072be:	e039      	b.n	8007334 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	2b2a      	cmp	r3, #42	; 0x2a
 80072c4:	d109      	bne.n	80072da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2228      	movs	r2, #40	; 0x28
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff f849 	bl	800636c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b28      	cmp	r3, #40	; 0x28
 80072e4:	d111      	bne.n	800730a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a15      	ldr	r2, [pc, #84]	; (8007340 <I2C_Slave_STOPF+0x25c>)
 80072ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff f84a 	bl	800639c <HAL_I2C_ListenCpltCallback>
}
 8007308:	e014      	b.n	8007334 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	2b22      	cmp	r3, #34	; 0x22
 8007310:	d002      	beq.n	8007318 <I2C_Slave_STOPF+0x234>
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	2b22      	cmp	r3, #34	; 0x22
 8007316:	d10d      	bne.n	8007334 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2220      	movs	r2, #32
 8007322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff f81c 	bl	800636c <HAL_I2C_SlaveRxCpltCallback>
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	0800778d 	.word	0x0800778d
 8007340:	ffff0000 	.word	0xffff0000

08007344 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007352:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b08      	cmp	r3, #8
 800735e:	d002      	beq.n	8007366 <I2C_Slave_AF+0x22>
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b20      	cmp	r3, #32
 8007364:	d129      	bne.n	80073ba <I2C_Slave_AF+0x76>
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	2b28      	cmp	r3, #40	; 0x28
 800736a:	d126      	bne.n	80073ba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a2c      	ldr	r2, [pc, #176]	; (8007420 <I2C_Slave_AF+0xdc>)
 8007370:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007380:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800738a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7fe fff2 	bl	800639c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80073b8:	e02e      	b.n	8007418 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
 80073bc:	2b21      	cmp	r3, #33	; 0x21
 80073be:	d126      	bne.n	800740e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a17      	ldr	r2, [pc, #92]	; (8007420 <I2C_Slave_AF+0xdc>)
 80073c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2221      	movs	r2, #33	; 0x21
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073ea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007404:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fe ffa6 	bl	8006358 <HAL_I2C_SlaveTxCpltCallback>
}
 800740c:	e004      	b.n	8007418 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007416:	615a      	str	r2, [r3, #20]
}
 8007418:	bf00      	nop
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	ffff0000 	.word	0xffff0000

08007424 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007432:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800743a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	2b10      	cmp	r3, #16
 8007440:	d002      	beq.n	8007448 <I2C_ITError+0x24>
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	2b40      	cmp	r3, #64	; 0x40
 8007446:	d10a      	bne.n	800745e <I2C_ITError+0x3a>
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	2b22      	cmp	r3, #34	; 0x22
 800744c:	d107      	bne.n	800745e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800745c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007464:	2b28      	cmp	r3, #40	; 0x28
 8007466:	d107      	bne.n	8007478 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2228      	movs	r2, #40	; 0x28
 8007472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007476:	e015      	b.n	80074a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007486:	d00a      	beq.n	800749e <I2C_ITError+0x7a>
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	2b60      	cmp	r3, #96	; 0x60
 800748c:	d007      	beq.n	800749e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b2:	d162      	bne.n	800757a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d020      	beq.n	8007514 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d6:	4a6a      	ldr	r2, [pc, #424]	; (8007680 <I2C_ITError+0x25c>)
 80074d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fd fdc2 	bl	8005068 <HAL_DMA_Abort_IT>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 8089 	beq.w	80075fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0201 	bic.w	r2, r2, #1
 80074fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800750e:	4610      	mov	r0, r2
 8007510:	4798      	blx	r3
 8007512:	e074      	b.n	80075fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007518:	4a59      	ldr	r2, [pc, #356]	; (8007680 <I2C_ITError+0x25c>)
 800751a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007520:	4618      	mov	r0, r3
 8007522:	f7fd fda1 	bl	8005068 <HAL_DMA_Abort_IT>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d068      	beq.n	80075fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007536:	2b40      	cmp	r3, #64	; 0x40
 8007538:	d10b      	bne.n	8007552 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	691a      	ldr	r2, [r3, #16]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	b2d2      	uxtb	r2, r2
 8007546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0201 	bic.w	r2, r2, #1
 8007560:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2220      	movs	r2, #32
 8007566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007574:	4610      	mov	r0, r2
 8007576:	4798      	blx	r3
 8007578:	e041      	b.n	80075fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b60      	cmp	r3, #96	; 0x60
 8007584:	d125      	bne.n	80075d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2220      	movs	r2, #32
 800758a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759e:	2b40      	cmp	r3, #64	; 0x40
 80075a0:	d10b      	bne.n	80075ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	691a      	ldr	r2, [r3, #16]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0201 	bic.w	r2, r2, #1
 80075c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fe ff0e 	bl	80063ec <HAL_I2C_AbortCpltCallback>
 80075d0:	e015      	b.n	80075fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075dc:	2b40      	cmp	r3, #64	; 0x40
 80075de:	d10b      	bne.n	80075f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	691a      	ldr	r2, [r3, #16]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	b2d2      	uxtb	r2, r2
 80075ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fe feed 	bl	80063d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10e      	bne.n	800762c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007614:	2b00      	cmp	r3, #0
 8007616:	d109      	bne.n	800762c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800761e:	2b00      	cmp	r3, #0
 8007620:	d104      	bne.n	800762c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800763a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007642:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b04      	cmp	r3, #4
 800764e:	d113      	bne.n	8007678 <I2C_ITError+0x254>
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	2b28      	cmp	r3, #40	; 0x28
 8007654:	d110      	bne.n	8007678 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a0a      	ldr	r2, [pc, #40]	; (8007684 <I2C_ITError+0x260>)
 800765a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fe fe92 	bl	800639c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007678:	bf00      	nop
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	0800778d 	.word	0x0800778d
 8007684:	ffff0000 	.word	0xffff0000

08007688 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af02      	add	r7, sp, #8
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	607a      	str	r2, [r7, #4]
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	460b      	mov	r3, r1
 8007696:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d006      	beq.n	80076b2 <I2C_MasterRequestWrite+0x2a>
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d003      	beq.n	80076b2 <I2C_MasterRequestWrite+0x2a>
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076b0:	d108      	bne.n	80076c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	e00b      	b.n	80076dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	2b12      	cmp	r3, #18
 80076ca:	d107      	bne.n	80076dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 f8f7 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00d      	beq.n	8007710 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007702:	d103      	bne.n	800770c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800770a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e035      	b.n	800777c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007718:	d108      	bne.n	800772c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800771a:	897b      	ldrh	r3, [r7, #10]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	461a      	mov	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007728:	611a      	str	r2, [r3, #16]
 800772a:	e01b      	b.n	8007764 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800772c:	897b      	ldrh	r3, [r7, #10]
 800772e:	11db      	asrs	r3, r3, #7
 8007730:	b2db      	uxtb	r3, r3
 8007732:	f003 0306 	and.w	r3, r3, #6
 8007736:	b2db      	uxtb	r3, r3
 8007738:	f063 030f 	orn	r3, r3, #15
 800773c:	b2da      	uxtb	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	490e      	ldr	r1, [pc, #56]	; (8007784 <I2C_MasterRequestWrite+0xfc>)
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 f91d 	bl	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e010      	b.n	800777c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800775a:	897b      	ldrh	r3, [r7, #10]
 800775c:	b2da      	uxtb	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	4907      	ldr	r1, [pc, #28]	; (8007788 <I2C_MasterRequestWrite+0x100>)
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f90d 	bl	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e000      	b.n	800777c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	00010008 	.word	0x00010008
 8007788:	00010002 	.word	0x00010002

0800778c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80077a6:	4b4b      	ldr	r3, [pc, #300]	; (80078d4 <I2C_DMAAbort+0x148>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	08db      	lsrs	r3, r3, #3
 80077ac:	4a4a      	ldr	r2, [pc, #296]	; (80078d8 <I2C_DMAAbort+0x14c>)
 80077ae:	fba2 2303 	umull	r2, r3, r2, r3
 80077b2:	0a1a      	lsrs	r2, r3, #8
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	00da      	lsls	r2, r3, #3
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d106      	bne.n	80077d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	f043 0220 	orr.w	r2, r3, #32
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80077d2:	e00a      	b.n	80077ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077e8:	d0ea      	beq.n	80077c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f6:	2200      	movs	r2, #0
 80077f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	2200      	movs	r2, #0
 8007808:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007818:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2200      	movs	r2, #0
 800781e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782c:	2200      	movs	r2, #0
 800782e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783c:	2200      	movs	r2, #0
 800783e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0201 	bic.w	r2, r2, #1
 800784e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b60      	cmp	r3, #96	; 0x60
 800785a:	d10e      	bne.n	800787a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2220      	movs	r2, #32
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2200      	movs	r2, #0
 8007870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007872:	6978      	ldr	r0, [r7, #20]
 8007874:	f7fe fdba 	bl	80063ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007878:	e027      	b.n	80078ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800787a:	7cfb      	ldrb	r3, [r7, #19]
 800787c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007880:	2b28      	cmp	r3, #40	; 0x28
 8007882:	d117      	bne.n	80078b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0201 	orr.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2200      	movs	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2228      	movs	r2, #40	; 0x28
 80078ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80078b2:	e007      	b.n	80078c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80078c4:	6978      	ldr	r0, [r7, #20]
 80078c6:	f7fe fd87 	bl	80063d8 <HAL_I2C_ErrorCallback>
}
 80078ca:	bf00      	nop
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20000018 	.word	0x20000018
 80078d8:	14f8b589 	.word	0x14f8b589

080078dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	4613      	mov	r3, r2
 80078ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078ec:	e025      	b.n	800793a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f4:	d021      	beq.n	800793a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078f6:	f7fd f8ff 	bl	8004af8 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d302      	bcc.n	800790c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d116      	bne.n	800793a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2220      	movs	r2, #32
 8007916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	f043 0220 	orr.w	r2, r3, #32
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e023      	b.n	8007982 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	0c1b      	lsrs	r3, r3, #16
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b01      	cmp	r3, #1
 8007942:	d10d      	bne.n	8007960 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	43da      	mvns	r2, r3
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	4013      	ands	r3, r2
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	bf0c      	ite	eq
 8007956:	2301      	moveq	r3, #1
 8007958:	2300      	movne	r3, #0
 800795a:	b2db      	uxtb	r3, r3
 800795c:	461a      	mov	r2, r3
 800795e:	e00c      	b.n	800797a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	43da      	mvns	r2, r3
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4013      	ands	r3, r2
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	bf0c      	ite	eq
 8007972:	2301      	moveq	r3, #1
 8007974:	2300      	movne	r3, #0
 8007976:	b2db      	uxtb	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	429a      	cmp	r2, r3
 800797e:	d0b6      	beq.n	80078ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	607a      	str	r2, [r7, #4]
 8007996:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007998:	e051      	b.n	8007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079a8:	d123      	bne.n	80079f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	f043 0204 	orr.w	r2, r3, #4
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e046      	b.n	8007a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f8:	d021      	beq.n	8007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079fa:	f7fd f87d 	bl	8004af8 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d302      	bcc.n	8007a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d116      	bne.n	8007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f043 0220 	orr.w	r2, r3, #32
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e020      	b.n	8007a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	0c1b      	lsrs	r3, r3, #16
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d10c      	bne.n	8007a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	43da      	mvns	r2, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4013      	ands	r3, r2
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bf14      	ite	ne
 8007a5a:	2301      	movne	r3, #1
 8007a5c:	2300      	moveq	r3, #0
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	e00b      	b.n	8007a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	43da      	mvns	r2, r3
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bf14      	ite	ne
 8007a74:	2301      	movne	r3, #1
 8007a76:	2300      	moveq	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d18d      	bne.n	800799a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a94:	e02d      	b.n	8007af2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 f8aa 	bl	8007bf0 <I2C_IsAcknowledgeFailed>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e02d      	b.n	8007b02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d021      	beq.n	8007af2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aae:	f7fd f823 	bl	8004af8 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d302      	bcc.n	8007ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d116      	bne.n	8007af2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	f043 0220 	orr.w	r2, r3, #32
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e007      	b.n	8007b02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afc:	2b80      	cmp	r3, #128	; 0x80
 8007afe:	d1ca      	bne.n	8007a96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b16:	e02d      	b.n	8007b74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 f869 	bl	8007bf0 <I2C_IsAcknowledgeFailed>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e02d      	b.n	8007b84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2e:	d021      	beq.n	8007b74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b30:	f7fc ffe2 	bl	8004af8 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d302      	bcc.n	8007b46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d116      	bne.n	8007b74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	f043 0220 	orr.w	r2, r3, #32
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e007      	b.n	8007b84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d1ca      	bne.n	8007b18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b98:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	08db      	lsrs	r3, r3, #3
 8007b9e:	4a13      	ldr	r2, [pc, #76]	; (8007bec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba4:	0a1a      	lsrs	r2, r3, #8
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d107      	bne.n	8007bca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbe:	f043 0220 	orr.w	r2, r3, #32
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e008      	b.n	8007bdc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd8:	d0e9      	beq.n	8007bae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	20000018 	.word	0x20000018
 8007bec:	14f8b589 	.word	0x14f8b589

08007bf0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c06:	d11b      	bne.n	8007c40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2c:	f043 0204 	orr.w	r2, r3, #4
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e000      	b.n	8007c42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007c5e:	d103      	bne.n	8007c68 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007c66:	e007      	b.n	8007c78 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007c70:	d102      	bne.n	8007c78 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2208      	movs	r2, #8
 8007c76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e267      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d075      	beq.n	8007d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ca2:	4b88      	ldr	r3, [pc, #544]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f003 030c 	and.w	r3, r3, #12
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d00c      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cae:	4b85      	ldr	r3, [pc, #532]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cb6:	2b08      	cmp	r3, #8
 8007cb8:	d112      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cba:	4b82      	ldr	r3, [pc, #520]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cc6:	d10b      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cc8:	4b7e      	ldr	r3, [pc, #504]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d05b      	beq.n	8007d8c <HAL_RCC_OscConfig+0x108>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d157      	bne.n	8007d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e242      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce8:	d106      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x74>
 8007cea:	4b76      	ldr	r3, [pc, #472]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a75      	ldr	r2, [pc, #468]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	e01d      	b.n	8007d34 <HAL_RCC_OscConfig+0xb0>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d00:	d10c      	bne.n	8007d1c <HAL_RCC_OscConfig+0x98>
 8007d02:	4b70      	ldr	r3, [pc, #448]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a6f      	ldr	r2, [pc, #444]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	4b6d      	ldr	r3, [pc, #436]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a6c      	ldr	r2, [pc, #432]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	e00b      	b.n	8007d34 <HAL_RCC_OscConfig+0xb0>
 8007d1c:	4b69      	ldr	r3, [pc, #420]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a68      	ldr	r2, [pc, #416]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	4b66      	ldr	r3, [pc, #408]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a65      	ldr	r2, [pc, #404]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d013      	beq.n	8007d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d3c:	f7fc fedc 	bl	8004af8 <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d44:	f7fc fed8 	bl	8004af8 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b64      	cmp	r3, #100	; 0x64
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e207      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d56:	4b5b      	ldr	r3, [pc, #364]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0f0      	beq.n	8007d44 <HAL_RCC_OscConfig+0xc0>
 8007d62:	e014      	b.n	8007d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d64:	f7fc fec8 	bl	8004af8 <HAL_GetTick>
 8007d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d6a:	e008      	b.n	8007d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d6c:	f7fc fec4 	bl	8004af8 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2b64      	cmp	r3, #100	; 0x64
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e1f3      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d7e:	4b51      	ldr	r3, [pc, #324]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1f0      	bne.n	8007d6c <HAL_RCC_OscConfig+0xe8>
 8007d8a:	e000      	b.n	8007d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d063      	beq.n	8007e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d9a:	4b4a      	ldr	r3, [pc, #296]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 030c 	and.w	r3, r3, #12
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00b      	beq.n	8007dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007da6:	4b47      	ldr	r3, [pc, #284]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dae:	2b08      	cmp	r3, #8
 8007db0:	d11c      	bne.n	8007dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007db2:	4b44      	ldr	r3, [pc, #272]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d116      	bne.n	8007dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dbe:	4b41      	ldr	r3, [pc, #260]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d005      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x152>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d001      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e1c7      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dd6:	4b3b      	ldr	r3, [pc, #236]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	4937      	ldr	r1, [pc, #220]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dea:	e03a      	b.n	8007e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d020      	beq.n	8007e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007df4:	4b34      	ldr	r3, [pc, #208]	; (8007ec8 <HAL_RCC_OscConfig+0x244>)
 8007df6:	2201      	movs	r2, #1
 8007df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfa:	f7fc fe7d 	bl	8004af8 <HAL_GetTick>
 8007dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e00:	e008      	b.n	8007e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e02:	f7fc fe79 	bl	8004af8 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d901      	bls.n	8007e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e1a8      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e14:	4b2b      	ldr	r3, [pc, #172]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d0f0      	beq.n	8007e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e20:	4b28      	ldr	r3, [pc, #160]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	4925      	ldr	r1, [pc, #148]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	600b      	str	r3, [r1, #0]
 8007e34:	e015      	b.n	8007e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e36:	4b24      	ldr	r3, [pc, #144]	; (8007ec8 <HAL_RCC_OscConfig+0x244>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e3c:	f7fc fe5c 	bl	8004af8 <HAL_GetTick>
 8007e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e42:	e008      	b.n	8007e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e44:	f7fc fe58 	bl	8004af8 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e187      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e56:	4b1b      	ldr	r3, [pc, #108]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1f0      	bne.n	8007e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0308 	and.w	r3, r3, #8
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d036      	beq.n	8007edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d016      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e76:	4b15      	ldr	r3, [pc, #84]	; (8007ecc <HAL_RCC_OscConfig+0x248>)
 8007e78:	2201      	movs	r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e7c:	f7fc fe3c 	bl	8004af8 <HAL_GetTick>
 8007e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e82:	e008      	b.n	8007e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e84:	f7fc fe38 	bl	8004af8 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e167      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e96:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <HAL_RCC_OscConfig+0x240>)
 8007e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e9a:	f003 0302 	and.w	r3, r3, #2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0f0      	beq.n	8007e84 <HAL_RCC_OscConfig+0x200>
 8007ea2:	e01b      	b.n	8007edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ea4:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <HAL_RCC_OscConfig+0x248>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eaa:	f7fc fe25 	bl	8004af8 <HAL_GetTick>
 8007eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007eb0:	e00e      	b.n	8007ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007eb2:	f7fc fe21 	bl	8004af8 <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d907      	bls.n	8007ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e150      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
 8007ec4:	40023800 	.word	0x40023800
 8007ec8:	42470000 	.word	0x42470000
 8007ecc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ed0:	4b88      	ldr	r3, [pc, #544]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1ea      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 8097 	beq.w	8008018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eee:	4b81      	ldr	r3, [pc, #516]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10f      	bne.n	8007f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007efa:	2300      	movs	r3, #0
 8007efc:	60bb      	str	r3, [r7, #8]
 8007efe:	4b7d      	ldr	r3, [pc, #500]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	4a7c      	ldr	r2, [pc, #496]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f08:	6413      	str	r3, [r2, #64]	; 0x40
 8007f0a:	4b7a      	ldr	r3, [pc, #488]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f12:	60bb      	str	r3, [r7, #8]
 8007f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f16:	2301      	movs	r3, #1
 8007f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f1a:	4b77      	ldr	r3, [pc, #476]	; (80080f8 <HAL_RCC_OscConfig+0x474>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d118      	bne.n	8007f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f26:	4b74      	ldr	r3, [pc, #464]	; (80080f8 <HAL_RCC_OscConfig+0x474>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a73      	ldr	r2, [pc, #460]	; (80080f8 <HAL_RCC_OscConfig+0x474>)
 8007f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f32:	f7fc fde1 	bl	8004af8 <HAL_GetTick>
 8007f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f38:	e008      	b.n	8007f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f3a:	f7fc fddd 	bl	8004af8 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e10c      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f4c:	4b6a      	ldr	r3, [pc, #424]	; (80080f8 <HAL_RCC_OscConfig+0x474>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d0f0      	beq.n	8007f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d106      	bne.n	8007f6e <HAL_RCC_OscConfig+0x2ea>
 8007f60:	4b64      	ldr	r3, [pc, #400]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f64:	4a63      	ldr	r2, [pc, #396]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007f66:	f043 0301 	orr.w	r3, r3, #1
 8007f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f6c:	e01c      	b.n	8007fa8 <HAL_RCC_OscConfig+0x324>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	d10c      	bne.n	8007f90 <HAL_RCC_OscConfig+0x30c>
 8007f76:	4b5f      	ldr	r3, [pc, #380]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7a:	4a5e      	ldr	r2, [pc, #376]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007f7c:	f043 0304 	orr.w	r3, r3, #4
 8007f80:	6713      	str	r3, [r2, #112]	; 0x70
 8007f82:	4b5c      	ldr	r3, [pc, #368]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f86:	4a5b      	ldr	r2, [pc, #364]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007f88:	f043 0301 	orr.w	r3, r3, #1
 8007f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f8e:	e00b      	b.n	8007fa8 <HAL_RCC_OscConfig+0x324>
 8007f90:	4b58      	ldr	r3, [pc, #352]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f94:	4a57      	ldr	r2, [pc, #348]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007f96:	f023 0301 	bic.w	r3, r3, #1
 8007f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f9c:	4b55      	ldr	r3, [pc, #340]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa0:	4a54      	ldr	r2, [pc, #336]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007fa2:	f023 0304 	bic.w	r3, r3, #4
 8007fa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d015      	beq.n	8007fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fb0:	f7fc fda2 	bl	8004af8 <HAL_GetTick>
 8007fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fb6:	e00a      	b.n	8007fce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fb8:	f7fc fd9e 	bl	8004af8 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e0cb      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fce:	4b49      	ldr	r3, [pc, #292]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0ee      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x334>
 8007fda:	e014      	b.n	8008006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fdc:	f7fc fd8c 	bl	8004af8 <HAL_GetTick>
 8007fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fe2:	e00a      	b.n	8007ffa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fe4:	f7fc fd88 	bl	8004af8 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e0b5      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ffa:	4b3e      	ldr	r3, [pc, #248]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8007ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1ee      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d105      	bne.n	8008018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800800c:	4b39      	ldr	r3, [pc, #228]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 800800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008010:	4a38      	ldr	r2, [pc, #224]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8008012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008016:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 80a1 	beq.w	8008164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008022:	4b34      	ldr	r3, [pc, #208]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 030c 	and.w	r3, r3, #12
 800802a:	2b08      	cmp	r3, #8
 800802c:	d05c      	beq.n	80080e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	2b02      	cmp	r3, #2
 8008034:	d141      	bne.n	80080ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008036:	4b31      	ldr	r3, [pc, #196]	; (80080fc <HAL_RCC_OscConfig+0x478>)
 8008038:	2200      	movs	r2, #0
 800803a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800803c:	f7fc fd5c 	bl	8004af8 <HAL_GetTick>
 8008040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008042:	e008      	b.n	8008056 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008044:	f7fc fd58 	bl	8004af8 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e087      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008056:	4b27      	ldr	r3, [pc, #156]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1f0      	bne.n	8008044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69da      	ldr	r2, [r3, #28]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	019b      	lsls	r3, r3, #6
 8008072:	431a      	orrs	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	085b      	lsrs	r3, r3, #1
 800807a:	3b01      	subs	r3, #1
 800807c:	041b      	lsls	r3, r3, #16
 800807e:	431a      	orrs	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	061b      	lsls	r3, r3, #24
 8008086:	491b      	ldr	r1, [pc, #108]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 8008088:	4313      	orrs	r3, r2
 800808a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800808c:	4b1b      	ldr	r3, [pc, #108]	; (80080fc <HAL_RCC_OscConfig+0x478>)
 800808e:	2201      	movs	r2, #1
 8008090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008092:	f7fc fd31 	bl	8004af8 <HAL_GetTick>
 8008096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008098:	e008      	b.n	80080ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800809a:	f7fc fd2d 	bl	8004af8 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d901      	bls.n	80080ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e05c      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080ac:	4b11      	ldr	r3, [pc, #68]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0f0      	beq.n	800809a <HAL_RCC_OscConfig+0x416>
 80080b8:	e054      	b.n	8008164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ba:	4b10      	ldr	r3, [pc, #64]	; (80080fc <HAL_RCC_OscConfig+0x478>)
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c0:	f7fc fd1a 	bl	8004af8 <HAL_GetTick>
 80080c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080c6:	e008      	b.n	80080da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080c8:	f7fc fd16 	bl	8004af8 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d901      	bls.n	80080da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e045      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080da:	4b06      	ldr	r3, [pc, #24]	; (80080f4 <HAL_RCC_OscConfig+0x470>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1f0      	bne.n	80080c8 <HAL_RCC_OscConfig+0x444>
 80080e6:	e03d      	b.n	8008164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d107      	bne.n	8008100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e038      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
 80080f4:	40023800 	.word	0x40023800
 80080f8:	40007000 	.word	0x40007000
 80080fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008100:	4b1b      	ldr	r3, [pc, #108]	; (8008170 <HAL_RCC_OscConfig+0x4ec>)
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d028      	beq.n	8008160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008118:	429a      	cmp	r2, r3
 800811a:	d121      	bne.n	8008160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008126:	429a      	cmp	r2, r3
 8008128:	d11a      	bne.n	8008160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008130:	4013      	ands	r3, r2
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008138:	4293      	cmp	r3, r2
 800813a:	d111      	bne.n	8008160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	085b      	lsrs	r3, r3, #1
 8008148:	3b01      	subs	r3, #1
 800814a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800814c:	429a      	cmp	r2, r3
 800814e:	d107      	bne.n	8008160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800815c:	429a      	cmp	r2, r3
 800815e:	d001      	beq.n	8008164 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	40023800 	.word	0x40023800

08008174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e0cc      	b.n	8008322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008188:	4b68      	ldr	r3, [pc, #416]	; (800832c <HAL_RCC_ClockConfig+0x1b8>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0307 	and.w	r3, r3, #7
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	429a      	cmp	r2, r3
 8008194:	d90c      	bls.n	80081b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008196:	4b65      	ldr	r3, [pc, #404]	; (800832c <HAL_RCC_ClockConfig+0x1b8>)
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	b2d2      	uxtb	r2, r2
 800819c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800819e:	4b63      	ldr	r3, [pc, #396]	; (800832c <HAL_RCC_ClockConfig+0x1b8>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d001      	beq.n	80081b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e0b8      	b.n	8008322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0302 	and.w	r3, r3, #2
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d020      	beq.n	80081fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0304 	and.w	r3, r3, #4
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d005      	beq.n	80081d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081c8:	4b59      	ldr	r3, [pc, #356]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	4a58      	ldr	r2, [pc, #352]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 80081ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80081d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0308 	and.w	r3, r3, #8
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081e0:	4b53      	ldr	r3, [pc, #332]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	4a52      	ldr	r2, [pc, #328]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 80081e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80081ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081ec:	4b50      	ldr	r3, [pc, #320]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	494d      	ldr	r1, [pc, #308]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b00      	cmp	r3, #0
 8008208:	d044      	beq.n	8008294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d107      	bne.n	8008222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008212:	4b47      	ldr	r3, [pc, #284]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d119      	bne.n	8008252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e07f      	b.n	8008322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	2b02      	cmp	r3, #2
 8008228:	d003      	beq.n	8008232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800822e:	2b03      	cmp	r3, #3
 8008230:	d107      	bne.n	8008242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008232:	4b3f      	ldr	r3, [pc, #252]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d109      	bne.n	8008252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e06f      	b.n	8008322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008242:	4b3b      	ldr	r3, [pc, #236]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e067      	b.n	8008322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008252:	4b37      	ldr	r3, [pc, #220]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f023 0203 	bic.w	r2, r3, #3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	4934      	ldr	r1, [pc, #208]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 8008260:	4313      	orrs	r3, r2
 8008262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008264:	f7fc fc48 	bl	8004af8 <HAL_GetTick>
 8008268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800826a:	e00a      	b.n	8008282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800826c:	f7fc fc44 	bl	8004af8 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	f241 3288 	movw	r2, #5000	; 0x1388
 800827a:	4293      	cmp	r3, r2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e04f      	b.n	8008322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008282:	4b2b      	ldr	r3, [pc, #172]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 020c 	and.w	r2, r3, #12
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	429a      	cmp	r2, r3
 8008292:	d1eb      	bne.n	800826c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008294:	4b25      	ldr	r3, [pc, #148]	; (800832c <HAL_RCC_ClockConfig+0x1b8>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0307 	and.w	r3, r3, #7
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d20c      	bcs.n	80082bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082a2:	4b22      	ldr	r3, [pc, #136]	; (800832c <HAL_RCC_ClockConfig+0x1b8>)
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	b2d2      	uxtb	r2, r2
 80082a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082aa:	4b20      	ldr	r3, [pc, #128]	; (800832c <HAL_RCC_ClockConfig+0x1b8>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d001      	beq.n	80082bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e032      	b.n	8008322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d008      	beq.n	80082da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082c8:	4b19      	ldr	r3, [pc, #100]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	4916      	ldr	r1, [pc, #88]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0308 	and.w	r3, r3, #8
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d009      	beq.n	80082fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082e6:	4b12      	ldr	r3, [pc, #72]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	490e      	ldr	r1, [pc, #56]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80082fa:	f000 f821 	bl	8008340 <HAL_RCC_GetSysClockFreq>
 80082fe:	4602      	mov	r2, r0
 8008300:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <HAL_RCC_ClockConfig+0x1bc>)
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	091b      	lsrs	r3, r3, #4
 8008306:	f003 030f 	and.w	r3, r3, #15
 800830a:	490a      	ldr	r1, [pc, #40]	; (8008334 <HAL_RCC_ClockConfig+0x1c0>)
 800830c:	5ccb      	ldrb	r3, [r1, r3]
 800830e:	fa22 f303 	lsr.w	r3, r2, r3
 8008312:	4a09      	ldr	r2, [pc, #36]	; (8008338 <HAL_RCC_ClockConfig+0x1c4>)
 8008314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <HAL_RCC_ClockConfig+0x1c8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4618      	mov	r0, r3
 800831c:	f7fc fba8 	bl	8004a70 <HAL_InitTick>

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	40023c00 	.word	0x40023c00
 8008330:	40023800 	.word	0x40023800
 8008334:	0800ac28 	.word	0x0800ac28
 8008338:	20000018 	.word	0x20000018
 800833c:	2000001c 	.word	0x2000001c

08008340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008344:	b094      	sub	sp, #80	; 0x50
 8008346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	647b      	str	r3, [r7, #68]	; 0x44
 800834c:	2300      	movs	r3, #0
 800834e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008350:	2300      	movs	r3, #0
 8008352:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008358:	4b79      	ldr	r3, [pc, #484]	; (8008540 <HAL_RCC_GetSysClockFreq+0x200>)
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f003 030c 	and.w	r3, r3, #12
 8008360:	2b08      	cmp	r3, #8
 8008362:	d00d      	beq.n	8008380 <HAL_RCC_GetSysClockFreq+0x40>
 8008364:	2b08      	cmp	r3, #8
 8008366:	f200 80e1 	bhi.w	800852c <HAL_RCC_GetSysClockFreq+0x1ec>
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <HAL_RCC_GetSysClockFreq+0x34>
 800836e:	2b04      	cmp	r3, #4
 8008370:	d003      	beq.n	800837a <HAL_RCC_GetSysClockFreq+0x3a>
 8008372:	e0db      	b.n	800852c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008374:	4b73      	ldr	r3, [pc, #460]	; (8008544 <HAL_RCC_GetSysClockFreq+0x204>)
 8008376:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008378:	e0db      	b.n	8008532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800837a:	4b73      	ldr	r3, [pc, #460]	; (8008548 <HAL_RCC_GetSysClockFreq+0x208>)
 800837c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800837e:	e0d8      	b.n	8008532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008380:	4b6f      	ldr	r3, [pc, #444]	; (8008540 <HAL_RCC_GetSysClockFreq+0x200>)
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008388:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800838a:	4b6d      	ldr	r3, [pc, #436]	; (8008540 <HAL_RCC_GetSysClockFreq+0x200>)
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d063      	beq.n	800845e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008396:	4b6a      	ldr	r3, [pc, #424]	; (8008540 <HAL_RCC_GetSysClockFreq+0x200>)
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	099b      	lsrs	r3, r3, #6
 800839c:	2200      	movs	r2, #0
 800839e:	63bb      	str	r3, [r7, #56]	; 0x38
 80083a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a8:	633b      	str	r3, [r7, #48]	; 0x30
 80083aa:	2300      	movs	r3, #0
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34
 80083ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80083b2:	4622      	mov	r2, r4
 80083b4:	462b      	mov	r3, r5
 80083b6:	f04f 0000 	mov.w	r0, #0
 80083ba:	f04f 0100 	mov.w	r1, #0
 80083be:	0159      	lsls	r1, r3, #5
 80083c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083c4:	0150      	lsls	r0, r2, #5
 80083c6:	4602      	mov	r2, r0
 80083c8:	460b      	mov	r3, r1
 80083ca:	4621      	mov	r1, r4
 80083cc:	1a51      	subs	r1, r2, r1
 80083ce:	6139      	str	r1, [r7, #16]
 80083d0:	4629      	mov	r1, r5
 80083d2:	eb63 0301 	sbc.w	r3, r3, r1
 80083d6:	617b      	str	r3, [r7, #20]
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	f04f 0300 	mov.w	r3, #0
 80083e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083e4:	4659      	mov	r1, fp
 80083e6:	018b      	lsls	r3, r1, #6
 80083e8:	4651      	mov	r1, sl
 80083ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80083ee:	4651      	mov	r1, sl
 80083f0:	018a      	lsls	r2, r1, #6
 80083f2:	4651      	mov	r1, sl
 80083f4:	ebb2 0801 	subs.w	r8, r2, r1
 80083f8:	4659      	mov	r1, fp
 80083fa:	eb63 0901 	sbc.w	r9, r3, r1
 80083fe:	f04f 0200 	mov.w	r2, #0
 8008402:	f04f 0300 	mov.w	r3, #0
 8008406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800840a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800840e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008412:	4690      	mov	r8, r2
 8008414:	4699      	mov	r9, r3
 8008416:	4623      	mov	r3, r4
 8008418:	eb18 0303 	adds.w	r3, r8, r3
 800841c:	60bb      	str	r3, [r7, #8]
 800841e:	462b      	mov	r3, r5
 8008420:	eb49 0303 	adc.w	r3, r9, r3
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	f04f 0200 	mov.w	r2, #0
 800842a:	f04f 0300 	mov.w	r3, #0
 800842e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008432:	4629      	mov	r1, r5
 8008434:	024b      	lsls	r3, r1, #9
 8008436:	4621      	mov	r1, r4
 8008438:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800843c:	4621      	mov	r1, r4
 800843e:	024a      	lsls	r2, r1, #9
 8008440:	4610      	mov	r0, r2
 8008442:	4619      	mov	r1, r3
 8008444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008446:	2200      	movs	r2, #0
 8008448:	62bb      	str	r3, [r7, #40]	; 0x28
 800844a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800844c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008450:	f7f8 fcac 	bl	8000dac <__aeabi_uldivmod>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4613      	mov	r3, r2
 800845a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800845c:	e058      	b.n	8008510 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800845e:	4b38      	ldr	r3, [pc, #224]	; (8008540 <HAL_RCC_GetSysClockFreq+0x200>)
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	099b      	lsrs	r3, r3, #6
 8008464:	2200      	movs	r2, #0
 8008466:	4618      	mov	r0, r3
 8008468:	4611      	mov	r1, r2
 800846a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800846e:	623b      	str	r3, [r7, #32]
 8008470:	2300      	movs	r3, #0
 8008472:	627b      	str	r3, [r7, #36]	; 0x24
 8008474:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008478:	4642      	mov	r2, r8
 800847a:	464b      	mov	r3, r9
 800847c:	f04f 0000 	mov.w	r0, #0
 8008480:	f04f 0100 	mov.w	r1, #0
 8008484:	0159      	lsls	r1, r3, #5
 8008486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800848a:	0150      	lsls	r0, r2, #5
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4641      	mov	r1, r8
 8008492:	ebb2 0a01 	subs.w	sl, r2, r1
 8008496:	4649      	mov	r1, r9
 8008498:	eb63 0b01 	sbc.w	fp, r3, r1
 800849c:	f04f 0200 	mov.w	r2, #0
 80084a0:	f04f 0300 	mov.w	r3, #0
 80084a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80084a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80084ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80084b0:	ebb2 040a 	subs.w	r4, r2, sl
 80084b4:	eb63 050b 	sbc.w	r5, r3, fp
 80084b8:	f04f 0200 	mov.w	r2, #0
 80084bc:	f04f 0300 	mov.w	r3, #0
 80084c0:	00eb      	lsls	r3, r5, #3
 80084c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084c6:	00e2      	lsls	r2, r4, #3
 80084c8:	4614      	mov	r4, r2
 80084ca:	461d      	mov	r5, r3
 80084cc:	4643      	mov	r3, r8
 80084ce:	18e3      	adds	r3, r4, r3
 80084d0:	603b      	str	r3, [r7, #0]
 80084d2:	464b      	mov	r3, r9
 80084d4:	eb45 0303 	adc.w	r3, r5, r3
 80084d8:	607b      	str	r3, [r7, #4]
 80084da:	f04f 0200 	mov.w	r2, #0
 80084de:	f04f 0300 	mov.w	r3, #0
 80084e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084e6:	4629      	mov	r1, r5
 80084e8:	028b      	lsls	r3, r1, #10
 80084ea:	4621      	mov	r1, r4
 80084ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80084f0:	4621      	mov	r1, r4
 80084f2:	028a      	lsls	r2, r1, #10
 80084f4:	4610      	mov	r0, r2
 80084f6:	4619      	mov	r1, r3
 80084f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084fa:	2200      	movs	r2, #0
 80084fc:	61bb      	str	r3, [r7, #24]
 80084fe:	61fa      	str	r2, [r7, #28]
 8008500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008504:	f7f8 fc52 	bl	8000dac <__aeabi_uldivmod>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4613      	mov	r3, r2
 800850e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <HAL_RCC_GetSysClockFreq+0x200>)
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	0c1b      	lsrs	r3, r3, #16
 8008516:	f003 0303 	and.w	r3, r3, #3
 800851a:	3301      	adds	r3, #1
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008520:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008524:	fbb2 f3f3 	udiv	r3, r2, r3
 8008528:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800852a:	e002      	b.n	8008532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800852c:	4b05      	ldr	r3, [pc, #20]	; (8008544 <HAL_RCC_GetSysClockFreq+0x204>)
 800852e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008534:	4618      	mov	r0, r3
 8008536:	3750      	adds	r7, #80	; 0x50
 8008538:	46bd      	mov	sp, r7
 800853a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800853e:	bf00      	nop
 8008540:	40023800 	.word	0x40023800
 8008544:	00f42400 	.word	0x00f42400
 8008548:	007a1200 	.word	0x007a1200

0800854c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008550:	4b03      	ldr	r3, [pc, #12]	; (8008560 <HAL_RCC_GetHCLKFreq+0x14>)
 8008552:	681b      	ldr	r3, [r3, #0]
}
 8008554:	4618      	mov	r0, r3
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	20000018 	.word	0x20000018

08008564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008568:	f7ff fff0 	bl	800854c <HAL_RCC_GetHCLKFreq>
 800856c:	4602      	mov	r2, r0
 800856e:	4b05      	ldr	r3, [pc, #20]	; (8008584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	0a9b      	lsrs	r3, r3, #10
 8008574:	f003 0307 	and.w	r3, r3, #7
 8008578:	4903      	ldr	r1, [pc, #12]	; (8008588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800857a:	5ccb      	ldrb	r3, [r1, r3]
 800857c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008580:	4618      	mov	r0, r3
 8008582:	bd80      	pop	{r7, pc}
 8008584:	40023800 	.word	0x40023800
 8008588:	0800ac38 	.word	0x0800ac38

0800858c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008590:	f7ff ffdc 	bl	800854c <HAL_RCC_GetHCLKFreq>
 8008594:	4602      	mov	r2, r0
 8008596:	4b05      	ldr	r3, [pc, #20]	; (80085ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	0b5b      	lsrs	r3, r3, #13
 800859c:	f003 0307 	and.w	r3, r3, #7
 80085a0:	4903      	ldr	r1, [pc, #12]	; (80085b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085a2:	5ccb      	ldrb	r3, [r1, r3]
 80085a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	40023800 	.word	0x40023800
 80085b0:	0800ac38 	.word	0x0800ac38

080085b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e041      	b.n	800864a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d106      	bne.n	80085e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7fc f80a 	bl	80045f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f000 fdda 	bl	80091ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b01      	cmp	r3, #1
 8008666:	d001      	beq.n	800866c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e03c      	b.n	80086e6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a1e      	ldr	r2, [pc, #120]	; (80086f4 <HAL_TIM_Base_Start+0xa0>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d018      	beq.n	80086b0 <HAL_TIM_Base_Start+0x5c>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008686:	d013      	beq.n	80086b0 <HAL_TIM_Base_Start+0x5c>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a1a      	ldr	r2, [pc, #104]	; (80086f8 <HAL_TIM_Base_Start+0xa4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d00e      	beq.n	80086b0 <HAL_TIM_Base_Start+0x5c>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a19      	ldr	r2, [pc, #100]	; (80086fc <HAL_TIM_Base_Start+0xa8>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d009      	beq.n	80086b0 <HAL_TIM_Base_Start+0x5c>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a17      	ldr	r2, [pc, #92]	; (8008700 <HAL_TIM_Base_Start+0xac>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d004      	beq.n	80086b0 <HAL_TIM_Base_Start+0x5c>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a16      	ldr	r2, [pc, #88]	; (8008704 <HAL_TIM_Base_Start+0xb0>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d111      	bne.n	80086d4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b06      	cmp	r3, #6
 80086c0:	d010      	beq.n	80086e4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f042 0201 	orr.w	r2, r2, #1
 80086d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d2:	e007      	b.n	80086e4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0201 	orr.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	40010000 	.word	0x40010000
 80086f8:	40000400 	.word	0x40000400
 80086fc:	40000800 	.word	0x40000800
 8008700:	40000c00 	.word	0x40000c00
 8008704:	40014000 	.word	0x40014000

08008708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b01      	cmp	r3, #1
 800871a:	d001      	beq.n	8008720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e044      	b.n	80087aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2202      	movs	r2, #2
 8008724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0201 	orr.w	r2, r2, #1
 8008736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a1e      	ldr	r2, [pc, #120]	; (80087b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d018      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0x6c>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800874a:	d013      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0x6c>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a1a      	ldr	r2, [pc, #104]	; (80087bc <HAL_TIM_Base_Start_IT+0xb4>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d00e      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0x6c>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a19      	ldr	r2, [pc, #100]	; (80087c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d009      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0x6c>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a17      	ldr	r2, [pc, #92]	; (80087c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d004      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0x6c>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a16      	ldr	r2, [pc, #88]	; (80087c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d111      	bne.n	8008798 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f003 0307 	and.w	r3, r3, #7
 800877e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b06      	cmp	r3, #6
 8008784:	d010      	beq.n	80087a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f042 0201 	orr.w	r2, r2, #1
 8008794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008796:	e007      	b.n	80087a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0201 	orr.w	r2, r2, #1
 80087a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	40010000 	.word	0x40010000
 80087bc:	40000400 	.word	0x40000400
 80087c0:	40000800 	.word	0x40000800
 80087c4:	40000c00 	.word	0x40000c00
 80087c8:	40014000 	.word	0x40014000

080087cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e041      	b.n	8008862 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d106      	bne.n	80087f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f839 	bl	800886a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2202      	movs	r2, #2
 80087fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3304      	adds	r3, #4
 8008808:	4619      	mov	r1, r3
 800880a:	4610      	mov	r0, r2
 800880c:	f000 fcce 	bl	80091ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d109      	bne.n	80088a4 <HAL_TIM_PWM_Start+0x24>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b01      	cmp	r3, #1
 800889a:	bf14      	ite	ne
 800889c:	2301      	movne	r3, #1
 800889e:	2300      	moveq	r3, #0
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	e022      	b.n	80088ea <HAL_TIM_PWM_Start+0x6a>
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	2b04      	cmp	r3, #4
 80088a8:	d109      	bne.n	80088be <HAL_TIM_PWM_Start+0x3e>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	bf14      	ite	ne
 80088b6:	2301      	movne	r3, #1
 80088b8:	2300      	moveq	r3, #0
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	e015      	b.n	80088ea <HAL_TIM_PWM_Start+0x6a>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d109      	bne.n	80088d8 <HAL_TIM_PWM_Start+0x58>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	bf14      	ite	ne
 80088d0:	2301      	movne	r3, #1
 80088d2:	2300      	moveq	r3, #0
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	e008      	b.n	80088ea <HAL_TIM_PWM_Start+0x6a>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	bf14      	ite	ne
 80088e4:	2301      	movne	r3, #1
 80088e6:	2300      	moveq	r3, #0
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e068      	b.n	80089c4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d104      	bne.n	8008902 <HAL_TIM_PWM_Start+0x82>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008900:	e013      	b.n	800892a <HAL_TIM_PWM_Start+0xaa>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b04      	cmp	r3, #4
 8008906:	d104      	bne.n	8008912 <HAL_TIM_PWM_Start+0x92>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2202      	movs	r2, #2
 800890c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008910:	e00b      	b.n	800892a <HAL_TIM_PWM_Start+0xaa>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2b08      	cmp	r3, #8
 8008916:	d104      	bne.n	8008922 <HAL_TIM_PWM_Start+0xa2>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2202      	movs	r2, #2
 800891c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008920:	e003      	b.n	800892a <HAL_TIM_PWM_Start+0xaa>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2202      	movs	r2, #2
 8008926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2201      	movs	r2, #1
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f000 fee0 	bl	80096f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a23      	ldr	r2, [pc, #140]	; (80089cc <HAL_TIM_PWM_Start+0x14c>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d107      	bne.n	8008952 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008950:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a1d      	ldr	r2, [pc, #116]	; (80089cc <HAL_TIM_PWM_Start+0x14c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d018      	beq.n	800898e <HAL_TIM_PWM_Start+0x10e>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008964:	d013      	beq.n	800898e <HAL_TIM_PWM_Start+0x10e>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a19      	ldr	r2, [pc, #100]	; (80089d0 <HAL_TIM_PWM_Start+0x150>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d00e      	beq.n	800898e <HAL_TIM_PWM_Start+0x10e>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a17      	ldr	r2, [pc, #92]	; (80089d4 <HAL_TIM_PWM_Start+0x154>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d009      	beq.n	800898e <HAL_TIM_PWM_Start+0x10e>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a16      	ldr	r2, [pc, #88]	; (80089d8 <HAL_TIM_PWM_Start+0x158>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d004      	beq.n	800898e <HAL_TIM_PWM_Start+0x10e>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a14      	ldr	r2, [pc, #80]	; (80089dc <HAL_TIM_PWM_Start+0x15c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d111      	bne.n	80089b2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f003 0307 	and.w	r3, r3, #7
 8008998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b06      	cmp	r3, #6
 800899e:	d010      	beq.n	80089c2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f042 0201 	orr.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b0:	e007      	b.n	80089c2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f042 0201 	orr.w	r2, r2, #1
 80089c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	40010000 	.word	0x40010000
 80089d0:	40000400 	.word	0x40000400
 80089d4:	40000800 	.word	0x40000800
 80089d8:	40000c00 	.word	0x40000c00
 80089dc:	40014000 	.word	0x40014000

080089e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e097      	b.n	8008b24 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d106      	bne.n	8008a0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7fb fdab 	bl	8004564 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2202      	movs	r2, #2
 8008a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	6812      	ldr	r2, [r2, #0]
 8008a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a24:	f023 0307 	bic.w	r3, r3, #7
 8008a28:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4619      	mov	r1, r3
 8008a34:	4610      	mov	r0, r2
 8008a36:	f000 fbb9 	bl	80091ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a62:	f023 0303 	bic.w	r3, r3, #3
 8008a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	689a      	ldr	r2, [r3, #8]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	021b      	lsls	r3, r3, #8
 8008a72:	4313      	orrs	r3, r2
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008a80:	f023 030c 	bic.w	r3, r3, #12
 8008a84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	021b      	lsls	r3, r3, #8
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	011a      	lsls	r2, r3, #4
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	031b      	lsls	r3, r3, #12
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008abe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008ac6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	011b      	lsls	r3, r3, #4
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b3c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b44:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b4c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b54:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d110      	bne.n	8008b7e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d102      	bne.n	8008b68 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b62:	7b7b      	ldrb	r3, [r7, #13]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d001      	beq.n	8008b6c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e069      	b.n	8008c40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b7c:	e031      	b.n	8008be2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d110      	bne.n	8008ba6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d102      	bne.n	8008b90 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b8a:	7b3b      	ldrb	r3, [r7, #12]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d001      	beq.n	8008b94 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e055      	b.n	8008c40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ba4:	e01d      	b.n	8008be2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d108      	bne.n	8008bbe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d105      	bne.n	8008bbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bb2:	7b7b      	ldrb	r3, [r7, #13]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d102      	bne.n	8008bbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bb8:	7b3b      	ldrb	r3, [r7, #12]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d001      	beq.n	8008bc2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e03e      	b.n	8008c40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2202      	movs	r2, #2
 8008bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2202      	movs	r2, #2
 8008bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <HAL_TIM_Encoder_Start+0xc4>
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	d008      	beq.n	8008c00 <HAL_TIM_Encoder_Start+0xd4>
 8008bee:	e00f      	b.n	8008c10 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 fd7d 	bl	80096f8 <TIM_CCxChannelCmd>
      break;
 8008bfe:	e016      	b.n	8008c2e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2201      	movs	r2, #1
 8008c06:	2104      	movs	r1, #4
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 fd75 	bl	80096f8 <TIM_CCxChannelCmd>
      break;
 8008c0e:	e00e      	b.n	8008c2e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2201      	movs	r2, #1
 8008c16:	2100      	movs	r1, #0
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 fd6d 	bl	80096f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2201      	movs	r2, #1
 8008c24:	2104      	movs	r1, #4
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fd66 	bl	80096f8 <TIM_CCxChannelCmd>
      break;
 8008c2c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f042 0201 	orr.w	r2, r2, #1
 8008c3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d122      	bne.n	8008ca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d11b      	bne.n	8008ca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f06f 0202 	mvn.w	r2, #2
 8008c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	f003 0303 	and.w	r3, r3, #3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fa70 	bl	8009170 <HAL_TIM_IC_CaptureCallback>
 8008c90:	e005      	b.n	8008c9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fa62 	bl	800915c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fa73 	bl	8009184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	f003 0304 	and.w	r3, r3, #4
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d122      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d11b      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f06f 0204 	mvn.w	r2, #4
 8008cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa46 	bl	8009170 <HAL_TIM_IC_CaptureCallback>
 8008ce4:	e005      	b.n	8008cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fa38 	bl	800915c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fa49 	bl	8009184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	f003 0308 	and.w	r3, r3, #8
 8008d02:	2b08      	cmp	r3, #8
 8008d04:	d122      	bne.n	8008d4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	f003 0308 	and.w	r3, r3, #8
 8008d10:	2b08      	cmp	r3, #8
 8008d12:	d11b      	bne.n	8008d4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f06f 0208 	mvn.w	r2, #8
 8008d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2204      	movs	r2, #4
 8008d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	f003 0303 	and.w	r3, r3, #3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa1c 	bl	8009170 <HAL_TIM_IC_CaptureCallback>
 8008d38:	e005      	b.n	8008d46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fa0e 	bl	800915c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fa1f 	bl	8009184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	f003 0310 	and.w	r3, r3, #16
 8008d56:	2b10      	cmp	r3, #16
 8008d58:	d122      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b10      	cmp	r3, #16
 8008d66:	d11b      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f06f 0210 	mvn.w	r2, #16
 8008d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2208      	movs	r2, #8
 8008d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f9f2 	bl	8009170 <HAL_TIM_IC_CaptureCallback>
 8008d8c:	e005      	b.n	8008d9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f9e4 	bl	800915c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f9f5 	bl	8009184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d10e      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d107      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f06f 0201 	mvn.w	r2, #1
 8008dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7f8 ff30 	bl	8001c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd6:	2b80      	cmp	r3, #128	; 0x80
 8008dd8:	d10e      	bne.n	8008df8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de4:	2b80      	cmp	r3, #128	; 0x80
 8008de6:	d107      	bne.n	8008df8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fd1e 	bl	8009834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e02:	2b40      	cmp	r3, #64	; 0x40
 8008e04:	d10e      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e10:	2b40      	cmp	r3, #64	; 0x40
 8008e12:	d107      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f9ba 	bl	8009198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f003 0320 	and.w	r3, r3, #32
 8008e2e:	2b20      	cmp	r3, #32
 8008e30:	d10e      	bne.n	8008e50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f003 0320 	and.w	r3, r3, #32
 8008e3c:	2b20      	cmp	r3, #32
 8008e3e:	d107      	bne.n	8008e50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f06f 0220 	mvn.w	r2, #32
 8008e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fce8 	bl	8009820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e0ac      	b.n	8008fcc <HAL_TIM_PWM_ConfigChannel+0x174>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b0c      	cmp	r3, #12
 8008e7e:	f200 809f 	bhi.w	8008fc0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008e82:	a201      	add	r2, pc, #4	; (adr r2, 8008e88 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e88:	08008ebd 	.word	0x08008ebd
 8008e8c:	08008fc1 	.word	0x08008fc1
 8008e90:	08008fc1 	.word	0x08008fc1
 8008e94:	08008fc1 	.word	0x08008fc1
 8008e98:	08008efd 	.word	0x08008efd
 8008e9c:	08008fc1 	.word	0x08008fc1
 8008ea0:	08008fc1 	.word	0x08008fc1
 8008ea4:	08008fc1 	.word	0x08008fc1
 8008ea8:	08008f3f 	.word	0x08008f3f
 8008eac:	08008fc1 	.word	0x08008fc1
 8008eb0:	08008fc1 	.word	0x08008fc1
 8008eb4:	08008fc1 	.word	0x08008fc1
 8008eb8:	08008f7f 	.word	0x08008f7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68b9      	ldr	r1, [r7, #8]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 f9f2 	bl	80092ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	699a      	ldr	r2, [r3, #24]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0208 	orr.w	r2, r2, #8
 8008ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	699a      	ldr	r2, [r3, #24]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 0204 	bic.w	r2, r2, #4
 8008ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6999      	ldr	r1, [r3, #24]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	691a      	ldr	r2, [r3, #16]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	619a      	str	r2, [r3, #24]
      break;
 8008efa:	e062      	b.n	8008fc2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68b9      	ldr	r1, [r7, #8]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 fa38 	bl	8009378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	699a      	ldr	r2, [r3, #24]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699a      	ldr	r2, [r3, #24]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6999      	ldr	r1, [r3, #24]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	021a      	lsls	r2, r3, #8
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	619a      	str	r2, [r3, #24]
      break;
 8008f3c:	e041      	b.n	8008fc2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68b9      	ldr	r1, [r7, #8]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fa83 	bl	8009450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	69da      	ldr	r2, [r3, #28]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f042 0208 	orr.w	r2, r2, #8
 8008f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	69da      	ldr	r2, [r3, #28]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0204 	bic.w	r2, r2, #4
 8008f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	69d9      	ldr	r1, [r3, #28]
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	691a      	ldr	r2, [r3, #16]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	61da      	str	r2, [r3, #28]
      break;
 8008f7c:	e021      	b.n	8008fc2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 facd 	bl	8009524 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69da      	ldr	r2, [r3, #28]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	69da      	ldr	r2, [r3, #28]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	69d9      	ldr	r1, [r3, #28]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	021a      	lsls	r2, r3, #8
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	61da      	str	r2, [r3, #28]
      break;
 8008fbe:	e000      	b.n	8008fc2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008fc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_TIM_ConfigClockSource+0x18>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e0b3      	b.n	8009154 <HAL_TIM_ConfigClockSource+0x180>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800900a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009012:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009024:	d03e      	beq.n	80090a4 <HAL_TIM_ConfigClockSource+0xd0>
 8009026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800902a:	f200 8087 	bhi.w	800913c <HAL_TIM_ConfigClockSource+0x168>
 800902e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009032:	f000 8085 	beq.w	8009140 <HAL_TIM_ConfigClockSource+0x16c>
 8009036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800903a:	d87f      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x168>
 800903c:	2b70      	cmp	r3, #112	; 0x70
 800903e:	d01a      	beq.n	8009076 <HAL_TIM_ConfigClockSource+0xa2>
 8009040:	2b70      	cmp	r3, #112	; 0x70
 8009042:	d87b      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x168>
 8009044:	2b60      	cmp	r3, #96	; 0x60
 8009046:	d050      	beq.n	80090ea <HAL_TIM_ConfigClockSource+0x116>
 8009048:	2b60      	cmp	r3, #96	; 0x60
 800904a:	d877      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x168>
 800904c:	2b50      	cmp	r3, #80	; 0x50
 800904e:	d03c      	beq.n	80090ca <HAL_TIM_ConfigClockSource+0xf6>
 8009050:	2b50      	cmp	r3, #80	; 0x50
 8009052:	d873      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x168>
 8009054:	2b40      	cmp	r3, #64	; 0x40
 8009056:	d058      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x136>
 8009058:	2b40      	cmp	r3, #64	; 0x40
 800905a:	d86f      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x168>
 800905c:	2b30      	cmp	r3, #48	; 0x30
 800905e:	d064      	beq.n	800912a <HAL_TIM_ConfigClockSource+0x156>
 8009060:	2b30      	cmp	r3, #48	; 0x30
 8009062:	d86b      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x168>
 8009064:	2b20      	cmp	r3, #32
 8009066:	d060      	beq.n	800912a <HAL_TIM_ConfigClockSource+0x156>
 8009068:	2b20      	cmp	r3, #32
 800906a:	d867      	bhi.n	800913c <HAL_TIM_ConfigClockSource+0x168>
 800906c:	2b00      	cmp	r3, #0
 800906e:	d05c      	beq.n	800912a <HAL_TIM_ConfigClockSource+0x156>
 8009070:	2b10      	cmp	r3, #16
 8009072:	d05a      	beq.n	800912a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009074:	e062      	b.n	800913c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	6899      	ldr	r1, [r3, #8]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	f000 fb17 	bl	80096b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009098:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	609a      	str	r2, [r3, #8]
      break;
 80090a2:	e04e      	b.n	8009142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6818      	ldr	r0, [r3, #0]
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	6899      	ldr	r1, [r3, #8]
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f000 fb00 	bl	80096b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689a      	ldr	r2, [r3, #8]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090c6:	609a      	str	r2, [r3, #8]
      break;
 80090c8:	e03b      	b.n	8009142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6818      	ldr	r0, [r3, #0]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	6859      	ldr	r1, [r3, #4]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	461a      	mov	r2, r3
 80090d8:	f000 fa74 	bl	80095c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2150      	movs	r1, #80	; 0x50
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 facd 	bl	8009682 <TIM_ITRx_SetConfig>
      break;
 80090e8:	e02b      	b.n	8009142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6818      	ldr	r0, [r3, #0]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	6859      	ldr	r1, [r3, #4]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	461a      	mov	r2, r3
 80090f8:	f000 fa93 	bl	8009622 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2160      	movs	r1, #96	; 0x60
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fabd 	bl	8009682 <TIM_ITRx_SetConfig>
      break;
 8009108:	e01b      	b.n	8009142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	6859      	ldr	r1, [r3, #4]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	461a      	mov	r2, r3
 8009118:	f000 fa54 	bl	80095c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2140      	movs	r1, #64	; 0x40
 8009122:	4618      	mov	r0, r3
 8009124:	f000 faad 	bl	8009682 <TIM_ITRx_SetConfig>
      break;
 8009128:	e00b      	b.n	8009142 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4619      	mov	r1, r3
 8009134:	4610      	mov	r0, r2
 8009136:	f000 faa4 	bl	8009682 <TIM_ITRx_SetConfig>
        break;
 800913a:	e002      	b.n	8009142 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800913c:	bf00      	nop
 800913e:	e000      	b.n	8009142 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009140:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a34      	ldr	r2, [pc, #208]	; (8009290 <TIM_Base_SetConfig+0xe4>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d00f      	beq.n	80091e4 <TIM_Base_SetConfig+0x38>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ca:	d00b      	beq.n	80091e4 <TIM_Base_SetConfig+0x38>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a31      	ldr	r2, [pc, #196]	; (8009294 <TIM_Base_SetConfig+0xe8>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d007      	beq.n	80091e4 <TIM_Base_SetConfig+0x38>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a30      	ldr	r2, [pc, #192]	; (8009298 <TIM_Base_SetConfig+0xec>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d003      	beq.n	80091e4 <TIM_Base_SetConfig+0x38>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a2f      	ldr	r2, [pc, #188]	; (800929c <TIM_Base_SetConfig+0xf0>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d108      	bne.n	80091f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a25      	ldr	r2, [pc, #148]	; (8009290 <TIM_Base_SetConfig+0xe4>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d01b      	beq.n	8009236 <TIM_Base_SetConfig+0x8a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009204:	d017      	beq.n	8009236 <TIM_Base_SetConfig+0x8a>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a22      	ldr	r2, [pc, #136]	; (8009294 <TIM_Base_SetConfig+0xe8>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d013      	beq.n	8009236 <TIM_Base_SetConfig+0x8a>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a21      	ldr	r2, [pc, #132]	; (8009298 <TIM_Base_SetConfig+0xec>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00f      	beq.n	8009236 <TIM_Base_SetConfig+0x8a>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a20      	ldr	r2, [pc, #128]	; (800929c <TIM_Base_SetConfig+0xf0>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d00b      	beq.n	8009236 <TIM_Base_SetConfig+0x8a>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a1f      	ldr	r2, [pc, #124]	; (80092a0 <TIM_Base_SetConfig+0xf4>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d007      	beq.n	8009236 <TIM_Base_SetConfig+0x8a>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a1e      	ldr	r2, [pc, #120]	; (80092a4 <TIM_Base_SetConfig+0xf8>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d003      	beq.n	8009236 <TIM_Base_SetConfig+0x8a>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a1d      	ldr	r2, [pc, #116]	; (80092a8 <TIM_Base_SetConfig+0xfc>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d108      	bne.n	8009248 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800923c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	4313      	orrs	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	4313      	orrs	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	689a      	ldr	r2, [r3, #8]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a08      	ldr	r2, [pc, #32]	; (8009290 <TIM_Base_SetConfig+0xe4>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d103      	bne.n	800927c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	691a      	ldr	r2, [r3, #16]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	615a      	str	r2, [r3, #20]
}
 8009282:	bf00      	nop
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	40010000 	.word	0x40010000
 8009294:	40000400 	.word	0x40000400
 8009298:	40000800 	.word	0x40000800
 800929c:	40000c00 	.word	0x40000c00
 80092a0:	40014000 	.word	0x40014000
 80092a4:	40014400 	.word	0x40014400
 80092a8:	40014800 	.word	0x40014800

080092ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	f023 0201 	bic.w	r2, r3, #1
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f023 0303 	bic.w	r3, r3, #3
 80092e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f023 0302 	bic.w	r3, r3, #2
 80092f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a1c      	ldr	r2, [pc, #112]	; (8009374 <TIM_OC1_SetConfig+0xc8>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d10c      	bne.n	8009322 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	f023 0308 	bic.w	r3, r3, #8
 800930e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	4313      	orrs	r3, r2
 8009318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f023 0304 	bic.w	r3, r3, #4
 8009320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a13      	ldr	r2, [pc, #76]	; (8009374 <TIM_OC1_SetConfig+0xc8>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d111      	bne.n	800934e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	4313      	orrs	r3, r2
 8009342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	4313      	orrs	r3, r2
 800934c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	621a      	str	r2, [r3, #32]
}
 8009368:	bf00      	nop
 800936a:	371c      	adds	r7, #28
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	40010000 	.word	0x40010000

08009378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009378:	b480      	push	{r7}
 800937a:	b087      	sub	sp, #28
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	f023 0210 	bic.w	r2, r3, #16
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	021b      	lsls	r3, r3, #8
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f023 0320 	bic.w	r3, r3, #32
 80093c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	011b      	lsls	r3, r3, #4
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a1e      	ldr	r2, [pc, #120]	; (800944c <TIM_OC2_SetConfig+0xd4>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d10d      	bne.n	80093f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	011b      	lsls	r3, r3, #4
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a15      	ldr	r2, [pc, #84]	; (800944c <TIM_OC2_SetConfig+0xd4>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d113      	bne.n	8009424 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800940a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	4313      	orrs	r3, r2
 8009416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	693a      	ldr	r2, [r7, #16]
 8009420:	4313      	orrs	r3, r2
 8009422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	693a      	ldr	r2, [r7, #16]
 8009428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	621a      	str	r2, [r3, #32]
}
 800943e:	bf00      	nop
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	40010000 	.word	0x40010000

08009450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009450:	b480      	push	{r7}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800947e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 0303 	bic.w	r3, r3, #3
 8009486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4313      	orrs	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	021b      	lsls	r3, r3, #8
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a1d      	ldr	r2, [pc, #116]	; (8009520 <TIM_OC3_SetConfig+0xd0>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d10d      	bne.n	80094ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	021b      	lsls	r3, r3, #8
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	4313      	orrs	r3, r2
 80094c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a14      	ldr	r2, [pc, #80]	; (8009520 <TIM_OC3_SetConfig+0xd0>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d113      	bne.n	80094fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	011b      	lsls	r3, r3, #4
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	011b      	lsls	r3, r3, #4
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	621a      	str	r2, [r3, #32]
}
 8009514:	bf00      	nop
 8009516:	371c      	adds	r7, #28
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	40010000 	.word	0x40010000

08009524 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009524:	b480      	push	{r7}
 8009526:	b087      	sub	sp, #28
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800955a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	021b      	lsls	r3, r3, #8
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	4313      	orrs	r3, r2
 8009566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800956e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	031b      	lsls	r3, r3, #12
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	4313      	orrs	r3, r2
 800957a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a10      	ldr	r2, [pc, #64]	; (80095c0 <TIM_OC4_SetConfig+0x9c>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d109      	bne.n	8009598 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800958a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	695b      	ldr	r3, [r3, #20]
 8009590:	019b      	lsls	r3, r3, #6
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	4313      	orrs	r3, r2
 8009596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	621a      	str	r2, [r3, #32]
}
 80095b2:	bf00      	nop
 80095b4:	371c      	adds	r7, #28
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	40010000 	.word	0x40010000

080095c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a1b      	ldr	r3, [r3, #32]
 80095d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	f023 0201 	bic.w	r2, r3, #1
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	011b      	lsls	r3, r3, #4
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f023 030a 	bic.w	r3, r3, #10
 8009600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	4313      	orrs	r3, r2
 8009608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	621a      	str	r2, [r3, #32]
}
 8009616:	bf00      	nop
 8009618:	371c      	adds	r7, #28
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009622:	b480      	push	{r7}
 8009624:	b087      	sub	sp, #28
 8009626:	af00      	add	r7, sp, #0
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	f023 0210 	bic.w	r2, r3, #16
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800964c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	031b      	lsls	r3, r3, #12
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	4313      	orrs	r3, r2
 8009656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800965e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	011b      	lsls	r3, r3, #4
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	4313      	orrs	r3, r2
 8009668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	621a      	str	r2, [r3, #32]
}
 8009676:	bf00      	nop
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009682:	b480      	push	{r7}
 8009684:	b085      	sub	sp, #20
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	4313      	orrs	r3, r2
 80096a0:	f043 0307 	orr.w	r3, r3, #7
 80096a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	609a      	str	r2, [r3, #8]
}
 80096ac:	bf00      	nop
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b087      	sub	sp, #28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
 80096c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	021a      	lsls	r2, r3, #8
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	431a      	orrs	r2, r3
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	4313      	orrs	r3, r2
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	609a      	str	r2, [r3, #8]
}
 80096ec:	bf00      	nop
 80096ee:	371c      	adds	r7, #28
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b087      	sub	sp, #28
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f003 031f 	and.w	r3, r3, #31
 800970a:	2201      	movs	r2, #1
 800970c:	fa02 f303 	lsl.w	r3, r2, r3
 8009710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6a1a      	ldr	r2, [r3, #32]
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	43db      	mvns	r3, r3
 800971a:	401a      	ands	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6a1a      	ldr	r2, [r3, #32]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f003 031f 	and.w	r3, r3, #31
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	fa01 f303 	lsl.w	r3, r1, r3
 8009730:	431a      	orrs	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	621a      	str	r2, [r3, #32]
}
 8009736:	bf00      	nop
 8009738:	371c      	adds	r7, #28
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
	...

08009744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009754:	2b01      	cmp	r3, #1
 8009756:	d101      	bne.n	800975c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009758:	2302      	movs	r3, #2
 800975a:	e050      	b.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2202      	movs	r2, #2
 8009768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	4313      	orrs	r3, r2
 800978c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a1c      	ldr	r2, [pc, #112]	; (800980c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d018      	beq.n	80097d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a8:	d013      	beq.n	80097d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a18      	ldr	r2, [pc, #96]	; (8009810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d00e      	beq.n	80097d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a16      	ldr	r2, [pc, #88]	; (8009814 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d009      	beq.n	80097d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a15      	ldr	r2, [pc, #84]	; (8009818 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d004      	beq.n	80097d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a13      	ldr	r2, [pc, #76]	; (800981c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d10c      	bne.n	80097ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	40010000 	.word	0x40010000
 8009810:	40000400 	.word	0x40000400
 8009814:	40000800 	.word	0x40000800
 8009818:	40000c00 	.word	0x40000c00
 800981c:	40014000 	.word	0x40014000

08009820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e03f      	b.n	80098da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d106      	bne.n	8009874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7fa ff36 	bl	80046e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2224      	movs	r2, #36	; 0x24
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68da      	ldr	r2, [r3, #12]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800988a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fd51 	bl	800a334 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	691a      	ldr	r2, [r3, #16]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	695a      	ldr	r2, [r3, #20]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68da      	ldr	r2, [r3, #12]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2220      	movs	r2, #32
 80098cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	4613      	mov	r3, r2
 80098f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b20      	cmp	r3, #32
 80098fc:	d153      	bne.n	80099a6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <HAL_UART_Transmit_DMA+0x26>
 8009904:	88fb      	ldrh	r3, [r7, #6]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e04c      	b.n	80099a8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009914:	2b01      	cmp	r3, #1
 8009916:	d101      	bne.n	800991c <HAL_UART_Transmit_DMA+0x38>
 8009918:	2302      	movs	r3, #2
 800991a:	e045      	b.n	80099a8 <HAL_UART_Transmit_DMA+0xc4>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	88fa      	ldrh	r2, [r7, #6]
 800992e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	88fa      	ldrh	r2, [r7, #6]
 8009934:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2221      	movs	r2, #33	; 0x21
 8009940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009948:	4a19      	ldr	r2, [pc, #100]	; (80099b0 <HAL_UART_Transmit_DMA+0xcc>)
 800994a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009950:	4a18      	ldr	r2, [pc, #96]	; (80099b4 <HAL_UART_Transmit_DMA+0xd0>)
 8009952:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009958:	4a17      	ldr	r2, [pc, #92]	; (80099b8 <HAL_UART_Transmit_DMA+0xd4>)
 800995a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009960:	2200      	movs	r2, #0
 8009962:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009964:	f107 0308 	add.w	r3, r7, #8
 8009968:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	6819      	ldr	r1, [r3, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3304      	adds	r3, #4
 8009978:	461a      	mov	r2, r3
 800997a:	88fb      	ldrh	r3, [r7, #6]
 800997c:	f7fb faac 	bl	8004ed8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009988:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	695a      	ldr	r2, [r3, #20]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80099a0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	e000      	b.n	80099a8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80099a6:	2302      	movs	r3, #2
  }
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	08009df1 	.word	0x08009df1
 80099b4:	08009e43 	.word	0x08009e43
 80099b8:	08009f2b 	.word	0x08009f2b

080099bc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	4613      	mov	r3, r2
 80099c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b20      	cmp	r3, #32
 80099d4:	d11d      	bne.n	8009a12 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d002      	beq.n	80099e2 <HAL_UART_Receive_DMA+0x26>
 80099dc:	88fb      	ldrh	r3, [r7, #6]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e016      	b.n	8009a14 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d101      	bne.n	80099f4 <HAL_UART_Receive_DMA+0x38>
 80099f0:	2302      	movs	r3, #2
 80099f2:	e00f      	b.n	8009a14 <HAL_UART_Receive_DMA+0x58>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8009a02:	88fb      	ldrh	r3, [r7, #6]
 8009a04:	461a      	mov	r2, r3
 8009a06:	68b9      	ldr	r1, [r7, #8]
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 fad9 	bl	8009fc0 <UART_Start_Receive_DMA>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	e000      	b.n	8009a14 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009a12:	2302      	movs	r3, #2
  }
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08a      	sub	sp, #40	; 0x28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	f003 030f 	and.w	r3, r3, #15
 8009a4a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10d      	bne.n	8009a6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	f003 0320 	and.w	r3, r3, #32
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d008      	beq.n	8009a6e <HAL_UART_IRQHandler+0x52>
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	f003 0320 	and.w	r3, r3, #32
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d003      	beq.n	8009a6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fbcd 	bl	800a206 <UART_Receive_IT>
      return;
 8009a6c:	e17c      	b.n	8009d68 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 80b1 	beq.w	8009bd8 <HAL_UART_IRQHandler+0x1bc>
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	f003 0301 	and.w	r3, r3, #1
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d105      	bne.n	8009a8c <HAL_UART_IRQHandler+0x70>
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 80a6 	beq.w	8009bd8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00a      	beq.n	8009aac <HAL_UART_IRQHandler+0x90>
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d005      	beq.n	8009aac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa4:	f043 0201 	orr.w	r2, r3, #1
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	f003 0304 	and.w	r3, r3, #4
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00a      	beq.n	8009acc <HAL_UART_IRQHandler+0xb0>
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d005      	beq.n	8009acc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac4:	f043 0202 	orr.w	r2, r3, #2
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	f003 0302 	and.w	r3, r3, #2
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00a      	beq.n	8009aec <HAL_UART_IRQHandler+0xd0>
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d005      	beq.n	8009aec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae4:	f043 0204 	orr.w	r2, r3, #4
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	f003 0308 	and.w	r3, r3, #8
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00f      	beq.n	8009b16 <HAL_UART_IRQHandler+0xfa>
 8009af6:	6a3b      	ldr	r3, [r7, #32]
 8009af8:	f003 0320 	and.w	r3, r3, #32
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d104      	bne.n	8009b0a <HAL_UART_IRQHandler+0xee>
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	f003 0301 	and.w	r3, r3, #1
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d005      	beq.n	8009b16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0e:	f043 0208 	orr.w	r2, r3, #8
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f000 811f 	beq.w	8009d5e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	f003 0320 	and.w	r3, r3, #32
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d007      	beq.n	8009b3a <HAL_UART_IRQHandler+0x11e>
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	f003 0320 	and.w	r3, r3, #32
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d002      	beq.n	8009b3a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fb66 	bl	800a206 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b44:	2b40      	cmp	r3, #64	; 0x40
 8009b46:	bf0c      	ite	eq
 8009b48:	2301      	moveq	r3, #1
 8009b4a:	2300      	movne	r3, #0
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b54:	f003 0308 	and.w	r3, r3, #8
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d102      	bne.n	8009b62 <HAL_UART_IRQHandler+0x146>
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d031      	beq.n	8009bc6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 faa6 	bl	800a0b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b72:	2b40      	cmp	r3, #64	; 0x40
 8009b74:	d123      	bne.n	8009bbe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	695a      	ldr	r2, [r3, #20]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b84:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d013      	beq.n	8009bb6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b92:	4a77      	ldr	r2, [pc, #476]	; (8009d70 <HAL_UART_IRQHandler+0x354>)
 8009b94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fb fa64 	bl	8005068 <HAL_DMA_Abort_IT>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d016      	beq.n	8009bd4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb4:	e00e      	b.n	8009bd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f904 	bl	8009dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bbc:	e00a      	b.n	8009bd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f900 	bl	8009dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc4:	e006      	b.n	8009bd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f8fc 	bl	8009dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009bd2:	e0c4      	b.n	8009d5e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd4:	bf00      	nop
    return;
 8009bd6:	e0c2      	b.n	8009d5e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	f040 80a2 	bne.w	8009d26 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	f003 0310 	and.w	r3, r3, #16
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 809c 	beq.w	8009d26 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	f003 0310 	and.w	r3, r3, #16
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 8096 	beq.w	8009d26 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60fb      	str	r3, [r7, #12]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	60fb      	str	r3, [r7, #12]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1a:	2b40      	cmp	r3, #64	; 0x40
 8009c1c:	d14f      	bne.n	8009cbe <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009c28:	8a3b      	ldrh	r3, [r7, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f000 8099 	beq.w	8009d62 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c34:	8a3a      	ldrh	r2, [r7, #16]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	f080 8093 	bcs.w	8009d62 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	8a3a      	ldrh	r2, [r7, #16]
 8009c40:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c4c:	d02b      	beq.n	8009ca6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68da      	ldr	r2, [r3, #12]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c5c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	695a      	ldr	r2, [r3, #20]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f022 0201 	bic.w	r2, r2, #1
 8009c6c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	695a      	ldr	r2, [r3, #20]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c7c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2220      	movs	r2, #32
 8009c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68da      	ldr	r2, [r3, #12]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f022 0210 	bic.w	r2, r2, #16
 8009c9a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fb f971 	bl	8004f88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f88e 	bl	8009dd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009cbc:	e051      	b.n	8009d62 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d047      	beq.n	8009d66 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8009cd6:	8a7b      	ldrh	r3, [r7, #18]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d044      	beq.n	8009d66 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68da      	ldr	r2, [r3, #12]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009cea:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	695a      	ldr	r2, [r3, #20]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f022 0201 	bic.w	r2, r2, #1
 8009cfa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2220      	movs	r2, #32
 8009d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68da      	ldr	r2, [r3, #12]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 0210 	bic.w	r2, r2, #16
 8009d18:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d1a:	8a7b      	ldrh	r3, [r7, #18]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f85a 	bl	8009dd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009d24:	e01f      	b.n	8009d66 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d008      	beq.n	8009d42 <HAL_UART_IRQHandler+0x326>
 8009d30:	6a3b      	ldr	r3, [r7, #32]
 8009d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f9fb 	bl	800a136 <UART_Transmit_IT>
    return;
 8009d40:	e012      	b.n	8009d68 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00d      	beq.n	8009d68 <HAL_UART_IRQHandler+0x34c>
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d008      	beq.n	8009d68 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fa3d 	bl	800a1d6 <UART_EndTransmit_IT>
    return;
 8009d5c:	e004      	b.n	8009d68 <HAL_UART_IRQHandler+0x34c>
    return;
 8009d5e:	bf00      	nop
 8009d60:	e002      	b.n	8009d68 <HAL_UART_IRQHandler+0x34c>
      return;
 8009d62:	bf00      	nop
 8009d64:	e000      	b.n	8009d68 <HAL_UART_IRQHandler+0x34c>
      return;
 8009d66:	bf00      	nop
  }
}
 8009d68:	3728      	adds	r7, #40	; 0x28
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	0800a10f 	.word	0x0800a10f

08009d74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d113      	bne.n	8009e34 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	695a      	ldr	r2, [r3, #20]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e20:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68da      	ldr	r2, [r3, #12]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e30:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e32:	e002      	b.n	8009e3a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f7ff ff9d 	bl	8009d74 <HAL_UART_TxCpltCallback>
}
 8009e3a:	bf00      	nop
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b084      	sub	sp, #16
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f7ff ff99 	bl	8009d88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e56:	bf00      	nop
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d12a      	bne.n	8009ed0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68da      	ldr	r2, [r3, #12]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e8e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	695a      	ldr	r2, [r3, #20]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f022 0201 	bic.w	r2, r2, #1
 8009e9e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	695a      	ldr	r2, [r3, #20]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009eae:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d107      	bne.n	8009ed0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f022 0210 	bic.w	r2, r2, #16
 8009ece:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d106      	bne.n	8009ee6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009edc:	4619      	mov	r1, r3
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7ff ff7a 	bl	8009dd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ee4:	e002      	b.n	8009eec <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f7ff ff58 	bl	8009d9c <HAL_UART_RxCpltCallback>
}
 8009eec:	bf00      	nop
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f00:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d108      	bne.n	8009f1c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f0e:	085b      	lsrs	r3, r3, #1
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	4619      	mov	r1, r3
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f7ff ff5f 	bl	8009dd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f1a:	e002      	b.n	8009f22 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7ff ff47 	bl	8009db0 <HAL_UART_RxHalfCpltCallback>
}
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f46:	2b80      	cmp	r3, #128	; 0x80
 8009f48:	bf0c      	ite	eq
 8009f4a:	2301      	moveq	r3, #1
 8009f4c:	2300      	movne	r3, #0
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b21      	cmp	r3, #33	; 0x21
 8009f5c:	d108      	bne.n	8009f70 <UART_DMAError+0x46>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d005      	beq.n	8009f70 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2200      	movs	r2, #0
 8009f68:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009f6a:	68b8      	ldr	r0, [r7, #8]
 8009f6c:	f000 f88c 	bl	800a088 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f7a:	2b40      	cmp	r3, #64	; 0x40
 8009f7c:	bf0c      	ite	eq
 8009f7e:	2301      	moveq	r3, #1
 8009f80:	2300      	movne	r3, #0
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b22      	cmp	r3, #34	; 0x22
 8009f90:	d108      	bne.n	8009fa4 <UART_DMAError+0x7a>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d005      	beq.n	8009fa4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009f9e:	68b8      	ldr	r0, [r7, #8]
 8009fa0:	f000 f888 	bl	800a0b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa8:	f043 0210 	orr.w	r2, r3, #16
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fb0:	68b8      	ldr	r0, [r7, #8]
 8009fb2:	f7ff ff07 	bl	8009dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	88fa      	ldrh	r2, [r7, #6]
 8009fd8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2222      	movs	r2, #34	; 0x22
 8009fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fec:	4a23      	ldr	r2, [pc, #140]	; (800a07c <UART_Start_Receive_DMA+0xbc>)
 8009fee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff4:	4a22      	ldr	r2, [pc, #136]	; (800a080 <UART_Start_Receive_DMA+0xc0>)
 8009ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffc:	4a21      	ldr	r2, [pc, #132]	; (800a084 <UART_Start_Receive_DMA+0xc4>)
 8009ffe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a004:	2200      	movs	r2, #0
 800a006:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a008:	f107 0308 	add.w	r3, r7, #8
 800a00c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3304      	adds	r3, #4
 800a018:	4619      	mov	r1, r3
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	88fb      	ldrh	r3, [r7, #6]
 800a020:	f7fa ff5a 	bl	8004ed8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a024:	2300      	movs	r3, #0
 800a026:	613b      	str	r3, [r7, #16]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	613b      	str	r3, [r7, #16]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	613b      	str	r3, [r7, #16]
 800a038:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68da      	ldr	r2, [r3, #12]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a050:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	695a      	ldr	r2, [r3, #20]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f042 0201 	orr.w	r2, r2, #1
 800a060:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	695a      	ldr	r2, [r3, #20]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a070:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	08009e5f 	.word	0x08009e5f
 800a080:	08009ef5 	.word	0x08009ef5
 800a084:	08009f2b 	.word	0x08009f2b

0800a088 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68da      	ldr	r2, [r3, #12]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a09e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68da      	ldr	r2, [r3, #12]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	695a      	ldr	r2, [r3, #20]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f022 0201 	bic.w	r2, r2, #1
 800a0da:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d107      	bne.n	800a0f4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68da      	ldr	r2, [r3, #12]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f022 0210 	bic.w	r2, r2, #16
 800a0f2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a102:	bf00      	nop
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b084      	sub	sp, #16
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f7ff fe4b 	bl	8009dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a12e:	bf00      	nop
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a136:	b480      	push	{r7}
 800a138:	b085      	sub	sp, #20
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b21      	cmp	r3, #33	; 0x21
 800a148:	d13e      	bne.n	800a1c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a152:	d114      	bne.n	800a17e <UART_Transmit_IT+0x48>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d110      	bne.n	800a17e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a1b      	ldr	r3, [r3, #32]
 800a160:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a170:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	1c9a      	adds	r2, r3, #2
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	621a      	str	r2, [r3, #32]
 800a17c:	e008      	b.n	800a190 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	1c59      	adds	r1, r3, #1
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	6211      	str	r1, [r2, #32]
 800a188:	781a      	ldrb	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a194:	b29b      	uxth	r3, r3
 800a196:	3b01      	subs	r3, #1
 800a198:	b29b      	uxth	r3, r3
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	4619      	mov	r1, r3
 800a19e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10f      	bne.n	800a1c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68da      	ldr	r2, [r3, #12]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68da      	ldr	r2, [r3, #12]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	e000      	b.n	800a1ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a1c8:	2302      	movs	r3, #2
  }
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr

0800a1d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b082      	sub	sp, #8
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68da      	ldr	r2, [r3, #12]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7ff fdbc 	bl	8009d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b084      	sub	sp, #16
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b22      	cmp	r3, #34	; 0x22
 800a218:	f040 8087 	bne.w	800a32a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a224:	d117      	bne.n	800a256 <UART_Receive_IT+0x50>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d113      	bne.n	800a256 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a22e:	2300      	movs	r3, #0
 800a230:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a236:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	b29b      	uxth	r3, r3
 800a240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a244:	b29a      	uxth	r2, r3
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24e:	1c9a      	adds	r2, r3, #2
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	629a      	str	r2, [r3, #40]	; 0x28
 800a254:	e026      	b.n	800a2a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800a25c:	2300      	movs	r3, #0
 800a25e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a268:	d007      	beq.n	800a27a <UART_Receive_IT+0x74>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10a      	bne.n	800a288 <UART_Receive_IT+0x82>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	b2da      	uxtb	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	701a      	strb	r2, [r3, #0]
 800a286:	e008      	b.n	800a29a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a294:	b2da      	uxtb	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29e:	1c5a      	adds	r2, r3, #1
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d136      	bne.n	800a326 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68da      	ldr	r2, [r3, #12]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f022 0220 	bic.w	r2, r2, #32
 800a2c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68da      	ldr	r2, [r3, #12]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	695a      	ldr	r2, [r3, #20]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f022 0201 	bic.w	r2, r2, #1
 800a2e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d10e      	bne.n	800a316 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68da      	ldr	r2, [r3, #12]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f022 0210 	bic.w	r2, r2, #16
 800a306:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7ff fd62 	bl	8009dd8 <HAL_UARTEx_RxEventCallback>
 800a314:	e002      	b.n	800a31c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7ff fd40 	bl	8009d9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	e002      	b.n	800a32c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	e000      	b.n	800a32c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a32a:	2302      	movs	r3, #2
  }
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a338:	b0c0      	sub	sp, #256	; 0x100
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a34c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a350:	68d9      	ldr	r1, [r3, #12]
 800a352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	ea40 0301 	orr.w	r3, r0, r1
 800a35c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a35e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a362:	689a      	ldr	r2, [r3, #8]
 800a364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	431a      	orrs	r2, r3
 800a36c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	431a      	orrs	r2, r3
 800a374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a378:	69db      	ldr	r3, [r3, #28]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a38c:	f021 010c 	bic.w	r1, r1, #12
 800a390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a39a:	430b      	orrs	r3, r1
 800a39c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a39e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a3aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ae:	6999      	ldr	r1, [r3, #24]
 800a3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	ea40 0301 	orr.w	r3, r0, r1
 800a3ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	4b8f      	ldr	r3, [pc, #572]	; (800a600 <UART_SetConfig+0x2cc>)
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d005      	beq.n	800a3d4 <UART_SetConfig+0xa0>
 800a3c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	4b8d      	ldr	r3, [pc, #564]	; (800a604 <UART_SetConfig+0x2d0>)
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d104      	bne.n	800a3de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a3d4:	f7fe f8da 	bl	800858c <HAL_RCC_GetPCLK2Freq>
 800a3d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a3dc:	e003      	b.n	800a3e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a3de:	f7fe f8c1 	bl	8008564 <HAL_RCC_GetPCLK1Freq>
 800a3e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ea:	69db      	ldr	r3, [r3, #28]
 800a3ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3f0:	f040 810c 	bne.w	800a60c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a3f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a3fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a402:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a406:	4622      	mov	r2, r4
 800a408:	462b      	mov	r3, r5
 800a40a:	1891      	adds	r1, r2, r2
 800a40c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a40e:	415b      	adcs	r3, r3
 800a410:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a412:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a416:	4621      	mov	r1, r4
 800a418:	eb12 0801 	adds.w	r8, r2, r1
 800a41c:	4629      	mov	r1, r5
 800a41e:	eb43 0901 	adc.w	r9, r3, r1
 800a422:	f04f 0200 	mov.w	r2, #0
 800a426:	f04f 0300 	mov.w	r3, #0
 800a42a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a42e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a436:	4690      	mov	r8, r2
 800a438:	4699      	mov	r9, r3
 800a43a:	4623      	mov	r3, r4
 800a43c:	eb18 0303 	adds.w	r3, r8, r3
 800a440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a444:	462b      	mov	r3, r5
 800a446:	eb49 0303 	adc.w	r3, r9, r3
 800a44a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a44e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a45a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a45e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a462:	460b      	mov	r3, r1
 800a464:	18db      	adds	r3, r3, r3
 800a466:	653b      	str	r3, [r7, #80]	; 0x50
 800a468:	4613      	mov	r3, r2
 800a46a:	eb42 0303 	adc.w	r3, r2, r3
 800a46e:	657b      	str	r3, [r7, #84]	; 0x54
 800a470:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a474:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a478:	f7f6 fc98 	bl	8000dac <__aeabi_uldivmod>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	4b61      	ldr	r3, [pc, #388]	; (800a608 <UART_SetConfig+0x2d4>)
 800a482:	fba3 2302 	umull	r2, r3, r3, r2
 800a486:	095b      	lsrs	r3, r3, #5
 800a488:	011c      	lsls	r4, r3, #4
 800a48a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a48e:	2200      	movs	r2, #0
 800a490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a494:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a498:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a49c:	4642      	mov	r2, r8
 800a49e:	464b      	mov	r3, r9
 800a4a0:	1891      	adds	r1, r2, r2
 800a4a2:	64b9      	str	r1, [r7, #72]	; 0x48
 800a4a4:	415b      	adcs	r3, r3
 800a4a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a4ac:	4641      	mov	r1, r8
 800a4ae:	eb12 0a01 	adds.w	sl, r2, r1
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	eb43 0b01 	adc.w	fp, r3, r1
 800a4b8:	f04f 0200 	mov.w	r2, #0
 800a4bc:	f04f 0300 	mov.w	r3, #0
 800a4c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a4c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a4c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a4cc:	4692      	mov	sl, r2
 800a4ce:	469b      	mov	fp, r3
 800a4d0:	4643      	mov	r3, r8
 800a4d2:	eb1a 0303 	adds.w	r3, sl, r3
 800a4d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4da:	464b      	mov	r3, r9
 800a4dc:	eb4b 0303 	adc.w	r3, fp, r3
 800a4e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a4e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a4f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	18db      	adds	r3, r3, r3
 800a4fc:	643b      	str	r3, [r7, #64]	; 0x40
 800a4fe:	4613      	mov	r3, r2
 800a500:	eb42 0303 	adc.w	r3, r2, r3
 800a504:	647b      	str	r3, [r7, #68]	; 0x44
 800a506:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a50a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a50e:	f7f6 fc4d 	bl	8000dac <__aeabi_uldivmod>
 800a512:	4602      	mov	r2, r0
 800a514:	460b      	mov	r3, r1
 800a516:	4611      	mov	r1, r2
 800a518:	4b3b      	ldr	r3, [pc, #236]	; (800a608 <UART_SetConfig+0x2d4>)
 800a51a:	fba3 2301 	umull	r2, r3, r3, r1
 800a51e:	095b      	lsrs	r3, r3, #5
 800a520:	2264      	movs	r2, #100	; 0x64
 800a522:	fb02 f303 	mul.w	r3, r2, r3
 800a526:	1acb      	subs	r3, r1, r3
 800a528:	00db      	lsls	r3, r3, #3
 800a52a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a52e:	4b36      	ldr	r3, [pc, #216]	; (800a608 <UART_SetConfig+0x2d4>)
 800a530:	fba3 2302 	umull	r2, r3, r3, r2
 800a534:	095b      	lsrs	r3, r3, #5
 800a536:	005b      	lsls	r3, r3, #1
 800a538:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a53c:	441c      	add	r4, r3
 800a53e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a542:	2200      	movs	r2, #0
 800a544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a548:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a54c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a550:	4642      	mov	r2, r8
 800a552:	464b      	mov	r3, r9
 800a554:	1891      	adds	r1, r2, r2
 800a556:	63b9      	str	r1, [r7, #56]	; 0x38
 800a558:	415b      	adcs	r3, r3
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a55c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a560:	4641      	mov	r1, r8
 800a562:	1851      	adds	r1, r2, r1
 800a564:	6339      	str	r1, [r7, #48]	; 0x30
 800a566:	4649      	mov	r1, r9
 800a568:	414b      	adcs	r3, r1
 800a56a:	637b      	str	r3, [r7, #52]	; 0x34
 800a56c:	f04f 0200 	mov.w	r2, #0
 800a570:	f04f 0300 	mov.w	r3, #0
 800a574:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a578:	4659      	mov	r1, fp
 800a57a:	00cb      	lsls	r3, r1, #3
 800a57c:	4651      	mov	r1, sl
 800a57e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a582:	4651      	mov	r1, sl
 800a584:	00ca      	lsls	r2, r1, #3
 800a586:	4610      	mov	r0, r2
 800a588:	4619      	mov	r1, r3
 800a58a:	4603      	mov	r3, r0
 800a58c:	4642      	mov	r2, r8
 800a58e:	189b      	adds	r3, r3, r2
 800a590:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a594:	464b      	mov	r3, r9
 800a596:	460a      	mov	r2, r1
 800a598:	eb42 0303 	adc.w	r3, r2, r3
 800a59c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a5ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a5b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	18db      	adds	r3, r3, r3
 800a5b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	eb42 0303 	adc.w	r3, r2, r3
 800a5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a5c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a5ca:	f7f6 fbef 	bl	8000dac <__aeabi_uldivmod>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4b0d      	ldr	r3, [pc, #52]	; (800a608 <UART_SetConfig+0x2d4>)
 800a5d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a5d8:	095b      	lsrs	r3, r3, #5
 800a5da:	2164      	movs	r1, #100	; 0x64
 800a5dc:	fb01 f303 	mul.w	r3, r1, r3
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	00db      	lsls	r3, r3, #3
 800a5e4:	3332      	adds	r3, #50	; 0x32
 800a5e6:	4a08      	ldr	r2, [pc, #32]	; (800a608 <UART_SetConfig+0x2d4>)
 800a5e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ec:	095b      	lsrs	r3, r3, #5
 800a5ee:	f003 0207 	and.w	r2, r3, #7
 800a5f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4422      	add	r2, r4
 800a5fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a5fc:	e105      	b.n	800a80a <UART_SetConfig+0x4d6>
 800a5fe:	bf00      	nop
 800a600:	40011000 	.word	0x40011000
 800a604:	40011400 	.word	0x40011400
 800a608:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a60c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a610:	2200      	movs	r2, #0
 800a612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a616:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a61a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a61e:	4642      	mov	r2, r8
 800a620:	464b      	mov	r3, r9
 800a622:	1891      	adds	r1, r2, r2
 800a624:	6239      	str	r1, [r7, #32]
 800a626:	415b      	adcs	r3, r3
 800a628:	627b      	str	r3, [r7, #36]	; 0x24
 800a62a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a62e:	4641      	mov	r1, r8
 800a630:	1854      	adds	r4, r2, r1
 800a632:	4649      	mov	r1, r9
 800a634:	eb43 0501 	adc.w	r5, r3, r1
 800a638:	f04f 0200 	mov.w	r2, #0
 800a63c:	f04f 0300 	mov.w	r3, #0
 800a640:	00eb      	lsls	r3, r5, #3
 800a642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a646:	00e2      	lsls	r2, r4, #3
 800a648:	4614      	mov	r4, r2
 800a64a:	461d      	mov	r5, r3
 800a64c:	4643      	mov	r3, r8
 800a64e:	18e3      	adds	r3, r4, r3
 800a650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a654:	464b      	mov	r3, r9
 800a656:	eb45 0303 	adc.w	r3, r5, r3
 800a65a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a65e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a66a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a66e:	f04f 0200 	mov.w	r2, #0
 800a672:	f04f 0300 	mov.w	r3, #0
 800a676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a67a:	4629      	mov	r1, r5
 800a67c:	008b      	lsls	r3, r1, #2
 800a67e:	4621      	mov	r1, r4
 800a680:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a684:	4621      	mov	r1, r4
 800a686:	008a      	lsls	r2, r1, #2
 800a688:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a68c:	f7f6 fb8e 	bl	8000dac <__aeabi_uldivmod>
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	4b60      	ldr	r3, [pc, #384]	; (800a818 <UART_SetConfig+0x4e4>)
 800a696:	fba3 2302 	umull	r2, r3, r3, r2
 800a69a:	095b      	lsrs	r3, r3, #5
 800a69c:	011c      	lsls	r4, r3, #4
 800a69e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a6ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a6b0:	4642      	mov	r2, r8
 800a6b2:	464b      	mov	r3, r9
 800a6b4:	1891      	adds	r1, r2, r2
 800a6b6:	61b9      	str	r1, [r7, #24]
 800a6b8:	415b      	adcs	r3, r3
 800a6ba:	61fb      	str	r3, [r7, #28]
 800a6bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6c0:	4641      	mov	r1, r8
 800a6c2:	1851      	adds	r1, r2, r1
 800a6c4:	6139      	str	r1, [r7, #16]
 800a6c6:	4649      	mov	r1, r9
 800a6c8:	414b      	adcs	r3, r1
 800a6ca:	617b      	str	r3, [r7, #20]
 800a6cc:	f04f 0200 	mov.w	r2, #0
 800a6d0:	f04f 0300 	mov.w	r3, #0
 800a6d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a6d8:	4659      	mov	r1, fp
 800a6da:	00cb      	lsls	r3, r1, #3
 800a6dc:	4651      	mov	r1, sl
 800a6de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6e2:	4651      	mov	r1, sl
 800a6e4:	00ca      	lsls	r2, r1, #3
 800a6e6:	4610      	mov	r0, r2
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	189b      	adds	r3, r3, r2
 800a6f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6f4:	464b      	mov	r3, r9
 800a6f6:	460a      	mov	r2, r1
 800a6f8:	eb42 0303 	adc.w	r3, r2, r3
 800a6fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	67bb      	str	r3, [r7, #120]	; 0x78
 800a70a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a70c:	f04f 0200 	mov.w	r2, #0
 800a710:	f04f 0300 	mov.w	r3, #0
 800a714:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a718:	4649      	mov	r1, r9
 800a71a:	008b      	lsls	r3, r1, #2
 800a71c:	4641      	mov	r1, r8
 800a71e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a722:	4641      	mov	r1, r8
 800a724:	008a      	lsls	r2, r1, #2
 800a726:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a72a:	f7f6 fb3f 	bl	8000dac <__aeabi_uldivmod>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	4b39      	ldr	r3, [pc, #228]	; (800a818 <UART_SetConfig+0x4e4>)
 800a734:	fba3 1302 	umull	r1, r3, r3, r2
 800a738:	095b      	lsrs	r3, r3, #5
 800a73a:	2164      	movs	r1, #100	; 0x64
 800a73c:	fb01 f303 	mul.w	r3, r1, r3
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	011b      	lsls	r3, r3, #4
 800a744:	3332      	adds	r3, #50	; 0x32
 800a746:	4a34      	ldr	r2, [pc, #208]	; (800a818 <UART_SetConfig+0x4e4>)
 800a748:	fba2 2303 	umull	r2, r3, r2, r3
 800a74c:	095b      	lsrs	r3, r3, #5
 800a74e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a752:	441c      	add	r4, r3
 800a754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a758:	2200      	movs	r2, #0
 800a75a:	673b      	str	r3, [r7, #112]	; 0x70
 800a75c:	677a      	str	r2, [r7, #116]	; 0x74
 800a75e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a762:	4642      	mov	r2, r8
 800a764:	464b      	mov	r3, r9
 800a766:	1891      	adds	r1, r2, r2
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	415b      	adcs	r3, r3
 800a76c:	60fb      	str	r3, [r7, #12]
 800a76e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a772:	4641      	mov	r1, r8
 800a774:	1851      	adds	r1, r2, r1
 800a776:	6039      	str	r1, [r7, #0]
 800a778:	4649      	mov	r1, r9
 800a77a:	414b      	adcs	r3, r1
 800a77c:	607b      	str	r3, [r7, #4]
 800a77e:	f04f 0200 	mov.w	r2, #0
 800a782:	f04f 0300 	mov.w	r3, #0
 800a786:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a78a:	4659      	mov	r1, fp
 800a78c:	00cb      	lsls	r3, r1, #3
 800a78e:	4651      	mov	r1, sl
 800a790:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a794:	4651      	mov	r1, sl
 800a796:	00ca      	lsls	r2, r1, #3
 800a798:	4610      	mov	r0, r2
 800a79a:	4619      	mov	r1, r3
 800a79c:	4603      	mov	r3, r0
 800a79e:	4642      	mov	r2, r8
 800a7a0:	189b      	adds	r3, r3, r2
 800a7a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7a4:	464b      	mov	r3, r9
 800a7a6:	460a      	mov	r2, r1
 800a7a8:	eb42 0303 	adc.w	r3, r2, r3
 800a7ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	663b      	str	r3, [r7, #96]	; 0x60
 800a7b8:	667a      	str	r2, [r7, #100]	; 0x64
 800a7ba:	f04f 0200 	mov.w	r2, #0
 800a7be:	f04f 0300 	mov.w	r3, #0
 800a7c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	008b      	lsls	r3, r1, #2
 800a7ca:	4641      	mov	r1, r8
 800a7cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7d0:	4641      	mov	r1, r8
 800a7d2:	008a      	lsls	r2, r1, #2
 800a7d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a7d8:	f7f6 fae8 	bl	8000dac <__aeabi_uldivmod>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4b0d      	ldr	r3, [pc, #52]	; (800a818 <UART_SetConfig+0x4e4>)
 800a7e2:	fba3 1302 	umull	r1, r3, r3, r2
 800a7e6:	095b      	lsrs	r3, r3, #5
 800a7e8:	2164      	movs	r1, #100	; 0x64
 800a7ea:	fb01 f303 	mul.w	r3, r1, r3
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	011b      	lsls	r3, r3, #4
 800a7f2:	3332      	adds	r3, #50	; 0x32
 800a7f4:	4a08      	ldr	r2, [pc, #32]	; (800a818 <UART_SetConfig+0x4e4>)
 800a7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7fa:	095b      	lsrs	r3, r3, #5
 800a7fc:	f003 020f 	and.w	r2, r3, #15
 800a800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4422      	add	r2, r4
 800a808:	609a      	str	r2, [r3, #8]
}
 800a80a:	bf00      	nop
 800a80c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a810:	46bd      	mov	sp, r7
 800a812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a816:	bf00      	nop
 800a818:	51eb851f 	.word	0x51eb851f

0800a81c <calloc>:
 800a81c:	4b02      	ldr	r3, [pc, #8]	; (800a828 <calloc+0xc>)
 800a81e:	460a      	mov	r2, r1
 800a820:	4601      	mov	r1, r0
 800a822:	6818      	ldr	r0, [r3, #0]
 800a824:	f000 b842 	b.w	800a8ac <_calloc_r>
 800a828:	20000024 	.word	0x20000024

0800a82c <__errno>:
 800a82c:	4b01      	ldr	r3, [pc, #4]	; (800a834 <__errno+0x8>)
 800a82e:	6818      	ldr	r0, [r3, #0]
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	20000024 	.word	0x20000024

0800a838 <__libc_init_array>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	4d0d      	ldr	r5, [pc, #52]	; (800a870 <__libc_init_array+0x38>)
 800a83c:	4c0d      	ldr	r4, [pc, #52]	; (800a874 <__libc_init_array+0x3c>)
 800a83e:	1b64      	subs	r4, r4, r5
 800a840:	10a4      	asrs	r4, r4, #2
 800a842:	2600      	movs	r6, #0
 800a844:	42a6      	cmp	r6, r4
 800a846:	d109      	bne.n	800a85c <__libc_init_array+0x24>
 800a848:	4d0b      	ldr	r5, [pc, #44]	; (800a878 <__libc_init_array+0x40>)
 800a84a:	4c0c      	ldr	r4, [pc, #48]	; (800a87c <__libc_init_array+0x44>)
 800a84c:	f000 f9d4 	bl	800abf8 <_init>
 800a850:	1b64      	subs	r4, r4, r5
 800a852:	10a4      	asrs	r4, r4, #2
 800a854:	2600      	movs	r6, #0
 800a856:	42a6      	cmp	r6, r4
 800a858:	d105      	bne.n	800a866 <__libc_init_array+0x2e>
 800a85a:	bd70      	pop	{r4, r5, r6, pc}
 800a85c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a860:	4798      	blx	r3
 800a862:	3601      	adds	r6, #1
 800a864:	e7ee      	b.n	800a844 <__libc_init_array+0xc>
 800a866:	f855 3b04 	ldr.w	r3, [r5], #4
 800a86a:	4798      	blx	r3
 800a86c:	3601      	adds	r6, #1
 800a86e:	e7f2      	b.n	800a856 <__libc_init_array+0x1e>
 800a870:	0800ac50 	.word	0x0800ac50
 800a874:	0800ac50 	.word	0x0800ac50
 800a878:	0800ac50 	.word	0x0800ac50
 800a87c:	0800ac54 	.word	0x0800ac54

0800a880 <memcpy>:
 800a880:	440a      	add	r2, r1
 800a882:	4291      	cmp	r1, r2
 800a884:	f100 33ff 	add.w	r3, r0, #4294967295
 800a888:	d100      	bne.n	800a88c <memcpy+0xc>
 800a88a:	4770      	bx	lr
 800a88c:	b510      	push	{r4, lr}
 800a88e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a892:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a896:	4291      	cmp	r1, r2
 800a898:	d1f9      	bne.n	800a88e <memcpy+0xe>
 800a89a:	bd10      	pop	{r4, pc}

0800a89c <memset>:
 800a89c:	4402      	add	r2, r0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d100      	bne.n	800a8a6 <memset+0xa>
 800a8a4:	4770      	bx	lr
 800a8a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8aa:	e7f9      	b.n	800a8a0 <memset+0x4>

0800a8ac <_calloc_r>:
 800a8ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ae:	fba1 2402 	umull	r2, r4, r1, r2
 800a8b2:	b94c      	cbnz	r4, 800a8c8 <_calloc_r+0x1c>
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	9201      	str	r2, [sp, #4]
 800a8b8:	f000 f82e 	bl	800a918 <_malloc_r>
 800a8bc:	9a01      	ldr	r2, [sp, #4]
 800a8be:	4605      	mov	r5, r0
 800a8c0:	b930      	cbnz	r0, 800a8d0 <_calloc_r+0x24>
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	b003      	add	sp, #12
 800a8c6:	bd30      	pop	{r4, r5, pc}
 800a8c8:	220c      	movs	r2, #12
 800a8ca:	6002      	str	r2, [r0, #0]
 800a8cc:	2500      	movs	r5, #0
 800a8ce:	e7f8      	b.n	800a8c2 <_calloc_r+0x16>
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	f7ff ffe3 	bl	800a89c <memset>
 800a8d6:	e7f4      	b.n	800a8c2 <_calloc_r+0x16>

0800a8d8 <sbrk_aligned>:
 800a8d8:	b570      	push	{r4, r5, r6, lr}
 800a8da:	4e0e      	ldr	r6, [pc, #56]	; (800a914 <sbrk_aligned+0x3c>)
 800a8dc:	460c      	mov	r4, r1
 800a8de:	6831      	ldr	r1, [r6, #0]
 800a8e0:	4605      	mov	r5, r0
 800a8e2:	b911      	cbnz	r1, 800a8ea <sbrk_aligned+0x12>
 800a8e4:	f000 f88c 	bl	800aa00 <_sbrk_r>
 800a8e8:	6030      	str	r0, [r6, #0]
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	f000 f887 	bl	800aa00 <_sbrk_r>
 800a8f2:	1c43      	adds	r3, r0, #1
 800a8f4:	d00a      	beq.n	800a90c <sbrk_aligned+0x34>
 800a8f6:	1cc4      	adds	r4, r0, #3
 800a8f8:	f024 0403 	bic.w	r4, r4, #3
 800a8fc:	42a0      	cmp	r0, r4
 800a8fe:	d007      	beq.n	800a910 <sbrk_aligned+0x38>
 800a900:	1a21      	subs	r1, r4, r0
 800a902:	4628      	mov	r0, r5
 800a904:	f000 f87c 	bl	800aa00 <_sbrk_r>
 800a908:	3001      	adds	r0, #1
 800a90a:	d101      	bne.n	800a910 <sbrk_aligned+0x38>
 800a90c:	f04f 34ff 	mov.w	r4, #4294967295
 800a910:	4620      	mov	r0, r4
 800a912:	bd70      	pop	{r4, r5, r6, pc}
 800a914:	20000710 	.word	0x20000710

0800a918 <_malloc_r>:
 800a918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91c:	1ccd      	adds	r5, r1, #3
 800a91e:	f025 0503 	bic.w	r5, r5, #3
 800a922:	3508      	adds	r5, #8
 800a924:	2d0c      	cmp	r5, #12
 800a926:	bf38      	it	cc
 800a928:	250c      	movcc	r5, #12
 800a92a:	2d00      	cmp	r5, #0
 800a92c:	4607      	mov	r7, r0
 800a92e:	db01      	blt.n	800a934 <_malloc_r+0x1c>
 800a930:	42a9      	cmp	r1, r5
 800a932:	d905      	bls.n	800a940 <_malloc_r+0x28>
 800a934:	230c      	movs	r3, #12
 800a936:	603b      	str	r3, [r7, #0]
 800a938:	2600      	movs	r6, #0
 800a93a:	4630      	mov	r0, r6
 800a93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a940:	4e2e      	ldr	r6, [pc, #184]	; (800a9fc <_malloc_r+0xe4>)
 800a942:	f000 f86d 	bl	800aa20 <__malloc_lock>
 800a946:	6833      	ldr	r3, [r6, #0]
 800a948:	461c      	mov	r4, r3
 800a94a:	bb34      	cbnz	r4, 800a99a <_malloc_r+0x82>
 800a94c:	4629      	mov	r1, r5
 800a94e:	4638      	mov	r0, r7
 800a950:	f7ff ffc2 	bl	800a8d8 <sbrk_aligned>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	4604      	mov	r4, r0
 800a958:	d14d      	bne.n	800a9f6 <_malloc_r+0xde>
 800a95a:	6834      	ldr	r4, [r6, #0]
 800a95c:	4626      	mov	r6, r4
 800a95e:	2e00      	cmp	r6, #0
 800a960:	d140      	bne.n	800a9e4 <_malloc_r+0xcc>
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	4631      	mov	r1, r6
 800a966:	4638      	mov	r0, r7
 800a968:	eb04 0803 	add.w	r8, r4, r3
 800a96c:	f000 f848 	bl	800aa00 <_sbrk_r>
 800a970:	4580      	cmp	r8, r0
 800a972:	d13a      	bne.n	800a9ea <_malloc_r+0xd2>
 800a974:	6821      	ldr	r1, [r4, #0]
 800a976:	3503      	adds	r5, #3
 800a978:	1a6d      	subs	r5, r5, r1
 800a97a:	f025 0503 	bic.w	r5, r5, #3
 800a97e:	3508      	adds	r5, #8
 800a980:	2d0c      	cmp	r5, #12
 800a982:	bf38      	it	cc
 800a984:	250c      	movcc	r5, #12
 800a986:	4629      	mov	r1, r5
 800a988:	4638      	mov	r0, r7
 800a98a:	f7ff ffa5 	bl	800a8d8 <sbrk_aligned>
 800a98e:	3001      	adds	r0, #1
 800a990:	d02b      	beq.n	800a9ea <_malloc_r+0xd2>
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	442b      	add	r3, r5
 800a996:	6023      	str	r3, [r4, #0]
 800a998:	e00e      	b.n	800a9b8 <_malloc_r+0xa0>
 800a99a:	6822      	ldr	r2, [r4, #0]
 800a99c:	1b52      	subs	r2, r2, r5
 800a99e:	d41e      	bmi.n	800a9de <_malloc_r+0xc6>
 800a9a0:	2a0b      	cmp	r2, #11
 800a9a2:	d916      	bls.n	800a9d2 <_malloc_r+0xba>
 800a9a4:	1961      	adds	r1, r4, r5
 800a9a6:	42a3      	cmp	r3, r4
 800a9a8:	6025      	str	r5, [r4, #0]
 800a9aa:	bf18      	it	ne
 800a9ac:	6059      	strne	r1, [r3, #4]
 800a9ae:	6863      	ldr	r3, [r4, #4]
 800a9b0:	bf08      	it	eq
 800a9b2:	6031      	streq	r1, [r6, #0]
 800a9b4:	5162      	str	r2, [r4, r5]
 800a9b6:	604b      	str	r3, [r1, #4]
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	f104 060b 	add.w	r6, r4, #11
 800a9be:	f000 f835 	bl	800aa2c <__malloc_unlock>
 800a9c2:	f026 0607 	bic.w	r6, r6, #7
 800a9c6:	1d23      	adds	r3, r4, #4
 800a9c8:	1af2      	subs	r2, r6, r3
 800a9ca:	d0b6      	beq.n	800a93a <_malloc_r+0x22>
 800a9cc:	1b9b      	subs	r3, r3, r6
 800a9ce:	50a3      	str	r3, [r4, r2]
 800a9d0:	e7b3      	b.n	800a93a <_malloc_r+0x22>
 800a9d2:	6862      	ldr	r2, [r4, #4]
 800a9d4:	42a3      	cmp	r3, r4
 800a9d6:	bf0c      	ite	eq
 800a9d8:	6032      	streq	r2, [r6, #0]
 800a9da:	605a      	strne	r2, [r3, #4]
 800a9dc:	e7ec      	b.n	800a9b8 <_malloc_r+0xa0>
 800a9de:	4623      	mov	r3, r4
 800a9e0:	6864      	ldr	r4, [r4, #4]
 800a9e2:	e7b2      	b.n	800a94a <_malloc_r+0x32>
 800a9e4:	4634      	mov	r4, r6
 800a9e6:	6876      	ldr	r6, [r6, #4]
 800a9e8:	e7b9      	b.n	800a95e <_malloc_r+0x46>
 800a9ea:	230c      	movs	r3, #12
 800a9ec:	603b      	str	r3, [r7, #0]
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	f000 f81c 	bl	800aa2c <__malloc_unlock>
 800a9f4:	e7a1      	b.n	800a93a <_malloc_r+0x22>
 800a9f6:	6025      	str	r5, [r4, #0]
 800a9f8:	e7de      	b.n	800a9b8 <_malloc_r+0xa0>
 800a9fa:	bf00      	nop
 800a9fc:	2000070c 	.word	0x2000070c

0800aa00 <_sbrk_r>:
 800aa00:	b538      	push	{r3, r4, r5, lr}
 800aa02:	4d06      	ldr	r5, [pc, #24]	; (800aa1c <_sbrk_r+0x1c>)
 800aa04:	2300      	movs	r3, #0
 800aa06:	4604      	mov	r4, r0
 800aa08:	4608      	mov	r0, r1
 800aa0a:	602b      	str	r3, [r5, #0]
 800aa0c:	f7f9 ff98 	bl	8004940 <_sbrk>
 800aa10:	1c43      	adds	r3, r0, #1
 800aa12:	d102      	bne.n	800aa1a <_sbrk_r+0x1a>
 800aa14:	682b      	ldr	r3, [r5, #0]
 800aa16:	b103      	cbz	r3, 800aa1a <_sbrk_r+0x1a>
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	bd38      	pop	{r3, r4, r5, pc}
 800aa1c:	20000714 	.word	0x20000714

0800aa20 <__malloc_lock>:
 800aa20:	4801      	ldr	r0, [pc, #4]	; (800aa28 <__malloc_lock+0x8>)
 800aa22:	f000 b809 	b.w	800aa38 <__retarget_lock_acquire_recursive>
 800aa26:	bf00      	nop
 800aa28:	20000718 	.word	0x20000718

0800aa2c <__malloc_unlock>:
 800aa2c:	4801      	ldr	r0, [pc, #4]	; (800aa34 <__malloc_unlock+0x8>)
 800aa2e:	f000 b804 	b.w	800aa3a <__retarget_lock_release_recursive>
 800aa32:	bf00      	nop
 800aa34:	20000718 	.word	0x20000718

0800aa38 <__retarget_lock_acquire_recursive>:
 800aa38:	4770      	bx	lr

0800aa3a <__retarget_lock_release_recursive>:
 800aa3a:	4770      	bx	lr

0800aa3c <sqrt>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	ed2d 8b02 	vpush	{d8}
 800aa42:	ec55 4b10 	vmov	r4, r5, d0
 800aa46:	f000 f825 	bl	800aa94 <__ieee754_sqrt>
 800aa4a:	4622      	mov	r2, r4
 800aa4c:	462b      	mov	r3, r5
 800aa4e:	4620      	mov	r0, r4
 800aa50:	4629      	mov	r1, r5
 800aa52:	eeb0 8a40 	vmov.f32	s16, s0
 800aa56:	eef0 8a60 	vmov.f32	s17, s1
 800aa5a:	f7f6 f813 	bl	8000a84 <__aeabi_dcmpun>
 800aa5e:	b990      	cbnz	r0, 800aa86 <sqrt+0x4a>
 800aa60:	2200      	movs	r2, #0
 800aa62:	2300      	movs	r3, #0
 800aa64:	4620      	mov	r0, r4
 800aa66:	4629      	mov	r1, r5
 800aa68:	f7f5 ffe4 	bl	8000a34 <__aeabi_dcmplt>
 800aa6c:	b158      	cbz	r0, 800aa86 <sqrt+0x4a>
 800aa6e:	f7ff fedd 	bl	800a82c <__errno>
 800aa72:	2321      	movs	r3, #33	; 0x21
 800aa74:	6003      	str	r3, [r0, #0]
 800aa76:	2200      	movs	r2, #0
 800aa78:	2300      	movs	r3, #0
 800aa7a:	4610      	mov	r0, r2
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	f7f5 fe91 	bl	80007a4 <__aeabi_ddiv>
 800aa82:	ec41 0b18 	vmov	d8, r0, r1
 800aa86:	eeb0 0a48 	vmov.f32	s0, s16
 800aa8a:	eef0 0a68 	vmov.f32	s1, s17
 800aa8e:	ecbd 8b02 	vpop	{d8}
 800aa92:	bd38      	pop	{r3, r4, r5, pc}

0800aa94 <__ieee754_sqrt>:
 800aa94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa98:	ec55 4b10 	vmov	r4, r5, d0
 800aa9c:	4e55      	ldr	r6, [pc, #340]	; (800abf4 <__ieee754_sqrt+0x160>)
 800aa9e:	43ae      	bics	r6, r5
 800aaa0:	ee10 0a10 	vmov	r0, s0
 800aaa4:	ee10 3a10 	vmov	r3, s0
 800aaa8:	462a      	mov	r2, r5
 800aaaa:	4629      	mov	r1, r5
 800aaac:	d110      	bne.n	800aad0 <__ieee754_sqrt+0x3c>
 800aaae:	ee10 2a10 	vmov	r2, s0
 800aab2:	462b      	mov	r3, r5
 800aab4:	f7f5 fd4c 	bl	8000550 <__aeabi_dmul>
 800aab8:	4602      	mov	r2, r0
 800aaba:	460b      	mov	r3, r1
 800aabc:	4620      	mov	r0, r4
 800aabe:	4629      	mov	r1, r5
 800aac0:	f7f5 fb90 	bl	80001e4 <__adddf3>
 800aac4:	4604      	mov	r4, r0
 800aac6:	460d      	mov	r5, r1
 800aac8:	ec45 4b10 	vmov	d0, r4, r5
 800aacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad0:	2d00      	cmp	r5, #0
 800aad2:	dc10      	bgt.n	800aaf6 <__ieee754_sqrt+0x62>
 800aad4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aad8:	4330      	orrs	r0, r6
 800aada:	d0f5      	beq.n	800aac8 <__ieee754_sqrt+0x34>
 800aadc:	b15d      	cbz	r5, 800aaf6 <__ieee754_sqrt+0x62>
 800aade:	ee10 2a10 	vmov	r2, s0
 800aae2:	462b      	mov	r3, r5
 800aae4:	ee10 0a10 	vmov	r0, s0
 800aae8:	f7f5 fb7a 	bl	80001e0 <__aeabi_dsub>
 800aaec:	4602      	mov	r2, r0
 800aaee:	460b      	mov	r3, r1
 800aaf0:	f7f5 fe58 	bl	80007a4 <__aeabi_ddiv>
 800aaf4:	e7e6      	b.n	800aac4 <__ieee754_sqrt+0x30>
 800aaf6:	1512      	asrs	r2, r2, #20
 800aaf8:	d074      	beq.n	800abe4 <__ieee754_sqrt+0x150>
 800aafa:	07d4      	lsls	r4, r2, #31
 800aafc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ab00:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ab04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ab08:	bf5e      	ittt	pl
 800ab0a:	0fda      	lsrpl	r2, r3, #31
 800ab0c:	005b      	lslpl	r3, r3, #1
 800ab0e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ab12:	2400      	movs	r4, #0
 800ab14:	0fda      	lsrs	r2, r3, #31
 800ab16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ab1a:	107f      	asrs	r7, r7, #1
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	2516      	movs	r5, #22
 800ab20:	4620      	mov	r0, r4
 800ab22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ab26:	1886      	adds	r6, r0, r2
 800ab28:	428e      	cmp	r6, r1
 800ab2a:	bfde      	ittt	le
 800ab2c:	1b89      	suble	r1, r1, r6
 800ab2e:	18b0      	addle	r0, r6, r2
 800ab30:	18a4      	addle	r4, r4, r2
 800ab32:	0049      	lsls	r1, r1, #1
 800ab34:	3d01      	subs	r5, #1
 800ab36:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ab3a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ab3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab42:	d1f0      	bne.n	800ab26 <__ieee754_sqrt+0x92>
 800ab44:	462a      	mov	r2, r5
 800ab46:	f04f 0e20 	mov.w	lr, #32
 800ab4a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ab4e:	4281      	cmp	r1, r0
 800ab50:	eb06 0c05 	add.w	ip, r6, r5
 800ab54:	dc02      	bgt.n	800ab5c <__ieee754_sqrt+0xc8>
 800ab56:	d113      	bne.n	800ab80 <__ieee754_sqrt+0xec>
 800ab58:	459c      	cmp	ip, r3
 800ab5a:	d811      	bhi.n	800ab80 <__ieee754_sqrt+0xec>
 800ab5c:	f1bc 0f00 	cmp.w	ip, #0
 800ab60:	eb0c 0506 	add.w	r5, ip, r6
 800ab64:	da43      	bge.n	800abee <__ieee754_sqrt+0x15a>
 800ab66:	2d00      	cmp	r5, #0
 800ab68:	db41      	blt.n	800abee <__ieee754_sqrt+0x15a>
 800ab6a:	f100 0801 	add.w	r8, r0, #1
 800ab6e:	1a09      	subs	r1, r1, r0
 800ab70:	459c      	cmp	ip, r3
 800ab72:	bf88      	it	hi
 800ab74:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ab78:	eba3 030c 	sub.w	r3, r3, ip
 800ab7c:	4432      	add	r2, r6
 800ab7e:	4640      	mov	r0, r8
 800ab80:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ab84:	f1be 0e01 	subs.w	lr, lr, #1
 800ab88:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ab8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ab94:	d1db      	bne.n	800ab4e <__ieee754_sqrt+0xba>
 800ab96:	430b      	orrs	r3, r1
 800ab98:	d006      	beq.n	800aba8 <__ieee754_sqrt+0x114>
 800ab9a:	1c50      	adds	r0, r2, #1
 800ab9c:	bf13      	iteet	ne
 800ab9e:	3201      	addne	r2, #1
 800aba0:	3401      	addeq	r4, #1
 800aba2:	4672      	moveq	r2, lr
 800aba4:	f022 0201 	bicne.w	r2, r2, #1
 800aba8:	1063      	asrs	r3, r4, #1
 800abaa:	0852      	lsrs	r2, r2, #1
 800abac:	07e1      	lsls	r1, r4, #31
 800abae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800abb2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800abb6:	bf48      	it	mi
 800abb8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800abbc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800abc0:	4614      	mov	r4, r2
 800abc2:	e781      	b.n	800aac8 <__ieee754_sqrt+0x34>
 800abc4:	0ad9      	lsrs	r1, r3, #11
 800abc6:	3815      	subs	r0, #21
 800abc8:	055b      	lsls	r3, r3, #21
 800abca:	2900      	cmp	r1, #0
 800abcc:	d0fa      	beq.n	800abc4 <__ieee754_sqrt+0x130>
 800abce:	02cd      	lsls	r5, r1, #11
 800abd0:	d50a      	bpl.n	800abe8 <__ieee754_sqrt+0x154>
 800abd2:	f1c2 0420 	rsb	r4, r2, #32
 800abd6:	fa23 f404 	lsr.w	r4, r3, r4
 800abda:	1e55      	subs	r5, r2, #1
 800abdc:	4093      	lsls	r3, r2
 800abde:	4321      	orrs	r1, r4
 800abe0:	1b42      	subs	r2, r0, r5
 800abe2:	e78a      	b.n	800aafa <__ieee754_sqrt+0x66>
 800abe4:	4610      	mov	r0, r2
 800abe6:	e7f0      	b.n	800abca <__ieee754_sqrt+0x136>
 800abe8:	0049      	lsls	r1, r1, #1
 800abea:	3201      	adds	r2, #1
 800abec:	e7ef      	b.n	800abce <__ieee754_sqrt+0x13a>
 800abee:	4680      	mov	r8, r0
 800abf0:	e7bd      	b.n	800ab6e <__ieee754_sqrt+0xda>
 800abf2:	bf00      	nop
 800abf4:	7ff00000 	.word	0x7ff00000

0800abf8 <_init>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	bf00      	nop
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr

0800ac04 <_fini>:
 800ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac06:	bf00      	nop
 800ac08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac0a:	bc08      	pop	{r3}
 800ac0c:	469e      	mov	lr, r3
 800ac0e:	4770      	bx	lr
