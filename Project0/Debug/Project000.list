
Project000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095a4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800973c  0800973c  0001973c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009774  08009774  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009774  08009774  00019774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800977c  0800977c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800977c  0800977c  0001977c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009780  08009780  00019780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  20000090  08009814  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  08009814  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e64  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  00030f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00032f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  00033f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f6b  00000000  00000000  00034ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011acd  00000000  00000000  0004be53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091cb4  00000000  00000000  0005d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef5d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a3c  00000000  00000000  000ef628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009724 	.word	0x08009724

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08009724 	.word	0x08009724

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96e 	b.w	80010a0 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468c      	mov	ip, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8083 	bne.w	8000ef2 <__udivmoddi4+0x116>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4617      	mov	r7, r2
 8000df0:	d947      	bls.n	8000e82 <__udivmoddi4+0xa6>
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b142      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	f1c2 0020 	rsb	r0, r2, #32
 8000dfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	ea40 0c01 	orr.w	ip, r0, r1
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fbbc f6f8 	udiv	r6, ip, r8
 8000e14:	fa1f fe87 	uxth.w	lr, r7
 8000e18:	fb08 c116 	mls	r1, r8, r6, ip
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f10e 	mul.w	r1, r6, lr
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x60>
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 8119 	bcs.w	8001064 <__udivmoddi4+0x288>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 8116 	bls.w	8001064 <__udivmoddi4+0x288>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	443b      	add	r3, r7
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x8c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	f080 8105 	bcs.w	8001068 <__udivmoddi4+0x28c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8102 	bls.w	8001068 <__udivmoddi4+0x28c>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6c:	eba4 040e 	sub.w	r4, r4, lr
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa0>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	b902      	cbnz	r2, 8000e86 <__udivmoddi4+0xaa>
 8000e84:	deff      	udf	#255	; 0xff
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d150      	bne.n	8000f30 <__udivmoddi4+0x154>
 8000e8e:	1bcb      	subs	r3, r1, r7
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	2601      	movs	r6, #1
 8000e9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9e:	0c21      	lsrs	r1, r4, #16
 8000ea0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb08 f30c 	mul.w	r3, r8, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0xe4>
 8000eb0:	1879      	adds	r1, r7, r1
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0xe2>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	f200 80e9 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ecc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x10c>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x10a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80d9 	bhi.w	8001098 <__udivmoddi4+0x2bc>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e7bf      	b.n	8000e72 <__udivmoddi4+0x96>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0x12e>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	f000 80b1 	beq.w	800105e <__udivmoddi4+0x282>
 8000efc:	2600      	movs	r6, #0
 8000efe:	e9c5 0100 	strd	r0, r1, [r5]
 8000f02:	4630      	mov	r0, r6
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f683 	clz	r6, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d14a      	bne.n	8000fa8 <__udivmoddi4+0x1cc>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0x140>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80b8 	bhi.w	800108c <__udivmoddi4+0x2b0>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d0a8      	beq.n	8000e7c <__udivmoddi4+0xa0>
 8000f2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0xa0>
 8000f30:	f1c2 0320 	rsb	r3, r2, #32
 8000f34:	fa20 f603 	lsr.w	r6, r0, r3
 8000f38:	4097      	lsls	r7, r2
 8000f3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f42:	40d9      	lsrs	r1, r3
 8000f44:	4330      	orrs	r0, r6
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f4c:	fa1f f887 	uxth.w	r8, r7
 8000f50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f58:	fb06 f108 	mul.w	r1, r6, r8
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x19c>
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f6a:	f080 808d 	bcs.w	8001088 <__udivmoddi4+0x2ac>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	f240 808a 	bls.w	8001088 <__udivmoddi4+0x2ac>
 8000f74:	3e02      	subs	r6, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	b281      	uxth	r1, r0
 8000f7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb00 f308 	mul.w	r3, r0, r8
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d907      	bls.n	8000fa0 <__udivmoddi4+0x1c4>
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f96:	d273      	bcs.n	8001080 <__udivmoddi4+0x2a4>
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d971      	bls.n	8001080 <__udivmoddi4+0x2a4>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4439      	add	r1, r7
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa6:	e778      	b.n	8000e9a <__udivmoddi4+0xbe>
 8000fa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000fac:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fba:	fa01 f306 	lsl.w	r3, r1, r6
 8000fbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	0c3b      	lsrs	r3, r7, #16
 8000fca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fce:	fa1f f884 	uxth.w	r8, r4
 8000fd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fda:	fb09 fa08 	mul.w	sl, r9, r8
 8000fde:	458a      	cmp	sl, r1
 8000fe0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x220>
 8000fea:	1861      	adds	r1, r4, r1
 8000fec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff0:	d248      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8000ff2:	458a      	cmp	sl, r1
 8000ff4:	d946      	bls.n	8001084 <__udivmoddi4+0x2a8>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4421      	add	r1, r4
 8000ffc:	eba1 010a 	sub.w	r1, r1, sl
 8001000:	b2bf      	uxth	r7, r7
 8001002:	fbb1 f0fe 	udiv	r0, r1, lr
 8001006:	fb0e 1110 	mls	r1, lr, r0, r1
 800100a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100e:	fb00 f808 	mul.w	r8, r0, r8
 8001012:	45b8      	cmp	r8, r7
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x24a>
 8001016:	19e7      	adds	r7, r4, r7
 8001018:	f100 31ff 	add.w	r1, r0, #4294967295
 800101c:	d22e      	bcs.n	800107c <__udivmoddi4+0x2a0>
 800101e:	45b8      	cmp	r8, r7
 8001020:	d92c      	bls.n	800107c <__udivmoddi4+0x2a0>
 8001022:	3802      	subs	r0, #2
 8001024:	4427      	add	r7, r4
 8001026:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102a:	eba7 0708 	sub.w	r7, r7, r8
 800102e:	fba0 8902 	umull	r8, r9, r0, r2
 8001032:	454f      	cmp	r7, r9
 8001034:	46c6      	mov	lr, r8
 8001036:	4649      	mov	r1, r9
 8001038:	d31a      	bcc.n	8001070 <__udivmoddi4+0x294>
 800103a:	d017      	beq.n	800106c <__udivmoddi4+0x290>
 800103c:	b15d      	cbz	r5, 8001056 <__udivmoddi4+0x27a>
 800103e:	ebb3 020e 	subs.w	r2, r3, lr
 8001042:	eb67 0701 	sbc.w	r7, r7, r1
 8001046:	fa07 fc0c 	lsl.w	ip, r7, ip
 800104a:	40f2      	lsrs	r2, r6
 800104c:	ea4c 0202 	orr.w	r2, ip, r2
 8001050:	40f7      	lsrs	r7, r6
 8001052:	e9c5 2700 	strd	r2, r7, [r5]
 8001056:	2600      	movs	r6, #0
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	462e      	mov	r6, r5
 8001060:	4628      	mov	r0, r5
 8001062:	e70b      	b.n	8000e7c <__udivmoddi4+0xa0>
 8001064:	4606      	mov	r6, r0
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0x60>
 8001068:	4618      	mov	r0, r3
 800106a:	e6fd      	b.n	8000e68 <__udivmoddi4+0x8c>
 800106c:	4543      	cmp	r3, r8
 800106e:	d2e5      	bcs.n	800103c <__udivmoddi4+0x260>
 8001070:	ebb8 0e02 	subs.w	lr, r8, r2
 8001074:	eb69 0104 	sbc.w	r1, r9, r4
 8001078:	3801      	subs	r0, #1
 800107a:	e7df      	b.n	800103c <__udivmoddi4+0x260>
 800107c:	4608      	mov	r0, r1
 800107e:	e7d2      	b.n	8001026 <__udivmoddi4+0x24a>
 8001080:	4660      	mov	r0, ip
 8001082:	e78d      	b.n	8000fa0 <__udivmoddi4+0x1c4>
 8001084:	4681      	mov	r9, r0
 8001086:	e7b9      	b.n	8000ffc <__udivmoddi4+0x220>
 8001088:	4666      	mov	r6, ip
 800108a:	e775      	b.n	8000f78 <__udivmoddi4+0x19c>
 800108c:	4630      	mov	r0, r6
 800108e:	e74a      	b.n	8000f26 <__udivmoddi4+0x14a>
 8001090:	f1ac 0c02 	sub.w	ip, ip, #2
 8001094:	4439      	add	r1, r7
 8001096:	e713      	b.n	8000ec0 <__udivmoddi4+0xe4>
 8001098:	3802      	subs	r0, #2
 800109a:	443c      	add	r4, r7
 800109c:	e724      	b.n	8000ee8 <__udivmoddi4+0x10c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	0000      	movs	r0, r0
	...

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f002 fe82 	bl	8003db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 f968 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 fb6a 	bl	8001790 <MX_GPIO_Init>
  MX_DMA_Init();
 80010bc:	f000 fb40 	bl	8001740 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010c0:	f000 fb12 	bl	80016e8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010c4:	f000 f9f6 	bl	80014b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c8:	f000 fa4c 	bl	8001564 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010cc:	f000 fa96 	bl	80015fc <MX_TIM3_Init>
  MX_I2C1_Init();
 80010d0:	f000 f9c2 	bl	8001458 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010d4:	489c      	ldr	r0, [pc, #624]	; (8001348 <main+0x2a0>)
 80010d6:	f006 f98f 	bl	80073f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010da:	213c      	movs	r1, #60	; 0x3c
 80010dc:	489b      	ldr	r0, [pc, #620]	; (800134c <main+0x2a4>)
 80010de:	f006 fb9d 	bl	800781c <HAL_TIM_Encoder_Start>

	// start PWM
  HAL_TIM_Base_Start(&htim3);
 80010e2:	489b      	ldr	r0, [pc, #620]	; (8001350 <main+0x2a8>)
 80010e4:	f006 f92e 	bl	8007344 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	4899      	ldr	r0, [pc, #612]	; (8001350 <main+0x2a8>)
 80010ec:	f006 fa40 	bl	8007570 <HAL_TIM_PWM_Start>

  ///Init Data
  ConverterUnitSystemStructureInit(&CUSSStruc);
 80010f0:	4898      	ldr	r0, [pc, #608]	; (8001354 <main+0x2ac>)
 80010f2:	f000 fd1b 	bl	8001b2c <ConverterUnitSystemStructureInit>
  TrajectoryGenerationStructureInit(&TrjStruc, &CUSSStruc);
 80010f6:	4997      	ldr	r1, [pc, #604]	; (8001354 <main+0x2ac>)
 80010f8:	4897      	ldr	r0, [pc, #604]	; (8001358 <main+0x2b0>)
 80010fa:	f000 fd2d 	bl	8001b58 <TrajectoryGenerationStructureInit>

  VelocityControllerInit(&VelocityPIDController, &TrjStruc);
 80010fe:	4996      	ldr	r1, [pc, #600]	; (8001358 <main+0x2b0>)
 8001100:	4896      	ldr	r0, [pc, #600]	; (800135c <main+0x2b4>)
 8001102:	f000 fda5 	bl	8001c50 <VelocityControllerInit>
  DisplacementControllerInit(&PositionPIDController, &TrjStruc);
 8001106:	4994      	ldr	r1, [pc, #592]	; (8001358 <main+0x2b0>)
 8001108:	4895      	ldr	r0, [pc, #596]	; (8001360 <main+0x2b8>)
 800110a:	f000 fdd5 	bl	8001cb8 <DisplacementControllerInit>

  ///UART init
  UART2.huart = &huart2;
 800110e:	4b95      	ldr	r3, [pc, #596]	; (8001364 <main+0x2bc>)
 8001110:	4a95      	ldr	r2, [pc, #596]	; (8001368 <main+0x2c0>)
 8001112:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 8001114:	4b93      	ldr	r3, [pc, #588]	; (8001364 <main+0x2bc>)
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 800111a:	4b92      	ldr	r3, [pc, #584]	; (8001364 <main+0x2bc>)
 800111c:	22ff      	movs	r2, #255	; 0xff
 800111e:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 8001120:	4890      	ldr	r0, [pc, #576]	; (8001364 <main+0x2bc>)
 8001122:	f001 fb4d 	bl	80027c0 <UARTInit>
  UARTResetStart(&UART2);
 8001126:	488f      	ldr	r0, [pc, #572]	; (8001364 <main+0x2bc>)
 8001128:	f001 fb72 	bl	8002810 <UARTResetStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int16_t inputChar = UARTReadChar(&UART2);
 800112c:	488d      	ldr	r0, [pc, #564]	; (8001364 <main+0x2bc>)
 800112e:	f001 fb93 	bl	8002858 <UARTReadChar>
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
	  if (inputChar != -1)
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113e:	d005      	beq.n	800114c <main+0xa4>
	  {
		  Munmunbot_Protocol(inputChar, &UART2);
 8001140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001144:	4987      	ldr	r1, [pc, #540]	; (8001364 <main+0x2bc>)
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fc6e 	bl	8002a28 <Munmunbot_Protocol>

	  }

	  switch (Munmunbot_State)
 800114c:	4b87      	ldr	r3, [pc, #540]	; (800136c <main+0x2c4>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b07      	cmp	r3, #7
 8001152:	d8eb      	bhi.n	800112c <main+0x84>
 8001154:	a201      	add	r2, pc, #4	; (adr r2, 800115c <main+0xb4>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	0800117d 	.word	0x0800117d
 8001160:	08001189 	.word	0x08001189
 8001164:	08001195 	.word	0x08001195
 8001168:	080011a5 	.word	0x080011a5
 800116c:	080011bb 	.word	0x080011bb
 8001170:	08001287 	.word	0x08001287
 8001174:	08001319 	.word	0x08001319
 8001178:	08001329 	.word	0x08001329
	  {
	  	  case STATE_Disconnected:
	  		  LAMP_ON(2);
 800117c:	2002      	movs	r0, #2
 800117e:	f002 f85d 	bl	800323c <LAMP_ON>
	  		  Emergency_switch_trigger();
 8001182:	f002 f8a7 	bl	80032d4 <Emergency_switch_trigger>
	  		  break;
 8001186:	e0d7      	b.n	8001338 <main+0x290>

	  	  case STATE_Idle:
	  		  LAMP_ON(2);
 8001188:	2002      	movs	r0, #2
 800118a:	f002 f857 	bl	800323c <LAMP_ON>
	  		  Emergency_switch_trigger();
 800118e:	f002 f8a1 	bl	80032d4 <Emergency_switch_trigger>
		  	  break;
 8001192:	e0d1      	b.n	8001338 <main+0x290>

	  	  case STATE_PrepareDATA:
	  		  LAMP_ON(3);
 8001194:	2003      	movs	r0, #3
 8001196:	f002 f851 	bl	800323c <LAMP_ON>
	  		  TrajectoryGenerationPrepareDATA();
 800119a:	f000 fdf5 	bl	8001d88 <TrajectoryGenerationPrepareDATA>
	  		  Emergency_switch_trigger();
 800119e:	f002 f899 	bl	80032d4 <Emergency_switch_trigger>
		  	  break;
 80011a2:	e0c9      	b.n	8001338 <main+0x290>

	  	  case STATE_Calculation:
	  		  LAMP_ON(3);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f002 f849 	bl	800323c <LAMP_ON>
	  		  TrajectoryGenerationCalculation();
 80011aa:	f000 ff31 	bl	8002010 <TrajectoryGenerationCalculation>
	  		  Munmunbot_State = STATE_Link_Moving;
 80011ae:	4b6f      	ldr	r3, [pc, #444]	; (800136c <main+0x2c4>)
 80011b0:	2204      	movs	r2, #4
 80011b2:	701a      	strb	r2, [r3, #0]
	  		  Emergency_switch_trigger();
 80011b4:	f002 f88e 	bl	80032d4 <Emergency_switch_trigger>
	  		  break;
 80011b8:	e0be      	b.n	8001338 <main+0x290>

	   	  case STATE_Link_Moving:
	   		  LAMP_ON(3);
 80011ba:	2003      	movs	r0, #3
 80011bc:	f002 f83e 	bl	800323c <LAMP_ON>
	   		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 80011c0:	f000 fc9a 	bl	8001af8 <micros>
 80011c4:	4b64      	ldr	r3, [pc, #400]	; (8001358 <main+0x2b0>)
 80011c6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80011ca:	1a84      	subs	r4, r0, r2
 80011cc:	eb61 0503 	sbc.w	r5, r1, r3
 80011d0:	4b61      	ldr	r3, [pc, #388]	; (8001358 <main+0x2b0>)
 80011d2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80011d6:	429d      	cmp	r5, r3
 80011d8:	bf08      	it	eq
 80011da:	4294      	cmpeq	r4, r2
 80011dc:	d350      	bcc.n	8001280 <main+0x1d8>
	   		  {
	   			  Controlling_the_LINK();
 80011de:	f002 f8a9 	bl	8003334 <Controlling_the_LINK>

	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 3) &&
 80011e2:	4b5f      	ldr	r3, [pc, #380]	; (8001360 <main+0x2b8>)
 80011e4:	ed93 7a05 	vldr	s14, [r3, #20]
 80011e8:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <main+0x2b0>)
 80011ea:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80011ee:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80011f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80011f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d83f      	bhi.n	8001280 <main+0x1d8>
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 3) &&
 8001200:	4b57      	ldr	r3, [pc, #348]	; (8001360 <main+0x2b8>)
 8001202:	ed93 7a05 	vldr	s14, [r3, #20]
 8001206:	4b54      	ldr	r3, [pc, #336]	; (8001358 <main+0x2b0>)
 8001208:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800120c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001210:	ee77 7ae6 	vsub.f32	s15, s15, s13
	   			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 3) &&
 8001214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	db30      	blt.n	8001280 <main+0x1d8>
						  (Moving_Link_Task_Flag == 1))
 800121e:	4b54      	ldr	r3, [pc, #336]	; (8001370 <main+0x2c8>)
 8001220:	781b      	ldrb	r3, [r3, #0]
	   					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 3) &&
 8001222:	2b01      	cmp	r3, #1
 8001224:	d12c      	bne.n	8001280 <main+0x1d8>
	   			  {
	   				  if(MovingLinkMode == LMM_Set_Pos_Directly)
 8001226:	4b53      	ldr	r3, [pc, #332]	; (8001374 <main+0x2cc>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10d      	bne.n	800124a <main+0x1a2>
	   				  {
	   					Munmunbot_State = STATE_Idle;
 800122e:	4b4f      	ldr	r3, [pc, #316]	; (800136c <main+0x2c4>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
	   					MovingLinkMode = LMM_Not_Set;
 8001234:	4b4f      	ldr	r3, [pc, #316]	; (8001374 <main+0x2cc>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800123a:	4b45      	ldr	r3, [pc, #276]	; (8001350 <main+0x2a8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
	   					ACK2Return(&UART2);
 8001242:	4848      	ldr	r0, [pc, #288]	; (8001364 <main+0x2bc>)
 8001244:	f001 fbdc 	bl	8002a00 <ACK2Return>
 8001248:	e011      	b.n	800126e <main+0x1c6>
	   				  }

	   				  else if ((MovingLinkMode == LMM_Set_Goal_1_Station) || (MovingLinkMode == LMM_Set_Goal_n_Station))
 800124a:	4b4a      	ldr	r3, [pc, #296]	; (8001374 <main+0x2cc>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d003      	beq.n	800125a <main+0x1b2>
 8001252:	4b48      	ldr	r3, [pc, #288]	; (8001374 <main+0x2cc>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d109      	bne.n	800126e <main+0x1c6>
	   				  {
	   					Munmunbot_State = STATE_End_Effector_Working;
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <main+0x2c4>)
 800125c:	2205      	movs	r2, #5
 800125e:	701a      	strb	r2, [r3, #0]
	   					GripperState = 0;
 8001260:	4b45      	ldr	r3, [pc, #276]	; (8001378 <main+0x2d0>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
	   					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <main+0x2a8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
	   				  }
	   				 TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 800126e:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <main+0x2b8>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	4a39      	ldr	r2, [pc, #228]	; (8001358 <main+0x2b0>)
 8001274:	65d3      	str	r3, [r2, #92]	; 0x5c
	   				 Moving_Link_Task_Flag = 0;
 8001276:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <main+0x2c8>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
	   				 PID_Reset();
 800127c:	f001 ffc8 	bl	8003210 <PID_Reset>
	   			  }
	   		  }
	  		  Emergency_switch_trigger();
 8001280:	f002 f828 	bl	80032d4 <Emergency_switch_trigger>
	  		  break;
 8001284:	e058      	b.n	8001338 <main+0x290>

	  	  case STATE_End_Effector_Working:
	  		  LAMP_ON(3);
 8001286:	2003      	movs	r0, #3
 8001288:	f001 ffd8 	bl	800323c <LAMP_ON>
	  		  ///I2C implement
	  		  if(GripperEnable == 1)
 800128c:	4b3b      	ldr	r3, [pc, #236]	; (800137c <main+0x2d4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d137      	bne.n	8001304 <main+0x25c>
	  		  {
	  			if ((hi2c1.State == HAL_I2C_STATE_READY) && (GripperState == 0))
 8001294:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <main+0x2d8>)
 8001296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b20      	cmp	r3, #32
 800129e:	d116      	bne.n	80012ce <main+0x226>
 80012a0:	4b35      	ldr	r3, [pc, #212]	; (8001378 <main+0x2d0>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d112      	bne.n	80012ce <main+0x226>
	  			{
	  				{
	  					uint8_t temp[1] = {0x45};
 80012a8:	2345      	movs	r3, #69	; 0x45
 80012aa:	713b      	strb	r3, [r7, #4]
	  					HAL_I2C_Master_Transmit_IT(&hi2c1, (0x23 << 1) , temp, 1);
 80012ac:	1d3a      	adds	r2, r7, #4
 80012ae:	2301      	movs	r3, #1
 80012b0:	2146      	movs	r1, #70	; 0x46
 80012b2:	4833      	ldr	r0, [pc, #204]	; (8001380 <main+0x2d8>)
 80012b4:	f003 fe26 	bl	8004f04 <HAL_I2C_Master_Transmit_IT>
	  				}
	  				GripperState = 1;
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <main+0x2d0>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
	  				Timestamp_Gripper = micros();
 80012be:	f000 fc1b 	bl	8001af8 <micros>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	492f      	ldr	r1, [pc, #188]	; (8001384 <main+0x2dc>)
 80012c8:	e9c1 2300 	strd	r2, r3, [r1]
 80012cc:	e021      	b.n	8001312 <main+0x26a>
	  			}
	  			else if ((micros() - Timestamp_Gripper >= 5100000) && (GripperState == 1))
 80012ce:	f000 fc13 	bl	8001af8 <micros>
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <main+0x2dc>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	ebb0 0802 	subs.w	r8, r0, r2
 80012dc:	eb61 0903 	sbc.w	r9, r1, r3
 80012e0:	a317      	add	r3, pc, #92	; (adr r3, 8001340 <main+0x298>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	454b      	cmp	r3, r9
 80012e8:	bf08      	it	eq
 80012ea:	4542      	cmpeq	r2, r8
 80012ec:	d211      	bcs.n	8001312 <main+0x26a>
 80012ee:	4b22      	ldr	r3, [pc, #136]	; (8001378 <main+0x2d0>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10d      	bne.n	8001312 <main+0x26a>
	  			{
	  				GripperState = 0;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <main+0x2d0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
	  				Munmunbot_State = STATE_PrepareDATA;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <main+0x2c4>)
 80012fe:	2202      	movs	r2, #2
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	e006      	b.n	8001312 <main+0x26a>
	  			}
	  		  }
	  		  else if(GripperEnable == 0)
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <main+0x2d4>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <main+0x26a>
			  {
		  		 Munmunbot_State = STATE_PrepareDATA;
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <main+0x2c4>)
 800130e:	2202      	movs	r2, #2
 8001310:	701a      	strb	r2, [r3, #0]
			  }
	  		  Emergency_switch_trigger();
 8001312:	f001 ffdf 	bl	80032d4 <Emergency_switch_trigger>
	  		  break;
 8001316:	e00f      	b.n	8001338 <main+0x290>

	  	  case STATE_SetHome:
	  		  LAMP_ON(3);
 8001318:	2003      	movs	r0, #3
 800131a:	f001 ff8f 	bl	800323c <LAMP_ON>
	  		  SETHOME_StateMachine_Function();
 800131e:	f002 f853 	bl	80033c8 <SETHOME_StateMachine_Function>
	  		  Emergency_switch_trigger();
 8001322:	f001 ffd7 	bl	80032d4 <Emergency_switch_trigger>
	  		  break;
 8001326:	e007      	b.n	8001338 <main+0x290>

	  		case STATE_PreSetHome:
			  LAMP_ON(1);
 8001328:	2001      	movs	r0, #1
 800132a:	f001 ff87 	bl	800323c <LAMP_ON>
			  PRESETHOME_StateMachine_Function();
 800132e:	f002 f957 	bl	80035e0 <PRESETHOME_StateMachine_Function>
			  Emergency_switch_trigger();
 8001332:	f001 ffcf 	bl	80032d4 <Emergency_switch_trigger>
			  break;
 8001336:	bf00      	nop
  {
 8001338:	e6f8      	b.n	800112c <main+0x84>
 800133a:	bf00      	nop
 800133c:	f3af 8000 	nop.w
 8001340:	004dd1df 	.word	0x004dd1df
 8001344:	00000000 	.word	0x00000000
 8001348:	200004bc 	.word	0x200004bc
 800134c:	20000474 	.word	0x20000474
 8001350:	200003cc 	.word	0x200003cc
 8001354:	200001d8 	.word	0x200001d8
 8001358:	20000168 	.word	0x20000168
 800135c:	20000138 	.word	0x20000138
 8001360:	20000108 	.word	0x20000108
 8001364:	200000b8 	.word	0x200000b8
 8001368:	20000504 	.word	0x20000504
 800136c:	20000000 	.word	0x20000000
 8001370:	200000f8 	.word	0x200000f8
 8001374:	200000ee 	.word	0x200000ee
 8001378:	200000f9 	.word	0x200000f9
 800137c:	20000018 	.word	0x20000018
 8001380:	20000378 	.word	0x20000378
 8001384:	20000100 	.word	0x20000100

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b094      	sub	sp, #80	; 0x50
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	2230      	movs	r2, #48	; 0x30
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f008 f84c 	bl	8009434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <SystemClock_Config+0xc8>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	4a26      	ldr	r2, [pc, #152]	; (8001450 <SystemClock_Config+0xc8>)
 80013b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	; 0x40
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <SystemClock_Config+0xc8>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <SystemClock_Config+0xcc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a20      	ldr	r2, [pc, #128]	; (8001454 <SystemClock_Config+0xcc>)
 80013d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <SystemClock_Config+0xcc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e4:	2302      	movs	r3, #2
 80013e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ec:	2310      	movs	r3, #16
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f0:	2302      	movs	r3, #2
 80013f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013f8:	2308      	movs	r3, #8
 80013fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013fc:	2364      	movs	r3, #100	; 0x64
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001404:	2304      	movs	r3, #4
 8001406:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	4618      	mov	r0, r3
 800140e:	f005 fad5 	bl	80069bc <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001418:	f002 f9ec 	bl	80037f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	230f      	movs	r3, #15
 800141e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001420:	2302      	movs	r3, #2
 8001422:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2103      	movs	r1, #3
 8001438:	4618      	mov	r0, r3
 800143a:	f005 fd37 	bl	8006eac <HAL_RCC_ClockConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001444:	f002 f9d6 	bl	80037f4 <Error_Handler>
  }
}
 8001448:	bf00      	nop
 800144a:	3750      	adds	r7, #80	; 0x50
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40007000 	.word	0x40007000

08001458 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_I2C1_Init+0x54>)
 800145e:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <MX_I2C1_Init+0x58>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_I2C1_Init+0x54>)
 8001464:	f242 7210 	movw	r2, #10000	; 0x2710
 8001468:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_I2C1_Init+0x54>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_I2C1_Init+0x54>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <MX_I2C1_Init+0x54>)
 8001478:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800147c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_I2C1_Init+0x54>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_I2C1_Init+0x54>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_I2C1_Init+0x54>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_I2C1_Init+0x54>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_I2C1_Init+0x54>)
 8001498:	f003 fbf0 	bl	8004c7c <HAL_I2C_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80014a2:	f002 f9a7 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000378 	.word	0x20000378
 80014b0:	40005400 	.word	0x40005400

080014b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	; 0x30
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	2224      	movs	r2, #36	; 0x24
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f007 ffb6 	bl	8009434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <MX_TIM1_Init+0xa8>)
 80014d2:	4a23      	ldr	r2, [pc, #140]	; (8001560 <MX_TIM1_Init+0xac>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <MX_TIM1_Init+0xa8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_TIM1_Init+0xa8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24575;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_TIM1_Init+0xa8>)
 80014e4:	f645 72ff 	movw	r2, #24575	; 0x5fff
 80014e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_TIM1_Init+0xa8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_TIM1_Init+0xa8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_TIM1_Init+0xa8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014fc:	2303      	movs	r3, #3
 80014fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001504:	2301      	movs	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800150c:	2302      	movs	r3, #2
 800150e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001514:	2301      	movs	r3, #1
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <MX_TIM1_Init+0xa8>)
 8001528:	f006 f8d2 	bl	80076d0 <HAL_TIM_Encoder_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001532:	f002 f95f 	bl	80037f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	4619      	mov	r1, r3
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <MX_TIM1_Init+0xa8>)
 8001544:	f006 ff76 	bl	8008434 <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800154e:	f002 f951 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	3730      	adds	r7, #48	; 0x30
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000474 	.word	0x20000474
 8001560:	40010000 	.word	0x40010000

08001564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_TIM2_Init+0x94>)
 8001582:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001586:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_TIM2_Init+0x94>)
 800158a:	2263      	movs	r2, #99	; 0x63
 800158c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_TIM2_Init+0x94>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_TIM2_Init+0x94>)
 8001596:	f04f 32ff 	mov.w	r2, #4294967295
 800159a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_TIM2_Init+0x94>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <MX_TIM2_Init+0x94>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a8:	4813      	ldr	r0, [pc, #76]	; (80015f8 <MX_TIM2_Init+0x94>)
 80015aa:	f005 fe7b 	bl	80072a4 <HAL_TIM_Base_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015b4:	f002 f91e 	bl	80037f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	4619      	mov	r1, r3
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <MX_TIM2_Init+0x94>)
 80015c6:	f006 fb7d 	bl	8007cc4 <HAL_TIM_ConfigClockSource>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015d0:	f002 f910 	bl	80037f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d4:	2300      	movs	r3, #0
 80015d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_TIM2_Init+0x94>)
 80015e2:	f006 ff27 	bl	8008434 <HAL_TIMEx_MasterConfigSynchronization>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015ec:	f002 f902 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200004bc 	.word	0x200004bc

080015fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	f107 0320 	add.w	r3, r7, #32
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	615a      	str	r2, [r3, #20]
 800162a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <MX_TIM3_Init+0xe4>)
 800162e:	4a2d      	ldr	r2, [pc, #180]	; (80016e4 <MX_TIM3_Init+0xe8>)
 8001630:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001632:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <MX_TIM3_Init+0xe4>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <MX_TIM3_Init+0xe4>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800163e:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <MX_TIM3_Init+0xe4>)
 8001640:	f242 7210 	movw	r2, #10000	; 0x2710
 8001644:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <MX_TIM3_Init+0xe4>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <MX_TIM3_Init+0xe4>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001652:	4823      	ldr	r0, [pc, #140]	; (80016e0 <MX_TIM3_Init+0xe4>)
 8001654:	f005 fe26 	bl	80072a4 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800165e:	f002 f8c9 	bl	80037f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166c:	4619      	mov	r1, r3
 800166e:	481c      	ldr	r0, [pc, #112]	; (80016e0 <MX_TIM3_Init+0xe4>)
 8001670:	f006 fb28 	bl	8007cc4 <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800167a:	f002 f8bb 	bl	80037f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800167e:	4818      	ldr	r0, [pc, #96]	; (80016e0 <MX_TIM3_Init+0xe4>)
 8001680:	f005 ff1c 	bl	80074bc <HAL_TIM_PWM_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800168a:	f002 f8b3 	bl	80037f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001696:	f107 0320 	add.w	r3, r7, #32
 800169a:	4619      	mov	r1, r3
 800169c:	4810      	ldr	r0, [pc, #64]	; (80016e0 <MX_TIM3_Init+0xe4>)
 800169e:	f006 fec9 	bl	8008434 <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016a8:	f002 f8a4 	bl	80037f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ac:	2360      	movs	r3, #96	; 0x60
 80016ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_TIM3_Init+0xe4>)
 80016c4:	f006 fa40 	bl	8007b48 <HAL_TIM_PWM_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016ce:	f002 f891 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016d2:	4803      	ldr	r0, [pc, #12]	; (80016e0 <MX_TIM3_Init+0xe4>)
 80016d4:	f002 f998 	bl	8003a08 <HAL_TIM_MspPostInit>

}
 80016d8:	bf00      	nop
 80016da:	3738      	adds	r7, #56	; 0x38
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200003cc 	.word	0x200003cc
 80016e4:	40000400 	.word	0x40000400

080016e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_USART2_UART_Init+0x50>)
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <MX_USART2_UART_Init+0x54>)
 80016f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_USART2_UART_Init+0x50>)
 80016f4:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80016f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_USART2_UART_Init+0x50>)
 80016fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001700:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <MX_USART2_UART_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_USART2_UART_Init+0x50>)
 800170a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_USART2_UART_Init+0x50>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_USART2_UART_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_USART2_UART_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_USART2_UART_Init+0x50>)
 8001724:	f006 ff08 	bl	8008538 <HAL_UART_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800172e:	f002 f861 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000504 	.word	0x20000504
 800173c:	40004400 	.word	0x40004400

08001740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_DMA_Init+0x4c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <MX_DMA_Init+0x4c>)
 8001750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <MX_DMA_Init+0x4c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2010      	movs	r0, #16
 8001768:	f002 fc73 	bl	8004052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800176c:	2010      	movs	r0, #16
 800176e:	f002 fc8c 	bl	800408a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	2011      	movs	r0, #17
 8001778:	f002 fc6b 	bl	8004052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800177c:	2011      	movs	r0, #17
 800177e:	f002 fc84 	bl	800408a <HAL_NVIC_EnableIRQ>

}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b5b      	ldr	r3, [pc, #364]	; (8001918 <MX_GPIO_Init+0x188>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a5a      	ldr	r2, [pc, #360]	; (8001918 <MX_GPIO_Init+0x188>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b58      	ldr	r3, [pc, #352]	; (8001918 <MX_GPIO_Init+0x188>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b54      	ldr	r3, [pc, #336]	; (8001918 <MX_GPIO_Init+0x188>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a53      	ldr	r2, [pc, #332]	; (8001918 <MX_GPIO_Init+0x188>)
 80017cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b51      	ldr	r3, [pc, #324]	; (8001918 <MX_GPIO_Init+0x188>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <MX_GPIO_Init+0x188>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <MX_GPIO_Init+0x188>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b4a      	ldr	r3, [pc, #296]	; (8001918 <MX_GPIO_Init+0x188>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4b46      	ldr	r3, [pc, #280]	; (8001918 <MX_GPIO_Init+0x188>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a45      	ldr	r2, [pc, #276]	; (8001918 <MX_GPIO_Init+0x188>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b43      	ldr	r3, [pc, #268]	; (8001918 <MX_GPIO_Init+0x188>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2120      	movs	r1, #32
 800181a:	4840      	ldr	r0, [pc, #256]	; (800191c <MX_GPIO_Init+0x18c>)
 800181c:	f003 f9fc 	bl	8004c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay_ch_2_Pin|Relay_ch_3_Pin, GPIO_PIN_SET);
 8001820:	2201      	movs	r2, #1
 8001822:	f241 0104 	movw	r1, #4100	; 0x1004
 8001826:	483e      	ldr	r0, [pc, #248]	; (8001920 <MX_GPIO_Init+0x190>)
 8001828:	f003 f9f6 	bl	8004c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	483c      	ldr	r0, [pc, #240]	; (8001924 <MX_GPIO_Init+0x194>)
 8001832:	f003 f9f1 	bl	8004c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_ch_4_GPIO_Port, Relay_ch_4_Pin, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183c:	4837      	ldr	r0, [pc, #220]	; (800191c <MX_GPIO_Init+0x18c>)
 800183e:	f003 f9eb 	bl	8004c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001848:	4b37      	ldr	r3, [pc, #220]	; (8001928 <MX_GPIO_Init+0x198>)
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	4833      	ldr	r0, [pc, #204]	; (8001924 <MX_GPIO_Init+0x194>)
 8001858:	f003 f842 	bl	80048e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Relay_ch_4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Relay_ch_4_Pin;
 800185c:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	2301      	movs	r3, #1
 8001864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4829      	ldr	r0, [pc, #164]	; (800191c <MX_GPIO_Init+0x18c>)
 8001876:	f003 f833 	bl	80048e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_ch_2_Pin Relay_ch_3_Pin */
  GPIO_InitStruct.Pin = Relay_ch_2_Pin|Relay_ch_3_Pin;
 800187a:	f241 0304 	movw	r3, #4100	; 0x1004
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	4823      	ldr	r0, [pc, #140]	; (8001920 <MX_GPIO_Init+0x190>)
 8001894:	f003 f824 	bl	80048e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Switch_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Signal_Pin;
 8001898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Switch_Signal_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	481c      	ldr	r0, [pc, #112]	; (8001920 <MX_GPIO_Init+0x190>)
 80018ae:	f003 f817 	bl	80048e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Index_Signal_Pin */
  GPIO_InitStruct.Pin = Index_Signal_Pin;
 80018b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <MX_GPIO_Init+0x19c>)
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Index_Signal_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	4816      	ldr	r0, [pc, #88]	; (8001920 <MX_GPIO_Init+0x190>)
 80018c8:	f003 f80a 	bl	80048e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitch_Signal_Pin */
  GPIO_InitStruct.Pin = LimitSwitch_Signal_Pin;
 80018cc:	2340      	movs	r3, #64	; 0x40
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LimitSwitch_Signal_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	4811      	ldr	r0, [pc, #68]	; (8001924 <MX_GPIO_Init+0x194>)
 80018e0:	f002 fffe 	bl	80048e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	480a      	ldr	r0, [pc, #40]	; (8001924 <MX_GPIO_Init+0x194>)
 80018fc:	f002 fff0 	bl	80048e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	2028      	movs	r0, #40	; 0x28
 8001906:	f002 fba4 	bl	8004052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800190a:	2028      	movs	r0, #40	; 0x28
 800190c:	f002 fbbd 	bl	800408a <HAL_NVIC_EnableIRQ>

}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400
 8001924:	40020800 	.word	0x40020800
 8001928:	10210000 	.word	0x10210000
 800192c:	10110000 	.word	0x10110000

08001930 <EncoderVelocityAndPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 12288
#define  MAX_ENCODER_PERIOD 24576

void EncoderVelocityAndPosition_Update()
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	ed2d 8b02 	vpush	{d8}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;
	static uint32_t Velocity_Output = 0;
	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 800193a:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <EncoderVelocityAndPosition_Update+0xbc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	61fb      	str	r3, [r7, #28]

	uint64_t EncoderNowTimestamp = micros();
 8001942:	f000 f8d9 	bl	8001af8 <micros>
 8001946:	e9c7 0104 	strd	r0, r1, [r7, #16]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <EncoderVelocityAndPosition_Update+0xc0>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001954:	1a84      	subs	r4, r0, r2
 8001956:	eb61 0503 	sbc.w	r5, r1, r3
 800195a:	e9c7 4502 	strd	r4, r5, [r7, #8]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 800195e:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <EncoderVelocityAndPosition_Update+0xc4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	607b      	str	r3, [r7, #4]

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8001968:	4a22      	ldr	r2, [pc, #136]	; (80019f4 <EncoderVelocityAndPosition_Update+0xc4>)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 800196e:	4920      	ldr	r1, [pc, #128]	; (80019f0 <EncoderVelocityAndPosition_Update+0xc0>)
 8001970:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001974:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity and Encoder Pos
	PositionPIDController.OutputFeedback = EncoderNowPosition;
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <EncoderVelocityAndPosition_Update+0xc8>)
 8001984:	edc3 7a05 	vstr	s15, [r3, #20]

	Velocity_Output = (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;  /// Pulse per second
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a1c      	ldr	r2, [pc, #112]	; (80019fc <EncoderVelocityAndPosition_Update+0xcc>)
 800198c:	fb02 f303 	mul.w	r3, r2, r3
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001998:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800199c:	f7ff f9c0 	bl	8000d20 <__aeabi_ul2f>
 80019a0:	ee07 0a10 	vmov	s14, r0
 80019a4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80019a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ac:	ee17 2a90 	vmov	r2, s15
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <EncoderVelocityAndPosition_Update+0xd0>)
 80019b2:	601a      	str	r2, [r3, #0]

	// LPF
	VelocityPIDController.OutputFeedback = (Velocity_Output + (VelocityPIDController.OutputFeedback*249))/250.0;
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <EncoderVelocityAndPosition_Update+0xd0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	ee07 3a90 	vmov	s15, r3
 80019bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <EncoderVelocityAndPosition_Update+0xd4>)
 80019c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80019c6:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a08 <EncoderVelocityAndPosition_Update+0xd8>
 80019ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001a0c <EncoderVelocityAndPosition_Update+0xdc>
 80019d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <EncoderVelocityAndPosition_Update+0xd4>)
 80019dc:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80019e0:	bf00      	nop
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	ecbd 8b02 	vpop	{d8}
 80019ea:	bdb0      	pop	{r4, r5, r7, pc}
 80019ec:	20000474 	.word	0x20000474
 80019f0:	200001e8 	.word	0x200001e8
 80019f4:	200001f0 	.word	0x200001f0
 80019f8:	20000108 	.word	0x20000108
 80019fc:	000f4240 	.word	0x000f4240
 8001a00:	200001f4 	.word	0x200001f4
 8001a04:	20000138 	.word	0x20000138
 8001a08:	43790000 	.word	0x43790000
 8001a0c:	437a0000 	.word	0x437a0000

08001a10 <HAL_TIM_PeriodElapsedCallback>:
{
	HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a10:	b4b0      	push	{r4, r5, r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d109      	bne.n	8001a34 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001a2a:	f143 0500 	adc.w	r5, r3, #0
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a30:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bcb0      	pop	{r4, r5, r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200004bc 	.word	0x200004bc
 8001a44:	200000b0 	.word	0x200000b0

08001a48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13) // If The INT Source Is EXTI Line15 -> index  ///13 for test
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a58:	d11d      	bne.n	8001a96 <HAL_GPIO_EXTI_Callback+0x4e>
	{
    	if ((Munmunbot_State == STATE_SetHome) || (Munmunbot_State == STATE_PreSetHome))
 8001a5a:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_EXTI_Callback+0x22>
 8001a62:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b07      	cmp	r3, #7
 8001a68:	d136      	bne.n	8001ad8 <HAL_GPIO_EXTI_Callback+0x90>
    	{
    		if (SethomeMode == SetHomeState_1)
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d132      	bne.n	8001ad8 <HAL_GPIO_EXTI_Callback+0x90>
    		{
    			HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <HAL_GPIO_EXTI_Callback+0xa4>)
 8001a78:	6852      	ldr	r2, [r2, #4]
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
    			SethomeMode = SetHomeState_2;
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	701a      	strb	r2, [r3, #0]
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	481a      	ldr	r0, [pc, #104]	; (8001af0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001a88:	f003 f8c6 	bl	8004c18 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	635a      	str	r2, [r3, #52]	; 0x34
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
    		}
    	}
	}
}
 8001a94:	e020      	b.n	8001ad8 <HAL_GPIO_EXTI_Callback+0x90>
    else if(GPIO_Pin == GPIO_PIN_15) // If The INT Source Is EXTI Line15 -> index  ///13 for test
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a9c:	d11c      	bne.n	8001ad8 <HAL_GPIO_EXTI_Callback+0x90>
    	if ((Munmunbot_State == STATE_SetHome) || (Munmunbot_State == STATE_PreSetHome))
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_EXTI_Callback+0x66>
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b07      	cmp	r3, #7
 8001aac:	d114      	bne.n	8001ad8 <HAL_GPIO_EXTI_Callback+0x90>
    		if (SethomeMode == SetHomeState_1)
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d110      	bne.n	8001ad8 <HAL_GPIO_EXTI_Callback+0x90>
    			HTIM_ENCODER.Instance->CNT = CUSSStruc.PPRxQEI;
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <HAL_GPIO_EXTI_Callback+0xa4>)
 8001abc:	6852      	ldr	r2, [r2, #4]
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
    			SethomeMode = SetHomeState_2;
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	701a      	strb	r2, [r3, #0]
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	4809      	ldr	r0, [pc, #36]	; (8001af0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001acc:	f003 f8a4 	bl	8004c18 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	200000d9 	.word	0x200000d9
 8001ae8:	20000474 	.word	0x20000474
 8001aec:	200001d8 	.word	0x200001d8
 8001af0:	40020800 	.word	0x40020800
 8001af4:	200003cc 	.word	0x200003cc

08001af8 <micros>:

uint64_t micros()
{
 8001af8:	b4b0      	push	{r4, r5, r7}
 8001afa:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <micros+0x2c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	4618      	mov	r0, r3
 8001b04:	f04f 0100 	mov.w	r1, #0
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <micros+0x30>)
 8001b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0e:	1884      	adds	r4, r0, r2
 8001b10:	eb41 0503 	adc.w	r5, r1, r3
 8001b14:	4622      	mov	r2, r4
 8001b16:	462b      	mov	r3, r5
}
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bcb0      	pop	{r4, r5, r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200004bc 	.word	0x200004bc
 8001b28:	200000b0 	.word	0x200000b0

08001b2c <ConverterUnitSystemStructureInit>:

void ConverterUnitSystemStructureInit(ConverterUnitSystemStructure *CUSSvar)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	CUSSvar->PPR = 2048;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b3a:	601a      	str	r2, [r3, #0]
	CUSSvar->PPRxQEI = CUSSvar->PPR * 4;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	009a      	lsls	r2, r3, #2
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	605a      	str	r2, [r3, #4]
	CUSSvar->RPMp = 10;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	220a      	movs	r2, #10
 8001b4a:	609a      	str	r2, [r3, #8]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <TrajectoryGenerationStructureInit>:

void TrajectoryGenerationStructureInit(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	TGSvar->AngularAccerationMax_Setting = (0.25*(CUSSvar->PPRxQEI))/3.141;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fc78 	bl	800045c <__aeabi_ui2d>
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <TrajectoryGenerationStructureInit+0xe8>)
 8001b72:	f7fe fced 	bl	8000550 <__aeabi_dmul>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	a32e      	add	r3, pc, #184	; (adr r3, 8001c38 <TrajectoryGenerationStructureInit+0xe0>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fe0e 	bl	80007a4 <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7fe ffae 	bl	8000af0 <__aeabi_d2f>
 8001b94:	4602      	mov	r2, r0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	615a      	str	r2, [r3, #20]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*10)/(60.0);  //pps
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fc58 	bl	800045c <__aeabi_ui2d>
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <TrajectoryGenerationStructureInit+0xec>)
 8001bb2:	f7fe fdf7 	bl	80007a4 <__aeabi_ddiv>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7fe ff97 	bl	8000af0 <__aeabi_d2f>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	611a      	str	r2, [r3, #16]
	TGSvar->Start_Theta = CUSSStruc.PPRxQEI;  /// PPRxQEI == 0 degree
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <TrajectoryGenerationStructureInit+0xf0>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	ee07 3a90 	vmov	s15, r3
 8001bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	TGSvar->Mode = 0;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	669a      	str	r2, [r3, #104]	; 0x68
	TGSvar->Submode = 0;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	66da      	str	r2, [r3, #108]	; 0x6c
	TGSvar->Loop_Freq = 10000;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bec:	649a      	str	r2, [r3, #72]	; 0x48
	TGSvar->Loop_Period = 1000000/(TGSvar->Loop_Freq);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf2:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <TrajectoryGenerationStructureInit+0xf4>)
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	9ba5e354 	.word	0x9ba5e354
 8001c3c:	400920c4 	.word	0x400920c4
 8001c40:	3fd00000 	.word	0x3fd00000
 8001c44:	404e0000 	.word	0x404e0000
 8001c48:	200001d8 	.word	0x200001d8
 8001c4c:	000f4240 	.word	0x000f4240

08001c50 <VelocityControllerInit>:

void VelocityControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <VelocityControllerInit+0x58>)
 8001c5e:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 0.2;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <VelocityControllerInit+0x5c>)
 8001c64:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0.1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <VelocityControllerInit+0x60>)
 8001c6a:	609a      	str	r2, [r3, #8]
	VCvar->Integral_Value = 0;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe fc31 	bl	80004e4 <__aeabi_ul2d>
 8001c82:	a307      	add	r3, pc, #28	; (adr r3, 8001ca0 <VelocityControllerInit+0x50>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fd8c 	bl	80007a4 <__aeabi_ddiv>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	00000000 	.word	0x00000000
 8001ca4:	412e8480 	.word	0x412e8480
 8001ca8:	40a00000 	.word	0x40a00000
 8001cac:	3e4ccccd 	.word	0x3e4ccccd
 8001cb0:	3dcccccd 	.word	0x3dcccccd
 8001cb4:	00000000 	.word	0x00000000

08001cb8 <DisplacementControllerInit>:

void DisplacementControllerInit(PIDStructure *VCvar,TrajectoryGenerationStructure *TGSvar)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
	VCvar->Kp = 5;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <DisplacementControllerInit+0x58>)
 8001cc6:	601a      	str	r2, [r3, #0]
	VCvar->Ki = 0.2;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <DisplacementControllerInit+0x5c>)
 8001ccc:	605a      	str	r2, [r3, #4]
	VCvar->Kd = 0;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
	VCvar->Integral_Value = 0;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
	VCvar->SamplingTime = (TGSvar->Loop_Period)/1000000.0;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7fe fbfc 	bl	80004e4 <__aeabi_ul2d>
 8001cec:	a306      	add	r3, pc, #24	; (adr r3, 8001d08 <DisplacementControllerInit+0x50>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fd57 	bl	80007a4 <__aeabi_ddiv>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	412e8480 	.word	0x412e8480
 8001d10:	40a00000 	.word	0x40a00000
 8001d14:	3e4ccccd 	.word	0x3e4ccccd

08001d18 <TrajectoryGenerationVelocityMaxSetting>:

void TrajectoryGenerationVelocityMaxSetting(TrajectoryGenerationStructure *TGSvar , ConverterUnitSystemStructure *CUSSvar)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
	TGSvar->AngularVelocityMax_Setting = ((CUSSvar->PPRxQEI)*(CUSSvar->RPMp))/(60.0);   ///RPM to pps
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	6892      	ldr	r2, [r2, #8]
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fb94 	bl	800045c <__aeabi_ui2d>
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <TrajectoryGenerationVelocityMaxSetting+0x6c>)
 8001d3a:	f7fe fd33 	bl	80007a4 <__aeabi_ddiv>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe fed3 	bl	8000af0 <__aeabi_d2f>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	611a      	str	r2, [r3, #16]
	TGSvar->BlendTimeLSPB = TGSvar->AngularVelocityMax_Setting/(TGSvar->AngularAccerationMax_Setting);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	edd3 6a04 	vldr	s13, [r3, #16]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	edc3 7a00 	vstr	s15, [r3]
	TGSvar->Theta_min_for_LSPB = TGSvar->AngularVelocityMax_Setting*TGSvar->BlendTimeLSPB;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	edd3 7a00 	vldr	s15, [r3]
 8001d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	404e0000 	.word	0x404e0000

08001d88 <TrajectoryGenerationPrepareDATA>:

void TrajectoryGenerationPrepareDATA()
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	if (MovingLinkMode == LMM_Set_Pos_Directly)
 8001d8c:	4b94      	ldr	r3, [pc, #592]	; (8001fe0 <TrajectoryGenerationPrepareDATA+0x258>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d165      	bne.n	8001e60 <TrajectoryGenerationPrepareDATA+0xd8>
	  {
		  TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 8001d94:	4b93      	ldr	r3, [pc, #588]	; (8001fe4 <TrajectoryGenerationPrepareDATA+0x25c>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b93      	ldr	r3, [pc, #588]	; (8001fe8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	fb03 f302 	mul.w	r3, r3, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fb5a 	bl	800045c <__aeabi_ui2d>
 8001da8:	a38b      	add	r3, pc, #556	; (adr r3, 8001fd8 <TrajectoryGenerationPrepareDATA+0x250>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fcf9 	bl	80007a4 <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7fe fe99 	bl	8000af0 <__aeabi_d2f>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4a8a      	ldr	r2, [pc, #552]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001dc2:	6593      	str	r3, [r2, #88]	; 0x58
		  if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 8001dc4:	4b89      	ldr	r3, [pc, #548]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001dc6:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001dca:	4b87      	ldr	r3, [pc, #540]	; (8001fe8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dde:	db0d      	blt.n	8001dfc <TrajectoryGenerationPrepareDATA+0x74>
		  {
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001de0:	4b82      	ldr	r3, [pc, #520]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001de2:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001de6:	4b80      	ldr	r3, [pc, #512]	; (8001fe8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df6:	4b7d      	ldr	r3, [pc, #500]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001df8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		  }
		  TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8001dfc:	4b7b      	ldr	r3, [pc, #492]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001dfe:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001e02:	4b79      	ldr	r3, [pc, #484]	; (8001fe8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e12:	4b76      	ldr	r3, [pc, #472]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001e14:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

		  if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 8001e18:	4b74      	ldr	r3, [pc, #464]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001e1a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001e1e:	4b73      	ldr	r3, [pc, #460]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001e20:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001e24:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	d00e      	beq.n	8001e4c <TrajectoryGenerationPrepareDATA+0xc4>
		  {
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8001e2e:	4b6f      	ldr	r3, [pc, #444]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001e30:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001e34:	4b6d      	ldr	r3, [pc, #436]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001e36:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3e:	4b6b      	ldr	r3, [pc, #428]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001e40:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			  Munmunbot_State = STATE_Calculation;
 8001e44:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <TrajectoryGenerationPrepareDATA+0x268>)
 8001e46:	2203      	movs	r2, #3
 8001e48:	701a      	strb	r2, [r3, #0]
	  else  ///shouldn't happen
	  {
		MovingLinkMode = LMM_Not_Set;
		Munmunbot_State = STATE_Idle;
	  }
}
 8001e4a:	e0c1      	b.n	8001fd0 <TrajectoryGenerationPrepareDATA+0x248>
			Munmunbot_State = STATE_Idle;
 8001e4c:	4b68      	ldr	r3, [pc, #416]	; (8001ff0 <TrajectoryGenerationPrepareDATA+0x268>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
			MovingLinkMode = LMM_Not_Set;
 8001e52:	4b63      	ldr	r3, [pc, #396]	; (8001fe0 <TrajectoryGenerationPrepareDATA+0x258>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
			ACK2Return(&UART2);
 8001e58:	4866      	ldr	r0, [pc, #408]	; (8001ff4 <TrajectoryGenerationPrepareDATA+0x26c>)
 8001e5a:	f000 fdd1 	bl	8002a00 <ACK2Return>
}
 8001e5e:	e0b7      	b.n	8001fd0 <TrajectoryGenerationPrepareDATA+0x248>
	else if (MovingLinkMode == LMM_Set_Goal_1_Station || MovingLinkMode == LMM_Set_Goal_n_Station )
 8001e60:	4b5f      	ldr	r3, [pc, #380]	; (8001fe0 <TrajectoryGenerationPrepareDATA+0x258>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d004      	beq.n	8001e72 <TrajectoryGenerationPrepareDATA+0xea>
 8001e68:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <TrajectoryGenerationPrepareDATA+0x258>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	f040 80a8 	bne.w	8001fc2 <TrajectoryGenerationPrepareDATA+0x23a>
		  if (NumberOfStationToGo == 0)
 8001e72:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10f      	bne.n	8001e9a <TrajectoryGenerationPrepareDATA+0x112>
				Munmunbot_State = STATE_Idle;
 8001e7a:	4b5d      	ldr	r3, [pc, #372]	; (8001ff0 <TrajectoryGenerationPrepareDATA+0x268>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
				NumberOfStationPTR = 0;
 8001e80:	4b5e      	ldr	r3, [pc, #376]	; (8001ffc <TrajectoryGenerationPrepareDATA+0x274>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo = 0;
 8001e86:	4b5c      	ldr	r3, [pc, #368]	; (8001ff8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 8001e8c:	4b54      	ldr	r3, [pc, #336]	; (8001fe0 <TrajectoryGenerationPrepareDATA+0x258>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
				ACK2Return(&UART2);
 8001e92:	4858      	ldr	r0, [pc, #352]	; (8001ff4 <TrajectoryGenerationPrepareDATA+0x26c>)
 8001e94:	f000 fdb4 	bl	8002a00 <ACK2Return>
		  if (NumberOfStationToGo == 0)
 8001e98:	e09a      	b.n	8001fd0 <TrajectoryGenerationPrepareDATA+0x248>
			Current_Station = Angularpos_InputArray[NumberOfStationPTR];
 8001e9a:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <TrajectoryGenerationPrepareDATA+0x274>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b57      	ldr	r3, [pc, #348]	; (8002000 <TrajectoryGenerationPrepareDATA+0x278>)
 8001ea2:	5c9a      	ldrb	r2, [r3, r2]
 8001ea4:	4b57      	ldr	r3, [pc, #348]	; (8002004 <TrajectoryGenerationPrepareDATA+0x27c>)
 8001ea6:	701a      	strb	r2, [r3, #0]
			if (Current_Station > 10)   //pass input
 8001ea8:	4b56      	ldr	r3, [pc, #344]	; (8002004 <TrajectoryGenerationPrepareDATA+0x27c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b0a      	cmp	r3, #10
 8001eae:	d90c      	bls.n	8001eca <TrajectoryGenerationPrepareDATA+0x142>
				NumberOfStationPTR += 1;
 8001eb0:	4b52      	ldr	r3, [pc, #328]	; (8001ffc <TrajectoryGenerationPrepareDATA+0x274>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <TrajectoryGenerationPrepareDATA+0x274>)
 8001eba:	701a      	strb	r2, [r3, #0]
				NumberOfStationToGo -= 1;
 8001ebc:	4b4e      	ldr	r3, [pc, #312]	; (8001ff8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001ec6:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001ec8:	e082      	b.n	8001fd0 <TrajectoryGenerationPrepareDATA+0x248>
				TrjStruc.Desire_Theta = (StationPos[Current_Station-1]*CUSSStruc.PPRxQEI/(360.0));   ///fix this if change algorithm
 8001eca:	4b4e      	ldr	r3, [pc, #312]	; (8002004 <TrajectoryGenerationPrepareDATA+0x27c>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	4a4d      	ldr	r2, [pc, #308]	; (8002008 <TrajectoryGenerationPrepareDATA+0x280>)
 8001ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b43      	ldr	r3, [pc, #268]	; (8001fe8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	fb03 f302 	mul.w	r3, r3, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fabb 	bl	800045c <__aeabi_ui2d>
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	4b48      	ldr	r3, [pc, #288]	; (800200c <TrajectoryGenerationPrepareDATA+0x284>)
 8001eec:	f7fe fc5a 	bl	80007a4 <__aeabi_ddiv>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7fe fdfa 	bl	8000af0 <__aeabi_d2f>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4a3b      	ldr	r2, [pc, #236]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001f00:	6593      	str	r3, [r2, #88]	; 0x58
				if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)  ///wrap input into 1 revolute. ///shouldn't happen
 8001f02:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001f04:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001f08:	4b37      	ldr	r3, [pc, #220]	; (8001fe8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	ee07 3a90 	vmov	s15, r3
 8001f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	db0d      	blt.n	8001f3a <TrajectoryGenerationPrepareDATA+0x1b2>
					TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8001f1e:	4b33      	ldr	r3, [pc, #204]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001f20:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001f24:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	ee07 3a90 	vmov	s15, r3
 8001f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001f36:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8001f3a:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001f3c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001f40:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <TrajectoryGenerationPrepareDATA+0x260>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	ee07 3a90 	vmov	s15, r3
 8001f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f50:	4b26      	ldr	r3, [pc, #152]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001f52:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				if (TrjStruc.Desire_Theta == TrjStruc.Start_Theta)
 8001f56:	4b25      	ldr	r3, [pc, #148]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001f58:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001f5c:	4b23      	ldr	r3, [pc, #140]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001f5e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001f62:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6a:	d10f      	bne.n	8001f8c <TrajectoryGenerationPrepareDATA+0x204>
					NumberOfStationPTR += 1;
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <TrajectoryGenerationPrepareDATA+0x274>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <TrajectoryGenerationPrepareDATA+0x274>)
 8001f76:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001f82:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_End_Effector_Working;
 8001f84:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <TrajectoryGenerationPrepareDATA+0x268>)
 8001f86:	2205      	movs	r2, #5
 8001f88:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001f8a:	e021      	b.n	8001fd0 <TrajectoryGenerationPrepareDATA+0x248>
					TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 8001f8c:	4b17      	ldr	r3, [pc, #92]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001f8e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001f94:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <TrajectoryGenerationPrepareDATA+0x264>)
 8001f9e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
					Munmunbot_State = STATE_Calculation;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <TrajectoryGenerationPrepareDATA+0x268>)
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	701a      	strb	r2, [r3, #0]
					NumberOfStationPTR += 1;
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <TrajectoryGenerationPrepareDATA+0x274>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <TrajectoryGenerationPrepareDATA+0x274>)
 8001fb2:	701a      	strb	r2, [r3, #0]
					NumberOfStationToGo -= 1;
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <TrajectoryGenerationPrepareDATA+0x270>)
 8001fbe:	701a      	strb	r2, [r3, #0]
		  if (NumberOfStationToGo == 0)
 8001fc0:	e006      	b.n	8001fd0 <TrajectoryGenerationPrepareDATA+0x248>
		MovingLinkMode = LMM_Not_Set;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <TrajectoryGenerationPrepareDATA+0x258>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
		Munmunbot_State = STATE_Idle;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <TrajectoryGenerationPrepareDATA+0x268>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
}
 8001fce:	e7ff      	b.n	8001fd0 <TrajectoryGenerationPrepareDATA+0x248>
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	99999999 	.word	0x99999999
 8001fdc:	40eeadf9 	.word	0x40eeadf9
 8001fe0:	200000ee 	.word	0x200000ee
 8001fe4:	200000ec 	.word	0x200000ec
 8001fe8:	200001d8 	.word	0x200001d8
 8001fec:	20000168 	.word	0x20000168
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	200000b8 	.word	0x200000b8
 8001ff8:	200000f0 	.word	0x200000f0
 8001ffc:	200000f1 	.word	0x200000f1
 8002000:	200000dc 	.word	0x200000dc
 8002004:	200000ef 	.word	0x200000ef
 8002008:	20000004 	.word	0x20000004
 800200c:	40768000 	.word	0x40768000

08002010 <TrajectoryGenerationCalculation>:

void TrajectoryGenerationCalculation()
{
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	af00      	add	r7, sp, #0
	if (TrjStruc.Delta_Theta < 0)
 8002014:	4b84      	ldr	r3, [pc, #528]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002016:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800201a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800201e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002022:	d518      	bpl.n	8002056 <TrajectoryGenerationCalculation+0x46>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting * -1;
 8002024:	4b80      	ldr	r3, [pc, #512]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002026:	edd3 7a05 	vldr	s15, [r3, #20]
 800202a:	eef1 7a67 	vneg.f32	s15, s15
 800202e:	4b7e      	ldr	r3, [pc, #504]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002030:	edc3 7a07 	vstr	s15, [r3, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting *-1;
 8002034:	4b7c      	ldr	r3, [pc, #496]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002036:	edd3 7a04 	vldr	s15, [r3, #16]
 800203a:	eef1 7a67 	vneg.f32	s15, s15
 800203e:	4b7a      	ldr	r3, [pc, #488]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002040:	edc3 7a06 	vstr	s15, [r3, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta * -1;
 8002044:	4b78      	ldr	r3, [pc, #480]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002046:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800204a:	eef1 7a67 	vneg.f32	s15, s15
 800204e:	4b76      	ldr	r3, [pc, #472]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002050:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8002054:	e013      	b.n	800207e <TrajectoryGenerationCalculation+0x6e>
	  }
	  else if (TrjStruc.Delta_Theta > 0)
 8002056:	4b74      	ldr	r3, [pc, #464]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002058:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800205c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002064:	dd0b      	ble.n	800207e <TrajectoryGenerationCalculation+0x6e>
	  {
		 TrjStruc.AngularAcceration = TrjStruc.AngularAccerationMax_Setting;
 8002066:	4b70      	ldr	r3, [pc, #448]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4a6f      	ldr	r2, [pc, #444]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 800206c:	61d3      	str	r3, [r2, #28]
		 TrjStruc.AngularVelocity = TrjStruc.AngularVelocityMax_Setting;
 800206e:	4b6e      	ldr	r3, [pc, #440]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	4a6d      	ldr	r2, [pc, #436]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002074:	6193      	str	r3, [r2, #24]
		 TrjStruc.Abs_Delta_Theta = TrjStruc.Delta_Theta;
 8002076:	4b6c      	ldr	r3, [pc, #432]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207a:	4a6b      	ldr	r2, [pc, #428]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 800207c:	6653      	str	r3, [r2, #100]	; 0x64
	  }

	  if (TrjStruc.Abs_Delta_Theta < TrjStruc.Theta_min_for_LSPB)   ///Triangular mode0
 800207e:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002080:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002084:	4b68      	ldr	r3, [pc, #416]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002086:	edd3 7a03 	vldr	s15, [r3, #12]
 800208a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d554      	bpl.n	800213e <TrajectoryGenerationCalculation+0x12e>
	  {
		 TrjStruc.BlendTimeTriangular = sqrt(TrjStruc.Abs_Delta_Theta/TrjStruc.AngularAccerationMax_Setting);
 8002094:	4b64      	ldr	r3, [pc, #400]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002096:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 800209c:	edd3 7a05 	vldr	s15, [r3, #20]
 80020a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020a4:	ee16 0a90 	vmov	r0, s13
 80020a8:	f7fe f9fa 	bl	80004a0 <__aeabi_f2d>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	ec43 2b10 	vmov	d0, r2, r3
 80020b4:	f007 fa4e 	bl	8009554 <sqrt>
 80020b8:	ec53 2b10 	vmov	r2, r3, d0
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	f7fe fd16 	bl	8000af0 <__aeabi_d2f>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a58      	ldr	r2, [pc, #352]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 80020c8:	6053      	str	r3, [r2, #4]
		 TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 80020ca:	4b57      	ldr	r3, [pc, #348]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 80020cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ce:	4a56      	ldr	r2, [pc, #344]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 80020d0:	6253      	str	r3, [r2, #36]	; 0x24
		 TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeTriangular*TrjStruc.BlendTimeTriangular))/2.0) + TrjStruc.Theta_Stamp_0;
 80020d2:	4b55      	ldr	r3, [pc, #340]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 80020d4:	ed93 7a07 	vldr	s14, [r3, #28]
 80020d8:	4b53      	ldr	r3, [pc, #332]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 80020da:	edd3 6a01 	vldr	s13, [r3, #4]
 80020de:	4b52      	ldr	r3, [pc, #328]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 80020e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80020e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	ee17 0a90 	vmov	r0, s15
 80020f0:	f7fe f9d6 	bl	80004a0 <__aeabi_f2d>
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020fc:	f7fe fb52 	bl	80007a4 <__aeabi_ddiv>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4614      	mov	r4, r2
 8002106:	461d      	mov	r5, r3
 8002108:	4b47      	ldr	r3, [pc, #284]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe f9c7 	bl	80004a0 <__aeabi_f2d>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4620      	mov	r0, r4
 8002118:	4629      	mov	r1, r5
 800211a:	f7fe f863 	bl	80001e4 <__adddf3>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	f7fe fce3 	bl	8000af0 <__aeabi_d2f>
 800212a:	4603      	mov	r3, r0
 800212c:	4a3e      	ldr	r2, [pc, #248]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 800212e:	6293      	str	r3, [r2, #40]	; 0x28
		 TrjStruc.Mode = 0;
 8002130:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002132:	2200      	movs	r2, #0
 8002134:	669a      	str	r2, [r3, #104]	; 0x68
		 TrjStruc.Submode = 0;
 8002136:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002138:	2200      	movs	r2, #0
 800213a:	66da      	str	r2, [r3, #108]	; 0x6c
 800213c:	e063      	b.n	8002206 <TrajectoryGenerationCalculation+0x1f6>
	  }
	  else if (TrjStruc.Abs_Delta_Theta >= TrjStruc.Theta_min_for_LSPB)  ///LSPB mode1
 800213e:	4b3a      	ldr	r3, [pc, #232]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002140:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002144:	4b38      	ldr	r3, [pc, #224]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002146:	edd3 7a03 	vldr	s15, [r3, #12]
 800214a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002152:	db58      	blt.n	8002206 <TrajectoryGenerationCalculation+0x1f6>
	  {
		  TrjStruc.LinearTimeLSPB = (TrjStruc.Abs_Delta_Theta-TrjStruc.Theta_min_for_LSPB)/TrjStruc.AngularVelocityMax_Setting;
 8002154:	4b34      	ldr	r3, [pc, #208]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002156:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800215a:	4b33      	ldr	r3, [pc, #204]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 800215c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002160:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002166:	ed93 7a04 	vldr	s14, [r3, #16]
 800216a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800216e:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002170:	edc3 7a02 	vstr	s15, [r3, #8]
		  TrjStruc.Theta_Stamp_0 = TrjStruc.Start_Theta;
 8002174:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	4a2b      	ldr	r2, [pc, #172]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 800217a:	6253      	str	r3, [r2, #36]	; 0x24
		  TrjStruc.Theta_Stamp_1 = ((TrjStruc.AngularAcceration*(TrjStruc.BlendTimeLSPB*TrjStruc.BlendTimeLSPB))/2.0) + TrjStruc.Theta_Stamp_0;
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 800217e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002182:	4b29      	ldr	r3, [pc, #164]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002184:	edd3 6a00 	vldr	s13, [r3]
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002196:	ee17 0a90 	vmov	r0, s15
 800219a:	f7fe f981 	bl	80004a0 <__aeabi_f2d>
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021a6:	f7fe fafd 	bl	80007a4 <__aeabi_ddiv>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4614      	mov	r4, r2
 80021b0:	461d      	mov	r5, r3
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe f972 	bl	80004a0 <__aeabi_f2d>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4620      	mov	r0, r4
 80021c2:	4629      	mov	r1, r5
 80021c4:	f7fe f80e 	bl	80001e4 <__adddf3>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7fe fc8e 	bl	8000af0 <__aeabi_d2f>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4a14      	ldr	r2, [pc, #80]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 80021d8:	6293      	str	r3, [r2, #40]	; 0x28
		  TrjStruc.Theta_Stamp_2 = (TrjStruc.AngularVelocity*TrjStruc.LinearTimeLSPB) + TrjStruc.Theta_Stamp_1;
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 80021dc:	ed93 7a06 	vldr	s14, [r3, #24]
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 80021e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80021e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 80021ec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80021f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 80021f6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		  TrjStruc.Mode = 1;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	669a      	str	r2, [r3, #104]	; 0x68
		  TrjStruc.Submode = 0;
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002202:	2200      	movs	r2, #0
 8002204:	66da      	str	r2, [r3, #108]	; 0x6c
	  }
	 TrjStruc.Equation_Timestamp = micros();
 8002206:	f7ff fc77 	bl	8001af8 <micros>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4906      	ldr	r1, [pc, #24]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 8002210:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 TrjStruc.Loop_Timestamp = micros();
 8002214:	f7ff fc70 	bl	8001af8 <micros>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4902      	ldr	r1, [pc, #8]	; (8002228 <TrajectoryGenerationCalculation+0x218>)
 800221e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8002222:	bf00      	nop
 8002224:	bdb0      	pop	{r4, r5, r7, pc}
 8002226:	bf00      	nop
 8002228:	20000168 	.word	0x20000168
 800222c:	00000000 	.word	0x00000000

08002230 <TrajectoryGenerationProcess>:

void TrajectoryGenerationProcess()
{
 8002230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0

	TrjStruc.Equation_Realtime_Sec = (micros()-TrjStruc.Equation_Timestamp)/1000000.0;
 8002238:	f7ff fc5e 	bl	8001af8 <micros>
 800223c:	4bb2      	ldr	r3, [pc, #712]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 800223e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002242:	1a84      	subs	r4, r0, r2
 8002244:	eb61 0503 	sbc.w	r5, r1, r3
 8002248:	4620      	mov	r0, r4
 800224a:	4629      	mov	r1, r5
 800224c:	f7fe f94a 	bl	80004e4 <__aeabi_ul2d>
 8002250:	a3ab      	add	r3, pc, #684	; (adr r3, 8002500 <TrajectoryGenerationProcess+0x2d0>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe faa5 	bl	80007a4 <__aeabi_ddiv>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	49aa      	ldr	r1, [pc, #680]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002260:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	 switch (TrjStruc.Mode)
 8002264:	4ba8      	ldr	r3, [pc, #672]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002268:	2b02      	cmp	r3, #2
 800226a:	f000 8218 	beq.w	800269e <TrajectoryGenerationProcess+0x46e>
 800226e:	2b02      	cmp	r3, #2
 8002270:	f200 8220 	bhi.w	80026b4 <TrajectoryGenerationProcess+0x484>
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <TrajectoryGenerationProcess+0x50>
 8002278:	2b01      	cmp	r3, #1
 800227a:	f000 80e0 	beq.w	800243e <TrajectoryGenerationProcess+0x20e>
		  case 2:
			  Moving_Link_Task_Flag = 1;
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
			  break;
		  }
}
 800227e:	e219      	b.n	80026b4 <TrajectoryGenerationProcess+0x484>
			  if (TrjStruc.Submode == 0)
 8002280:	4ba1      	ldr	r3, [pc, #644]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002284:	2b00      	cmp	r3, #0
 8002286:	d15b      	bne.n	8002340 <TrajectoryGenerationProcess+0x110>
						  ((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002288:	4b9f      	ldr	r3, [pc, #636]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f907 	bl	80004a0 <__aeabi_f2d>
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	4b9d      	ldr	r3, [pc, #628]	; (800250c <TrajectoryGenerationProcess+0x2dc>)
 8002298:	f7fe f95a 	bl	8000550 <__aeabi_dmul>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4614      	mov	r4, r2
 80022a2:	461d      	mov	r5, r3
 80022a4:	4b98      	ldr	r3, [pc, #608]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80022a6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80022aa:	4b97      	ldr	r3, [pc, #604]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80022ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80022b0:	f7fe f94e 	bl	8000550 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4620      	mov	r0, r4
 80022ba:	4629      	mov	r1, r5
 80022bc:	f7fe f948 	bl	8000550 <__aeabi_dmul>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4614      	mov	r4, r2
 80022c6:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_0;
 80022c8:	4b8f      	ldr	r3, [pc, #572]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f8e7 	bl	80004a0 <__aeabi_f2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4620      	mov	r0, r4
 80022d8:	4629      	mov	r1, r5
 80022da:	f7fd ff83 	bl	80001e4 <__adddf3>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7fe fc03 	bl	8000af0 <__aeabi_d2f>
 80022ea:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80022ec:	4a86      	ldr	r2, [pc, #536]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80022ee:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80022f0:	f7ff fc02 	bl	8001af8 <micros>
 80022f4:	4b84      	ldr	r3, [pc, #528]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80022f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80022fa:	1a84      	subs	r4, r0, r2
 80022fc:	613c      	str	r4, [r7, #16]
 80022fe:	eb61 0303 	sbc.w	r3, r1, r3
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002308:	f7fe fd0a 	bl	8000d20 <__aeabi_ul2f>
 800230c:	ee06 0a90 	vmov	s13, r0
 8002310:	4b7d      	ldr	r3, [pc, #500]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002312:	edd3 7a01 	vldr	s15, [r3, #4]
 8002316:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002510 <TrajectoryGenerationProcess+0x2e0>
 800231a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800231e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002326:	da00      	bge.n	800232a <TrajectoryGenerationProcess+0xfa>
			  break;
 8002328:	e1c1      	b.n	80026ae <TrajectoryGenerationProcess+0x47e>
					  TrjStruc.Equation_Timestamp = micros();
 800232a:	f7ff fbe5 	bl	8001af8 <micros>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4975      	ldr	r1, [pc, #468]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002334:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 1;
 8002338:	4b73      	ldr	r3, [pc, #460]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 800233a:	2201      	movs	r2, #1
 800233c:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 800233e:	e1b6      	b.n	80026ae <TrajectoryGenerationProcess+0x47e>
			  else if (TrjStruc.Submode == 1)
 8002340:	4b71      	ldr	r3, [pc, #452]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002344:	2b01      	cmp	r3, #1
 8002346:	f040 81b2 	bne.w	80026ae <TrajectoryGenerationProcess+0x47e>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 800234a:	4b6f      	ldr	r3, [pc, #444]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe f8a6 	bl	80004a0 <__aeabi_f2d>
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	4b6e      	ldr	r3, [pc, #440]	; (8002514 <TrajectoryGenerationProcess+0x2e4>)
 800235a:	f7fe f8f9 	bl	8000550 <__aeabi_dmul>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4614      	mov	r4, r2
 8002364:	461d      	mov	r5, r3
 8002366:	4b68      	ldr	r3, [pc, #416]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002368:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800236c:	4b66      	ldr	r3, [pc, #408]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 800236e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002372:	f7fe f8ed 	bl	8000550 <__aeabi_dmul>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4620      	mov	r0, r4
 800237c:	4629      	mov	r1, r5
 800237e:	f7fe f8e7 	bl	8000550 <__aeabi_dmul>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4614      	mov	r4, r2
 8002388:	461d      	mov	r5, r3
						  + (TrjStruc.AngularAcceration*TrjStruc.BlendTimeTriangular*(TrjStruc.Equation_Realtime_Sec))
 800238a:	4b5f      	ldr	r3, [pc, #380]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 800238c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002390:	4b5d      	ldr	r3, [pc, #372]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002392:	edd3 7a01 	vldr	s15, [r3, #4]
 8002396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239a:	ee17 0a90 	vmov	r0, s15
 800239e:	f7fe f87f 	bl	80004a0 <__aeabi_f2d>
 80023a2:	4b59      	ldr	r3, [pc, #356]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80023a4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80023a8:	f7fe f8d2 	bl	8000550 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4620      	mov	r0, r4
 80023b2:	4629      	mov	r1, r5
 80023b4:	f7fd ff16 	bl	80001e4 <__adddf3>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4614      	mov	r4, r2
 80023be:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_1;
 80023c0:	4b51      	ldr	r3, [pc, #324]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f86b 	bl	80004a0 <__aeabi_f2d>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4620      	mov	r0, r4
 80023d0:	4629      	mov	r1, r5
 80023d2:	f7fd ff07 	bl	80001e4 <__adddf3>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f7fe fb87 	bl	8000af0 <__aeabi_d2f>
 80023e2:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80023e4:	4a48      	ldr	r2, [pc, #288]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80023e6:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeTriangular*1000000)
 80023e8:	f7ff fb86 	bl	8001af8 <micros>
 80023ec:	4b46      	ldr	r3, [pc, #280]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80023ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80023f2:	1a84      	subs	r4, r0, r2
 80023f4:	60bc      	str	r4, [r7, #8]
 80023f6:	eb61 0303 	sbc.w	r3, r1, r3
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002400:	f7fe fc8e 	bl	8000d20 <__aeabi_ul2f>
 8002404:	ee06 0a90 	vmov	s13, r0
 8002408:	4b3f      	ldr	r3, [pc, #252]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 800240a:	edd3 7a01 	vldr	s15, [r3, #4]
 800240e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002510 <TrajectoryGenerationProcess+0x2e0>
 8002412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002416:	eef4 6ae7 	vcmpe.f32	s13, s15
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	da00      	bge.n	8002422 <TrajectoryGenerationProcess+0x1f2>
			  break;
 8002420:	e145      	b.n	80026ae <TrajectoryGenerationProcess+0x47e>
					  TrjStruc.Equation_Timestamp = micros();
 8002422:	f7ff fb69 	bl	8001af8 <micros>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4937      	ldr	r1, [pc, #220]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 800242c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 0;
 8002430:	4b35      	ldr	r3, [pc, #212]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002432:	2200      	movs	r2, #0
 8002434:	66da      	str	r2, [r3, #108]	; 0x6c
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002436:	4b34      	ldr	r3, [pc, #208]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002438:	2202      	movs	r2, #2
 800243a:	669a      	str	r2, [r3, #104]	; 0x68
			  break;
 800243c:	e137      	b.n	80026ae <TrajectoryGenerationProcess+0x47e>
			  if (TrjStruc.Submode == 0)
 800243e:	4b32      	ldr	r3, [pc, #200]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d168      	bne.n	8002518 <TrajectoryGenerationProcess+0x2e8>
							((TrjStruc.AngularAcceration*0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe f828 	bl	80004a0 <__aeabi_f2d>
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <TrajectoryGenerationProcess+0x2dc>)
 8002456:	f7fe f87b 	bl	8000550 <__aeabi_dmul>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4614      	mov	r4, r2
 8002460:	461d      	mov	r5, r3
 8002462:	4b29      	ldr	r3, [pc, #164]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002464:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 800246a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800246e:	f7fe f86f 	bl	8000550 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4620      	mov	r0, r4
 8002478:	4629      	mov	r1, r5
 800247a:	f7fe f869 	bl	8000550 <__aeabi_dmul>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4614      	mov	r4, r2
 8002484:	461d      	mov	r5, r3
							+TrjStruc.Theta_Stamp_0;
 8002486:	4b20      	ldr	r3, [pc, #128]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe f808 	bl	80004a0 <__aeabi_f2d>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4620      	mov	r0, r4
 8002496:	4629      	mov	r1, r5
 8002498:	f7fd fea4 	bl	80001e4 <__adddf3>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	f7fe fb24 	bl	8000af0 <__aeabi_d2f>
 80024a8:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 80024aa:	4a17      	ldr	r2, [pc, #92]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80024ac:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 80024ae:	f7ff fb23 	bl	8001af8 <micros>
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80024b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80024b8:	1a84      	subs	r4, r0, r2
 80024ba:	603c      	str	r4, [r7, #0]
 80024bc:	eb61 0303 	sbc.w	r3, r1, r3
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024c6:	f7fe fc2b 	bl	8000d20 <__aeabi_ul2f>
 80024ca:	ee06 0a90 	vmov	s13, r0
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002510 <TrajectoryGenerationProcess+0x2e0>
 80024d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024dc:	eef4 6ae7 	vcmpe.f32	s13, s15
 80024e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e4:	da00      	bge.n	80024e8 <TrajectoryGenerationProcess+0x2b8>
			  break;
 80024e6:	e0e4      	b.n	80026b2 <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 80024e8:	f7ff fb06 	bl	8001af8 <micros>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4905      	ldr	r1, [pc, #20]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80024f2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 1;
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <TrajectoryGenerationProcess+0x2d8>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 80024fc:	e0d9      	b.n	80026b2 <TrajectoryGenerationProcess+0x482>
 80024fe:	bf00      	nop
 8002500:	00000000 	.word	0x00000000
 8002504:	412e8480 	.word	0x412e8480
 8002508:	20000168 	.word	0x20000168
 800250c:	3fe00000 	.word	0x3fe00000
 8002510:	49742400 	.word	0x49742400
 8002514:	bfe00000 	.word	0xbfe00000
			  else if (TrjStruc.Submode == 1)
 8002518:	4b69      	ldr	r3, [pc, #420]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 800251a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251c:	2b01      	cmp	r3, #1
 800251e:	d148      	bne.n	80025b2 <TrajectoryGenerationProcess+0x382>
						  (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 8002520:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fd ffbb 	bl	80004a0 <__aeabi_f2d>
 800252a:	4b65      	ldr	r3, [pc, #404]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 800252c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002530:	f7fe f80e 	bl	8000550 <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4614      	mov	r4, r2
 800253a:	461d      	mov	r5, r3
						  +TrjStruc.Theta_Stamp_1;
 800253c:	4b60      	ldr	r3, [pc, #384]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	4618      	mov	r0, r3
 8002542:	f7fd ffad 	bl	80004a0 <__aeabi_f2d>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4620      	mov	r0, r4
 800254c:	4629      	mov	r1, r5
 800254e:	f7fd fe49 	bl	80001e4 <__adddf3>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f7fe fac9 	bl	8000af0 <__aeabi_d2f>
 800255e:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002560:	4a57      	ldr	r2, [pc, #348]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 8002562:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.LinearTimeLSPB*1000000)
 8002564:	f7ff fac8 	bl	8001af8 <micros>
 8002568:	4b55      	ldr	r3, [pc, #340]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 800256a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800256e:	ebb0 0a02 	subs.w	sl, r0, r2
 8002572:	eb61 0b03 	sbc.w	fp, r1, r3
 8002576:	4650      	mov	r0, sl
 8002578:	4659      	mov	r1, fp
 800257a:	f7fe fbd1 	bl	8000d20 <__aeabi_ul2f>
 800257e:	ee06 0a90 	vmov	s13, r0
 8002582:	4b4f      	ldr	r3, [pc, #316]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 8002584:	edd3 7a02 	vldr	s15, [r3, #8]
 8002588:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80026c4 <TrajectoryGenerationProcess+0x494>
 800258c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002590:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	da00      	bge.n	800259c <TrajectoryGenerationProcess+0x36c>
			  break;
 800259a:	e08a      	b.n	80026b2 <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 800259c:	f7ff faac 	bl	8001af8 <micros>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4946      	ldr	r1, [pc, #280]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 80025a6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 2;
 80025aa:	4b45      	ldr	r3, [pc, #276]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 80025ac:	2202      	movs	r2, #2
 80025ae:	66da      	str	r2, [r3, #108]	; 0x6c
			  break;
 80025b0:	e07f      	b.n	80026b2 <TrajectoryGenerationProcess+0x482>
			  else if (TrjStruc.Submode == 2)
 80025b2:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 80025b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d17b      	bne.n	80026b2 <TrajectoryGenerationProcess+0x482>
						  ((TrjStruc.AngularAcceration*-0.5)*(TrjStruc.Equation_Realtime_Sec*TrjStruc.Equation_Realtime_Sec))
 80025ba:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ff6e 	bl	80004a0 <__aeabi_f2d>
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <TrajectoryGenerationProcess+0x498>)
 80025ca:	f7fd ffc1 	bl	8000550 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4614      	mov	r4, r2
 80025d4:	461d      	mov	r5, r3
 80025d6:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 80025d8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80025dc:	4b38      	ldr	r3, [pc, #224]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 80025de:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80025e2:	f7fd ffb5 	bl	8000550 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4620      	mov	r0, r4
 80025ec:	4629      	mov	r1, r5
 80025ee:	f7fd ffaf 	bl	8000550 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4614      	mov	r4, r2
 80025f8:	461d      	mov	r5, r3
						  + (TrjStruc.AngularVelocity*(TrjStruc.Equation_Realtime_Sec))
 80025fa:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ff4e 	bl	80004a0 <__aeabi_f2d>
 8002604:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 8002606:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800260a:	f7fd ffa1 	bl	8000550 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4620      	mov	r0, r4
 8002614:	4629      	mov	r1, r5
 8002616:	f7fd fde5 	bl	80001e4 <__adddf3>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4614      	mov	r4, r2
 8002620:	461d      	mov	r5, r3
						  + TrjStruc.Theta_Stamp_2;
 8002622:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff3a 	bl	80004a0 <__aeabi_f2d>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd fdd6 	bl	80001e4 <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	f7fe fa56 	bl	8000af0 <__aeabi_d2f>
 8002644:	4603      	mov	r3, r0
				  TrjStruc.AngularDisplacementDesire =
 8002646:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 8002648:	6213      	str	r3, [r2, #32]
				  if (micros()-TrjStruc.Equation_Timestamp >= TrjStruc.BlendTimeLSPB*1000000)
 800264a:	f7ff fa55 	bl	8001af8 <micros>
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 8002650:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002654:	ebb0 0802 	subs.w	r8, r0, r2
 8002658:	eb61 0903 	sbc.w	r9, r1, r3
 800265c:	4640      	mov	r0, r8
 800265e:	4649      	mov	r1, r9
 8002660:	f7fe fb5e 	bl	8000d20 <__aeabi_ul2f>
 8002664:	ee06 0a90 	vmov	s13, r0
 8002668:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80026c4 <TrajectoryGenerationProcess+0x494>
 8002672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002676:	eef4 6ae7 	vcmpe.f32	s13, s15
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	da00      	bge.n	8002682 <TrajectoryGenerationProcess+0x452>
			  break;
 8002680:	e017      	b.n	80026b2 <TrajectoryGenerationProcess+0x482>
					  TrjStruc.Equation_Timestamp = micros();
 8002682:	f7ff fa39 	bl	8001af8 <micros>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	490d      	ldr	r1, [pc, #52]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 800268c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					  TrjStruc.Submode = 0;
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 8002692:	2200      	movs	r2, #0
 8002694:	66da      	str	r2, [r3, #108]	; 0x6c
					  TrjStruc.Mode = 2; ///Final Value Mode
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 8002698:	2202      	movs	r2, #2
 800269a:	669a      	str	r2, [r3, #104]	; 0x68
			  break;
 800269c:	e009      	b.n	80026b2 <TrajectoryGenerationProcess+0x482>
			  Moving_Link_Task_Flag = 1;
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <TrajectoryGenerationProcess+0x49c>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
			  TrjStruc.AngularDisplacementDesire = TrjStruc.Desire_Theta;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <TrajectoryGenerationProcess+0x490>)
 80026aa:	6213      	str	r3, [r2, #32]
			  break;
 80026ac:	e002      	b.n	80026b4 <TrajectoryGenerationProcess+0x484>
			  break;
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <TrajectoryGenerationProcess+0x484>
			  break;
 80026b2:	bf00      	nop
}
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026be:	bf00      	nop
 80026c0:	20000168 	.word	0x20000168
 80026c4:	49742400 	.word	0x49742400
 80026c8:	bfe00000 	.word	0xbfe00000
 80026cc:	200000f8 	.word	0x200000f8

080026d0 <PIDController2in1>:

void PIDController2in1()
{
 80026d0:	b5b0      	push	{r4, r5, r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	PositionPIDController.OutputDesire = TrjStruc.AngularDisplacementDesire;
 80026d4:	4b38      	ldr	r3, [pc, #224]	; (80027b8 <PIDController2in1+0xe8>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4a38      	ldr	r2, [pc, #224]	; (80027bc <PIDController2in1+0xec>)
 80026da:	6113      	str	r3, [r2, #16]
    PositionPIDController.NowError = PositionPIDController.OutputFeedback-PositionPIDController.OutputDesire;
 80026dc:	4b37      	ldr	r3, [pc, #220]	; (80027bc <PIDController2in1+0xec>)
 80026de:	ed93 7a05 	vldr	s14, [r3, #20]
 80026e2:	4b36      	ldr	r3, [pc, #216]	; (80027bc <PIDController2in1+0xec>)
 80026e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80026e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ec:	4b33      	ldr	r3, [pc, #204]	; (80027bc <PIDController2in1+0xec>)
 80026ee:	edc3 7a07 	vstr	s15, [r3, #28]
    PositionPIDController.Integral_Value += PositionPIDController.NowError*PositionPIDController.SamplingTime;
 80026f2:	4b32      	ldr	r3, [pc, #200]	; (80027bc <PIDController2in1+0xec>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd fed2 	bl	80004a0 <__aeabi_f2d>
 80026fc:	4604      	mov	r4, r0
 80026fe:	460d      	mov	r5, r1
 8002700:	4b2e      	ldr	r3, [pc, #184]	; (80027bc <PIDController2in1+0xec>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd fecb 	bl	80004a0 <__aeabi_f2d>
 800270a:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <PIDController2in1+0xec>)
 800270c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002710:	f7fd ff1e 	bl	8000550 <__aeabi_dmul>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4620      	mov	r0, r4
 800271a:	4629      	mov	r1, r5
 800271c:	f7fd fd62 	bl	80001e4 <__adddf3>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f7fe f9e2 	bl	8000af0 <__aeabi_d2f>
 800272c:	4603      	mov	r3, r0
 800272e:	4a23      	ldr	r2, [pc, #140]	; (80027bc <PIDController2in1+0xec>)
 8002730:	6193      	str	r3, [r2, #24]
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 8002732:	4b22      	ldr	r3, [pc, #136]	; (80027bc <PIDController2in1+0xec>)
 8002734:	ed93 7a00 	vldr	s14, [r3]
 8002738:	4b20      	ldr	r3, [pc, #128]	; (80027bc <PIDController2in1+0xec>)
 800273a:	edd3 7a07 	vldr	s15, [r3, #28]
 800273e:	ee27 7a27 	vmul.f32	s14, s14, s15
					  +(PositionPIDController.Ki * PositionPIDController.Integral_Value)
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <PIDController2in1+0xec>)
 8002744:	edd3 6a01 	vldr	s13, [r3, #4]
 8002748:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <PIDController2in1+0xec>)
 800274a:	edd3 7a06 	vldr	s15, [r3, #24]
 800274e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002756:	ee17 0a90 	vmov	r0, s15
 800275a:	f7fd fea1 	bl	80004a0 <__aeabi_f2d>
 800275e:	4604      	mov	r4, r0
 8002760:	460d      	mov	r5, r1
					  +(PositionPIDController.Kd * (PositionPIDController.NowError-PositionPIDController.PreviousError)/PositionPIDController.SamplingTime);
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <PIDController2in1+0xec>)
 8002764:	ed93 7a02 	vldr	s14, [r3, #8]
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <PIDController2in1+0xec>)
 800276a:	edd3 6a07 	vldr	s13, [r3, #28]
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <PIDController2in1+0xec>)
 8002770:	edd3 7a08 	vldr	s15, [r3, #32]
 8002774:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277c:	ee17 0a90 	vmov	r0, s15
 8002780:	f7fd fe8e 	bl	80004a0 <__aeabi_f2d>
 8002784:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <PIDController2in1+0xec>)
 8002786:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800278a:	f7fe f80b 	bl	80007a4 <__aeabi_ddiv>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4620      	mov	r0, r4
 8002794:	4629      	mov	r1, r5
 8002796:	f7fd fd25 	bl	80001e4 <__adddf3>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	f7fe f9a5 	bl	8000af0 <__aeabi_d2f>
 80027a6:	4603      	mov	r3, r0
    PositionPIDController.ControllerOutput = (PositionPIDController.Kp*PositionPIDController.NowError)
 80027a8:	4a04      	ldr	r2, [pc, #16]	; (80027bc <PIDController2in1+0xec>)
 80027aa:	60d3      	str	r3, [r2, #12]
    PositionPIDController.PreviousError = PositionPIDController.NowError;
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <PIDController2in1+0xec>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	4a02      	ldr	r2, [pc, #8]	; (80027bc <PIDController2in1+0xec>)
 80027b2:	6213      	str	r3, [r2, #32]
//    VelocityPIDController.ControllerOutput = (VelocityPIDController.Kp*VelocityPIDController.NowError)
//					  +(VelocityPIDController.Ki * VelocityPIDController.Integral_Value)
//					  +(VelocityPIDController.Kd * (VelocityPIDController.NowError-VelocityPIDController.PreviousError)/VelocityPIDController.SamplingTime);
//    VelocityPIDController.PreviousError = VelocityPIDController.NowError;

}
 80027b4:	bf00      	nop
 80027b6:	bdb0      	pop	{r4, r5, r7, pc}
 80027b8:	20000168 	.word	0x20000168
 80027bc:	20000108 	.word	0x20000108

080027c0 <UARTInit>:



///UART ZONE
void UARTInit(UARTStucrture *uart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <UARTInit+0x4c>)
 80027ca:	88db      	ldrh	r3, [r3, #6]
 80027cc:	4619      	mov	r1, r3
 80027ce:	2001      	movs	r0, #1
 80027d0:	f006 fdf0 	bl	80093b4 <calloc>
 80027d4:	4603      	mov	r3, r0
 80027d6:	461a      	mov	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <UARTInit+0x4c>)
 80027de:	889b      	ldrh	r3, [r3, #4]
 80027e0:	4619      	mov	r1, r3
 80027e2:	2001      	movs	r0, #1
 80027e4:	f006 fde6 	bl	80093b4 <calloc>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	81da      	strh	r2, [r3, #14]
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200000b8 	.word	0x200000b8

08002810 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6919      	ldr	r1, [r3, #16]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	88db      	ldrh	r3, [r3, #6]
 8002824:	461a      	mov	r2, r3
 8002826:	f005 ff41 	bl	80086ac <HAL_UART_Receive_DMA>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	88db      	ldrh	r3, [r3, #6]
 800283e:	461a      	mov	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	1ad3      	subs	r3, r2, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8002860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002864:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	8a9b      	ldrh	r3, [r3, #20]
 800286a:	461c      	mov	r4, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ffe0 	bl	8002832 <UARTGetRxHead>
 8002872:	4603      	mov	r3, r0
 8002874:	429c      	cmp	r4, r3
 8002876:	d013      	beq.n	80028a0 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	8a92      	ldrh	r2, [r2, #20]
 8002880:	4413      	add	r3, r2
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8a9b      	ldrh	r3, [r3, #20]
 800288a:	3301      	adds	r3, #1
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	88d2      	ldrh	r2, [r2, #6]
 8002890:	fb93 f1f2 	sdiv	r1, r3, r2
 8002894:	fb02 f201 	mul.w	r2, r2, r1
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	b29a      	uxth	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 80028a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd90      	pop	{r4, r7, pc}

080028ac <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d13d      	bne.n	800293e <UARTTxDumpBuffer+0x92>
 80028c2:	4b21      	ldr	r3, [pc, #132]	; (8002948 <UARTTxDumpBuffer+0x9c>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d139      	bne.n	800293e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 80028ca:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <UARTTxDumpBuffer+0x9c>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	89da      	ldrh	r2, [r3, #14]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	899b      	ldrh	r3, [r3, #12]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d02d      	beq.n	8002938 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	89da      	ldrh	r2, [r3, #14]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d906      	bls.n	80028f6 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	89da      	ldrh	r2, [r3, #14]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	e005      	b.n	8002902 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	889a      	ldrh	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	b29b      	uxth	r3, r3
 8002902:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	8992      	ldrh	r2, [r2, #12]
 8002910:	4413      	add	r3, r2
 8002912:	89fa      	ldrh	r2, [r7, #14]
 8002914:	4619      	mov	r1, r3
 8002916:	f005 fe5d 	bl	80085d4 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	899b      	ldrh	r3, [r3, #12]
 800291e:	461a      	mov	r2, r3
 8002920:	89fb      	ldrh	r3, [r7, #14]
 8002922:	4413      	add	r3, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	8892      	ldrh	r2, [r2, #4]
 8002928:	fb93 f1f2 	sdiv	r1, r3, r2
 800292c:	fb02 f201 	mul.w	r2, r2, r1
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	b29a      	uxth	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <UARTTxDumpBuffer+0x9c>)
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
	}
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200001f8 	.word	0x200001f8

0800294c <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	4613      	mov	r3, r2
 8002958:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	889b      	ldrh	r3, [r3, #4]
 800295e:	88fa      	ldrh	r2, [r7, #6]
 8002960:	4293      	cmp	r3, r2
 8002962:	bf28      	it	cs
 8002964:	4613      	movcs	r3, r2
 8002966:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002968:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	889b      	ldrh	r3, [r3, #4]
 800296e:	4619      	mov	r1, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	89db      	ldrh	r3, [r3, #14]
 8002974:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002976:	4293      	cmp	r3, r2
 8002978:	bfa8      	it	ge
 800297a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 800297c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	89d2      	ldrh	r2, [r2, #14]
 8002986:	4413      	add	r3, r2
 8002988:	8aba      	ldrh	r2, [r7, #20]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	4618      	mov	r0, r3
 800298e:	f006 fd43 	bl	8009418 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	89db      	ldrh	r3, [r3, #14]
 8002996:	461a      	mov	r2, r3
 8002998:	8afb      	ldrh	r3, [r7, #22]
 800299a:	4413      	add	r3, r2
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	8892      	ldrh	r2, [r2, #4]
 80029a0:	fb93 f1f2 	sdiv	r1, r3, r2
 80029a4:	fb02 f201 	mul.w	r2, r2, r1
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80029b0:	8afa      	ldrh	r2, [r7, #22]
 80029b2:	8abb      	ldrh	r3, [r7, #20]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d00a      	beq.n	80029ce <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6898      	ldr	r0, [r3, #8]
 80029bc:	8abb      	ldrh	r3, [r7, #20]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 80029c2:	8afa      	ldrh	r2, [r7, #22]
 80029c4:	8abb      	ldrh	r3, [r7, #20]
 80029c6:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80029c8:	461a      	mov	r2, r3
 80029ca:	f006 fd25 	bl	8009418 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7ff ff6c 	bl	80028ac <UARTTxDumpBuffer>

}
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <ACK1Return>:

void ACK1Return(UARTStucrture *uart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {0x58, 0b01110101};
 80029e4:	f247 5358 	movw	r3, #30040	; 0x7558
 80029e8:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 80029ea:	f107 030c 	add.w	r3, r7, #12
 80029ee:	2202      	movs	r2, #2
 80029f0:	4619      	mov	r1, r3
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ffaa 	bl	800294c <UARTTxWrite>
	}
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <ACK2Return>:

void ACK2Return(UARTStucrture *uart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	{
	uint8_t temp[] = {70, 110};
 8002a08:	f646 6346 	movw	r3, #28230	; 0x6e46
 8002a0c:	81bb      	strh	r3, [r7, #12]
	UARTTxWrite(uart, temp, 2);
 8002a0e:	f107 030c 	add.w	r3, r7, #12
 8002a12:	2202      	movs	r2, #2
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ff98 	bl	800294c <UARTTxWrite>
	}
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	0000      	movs	r0, r0
	...

08002a28 <Munmunbot_Protocol>:
	UARTTxWrite(uart, temp, 2);
	}
}

void Munmunbot_Protocol(int16_t dataIn,UARTStucrture *uart)
{
 8002a28:	b5b0      	push	{r4, r5, r7, lr}
 8002a2a:	b08e      	sub	sp, #56	; 0x38
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	80fb      	strh	r3, [r7, #6]
	static uint8_t parameter_ptr = 0;
	static uint16_t Data_HAck = 0;
	static uint32_t CheckSum = 0;
	static uint16_t DataForReturn = 0;

	switch (Munmunbot_Protocol_State)
 8002a34:	4b8b      	ldr	r3, [pc, #556]	; (8002c64 <Munmunbot_Protocol+0x23c>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b05      	cmp	r3, #5
 8002a3a:	f200 83bd 	bhi.w	80031b8 <Munmunbot_Protocol+0x790>
 8002a3e:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <Munmunbot_Protocol+0x1c>)
 8002a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a44:	08002a5d 	.word	0x08002a5d
 8002a48:	08002b11 	.word	0x08002b11
 8002a4c:	08002b53 	.word	0x08002b53
 8002a50:	08002ba1 	.word	0x08002ba1
 8002a54:	08002bc5 	.word	0x08002bc5
 8002a58:	08002c85 	.word	0x08002c85
	{
		case PP_STARTandMode:
			if (((dataIn>>4) & 0b1111) == 0b1001)
 8002a5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a60:	111b      	asrs	r3, r3, #4
 8002a62:	b21b      	sxth	r3, r3
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	2b09      	cmp	r3, #9
 8002a6c:	f040 83a1 	bne.w	80031b2 <Munmunbot_Protocol+0x78a>
			{
				CheckSum = dataIn;
 8002a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a74:	4a7c      	ldr	r2, [pc, #496]	; (8002c68 <Munmunbot_Protocol+0x240>)
 8002a76:	6013      	str	r3, [r2, #0]
				ProtocolMode = dataIn & 0b1111;
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4b7a      	ldr	r3, [pc, #488]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002a84:	701a      	strb	r2, [r3, #0]

				if (ProtocolMode == 7)
 8002a86:	4b79      	ldr	r3, [pc, #484]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b07      	cmp	r3, #7
 8002a8c:	d103      	bne.n	8002a96 <Munmunbot_Protocol+0x6e>
				{
					Munmunbot_Protocol_State = PP_Frame3_Data_0; ///Frame3
 8002a8e:	4b75      	ldr	r3, [pc, #468]	; (8002c64 <Munmunbot_Protocol+0x23c>)
 8002a90:	2203      	movs	r2, #3
 8002a92:	701a      	strb	r2, [r3, #0]
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
				{
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
				}
			}
			break;
 8002a94:	e38d      	b.n	80031b2 <Munmunbot_Protocol+0x78a>
				else if (ProtocolMode == 1 || ProtocolMode == 4 || ProtocolMode == 5 ||ProtocolMode == 6)
 8002a96:	4b75      	ldr	r3, [pc, #468]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d00b      	beq.n	8002ab6 <Munmunbot_Protocol+0x8e>
 8002a9e:	4b73      	ldr	r3, [pc, #460]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d007      	beq.n	8002ab6 <Munmunbot_Protocol+0x8e>
 8002aa6:	4b71      	ldr	r3, [pc, #452]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d003      	beq.n	8002ab6 <Munmunbot_Protocol+0x8e>
 8002aae:	4b6f      	ldr	r3, [pc, #444]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d103      	bne.n	8002abe <Munmunbot_Protocol+0x96>
					Munmunbot_Protocol_State = PP_Frame2_Data_0; //Frame2
 8002ab6:	4b6b      	ldr	r3, [pc, #428]	; (8002c64 <Munmunbot_Protocol+0x23c>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
			break;
 8002abc:	e379      	b.n	80031b2 <Munmunbot_Protocol+0x78a>
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8002abe:	4b6b      	ldr	r3, [pc, #428]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d020      	beq.n	8002b08 <Munmunbot_Protocol+0xe0>
 8002ac6:	4b69      	ldr	r3, [pc, #420]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d01c      	beq.n	8002b08 <Munmunbot_Protocol+0xe0>
 8002ace:	4b67      	ldr	r3, [pc, #412]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d018      	beq.n	8002b08 <Munmunbot_Protocol+0xe0>
 8002ad6:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b09      	cmp	r3, #9
 8002adc:	d014      	beq.n	8002b08 <Munmunbot_Protocol+0xe0>
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b0a      	cmp	r3, #10
 8002ae4:	d010      	beq.n	8002b08 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8002ae6:	4b61      	ldr	r3, [pc, #388]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
				else if (ProtocolMode == 2 || ProtocolMode == 3 || ProtocolMode == 8 || ProtocolMode == 9 || ProtocolMode == 10 ||
 8002aea:	2b0b      	cmp	r3, #11
 8002aec:	d00c      	beq.n	8002b08 <Munmunbot_Protocol+0xe0>
						ProtocolMode == 11 ||ProtocolMode == 12 ||ProtocolMode == 13 || ProtocolMode == 14 )
 8002aee:	4b5f      	ldr	r3, [pc, #380]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d008      	beq.n	8002b08 <Munmunbot_Protocol+0xe0>
 8002af6:	4b5d      	ldr	r3, [pc, #372]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b0d      	cmp	r3, #13
 8002afc:	d004      	beq.n	8002b08 <Munmunbot_Protocol+0xe0>
 8002afe:	4b5b      	ldr	r3, [pc, #364]	; (8002c6c <Munmunbot_Protocol+0x244>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b0e      	cmp	r3, #14
 8002b04:	f040 8355 	bne.w	80031b2 <Munmunbot_Protocol+0x78a>
					Munmunbot_Protocol_State = PP_CheckSum;   /// Frame1
 8002b08:	4b56      	ldr	r3, [pc, #344]	; (8002c64 <Munmunbot_Protocol+0x23c>)
 8002b0a:	2205      	movs	r2, #5
 8002b0c:	701a      	strb	r2, [r3, #0]
			break;
 8002b0e:	e350      	b.n	80031b2 <Munmunbot_Protocol+0x78a>
		case PP_Frame2_Data_0:
			 CheckSum += dataIn;
 8002b10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b14:	4b54      	ldr	r3, [pc, #336]	; (8002c68 <Munmunbot_Protocol+0x240>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4413      	add	r3, r2
 8002b1a:	4a53      	ldr	r2, [pc, #332]	; (8002c68 <Munmunbot_Protocol+0x240>)
 8002b1c:	6013      	str	r3, [r2, #0]
			 Data_HAck = ((dataIn&0b11111111)<<8)&0b1111111100000000;
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	4b52      	ldr	r3, [pc, #328]	; (8002c70 <Munmunbot_Protocol+0x248>)
 8002b26:	801a      	strh	r2, [r3, #0]
			 parameter[0] = dataIn&0b1111;
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <Munmunbot_Protocol+0x24c>)
 8002b34:	701a      	strb	r2, [r3, #0]
			 parameter[1] = (dataIn>>4)&0b1111;
 8002b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b3a:	111b      	asrs	r3, r3, #4
 8002b3c:	b21b      	sxth	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4b4b      	ldr	r3, [pc, #300]	; (8002c74 <Munmunbot_Protocol+0x24c>)
 8002b48:	705a      	strb	r2, [r3, #1]
			 Munmunbot_Protocol_State = PP_Frame2_Data_1;
 8002b4a:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <Munmunbot_Protocol+0x23c>)
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]

			 break;
 8002b50:	e332      	b.n	80031b8 <Munmunbot_Protocol+0x790>
		case PP_Frame2_Data_1:
			 CheckSum += dataIn;
 8002b52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b56:	4b44      	ldr	r3, [pc, #272]	; (8002c68 <Munmunbot_Protocol+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	4a42      	ldr	r2, [pc, #264]	; (8002c68 <Munmunbot_Protocol+0x240>)
 8002b5e:	6013      	str	r3, [r2, #0]
			 Data_HAck = (dataIn&0b11111111) | Data_HAck;
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	b21a      	sxth	r2, r3
 8002b66:	4b42      	ldr	r3, [pc, #264]	; (8002c70 <Munmunbot_Protocol+0x248>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b21b      	sxth	r3, r3
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	b21b      	sxth	r3, r3
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <Munmunbot_Protocol+0x248>)
 8002b74:	801a      	strh	r2, [r3, #0]
			 parameter[2] = dataIn&0b1111;
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	4b3c      	ldr	r3, [pc, #240]	; (8002c74 <Munmunbot_Protocol+0x24c>)
 8002b82:	709a      	strb	r2, [r3, #2]
			 parameter[3] = (dataIn>>4)&0b1111;
 8002b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b88:	111b      	asrs	r3, r3, #4
 8002b8a:	b21b      	sxth	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <Munmunbot_Protocol+0x24c>)
 8002b96:	70da      	strb	r2, [r3, #3]
			 Munmunbot_Protocol_State = PP_CheckSum;
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <Munmunbot_Protocol+0x23c>)
 8002b9a:	2205      	movs	r2, #5
 8002b9c:	701a      	strb	r2, [r3, #0]
			 break;
 8002b9e:	e30b      	b.n	80031b8 <Munmunbot_Protocol+0x790>

		case PP_Frame3_Data_0:
		     CheckSum += dataIn;
 8002ba0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ba4:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <Munmunbot_Protocol+0x240>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4413      	add	r3, r2
 8002baa:	4a2f      	ldr	r2, [pc, #188]	; (8002c68 <Munmunbot_Protocol+0x240>)
 8002bac:	6013      	str	r3, [r2, #0]
		     n_station = dataIn;
 8002bae:	88fa      	ldrh	r2, [r7, #6]
 8002bb0:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <Munmunbot_Protocol+0x250>)
 8002bb2:	801a      	strh	r2, [r3, #0]
		     n_station_mem = n_station;
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <Munmunbot_Protocol+0x250>)
 8002bb6:	881a      	ldrh	r2, [r3, #0]
 8002bb8:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <Munmunbot_Protocol+0x254>)
 8002bba:	801a      	strh	r2, [r3, #0]
		     Munmunbot_Protocol_State = PP_Frame3_Data_1;
 8002bbc:	4b29      	ldr	r3, [pc, #164]	; (8002c64 <Munmunbot_Protocol+0x23c>)
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	701a      	strb	r2, [r3, #0]

		   break;
 8002bc2:	e2f9      	b.n	80031b8 <Munmunbot_Protocol+0x790>

		case PP_Frame3_Data_1:
				CheckSum += dataIn;
 8002bc4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <Munmunbot_Protocol+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a26      	ldr	r2, [pc, #152]	; (8002c68 <Munmunbot_Protocol+0x240>)
 8002bd0:	6013      	str	r3, [r2, #0]
				if (n_station >= 2)
 8002bd2:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <Munmunbot_Protocol+0x250>)
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d927      	bls.n	8002c2a <Munmunbot_Protocol+0x202>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	4a28      	ldr	r2, [pc, #160]	; (8002c80 <Munmunbot_Protocol+0x258>)
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	b2d9      	uxtb	r1, r3
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <Munmunbot_Protocol+0x24c>)
 8002bea:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002bec:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <Munmunbot_Protocol+0x258>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <Munmunbot_Protocol+0x258>)
 8002bf6:	701a      	strb	r2, [r3, #0]
					parameter[parameter_ptr] = (dataIn>>4)&0b1111;
 8002bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfc:	111b      	asrs	r3, r3, #4
 8002bfe:	b21b      	sxth	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	4a1f      	ldr	r2, [pc, #124]	; (8002c80 <Munmunbot_Protocol+0x258>)
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	b2d9      	uxtb	r1, r3
 8002c0c:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <Munmunbot_Protocol+0x24c>)
 8002c0e:	5499      	strb	r1, [r3, r2]
					parameter_ptr += 1;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <Munmunbot_Protocol+0x258>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <Munmunbot_Protocol+0x258>)
 8002c1a:	701a      	strb	r2, [r3, #0]
					n_station -= 2;
 8002c1c:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <Munmunbot_Protocol+0x250>)
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	3b02      	subs	r3, #2
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <Munmunbot_Protocol+0x250>)
 8002c26:	801a      	strh	r2, [r3, #0]
 8002c28:	e012      	b.n	8002c50 <Munmunbot_Protocol+0x228>
				}
				else if (n_station == 1)
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <Munmunbot_Protocol+0x250>)
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d10e      	bne.n	8002c50 <Munmunbot_Protocol+0x228>
				{
					parameter[parameter_ptr] = dataIn&0b1111;
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <Munmunbot_Protocol+0x258>)
 8002c38:	7812      	ldrb	r2, [r2, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	b2d9      	uxtb	r1, r3
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <Munmunbot_Protocol+0x24c>)
 8002c42:	5499      	strb	r1, [r3, r2]
					n_station -= 1;
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <Munmunbot_Protocol+0x250>)
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <Munmunbot_Protocol+0x250>)
 8002c4e:	801a      	strh	r2, [r3, #0]
				}
				if  (n_station == 0)
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <Munmunbot_Protocol+0x250>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 82ae 	bne.w	80031b6 <Munmunbot_Protocol+0x78e>
				{
					Munmunbot_Protocol_State = PP_CheckSum;
 8002c5a:	4b02      	ldr	r3, [pc, #8]	; (8002c64 <Munmunbot_Protocol+0x23c>)
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002c60:	e2a9      	b.n	80031b6 <Munmunbot_Protocol+0x78e>
 8002c62:	bf00      	nop
 8002c64:	200000d8 	.word	0x200000d8
 8002c68:	200001fc 	.word	0x200001fc
 8002c6c:	20000200 	.word	0x20000200
 8002c70:	20000202 	.word	0x20000202
 8002c74:	20000204 	.word	0x20000204
 8002c78:	20000304 	.word	0x20000304
 8002c7c:	20000306 	.word	0x20000306
 8002c80:	20000308 	.word	0x20000308

			case PP_CheckSum:
			{
				CheckSum = (~CheckSum) & 0xff;
 8002c84:	4ba3      	ldr	r3, [pc, #652]	; (8002f14 <Munmunbot_Protocol+0x4ec>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4aa1      	ldr	r2, [pc, #644]	; (8002f14 <Munmunbot_Protocol+0x4ec>)
 8002c8e:	6013      	str	r3, [r2, #0]
				if (CheckSum == dataIn)
 8002c90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c94:	4b9f      	ldr	r3, [pc, #636]	; (8002f14 <Munmunbot_Protocol+0x4ec>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	f040 8276 	bne.w	800318a <Munmunbot_Protocol+0x762>
				{

					switch (ProtocolMode)
 8002c9e:	4b9e      	ldr	r3, [pc, #632]	; (8002f18 <Munmunbot_Protocol+0x4f0>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	2b0d      	cmp	r3, #13
 8002ca6:	f200 8271 	bhi.w	800318c <Munmunbot_Protocol+0x764>
 8002caa:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <Munmunbot_Protocol+0x288>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002ce9 	.word	0x08002ce9
 8002cb4:	08002d5d 	.word	0x08002d5d
 8002cb8:	08002d73 	.word	0x08002d73
 8002cbc:	08002d89 	.word	0x08002d89
 8002cc0:	08002dab 	.word	0x08002dab
 8002cc4:	08002dc9 	.word	0x08002dc9
 8002cc8:	08002ded 	.word	0x08002ded
 8002ccc:	08002e37 	.word	0x08002e37
 8002cd0:	08002e61 	.word	0x08002e61
 8002cd4:	08002f55 	.word	0x08002f55
 8002cd8:	0800306f 	.word	0x0800306f
 8002cdc:	08003143 	.word	0x08003143
 8002ce0:	08003159 	.word	0x08003159
 8002ce4:	0800316f 	.word	0x0800316f
					{
					case 1: ///Test Command ##Complete##
						{
						uint8_t temp[] =
 8002ce8:	2391      	movs	r3, #145	; 0x91
 8002cea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
						{0b10010001,
						((parameter[1] & 0xff) << 4)  | (parameter[0]& 0xff),
 8002cee:	4b8b      	ldr	r3, [pc, #556]	; (8002f1c <Munmunbot_Protocol+0x4f4>)
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	b25a      	sxtb	r2, r3
 8002cf6:	4b89      	ldr	r3, [pc, #548]	; (8002f1c <Munmunbot_Protocol+0x4f4>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8002d02:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						((parameter[3] & 0xff) << 4)  | (parameter[2]& 0xff),
 8002d06:	4b85      	ldr	r3, [pc, #532]	; (8002f1c <Munmunbot_Protocol+0x4f4>)
 8002d08:	78db      	ldrb	r3, [r3, #3]
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	b25a      	sxtb	r2, r3
 8002d0e:	4b83      	ldr	r3, [pc, #524]	; (8002f1c <Munmunbot_Protocol+0x4f4>)
 8002d10:	789b      	ldrb	r3, [r3, #2]
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	4313      	orrs	r3, r2
 8002d16:	b25b      	sxtb	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
						uint8_t temp[] =
 8002d1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d24:	2358      	movs	r3, #88	; 0x58
 8002d26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002d2a:	2375      	movs	r3, #117	; 0x75
 8002d2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						0b0 , 0x58 ,0x75 };
						temp[3] = (~(temp[0]+temp[1]+temp[2]))& 0xff;
 8002d30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002d34:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002d38:	4413      	add	r3, r2
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002d40:	4413      	add	r3, r2
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						UARTTxWrite(uart, temp, 6);
 8002d4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d50:	2206      	movs	r2, #6
 8002d52:	4619      	mov	r1, r3
 8002d54:	6838      	ldr	r0, [r7, #0]
 8002d56:	f7ff fdf9 	bl	800294c <UARTTxWrite>
						}
						break;
 8002d5a:	e217      	b.n	800318c <Munmunbot_Protocol+0x764>
					case 2: //Connect MCU ##Complete##
						if (Munmunbot_State == STATE_Disconnected)
 8002d5c:	4b70      	ldr	r3, [pc, #448]	; (8002f20 <Munmunbot_Protocol+0x4f8>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <Munmunbot_Protocol+0x342>
						{
							Munmunbot_State = STATE_Idle;
 8002d64:	4b6e      	ldr	r3, [pc, #440]	; (8002f20 <Munmunbot_Protocol+0x4f8>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002d6a:	6838      	ldr	r0, [r7, #0]
 8002d6c:	f7ff fe36 	bl	80029dc <ACK1Return>
						break;
 8002d70:	e20c      	b.n	800318c <Munmunbot_Protocol+0x764>
					case 3: //Disconnect MCU ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002d72:	4b6b      	ldr	r3, [pc, #428]	; (8002f20 <Munmunbot_Protocol+0x4f8>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d102      	bne.n	8002d80 <Munmunbot_Protocol+0x358>
						{
							Munmunbot_State = STATE_Disconnected;
 8002d7a:	4b69      	ldr	r3, [pc, #420]	; (8002f20 <Munmunbot_Protocol+0x4f8>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002d80:	6838      	ldr	r0, [r7, #0]
 8002d82:	f7ff fe2b 	bl	80029dc <ACK1Return>
						break;
 8002d86:	e201      	b.n	800318c <Munmunbot_Protocol+0x764>
					case 4: //Set Angular Velocity ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002d88:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <Munmunbot_Protocol+0x4f8>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d108      	bne.n	8002da2 <Munmunbot_Protocol+0x37a>
						{
							CUSSStruc.RPMp = Data_HAck;
 8002d90:	4b64      	ldr	r3, [pc, #400]	; (8002f24 <Munmunbot_Protocol+0x4fc>)
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b64      	ldr	r3, [pc, #400]	; (8002f28 <Munmunbot_Protocol+0x500>)
 8002d98:	609a      	str	r2, [r3, #8]
							TrajectoryGenerationVelocityMaxSetting(&TrjStruc , &CUSSStruc);
 8002d9a:	4963      	ldr	r1, [pc, #396]	; (8002f28 <Munmunbot_Protocol+0x500>)
 8002d9c:	4863      	ldr	r0, [pc, #396]	; (8002f2c <Munmunbot_Protocol+0x504>)
 8002d9e:	f7fe ffbb 	bl	8001d18 <TrajectoryGenerationVelocityMaxSetting>
						}
						ACK1Return(uart);
 8002da2:	6838      	ldr	r0, [r7, #0]
 8002da4:	f7ff fe1a 	bl	80029dc <ACK1Return>
						break;
 8002da8:	e1f0      	b.n	800318c <Munmunbot_Protocol+0x764>
					case 5:   //Set Angular pos ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002daa:	4b5d      	ldr	r3, [pc, #372]	; (8002f20 <Munmunbot_Protocol+0x4f8>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d106      	bne.n	8002dc0 <Munmunbot_Protocol+0x398>
						{
							Angularpos_InputNumber = Data_HAck;
 8002db2:	4b5c      	ldr	r3, [pc, #368]	; (8002f24 <Munmunbot_Protocol+0x4fc>)
 8002db4:	881a      	ldrh	r2, [r3, #0]
 8002db6:	4b5e      	ldr	r3, [pc, #376]	; (8002f30 <Munmunbot_Protocol+0x508>)
 8002db8:	801a      	strh	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Pos_Directly;
 8002dba:	4b5e      	ldr	r3, [pc, #376]	; (8002f34 <Munmunbot_Protocol+0x50c>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002dc0:	6838      	ldr	r0, [r7, #0]
 8002dc2:	f7ff fe0b 	bl	80029dc <ACK1Return>
						break;
 8002dc6:	e1e1      	b.n	800318c <Munmunbot_Protocol+0x764>
					case 6:  /// Set 1 Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002dc8:	4b55      	ldr	r3, [pc, #340]	; (8002f20 <Munmunbot_Protocol+0x4f8>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d109      	bne.n	8002de4 <Munmunbot_Protocol+0x3bc>
						{
//							Angularpos_InputArray[0] = parameter[0];
							Angularpos_InputArray[0] = parameter[2];    //150 0x00 0x0A Checksum
 8002dd0:	4b52      	ldr	r3, [pc, #328]	; (8002f1c <Munmunbot_Protocol+0x4f4>)
 8002dd2:	789a      	ldrb	r2, [r3, #2]
 8002dd4:	4b58      	ldr	r3, [pc, #352]	; (8002f38 <Munmunbot_Protocol+0x510>)
 8002dd6:	701a      	strb	r2, [r3, #0]
							MovingLinkMode = LMM_Set_Goal_1_Station;
 8002dd8:	4b56      	ldr	r3, [pc, #344]	; (8002f34 <Munmunbot_Protocol+0x50c>)
 8002dda:	2202      	movs	r2, #2
 8002ddc:	701a      	strb	r2, [r3, #0]
							NumberOfStationToGo = 1;
 8002dde:	4b57      	ldr	r3, [pc, #348]	; (8002f3c <Munmunbot_Protocol+0x514>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002de4:	6838      	ldr	r0, [r7, #0]
 8002de6:	f7ff fdf9 	bl	80029dc <ACK1Return>
						break;
 8002dea:	e1cf      	b.n	800318c <Munmunbot_Protocol+0x764>
					case 7:  /// Set n Station ##Complete##
						if (Munmunbot_State == STATE_Idle)
 8002dec:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <Munmunbot_Protocol+0x4f8>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d11c      	bne.n	8002e2e <Munmunbot_Protocol+0x406>
						{
							MovingLinkMode = LMM_Set_Goal_n_Station;
 8002df4:	4b4f      	ldr	r3, [pc, #316]	; (8002f34 <Munmunbot_Protocol+0x50c>)
 8002df6:	2203      	movs	r2, #3
 8002df8:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8002dfe:	e00b      	b.n	8002e18 <Munmunbot_Protocol+0x3f0>
							{
								Angularpos_InputArray[i] = parameter[i];
 8002e00:	4a46      	ldr	r2, [pc, #280]	; (8002f1c <Munmunbot_Protocol+0x4f4>)
 8002e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e04:	4413      	add	r3, r2
 8002e06:	7819      	ldrb	r1, [r3, #0]
 8002e08:	4a4b      	ldr	r2, [pc, #300]	; (8002f38 <Munmunbot_Protocol+0x510>)
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0c:	4413      	add	r3, r2
 8002e0e:	460a      	mov	r2, r1
 8002e10:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < n_station_mem; i++)
 8002e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e14:	3301      	adds	r3, #1
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
 8002e18:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <Munmunbot_Protocol+0x518>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e20:	4293      	cmp	r3, r2
 8002e22:	dbed      	blt.n	8002e00 <Munmunbot_Protocol+0x3d8>
							}
							NumberOfStationToGo = n_station_mem;
 8002e24:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <Munmunbot_Protocol+0x518>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4b44      	ldr	r3, [pc, #272]	; (8002f3c <Munmunbot_Protocol+0x514>)
 8002e2c:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8002e2e:	6838      	ldr	r0, [r7, #0]
 8002e30:	f7ff fdd4 	bl	80029dc <ACK1Return>
						break;
 8002e34:	e1aa      	b.n	800318c <Munmunbot_Protocol+0x764>
					case 8:  /// Go go ##Complete##  ///But must implement return ACK after it's done
						if (Munmunbot_State == STATE_Idle)
 8002e36:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <Munmunbot_Protocol+0x4f8>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d106      	bne.n	8002e4c <Munmunbot_Protocol+0x424>
						{
							Munmunbot_State = STATE_PrepareDATA;
 8002e3e:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <Munmunbot_Protocol+0x4f8>)
 8002e40:	2202      	movs	r2, #2
 8002e42:	701a      	strb	r2, [r3, #0]
							ACK1Return(uart);
 8002e44:	6838      	ldr	r0, [r7, #0]
 8002e46:	f7ff fdc9 	bl	80029dc <ACK1Return>
								{0x58 ,  0x75 ,
										70,  110};  ///ACK1 + ACK2
								UARTTxWrite(uart, temp, 4);
							}
						}
						break;
 8002e4a:	e19f      	b.n	800318c <Munmunbot_Protocol+0x764>
								uint8_t temp[] =
 8002e4c:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <Munmunbot_Protocol+0x51c>)
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
								UARTTxWrite(uart, temp, 4);
 8002e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e54:	2204      	movs	r2, #4
 8002e56:	4619      	mov	r1, r3
 8002e58:	6838      	ldr	r0, [r7, #0]
 8002e5a:	f7ff fd77 	bl	800294c <UARTTxWrite>
						break;
 8002e5e:	e195      	b.n	800318c <Munmunbot_Protocol+0x764>

					case 9:  /// Return Current Station   ##Complete##

						{
							uint8_t temp[] =
 8002e60:	4a39      	ldr	r2, [pc, #228]	; (8002f48 <Munmunbot_Protocol+0x520>)
 8002e62:	f107 031c 	add.w	r3, r7, #28
 8002e66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e6a:	6018      	str	r0, [r3, #0]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	8019      	strh	r1, [r3, #0]
							{0x58 ,  0x75 ,
									153,  0b0,  0b0, 0b0}; ///ACK1 + Mode 9
							uint8_t Shift = 2;
 8002e70:	2302      	movs	r3, #2
 8002e72:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
							DataForReturn = Current_Station&(0xff);
 8002e76:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <Munmunbot_Protocol+0x524>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <Munmunbot_Protocol+0x528>)
 8002e7e:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8002e80:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <Munmunbot_Protocol+0x528>)
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002e94:	440b      	add	r3, r1
 8002e96:	f803 2c1c 	strb.w	r2, [r3, #-28]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8002e9a:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <Munmunbot_Protocol+0x528>)
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002eaa:	440b      	add	r3, r1
 8002eac:	f803 2c1c 	strb.w	r2, [r3, #-28]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 8002eb0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002eb4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002eb8:	4413      	add	r3, r2
 8002eba:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8002ebe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002ec8:	440b      	add	r3, r1
 8002eca:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002ece:	4413      	add	r3, r2
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002edc:	440b      	add	r3, r1
 8002ede:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002eea:	3303      	adds	r3, #3
 8002eec:	43d2      	mvns	r2, r2
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002ef4:	440b      	add	r3, r1
 8002ef6:	f803 2c1c 	strb.w	r2, [r3, #-28]
							UARTTxWrite(uart, temp, 4+Shift);
 8002efa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3304      	adds	r3, #4
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	f107 031c 	add.w	r3, r7, #28
 8002f08:	4619      	mov	r1, r3
 8002f0a:	6838      	ldr	r0, [r7, #0]
 8002f0c:	f7ff fd1e 	bl	800294c <UARTTxWrite>
						}

						break;
 8002f10:	e13c      	b.n	800318c <Munmunbot_Protocol+0x764>
 8002f12:	bf00      	nop
 8002f14:	200001fc 	.word	0x200001fc
 8002f18:	20000200 	.word	0x20000200
 8002f1c:	20000204 	.word	0x20000204
 8002f20:	20000000 	.word	0x20000000
 8002f24:	20000202 	.word	0x20000202
 8002f28:	200001d8 	.word	0x200001d8
 8002f2c:	20000168 	.word	0x20000168
 8002f30:	200000ec 	.word	0x200000ec
 8002f34:	200000ee 	.word	0x200000ee
 8002f38:	200000dc 	.word	0x200000dc
 8002f3c:	200000f0 	.word	0x200000f0
 8002f40:	20000306 	.word	0x20000306
 8002f44:	6e467558 	.word	0x6e467558
 8002f48:	0800973c 	.word	0x0800973c
 8002f4c:	200000ef 	.word	0x200000ef
 8002f50:	2000030a 	.word	0x2000030a

					case 10: /// Return Angular Position  ##Complete##
						{
							uint8_t temp[] =
 8002f54:	4a9e      	ldr	r2, [pc, #632]	; (80031d0 <Munmunbot_Protocol+0x7a8>)
 8002f56:	f107 0314 	add.w	r3, r7, #20
 8002f5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f5e:	6018      	str	r0, [r3, #0]
 8002f60:	3304      	adds	r3, #4
 8002f62:	8019      	strh	r1, [r3, #0]
							{0x58 , 0x75 ,154, 0b0,  0b0, 0b0};
							uint8_t Shift = 2;
 8002f64:	2302      	movs	r3, #2
 8002f66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
							DataForReturn = ((((int)PositionPIDController.OutputFeedback) % (CUSSStruc.PPRxQEI))*2*3.141*10000)/(CUSSStruc.PPRxQEI);  ///pulse to (radian*10000)
 8002f6a:	4b9a      	ldr	r3, [pc, #616]	; (80031d4 <Munmunbot_Protocol+0x7ac>)
 8002f6c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f74:	ee17 2a90 	vmov	r2, s15
 8002f78:	4b97      	ldr	r3, [pc, #604]	; (80031d8 <Munmunbot_Protocol+0x7b0>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8002f80:	fb03 f301 	mul.w	r3, r3, r1
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fa67 	bl	800045c <__aeabi_ui2d>
 8002f8e:	a38c      	add	r3, pc, #560	; (adr r3, 80031c0 <Munmunbot_Protocol+0x798>)
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f7fd fadc 	bl	8000550 <__aeabi_dmul>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	a389      	add	r3, pc, #548	; (adr r3, 80031c8 <Munmunbot_Protocol+0x7a0>)
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	f7fd fad3 	bl	8000550 <__aeabi_dmul>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4614      	mov	r4, r2
 8002fb0:	461d      	mov	r5, r3
 8002fb2:	4b89      	ldr	r3, [pc, #548]	; (80031d8 <Munmunbot_Protocol+0x7b0>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd fa50 	bl	800045c <__aeabi_ui2d>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	f7fd fbee 	bl	80007a4 <__aeabi_ddiv>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f7fd fd6e 	bl	8000ab0 <__aeabi_d2uiz>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	4b80      	ldr	r3, [pc, #512]	; (80031dc <Munmunbot_Protocol+0x7b4>)
 8002fda:	801a      	strh	r2, [r3, #0]
							temp[1+Shift] = (DataForReturn>>8)&(0xff);
 8002fdc:	4b7f      	ldr	r3, [pc, #508]	; (80031dc <Munmunbot_Protocol+0x7b4>)
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	0a1b      	lsrs	r3, r3, #8
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fe8:	3301      	adds	r3, #1
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002ff0:	440b      	add	r3, r1
 8002ff2:	f803 2c24 	strb.w	r2, [r3, #-36]
							temp[2+Shift] = (DataForReturn)&(0xff);
 8002ff6:	4b79      	ldr	r3, [pc, #484]	; (80031dc <Munmunbot_Protocol+0x7b4>)
 8002ff8:	881a      	ldrh	r2, [r3, #0]
 8002ffa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002ffe:	3302      	adds	r3, #2
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003006:	440b      	add	r3, r1
 8003008:	f803 2c24 	strb.w	r2, [r3, #-36]
							temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 800300c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003010:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003014:	4413      	add	r3, r2
 8003016:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 800301a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800301e:	3301      	adds	r3, #1
 8003020:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003024:	440b      	add	r3, r1
 8003026:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800302a:	4413      	add	r3, r2
 800302c:	b2da      	uxtb	r2, r3
 800302e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003032:	3302      	adds	r3, #2
 8003034:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003038:	440b      	add	r3, r1
 800303a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800303e:	4413      	add	r3, r2
 8003040:	b2da      	uxtb	r2, r3
 8003042:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003046:	3303      	adds	r3, #3
 8003048:	43d2      	mvns	r2, r2
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003050:	440b      	add	r3, r1
 8003052:	f803 2c24 	strb.w	r2, [r3, #-36]
							UARTTxWrite(uart, temp, 4+Shift);
 8003056:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800305a:	b29b      	uxth	r3, r3
 800305c:	3304      	adds	r3, #4
 800305e:	b29a      	uxth	r2, r3
 8003060:	f107 0314 	add.w	r3, r7, #20
 8003064:	4619      	mov	r1, r3
 8003066:	6838      	ldr	r0, [r7, #0]
 8003068:	f7ff fc70 	bl	800294c <UARTTxWrite>
						}
						break;
 800306c:	e08e      	b.n	800318c <Munmunbot_Protocol+0x764>

					case 11: /// Return Angular Velocity Max  ##Complete##
							{
								uint8_t temp[] =
 800306e:	4a5c      	ldr	r2, [pc, #368]	; (80031e0 <Munmunbot_Protocol+0x7b8>)
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003078:	6018      	str	r0, [r3, #0]
 800307a:	3304      	adds	r3, #4
 800307c:	8019      	strh	r1, [r3, #0]
								{0x58 , 0x75 ,155, 0b0,  0b0, 0b0};
								uint8_t Shift = 2;
 800307e:	2302      	movs	r3, #2
 8003080:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
								DataForReturn = (TrjStruc.AngularVelocityMax_Setting*60)/(CUSSStruc.PPRxQEI);  ///pps to RPM
 8003084:	4b57      	ldr	r3, [pc, #348]	; (80031e4 <Munmunbot_Protocol+0x7bc>)
 8003086:	edd3 7a04 	vldr	s15, [r3, #16]
 800308a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80031e8 <Munmunbot_Protocol+0x7c0>
 800308e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003092:	4b51      	ldr	r3, [pc, #324]	; (80031d8 <Munmunbot_Protocol+0x7b0>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800309e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a6:	ee17 3a90 	vmov	r3, s15
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <Munmunbot_Protocol+0x7b4>)
 80030ae:	801a      	strh	r2, [r3, #0]
								temp[1+Shift] = (DataForReturn>>8)&(0xff);
 80030b0:	4b4a      	ldr	r3, [pc, #296]	; (80031dc <Munmunbot_Protocol+0x7b4>)
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	0a1b      	lsrs	r3, r3, #8
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030bc:	3301      	adds	r3, #1
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80030c4:	440b      	add	r3, r1
 80030c6:	f803 2c2c 	strb.w	r2, [r3, #-44]
								temp[2+Shift] = (DataForReturn)&(0xff);
 80030ca:	4b44      	ldr	r3, [pc, #272]	; (80031dc <Munmunbot_Protocol+0x7b4>)
 80030cc:	881a      	ldrh	r2, [r3, #0]
 80030ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030d2:	3302      	adds	r3, #2
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80030da:	440b      	add	r3, r1
 80030dc:	f803 2c2c 	strb.w	r2, [r3, #-44]
								temp[3+Shift] = ~(temp[0+Shift]+temp[1+Shift]+temp[2+Shift]);
 80030e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030e8:	4413      	add	r3, r2
 80030ea:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 80030ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030f2:	3301      	adds	r3, #1
 80030f4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80030f8:	440b      	add	r3, r1
 80030fa:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80030fe:	4413      	add	r3, r2
 8003100:	b2da      	uxtb	r2, r3
 8003102:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003106:	3302      	adds	r3, #2
 8003108:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800310c:	440b      	add	r3, r1
 800310e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003112:	4413      	add	r3, r2
 8003114:	b2da      	uxtb	r2, r3
 8003116:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800311a:	3303      	adds	r3, #3
 800311c:	43d2      	mvns	r2, r2
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003124:	440b      	add	r3, r1
 8003126:	f803 2c2c 	strb.w	r2, [r3, #-44]
								UARTTxWrite(uart, temp, 4+Shift);
 800312a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800312e:	b29b      	uxth	r3, r3
 8003130:	3304      	adds	r3, #4
 8003132:	b29a      	uxth	r2, r3
 8003134:	f107 030c 	add.w	r3, r7, #12
 8003138:	4619      	mov	r1, r3
 800313a:	6838      	ldr	r0, [r7, #0]
 800313c:	f7ff fc06 	bl	800294c <UARTTxWrite>
							}
						break;
 8003140:	e024      	b.n	800318c <Munmunbot_Protocol+0x764>

					case 12:  //Enable Gripper
						if (Munmunbot_State == STATE_Idle)
 8003142:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <Munmunbot_Protocol+0x7c4>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <Munmunbot_Protocol+0x728>
						{
							GripperEnable = 1;
 800314a:	4b29      	ldr	r3, [pc, #164]	; (80031f0 <Munmunbot_Protocol+0x7c8>)
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003150:	6838      	ldr	r0, [r7, #0]
 8003152:	f7ff fc43 	bl	80029dc <ACK1Return>
						break;
 8003156:	e019      	b.n	800318c <Munmunbot_Protocol+0x764>
					case 13: //Disable Gripper
						if (Munmunbot_State == STATE_Idle)
 8003158:	4b24      	ldr	r3, [pc, #144]	; (80031ec <Munmunbot_Protocol+0x7c4>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d102      	bne.n	8003166 <Munmunbot_Protocol+0x73e>
						{
							GripperEnable = 0;
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <Munmunbot_Protocol+0x7c8>)
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003166:	6838      	ldr	r0, [r7, #0]
 8003168:	f7ff fc38 	bl	80029dc <ACK1Return>
						break;
 800316c:	e00e      	b.n	800318c <Munmunbot_Protocol+0x764>

					case 14: /// Sethome  ##Complete##
						if (Munmunbot_State == STATE_Idle)
 800316e:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <Munmunbot_Protocol+0x7c4>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d105      	bne.n	8003182 <Munmunbot_Protocol+0x75a>
						{
							Munmunbot_State = STATE_SetHome;
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <Munmunbot_Protocol+0x7c4>)
 8003178:	2206      	movs	r2, #6
 800317a:	701a      	strb	r2, [r3, #0]
							SethomeMode = SetHomeState_0;
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <Munmunbot_Protocol+0x7cc>)
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
						}
						ACK1Return(uart);
 8003182:	6838      	ldr	r0, [r7, #0]
 8003184:	f7ff fc2a 	bl	80029dc <ACK1Return>
						break;
 8003188:	e000      	b.n	800318c <Munmunbot_Protocol+0x764>
				    }
			   }
 800318a:	bf00      	nop
			n_station = 0;
 800318c:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <Munmunbot_Protocol+0x7d0>)
 800318e:	2200      	movs	r2, #0
 8003190:	801a      	strh	r2, [r3, #0]
			ProtocolMode = 0;
 8003192:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <Munmunbot_Protocol+0x7d4>)
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
			parameter_ptr = 0;
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <Munmunbot_Protocol+0x7d8>)
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
			Data_HAck = 0;
 800319e:	4b19      	ldr	r3, [pc, #100]	; (8003204 <Munmunbot_Protocol+0x7dc>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	801a      	strh	r2, [r3, #0]
			CheckSum = 0;
 80031a4:	4b18      	ldr	r3, [pc, #96]	; (8003208 <Munmunbot_Protocol+0x7e0>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
			Munmunbot_Protocol_State = PP_STARTandMode;
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <Munmunbot_Protocol+0x7e4>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
			break;
 80031b0:	e002      	b.n	80031b8 <Munmunbot_Protocol+0x790>
			break;
 80031b2:	bf00      	nop
 80031b4:	e000      	b.n	80031b8 <Munmunbot_Protocol+0x790>
				break;
 80031b6:	bf00      	nop
			}
	}
}
 80031b8:	bf00      	nop
 80031ba:	3738      	adds	r7, #56	; 0x38
 80031bc:	46bd      	mov	sp, r7
 80031be:	bdb0      	pop	{r4, r5, r7, pc}
 80031c0:	9ba5e354 	.word	0x9ba5e354
 80031c4:	400920c4 	.word	0x400920c4
 80031c8:	00000000 	.word	0x00000000
 80031cc:	40c38800 	.word	0x40c38800
 80031d0:	08009744 	.word	0x08009744
 80031d4:	20000108 	.word	0x20000108
 80031d8:	200001d8 	.word	0x200001d8
 80031dc:	2000030a 	.word	0x2000030a
 80031e0:	0800974c 	.word	0x0800974c
 80031e4:	20000168 	.word	0x20000168
 80031e8:	42700000 	.word	0x42700000
 80031ec:	20000000 	.word	0x20000000
 80031f0:	20000018 	.word	0x20000018
 80031f4:	200000d9 	.word	0x200000d9
 80031f8:	20000304 	.word	0x20000304
 80031fc:	20000200 	.word	0x20000200
 8003200:	20000308 	.word	0x20000308
 8003204:	20000202 	.word	0x20000202
 8003208:	200001fc 	.word	0x200001fc
 800320c:	200000d8 	.word	0x200000d8

08003210 <PID_Reset>:

void PID_Reset()
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
	PositionPIDController.PreviousError = 0;
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <PID_Reset+0x28>)
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	621a      	str	r2, [r3, #32]
	PositionPIDController.Integral_Value = 0;
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <PID_Reset+0x28>)
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	619a      	str	r2, [r3, #24]
	PositionPIDController.ControllerOutput = 0;
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <PID_Reset+0x28>)
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	60da      	str	r2, [r3, #12]
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000108 	.word	0x20000108

0800323c <LAMP_ON>:

void LAMP_ON(uint8_t lampnumber)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]
	if (lampnumber == 1)
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d111      	bne.n	8003270 <LAMP_ON+0x34>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800324c:	2200      	movs	r2, #0
 800324e:	2104      	movs	r1, #4
 8003250:	481e      	ldr	r0, [pc, #120]	; (80032cc <LAMP_ON+0x90>)
 8003252:	f001 fce1 	bl	8004c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8003256:	2201      	movs	r2, #1
 8003258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800325c:	481b      	ldr	r0, [pc, #108]	; (80032cc <LAMP_ON+0x90>)
 800325e:	f001 fcdb 	bl	8004c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8003262:	2201      	movs	r2, #1
 8003264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003268:	4819      	ldr	r0, [pc, #100]	; (80032d0 <LAMP_ON+0x94>)
 800326a:	f001 fcd5 	bl	8004c18 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
	}
}
 800326e:	e028      	b.n	80032c2 <LAMP_ON+0x86>
	else if (lampnumber == 2)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d111      	bne.n	800329a <LAMP_ON+0x5e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003276:	2201      	movs	r2, #1
 8003278:	2104      	movs	r1, #4
 800327a:	4814      	ldr	r0, [pc, #80]	; (80032cc <LAMP_ON+0x90>)
 800327c:	f001 fccc 	bl	8004c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8003280:	2200      	movs	r2, #0
 8003282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003286:	4811      	ldr	r0, [pc, #68]	; (80032cc <LAMP_ON+0x90>)
 8003288:	f001 fcc6 	bl	8004c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800328c:	2201      	movs	r2, #1
 800328e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003292:	480f      	ldr	r0, [pc, #60]	; (80032d0 <LAMP_ON+0x94>)
 8003294:	f001 fcc0 	bl	8004c18 <HAL_GPIO_WritePin>
}
 8003298:	e013      	b.n	80032c2 <LAMP_ON+0x86>
	else if (lampnumber == 3)
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d110      	bne.n	80032c2 <LAMP_ON+0x86>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80032a0:	2201      	movs	r2, #1
 80032a2:	2104      	movs	r1, #4
 80032a4:	4809      	ldr	r0, [pc, #36]	; (80032cc <LAMP_ON+0x90>)
 80032a6:	f001 fcb7 	bl	8004c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80032aa:	2201      	movs	r2, #1
 80032ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032b0:	4806      	ldr	r0, [pc, #24]	; (80032cc <LAMP_ON+0x90>)
 80032b2:	f001 fcb1 	bl	8004c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032bc:	4804      	ldr	r0, [pc, #16]	; (80032d0 <LAMP_ON+0x94>)
 80032be:	f001 fcab 	bl	8004c18 <HAL_GPIO_WritePin>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40020400 	.word	0x40020400
 80032d0:	40020000 	.word	0x40020000

080032d4 <Emergency_switch_trigger>:

void Emergency_switch_trigger()
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0)
 80032d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032dc:	480e      	ldr	r0, [pc, #56]	; (8003318 <Emergency_switch_trigger+0x44>)
 80032de:	f001 fc83 	bl	8004be8 <HAL_GPIO_ReadPin>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d114      	bne.n	8003312 <Emergency_switch_trigger+0x3e>
	{
		Munmunbot_State = STATE_Disconnected;
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <Emergency_switch_trigger+0x48>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80032ee:	2201      	movs	r2, #1
 80032f0:	2180      	movs	r1, #128	; 0x80
 80032f2:	480b      	ldr	r0, [pc, #44]	; (8003320 <Emergency_switch_trigger+0x4c>)
 80032f4:	f001 fc90 	bl	8004c18 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80032f8:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <Emergency_switch_trigger+0x50>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	635a      	str	r2, [r3, #52]	; 0x34
		TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <Emergency_switch_trigger+0x54>)
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	4a09      	ldr	r2, [pc, #36]	; (800332c <Emergency_switch_trigger+0x58>)
 8003306:	65d3      	str	r3, [r2, #92]	; 0x5c
		Moving_Link_Task_Flag = 0;
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <Emergency_switch_trigger+0x5c>)
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
		PID_Reset();
 800330e:	f7ff ff7f 	bl	8003210 <PID_Reset>
	}
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40020400 	.word	0x40020400
 800331c:	20000000 	.word	0x20000000
 8003320:	40020800 	.word	0x40020800
 8003324:	200003cc 	.word	0x200003cc
 8003328:	20000108 	.word	0x20000108
 800332c:	20000168 	.word	0x20000168
 8003330:	200000f8 	.word	0x200000f8

08003334 <Controlling_the_LINK>:

void Controlling_the_LINK()
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
	  // GEN Trajectory
	  TrajectoryGenerationProcess();
 8003338:	f7fe ff7a 	bl	8002230 <TrajectoryGenerationProcess>
	  EncoderVelocityAndPosition_Update();
 800333c:	f7fe faf8 	bl	8001930 <EncoderVelocityAndPosition_Update>
	  PIDController2in1();  ///use only position
 8003340:	f7ff f9c6 	bl	80026d0 <PIDController2in1>
	  Plant_input = PositionPIDController.ControllerOutput;
 8003344:	4b19      	ldr	r3, [pc, #100]	; (80033ac <Controlling_the_LINK+0x78>)
 8003346:	edd3 7a03 	vldr	s15, [r3, #12]
 800334a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800334e:	ee17 2a90 	vmov	r2, s15
 8003352:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <Controlling_the_LINK+0x7c>)
 8003354:	601a      	str	r2, [r3, #0]
	  DCMotorStruc.PWMOut = abs(Plant_input);
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <Controlling_the_LINK+0x7c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	bfb8      	it	lt
 800335e:	425b      	neglt	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <Controlling_the_LINK+0x80>)
 8003364:	605a      	str	r2, [r3, #4]
	  if (DCMotorStruc.PWMOut > 10000)   /// Saturation Output
 8003366:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <Controlling_the_LINK+0x80>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f242 7210 	movw	r2, #10000	; 0x2710
 800336e:	4293      	cmp	r3, r2
 8003370:	d903      	bls.n	800337a <Controlling_the_LINK+0x46>
	  {
		 DCMotorStruc.PWMOut = 10000;
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <Controlling_the_LINK+0x80>)
 8003374:	f242 7210 	movw	r2, #10000	; 0x2710
 8003378:	605a      	str	r2, [r3, #4]
	  }

	  if (Plant_input >= 0) /// Setting DIR
	  {
		  DCMotorStruc.DIR = 1;
 800337a:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <Controlling_the_LINK+0x80>)
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
	  }
	  else if (Plant_input < 0)
	  {
		  DCMotorStruc.DIR = 0;
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, DCMotorStruc.DIR);
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <Controlling_the_LINK+0x80>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	2180      	movs	r1, #128	; 0x80
 8003388:	480b      	ldr	r0, [pc, #44]	; (80033b8 <Controlling_the_LINK+0x84>)
 800338a:	f001 fc45 	bl	8004c18 <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DCMotorStruc.PWMOut); ///Setting PWM Pin
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <Controlling_the_LINK+0x88>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <Controlling_the_LINK+0x80>)
 8003394:	6852      	ldr	r2, [r2, #4]
 8003396:	635a      	str	r2, [r3, #52]	; 0x34
	  TrjStruc.Loop_Timestamp = micros();
 8003398:	f7fe fbae 	bl	8001af8 <micros>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4907      	ldr	r1, [pc, #28]	; (80033c0 <Controlling_the_LINK+0x8c>)
 80033a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000108 	.word	0x20000108
 80033b0:	200000f4 	.word	0x200000f4
 80033b4:	200000d0 	.word	0x200000d0
 80033b8:	40020800 	.word	0x40020800
 80033bc:	200003cc 	.word	0x200003cc
 80033c0:	20000168 	.word	0x20000168
 80033c4:	00000000 	.word	0x00000000

080033c8 <SETHOME_StateMachine_Function>:

void SETHOME_StateMachine_Function()
{
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 80033cc:	4b78      	ldr	r3, [pc, #480]	; (80035b0 <SETHOME_StateMachine_Function+0x1e8>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	f200 80e6 	bhi.w	80035a2 <SETHOME_StateMachine_Function+0x1da>
 80033d6:	a201      	add	r2, pc, #4	; (adr r2, 80033dc <SETHOME_StateMachine_Function+0x14>)
 80033d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033dc:	080033ed 	.word	0x080033ed
 80033e0:	0800359d 	.word	0x0800359d
 80033e4:	08003409 	.word	0x08003409
 80033e8:	08003505 	.word	0x08003505
	{
		case SetHomeState_0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80033ec:	2200      	movs	r2, #0
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	4870      	ldr	r0, [pc, #448]	; (80035b4 <SETHOME_StateMachine_Function+0x1ec>)
 80033f2:	f001 fc11 	bl	8004c18 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 80033f6:	4b70      	ldr	r3, [pc, #448]	; (80035b8 <SETHOME_StateMachine_Function+0x1f0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033fe:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 8003400:	4b6b      	ldr	r3, [pc, #428]	; (80035b0 <SETHOME_StateMachine_Function+0x1e8>)
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]
			break;
 8003406:	e0cc      	b.n	80035a2 <SETHOME_StateMachine_Function+0x1da>
		case SetHomeState_1:
			break;
		case SetHomeState_2:
			Angularpos_InputNumber = 0;
 8003408:	4b6c      	ldr	r3, [pc, #432]	; (80035bc <SETHOME_StateMachine_Function+0x1f4>)
 800340a:	2200      	movs	r2, #0
 800340c:	801a      	strh	r2, [r3, #0]
			TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 800340e:	4b6b      	ldr	r3, [pc, #428]	; (80035bc <SETHOME_StateMachine_Function+0x1f4>)
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <SETHOME_StateMachine_Function+0x1f8>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	fb03 f302 	mul.w	r3, r3, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd f81d 	bl	800045c <__aeabi_ui2d>
 8003422:	a361      	add	r3, pc, #388	; (adr r3, 80035a8 <SETHOME_StateMachine_Function+0x1e0>)
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f7fd f9bc 	bl	80007a4 <__aeabi_ddiv>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f7fd fb5c 	bl	8000af0 <__aeabi_d2f>
 8003438:	4603      	mov	r3, r0
 800343a:	4a62      	ldr	r2, [pc, #392]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 800343c:	6593      	str	r3, [r2, #88]	; 0x58
			if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 800343e:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 8003440:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003444:	4b5e      	ldr	r3, [pc, #376]	; (80035c0 <SETHOME_StateMachine_Function+0x1f8>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	ee07 3a90 	vmov	s15, r3
 800344c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003458:	db0d      	blt.n	8003476 <SETHOME_StateMachine_Function+0xae>
			{
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 800345a:	4b5a      	ldr	r3, [pc, #360]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 800345c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003460:	4b57      	ldr	r3, [pc, #348]	; (80035c0 <SETHOME_StateMachine_Function+0x1f8>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	ee07 3a90 	vmov	s15, r3
 8003468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003470:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 8003472:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			}
			TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 8003476:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 8003478:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800347c:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <SETHOME_StateMachine_Function+0x1f8>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348c:	4b4d      	ldr	r3, [pc, #308]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 800348e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

			if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 8003492:	4b4c      	ldr	r3, [pc, #304]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 8003494:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003498:	4b4a      	ldr	r3, [pc, #296]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 800349a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800349e:	eeb4 7a67 	vcmp.f32	s14, s15
 80034a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a6:	d010      	beq.n	80034ca <SETHOME_StateMachine_Function+0x102>
			{
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 80034a8:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 80034aa:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80034ae:	4b45      	ldr	r3, [pc, #276]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 80034b0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80034b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b8:	4b42      	ldr	r3, [pc, #264]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 80034ba:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			  SethomeMode = SetHomeState_3;
 80034be:	4b3c      	ldr	r3, [pc, #240]	; (80035b0 <SETHOME_StateMachine_Function+0x1e8>)
 80034c0:	2203      	movs	r2, #3
 80034c2:	701a      	strb	r2, [r3, #0]
			  TrajectoryGenerationCalculation();
 80034c4:	f7fe fda4 	bl	8002010 <TrajectoryGenerationCalculation>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
				TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
				Moving_Link_Task_Flag = 0;
				PID_Reset();
			}
			break;
 80034c8:	e06b      	b.n	80035a2 <SETHOME_StateMachine_Function+0x1da>
				SethomeMode = SetHomeState_0;
 80034ca:	4b39      	ldr	r3, [pc, #228]	; (80035b0 <SETHOME_StateMachine_Function+0x1e8>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
				Munmunbot_State = STATE_Idle;
 80034d0:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <SETHOME_StateMachine_Function+0x200>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 80034d6:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <SETHOME_StateMachine_Function+0x204>)
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80034dc:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <SETHOME_StateMachine_Function+0x1f0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2200      	movs	r2, #0
 80034e2:	635a      	str	r2, [r3, #52]	; 0x34
				TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
 80034e4:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <SETHOME_StateMachine_Function+0x208>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f2:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 80034f4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
				Moving_Link_Task_Flag = 0;
 80034f8:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <SETHOME_StateMachine_Function+0x20c>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
				PID_Reset();
 80034fe:	f7ff fe87 	bl	8003210 <PID_Reset>
			break;
 8003502:	e04e      	b.n	80035a2 <SETHOME_StateMachine_Function+0x1da>
		case SetHomeState_3:
		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 8003504:	f7fe faf8 	bl	8001af8 <micros>
 8003508:	4b2e      	ldr	r3, [pc, #184]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 800350a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800350e:	1a84      	subs	r4, r0, r2
 8003510:	eb61 0503 	sbc.w	r5, r1, r3
 8003514:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 8003516:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800351a:	429d      	cmp	r5, r3
 800351c:	bf08      	it	eq
 800351e:	4294      	cmpeq	r4, r2
 8003520:	d33e      	bcc.n	80035a0 <SETHOME_StateMachine_Function+0x1d8>
		  {
			  Controlling_the_LINK();
 8003522:	f7ff ff07 	bl	8003334 <Controlling_the_LINK>

			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 3) &&
 8003526:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <SETHOME_StateMachine_Function+0x210>)
 8003528:	ed93 7a05 	vldr	s14, [r3, #20]
 800352c:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 800352e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003532:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800353a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800353e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003542:	d900      	bls.n	8003546 <SETHOME_StateMachine_Function+0x17e>
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
					Moving_Link_Task_Flag = 0;
					PID_Reset();
			  }
		  }
		  break;
 8003544:	e02c      	b.n	80035a0 <SETHOME_StateMachine_Function+0x1d8>
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 3) &&
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <SETHOME_StateMachine_Function+0x210>)
 8003548:	ed93 7a05 	vldr	s14, [r3, #20]
 800354c:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 800354e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003552:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003556:	ee77 7ae6 	vsub.f32	s15, s15, s13
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 3) &&
 800355a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	da00      	bge.n	8003566 <SETHOME_StateMachine_Function+0x19e>
		  break;
 8003564:	e01c      	b.n	80035a0 <SETHOME_StateMachine_Function+0x1d8>
					  (Moving_Link_Task_Flag == 1))
 8003566:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <SETHOME_StateMachine_Function+0x20c>)
 8003568:	781b      	ldrb	r3, [r3, #0]
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 3) &&
 800356a:	2b01      	cmp	r3, #1
 800356c:	d118      	bne.n	80035a0 <SETHOME_StateMachine_Function+0x1d8>
					SethomeMode = SetHomeState_0;
 800356e:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <SETHOME_StateMachine_Function+0x1e8>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_Idle;
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <SETHOME_StateMachine_Function+0x200>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
					MovingLinkMode = LMM_Not_Set;
 800357a:	4b14      	ldr	r3, [pc, #80]	; (80035cc <SETHOME_StateMachine_Function+0x204>)
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003580:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <SETHOME_StateMachine_Function+0x1f0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2200      	movs	r2, #0
 8003586:	635a      	str	r2, [r3, #52]	; 0x34
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <SETHOME_StateMachine_Function+0x210>)
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	4a0d      	ldr	r2, [pc, #52]	; (80035c4 <SETHOME_StateMachine_Function+0x1fc>)
 800358e:	65d3      	str	r3, [r2, #92]	; 0x5c
					Moving_Link_Task_Flag = 0;
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <SETHOME_StateMachine_Function+0x20c>)
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
					PID_Reset();
 8003596:	f7ff fe3b 	bl	8003210 <PID_Reset>
		  break;
 800359a:	e001      	b.n	80035a0 <SETHOME_StateMachine_Function+0x1d8>
			break;
 800359c:	bf00      	nop
 800359e:	e000      	b.n	80035a2 <SETHOME_StateMachine_Function+0x1da>
		  break;
 80035a0:	bf00      	nop
     }

}
 80035a2:	bf00      	nop
 80035a4:	bdb0      	pop	{r4, r5, r7, pc}
 80035a6:	bf00      	nop
 80035a8:	99999999 	.word	0x99999999
 80035ac:	40eeadf9 	.word	0x40eeadf9
 80035b0:	200000d9 	.word	0x200000d9
 80035b4:	40020800 	.word	0x40020800
 80035b8:	200003cc 	.word	0x200003cc
 80035bc:	200000ec 	.word	0x200000ec
 80035c0:	200001d8 	.word	0x200001d8
 80035c4:	20000168 	.word	0x20000168
 80035c8:	20000000 	.word	0x20000000
 80035cc:	200000ee 	.word	0x200000ee
 80035d0:	20000474 	.word	0x20000474
 80035d4:	200000f8 	.word	0x200000f8
 80035d8:	20000108 	.word	0x20000108
 80035dc:	00000000 	.word	0x00000000

080035e0 <PRESETHOME_StateMachine_Function>:

void PRESETHOME_StateMachine_Function()
{
 80035e0:	b5b0      	push	{r4, r5, r7, lr}
 80035e2:	af00      	add	r7, sp, #0
	switch (SethomeMode)
 80035e4:	4b78      	ldr	r3, [pc, #480]	; (80037c8 <PRESETHOME_StateMachine_Function+0x1e8>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	f200 80e6 	bhi.w	80037ba <PRESETHOME_StateMachine_Function+0x1da>
 80035ee:	a201      	add	r2, pc, #4	; (adr r2, 80035f4 <PRESETHOME_StateMachine_Function+0x14>)
 80035f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f4:	08003605 	.word	0x08003605
 80035f8:	080037b5 	.word	0x080037b5
 80035fc:	08003621 	.word	0x08003621
 8003600:	0800371d 	.word	0x0800371d
	{
		case SetHomeState_0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8003604:	2200      	movs	r2, #0
 8003606:	2180      	movs	r1, #128	; 0x80
 8003608:	4870      	ldr	r0, [pc, #448]	; (80037cc <PRESETHOME_StateMachine_Function+0x1ec>)
 800360a:	f001 fb05 	bl	8004c18 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
 800360e:	4b70      	ldr	r3, [pc, #448]	; (80037d0 <PRESETHOME_StateMachine_Function+0x1f0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003616:	635a      	str	r2, [r3, #52]	; 0x34
			SethomeMode = SetHomeState_1;
 8003618:	4b6b      	ldr	r3, [pc, #428]	; (80037c8 <PRESETHOME_StateMachine_Function+0x1e8>)
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
			break;
 800361e:	e0cc      	b.n	80037ba <PRESETHOME_StateMachine_Function+0x1da>
		case SetHomeState_1:
			break;
		case SetHomeState_2:
			Angularpos_InputNumber = 0;
 8003620:	4b6c      	ldr	r3, [pc, #432]	; (80037d4 <PRESETHOME_StateMachine_Function+0x1f4>)
 8003622:	2200      	movs	r2, #0
 8003624:	801a      	strh	r2, [r3, #0]
			TrjStruc.Desire_Theta = (Angularpos_InputNumber*CUSSStruc.PPRxQEI/(10000.0*2.0*3.14159));  //pulse
 8003626:	4b6b      	ldr	r3, [pc, #428]	; (80037d4 <PRESETHOME_StateMachine_Function+0x1f4>)
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	4b6a      	ldr	r3, [pc, #424]	; (80037d8 <PRESETHOME_StateMachine_Function+0x1f8>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	fb03 f302 	mul.w	r3, r3, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f7fc ff11 	bl	800045c <__aeabi_ui2d>
 800363a:	a361      	add	r3, pc, #388	; (adr r3, 80037c0 <PRESETHOME_StateMachine_Function+0x1e0>)
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	f7fd f8b0 	bl	80007a4 <__aeabi_ddiv>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	f7fd fa50 	bl	8000af0 <__aeabi_d2f>
 8003650:	4603      	mov	r3, r0
 8003652:	4a62      	ldr	r2, [pc, #392]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 8003654:	6593      	str	r3, [r2, #88]	; 0x58
			if (TrjStruc.Desire_Theta >= CUSSStruc.PPRxQEI)   ///wrap input into 1 revolute.
 8003656:	4b61      	ldr	r3, [pc, #388]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 8003658:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800365c:	4b5e      	ldr	r3, [pc, #376]	; (80037d8 <PRESETHOME_StateMachine_Function+0x1f8>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	ee07 3a90 	vmov	s15, r3
 8003664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003670:	db0d      	blt.n	800368e <PRESETHOME_StateMachine_Function+0xae>
			{
			 TrjStruc.Desire_Theta -= CUSSStruc.PPRxQEI;
 8003672:	4b5a      	ldr	r3, [pc, #360]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 8003674:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003678:	4b57      	ldr	r3, [pc, #348]	; (80037d8 <PRESETHOME_StateMachine_Function+0x1f8>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	ee07 3a90 	vmov	s15, r3
 8003680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003684:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003688:	4b54      	ldr	r3, [pc, #336]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 800368a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			}
			TrjStruc.Desire_Theta += CUSSStruc.PPRxQEI;  /// set to middle range
 800368e:	4b53      	ldr	r3, [pc, #332]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 8003690:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003694:	4b50      	ldr	r3, [pc, #320]	; (80037d8 <PRESETHOME_StateMachine_Function+0x1f8>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a4:	4b4d      	ldr	r3, [pc, #308]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 80036a6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

			if (TrjStruc.Desire_Theta != TrjStruc.Start_Theta)
 80036aa:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 80036ac:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80036b0:	4b4a      	ldr	r3, [pc, #296]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 80036b2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80036b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80036ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036be:	d010      	beq.n	80036e2 <PRESETHOME_StateMachine_Function+0x102>
			{
			  TrjStruc.Delta_Theta = TrjStruc.Desire_Theta - TrjStruc.Start_Theta;
 80036c0:	4b46      	ldr	r3, [pc, #280]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 80036c2:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80036c6:	4b45      	ldr	r3, [pc, #276]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 80036c8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80036cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d0:	4b42      	ldr	r3, [pc, #264]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 80036d2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			  SethomeMode = SetHomeState_3;
 80036d6:	4b3c      	ldr	r3, [pc, #240]	; (80037c8 <PRESETHOME_StateMachine_Function+0x1e8>)
 80036d8:	2203      	movs	r2, #3
 80036da:	701a      	strb	r2, [r3, #0]
			  TrajectoryGenerationCalculation();
 80036dc:	f7fe fc98 	bl	8002010 <TrajectoryGenerationCalculation>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
				TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
				Moving_Link_Task_Flag = 0;
				PID_Reset();
			}
			break;
 80036e0:	e06b      	b.n	80037ba <PRESETHOME_StateMachine_Function+0x1da>
				SethomeMode = SetHomeState_0;
 80036e2:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <PRESETHOME_StateMachine_Function+0x1e8>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
				Munmunbot_State = STATE_Disconnected;
 80036e8:	4b3d      	ldr	r3, [pc, #244]	; (80037e0 <PRESETHOME_StateMachine_Function+0x200>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
				MovingLinkMode = LMM_Not_Set;
 80036ee:	4b3d      	ldr	r3, [pc, #244]	; (80037e4 <PRESETHOME_StateMachine_Function+0x204>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80036f4:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <PRESETHOME_StateMachine_Function+0x1f0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2200      	movs	r2, #0
 80036fa:	635a      	str	r2, [r3, #52]	; 0x34
				TrjStruc.Start_Theta = htim1.Instance->CNT;  //set new start theta
 80036fc:	4b3a      	ldr	r3, [pc, #232]	; (80037e8 <PRESETHOME_StateMachine_Function+0x208>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370a:	4b34      	ldr	r3, [pc, #208]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 800370c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
				Moving_Link_Task_Flag = 0;
 8003710:	4b36      	ldr	r3, [pc, #216]	; (80037ec <PRESETHOME_StateMachine_Function+0x20c>)
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
				PID_Reset();
 8003716:	f7ff fd7b 	bl	8003210 <PID_Reset>
			break;
 800371a:	e04e      	b.n	80037ba <PRESETHOME_StateMachine_Function+0x1da>
		case SetHomeState_3:
		  if (micros()-TrjStruc.Loop_Timestamp >=  TrjStruc.Loop_Period)
 800371c:	f7fe f9ec 	bl	8001af8 <micros>
 8003720:	4b2e      	ldr	r3, [pc, #184]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 8003722:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003726:	1a84      	subs	r4, r0, r2
 8003728:	eb61 0503 	sbc.w	r5, r1, r3
 800372c:	4b2b      	ldr	r3, [pc, #172]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 800372e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003732:	429d      	cmp	r5, r3
 8003734:	bf08      	it	eq
 8003736:	4294      	cmpeq	r4, r2
 8003738:	d33e      	bcc.n	80037b8 <PRESETHOME_StateMachine_Function+0x1d8>
		  {
			  Controlling_the_LINK();
 800373a:	f7ff fdfb 	bl	8003334 <Controlling_the_LINK>

			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 3) &&
 800373e:	4b2c      	ldr	r3, [pc, #176]	; (80037f0 <PRESETHOME_StateMachine_Function+0x210>)
 8003740:	ed93 7a05 	vldr	s14, [r3, #20]
 8003744:	4b25      	ldr	r3, [pc, #148]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 8003746:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800374a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800374e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375a:	d900      	bls.n	800375e <PRESETHOME_StateMachine_Function+0x17e>
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
					Moving_Link_Task_Flag = 0;
					PID_Reset();
			  }
		  }
		  break;
 800375c:	e02c      	b.n	80037b8 <PRESETHOME_StateMachine_Function+0x1d8>
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 3) &&
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <PRESETHOME_StateMachine_Function+0x210>)
 8003760:	ed93 7a05 	vldr	s14, [r3, #20]
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 8003766:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800376a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800376e:	ee77 7ae6 	vsub.f32	s15, s15, s13
			  if ((PositionPIDController.OutputFeedback <= TrjStruc.Desire_Theta + 3) &&
 8003772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377a:	da00      	bge.n	800377e <PRESETHOME_StateMachine_Function+0x19e>
		  break;
 800377c:	e01c      	b.n	80037b8 <PRESETHOME_StateMachine_Function+0x1d8>
					  (Moving_Link_Task_Flag == 1))
 800377e:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <PRESETHOME_StateMachine_Function+0x20c>)
 8003780:	781b      	ldrb	r3, [r3, #0]
					  (PositionPIDController.OutputFeedback >= TrjStruc.Desire_Theta - 3) &&
 8003782:	2b01      	cmp	r3, #1
 8003784:	d118      	bne.n	80037b8 <PRESETHOME_StateMachine_Function+0x1d8>
					SethomeMode = SetHomeState_0;
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <PRESETHOME_StateMachine_Function+0x1e8>)
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
					Munmunbot_State = STATE_Disconnected;
 800378c:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <PRESETHOME_StateMachine_Function+0x200>)
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
					MovingLinkMode = LMM_Not_Set;
 8003792:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <PRESETHOME_StateMachine_Function+0x204>)
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <PRESETHOME_StateMachine_Function+0x1f0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2200      	movs	r2, #0
 800379e:	635a      	str	r2, [r3, #52]	; 0x34
					TrjStruc.Start_Theta = PositionPIDController.OutputFeedback;  //set new start theta
 80037a0:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <PRESETHOME_StateMachine_Function+0x210>)
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	4a0d      	ldr	r2, [pc, #52]	; (80037dc <PRESETHOME_StateMachine_Function+0x1fc>)
 80037a6:	65d3      	str	r3, [r2, #92]	; 0x5c
					Moving_Link_Task_Flag = 0;
 80037a8:	4b10      	ldr	r3, [pc, #64]	; (80037ec <PRESETHOME_StateMachine_Function+0x20c>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
					PID_Reset();
 80037ae:	f7ff fd2f 	bl	8003210 <PID_Reset>
		  break;
 80037b2:	e001      	b.n	80037b8 <PRESETHOME_StateMachine_Function+0x1d8>
			break;
 80037b4:	bf00      	nop
 80037b6:	e000      	b.n	80037ba <PRESETHOME_StateMachine_Function+0x1da>
		  break;
 80037b8:	bf00      	nop
     }
}
 80037ba:	bf00      	nop
 80037bc:	bdb0      	pop	{r4, r5, r7, pc}
 80037be:	bf00      	nop
 80037c0:	99999999 	.word	0x99999999
 80037c4:	40eeadf9 	.word	0x40eeadf9
 80037c8:	200000d9 	.word	0x200000d9
 80037cc:	40020800 	.word	0x40020800
 80037d0:	200003cc 	.word	0x200003cc
 80037d4:	200000ec 	.word	0x200000ec
 80037d8:	200001d8 	.word	0x200001d8
 80037dc:	20000168 	.word	0x20000168
 80037e0:	20000000 	.word	0x20000000
 80037e4:	200000ee 	.word	0x200000ee
 80037e8:	20000474 	.word	0x20000474
 80037ec:	200000f8 	.word	0x200000f8
 80037f0:	20000108 	.word	0x20000108

080037f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037f8:	b672      	cpsid	i
}
 80037fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037fc:	e7fe      	b.n	80037fc <Error_Handler+0x8>
	...

08003800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	4b10      	ldr	r3, [pc, #64]	; (800384c <HAL_MspInit+0x4c>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	4a0f      	ldr	r2, [pc, #60]	; (800384c <HAL_MspInit+0x4c>)
 8003810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003814:	6453      	str	r3, [r2, #68]	; 0x44
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <HAL_MspInit+0x4c>)
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800381e:	607b      	str	r3, [r7, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	603b      	str	r3, [r7, #0]
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_MspInit+0x4c>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	4a08      	ldr	r2, [pc, #32]	; (800384c <HAL_MspInit+0x4c>)
 800382c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003830:	6413      	str	r3, [r2, #64]	; 0x40
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_MspInit+0x4c>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800383e:	2007      	movs	r0, #7
 8003840:	f000 fbfc 	bl	800403c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40023800 	.word	0x40023800

08003850 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	; 0x28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a21      	ldr	r2, [pc, #132]	; (80038f4 <HAL_I2C_MspInit+0xa4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d13b      	bne.n	80038ea <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_I2C_MspInit+0xa8>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <HAL_I2C_MspInit+0xa8>)
 800387c:	f043 0302 	orr.w	r3, r3, #2
 8003880:	6313      	str	r3, [r2, #48]	; 0x30
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_I2C_MspInit+0xa8>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800388e:	23c0      	movs	r3, #192	; 0xc0
 8003890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003892:	2312      	movs	r3, #18
 8003894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003896:	2301      	movs	r3, #1
 8003898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389a:	2303      	movs	r3, #3
 800389c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800389e:	2304      	movs	r3, #4
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a2:	f107 0314 	add.w	r3, r7, #20
 80038a6:	4619      	mov	r1, r3
 80038a8:	4814      	ldr	r0, [pc, #80]	; (80038fc <HAL_I2C_MspInit+0xac>)
 80038aa:	f001 f819 	bl	80048e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_I2C_MspInit+0xa8>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <HAL_I2C_MspInit+0xa8>)
 80038b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <HAL_I2C_MspInit+0xa8>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2100      	movs	r1, #0
 80038ce:	201f      	movs	r0, #31
 80038d0:	f000 fbbf 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80038d4:	201f      	movs	r0, #31
 80038d6:	f000 fbd8 	bl	800408a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80038da:	2200      	movs	r2, #0
 80038dc:	2100      	movs	r1, #0
 80038de:	2020      	movs	r0, #32
 80038e0:	f000 fbb7 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80038e4:	2020      	movs	r0, #32
 80038e6:	f000 fbd0 	bl	800408a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80038ea:	bf00      	nop
 80038ec:	3728      	adds	r7, #40	; 0x28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40005400 	.word	0x40005400
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40020400 	.word	0x40020400

08003900 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a19      	ldr	r2, [pc, #100]	; (8003984 <HAL_TIM_Encoder_MspInit+0x84>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d12c      	bne.n	800397c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	4b18      	ldr	r3, [pc, #96]	; (8003988 <HAL_TIM_Encoder_MspInit+0x88>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	4a17      	ldr	r2, [pc, #92]	; (8003988 <HAL_TIM_Encoder_MspInit+0x88>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6453      	str	r3, [r2, #68]	; 0x44
 8003932:	4b15      	ldr	r3, [pc, #84]	; (8003988 <HAL_TIM_Encoder_MspInit+0x88>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_TIM_Encoder_MspInit+0x88>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	4a10      	ldr	r2, [pc, #64]	; (8003988 <HAL_TIM_Encoder_MspInit+0x88>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
 800394e:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <HAL_TIM_Encoder_MspInit+0x88>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Encoder_A_Pin|Motor_Encoder_B_Pin;
 800395a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800395e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003960:	2302      	movs	r3, #2
 8003962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003968:	2300      	movs	r3, #0
 800396a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800396c:	2301      	movs	r3, #1
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003970:	f107 0314 	add.w	r3, r7, #20
 8003974:	4619      	mov	r1, r3
 8003976:	4805      	ldr	r0, [pc, #20]	; (800398c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003978:	f000 ffb2 	bl	80048e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800397c:	bf00      	nop
 800397e:	3728      	adds	r7, #40	; 0x28
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40010000 	.word	0x40010000
 8003988:	40023800 	.word	0x40023800
 800398c:	40020000 	.word	0x40020000

08003990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d116      	bne.n	80039d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <HAL_TIM_Base_MspInit+0x70>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <HAL_TIM_Base_MspInit+0x70>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6413      	str	r3, [r2, #64]	; 0x40
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <HAL_TIM_Base_MspInit+0x70>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80039be:	2200      	movs	r2, #0
 80039c0:	2100      	movs	r1, #0
 80039c2:	201c      	movs	r0, #28
 80039c4:	f000 fb45 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039c8:	201c      	movs	r0, #28
 80039ca:	f000 fb5e 	bl	800408a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039ce:	e012      	b.n	80039f6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0b      	ldr	r2, [pc, #44]	; (8003a04 <HAL_TIM_Base_MspInit+0x74>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10d      	bne.n	80039f6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <HAL_TIM_Base_MspInit+0x70>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	4a07      	ldr	r2, [pc, #28]	; (8003a00 <HAL_TIM_Base_MspInit+0x70>)
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_TIM_Base_MspInit+0x70>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40000400 	.word	0x40000400

08003a08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a10:	f107 030c 	add.w	r3, r7, #12
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
 8003a1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <HAL_TIM_MspPostInit+0x68>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d11d      	bne.n	8003a66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <HAL_TIM_MspPostInit+0x6c>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	4a10      	ldr	r2, [pc, #64]	; (8003a74 <HAL_TIM_MspPostInit+0x6c>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <HAL_TIM_MspPostInit+0x6c>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 8003a46:	2340      	movs	r3, #64	; 0x40
 8003a48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a56:	2302      	movs	r3, #2
 8003a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 8003a5a:	f107 030c 	add.w	r3, r7, #12
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4805      	ldr	r0, [pc, #20]	; (8003a78 <HAL_TIM_MspPostInit+0x70>)
 8003a62:	f000 ff3d 	bl	80048e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003a66:	bf00      	nop
 8003a68:	3720      	adds	r7, #32
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40020000 	.word	0x40020000

08003a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a84:	f107 0314 	add.w	r3, r7, #20
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a4c      	ldr	r2, [pc, #304]	; (8003bcc <HAL_UART_MspInit+0x150>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	f040 8091 	bne.w	8003bc2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	4b4a      	ldr	r3, [pc, #296]	; (8003bd0 <HAL_UART_MspInit+0x154>)
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	4a49      	ldr	r2, [pc, #292]	; (8003bd0 <HAL_UART_MspInit+0x154>)
 8003aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aae:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab0:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_UART_MspInit+0x154>)
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	4b43      	ldr	r3, [pc, #268]	; (8003bd0 <HAL_UART_MspInit+0x154>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	4a42      	ldr	r2, [pc, #264]	; (8003bd0 <HAL_UART_MspInit+0x154>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6313      	str	r3, [r2, #48]	; 0x30
 8003acc:	4b40      	ldr	r3, [pc, #256]	; (8003bd0 <HAL_UART_MspInit+0x154>)
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ad8:	230c      	movs	r3, #12
 8003ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003adc:	2302      	movs	r3, #2
 8003ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ae8:	2307      	movs	r3, #7
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aec:	f107 0314 	add.w	r3, r7, #20
 8003af0:	4619      	mov	r1, r3
 8003af2:	4838      	ldr	r0, [pc, #224]	; (8003bd4 <HAL_UART_MspInit+0x158>)
 8003af4:	f000 fef4 	bl	80048e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003af8:	4b37      	ldr	r3, [pc, #220]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003afa:	4a38      	ldr	r2, [pc, #224]	; (8003bdc <HAL_UART_MspInit+0x160>)
 8003afc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003afe:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b04:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b06:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b08:	2240      	movs	r2, #64	; 0x40
 8003b0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b0c:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b12:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b18:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b1a:	4b2f      	ldr	r3, [pc, #188]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b20:	4b2d      	ldr	r3, [pc, #180]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003b26:	4b2c      	ldr	r3, [pc, #176]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b2c:	4b2a      	ldr	r3, [pc, #168]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b32:	4b29      	ldr	r3, [pc, #164]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b38:	4827      	ldr	r0, [pc, #156]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b3a:	f000 fac1 	bl	80040c0 <HAL_DMA_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003b44:	f7ff fe56 	bl	80037f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a23      	ldr	r2, [pc, #140]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b4e:	4a22      	ldr	r2, [pc, #136]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003b54:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b56:	4a23      	ldr	r2, [pc, #140]	; (8003be4 <HAL_UART_MspInit+0x168>)
 8003b58:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003b5a:	4b21      	ldr	r3, [pc, #132]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b60:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b62:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b6e:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b74:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b76:	4b1a      	ldr	r3, [pc, #104]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b7c:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003b82:	4b17      	ldr	r3, [pc, #92]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b88:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b90:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b96:	4812      	ldr	r0, [pc, #72]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b98:	f000 fa92 	bl	80040c0 <HAL_DMA_Init>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003ba2:	f7ff fe27 	bl	80037f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a0d      	ldr	r2, [pc, #52]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003baa:	639a      	str	r2, [r3, #56]	; 0x38
 8003bac:	4a0c      	ldr	r2, [pc, #48]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	2026      	movs	r0, #38	; 0x26
 8003bb8:	f000 fa4b 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bbc:	2026      	movs	r0, #38	; 0x26
 8003bbe:	f000 fa64 	bl	800408a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bc2:	bf00      	nop
 8003bc4:	3728      	adds	r7, #40	; 0x28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40004400 	.word	0x40004400
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40020000 	.word	0x40020000
 8003bd8:	20000414 	.word	0x20000414
 8003bdc:	400260a0 	.word	0x400260a0
 8003be0:	20000318 	.word	0x20000318
 8003be4:	40026088 	.word	0x40026088

08003be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bec:	e7fe      	b.n	8003bec <NMI_Handler+0x4>

08003bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bf2:	e7fe      	b.n	8003bf2 <HardFault_Handler+0x4>

08003bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bf8:	e7fe      	b.n	8003bf8 <MemManage_Handler+0x4>

08003bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bfe:	e7fe      	b.n	8003bfe <BusFault_Handler+0x4>

08003c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c04:	e7fe      	b.n	8003c04 <UsageFault_Handler+0x4>

08003c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c22:	b480      	push	{r7}
 8003c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c34:	f000 f912 	bl	8003e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c38:	bf00      	nop
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003c40:	4802      	ldr	r0, [pc, #8]	; (8003c4c <DMA1_Stream5_IRQHandler+0x10>)
 8003c42:	f000 fbd5 	bl	80043f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000318 	.word	0x20000318

08003c50 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003c54:	4802      	ldr	r0, [pc, #8]	; (8003c60 <DMA1_Stream6_IRQHandler+0x10>)
 8003c56:	f000 fbcb 	bl	80043f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000414 	.word	0x20000414

08003c64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c68:	4802      	ldr	r0, [pc, #8]	; (8003c74 <TIM2_IRQHandler+0x10>)
 8003c6a:	f003 fe65 	bl	8007938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	200004bc 	.word	0x200004bc

08003c78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c7c:	4802      	ldr	r0, [pc, #8]	; (8003c88 <I2C1_EV_IRQHandler+0x10>)
 8003c7e:	f001 f9e7 	bl	8005050 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000378 	.word	0x20000378

08003c8c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003c90:	4802      	ldr	r0, [pc, #8]	; (8003c9c <I2C1_ER_IRQHandler+0x10>)
 8003c92:	f001 fb4a 	bl	800532a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000378 	.word	0x20000378

08003ca0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ca4:	4802      	ldr	r0, [pc, #8]	; (8003cb0 <USART2_IRQHandler+0x10>)
 8003ca6:	f004 fd31 	bl	800870c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000504 	.word	0x20000504

08003cb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003cb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003cbc:	f000 ffc6 	bl	8004c4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003cc0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003cc4:	f000 ffc2 	bl	8004c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cd4:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <_sbrk+0x5c>)
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <_sbrk+0x60>)
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ce0:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <_sbrk+0x64>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ce8:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <_sbrk+0x64>)
 8003cea:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <_sbrk+0x68>)
 8003cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <_sbrk+0x64>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d207      	bcs.n	8003d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cfc:	f005 fb62 	bl	80093c4 <__errno>
 8003d00:	4603      	mov	r3, r0
 8003d02:	220c      	movs	r2, #12
 8003d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d06:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0a:	e009      	b.n	8003d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d0c:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <_sbrk+0x64>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d12:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <_sbrk+0x64>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	4a05      	ldr	r2, [pc, #20]	; (8003d30 <_sbrk+0x64>)
 8003d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20020000 	.word	0x20020000
 8003d2c:	00000400 	.word	0x00000400
 8003d30:	2000030c 	.word	0x2000030c
 8003d34:	20000560 	.word	0x20000560

08003d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d3c:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <SystemInit+0x28>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	4a07      	ldr	r2, [pc, #28]	; (8003d60 <SystemInit+0x28>)
 8003d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <SystemInit+0x28>)
 8003d4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d52:	609a      	str	r2, [r3, #8]
#endif
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d6a:	e003      	b.n	8003d74 <LoopCopyDataInit>

08003d6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d72:	3104      	adds	r1, #4

08003d74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d74:	480b      	ldr	r0, [pc, #44]	; (8003da4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d76:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d7c:	d3f6      	bcc.n	8003d6c <CopyDataInit>
  ldr  r2, =_sbss
 8003d7e:	4a0b      	ldr	r2, [pc, #44]	; (8003dac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d80:	e002      	b.n	8003d88 <LoopFillZerobss>

08003d82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d84:	f842 3b04 	str.w	r3, [r2], #4

08003d88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d8c:	d3f9      	bcc.n	8003d82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d8e:	f7ff ffd3 	bl	8003d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d92:	f005 fb1d 	bl	80093d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d96:	f7fd f987 	bl	80010a8 <main>
  bx  lr    
 8003d9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003da0:	08009784 	.word	0x08009784
  ldr  r0, =_sdata
 8003da4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003da8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8003dac:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8003db0:	2000055c 	.word	0x2000055c

08003db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003db4:	e7fe      	b.n	8003db4 <ADC_IRQHandler>
	...

08003db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <HAL_Init+0x40>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a0d      	ldr	r2, [pc, #52]	; (8003df8 <HAL_Init+0x40>)
 8003dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_Init+0x40>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <HAL_Init+0x40>)
 8003dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_Init+0x40>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <HAL_Init+0x40>)
 8003dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003de0:	2003      	movs	r0, #3
 8003de2:	f000 f92b 	bl	800403c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003de6:	2000      	movs	r0, #0
 8003de8:	f000 f808 	bl	8003dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dec:	f7ff fd08 	bl	8003800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40023c00 	.word	0x40023c00

08003dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_InitTick+0x54>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_InitTick+0x58>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f943 	bl	80040a6 <HAL_SYSTICK_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e00e      	b.n	8003e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b0f      	cmp	r3, #15
 8003e2e:	d80a      	bhi.n	8003e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e30:	2200      	movs	r2, #0
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	f04f 30ff 	mov.w	r0, #4294967295
 8003e38:	f000 f90b 	bl	8004052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e3c:	4a06      	ldr	r2, [pc, #24]	; (8003e58 <HAL_InitTick+0x5c>)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	e000      	b.n	8003e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	2000001c 	.word	0x2000001c
 8003e54:	20000024 	.word	0x20000024
 8003e58:	20000020 	.word	0x20000020

08003e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <HAL_IncTick+0x20>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_IncTick+0x24>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	4a04      	ldr	r2, [pc, #16]	; (8003e80 <HAL_IncTick+0x24>)
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000024 	.word	0x20000024
 8003e80:	20000548 	.word	0x20000548

08003e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return uwTick;
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <HAL_GetTick+0x14>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000548 	.word	0x20000548

08003e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eac:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ece:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	60d3      	str	r3, [r2, #12]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <__NVIC_GetPriorityGrouping+0x18>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	0a1b      	lsrs	r3, r3, #8
 8003eee:	f003 0307 	and.w	r3, r3, #7
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	db0b      	blt.n	8003f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	f003 021f 	and.w	r2, r3, #31
 8003f18:	4907      	ldr	r1, [pc, #28]	; (8003f38 <__NVIC_EnableIRQ+0x38>)
 8003f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	2001      	movs	r0, #1
 8003f22:	fa00 f202 	lsl.w	r2, r0, r2
 8003f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	e000e100 	.word	0xe000e100

08003f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	6039      	str	r1, [r7, #0]
 8003f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	db0a      	blt.n	8003f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	490c      	ldr	r1, [pc, #48]	; (8003f88 <__NVIC_SetPriority+0x4c>)
 8003f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5a:	0112      	lsls	r2, r2, #4
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	440b      	add	r3, r1
 8003f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f64:	e00a      	b.n	8003f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	4908      	ldr	r1, [pc, #32]	; (8003f8c <__NVIC_SetPriority+0x50>)
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	3b04      	subs	r3, #4
 8003f74:	0112      	lsls	r2, r2, #4
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	440b      	add	r3, r1
 8003f7a:	761a      	strb	r2, [r3, #24]
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	e000e100 	.word	0xe000e100
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f1c3 0307 	rsb	r3, r3, #7
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	bf28      	it	cs
 8003fae:	2304      	movcs	r3, #4
 8003fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	2b06      	cmp	r3, #6
 8003fb8:	d902      	bls.n	8003fc0 <NVIC_EncodePriority+0x30>
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3b03      	subs	r3, #3
 8003fbe:	e000      	b.n	8003fc2 <NVIC_EncodePriority+0x32>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43da      	mvns	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe2:	43d9      	mvns	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe8:	4313      	orrs	r3, r2
         );
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3724      	adds	r7, #36	; 0x24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3b01      	subs	r3, #1
 8004004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004008:	d301      	bcc.n	800400e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800400a:	2301      	movs	r3, #1
 800400c:	e00f      	b.n	800402e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800400e:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <SysTick_Config+0x40>)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3b01      	subs	r3, #1
 8004014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004016:	210f      	movs	r1, #15
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	f7ff ff8e 	bl	8003f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <SysTick_Config+0x40>)
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004026:	4b04      	ldr	r3, [pc, #16]	; (8004038 <SysTick_Config+0x40>)
 8004028:	2207      	movs	r2, #7
 800402a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	e000e010 	.word	0xe000e010

0800403c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ff29 	bl	8003e9c <__NVIC_SetPriorityGrouping>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	4603      	mov	r3, r0
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004064:	f7ff ff3e 	bl	8003ee4 <__NVIC_GetPriorityGrouping>
 8004068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7ff ff8e 	bl	8003f90 <NVIC_EncodePriority>
 8004074:	4602      	mov	r2, r0
 8004076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff5d 	bl	8003f3c <__NVIC_SetPriority>
}
 8004082:	bf00      	nop
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	4603      	mov	r3, r0
 8004092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ff31 	bl	8003f00 <__NVIC_EnableIRQ>
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff ffa2 	bl	8003ff8 <SysTick_Config>
 80040b4:	4603      	mov	r3, r0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040cc:	f7ff feda 	bl	8003e84 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e099      	b.n	8004210 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0201 	bic.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040fc:	e00f      	b.n	800411e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040fe:	f7ff fec1 	bl	8003e84 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b05      	cmp	r3, #5
 800410a:	d908      	bls.n	800411e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2203      	movs	r2, #3
 8004116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e078      	b.n	8004210 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e8      	bne.n	80040fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4b38      	ldr	r3, [pc, #224]	; (8004218 <HAL_DMA_Init+0x158>)
 8004138:	4013      	ands	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800414a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004156:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004162:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	2b04      	cmp	r3, #4
 8004176:	d107      	bne.n	8004188 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	4313      	orrs	r3, r2
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f023 0307 	bic.w	r3, r3, #7
 800419e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d117      	bne.n	80041e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00e      	beq.n	80041e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fb0f 	bl	80047e8 <DMA_CheckFifoParam>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2240      	movs	r2, #64	; 0x40
 80041d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041de:	2301      	movs	r3, #1
 80041e0:	e016      	b.n	8004210 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fac6 	bl	800477c <DMA_CalcBaseAndBitshift>
 80041f0:	4603      	mov	r3, r0
 80041f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	223f      	movs	r2, #63	; 0x3f
 80041fa:	409a      	lsls	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	f010803f 	.word	0xf010803f

0800421c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_DMA_Start_IT+0x26>
 800423e:	2302      	movs	r3, #2
 8004240:	e040      	b.n	80042c4 <HAL_DMA_Start_IT+0xa8>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d12f      	bne.n	80042b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2202      	movs	r2, #2
 800425a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fa58 	bl	8004720 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004274:	223f      	movs	r2, #63	; 0x3f
 8004276:	409a      	lsls	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0216 	orr.w	r2, r2, #22
 800428a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0208 	orr.w	r2, r2, #8
 80042a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	e005      	b.n	80042c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042be:	2302      	movs	r3, #2
 80042c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042da:	f7ff fdd3 	bl	8003e84 <HAL_GetTick>
 80042de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d008      	beq.n	80042fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2280      	movs	r2, #128	; 0x80
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e052      	b.n	80043a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0216 	bic.w	r2, r2, #22
 800430c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800431c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d103      	bne.n	800432e <HAL_DMA_Abort+0x62>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0208 	bic.w	r2, r2, #8
 800433c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800434e:	e013      	b.n	8004378 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004350:	f7ff fd98 	bl	8003e84 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b05      	cmp	r3, #5
 800435c:	d90c      	bls.n	8004378 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2203      	movs	r2, #3
 8004370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e015      	b.n	80043a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e4      	bne.n	8004350 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	223f      	movs	r2, #63	; 0x3f
 800438c:	409a      	lsls	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d004      	beq.n	80043ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2280      	movs	r2, #128	; 0x80
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e00c      	b.n	80043e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2205      	movs	r2, #5
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0201 	bic.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043fc:	4b92      	ldr	r3, [pc, #584]	; (8004648 <HAL_DMA_IRQHandler+0x258>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a92      	ldr	r2, [pc, #584]	; (800464c <HAL_DMA_IRQHandler+0x25c>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	0a9b      	lsrs	r3, r3, #10
 8004408:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441a:	2208      	movs	r2, #8
 800441c:	409a      	lsls	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01a      	beq.n	800445c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d013      	beq.n	800445c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0204 	bic.w	r2, r2, #4
 8004442:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004448:	2208      	movs	r2, #8
 800444a:	409a      	lsls	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	f043 0201 	orr.w	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	2201      	movs	r2, #1
 8004462:	409a      	lsls	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d012      	beq.n	8004492 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447e:	2201      	movs	r2, #1
 8004480:	409a      	lsls	r2, r3
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	f043 0202 	orr.w	r2, r3, #2
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004496:	2204      	movs	r2, #4
 8004498:	409a      	lsls	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4013      	ands	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d012      	beq.n	80044c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00b      	beq.n	80044c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b4:	2204      	movs	r2, #4
 80044b6:	409a      	lsls	r2, r3
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	f043 0204 	orr.w	r2, r3, #4
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044cc:	2210      	movs	r2, #16
 80044ce:	409a      	lsls	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d043      	beq.n	8004560 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d03c      	beq.n	8004560 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	2210      	movs	r2, #16
 80044ec:	409a      	lsls	r2, r3
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d018      	beq.n	8004532 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d108      	bne.n	8004520 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d024      	beq.n	8004560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
 800451e:	e01f      	b.n	8004560 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01b      	beq.n	8004560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4798      	blx	r3
 8004530:	e016      	b.n	8004560 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d107      	bne.n	8004550 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0208 	bic.w	r2, r2, #8
 800454e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	2220      	movs	r2, #32
 8004566:	409a      	lsls	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 808e 	beq.w	800468e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 8086 	beq.w	800468e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004586:	2220      	movs	r2, #32
 8004588:	409a      	lsls	r2, r3
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b05      	cmp	r3, #5
 8004598:	d136      	bne.n	8004608 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0216 	bic.w	r2, r2, #22
 80045a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <HAL_DMA_IRQHandler+0x1da>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0208 	bic.w	r2, r2, #8
 80045d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045de:	223f      	movs	r2, #63	; 0x3f
 80045e0:	409a      	lsls	r2, r3
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d07d      	beq.n	80046fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	4798      	blx	r3
        }
        return;
 8004606:	e078      	b.n	80046fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d01c      	beq.n	8004650 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d108      	bne.n	8004636 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004628:	2b00      	cmp	r3, #0
 800462a:	d030      	beq.n	800468e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	4798      	blx	r3
 8004634:	e02b      	b.n	800468e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d027      	beq.n	800468e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
 8004646:	e022      	b.n	800468e <HAL_DMA_IRQHandler+0x29e>
 8004648:	2000001c 	.word	0x2000001c
 800464c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10f      	bne.n	800467e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0210 	bic.w	r2, r2, #16
 800466c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	2b00      	cmp	r3, #0
 8004694:	d032      	beq.n	80046fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d022      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2205      	movs	r2, #5
 80046a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	3301      	adds	r3, #1
 80046be:	60bb      	str	r3, [r7, #8]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d307      	bcc.n	80046d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1f2      	bne.n	80046ba <HAL_DMA_IRQHandler+0x2ca>
 80046d4:	e000      	b.n	80046d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80046d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4798      	blx	r3
 80046f8:	e000      	b.n	80046fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80046fa:	bf00      	nop
    }
  }
}
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop

08004704 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004712:	b2db      	uxtb	r3, r3
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800473c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b40      	cmp	r3, #64	; 0x40
 800474c:	d108      	bne.n	8004760 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800475e:	e007      	b.n	8004770 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	60da      	str	r2, [r3, #12]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	3b10      	subs	r3, #16
 800478c:	4a14      	ldr	r2, [pc, #80]	; (80047e0 <DMA_CalcBaseAndBitshift+0x64>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004796:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d909      	bls.n	80047be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	1d1a      	adds	r2, r3, #4
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	659a      	str	r2, [r3, #88]	; 0x58
 80047bc:	e007      	b.n	80047ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	aaaaaaab 	.word	0xaaaaaaab
 80047e4:	0800976c 	.word	0x0800976c

080047e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d11f      	bne.n	8004842 <DMA_CheckFifoParam+0x5a>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d856      	bhi.n	80048b6 <DMA_CheckFifoParam+0xce>
 8004808:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <DMA_CheckFifoParam+0x28>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004821 	.word	0x08004821
 8004814:	08004833 	.word	0x08004833
 8004818:	08004821 	.word	0x08004821
 800481c:	080048b7 	.word	0x080048b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d046      	beq.n	80048ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004830:	e043      	b.n	80048ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800483a:	d140      	bne.n	80048be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004840:	e03d      	b.n	80048be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800484a:	d121      	bne.n	8004890 <DMA_CheckFifoParam+0xa8>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b03      	cmp	r3, #3
 8004850:	d837      	bhi.n	80048c2 <DMA_CheckFifoParam+0xda>
 8004852:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <DMA_CheckFifoParam+0x70>)
 8004854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004858:	08004869 	.word	0x08004869
 800485c:	0800486f 	.word	0x0800486f
 8004860:	08004869 	.word	0x08004869
 8004864:	08004881 	.word	0x08004881
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      break;
 800486c:	e030      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d025      	beq.n	80048c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800487e:	e022      	b.n	80048c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004888:	d11f      	bne.n	80048ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800488e:	e01c      	b.n	80048ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d903      	bls.n	800489e <DMA_CheckFifoParam+0xb6>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b03      	cmp	r3, #3
 800489a:	d003      	beq.n	80048a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800489c:	e018      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
      break;
 80048a2:	e015      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00e      	beq.n	80048ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      break;
 80048b4:	e00b      	b.n	80048ce <DMA_CheckFifoParam+0xe6>
      break;
 80048b6:	bf00      	nop
 80048b8:	e00a      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
      break;
 80048ba:	bf00      	nop
 80048bc:	e008      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
      break;
 80048be:	bf00      	nop
 80048c0:	e006      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
      break;
 80048c2:	bf00      	nop
 80048c4:	e004      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
      break;
 80048c6:	bf00      	nop
 80048c8:	e002      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80048ca:	bf00      	nop
 80048cc:	e000      	b.n	80048d0 <DMA_CheckFifoParam+0xe8>
      break;
 80048ce:	bf00      	nop
    }
  } 
  
  return status; 
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop

080048e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b089      	sub	sp, #36	; 0x24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	e159      	b.n	8004bb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048fc:	2201      	movs	r2, #1
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4013      	ands	r3, r2
 800490e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	429a      	cmp	r2, r3
 8004916:	f040 8148 	bne.w	8004baa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d005      	beq.n	8004932 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800492e:	2b02      	cmp	r3, #2
 8004930:	d130      	bne.n	8004994 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	2203      	movs	r2, #3
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4313      	orrs	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004968:	2201      	movs	r2, #1
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 0201 	and.w	r2, r3, #1
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4313      	orrs	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	2b03      	cmp	r3, #3
 800499e:	d017      	beq.n	80049d0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	2203      	movs	r2, #3
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 0303 	and.w	r3, r3, #3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d123      	bne.n	8004a24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	08da      	lsrs	r2, r3, #3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3208      	adds	r2, #8
 80049e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	220f      	movs	r2, #15
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4013      	ands	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	08da      	lsrs	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3208      	adds	r2, #8
 8004a1e:	69b9      	ldr	r1, [r7, #24]
 8004a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	2203      	movs	r2, #3
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	43db      	mvns	r3, r3
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 0203 	and.w	r2, r3, #3
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80a2 	beq.w	8004baa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	4b57      	ldr	r3, [pc, #348]	; (8004bc8 <HAL_GPIO_Init+0x2e8>)
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6e:	4a56      	ldr	r2, [pc, #344]	; (8004bc8 <HAL_GPIO_Init+0x2e8>)
 8004a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a74:	6453      	str	r3, [r2, #68]	; 0x44
 8004a76:	4b54      	ldr	r3, [pc, #336]	; (8004bc8 <HAL_GPIO_Init+0x2e8>)
 8004a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a82:	4a52      	ldr	r2, [pc, #328]	; (8004bcc <HAL_GPIO_Init+0x2ec>)
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	089b      	lsrs	r3, r3, #2
 8004a88:	3302      	adds	r3, #2
 8004a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	220f      	movs	r2, #15
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a49      	ldr	r2, [pc, #292]	; (8004bd0 <HAL_GPIO_Init+0x2f0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d019      	beq.n	8004ae2 <HAL_GPIO_Init+0x202>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a48      	ldr	r2, [pc, #288]	; (8004bd4 <HAL_GPIO_Init+0x2f4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <HAL_GPIO_Init+0x1fe>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a47      	ldr	r2, [pc, #284]	; (8004bd8 <HAL_GPIO_Init+0x2f8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00d      	beq.n	8004ada <HAL_GPIO_Init+0x1fa>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a46      	ldr	r2, [pc, #280]	; (8004bdc <HAL_GPIO_Init+0x2fc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d007      	beq.n	8004ad6 <HAL_GPIO_Init+0x1f6>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a45      	ldr	r2, [pc, #276]	; (8004be0 <HAL_GPIO_Init+0x300>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d101      	bne.n	8004ad2 <HAL_GPIO_Init+0x1f2>
 8004ace:	2304      	movs	r3, #4
 8004ad0:	e008      	b.n	8004ae4 <HAL_GPIO_Init+0x204>
 8004ad2:	2307      	movs	r3, #7
 8004ad4:	e006      	b.n	8004ae4 <HAL_GPIO_Init+0x204>
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e004      	b.n	8004ae4 <HAL_GPIO_Init+0x204>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e002      	b.n	8004ae4 <HAL_GPIO_Init+0x204>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_GPIO_Init+0x204>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	f002 0203 	and.w	r2, r2, #3
 8004aea:	0092      	lsls	r2, r2, #2
 8004aec:	4093      	lsls	r3, r2
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004af4:	4935      	ldr	r1, [pc, #212]	; (8004bcc <HAL_GPIO_Init+0x2ec>)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	3302      	adds	r3, #2
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b02:	4b38      	ldr	r3, [pc, #224]	; (8004be4 <HAL_GPIO_Init+0x304>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b26:	4a2f      	ldr	r2, [pc, #188]	; (8004be4 <HAL_GPIO_Init+0x304>)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b2c:	4b2d      	ldr	r3, [pc, #180]	; (8004be4 <HAL_GPIO_Init+0x304>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b50:	4a24      	ldr	r2, [pc, #144]	; (8004be4 <HAL_GPIO_Init+0x304>)
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b56:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <HAL_GPIO_Init+0x304>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4013      	ands	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b7a:	4a1a      	ldr	r2, [pc, #104]	; (8004be4 <HAL_GPIO_Init+0x304>)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b80:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <HAL_GPIO_Init+0x304>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ba4:	4a0f      	ldr	r2, [pc, #60]	; (8004be4 <HAL_GPIO_Init+0x304>)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	3301      	adds	r3, #1
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	2b0f      	cmp	r3, #15
 8004bb4:	f67f aea2 	bls.w	80048fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	3724      	adds	r7, #36	; 0x24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40013800 	.word	0x40013800
 8004bd0:	40020000 	.word	0x40020000
 8004bd4:	40020400 	.word	0x40020400
 8004bd8:	40020800 	.word	0x40020800
 8004bdc:	40020c00 	.word	0x40020c00
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40013c00 	.word	0x40013c00

08004be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	887b      	ldrh	r3, [r7, #2]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c00:	2301      	movs	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
 8004c04:	e001      	b.n	8004c0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	807b      	strh	r3, [r7, #2]
 8004c24:	4613      	mov	r3, r2
 8004c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c28:	787b      	ldrb	r3, [r7, #1]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c2e:	887a      	ldrh	r2, [r7, #2]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c34:	e003      	b.n	8004c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c36:	887b      	ldrh	r3, [r7, #2]
 8004c38:	041a      	lsls	r2, r3, #16
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	619a      	str	r2, [r3, #24]
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d006      	beq.n	8004c70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c62:	4a05      	ldr	r2, [pc, #20]	; (8004c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c64:	88fb      	ldrh	r3, [r7, #6]
 8004c66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c68:	88fb      	ldrh	r3, [r7, #6]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fc feec 	bl	8001a48 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40013c00 	.word	0x40013c00

08004c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e12b      	b.n	8004ee6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fe fdd4 	bl	8003850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2224      	movs	r2, #36	; 0x24
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0201 	bic.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ce0:	f002 fab8 	bl	8007254 <HAL_RCC_GetPCLK1Freq>
 8004ce4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4a81      	ldr	r2, [pc, #516]	; (8004ef0 <HAL_I2C_Init+0x274>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d807      	bhi.n	8004d00 <HAL_I2C_Init+0x84>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a80      	ldr	r2, [pc, #512]	; (8004ef4 <HAL_I2C_Init+0x278>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	bf94      	ite	ls
 8004cf8:	2301      	movls	r3, #1
 8004cfa:	2300      	movhi	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	e006      	b.n	8004d0e <HAL_I2C_Init+0x92>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a7d      	ldr	r2, [pc, #500]	; (8004ef8 <HAL_I2C_Init+0x27c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	bf94      	ite	ls
 8004d08:	2301      	movls	r3, #1
 8004d0a:	2300      	movhi	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e0e7      	b.n	8004ee6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4a78      	ldr	r2, [pc, #480]	; (8004efc <HAL_I2C_Init+0x280>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	0c9b      	lsrs	r3, r3, #18
 8004d20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4a6a      	ldr	r2, [pc, #424]	; (8004ef0 <HAL_I2C_Init+0x274>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d802      	bhi.n	8004d50 <HAL_I2C_Init+0xd4>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	e009      	b.n	8004d64 <HAL_I2C_Init+0xe8>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	4a69      	ldr	r2, [pc, #420]	; (8004f00 <HAL_I2C_Init+0x284>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	099b      	lsrs	r3, r3, #6
 8004d62:	3301      	adds	r3, #1
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6812      	ldr	r2, [r2, #0]
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	495c      	ldr	r1, [pc, #368]	; (8004ef0 <HAL_I2C_Init+0x274>)
 8004d80:	428b      	cmp	r3, r1
 8004d82:	d819      	bhi.n	8004db8 <HAL_I2C_Init+0x13c>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1e59      	subs	r1, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d92:	1c59      	adds	r1, r3, #1
 8004d94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d98:	400b      	ands	r3, r1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_I2C_Init+0x138>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1e59      	subs	r1, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dac:	3301      	adds	r3, #1
 8004dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db2:	e051      	b.n	8004e58 <HAL_I2C_Init+0x1dc>
 8004db4:	2304      	movs	r3, #4
 8004db6:	e04f      	b.n	8004e58 <HAL_I2C_Init+0x1dc>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d111      	bne.n	8004de4 <HAL_I2C_Init+0x168>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	1e58      	subs	r0, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6859      	ldr	r1, [r3, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	440b      	add	r3, r1
 8004dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	e012      	b.n	8004e0a <HAL_I2C_Init+0x18e>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	1e58      	subs	r0, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6859      	ldr	r1, [r3, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	0099      	lsls	r1, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_I2C_Init+0x196>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e022      	b.n	8004e58 <HAL_I2C_Init+0x1dc>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10e      	bne.n	8004e38 <HAL_I2C_Init+0x1bc>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1e58      	subs	r0, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6859      	ldr	r1, [r3, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	440b      	add	r3, r1
 8004e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e36:	e00f      	b.n	8004e58 <HAL_I2C_Init+0x1dc>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	1e58      	subs	r0, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6859      	ldr	r1, [r3, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	0099      	lsls	r1, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e4e:	3301      	adds	r3, #1
 8004e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	6809      	ldr	r1, [r1, #0]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69da      	ldr	r2, [r3, #28]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6911      	ldr	r1, [r2, #16]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68d2      	ldr	r2, [r2, #12]
 8004e92:	4311      	orrs	r1, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	000186a0 	.word	0x000186a0
 8004ef4:	001e847f 	.word	0x001e847f
 8004ef8:	003d08ff 	.word	0x003d08ff
 8004efc:	431bde83 	.word	0x431bde83
 8004f00:	10624dd3 	.word	0x10624dd3

08004f04 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	607a      	str	r2, [r7, #4]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	460b      	mov	r3, r1
 8004f12:	817b      	strh	r3, [r7, #10]
 8004f14:	4613      	mov	r3, r2
 8004f16:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	f040 8085 	bne.w	8005034 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f2a:	4b46      	ldr	r3, [pc, #280]	; (8005044 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	08db      	lsrs	r3, r3, #3
 8004f30:	4a45      	ldr	r2, [pc, #276]	; (8005048 <HAL_I2C_Master_Transmit_IT+0x144>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	0a1a      	lsrs	r2, r3, #8
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009a      	lsls	r2, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d116      	bne.n	8004f7e <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f043 0220 	orr.w	r2, r3, #32
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e05b      	b.n	8005036 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d0db      	beq.n	8004f44 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_I2C_Master_Transmit_IT+0x96>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e04d      	b.n	8005036 <HAL_I2C_Master_Transmit_IT+0x132>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d007      	beq.n	8004fc0 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2221      	movs	r2, #33	; 0x21
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2210      	movs	r2, #16
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	893a      	ldrh	r2, [r7, #8]
 8004ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4a13      	ldr	r2, [pc, #76]	; (800504c <HAL_I2C_Master_Transmit_IT+0x148>)
 8005000:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005002:	897a      	ldrh	r2, [r7, #10]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005016:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800502e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	e000      	b.n	8005036 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005034:	2302      	movs	r3, #2
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	2000001c 	.word	0x2000001c
 8005048:	14f8b589 	.word	0x14f8b589
 800504c:	ffff0000 	.word	0xffff0000

08005050 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005070:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005078:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	2b10      	cmp	r3, #16
 800507e:	d003      	beq.n	8005088 <HAL_I2C_EV_IRQHandler+0x38>
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	f040 80bd 	bne.w	8005202 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10d      	bne.n	80050be <HAL_I2C_EV_IRQHandler+0x6e>
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80050a8:	d003      	beq.n	80050b2 <HAL_I2C_EV_IRQHandler+0x62>
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80050b0:	d101      	bne.n	80050b6 <HAL_I2C_EV_IRQHandler+0x66>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <HAL_I2C_EV_IRQHandler+0x68>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	f000 812e 	beq.w	800531a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00c      	beq.n	80050e2 <HAL_I2C_EV_IRQHandler+0x92>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	0a5b      	lsrs	r3, r3, #9
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d006      	beq.n	80050e2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f001 fc55 	bl	8006984 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fd62 	bl	8005ba4 <I2C_Master_SB>
 80050e0:	e08e      	b.n	8005200 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	08db      	lsrs	r3, r3, #3
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <HAL_I2C_EV_IRQHandler+0xb2>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	0a5b      	lsrs	r3, r3, #9
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fdd8 	bl	8005cb0 <I2C_Master_ADD10>
 8005100:	e07e      	b.n	8005200 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	085b      	lsrs	r3, r3, #1
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <HAL_I2C_EV_IRQHandler+0xd2>
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	0a5b      	lsrs	r3, r3, #9
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fdf2 	bl	8005d04 <I2C_Master_ADDR>
 8005120:	e06e      	b.n	8005200 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	089b      	lsrs	r3, r3, #2
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d037      	beq.n	800519e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513c:	f000 80ef 	beq.w	800531e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	09db      	lsrs	r3, r3, #7
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00f      	beq.n	800516c <HAL_I2C_EV_IRQHandler+0x11c>
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	0a9b      	lsrs	r3, r3, #10
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d009      	beq.n	800516c <HAL_I2C_EV_IRQHandler+0x11c>
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f9ef 	bl	8005548 <I2C_MasterTransmit_TXE>
 800516a:	e049      	b.n	8005200 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	089b      	lsrs	r3, r3, #2
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 80d2 	beq.w	800531e <HAL_I2C_EV_IRQHandler+0x2ce>
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	0a5b      	lsrs	r3, r3, #9
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80cb 	beq.w	800531e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	2b10      	cmp	r3, #16
 800518c:	d103      	bne.n	8005196 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fa76 	bl	8005680 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005194:	e0c3      	b.n	800531e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fada 	bl	8005750 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800519c:	e0bf      	b.n	800531e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ac:	f000 80b7 	beq.w	800531e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	099b      	lsrs	r3, r3, #6
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00f      	beq.n	80051dc <HAL_I2C_EV_IRQHandler+0x18c>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	0a9b      	lsrs	r3, r3, #10
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d009      	beq.n	80051dc <HAL_I2C_EV_IRQHandler+0x18c>
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	089b      	lsrs	r3, r3, #2
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d103      	bne.n	80051dc <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fb4a 	bl	800586e <I2C_MasterReceive_RXNE>
 80051da:	e011      	b.n	8005200 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	089b      	lsrs	r3, r3, #2
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 809a 	beq.w	800531e <HAL_I2C_EV_IRQHandler+0x2ce>
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	0a5b      	lsrs	r3, r3, #9
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 8093 	beq.w	800531e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fbe9 	bl	80059d0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051fe:	e08e      	b.n	800531e <HAL_I2C_EV_IRQHandler+0x2ce>
 8005200:	e08d      	b.n	800531e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	e007      	b.n	8005224 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	d012      	beq.n	8005256 <HAL_I2C_EV_IRQHandler+0x206>
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	0a5b      	lsrs	r3, r3, #9
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00c      	beq.n	8005256 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800524c:	69b9      	ldr	r1, [r7, #24]
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 ffa7 	bl	80061a2 <I2C_Slave_ADDR>
 8005254:	e066      	b.n	8005324 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d009      	beq.n	8005276 <HAL_I2C_EV_IRQHandler+0x226>
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	0a5b      	lsrs	r3, r3, #9
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 ffdc 	bl	800622c <I2C_Slave_STOPF>
 8005274:	e056      	b.n	8005324 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005276:	7bbb      	ldrb	r3, [r7, #14]
 8005278:	2b21      	cmp	r3, #33	; 0x21
 800527a:	d002      	beq.n	8005282 <HAL_I2C_EV_IRQHandler+0x232>
 800527c:	7bbb      	ldrb	r3, [r7, #14]
 800527e:	2b29      	cmp	r3, #41	; 0x29
 8005280:	d125      	bne.n	80052ce <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	09db      	lsrs	r3, r3, #7
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00f      	beq.n	80052ae <HAL_I2C_EV_IRQHandler+0x25e>
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	0a9b      	lsrs	r3, r3, #10
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <HAL_I2C_EV_IRQHandler+0x25e>
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	089b      	lsrs	r3, r3, #2
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d103      	bne.n	80052ae <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 febd 	bl	8006026 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052ac:	e039      	b.n	8005322 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	089b      	lsrs	r3, r3, #2
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d033      	beq.n	8005322 <HAL_I2C_EV_IRQHandler+0x2d2>
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	0a5b      	lsrs	r3, r3, #9
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d02d      	beq.n	8005322 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 feea 	bl	80060a0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052cc:	e029      	b.n	8005322 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	099b      	lsrs	r3, r3, #6
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00f      	beq.n	80052fa <HAL_I2C_EV_IRQHandler+0x2aa>
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	0a9b      	lsrs	r3, r3, #10
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <HAL_I2C_EV_IRQHandler+0x2aa>
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	089b      	lsrs	r3, r3, #2
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d103      	bne.n	80052fa <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fef5 	bl	80060e2 <I2C_SlaveReceive_RXNE>
 80052f8:	e014      	b.n	8005324 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	089b      	lsrs	r3, r3, #2
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00e      	beq.n	8005324 <HAL_I2C_EV_IRQHandler+0x2d4>
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	0a5b      	lsrs	r3, r3, #9
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 ff23 	bl	800615e <I2C_SlaveReceive_BTF>
 8005318:	e004      	b.n	8005324 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800531a:	bf00      	nop
 800531c:	e002      	b.n	8005324 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800531e:	bf00      	nop
 8005320:	e000      	b.n	8005324 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005322:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b08a      	sub	sp, #40	; 0x28
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005342:	2300      	movs	r3, #0
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800534c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	0a1b      	lsrs	r3, r3, #8
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00e      	beq.n	8005378 <HAL_I2C_ER_IRQHandler+0x4e>
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	0a1b      	lsrs	r3, r3, #8
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005376:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	0a5b      	lsrs	r3, r3, #9
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00e      	beq.n	80053a2 <HAL_I2C_ER_IRQHandler+0x78>
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	f043 0302 	orr.w	r3, r3, #2
 8005396:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80053a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	0a9b      	lsrs	r3, r3, #10
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d03f      	beq.n	800542e <HAL_I2C_ER_IRQHandler+0x104>
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	0a1b      	lsrs	r3, r3, #8
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d039      	beq.n	800542e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80053ba:	7efb      	ldrb	r3, [r7, #27]
 80053bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80053d4:	7ebb      	ldrb	r3, [r7, #26]
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d112      	bne.n	8005400 <HAL_I2C_ER_IRQHandler+0xd6>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10f      	bne.n	8005400 <HAL_I2C_ER_IRQHandler+0xd6>
 80053e0:	7cfb      	ldrb	r3, [r7, #19]
 80053e2:	2b21      	cmp	r3, #33	; 0x21
 80053e4:	d008      	beq.n	80053f8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80053e6:	7cfb      	ldrb	r3, [r7, #19]
 80053e8:	2b29      	cmp	r3, #41	; 0x29
 80053ea:	d005      	beq.n	80053f8 <HAL_I2C_ER_IRQHandler+0xce>
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	2b28      	cmp	r3, #40	; 0x28
 80053f0:	d106      	bne.n	8005400 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b21      	cmp	r3, #33	; 0x21
 80053f6:	d103      	bne.n	8005400 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 f847 	bl	800648c <I2C_Slave_AF>
 80053fe:	e016      	b.n	800542e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005408:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	f043 0304 	orr.w	r3, r3, #4
 8005410:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005412:	7efb      	ldrb	r3, [r7, #27]
 8005414:	2b10      	cmp	r3, #16
 8005416:	d002      	beq.n	800541e <HAL_I2C_ER_IRQHandler+0xf4>
 8005418:	7efb      	ldrb	r3, [r7, #27]
 800541a:	2b40      	cmp	r3, #64	; 0x40
 800541c:	d107      	bne.n	800542e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	0adb      	lsrs	r3, r3, #11
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00e      	beq.n	8005458 <HAL_I2C_ER_IRQHandler+0x12e>
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	0a1b      	lsrs	r3, r3, #8
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d008      	beq.n	8005458 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	f043 0308 	orr.w	r3, r3, #8
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005456:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	2b00      	cmp	r3, #0
 800545c:	d008      	beq.n	8005470 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f001 f87e 	bl	800656c <I2C_ITError>
  }
}
 8005470:	bf00      	nop
 8005472:	3728      	adds	r7, #40	; 0x28
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	70fb      	strb	r3, [r7, #3]
 80054d4:	4613      	mov	r3, r2
 80054d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005556:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800555e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	d150      	bne.n	8005610 <I2C_MasterTransmit_TXE+0xc8>
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	2b21      	cmp	r3, #33	; 0x21
 8005572:	d14d      	bne.n	8005610 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b08      	cmp	r3, #8
 8005578:	d01d      	beq.n	80055b6 <I2C_MasterTransmit_TXE+0x6e>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b20      	cmp	r3, #32
 800557e:	d01a      	beq.n	80055b6 <I2C_MasterTransmit_TXE+0x6e>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005586:	d016      	beq.n	80055b6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005596:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2211      	movs	r2, #17
 800559c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff ff62 	bl	8005478 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055b4:	e060      	b.n	8005678 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055c4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b40      	cmp	r3, #64	; 0x40
 80055ee:	d107      	bne.n	8005600 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff ff7d 	bl	80054f8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055fe:	e03b      	b.n	8005678 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff ff35 	bl	8005478 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800560e:	e033      	b.n	8005678 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	2b21      	cmp	r3, #33	; 0x21
 8005614:	d005      	beq.n	8005622 <I2C_MasterTransmit_TXE+0xda>
 8005616:	7bbb      	ldrb	r3, [r7, #14]
 8005618:	2b40      	cmp	r3, #64	; 0x40
 800561a:	d12d      	bne.n	8005678 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b22      	cmp	r3, #34	; 0x22
 8005620:	d12a      	bne.n	8005678 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d108      	bne.n	800563e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800563a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800563c:	e01c      	b.n	8005678 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d103      	bne.n	8005652 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f880 	bl	8005750 <I2C_MemoryTransmit_TXE_BTF>
}
 8005650:	e012      	b.n	8005678 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	781a      	ldrb	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005676:	e7ff      	b.n	8005678 <I2C_MasterTransmit_TXE+0x130>
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b21      	cmp	r3, #33	; 0x21
 8005698:	d156      	bne.n	8005748 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d012      	beq.n	80056ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	781a      	ldrb	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80056c8:	e03e      	b.n	8005748 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d01d      	beq.n	800570c <I2C_MasterTransmit_BTF+0x8c>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d01a      	beq.n	800570c <I2C_MasterTransmit_BTF+0x8c>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056dc:	d016      	beq.n	800570c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2211      	movs	r2, #17
 80056f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff feb7 	bl	8005478 <HAL_I2C_MasterTxCpltCallback>
}
 800570a:	e01d      	b.n	8005748 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800571a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff fe98 	bl	8005478 <HAL_I2C_MasterTxCpltCallback>
}
 8005748:	bf00      	nop
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005764:	2b00      	cmp	r3, #0
 8005766:	d11d      	bne.n	80057a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d10b      	bne.n	8005788 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005774:	b2da      	uxtb	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005780:	1c9a      	adds	r2, r3, #2
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005786:	e06e      	b.n	8005866 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800578c:	b29b      	uxth	r3, r3
 800578e:	121b      	asrs	r3, r3, #8
 8005790:	b2da      	uxtb	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80057a2:	e060      	b.n	8005866 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d10b      	bne.n	80057c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80057c2:	e050      	b.n	8005866 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d14c      	bne.n	8005866 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	2b22      	cmp	r3, #34	; 0x22
 80057d0:	d108      	bne.n	80057e4 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e0:	601a      	str	r2, [r3, #0]
}
 80057e2:	e040      	b.n	8005866 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d015      	beq.n	800581a <I2C_MemoryTransmit_TXE_BTF+0xca>
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	2b21      	cmp	r3, #33	; 0x21
 80057f2:	d112      	bne.n	800581a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	781a      	ldrb	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005818:	e025      	b.n	8005866 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d120      	bne.n	8005866 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b21      	cmp	r3, #33	; 0x21
 8005828:	d11d      	bne.n	8005866 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005838:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005848:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff fe49 	bl	80054f8 <HAL_I2C_MemTxCpltCallback>
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b22      	cmp	r3, #34	; 0x22
 8005880:	f040 80a2 	bne.w	80059c8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005888:	b29b      	uxth	r3, r3
 800588a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b03      	cmp	r3, #3
 8005890:	d921      	bls.n	80058d6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b03      	cmp	r3, #3
 80058c0:	f040 8082 	bne.w	80059c8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80058d4:	e078      	b.n	80059c8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d074      	beq.n	80059c8 <I2C_MasterReceive_RXNE+0x15a>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d002      	beq.n	80058ea <I2C_MasterReceive_RXNE+0x7c>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d16e      	bne.n	80059c8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f001 f818 	bl	8006920 <I2C_WaitOnSTOPRequestThroughIT>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d142      	bne.n	800597c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005904:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005914:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d10a      	bne.n	8005966 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff fdd4 	bl	800550c <HAL_I2C_MemRxCpltCallback>
}
 8005964:	e030      	b.n	80059c8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2212      	movs	r2, #18
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff fd89 	bl	800548c <HAL_I2C_MasterRxCpltCallback>
}
 800597a:	e025      	b.n	80059c8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800598a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff fdac 	bl	8005520 <HAL_I2C_ErrorCallback>
}
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d11b      	bne.n	8005a20 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059f6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005a1e:	e0bd      	b.n	8005b9c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d129      	bne.n	8005a7e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a38:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d00a      	beq.n	8005a56 <I2C_MasterReceive_BTF+0x86>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d007      	beq.n	8005a56 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a54:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a7c:	e08e      	b.n	8005b9c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d176      	bne.n	8005b76 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d002      	beq.n	8005a94 <I2C_MasterReceive_BTF+0xc4>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d108      	bne.n	8005aa6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	e019      	b.n	8005ada <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d002      	beq.n	8005ab2 <I2C_MasterReceive_BTF+0xe2>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d108      	bne.n	8005ac4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	e00a      	b.n	8005ada <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d007      	beq.n	8005ada <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691a      	ldr	r2, [r3, #16]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b34:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d10a      	bne.n	8005b60 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff fcd7 	bl	800550c <HAL_I2C_MemRxCpltCallback>
}
 8005b5e:	e01d      	b.n	8005b9c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2212      	movs	r2, #18
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fc8c 	bl	800548c <HAL_I2C_MasterRxCpltCallback>
}
 8005b74:	e012      	b.n	8005b9c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b9c:	bf00      	nop
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d117      	bne.n	8005be8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bd0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005bd2:	e067      	b.n	8005ca4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	f043 0301 	orr.w	r3, r3, #1
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	611a      	str	r2, [r3, #16]
}
 8005be6:	e05d      	b.n	8005ca4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf0:	d133      	bne.n	8005c5a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b21      	cmp	r3, #33	; 0x21
 8005bfc:	d109      	bne.n	8005c12 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c0e:	611a      	str	r2, [r3, #16]
 8005c10:	e008      	b.n	8005c24 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d004      	beq.n	8005c36 <I2C_Master_SB+0x92>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d108      	bne.n	8005c48 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d032      	beq.n	8005ca4 <I2C_Master_SB+0x100>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d02d      	beq.n	8005ca4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c56:	605a      	str	r2, [r3, #4]
}
 8005c58:	e024      	b.n	8005ca4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10e      	bne.n	8005c80 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	11db      	asrs	r3, r3, #7
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	f003 0306 	and.w	r3, r3, #6
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f063 030f 	orn	r3, r3, #15
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	611a      	str	r2, [r3, #16]
}
 8005c7e:	e011      	b.n	8005ca4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d10d      	bne.n	8005ca4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	11db      	asrs	r3, r3, #7
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f003 0306 	and.w	r3, r3, #6
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	f063 030e 	orn	r3, r3, #14
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	611a      	str	r2, [r3, #16]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <I2C_Master_ADD10+0x26>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d108      	bne.n	8005ce8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00c      	beq.n	8005cf8 <I2C_Master_ADD10+0x48>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cf6:	605a      	str	r2, [r3, #4]
  }
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b091      	sub	sp, #68	; 0x44
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b22      	cmp	r3, #34	; 0x22
 8005d2c:	f040 8169 	bne.w	8006002 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10f      	bne.n	8005d58 <I2C_Master_ADDR+0x54>
 8005d38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d3c:	2b40      	cmp	r3, #64	; 0x40
 8005d3e:	d10b      	bne.n	8005d58 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d40:	2300      	movs	r3, #0
 8005d42:	633b      	str	r3, [r7, #48]	; 0x30
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	633b      	str	r3, [r7, #48]	; 0x30
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	e160      	b.n	800601a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d11d      	bne.n	8005d9c <I2C_Master_ADDR+0x98>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d68:	d118      	bne.n	8005d9c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d8e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	651a      	str	r2, [r3, #80]	; 0x50
 8005d9a:	e13e      	b.n	800601a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d113      	bne.n	8005dce <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da6:	2300      	movs	r3, #0
 8005da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e115      	b.n	8005ffa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	f040 808a 	bne.w	8005eee <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005de0:	d137      	bne.n	8005e52 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e00:	d113      	bne.n	8005e2a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e10:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e12:	2300      	movs	r3, #0
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	e0e7      	b.n	8005ffa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	623b      	str	r3, [r7, #32]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	623b      	str	r3, [r7, #32]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	623b      	str	r3, [r7, #32]
 8005e3e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	e0d3      	b.n	8005ffa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d02e      	beq.n	8005eb6 <I2C_Master_ADDR+0x1b2>
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d02b      	beq.n	8005eb6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e60:	2b12      	cmp	r3, #18
 8005e62:	d102      	bne.n	8005e6a <I2C_Master_ADDR+0x166>
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d125      	bne.n	8005eb6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d00e      	beq.n	8005e8e <I2C_Master_ADDR+0x18a>
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d00b      	beq.n	8005e8e <I2C_Master_ADDR+0x18a>
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	2b10      	cmp	r3, #16
 8005e7a:	d008      	beq.n	8005e8e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	e007      	b.n	8005e9e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61fb      	str	r3, [r7, #28]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	e0a1      	b.n	8005ffa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	e085      	b.n	8005ffa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d14d      	bne.n	8005f94 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d016      	beq.n	8005f2c <I2C_Master_ADDR+0x228>
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d013      	beq.n	8005f2c <I2C_Master_ADDR+0x228>
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	2b10      	cmp	r3, #16
 8005f08:	d010      	beq.n	8005f2c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f18:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e007      	b.n	8005f3c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f3a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f4a:	d117      	bne.n	8005f7c <I2C_Master_ADDR+0x278>
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f52:	d00b      	beq.n	8005f6c <I2C_Master_ADDR+0x268>
 8005f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d008      	beq.n	8005f6c <I2C_Master_ADDR+0x268>
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d005      	beq.n	8005f6c <I2C_Master_ADDR+0x268>
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	2b10      	cmp	r3, #16
 8005f64:	d002      	beq.n	8005f6c <I2C_Master_ADDR+0x268>
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d107      	bne.n	8005f7c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f7a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	e032      	b.n	8005ffa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fa2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb2:	d117      	bne.n	8005fe4 <I2C_Master_ADDR+0x2e0>
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fba:	d00b      	beq.n	8005fd4 <I2C_Master_ADDR+0x2d0>
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d008      	beq.n	8005fd4 <I2C_Master_ADDR+0x2d0>
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d005      	beq.n	8005fd4 <I2C_Master_ADDR+0x2d0>
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d002      	beq.n	8005fd4 <I2C_Master_ADDR+0x2d0>
 8005fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d107      	bne.n	8005fe4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fe2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	613b      	str	r3, [r7, #16]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	613b      	str	r3, [r7, #16]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006000:	e00b      	b.n	800601a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	68fb      	ldr	r3, [r7, #12]
}
 8006018:	e7ff      	b.n	800601a <I2C_Master_ADDR+0x316>
 800601a:	bf00      	nop
 800601c:	3744      	adds	r7, #68	; 0x44
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006034:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d02b      	beq.n	8006098 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	781a      	ldrb	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605a:	b29b      	uxth	r3, r3
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d114      	bne.n	8006098 <I2C_SlaveTransmit_TXE+0x72>
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	2b29      	cmp	r3, #41	; 0x29
 8006072:	d111      	bne.n	8006098 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006082:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2221      	movs	r2, #33	; 0x21
 8006088:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2228      	movs	r2, #40	; 0x28
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff fa04 	bl	80054a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d011      	beq.n	80060d6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	781a      	ldrb	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d02c      	beq.n	8006156 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d114      	bne.n	8006156 <I2C_SlaveReceive_RXNE+0x74>
 800612c:	7bfb      	ldrb	r3, [r7, #15]
 800612e:	2b2a      	cmp	r3, #42	; 0x2a
 8006130:	d111      	bne.n	8006156 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006140:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2222      	movs	r2, #34	; 0x22
 8006146:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2228      	movs	r2, #40	; 0x28
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff f9af 	bl	80054b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006156:	bf00      	nop
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d012      	beq.n	8006196 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061bc:	2b28      	cmp	r3, #40	; 0x28
 80061be:	d127      	bne.n	8006210 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ce:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	089b      	lsrs	r3, r3, #2
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	09db      	lsrs	r3, r3, #7
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d103      	bne.n	80061f4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	81bb      	strh	r3, [r7, #12]
 80061f2:	e002      	b.n	80061fa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006202:	89ba      	ldrh	r2, [r7, #12]
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff f95d 	bl	80054c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800620e:	e008      	b.n	8006222 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0202 	mvn.w	r2, #2
 8006218:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800624a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800624c:	2300      	movs	r3, #0
 800624e:	60bb      	str	r3, [r7, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	60bb      	str	r3, [r7, #8]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006278:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006288:	d172      	bne.n	8006370 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b22      	cmp	r3, #34	; 0x22
 800628e:	d002      	beq.n	8006296 <I2C_Slave_STOPF+0x6a>
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	2b2a      	cmp	r3, #42	; 0x2a
 8006294:	d135      	bne.n	8006302 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	f043 0204 	orr.w	r2, r3, #4
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe fa18 	bl	8004704 <HAL_DMA_GetState>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d049      	beq.n	800636e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062de:	4a69      	ldr	r2, [pc, #420]	; (8006484 <I2C_Slave_STOPF+0x258>)
 80062e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe f860 	bl	80043ac <HAL_DMA_Abort_IT>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d03d      	beq.n	800636e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006300:	e035      	b.n	800636e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	b29a      	uxth	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	f043 0204 	orr.w	r2, r3, #4
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006334:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633a:	4618      	mov	r0, r3
 800633c:	f7fe f9e2 	bl	8004704 <HAL_DMA_GetState>
 8006340:	4603      	mov	r3, r0
 8006342:	2b01      	cmp	r3, #1
 8006344:	d014      	beq.n	8006370 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634a:	4a4e      	ldr	r2, [pc, #312]	; (8006484 <I2C_Slave_STOPF+0x258>)
 800634c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe f82a 	bl	80043ac <HAL_DMA_Abort_IT>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006368:	4610      	mov	r0, r2
 800636a:	4798      	blx	r3
 800636c:	e000      	b.n	8006370 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800636e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006374:	b29b      	uxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d03e      	beq.n	80063f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d112      	bne.n	80063ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b8:	2b40      	cmp	r3, #64	; 0x40
 80063ba:	d112      	bne.n	80063e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f0:	f043 0204 	orr.w	r2, r3, #4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f8b3 	bl	800656c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006406:	e039      	b.n	800647c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	2b2a      	cmp	r3, #42	; 0x2a
 800640c:	d109      	bne.n	8006422 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2228      	movs	r2, #40	; 0x28
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff f849 	bl	80054b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b28      	cmp	r3, #40	; 0x28
 800642c:	d111      	bne.n	8006452 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a15      	ldr	r2, [pc, #84]	; (8006488 <I2C_Slave_STOPF+0x25c>)
 8006432:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff f84a 	bl	80054e4 <HAL_I2C_ListenCpltCallback>
}
 8006450:	e014      	b.n	800647c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	2b22      	cmp	r3, #34	; 0x22
 8006458:	d002      	beq.n	8006460 <I2C_Slave_STOPF+0x234>
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	2b22      	cmp	r3, #34	; 0x22
 800645e:	d10d      	bne.n	800647c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff f81c 	bl	80054b4 <HAL_I2C_SlaveRxCpltCallback>
}
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	080067d1 	.word	0x080067d1
 8006488:	ffff0000 	.word	0xffff0000

0800648c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d002      	beq.n	80064ae <I2C_Slave_AF+0x22>
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	d129      	bne.n	8006502 <I2C_Slave_AF+0x76>
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b28      	cmp	r3, #40	; 0x28
 80064b2:	d126      	bne.n	8006502 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a2c      	ldr	r2, [pc, #176]	; (8006568 <I2C_Slave_AF+0xdc>)
 80064b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fe fff2 	bl	80054e4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006500:	e02e      	b.n	8006560 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	2b21      	cmp	r3, #33	; 0x21
 8006506:	d126      	bne.n	8006556 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a17      	ldr	r2, [pc, #92]	; (8006568 <I2C_Slave_AF+0xdc>)
 800650c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2221      	movs	r2, #33	; 0x21
 8006512:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006532:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800653c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fe ffa6 	bl	80054a0 <HAL_I2C_SlaveTxCpltCallback>
}
 8006554:	e004      	b.n	8006560 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800655e:	615a      	str	r2, [r3, #20]
}
 8006560:	bf00      	nop
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	ffff0000 	.word	0xffff0000

0800656c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006582:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	2b10      	cmp	r3, #16
 8006588:	d002      	beq.n	8006590 <I2C_ITError+0x24>
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	2b40      	cmp	r3, #64	; 0x40
 800658e:	d10a      	bne.n	80065a6 <I2C_ITError+0x3a>
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	2b22      	cmp	r3, #34	; 0x22
 8006594:	d107      	bne.n	80065a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065ac:	2b28      	cmp	r3, #40	; 0x28
 80065ae:	d107      	bne.n	80065c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2228      	movs	r2, #40	; 0x28
 80065ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80065be:	e015      	b.n	80065ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ce:	d00a      	beq.n	80065e6 <I2C_ITError+0x7a>
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	2b60      	cmp	r3, #96	; 0x60
 80065d4:	d007      	beq.n	80065e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065fa:	d162      	bne.n	80066c2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800660a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b01      	cmp	r3, #1
 8006618:	d020      	beq.n	800665c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661e:	4a6a      	ldr	r2, [pc, #424]	; (80067c8 <I2C_ITError+0x25c>)
 8006620:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006626:	4618      	mov	r0, r3
 8006628:	f7fd fec0 	bl	80043ac <HAL_DMA_Abort_IT>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 8089 	beq.w	8006746 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0201 	bic.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006656:	4610      	mov	r0, r2
 8006658:	4798      	blx	r3
 800665a:	e074      	b.n	8006746 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	4a59      	ldr	r2, [pc, #356]	; (80067c8 <I2C_ITError+0x25c>)
 8006662:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	4618      	mov	r0, r3
 800666a:	f7fd fe9f 	bl	80043ac <HAL_DMA_Abort_IT>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d068      	beq.n	8006746 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d10b      	bne.n	800669a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0201 	bic.w	r2, r2, #1
 80066a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066bc:	4610      	mov	r0, r2
 80066be:	4798      	blx	r3
 80066c0:	e041      	b.n	8006746 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b60      	cmp	r3, #96	; 0x60
 80066cc:	d125      	bne.n	800671a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e6:	2b40      	cmp	r3, #64	; 0x40
 80066e8:	d10b      	bne.n	8006702 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0201 	bic.w	r2, r2, #1
 8006710:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7fe ff0e 	bl	8005534 <HAL_I2C_AbortCpltCallback>
 8006718:	e015      	b.n	8006746 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b40      	cmp	r3, #64	; 0x40
 8006726:	d10b      	bne.n	8006740 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7fe feed 	bl	8005520 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10e      	bne.n	8006774 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006766:	2b00      	cmp	r3, #0
 8006768:	d104      	bne.n	8006774 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006770:	2b00      	cmp	r3, #0
 8006772:	d007      	beq.n	8006784 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006782:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b04      	cmp	r3, #4
 8006796:	d113      	bne.n	80067c0 <I2C_ITError+0x254>
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	2b28      	cmp	r3, #40	; 0x28
 800679c:	d110      	bne.n	80067c0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a0a      	ldr	r2, [pc, #40]	; (80067cc <I2C_ITError+0x260>)
 80067a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7fe fe92 	bl	80054e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067c0:	bf00      	nop
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	080067d1 	.word	0x080067d1
 80067cc:	ffff0000 	.word	0xffff0000

080067d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80067ea:	4b4b      	ldr	r3, [pc, #300]	; (8006918 <I2C_DMAAbort+0x148>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	08db      	lsrs	r3, r3, #3
 80067f0:	4a4a      	ldr	r2, [pc, #296]	; (800691c <I2C_DMAAbort+0x14c>)
 80067f2:	fba2 2303 	umull	r2, r3, r2, r3
 80067f6:	0a1a      	lsrs	r2, r3, #8
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	00da      	lsls	r2, r3, #3
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d106      	bne.n	8006818 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f043 0220 	orr.w	r2, r3, #32
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006816:	e00a      	b.n	800682e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3b01      	subs	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800682c:	d0ea      	beq.n	8006804 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683a:	2200      	movs	r2, #0
 800683c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	2200      	movs	r2, #0
 800684c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2200      	movs	r2, #0
 8006862:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006870:	2200      	movs	r2, #0
 8006872:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	2200      	movs	r2, #0
 8006882:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0201 	bic.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b60      	cmp	r3, #96	; 0x60
 800689e:	d10e      	bne.n	80068be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2200      	movs	r2, #0
 80068b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80068b6:	6978      	ldr	r0, [r7, #20]
 80068b8:	f7fe fe3c 	bl	8005534 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80068bc:	e027      	b.n	800690e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068be:	7cfb      	ldrb	r3, [r7, #19]
 80068c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80068c4:	2b28      	cmp	r3, #40	; 0x28
 80068c6:	d117      	bne.n	80068f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2200      	movs	r2, #0
 80068ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2228      	movs	r2, #40	; 0x28
 80068f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068f6:	e007      	b.n	8006908 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006908:	6978      	ldr	r0, [r7, #20]
 800690a:	f7fe fe09 	bl	8005520 <HAL_I2C_ErrorCallback>
}
 800690e:	bf00      	nop
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	2000001c 	.word	0x2000001c
 800691c:	14f8b589 	.word	0x14f8b589

08006920 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800692c:	4b13      	ldr	r3, [pc, #76]	; (800697c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	08db      	lsrs	r3, r3, #3
 8006932:	4a13      	ldr	r2, [pc, #76]	; (8006980 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006934:	fba2 2303 	umull	r2, r3, r2, r3
 8006938:	0a1a      	lsrs	r2, r3, #8
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3b01      	subs	r3, #1
 8006946:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d107      	bne.n	800695e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	f043 0220 	orr.w	r2, r3, #32
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e008      	b.n	8006970 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800696c:	d0e9      	beq.n	8006942 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	2000001c 	.word	0x2000001c
 8006980:	14f8b589 	.word	0x14f8b589

08006984 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006994:	d103      	bne.n	800699e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800699c:	e007      	b.n	80069ae <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80069a6:	d102      	bne.n	80069ae <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2208      	movs	r2, #8
 80069ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
	...

080069bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e264      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d075      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069da:	4ba3      	ldr	r3, [pc, #652]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 030c 	and.w	r3, r3, #12
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d00c      	beq.n	8006a00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069e6:	4ba0      	ldr	r3, [pc, #640]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069ee:	2b08      	cmp	r3, #8
 80069f0:	d112      	bne.n	8006a18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069f2:	4b9d      	ldr	r3, [pc, #628]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069fe:	d10b      	bne.n	8006a18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a00:	4b99      	ldr	r3, [pc, #612]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d05b      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x108>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d157      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e23f      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a20:	d106      	bne.n	8006a30 <HAL_RCC_OscConfig+0x74>
 8006a22:	4b91      	ldr	r3, [pc, #580]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a90      	ldr	r2, [pc, #576]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	e01d      	b.n	8006a6c <HAL_RCC_OscConfig+0xb0>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a38:	d10c      	bne.n	8006a54 <HAL_RCC_OscConfig+0x98>
 8006a3a:	4b8b      	ldr	r3, [pc, #556]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a8a      	ldr	r2, [pc, #552]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	4b88      	ldr	r3, [pc, #544]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a87      	ldr	r2, [pc, #540]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	e00b      	b.n	8006a6c <HAL_RCC_OscConfig+0xb0>
 8006a54:	4b84      	ldr	r3, [pc, #528]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a83      	ldr	r2, [pc, #524]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	4b81      	ldr	r3, [pc, #516]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a80      	ldr	r2, [pc, #512]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d013      	beq.n	8006a9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a74:	f7fd fa06 	bl	8003e84 <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a7c:	f7fd fa02 	bl	8003e84 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b64      	cmp	r3, #100	; 0x64
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e204      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a8e:	4b76      	ldr	r3, [pc, #472]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0f0      	beq.n	8006a7c <HAL_RCC_OscConfig+0xc0>
 8006a9a:	e014      	b.n	8006ac6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a9c:	f7fd f9f2 	bl	8003e84 <HAL_GetTick>
 8006aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aa2:	e008      	b.n	8006ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006aa4:	f7fd f9ee 	bl	8003e84 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b64      	cmp	r3, #100	; 0x64
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e1f0      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ab6:	4b6c      	ldr	r3, [pc, #432]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1f0      	bne.n	8006aa4 <HAL_RCC_OscConfig+0xe8>
 8006ac2:	e000      	b.n	8006ac6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d063      	beq.n	8006b9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ad2:	4b65      	ldr	r3, [pc, #404]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 030c 	and.w	r3, r3, #12
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ade:	4b62      	ldr	r3, [pc, #392]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ae6:	2b08      	cmp	r3, #8
 8006ae8:	d11c      	bne.n	8006b24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aea:	4b5f      	ldr	r3, [pc, #380]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d116      	bne.n	8006b24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006af6:	4b5c      	ldr	r3, [pc, #368]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d005      	beq.n	8006b0e <HAL_RCC_OscConfig+0x152>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d001      	beq.n	8006b0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e1c4      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b0e:	4b56      	ldr	r3, [pc, #344]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	4952      	ldr	r1, [pc, #328]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b22:	e03a      	b.n	8006b9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d020      	beq.n	8006b6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b2c:	4b4f      	ldr	r3, [pc, #316]	; (8006c6c <HAL_RCC_OscConfig+0x2b0>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b32:	f7fd f9a7 	bl	8003e84 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b38:	e008      	b.n	8006b4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b3a:	f7fd f9a3 	bl	8003e84 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e1a5      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b4c:	4b46      	ldr	r3, [pc, #280]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0f0      	beq.n	8006b3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b58:	4b43      	ldr	r3, [pc, #268]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	4940      	ldr	r1, [pc, #256]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	600b      	str	r3, [r1, #0]
 8006b6c:	e015      	b.n	8006b9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b6e:	4b3f      	ldr	r3, [pc, #252]	; (8006c6c <HAL_RCC_OscConfig+0x2b0>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b74:	f7fd f986 	bl	8003e84 <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b7c:	f7fd f982 	bl	8003e84 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e184      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b8e:	4b36      	ldr	r3, [pc, #216]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1f0      	bne.n	8006b7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d030      	beq.n	8006c08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d016      	beq.n	8006bdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bae:	4b30      	ldr	r3, [pc, #192]	; (8006c70 <HAL_RCC_OscConfig+0x2b4>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb4:	f7fd f966 	bl	8003e84 <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bbc:	f7fd f962 	bl	8003e84 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e164      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bce:	4b26      	ldr	r3, [pc, #152]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCC_OscConfig+0x200>
 8006bda:	e015      	b.n	8006c08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bdc:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <HAL_RCC_OscConfig+0x2b4>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006be2:	f7fd f94f 	bl	8003e84 <HAL_GetTick>
 8006be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006be8:	e008      	b.n	8006bfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bea:	f7fd f94b 	bl	8003e84 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d901      	bls.n	8006bfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e14d      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bfc:	4b1a      	ldr	r3, [pc, #104]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1f0      	bne.n	8006bea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80a0 	beq.w	8006d56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c1a:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10f      	bne.n	8006c46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c26:	2300      	movs	r3, #0
 8006c28:	60bb      	str	r3, [r7, #8]
 8006c2a:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	4a0e      	ldr	r2, [pc, #56]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c34:	6413      	str	r3, [r2, #64]	; 0x40
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <HAL_RCC_OscConfig+0x2ac>)
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	60bb      	str	r3, [r7, #8]
 8006c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c42:	2301      	movs	r3, #1
 8006c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c46:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <HAL_RCC_OscConfig+0x2b8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d121      	bne.n	8006c96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c52:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <HAL_RCC_OscConfig+0x2b8>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a07      	ldr	r2, [pc, #28]	; (8006c74 <HAL_RCC_OscConfig+0x2b8>)
 8006c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c5e:	f7fd f911 	bl	8003e84 <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c64:	e011      	b.n	8006c8a <HAL_RCC_OscConfig+0x2ce>
 8006c66:	bf00      	nop
 8006c68:	40023800 	.word	0x40023800
 8006c6c:	42470000 	.word	0x42470000
 8006c70:	42470e80 	.word	0x42470e80
 8006c74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c78:	f7fd f904 	bl	8003e84 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e106      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c8a:	4b85      	ldr	r3, [pc, #532]	; (8006ea0 <HAL_RCC_OscConfig+0x4e4>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f0      	beq.n	8006c78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d106      	bne.n	8006cac <HAL_RCC_OscConfig+0x2f0>
 8006c9e:	4b81      	ldr	r3, [pc, #516]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca2:	4a80      	ldr	r2, [pc, #512]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006ca4:	f043 0301 	orr.w	r3, r3, #1
 8006ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8006caa:	e01c      	b.n	8006ce6 <HAL_RCC_OscConfig+0x32a>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b05      	cmp	r3, #5
 8006cb2:	d10c      	bne.n	8006cce <HAL_RCC_OscConfig+0x312>
 8006cb4:	4b7b      	ldr	r3, [pc, #492]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb8:	4a7a      	ldr	r2, [pc, #488]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006cba:	f043 0304 	orr.w	r3, r3, #4
 8006cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc0:	4b78      	ldr	r3, [pc, #480]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc4:	4a77      	ldr	r2, [pc, #476]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006cc6:	f043 0301 	orr.w	r3, r3, #1
 8006cca:	6713      	str	r3, [r2, #112]	; 0x70
 8006ccc:	e00b      	b.n	8006ce6 <HAL_RCC_OscConfig+0x32a>
 8006cce:	4b75      	ldr	r3, [pc, #468]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd2:	4a74      	ldr	r2, [pc, #464]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006cd4:	f023 0301 	bic.w	r3, r3, #1
 8006cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cda:	4b72      	ldr	r3, [pc, #456]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cde:	4a71      	ldr	r2, [pc, #452]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006ce0:	f023 0304 	bic.w	r3, r3, #4
 8006ce4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d015      	beq.n	8006d1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cee:	f7fd f8c9 	bl	8003e84 <HAL_GetTick>
 8006cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cf4:	e00a      	b.n	8006d0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cf6:	f7fd f8c5 	bl	8003e84 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e0c5      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d0c:	4b65      	ldr	r3, [pc, #404]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0ee      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x33a>
 8006d18:	e014      	b.n	8006d44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d1a:	f7fd f8b3 	bl	8003e84 <HAL_GetTick>
 8006d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d20:	e00a      	b.n	8006d38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d22:	f7fd f8af 	bl	8003e84 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e0af      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d38:	4b5a      	ldr	r3, [pc, #360]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1ee      	bne.n	8006d22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d105      	bne.n	8006d56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d4a:	4b56      	ldr	r3, [pc, #344]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	4a55      	ldr	r2, [pc, #340]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 809b 	beq.w	8006e96 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d60:	4b50      	ldr	r3, [pc, #320]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f003 030c 	and.w	r3, r3, #12
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d05c      	beq.n	8006e26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d141      	bne.n	8006df8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d74:	4b4c      	ldr	r3, [pc, #304]	; (8006ea8 <HAL_RCC_OscConfig+0x4ec>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7a:	f7fd f883 	bl	8003e84 <HAL_GetTick>
 8006d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d80:	e008      	b.n	8006d94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d82:	f7fd f87f 	bl	8003e84 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e081      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d94:	4b43      	ldr	r3, [pc, #268]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1f0      	bne.n	8006d82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	69da      	ldr	r2, [r3, #28]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	019b      	lsls	r3, r3, #6
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db6:	085b      	lsrs	r3, r3, #1
 8006db8:	3b01      	subs	r3, #1
 8006dba:	041b      	lsls	r3, r3, #16
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc2:	061b      	lsls	r3, r3, #24
 8006dc4:	4937      	ldr	r1, [pc, #220]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dca:	4b37      	ldr	r3, [pc, #220]	; (8006ea8 <HAL_RCC_OscConfig+0x4ec>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd0:	f7fd f858 	bl	8003e84 <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dd8:	f7fd f854 	bl	8003e84 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e056      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dea:	4b2e      	ldr	r3, [pc, #184]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0f0      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x41c>
 8006df6:	e04e      	b.n	8006e96 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006df8:	4b2b      	ldr	r3, [pc, #172]	; (8006ea8 <HAL_RCC_OscConfig+0x4ec>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dfe:	f7fd f841 	bl	8003e84 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e04:	e008      	b.n	8006e18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e06:	f7fd f83d 	bl	8003e84 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e03f      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e18:	4b22      	ldr	r3, [pc, #136]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1f0      	bne.n	8006e06 <HAL_RCC_OscConfig+0x44a>
 8006e24:	e037      	b.n	8006e96 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e032      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e32:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <HAL_RCC_OscConfig+0x4e8>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d028      	beq.n	8006e92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d121      	bne.n	8006e92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d11a      	bne.n	8006e92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e62:	4013      	ands	r3, r2
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e68:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d111      	bne.n	8006e92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	085b      	lsrs	r3, r3, #1
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d107      	bne.n	8006e92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d001      	beq.n	8006e96 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40007000 	.word	0x40007000
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	42470060 	.word	0x42470060

08006eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e0cc      	b.n	800705a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ec0:	4b68      	ldr	r3, [pc, #416]	; (8007064 <HAL_RCC_ClockConfig+0x1b8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d90c      	bls.n	8006ee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ece:	4b65      	ldr	r3, [pc, #404]	; (8007064 <HAL_RCC_ClockConfig+0x1b8>)
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed6:	4b63      	ldr	r3, [pc, #396]	; (8007064 <HAL_RCC_ClockConfig+0x1b8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d001      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e0b8      	b.n	800705a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d020      	beq.n	8006f36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f00:	4b59      	ldr	r3, [pc, #356]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	4a58      	ldr	r2, [pc, #352]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8006f06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f18:	4b53      	ldr	r3, [pc, #332]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	4a52      	ldr	r2, [pc, #328]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f24:	4b50      	ldr	r3, [pc, #320]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	494d      	ldr	r1, [pc, #308]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d044      	beq.n	8006fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d107      	bne.n	8006f5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f4a:	4b47      	ldr	r3, [pc, #284]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d119      	bne.n	8006f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e07f      	b.n	800705a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d003      	beq.n	8006f6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d107      	bne.n	8006f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f6a:	4b3f      	ldr	r3, [pc, #252]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e06f      	b.n	800705a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f7a:	4b3b      	ldr	r3, [pc, #236]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e067      	b.n	800705a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f8a:	4b37      	ldr	r3, [pc, #220]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f023 0203 	bic.w	r2, r3, #3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	4934      	ldr	r1, [pc, #208]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f9c:	f7fc ff72 	bl	8003e84 <HAL_GetTick>
 8006fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fa2:	e00a      	b.n	8006fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fa4:	f7fc ff6e 	bl	8003e84 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e04f      	b.n	800705a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fba:	4b2b      	ldr	r3, [pc, #172]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 020c 	and.w	r2, r3, #12
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d1eb      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fcc:	4b25      	ldr	r3, [pc, #148]	; (8007064 <HAL_RCC_ClockConfig+0x1b8>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d20c      	bcs.n	8006ff4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fda:	4b22      	ldr	r3, [pc, #136]	; (8007064 <HAL_RCC_ClockConfig+0x1b8>)
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fe2:	4b20      	ldr	r3, [pc, #128]	; (8007064 <HAL_RCC_ClockConfig+0x1b8>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d001      	beq.n	8006ff4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e032      	b.n	800705a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d008      	beq.n	8007012 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007000:	4b19      	ldr	r3, [pc, #100]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4916      	ldr	r1, [pc, #88]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 800700e:	4313      	orrs	r3, r2
 8007010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d009      	beq.n	8007032 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800701e:	4b12      	ldr	r3, [pc, #72]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	490e      	ldr	r1, [pc, #56]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 800702e:	4313      	orrs	r3, r2
 8007030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007032:	f000 f821 	bl	8007078 <HAL_RCC_GetSysClockFreq>
 8007036:	4602      	mov	r2, r0
 8007038:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <HAL_RCC_ClockConfig+0x1bc>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	490a      	ldr	r1, [pc, #40]	; (800706c <HAL_RCC_ClockConfig+0x1c0>)
 8007044:	5ccb      	ldrb	r3, [r1, r3]
 8007046:	fa22 f303 	lsr.w	r3, r2, r3
 800704a:	4a09      	ldr	r2, [pc, #36]	; (8007070 <HAL_RCC_ClockConfig+0x1c4>)
 800704c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800704e:	4b09      	ldr	r3, [pc, #36]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f7fc fed2 	bl	8003dfc <HAL_InitTick>

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40023c00 	.word	0x40023c00
 8007068:	40023800 	.word	0x40023800
 800706c:	08009754 	.word	0x08009754
 8007070:	2000001c 	.word	0x2000001c
 8007074:	20000020 	.word	0x20000020

08007078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	607b      	str	r3, [r7, #4]
 8007084:	2300      	movs	r3, #0
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	2300      	movs	r3, #0
 800708a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007090:	4b67      	ldr	r3, [pc, #412]	; (8007230 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 030c 	and.w	r3, r3, #12
 8007098:	2b08      	cmp	r3, #8
 800709a:	d00d      	beq.n	80070b8 <HAL_RCC_GetSysClockFreq+0x40>
 800709c:	2b08      	cmp	r3, #8
 800709e:	f200 80bd 	bhi.w	800721c <HAL_RCC_GetSysClockFreq+0x1a4>
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <HAL_RCC_GetSysClockFreq+0x34>
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d003      	beq.n	80070b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80070aa:	e0b7      	b.n	800721c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070ac:	4b61      	ldr	r3, [pc, #388]	; (8007234 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80070ae:	60bb      	str	r3, [r7, #8]
       break;
 80070b0:	e0b7      	b.n	8007222 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070b2:	4b61      	ldr	r3, [pc, #388]	; (8007238 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80070b4:	60bb      	str	r3, [r7, #8]
      break;
 80070b6:	e0b4      	b.n	8007222 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070b8:	4b5d      	ldr	r3, [pc, #372]	; (8007230 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070c2:	4b5b      	ldr	r3, [pc, #364]	; (8007230 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d04d      	beq.n	800716a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070ce:	4b58      	ldr	r3, [pc, #352]	; (8007230 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	099b      	lsrs	r3, r3, #6
 80070d4:	461a      	mov	r2, r3
 80070d6:	f04f 0300 	mov.w	r3, #0
 80070da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070de:	f04f 0100 	mov.w	r1, #0
 80070e2:	ea02 0800 	and.w	r8, r2, r0
 80070e6:	ea03 0901 	and.w	r9, r3, r1
 80070ea:	4640      	mov	r0, r8
 80070ec:	4649      	mov	r1, r9
 80070ee:	f04f 0200 	mov.w	r2, #0
 80070f2:	f04f 0300 	mov.w	r3, #0
 80070f6:	014b      	lsls	r3, r1, #5
 80070f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80070fc:	0142      	lsls	r2, r0, #5
 80070fe:	4610      	mov	r0, r2
 8007100:	4619      	mov	r1, r3
 8007102:	ebb0 0008 	subs.w	r0, r0, r8
 8007106:	eb61 0109 	sbc.w	r1, r1, r9
 800710a:	f04f 0200 	mov.w	r2, #0
 800710e:	f04f 0300 	mov.w	r3, #0
 8007112:	018b      	lsls	r3, r1, #6
 8007114:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007118:	0182      	lsls	r2, r0, #6
 800711a:	1a12      	subs	r2, r2, r0
 800711c:	eb63 0301 	sbc.w	r3, r3, r1
 8007120:	f04f 0000 	mov.w	r0, #0
 8007124:	f04f 0100 	mov.w	r1, #0
 8007128:	00d9      	lsls	r1, r3, #3
 800712a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800712e:	00d0      	lsls	r0, r2, #3
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	eb12 0208 	adds.w	r2, r2, r8
 8007138:	eb43 0309 	adc.w	r3, r3, r9
 800713c:	f04f 0000 	mov.w	r0, #0
 8007140:	f04f 0100 	mov.w	r1, #0
 8007144:	0259      	lsls	r1, r3, #9
 8007146:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800714a:	0250      	lsls	r0, r2, #9
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4610      	mov	r0, r2
 8007152:	4619      	mov	r1, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	461a      	mov	r2, r3
 8007158:	f04f 0300 	mov.w	r3, #0
 800715c:	f7f9 fe26 	bl	8000dac <__aeabi_uldivmod>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4613      	mov	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e04a      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800716a:	4b31      	ldr	r3, [pc, #196]	; (8007230 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	099b      	lsrs	r3, r3, #6
 8007170:	461a      	mov	r2, r3
 8007172:	f04f 0300 	mov.w	r3, #0
 8007176:	f240 10ff 	movw	r0, #511	; 0x1ff
 800717a:	f04f 0100 	mov.w	r1, #0
 800717e:	ea02 0400 	and.w	r4, r2, r0
 8007182:	ea03 0501 	and.w	r5, r3, r1
 8007186:	4620      	mov	r0, r4
 8007188:	4629      	mov	r1, r5
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	014b      	lsls	r3, r1, #5
 8007194:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007198:	0142      	lsls	r2, r0, #5
 800719a:	4610      	mov	r0, r2
 800719c:	4619      	mov	r1, r3
 800719e:	1b00      	subs	r0, r0, r4
 80071a0:	eb61 0105 	sbc.w	r1, r1, r5
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	f04f 0300 	mov.w	r3, #0
 80071ac:	018b      	lsls	r3, r1, #6
 80071ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071b2:	0182      	lsls	r2, r0, #6
 80071b4:	1a12      	subs	r2, r2, r0
 80071b6:	eb63 0301 	sbc.w	r3, r3, r1
 80071ba:	f04f 0000 	mov.w	r0, #0
 80071be:	f04f 0100 	mov.w	r1, #0
 80071c2:	00d9      	lsls	r1, r3, #3
 80071c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071c8:	00d0      	lsls	r0, r2, #3
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	1912      	adds	r2, r2, r4
 80071d0:	eb45 0303 	adc.w	r3, r5, r3
 80071d4:	f04f 0000 	mov.w	r0, #0
 80071d8:	f04f 0100 	mov.w	r1, #0
 80071dc:	0299      	lsls	r1, r3, #10
 80071de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80071e2:	0290      	lsls	r0, r2, #10
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4610      	mov	r0, r2
 80071ea:	4619      	mov	r1, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	461a      	mov	r2, r3
 80071f0:	f04f 0300 	mov.w	r3, #0
 80071f4:	f7f9 fdda 	bl	8000dac <__aeabi_uldivmod>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	4613      	mov	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007200:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	0c1b      	lsrs	r3, r3, #16
 8007206:	f003 0303 	and.w	r3, r3, #3
 800720a:	3301      	adds	r3, #1
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	fbb2 f3f3 	udiv	r3, r2, r3
 8007218:	60bb      	str	r3, [r7, #8]
      break;
 800721a:	e002      	b.n	8007222 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800721c:	4b05      	ldr	r3, [pc, #20]	; (8007234 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800721e:	60bb      	str	r3, [r7, #8]
      break;
 8007220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007222:	68bb      	ldr	r3, [r7, #8]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800722e:	bf00      	nop
 8007230:	40023800 	.word	0x40023800
 8007234:	00f42400 	.word	0x00f42400
 8007238:	007a1200 	.word	0x007a1200

0800723c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007240:	4b03      	ldr	r3, [pc, #12]	; (8007250 <HAL_RCC_GetHCLKFreq+0x14>)
 8007242:	681b      	ldr	r3, [r3, #0]
}
 8007244:	4618      	mov	r0, r3
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	2000001c 	.word	0x2000001c

08007254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007258:	f7ff fff0 	bl	800723c <HAL_RCC_GetHCLKFreq>
 800725c:	4602      	mov	r2, r0
 800725e:	4b05      	ldr	r3, [pc, #20]	; (8007274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	0a9b      	lsrs	r3, r3, #10
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	4903      	ldr	r1, [pc, #12]	; (8007278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800726a:	5ccb      	ldrb	r3, [r1, r3]
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007270:	4618      	mov	r0, r3
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40023800 	.word	0x40023800
 8007278:	08009764 	.word	0x08009764

0800727c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007280:	f7ff ffdc 	bl	800723c <HAL_RCC_GetHCLKFreq>
 8007284:	4602      	mov	r2, r0
 8007286:	4b05      	ldr	r3, [pc, #20]	; (800729c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	0b5b      	lsrs	r3, r3, #13
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	4903      	ldr	r1, [pc, #12]	; (80072a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007292:	5ccb      	ldrb	r3, [r1, r3]
 8007294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007298:	4618      	mov	r0, r3
 800729a:	bd80      	pop	{r7, pc}
 800729c:	40023800 	.word	0x40023800
 80072a0:	08009764 	.word	0x08009764

080072a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e041      	b.n	800733a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d106      	bne.n	80072d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fc fb60 	bl	8003990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3304      	adds	r3, #4
 80072e0:	4619      	mov	r1, r3
 80072e2:	4610      	mov	r0, r2
 80072e4:	f000 fdda 	bl	8007e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b01      	cmp	r3, #1
 8007356:	d001      	beq.n	800735c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e03c      	b.n	80073d6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a1e      	ldr	r2, [pc, #120]	; (80073e4 <HAL_TIM_Base_Start+0xa0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d018      	beq.n	80073a0 <HAL_TIM_Base_Start+0x5c>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007376:	d013      	beq.n	80073a0 <HAL_TIM_Base_Start+0x5c>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1a      	ldr	r2, [pc, #104]	; (80073e8 <HAL_TIM_Base_Start+0xa4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00e      	beq.n	80073a0 <HAL_TIM_Base_Start+0x5c>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a19      	ldr	r2, [pc, #100]	; (80073ec <HAL_TIM_Base_Start+0xa8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d009      	beq.n	80073a0 <HAL_TIM_Base_Start+0x5c>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a17      	ldr	r2, [pc, #92]	; (80073f0 <HAL_TIM_Base_Start+0xac>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d004      	beq.n	80073a0 <HAL_TIM_Base_Start+0x5c>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a16      	ldr	r2, [pc, #88]	; (80073f4 <HAL_TIM_Base_Start+0xb0>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d111      	bne.n	80073c4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b06      	cmp	r3, #6
 80073b0:	d010      	beq.n	80073d4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f042 0201 	orr.w	r2, r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c2:	e007      	b.n	80073d4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0201 	orr.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800
 80073f0:	40000c00 	.word	0x40000c00
 80073f4:	40014000 	.word	0x40014000

080073f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b01      	cmp	r3, #1
 800740a:	d001      	beq.n	8007410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e044      	b.n	800749a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68da      	ldr	r2, [r3, #12]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0201 	orr.w	r2, r2, #1
 8007426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1e      	ldr	r2, [pc, #120]	; (80074a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d018      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x6c>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800743a:	d013      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x6c>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a1a      	ldr	r2, [pc, #104]	; (80074ac <HAL_TIM_Base_Start_IT+0xb4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00e      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x6c>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a19      	ldr	r2, [pc, #100]	; (80074b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d009      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x6c>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a17      	ldr	r2, [pc, #92]	; (80074b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d004      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x6c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a16      	ldr	r2, [pc, #88]	; (80074b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d111      	bne.n	8007488 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b06      	cmp	r3, #6
 8007474:	d010      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f042 0201 	orr.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007486:	e007      	b.n	8007498 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f042 0201 	orr.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	40010000 	.word	0x40010000
 80074ac:	40000400 	.word	0x40000400
 80074b0:	40000800 	.word	0x40000800
 80074b4:	40000c00 	.word	0x40000c00
 80074b8:	40014000 	.word	0x40014000

080074bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e041      	b.n	8007552 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d106      	bne.n	80074e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f839 	bl	800755a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3304      	adds	r3, #4
 80074f8:	4619      	mov	r1, r3
 80074fa:	4610      	mov	r0, r2
 80074fc:	f000 fcce 	bl	8007e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007562:	bf00      	nop
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
	...

08007570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d109      	bne.n	8007594 <HAL_TIM_PWM_Start+0x24>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b01      	cmp	r3, #1
 800758a:	bf14      	ite	ne
 800758c:	2301      	movne	r3, #1
 800758e:	2300      	moveq	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	e022      	b.n	80075da <HAL_TIM_PWM_Start+0x6a>
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2b04      	cmp	r3, #4
 8007598:	d109      	bne.n	80075ae <HAL_TIM_PWM_Start+0x3e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	bf14      	ite	ne
 80075a6:	2301      	movne	r3, #1
 80075a8:	2300      	moveq	r3, #0
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	e015      	b.n	80075da <HAL_TIM_PWM_Start+0x6a>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b08      	cmp	r3, #8
 80075b2:	d109      	bne.n	80075c8 <HAL_TIM_PWM_Start+0x58>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	bf14      	ite	ne
 80075c0:	2301      	movne	r3, #1
 80075c2:	2300      	moveq	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	e008      	b.n	80075da <HAL_TIM_PWM_Start+0x6a>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	bf14      	ite	ne
 80075d4:	2301      	movne	r3, #1
 80075d6:	2300      	moveq	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e068      	b.n	80076b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d104      	bne.n	80075f2 <HAL_TIM_PWM_Start+0x82>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075f0:	e013      	b.n	800761a <HAL_TIM_PWM_Start+0xaa>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d104      	bne.n	8007602 <HAL_TIM_PWM_Start+0x92>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007600:	e00b      	b.n	800761a <HAL_TIM_PWM_Start+0xaa>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b08      	cmp	r3, #8
 8007606:	d104      	bne.n	8007612 <HAL_TIM_PWM_Start+0xa2>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007610:	e003      	b.n	800761a <HAL_TIM_PWM_Start+0xaa>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2202      	movs	r2, #2
 8007616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2201      	movs	r2, #1
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	4618      	mov	r0, r3
 8007624:	f000 fee0 	bl	80083e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a23      	ldr	r2, [pc, #140]	; (80076bc <HAL_TIM_PWM_Start+0x14c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d107      	bne.n	8007642 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1d      	ldr	r2, [pc, #116]	; (80076bc <HAL_TIM_PWM_Start+0x14c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d018      	beq.n	800767e <HAL_TIM_PWM_Start+0x10e>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007654:	d013      	beq.n	800767e <HAL_TIM_PWM_Start+0x10e>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a19      	ldr	r2, [pc, #100]	; (80076c0 <HAL_TIM_PWM_Start+0x150>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d00e      	beq.n	800767e <HAL_TIM_PWM_Start+0x10e>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a17      	ldr	r2, [pc, #92]	; (80076c4 <HAL_TIM_PWM_Start+0x154>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d009      	beq.n	800767e <HAL_TIM_PWM_Start+0x10e>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a16      	ldr	r2, [pc, #88]	; (80076c8 <HAL_TIM_PWM_Start+0x158>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d004      	beq.n	800767e <HAL_TIM_PWM_Start+0x10e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a14      	ldr	r2, [pc, #80]	; (80076cc <HAL_TIM_PWM_Start+0x15c>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d111      	bne.n	80076a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b06      	cmp	r3, #6
 800768e:	d010      	beq.n	80076b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0201 	orr.w	r2, r2, #1
 800769e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a0:	e007      	b.n	80076b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f042 0201 	orr.w	r2, r2, #1
 80076b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40010000 	.word	0x40010000
 80076c0:	40000400 	.word	0x40000400
 80076c4:	40000800 	.word	0x40000800
 80076c8:	40000c00 	.word	0x40000c00
 80076cc:	40014000 	.word	0x40014000

080076d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e097      	b.n	8007814 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d106      	bne.n	80076fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7fc f901 	bl	8003900 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2202      	movs	r2, #2
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007714:	f023 0307 	bic.w	r3, r3, #7
 8007718:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3304      	adds	r3, #4
 8007722:	4619      	mov	r1, r3
 8007724:	4610      	mov	r0, r2
 8007726:	f000 fbb9 	bl	8007e9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4313      	orrs	r3, r2
 800774a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007752:	f023 0303 	bic.w	r3, r3, #3
 8007756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	021b      	lsls	r3, r3, #8
 8007762:	4313      	orrs	r3, r2
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	4313      	orrs	r3, r2
 8007768:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007770:	f023 030c 	bic.w	r3, r3, #12
 8007774:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800777c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	68da      	ldr	r2, [r3, #12]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	021b      	lsls	r3, r3, #8
 800778c:	4313      	orrs	r3, r2
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4313      	orrs	r3, r2
 8007792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	011a      	lsls	r2, r3, #4
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	031b      	lsls	r3, r3, #12
 80077a0:	4313      	orrs	r3, r2
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80077ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80077b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	4313      	orrs	r3, r2
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800782c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007834:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800783c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007844:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d110      	bne.n	800786e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d102      	bne.n	8007858 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007852:	7b7b      	ldrb	r3, [r7, #13]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d001      	beq.n	800785c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e069      	b.n	8007930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800786c:	e031      	b.n	80078d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b04      	cmp	r3, #4
 8007872:	d110      	bne.n	8007896 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d102      	bne.n	8007880 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800787a:	7b3b      	ldrb	r3, [r7, #12]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d001      	beq.n	8007884 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e055      	b.n	8007930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007894:	e01d      	b.n	80078d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d108      	bne.n	80078ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d105      	bne.n	80078ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078a2:	7b7b      	ldrb	r3, [r7, #13]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d102      	bne.n	80078ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078a8:	7b3b      	ldrb	r3, [r7, #12]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d001      	beq.n	80078b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e03e      	b.n	8007930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2202      	movs	r2, #2
 80078b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2202      	movs	r2, #2
 80078be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2202      	movs	r2, #2
 80078c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2202      	movs	r2, #2
 80078ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <HAL_TIM_Encoder_Start+0xc4>
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b04      	cmp	r3, #4
 80078dc:	d008      	beq.n	80078f0 <HAL_TIM_Encoder_Start+0xd4>
 80078de:	e00f      	b.n	8007900 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2201      	movs	r2, #1
 80078e6:	2100      	movs	r1, #0
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 fd7d 	bl	80083e8 <TIM_CCxChannelCmd>
      break;
 80078ee:	e016      	b.n	800791e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2201      	movs	r2, #1
 80078f6:	2104      	movs	r1, #4
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fd75 	bl	80083e8 <TIM_CCxChannelCmd>
      break;
 80078fe:	e00e      	b.n	800791e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2201      	movs	r2, #1
 8007906:	2100      	movs	r1, #0
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fd6d 	bl	80083e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2201      	movs	r2, #1
 8007914:	2104      	movs	r1, #4
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fd66 	bl	80083e8 <TIM_CCxChannelCmd>
      break;
 800791c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f042 0201 	orr.w	r2, r2, #1
 800792c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b02      	cmp	r3, #2
 800794c:	d122      	bne.n	8007994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b02      	cmp	r3, #2
 800795a:	d11b      	bne.n	8007994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f06f 0202 	mvn.w	r2, #2
 8007964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fa70 	bl	8007e60 <HAL_TIM_IC_CaptureCallback>
 8007980:	e005      	b.n	800798e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fa62 	bl	8007e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fa73 	bl	8007e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d122      	bne.n	80079e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b04      	cmp	r3, #4
 80079ae:	d11b      	bne.n	80079e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0204 	mvn.w	r2, #4
 80079b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2202      	movs	r2, #2
 80079be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa46 	bl	8007e60 <HAL_TIM_IC_CaptureCallback>
 80079d4:	e005      	b.n	80079e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fa38 	bl	8007e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fa49 	bl	8007e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f003 0308 	and.w	r3, r3, #8
 80079f2:	2b08      	cmp	r3, #8
 80079f4:	d122      	bne.n	8007a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d11b      	bne.n	8007a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f06f 0208 	mvn.w	r2, #8
 8007a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2204      	movs	r2, #4
 8007a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa1c 	bl	8007e60 <HAL_TIM_IC_CaptureCallback>
 8007a28:	e005      	b.n	8007a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fa0e 	bl	8007e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fa1f 	bl	8007e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b10      	cmp	r3, #16
 8007a48:	d122      	bne.n	8007a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f003 0310 	and.w	r3, r3, #16
 8007a54:	2b10      	cmp	r3, #16
 8007a56:	d11b      	bne.n	8007a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f06f 0210 	mvn.w	r2, #16
 8007a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2208      	movs	r2, #8
 8007a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f9f2 	bl	8007e60 <HAL_TIM_IC_CaptureCallback>
 8007a7c:	e005      	b.n	8007a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f9e4 	bl	8007e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f9f5 	bl	8007e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d10e      	bne.n	8007abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d107      	bne.n	8007abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f06f 0201 	mvn.w	r2, #1
 8007ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7f9 ffaa 	bl	8001a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac6:	2b80      	cmp	r3, #128	; 0x80
 8007ac8:	d10e      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad4:	2b80      	cmp	r3, #128	; 0x80
 8007ad6:	d107      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fd1e 	bl	8008524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af2:	2b40      	cmp	r3, #64	; 0x40
 8007af4:	d10e      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b00:	2b40      	cmp	r3, #64	; 0x40
 8007b02:	d107      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f9ba 	bl	8007e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b20      	cmp	r3, #32
 8007b20:	d10e      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f003 0320 	and.w	r3, r3, #32
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	d107      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0220 	mvn.w	r2, #32
 8007b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fce8 	bl	8008510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d101      	bne.n	8007b62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	e0ac      	b.n	8007cbc <HAL_TIM_PWM_ConfigChannel+0x174>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b0c      	cmp	r3, #12
 8007b6e:	f200 809f 	bhi.w	8007cb0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007bad 	.word	0x08007bad
 8007b7c:	08007cb1 	.word	0x08007cb1
 8007b80:	08007cb1 	.word	0x08007cb1
 8007b84:	08007cb1 	.word	0x08007cb1
 8007b88:	08007bed 	.word	0x08007bed
 8007b8c:	08007cb1 	.word	0x08007cb1
 8007b90:	08007cb1 	.word	0x08007cb1
 8007b94:	08007cb1 	.word	0x08007cb1
 8007b98:	08007c2f 	.word	0x08007c2f
 8007b9c:	08007cb1 	.word	0x08007cb1
 8007ba0:	08007cb1 	.word	0x08007cb1
 8007ba4:	08007cb1 	.word	0x08007cb1
 8007ba8:	08007c6f 	.word	0x08007c6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 f9f2 	bl	8007f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0208 	orr.w	r2, r2, #8
 8007bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699a      	ldr	r2, [r3, #24]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0204 	bic.w	r2, r2, #4
 8007bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6999      	ldr	r1, [r3, #24]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	691a      	ldr	r2, [r3, #16]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	619a      	str	r2, [r3, #24]
      break;
 8007bea:	e062      	b.n	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68b9      	ldr	r1, [r7, #8]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 fa38 	bl	8008068 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699a      	ldr	r2, [r3, #24]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6999      	ldr	r1, [r3, #24]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	021a      	lsls	r2, r3, #8
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	619a      	str	r2, [r3, #24]
      break;
 8007c2c:	e041      	b.n	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68b9      	ldr	r1, [r7, #8]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 fa83 	bl	8008140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69da      	ldr	r2, [r3, #28]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f042 0208 	orr.w	r2, r2, #8
 8007c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69da      	ldr	r2, [r3, #28]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 0204 	bic.w	r2, r2, #4
 8007c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69d9      	ldr	r1, [r3, #28]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	691a      	ldr	r2, [r3, #16]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	61da      	str	r2, [r3, #28]
      break;
 8007c6c:	e021      	b.n	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68b9      	ldr	r1, [r7, #8]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 facd 	bl	8008214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69da      	ldr	r2, [r3, #28]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69da      	ldr	r2, [r3, #28]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69d9      	ldr	r1, [r3, #28]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	021a      	lsls	r2, r3, #8
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	61da      	str	r2, [r3, #28]
      break;
 8007cae:	e000      	b.n	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_TIM_ConfigClockSource+0x18>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e0b3      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x180>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d14:	d03e      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0xd0>
 8007d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d1a:	f200 8087 	bhi.w	8007e2c <HAL_TIM_ConfigClockSource+0x168>
 8007d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d22:	f000 8085 	beq.w	8007e30 <HAL_TIM_ConfigClockSource+0x16c>
 8007d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2a:	d87f      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x168>
 8007d2c:	2b70      	cmp	r3, #112	; 0x70
 8007d2e:	d01a      	beq.n	8007d66 <HAL_TIM_ConfigClockSource+0xa2>
 8007d30:	2b70      	cmp	r3, #112	; 0x70
 8007d32:	d87b      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x168>
 8007d34:	2b60      	cmp	r3, #96	; 0x60
 8007d36:	d050      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x116>
 8007d38:	2b60      	cmp	r3, #96	; 0x60
 8007d3a:	d877      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x168>
 8007d3c:	2b50      	cmp	r3, #80	; 0x50
 8007d3e:	d03c      	beq.n	8007dba <HAL_TIM_ConfigClockSource+0xf6>
 8007d40:	2b50      	cmp	r3, #80	; 0x50
 8007d42:	d873      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x168>
 8007d44:	2b40      	cmp	r3, #64	; 0x40
 8007d46:	d058      	beq.n	8007dfa <HAL_TIM_ConfigClockSource+0x136>
 8007d48:	2b40      	cmp	r3, #64	; 0x40
 8007d4a:	d86f      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x168>
 8007d4c:	2b30      	cmp	r3, #48	; 0x30
 8007d4e:	d064      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x156>
 8007d50:	2b30      	cmp	r3, #48	; 0x30
 8007d52:	d86b      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x168>
 8007d54:	2b20      	cmp	r3, #32
 8007d56:	d060      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x156>
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	d867      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x168>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d05c      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x156>
 8007d60:	2b10      	cmp	r3, #16
 8007d62:	d05a      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007d64:	e062      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	6899      	ldr	r1, [r3, #8]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f000 fb17 	bl	80083a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	609a      	str	r2, [r3, #8]
      break;
 8007d92:	e04e      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	6899      	ldr	r1, [r3, #8]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f000 fb00 	bl	80083a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689a      	ldr	r2, [r3, #8]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007db6:	609a      	str	r2, [r3, #8]
      break;
 8007db8:	e03b      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	6859      	ldr	r1, [r3, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f000 fa74 	bl	80082b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2150      	movs	r1, #80	; 0x50
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 facd 	bl	8008372 <TIM_ITRx_SetConfig>
      break;
 8007dd8:	e02b      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6859      	ldr	r1, [r3, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	461a      	mov	r2, r3
 8007de8:	f000 fa93 	bl	8008312 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2160      	movs	r1, #96	; 0x60
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fabd 	bl	8008372 <TIM_ITRx_SetConfig>
      break;
 8007df8:	e01b      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6818      	ldr	r0, [r3, #0]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	6859      	ldr	r1, [r3, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	461a      	mov	r2, r3
 8007e08:	f000 fa54 	bl	80082b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2140      	movs	r1, #64	; 0x40
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 faad 	bl	8008372 <TIM_ITRx_SetConfig>
      break;
 8007e18:	e00b      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4619      	mov	r1, r3
 8007e24:	4610      	mov	r0, r2
 8007e26:	f000 faa4 	bl	8008372 <TIM_ITRx_SetConfig>
        break;
 8007e2a:	e002      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e2c:	bf00      	nop
 8007e2e:	e000      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a34      	ldr	r2, [pc, #208]	; (8007f80 <TIM_Base_SetConfig+0xe4>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d00f      	beq.n	8007ed4 <TIM_Base_SetConfig+0x38>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eba:	d00b      	beq.n	8007ed4 <TIM_Base_SetConfig+0x38>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a31      	ldr	r2, [pc, #196]	; (8007f84 <TIM_Base_SetConfig+0xe8>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d007      	beq.n	8007ed4 <TIM_Base_SetConfig+0x38>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a30      	ldr	r2, [pc, #192]	; (8007f88 <TIM_Base_SetConfig+0xec>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d003      	beq.n	8007ed4 <TIM_Base_SetConfig+0x38>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a2f      	ldr	r2, [pc, #188]	; (8007f8c <TIM_Base_SetConfig+0xf0>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d108      	bne.n	8007ee6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a25      	ldr	r2, [pc, #148]	; (8007f80 <TIM_Base_SetConfig+0xe4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d01b      	beq.n	8007f26 <TIM_Base_SetConfig+0x8a>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef4:	d017      	beq.n	8007f26 <TIM_Base_SetConfig+0x8a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a22      	ldr	r2, [pc, #136]	; (8007f84 <TIM_Base_SetConfig+0xe8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <TIM_Base_SetConfig+0x8a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a21      	ldr	r2, [pc, #132]	; (8007f88 <TIM_Base_SetConfig+0xec>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00f      	beq.n	8007f26 <TIM_Base_SetConfig+0x8a>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a20      	ldr	r2, [pc, #128]	; (8007f8c <TIM_Base_SetConfig+0xf0>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d00b      	beq.n	8007f26 <TIM_Base_SetConfig+0x8a>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a1f      	ldr	r2, [pc, #124]	; (8007f90 <TIM_Base_SetConfig+0xf4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d007      	beq.n	8007f26 <TIM_Base_SetConfig+0x8a>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a1e      	ldr	r2, [pc, #120]	; (8007f94 <TIM_Base_SetConfig+0xf8>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d003      	beq.n	8007f26 <TIM_Base_SetConfig+0x8a>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a1d      	ldr	r2, [pc, #116]	; (8007f98 <TIM_Base_SetConfig+0xfc>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d108      	bne.n	8007f38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a08      	ldr	r2, [pc, #32]	; (8007f80 <TIM_Base_SetConfig+0xe4>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d103      	bne.n	8007f6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	615a      	str	r2, [r3, #20]
}
 8007f72:	bf00      	nop
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	40010000 	.word	0x40010000
 8007f84:	40000400 	.word	0x40000400
 8007f88:	40000800 	.word	0x40000800
 8007f8c:	40000c00 	.word	0x40000c00
 8007f90:	40014000 	.word	0x40014000
 8007f94:	40014400 	.word	0x40014400
 8007f98:	40014800 	.word	0x40014800

08007f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	f023 0201 	bic.w	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f023 0303 	bic.w	r3, r3, #3
 8007fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f023 0302 	bic.w	r3, r3, #2
 8007fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a1c      	ldr	r2, [pc, #112]	; (8008064 <TIM_OC1_SetConfig+0xc8>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d10c      	bne.n	8008012 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f023 0308 	bic.w	r3, r3, #8
 8007ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	4313      	orrs	r3, r2
 8008008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f023 0304 	bic.w	r3, r3, #4
 8008010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a13      	ldr	r2, [pc, #76]	; (8008064 <TIM_OC1_SetConfig+0xc8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d111      	bne.n	800803e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	4313      	orrs	r3, r2
 8008032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	4313      	orrs	r3, r2
 800803c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	621a      	str	r2, [r3, #32]
}
 8008058:	bf00      	nop
 800805a:	371c      	adds	r7, #28
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	40010000 	.word	0x40010000

08008068 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	f023 0210 	bic.w	r2, r3, #16
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800809e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f023 0320 	bic.w	r3, r3, #32
 80080b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a1e      	ldr	r2, [pc, #120]	; (800813c <TIM_OC2_SetConfig+0xd4>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d10d      	bne.n	80080e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	011b      	lsls	r3, r3, #4
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a15      	ldr	r2, [pc, #84]	; (800813c <TIM_OC2_SetConfig+0xd4>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d113      	bne.n	8008114 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	4313      	orrs	r3, r2
 8008112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	621a      	str	r2, [r3, #32]
}
 800812e:	bf00      	nop
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	40010000 	.word	0x40010000

08008140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 0303 	bic.w	r3, r3, #3
 8008176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	4313      	orrs	r3, r2
 8008194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a1d      	ldr	r2, [pc, #116]	; (8008210 <TIM_OC3_SetConfig+0xd0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d10d      	bne.n	80081ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	021b      	lsls	r3, r3, #8
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a14      	ldr	r2, [pc, #80]	; (8008210 <TIM_OC3_SetConfig+0xd0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d113      	bne.n	80081ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	011b      	lsls	r3, r3, #4
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	4313      	orrs	r3, r2
 80081dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	621a      	str	r2, [r3, #32]
}
 8008204:	bf00      	nop
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	40010000 	.word	0x40010000

08008214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008214:	b480      	push	{r7}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800824a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	021b      	lsls	r3, r3, #8
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	4313      	orrs	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800825e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	031b      	lsls	r3, r3, #12
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	4313      	orrs	r3, r2
 800826a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a10      	ldr	r2, [pc, #64]	; (80082b0 <TIM_OC4_SetConfig+0x9c>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d109      	bne.n	8008288 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800827a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	695b      	ldr	r3, [r3, #20]
 8008280:	019b      	lsls	r3, r3, #6
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	621a      	str	r2, [r3, #32]
}
 80082a2:	bf00      	nop
 80082a4:	371c      	adds	r7, #28
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	40010000 	.word	0x40010000

080082b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	f023 0201 	bic.w	r2, r3, #1
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	011b      	lsls	r3, r3, #4
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f023 030a 	bic.w	r3, r3, #10
 80082f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	621a      	str	r2, [r3, #32]
}
 8008306:	bf00      	nop
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008312:	b480      	push	{r7}
 8008314:	b087      	sub	sp, #28
 8008316:	af00      	add	r7, sp, #0
 8008318:	60f8      	str	r0, [r7, #12]
 800831a:	60b9      	str	r1, [r7, #8]
 800831c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	f023 0210 	bic.w	r2, r3, #16
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800833c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	031b      	lsls	r3, r3, #12
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	4313      	orrs	r3, r2
 8008346:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800834e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	4313      	orrs	r3, r2
 8008358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	621a      	str	r2, [r3, #32]
}
 8008366:	bf00      	nop
 8008368:	371c      	adds	r7, #28
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008372:	b480      	push	{r7}
 8008374:	b085      	sub	sp, #20
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4313      	orrs	r3, r2
 8008390:	f043 0307 	orr.w	r3, r3, #7
 8008394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	609a      	str	r2, [r3, #8]
}
 800839c:	bf00      	nop
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	021a      	lsls	r2, r3, #8
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	609a      	str	r2, [r3, #8]
}
 80083dc:	bf00      	nop
 80083de:	371c      	adds	r7, #28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b087      	sub	sp, #28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f003 031f 	and.w	r3, r3, #31
 80083fa:	2201      	movs	r2, #1
 80083fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6a1a      	ldr	r2, [r3, #32]
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	43db      	mvns	r3, r3
 800840a:	401a      	ands	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a1a      	ldr	r2, [r3, #32]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	f003 031f 	and.w	r3, r3, #31
 800841a:	6879      	ldr	r1, [r7, #4]
 800841c:	fa01 f303 	lsl.w	r3, r1, r3
 8008420:	431a      	orrs	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	621a      	str	r2, [r3, #32]
}
 8008426:	bf00      	nop
 8008428:	371c      	adds	r7, #28
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
	...

08008434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008444:	2b01      	cmp	r3, #1
 8008446:	d101      	bne.n	800844c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008448:	2302      	movs	r3, #2
 800844a:	e050      	b.n	80084ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2202      	movs	r2, #2
 8008458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	4313      	orrs	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a1c      	ldr	r2, [pc, #112]	; (80084fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d018      	beq.n	80084c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008498:	d013      	beq.n	80084c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a18      	ldr	r2, [pc, #96]	; (8008500 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d00e      	beq.n	80084c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a16      	ldr	r2, [pc, #88]	; (8008504 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d009      	beq.n	80084c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a15      	ldr	r2, [pc, #84]	; (8008508 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d004      	beq.n	80084c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a13      	ldr	r2, [pc, #76]	; (800850c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d10c      	bne.n	80084dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	40010000 	.word	0x40010000
 8008500:	40000400 	.word	0x40000400
 8008504:	40000800 	.word	0x40000800
 8008508:	40000c00 	.word	0x40000c00
 800850c:	40014000 	.word	0x40014000

08008510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e03f      	b.n	80085ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7fb fa8c 	bl	8003a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2224      	movs	r2, #36	; 0x24
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800857a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fd51 	bl	8009024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	691a      	ldr	r2, [r3, #16]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	695a      	ldr	r2, [r3, #20]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68da      	ldr	r2, [r3, #12]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2220      	movs	r2, #32
 80085c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4613      	mov	r3, r2
 80085e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b20      	cmp	r3, #32
 80085ec:	d153      	bne.n	8008696 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <HAL_UART_Transmit_DMA+0x26>
 80085f4:	88fb      	ldrh	r3, [r7, #6]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e04c      	b.n	8008698 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008604:	2b01      	cmp	r3, #1
 8008606:	d101      	bne.n	800860c <HAL_UART_Transmit_DMA+0x38>
 8008608:	2302      	movs	r3, #2
 800860a:	e045      	b.n	8008698 <HAL_UART_Transmit_DMA+0xc4>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	88fa      	ldrh	r2, [r7, #6]
 800861e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	88fa      	ldrh	r2, [r7, #6]
 8008624:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2221      	movs	r2, #33	; 0x21
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008638:	4a19      	ldr	r2, [pc, #100]	; (80086a0 <HAL_UART_Transmit_DMA+0xcc>)
 800863a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008640:	4a18      	ldr	r2, [pc, #96]	; (80086a4 <HAL_UART_Transmit_DMA+0xd0>)
 8008642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008648:	4a17      	ldr	r2, [pc, #92]	; (80086a8 <HAL_UART_Transmit_DMA+0xd4>)
 800864a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008650:	2200      	movs	r2, #0
 8008652:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008654:	f107 0308 	add.w	r3, r7, #8
 8008658:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	6819      	ldr	r1, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3304      	adds	r3, #4
 8008668:	461a      	mov	r2, r3
 800866a:	88fb      	ldrh	r3, [r7, #6]
 800866c:	f7fb fdd6 	bl	800421c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008678:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	695a      	ldr	r2, [r3, #20]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008690:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	e000      	b.n	8008698 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008696:	2302      	movs	r3, #2
  }
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	08008ae1 	.word	0x08008ae1
 80086a4:	08008b33 	.word	0x08008b33
 80086a8:	08008c1b 	.word	0x08008c1b

080086ac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	4613      	mov	r3, r2
 80086b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b20      	cmp	r3, #32
 80086c4:	d11d      	bne.n	8008702 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <HAL_UART_Receive_DMA+0x26>
 80086cc:	88fb      	ldrh	r3, [r7, #6]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e016      	b.n	8008704 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d101      	bne.n	80086e4 <HAL_UART_Receive_DMA+0x38>
 80086e0:	2302      	movs	r3, #2
 80086e2:	e00f      	b.n	8008704 <HAL_UART_Receive_DMA+0x58>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80086f2:	88fb      	ldrh	r3, [r7, #6]
 80086f4:	461a      	mov	r2, r3
 80086f6:	68b9      	ldr	r1, [r7, #8]
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 fad9 	bl	8008cb0 <UART_Start_Receive_DMA>
 80086fe:	4603      	mov	r3, r0
 8008700:	e000      	b.n	8008704 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008702:	2302      	movs	r3, #2
  }
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800872c:	2300      	movs	r3, #0
 800872e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008730:	2300      	movs	r3, #0
 8008732:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	f003 030f 	and.w	r3, r3, #15
 800873a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10d      	bne.n	800875e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d008      	beq.n	800875e <HAL_UART_IRQHandler+0x52>
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	f003 0320 	and.w	r3, r3, #32
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fbcd 	bl	8008ef6 <UART_Receive_IT>
      return;
 800875c:	e17c      	b.n	8008a58 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 80b1 	beq.w	80088c8 <HAL_UART_IRQHandler+0x1bc>
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d105      	bne.n	800877c <HAL_UART_IRQHandler+0x70>
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 80a6 	beq.w	80088c8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <HAL_UART_IRQHandler+0x90>
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008794:	f043 0201 	orr.w	r2, r3, #1
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	f003 0304 	and.w	r3, r3, #4
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <HAL_UART_IRQHandler+0xb0>
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d005      	beq.n	80087bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b4:	f043 0202 	orr.w	r2, r3, #2
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <HAL_UART_IRQHandler+0xd0>
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d4:	f043 0204 	orr.w	r2, r3, #4
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	f003 0308 	and.w	r3, r3, #8
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00f      	beq.n	8008806 <HAL_UART_IRQHandler+0xfa>
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d104      	bne.n	80087fa <HAL_UART_IRQHandler+0xee>
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	f043 0208 	orr.w	r2, r3, #8
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 811f 	beq.w	8008a4e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	f003 0320 	and.w	r3, r3, #32
 8008816:	2b00      	cmp	r3, #0
 8008818:	d007      	beq.n	800882a <HAL_UART_IRQHandler+0x11e>
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	f003 0320 	and.w	r3, r3, #32
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fb66 	bl	8008ef6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008834:	2b40      	cmp	r3, #64	; 0x40
 8008836:	bf0c      	ite	eq
 8008838:	2301      	moveq	r3, #1
 800883a:	2300      	movne	r3, #0
 800883c:	b2db      	uxtb	r3, r3
 800883e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008844:	f003 0308 	and.w	r3, r3, #8
 8008848:	2b00      	cmp	r3, #0
 800884a:	d102      	bne.n	8008852 <HAL_UART_IRQHandler+0x146>
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d031      	beq.n	80088b6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 faa6 	bl	8008da4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008862:	2b40      	cmp	r3, #64	; 0x40
 8008864:	d123      	bne.n	80088ae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	695a      	ldr	r2, [r3, #20]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008874:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887a:	2b00      	cmp	r3, #0
 800887c:	d013      	beq.n	80088a6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008882:	4a77      	ldr	r2, [pc, #476]	; (8008a60 <HAL_UART_IRQHandler+0x354>)
 8008884:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888a:	4618      	mov	r0, r3
 800888c:	f7fb fd8e 	bl	80043ac <HAL_DMA_Abort_IT>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d016      	beq.n	80088c4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088a0:	4610      	mov	r0, r2
 80088a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a4:	e00e      	b.n	80088c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f904 	bl	8008ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ac:	e00a      	b.n	80088c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f900 	bl	8008ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088b4:	e006      	b.n	80088c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f8fc 	bl	8008ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80088c2:	e0c4      	b.n	8008a4e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c4:	bf00      	nop
    return;
 80088c6:	e0c2      	b.n	8008a4e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	f040 80a2 	bne.w	8008a16 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 809c 	beq.w	8008a16 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	f003 0310 	and.w	r3, r3, #16
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 8096 	beq.w	8008a16 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088ea:	2300      	movs	r3, #0
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	60fb      	str	r3, [r7, #12]
 80088fe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890a:	2b40      	cmp	r3, #64	; 0x40
 800890c:	d14f      	bne.n	80089ae <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008918:	8a3b      	ldrh	r3, [r7, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 8099 	beq.w	8008a52 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008924:	8a3a      	ldrh	r2, [r7, #16]
 8008926:	429a      	cmp	r2, r3
 8008928:	f080 8093 	bcs.w	8008a52 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	8a3a      	ldrh	r2, [r7, #16]
 8008930:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800893c:	d02b      	beq.n	8008996 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800894c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	695a      	ldr	r2, [r3, #20]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 0201 	bic.w	r2, r2, #1
 800895c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	695a      	ldr	r2, [r3, #20]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800896c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2220      	movs	r2, #32
 8008972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0210 	bic.w	r2, r2, #16
 800898a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	4618      	mov	r0, r3
 8008992:	f7fb fc9b 	bl	80042cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800899e:	b29b      	uxth	r3, r3
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f88e 	bl	8008ac8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80089ac:	e051      	b.n	8008a52 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d047      	beq.n	8008a56 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80089c6:	8a7b      	ldrh	r3, [r7, #18]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d044      	beq.n	8008a56 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089da:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	695a      	ldr	r2, [r3, #20]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 0201 	bic.w	r2, r2, #1
 80089ea:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2220      	movs	r2, #32
 80089f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0210 	bic.w	r2, r2, #16
 8008a08:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a0a:	8a7b      	ldrh	r3, [r7, #18]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f85a 	bl	8008ac8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008a14:	e01f      	b.n	8008a56 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d008      	beq.n	8008a32 <HAL_UART_IRQHandler+0x326>
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f9fb 	bl	8008e26 <UART_Transmit_IT>
    return;
 8008a30:	e012      	b.n	8008a58 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00d      	beq.n	8008a58 <HAL_UART_IRQHandler+0x34c>
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d008      	beq.n	8008a58 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa3d 	bl	8008ec6 <UART_EndTransmit_IT>
    return;
 8008a4c:	e004      	b.n	8008a58 <HAL_UART_IRQHandler+0x34c>
    return;
 8008a4e:	bf00      	nop
 8008a50:	e002      	b.n	8008a58 <HAL_UART_IRQHandler+0x34c>
      return;
 8008a52:	bf00      	nop
 8008a54:	e000      	b.n	8008a58 <HAL_UART_IRQHandler+0x34c>
      return;
 8008a56:	bf00      	nop
  }
}
 8008a58:	3728      	adds	r7, #40	; 0x28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	08008dff 	.word	0x08008dff

08008a64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aec:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d113      	bne.n	8008b24 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	695a      	ldr	r2, [r3, #20]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b10:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b20:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b22:	e002      	b.n	8008b2a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7ff ff9d 	bl	8008a64 <HAL_UART_TxCpltCallback>
}
 8008b2a:	bf00      	nop
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f7ff ff99 	bl	8008a78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b46:	bf00      	nop
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d12a      	bne.n	8008bc0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b7e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	695a      	ldr	r2, [r3, #20]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f022 0201 	bic.w	r2, r2, #1
 8008b8e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	695a      	ldr	r2, [r3, #20]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b9e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d107      	bne.n	8008bc0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68da      	ldr	r2, [r3, #12]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 0210 	bic.w	r2, r2, #16
 8008bbe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d106      	bne.n	8008bd6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bcc:	4619      	mov	r1, r3
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f7ff ff7a 	bl	8008ac8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bd4:	e002      	b.n	8008bdc <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f7ff ff58 	bl	8008a8c <HAL_UART_RxCpltCallback>
}
 8008bdc:	bf00      	nop
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d108      	bne.n	8008c0c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bfe:	085b      	lsrs	r3, r3, #1
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	4619      	mov	r1, r3
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f7ff ff5f 	bl	8008ac8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c0a:	e002      	b.n	8008c12 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f7ff ff47 	bl	8008aa0 <HAL_UART_RxHalfCpltCallback>
}
 8008c12:	bf00      	nop
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c36:	2b80      	cmp	r3, #128	; 0x80
 8008c38:	bf0c      	ite	eq
 8008c3a:	2301      	moveq	r3, #1
 8008c3c:	2300      	movne	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b21      	cmp	r3, #33	; 0x21
 8008c4c:	d108      	bne.n	8008c60 <UART_DMAError+0x46>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d005      	beq.n	8008c60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2200      	movs	r2, #0
 8008c58:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008c5a:	68b8      	ldr	r0, [r7, #8]
 8008c5c:	f000 f88c 	bl	8008d78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6a:	2b40      	cmp	r3, #64	; 0x40
 8008c6c:	bf0c      	ite	eq
 8008c6e:	2301      	moveq	r3, #1
 8008c70:	2300      	movne	r3, #0
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b22      	cmp	r3, #34	; 0x22
 8008c80:	d108      	bne.n	8008c94 <UART_DMAError+0x7a>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d005      	beq.n	8008c94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008c8e:	68b8      	ldr	r0, [r7, #8]
 8008c90:	f000 f888 	bl	8008da4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c98:	f043 0210 	orr.w	r2, r3, #16
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ca0:	68b8      	ldr	r0, [r7, #8]
 8008ca2:	f7ff ff07 	bl	8008ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ca6:	bf00      	nop
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
	...

08008cb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	88fa      	ldrh	r2, [r7, #6]
 8008cc8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2222      	movs	r2, #34	; 0x22
 8008cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	4a23      	ldr	r2, [pc, #140]	; (8008d6c <UART_Start_Receive_DMA+0xbc>)
 8008cde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce4:	4a22      	ldr	r2, [pc, #136]	; (8008d70 <UART_Start_Receive_DMA+0xc0>)
 8008ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cec:	4a21      	ldr	r2, [pc, #132]	; (8008d74 <UART_Start_Receive_DMA+0xc4>)
 8008cee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008cf8:	f107 0308 	add.w	r3, r7, #8
 8008cfc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3304      	adds	r3, #4
 8008d08:	4619      	mov	r1, r3
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	88fb      	ldrh	r3, [r7, #6]
 8008d10:	f7fb fa84 	bl	800421c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008d14:	2300      	movs	r3, #0
 8008d16:	613b      	str	r3, [r7, #16]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	613b      	str	r3, [r7, #16]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	613b      	str	r3, [r7, #16]
 8008d28:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68da      	ldr	r2, [r3, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d40:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	695a      	ldr	r2, [r3, #20]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f042 0201 	orr.w	r2, r2, #1
 8008d50:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	695a      	ldr	r2, [r3, #20]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d60:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3718      	adds	r7, #24
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	08008b4f 	.word	0x08008b4f
 8008d70:	08008be5 	.word	0x08008be5
 8008d74:	08008c1b 	.word	0x08008c1b

08008d78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68da      	ldr	r2, [r3, #12]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008d8e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68da      	ldr	r2, [r3, #12]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008dba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	695a      	ldr	r2, [r3, #20]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f022 0201 	bic.w	r2, r2, #1
 8008dca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d107      	bne.n	8008de4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68da      	ldr	r2, [r3, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 0210 	bic.w	r2, r2, #16
 8008de2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2220      	movs	r2, #32
 8008de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008df2:	bf00      	nop
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7ff fe4b 	bl	8008ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e1e:	bf00      	nop
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b085      	sub	sp, #20
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b21      	cmp	r3, #33	; 0x21
 8008e38:	d13e      	bne.n	8008eb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e42:	d114      	bne.n	8008e6e <UART_Transmit_IT+0x48>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d110      	bne.n	8008e6e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a1b      	ldr	r3, [r3, #32]
 8008e50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	1c9a      	adds	r2, r3, #2
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	621a      	str	r2, [r3, #32]
 8008e6c:	e008      	b.n	8008e80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a1b      	ldr	r3, [r3, #32]
 8008e72:	1c59      	adds	r1, r3, #1
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	6211      	str	r1, [r2, #32]
 8008e78:	781a      	ldrb	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	3b01      	subs	r3, #1
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10f      	bne.n	8008eb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68da      	ldr	r2, [r3, #12]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ea2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68da      	ldr	r2, [r3, #12]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e000      	b.n	8008eba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008eb8:	2302      	movs	r3, #2
  }
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008edc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7ff fdbc 	bl	8008a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b22      	cmp	r3, #34	; 0x22
 8008f08:	f040 8087 	bne.w	800901a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f14:	d117      	bne.n	8008f46 <UART_Receive_IT+0x50>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d113      	bne.n	8008f46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f26:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3e:	1c9a      	adds	r2, r3, #2
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	629a      	str	r2, [r3, #40]	; 0x28
 8008f44:	e026      	b.n	8008f94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f58:	d007      	beq.n	8008f6a <UART_Receive_IT+0x74>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10a      	bne.n	8008f78 <UART_Receive_IT+0x82>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d106      	bne.n	8008f78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	701a      	strb	r2, [r3, #0]
 8008f76:	e008      	b.n	8008f8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	1c5a      	adds	r2, r3, #1
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d136      	bne.n	8009016 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68da      	ldr	r2, [r3, #12]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f022 0220 	bic.w	r2, r2, #32
 8008fb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68da      	ldr	r2, [r3, #12]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	695a      	ldr	r2, [r3, #20]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 0201 	bic.w	r2, r2, #1
 8008fd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d10e      	bne.n	8009006 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68da      	ldr	r2, [r3, #12]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f022 0210 	bic.w	r2, r2, #16
 8008ff6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff fd62 	bl	8008ac8 <HAL_UARTEx_RxEventCallback>
 8009004:	e002      	b.n	800900c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7ff fd40 	bl	8008a8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	e002      	b.n	800901c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	e000      	b.n	800901c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800901a:	2302      	movs	r3, #2
  }
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009028:	b09f      	sub	sp, #124	; 0x7c
 800902a:	af00      	add	r7, sp, #0
 800902c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800902e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800903a:	68d9      	ldr	r1, [r3, #12]
 800903c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	ea40 0301 	orr.w	r3, r0, r1
 8009044:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009048:	689a      	ldr	r2, [r3, #8]
 800904a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	431a      	orrs	r2, r3
 8009050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	431a      	orrs	r2, r3
 8009056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	4313      	orrs	r3, r2
 800905c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800905e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009068:	f021 010c 	bic.w	r1, r1, #12
 800906c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009072:	430b      	orrs	r3, r1
 8009074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009082:	6999      	ldr	r1, [r3, #24]
 8009084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	ea40 0301 	orr.w	r3, r0, r1
 800908c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800908e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	4bc5      	ldr	r3, [pc, #788]	; (80093a8 <UART_SetConfig+0x384>)
 8009094:	429a      	cmp	r2, r3
 8009096:	d004      	beq.n	80090a2 <UART_SetConfig+0x7e>
 8009098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	4bc3      	ldr	r3, [pc, #780]	; (80093ac <UART_SetConfig+0x388>)
 800909e:	429a      	cmp	r2, r3
 80090a0:	d103      	bne.n	80090aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090a2:	f7fe f8eb 	bl	800727c <HAL_RCC_GetPCLK2Freq>
 80090a6:	6778      	str	r0, [r7, #116]	; 0x74
 80090a8:	e002      	b.n	80090b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090aa:	f7fe f8d3 	bl	8007254 <HAL_RCC_GetPCLK1Freq>
 80090ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090b8:	f040 80b6 	bne.w	8009228 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090be:	461c      	mov	r4, r3
 80090c0:	f04f 0500 	mov.w	r5, #0
 80090c4:	4622      	mov	r2, r4
 80090c6:	462b      	mov	r3, r5
 80090c8:	1891      	adds	r1, r2, r2
 80090ca:	6439      	str	r1, [r7, #64]	; 0x40
 80090cc:	415b      	adcs	r3, r3
 80090ce:	647b      	str	r3, [r7, #68]	; 0x44
 80090d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80090d4:	1912      	adds	r2, r2, r4
 80090d6:	eb45 0303 	adc.w	r3, r5, r3
 80090da:	f04f 0000 	mov.w	r0, #0
 80090de:	f04f 0100 	mov.w	r1, #0
 80090e2:	00d9      	lsls	r1, r3, #3
 80090e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090e8:	00d0      	lsls	r0, r2, #3
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	1911      	adds	r1, r2, r4
 80090f0:	6639      	str	r1, [r7, #96]	; 0x60
 80090f2:	416b      	adcs	r3, r5
 80090f4:	667b      	str	r3, [r7, #100]	; 0x64
 80090f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f04f 0300 	mov.w	r3, #0
 8009100:	1891      	adds	r1, r2, r2
 8009102:	63b9      	str	r1, [r7, #56]	; 0x38
 8009104:	415b      	adcs	r3, r3
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009108:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800910c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009110:	f7f7 fe4c 	bl	8000dac <__aeabi_uldivmod>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4ba5      	ldr	r3, [pc, #660]	; (80093b0 <UART_SetConfig+0x38c>)
 800911a:	fba3 2302 	umull	r2, r3, r3, r2
 800911e:	095b      	lsrs	r3, r3, #5
 8009120:	011e      	lsls	r6, r3, #4
 8009122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009124:	461c      	mov	r4, r3
 8009126:	f04f 0500 	mov.w	r5, #0
 800912a:	4622      	mov	r2, r4
 800912c:	462b      	mov	r3, r5
 800912e:	1891      	adds	r1, r2, r2
 8009130:	6339      	str	r1, [r7, #48]	; 0x30
 8009132:	415b      	adcs	r3, r3
 8009134:	637b      	str	r3, [r7, #52]	; 0x34
 8009136:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800913a:	1912      	adds	r2, r2, r4
 800913c:	eb45 0303 	adc.w	r3, r5, r3
 8009140:	f04f 0000 	mov.w	r0, #0
 8009144:	f04f 0100 	mov.w	r1, #0
 8009148:	00d9      	lsls	r1, r3, #3
 800914a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800914e:	00d0      	lsls	r0, r2, #3
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	1911      	adds	r1, r2, r4
 8009156:	65b9      	str	r1, [r7, #88]	; 0x58
 8009158:	416b      	adcs	r3, r5
 800915a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800915c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	461a      	mov	r2, r3
 8009162:	f04f 0300 	mov.w	r3, #0
 8009166:	1891      	adds	r1, r2, r2
 8009168:	62b9      	str	r1, [r7, #40]	; 0x28
 800916a:	415b      	adcs	r3, r3
 800916c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800916e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009172:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009176:	f7f7 fe19 	bl	8000dac <__aeabi_uldivmod>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4b8c      	ldr	r3, [pc, #560]	; (80093b0 <UART_SetConfig+0x38c>)
 8009180:	fba3 1302 	umull	r1, r3, r3, r2
 8009184:	095b      	lsrs	r3, r3, #5
 8009186:	2164      	movs	r1, #100	; 0x64
 8009188:	fb01 f303 	mul.w	r3, r1, r3
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	3332      	adds	r3, #50	; 0x32
 8009192:	4a87      	ldr	r2, [pc, #540]	; (80093b0 <UART_SetConfig+0x38c>)
 8009194:	fba2 2303 	umull	r2, r3, r2, r3
 8009198:	095b      	lsrs	r3, r3, #5
 800919a:	005b      	lsls	r3, r3, #1
 800919c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80091a0:	441e      	add	r6, r3
 80091a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091a4:	4618      	mov	r0, r3
 80091a6:	f04f 0100 	mov.w	r1, #0
 80091aa:	4602      	mov	r2, r0
 80091ac:	460b      	mov	r3, r1
 80091ae:	1894      	adds	r4, r2, r2
 80091b0:	623c      	str	r4, [r7, #32]
 80091b2:	415b      	adcs	r3, r3
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
 80091b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80091ba:	1812      	adds	r2, r2, r0
 80091bc:	eb41 0303 	adc.w	r3, r1, r3
 80091c0:	f04f 0400 	mov.w	r4, #0
 80091c4:	f04f 0500 	mov.w	r5, #0
 80091c8:	00dd      	lsls	r5, r3, #3
 80091ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80091ce:	00d4      	lsls	r4, r2, #3
 80091d0:	4622      	mov	r2, r4
 80091d2:	462b      	mov	r3, r5
 80091d4:	1814      	adds	r4, r2, r0
 80091d6:	653c      	str	r4, [r7, #80]	; 0x50
 80091d8:	414b      	adcs	r3, r1
 80091da:	657b      	str	r3, [r7, #84]	; 0x54
 80091dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	461a      	mov	r2, r3
 80091e2:	f04f 0300 	mov.w	r3, #0
 80091e6:	1891      	adds	r1, r2, r2
 80091e8:	61b9      	str	r1, [r7, #24]
 80091ea:	415b      	adcs	r3, r3
 80091ec:	61fb      	str	r3, [r7, #28]
 80091ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80091f6:	f7f7 fdd9 	bl	8000dac <__aeabi_uldivmod>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4b6c      	ldr	r3, [pc, #432]	; (80093b0 <UART_SetConfig+0x38c>)
 8009200:	fba3 1302 	umull	r1, r3, r3, r2
 8009204:	095b      	lsrs	r3, r3, #5
 8009206:	2164      	movs	r1, #100	; 0x64
 8009208:	fb01 f303 	mul.w	r3, r1, r3
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	00db      	lsls	r3, r3, #3
 8009210:	3332      	adds	r3, #50	; 0x32
 8009212:	4a67      	ldr	r2, [pc, #412]	; (80093b0 <UART_SetConfig+0x38c>)
 8009214:	fba2 2303 	umull	r2, r3, r2, r3
 8009218:	095b      	lsrs	r3, r3, #5
 800921a:	f003 0207 	and.w	r2, r3, #7
 800921e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4432      	add	r2, r6
 8009224:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009226:	e0b9      	b.n	800939c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800922a:	461c      	mov	r4, r3
 800922c:	f04f 0500 	mov.w	r5, #0
 8009230:	4622      	mov	r2, r4
 8009232:	462b      	mov	r3, r5
 8009234:	1891      	adds	r1, r2, r2
 8009236:	6139      	str	r1, [r7, #16]
 8009238:	415b      	adcs	r3, r3
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009240:	1912      	adds	r2, r2, r4
 8009242:	eb45 0303 	adc.w	r3, r5, r3
 8009246:	f04f 0000 	mov.w	r0, #0
 800924a:	f04f 0100 	mov.w	r1, #0
 800924e:	00d9      	lsls	r1, r3, #3
 8009250:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009254:	00d0      	lsls	r0, r2, #3
 8009256:	4602      	mov	r2, r0
 8009258:	460b      	mov	r3, r1
 800925a:	eb12 0804 	adds.w	r8, r2, r4
 800925e:	eb43 0905 	adc.w	r9, r3, r5
 8009262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	4618      	mov	r0, r3
 8009268:	f04f 0100 	mov.w	r1, #0
 800926c:	f04f 0200 	mov.w	r2, #0
 8009270:	f04f 0300 	mov.w	r3, #0
 8009274:	008b      	lsls	r3, r1, #2
 8009276:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800927a:	0082      	lsls	r2, r0, #2
 800927c:	4640      	mov	r0, r8
 800927e:	4649      	mov	r1, r9
 8009280:	f7f7 fd94 	bl	8000dac <__aeabi_uldivmod>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4b49      	ldr	r3, [pc, #292]	; (80093b0 <UART_SetConfig+0x38c>)
 800928a:	fba3 2302 	umull	r2, r3, r3, r2
 800928e:	095b      	lsrs	r3, r3, #5
 8009290:	011e      	lsls	r6, r3, #4
 8009292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009294:	4618      	mov	r0, r3
 8009296:	f04f 0100 	mov.w	r1, #0
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	1894      	adds	r4, r2, r2
 80092a0:	60bc      	str	r4, [r7, #8]
 80092a2:	415b      	adcs	r3, r3
 80092a4:	60fb      	str	r3, [r7, #12]
 80092a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092aa:	1812      	adds	r2, r2, r0
 80092ac:	eb41 0303 	adc.w	r3, r1, r3
 80092b0:	f04f 0400 	mov.w	r4, #0
 80092b4:	f04f 0500 	mov.w	r5, #0
 80092b8:	00dd      	lsls	r5, r3, #3
 80092ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80092be:	00d4      	lsls	r4, r2, #3
 80092c0:	4622      	mov	r2, r4
 80092c2:	462b      	mov	r3, r5
 80092c4:	1814      	adds	r4, r2, r0
 80092c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80092c8:	414b      	adcs	r3, r1
 80092ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f04f 0100 	mov.w	r1, #0
 80092d6:	f04f 0200 	mov.w	r2, #0
 80092da:	f04f 0300 	mov.w	r3, #0
 80092de:	008b      	lsls	r3, r1, #2
 80092e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80092e4:	0082      	lsls	r2, r0, #2
 80092e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80092ea:	f7f7 fd5f 	bl	8000dac <__aeabi_uldivmod>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4b2f      	ldr	r3, [pc, #188]	; (80093b0 <UART_SetConfig+0x38c>)
 80092f4:	fba3 1302 	umull	r1, r3, r3, r2
 80092f8:	095b      	lsrs	r3, r3, #5
 80092fa:	2164      	movs	r1, #100	; 0x64
 80092fc:	fb01 f303 	mul.w	r3, r1, r3
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	011b      	lsls	r3, r3, #4
 8009304:	3332      	adds	r3, #50	; 0x32
 8009306:	4a2a      	ldr	r2, [pc, #168]	; (80093b0 <UART_SetConfig+0x38c>)
 8009308:	fba2 2303 	umull	r2, r3, r2, r3
 800930c:	095b      	lsrs	r3, r3, #5
 800930e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009312:	441e      	add	r6, r3
 8009314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009316:	4618      	mov	r0, r3
 8009318:	f04f 0100 	mov.w	r1, #0
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	1894      	adds	r4, r2, r2
 8009322:	603c      	str	r4, [r7, #0]
 8009324:	415b      	adcs	r3, r3
 8009326:	607b      	str	r3, [r7, #4]
 8009328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800932c:	1812      	adds	r2, r2, r0
 800932e:	eb41 0303 	adc.w	r3, r1, r3
 8009332:	f04f 0400 	mov.w	r4, #0
 8009336:	f04f 0500 	mov.w	r5, #0
 800933a:	00dd      	lsls	r5, r3, #3
 800933c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009340:	00d4      	lsls	r4, r2, #3
 8009342:	4622      	mov	r2, r4
 8009344:	462b      	mov	r3, r5
 8009346:	eb12 0a00 	adds.w	sl, r2, r0
 800934a:	eb43 0b01 	adc.w	fp, r3, r1
 800934e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	4618      	mov	r0, r3
 8009354:	f04f 0100 	mov.w	r1, #0
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	f04f 0300 	mov.w	r3, #0
 8009360:	008b      	lsls	r3, r1, #2
 8009362:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009366:	0082      	lsls	r2, r0, #2
 8009368:	4650      	mov	r0, sl
 800936a:	4659      	mov	r1, fp
 800936c:	f7f7 fd1e 	bl	8000dac <__aeabi_uldivmod>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <UART_SetConfig+0x38c>)
 8009376:	fba3 1302 	umull	r1, r3, r3, r2
 800937a:	095b      	lsrs	r3, r3, #5
 800937c:	2164      	movs	r1, #100	; 0x64
 800937e:	fb01 f303 	mul.w	r3, r1, r3
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	011b      	lsls	r3, r3, #4
 8009386:	3332      	adds	r3, #50	; 0x32
 8009388:	4a09      	ldr	r2, [pc, #36]	; (80093b0 <UART_SetConfig+0x38c>)
 800938a:	fba2 2303 	umull	r2, r3, r2, r3
 800938e:	095b      	lsrs	r3, r3, #5
 8009390:	f003 020f 	and.w	r2, r3, #15
 8009394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4432      	add	r2, r6
 800939a:	609a      	str	r2, [r3, #8]
}
 800939c:	bf00      	nop
 800939e:	377c      	adds	r7, #124	; 0x7c
 80093a0:	46bd      	mov	sp, r7
 80093a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a6:	bf00      	nop
 80093a8:	40011000 	.word	0x40011000
 80093ac:	40011400 	.word	0x40011400
 80093b0:	51eb851f 	.word	0x51eb851f

080093b4 <calloc>:
 80093b4:	4b02      	ldr	r3, [pc, #8]	; (80093c0 <calloc+0xc>)
 80093b6:	460a      	mov	r2, r1
 80093b8:	4601      	mov	r1, r0
 80093ba:	6818      	ldr	r0, [r3, #0]
 80093bc:	f000 b842 	b.w	8009444 <_calloc_r>
 80093c0:	20000028 	.word	0x20000028

080093c4 <__errno>:
 80093c4:	4b01      	ldr	r3, [pc, #4]	; (80093cc <__errno+0x8>)
 80093c6:	6818      	ldr	r0, [r3, #0]
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	20000028 	.word	0x20000028

080093d0 <__libc_init_array>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	4d0d      	ldr	r5, [pc, #52]	; (8009408 <__libc_init_array+0x38>)
 80093d4:	4c0d      	ldr	r4, [pc, #52]	; (800940c <__libc_init_array+0x3c>)
 80093d6:	1b64      	subs	r4, r4, r5
 80093d8:	10a4      	asrs	r4, r4, #2
 80093da:	2600      	movs	r6, #0
 80093dc:	42a6      	cmp	r6, r4
 80093de:	d109      	bne.n	80093f4 <__libc_init_array+0x24>
 80093e0:	4d0b      	ldr	r5, [pc, #44]	; (8009410 <__libc_init_array+0x40>)
 80093e2:	4c0c      	ldr	r4, [pc, #48]	; (8009414 <__libc_init_array+0x44>)
 80093e4:	f000 f99e 	bl	8009724 <_init>
 80093e8:	1b64      	subs	r4, r4, r5
 80093ea:	10a4      	asrs	r4, r4, #2
 80093ec:	2600      	movs	r6, #0
 80093ee:	42a6      	cmp	r6, r4
 80093f0:	d105      	bne.n	80093fe <__libc_init_array+0x2e>
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
 80093f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f8:	4798      	blx	r3
 80093fa:	3601      	adds	r6, #1
 80093fc:	e7ee      	b.n	80093dc <__libc_init_array+0xc>
 80093fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009402:	4798      	blx	r3
 8009404:	3601      	adds	r6, #1
 8009406:	e7f2      	b.n	80093ee <__libc_init_array+0x1e>
 8009408:	0800977c 	.word	0x0800977c
 800940c:	0800977c 	.word	0x0800977c
 8009410:	0800977c 	.word	0x0800977c
 8009414:	08009780 	.word	0x08009780

08009418 <memcpy>:
 8009418:	440a      	add	r2, r1
 800941a:	4291      	cmp	r1, r2
 800941c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009420:	d100      	bne.n	8009424 <memcpy+0xc>
 8009422:	4770      	bx	lr
 8009424:	b510      	push	{r4, lr}
 8009426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800942a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800942e:	4291      	cmp	r1, r2
 8009430:	d1f9      	bne.n	8009426 <memcpy+0xe>
 8009432:	bd10      	pop	{r4, pc}

08009434 <memset>:
 8009434:	4402      	add	r2, r0
 8009436:	4603      	mov	r3, r0
 8009438:	4293      	cmp	r3, r2
 800943a:	d100      	bne.n	800943e <memset+0xa>
 800943c:	4770      	bx	lr
 800943e:	f803 1b01 	strb.w	r1, [r3], #1
 8009442:	e7f9      	b.n	8009438 <memset+0x4>

08009444 <_calloc_r>:
 8009444:	b513      	push	{r0, r1, r4, lr}
 8009446:	434a      	muls	r2, r1
 8009448:	4611      	mov	r1, r2
 800944a:	9201      	str	r2, [sp, #4]
 800944c:	f000 f80a 	bl	8009464 <_malloc_r>
 8009450:	4604      	mov	r4, r0
 8009452:	b118      	cbz	r0, 800945c <_calloc_r+0x18>
 8009454:	9a01      	ldr	r2, [sp, #4]
 8009456:	2100      	movs	r1, #0
 8009458:	f7ff ffec 	bl	8009434 <memset>
 800945c:	4620      	mov	r0, r4
 800945e:	b002      	add	sp, #8
 8009460:	bd10      	pop	{r4, pc}
	...

08009464 <_malloc_r>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	1ccd      	adds	r5, r1, #3
 8009468:	f025 0503 	bic.w	r5, r5, #3
 800946c:	3508      	adds	r5, #8
 800946e:	2d0c      	cmp	r5, #12
 8009470:	bf38      	it	cc
 8009472:	250c      	movcc	r5, #12
 8009474:	2d00      	cmp	r5, #0
 8009476:	4606      	mov	r6, r0
 8009478:	db01      	blt.n	800947e <_malloc_r+0x1a>
 800947a:	42a9      	cmp	r1, r5
 800947c:	d903      	bls.n	8009486 <_malloc_r+0x22>
 800947e:	230c      	movs	r3, #12
 8009480:	6033      	str	r3, [r6, #0]
 8009482:	2000      	movs	r0, #0
 8009484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009486:	f000 f857 	bl	8009538 <__malloc_lock>
 800948a:	4921      	ldr	r1, [pc, #132]	; (8009510 <_malloc_r+0xac>)
 800948c:	680a      	ldr	r2, [r1, #0]
 800948e:	4614      	mov	r4, r2
 8009490:	b99c      	cbnz	r4, 80094ba <_malloc_r+0x56>
 8009492:	4f20      	ldr	r7, [pc, #128]	; (8009514 <_malloc_r+0xb0>)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	b923      	cbnz	r3, 80094a2 <_malloc_r+0x3e>
 8009498:	4621      	mov	r1, r4
 800949a:	4630      	mov	r0, r6
 800949c:	f000 f83c 	bl	8009518 <_sbrk_r>
 80094a0:	6038      	str	r0, [r7, #0]
 80094a2:	4629      	mov	r1, r5
 80094a4:	4630      	mov	r0, r6
 80094a6:	f000 f837 	bl	8009518 <_sbrk_r>
 80094aa:	1c43      	adds	r3, r0, #1
 80094ac:	d123      	bne.n	80094f6 <_malloc_r+0x92>
 80094ae:	230c      	movs	r3, #12
 80094b0:	6033      	str	r3, [r6, #0]
 80094b2:	4630      	mov	r0, r6
 80094b4:	f000 f846 	bl	8009544 <__malloc_unlock>
 80094b8:	e7e3      	b.n	8009482 <_malloc_r+0x1e>
 80094ba:	6823      	ldr	r3, [r4, #0]
 80094bc:	1b5b      	subs	r3, r3, r5
 80094be:	d417      	bmi.n	80094f0 <_malloc_r+0x8c>
 80094c0:	2b0b      	cmp	r3, #11
 80094c2:	d903      	bls.n	80094cc <_malloc_r+0x68>
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	441c      	add	r4, r3
 80094c8:	6025      	str	r5, [r4, #0]
 80094ca:	e004      	b.n	80094d6 <_malloc_r+0x72>
 80094cc:	6863      	ldr	r3, [r4, #4]
 80094ce:	42a2      	cmp	r2, r4
 80094d0:	bf0c      	ite	eq
 80094d2:	600b      	streq	r3, [r1, #0]
 80094d4:	6053      	strne	r3, [r2, #4]
 80094d6:	4630      	mov	r0, r6
 80094d8:	f000 f834 	bl	8009544 <__malloc_unlock>
 80094dc:	f104 000b 	add.w	r0, r4, #11
 80094e0:	1d23      	adds	r3, r4, #4
 80094e2:	f020 0007 	bic.w	r0, r0, #7
 80094e6:	1ac2      	subs	r2, r0, r3
 80094e8:	d0cc      	beq.n	8009484 <_malloc_r+0x20>
 80094ea:	1a1b      	subs	r3, r3, r0
 80094ec:	50a3      	str	r3, [r4, r2]
 80094ee:	e7c9      	b.n	8009484 <_malloc_r+0x20>
 80094f0:	4622      	mov	r2, r4
 80094f2:	6864      	ldr	r4, [r4, #4]
 80094f4:	e7cc      	b.n	8009490 <_malloc_r+0x2c>
 80094f6:	1cc4      	adds	r4, r0, #3
 80094f8:	f024 0403 	bic.w	r4, r4, #3
 80094fc:	42a0      	cmp	r0, r4
 80094fe:	d0e3      	beq.n	80094c8 <_malloc_r+0x64>
 8009500:	1a21      	subs	r1, r4, r0
 8009502:	4630      	mov	r0, r6
 8009504:	f000 f808 	bl	8009518 <_sbrk_r>
 8009508:	3001      	adds	r0, #1
 800950a:	d1dd      	bne.n	80094c8 <_malloc_r+0x64>
 800950c:	e7cf      	b.n	80094ae <_malloc_r+0x4a>
 800950e:	bf00      	nop
 8009510:	20000310 	.word	0x20000310
 8009514:	20000314 	.word	0x20000314

08009518 <_sbrk_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4d06      	ldr	r5, [pc, #24]	; (8009534 <_sbrk_r+0x1c>)
 800951c:	2300      	movs	r3, #0
 800951e:	4604      	mov	r4, r0
 8009520:	4608      	mov	r0, r1
 8009522:	602b      	str	r3, [r5, #0]
 8009524:	f7fa fbd2 	bl	8003ccc <_sbrk>
 8009528:	1c43      	adds	r3, r0, #1
 800952a:	d102      	bne.n	8009532 <_sbrk_r+0x1a>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	b103      	cbz	r3, 8009532 <_sbrk_r+0x1a>
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	bd38      	pop	{r3, r4, r5, pc}
 8009534:	2000054c 	.word	0x2000054c

08009538 <__malloc_lock>:
 8009538:	4801      	ldr	r0, [pc, #4]	; (8009540 <__malloc_lock+0x8>)
 800953a:	f000 b809 	b.w	8009550 <__retarget_lock_acquire_recursive>
 800953e:	bf00      	nop
 8009540:	20000554 	.word	0x20000554

08009544 <__malloc_unlock>:
 8009544:	4801      	ldr	r0, [pc, #4]	; (800954c <__malloc_unlock+0x8>)
 8009546:	f000 b804 	b.w	8009552 <__retarget_lock_release_recursive>
 800954a:	bf00      	nop
 800954c:	20000554 	.word	0x20000554

08009550 <__retarget_lock_acquire_recursive>:
 8009550:	4770      	bx	lr

08009552 <__retarget_lock_release_recursive>:
 8009552:	4770      	bx	lr

08009554 <sqrt>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	ed2d 8b02 	vpush	{d8}
 800955a:	ec55 4b10 	vmov	r4, r5, d0
 800955e:	f000 f82d 	bl	80095bc <__ieee754_sqrt>
 8009562:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <sqrt+0x64>)
 8009564:	eeb0 8a40 	vmov.f32	s16, s0
 8009568:	eef0 8a60 	vmov.f32	s17, s1
 800956c:	f993 3000 	ldrsb.w	r3, [r3]
 8009570:	3301      	adds	r3, #1
 8009572:	d019      	beq.n	80095a8 <sqrt+0x54>
 8009574:	4622      	mov	r2, r4
 8009576:	462b      	mov	r3, r5
 8009578:	4620      	mov	r0, r4
 800957a:	4629      	mov	r1, r5
 800957c:	f7f7 fa82 	bl	8000a84 <__aeabi_dcmpun>
 8009580:	b990      	cbnz	r0, 80095a8 <sqrt+0x54>
 8009582:	2200      	movs	r2, #0
 8009584:	2300      	movs	r3, #0
 8009586:	4620      	mov	r0, r4
 8009588:	4629      	mov	r1, r5
 800958a:	f7f7 fa53 	bl	8000a34 <__aeabi_dcmplt>
 800958e:	b158      	cbz	r0, 80095a8 <sqrt+0x54>
 8009590:	f7ff ff18 	bl	80093c4 <__errno>
 8009594:	2321      	movs	r3, #33	; 0x21
 8009596:	6003      	str	r3, [r0, #0]
 8009598:	2200      	movs	r2, #0
 800959a:	2300      	movs	r3, #0
 800959c:	4610      	mov	r0, r2
 800959e:	4619      	mov	r1, r3
 80095a0:	f7f7 f900 	bl	80007a4 <__aeabi_ddiv>
 80095a4:	ec41 0b18 	vmov	d8, r0, r1
 80095a8:	eeb0 0a48 	vmov.f32	s0, s16
 80095ac:	eef0 0a68 	vmov.f32	s1, s17
 80095b0:	ecbd 8b02 	vpop	{d8}
 80095b4:	bd38      	pop	{r3, r4, r5, pc}
 80095b6:	bf00      	nop
 80095b8:	2000008c 	.word	0x2000008c

080095bc <__ieee754_sqrt>:
 80095bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c0:	ec55 4b10 	vmov	r4, r5, d0
 80095c4:	4e56      	ldr	r6, [pc, #344]	; (8009720 <__ieee754_sqrt+0x164>)
 80095c6:	43ae      	bics	r6, r5
 80095c8:	ee10 0a10 	vmov	r0, s0
 80095cc:	ee10 3a10 	vmov	r3, s0
 80095d0:	4629      	mov	r1, r5
 80095d2:	462a      	mov	r2, r5
 80095d4:	d110      	bne.n	80095f8 <__ieee754_sqrt+0x3c>
 80095d6:	ee10 2a10 	vmov	r2, s0
 80095da:	462b      	mov	r3, r5
 80095dc:	f7f6 ffb8 	bl	8000550 <__aeabi_dmul>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4620      	mov	r0, r4
 80095e6:	4629      	mov	r1, r5
 80095e8:	f7f6 fdfc 	bl	80001e4 <__adddf3>
 80095ec:	4604      	mov	r4, r0
 80095ee:	460d      	mov	r5, r1
 80095f0:	ec45 4b10 	vmov	d0, r4, r5
 80095f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f8:	2d00      	cmp	r5, #0
 80095fa:	dc10      	bgt.n	800961e <__ieee754_sqrt+0x62>
 80095fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009600:	4330      	orrs	r0, r6
 8009602:	d0f5      	beq.n	80095f0 <__ieee754_sqrt+0x34>
 8009604:	b15d      	cbz	r5, 800961e <__ieee754_sqrt+0x62>
 8009606:	ee10 2a10 	vmov	r2, s0
 800960a:	462b      	mov	r3, r5
 800960c:	ee10 0a10 	vmov	r0, s0
 8009610:	f7f6 fde6 	bl	80001e0 <__aeabi_dsub>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	f7f7 f8c4 	bl	80007a4 <__aeabi_ddiv>
 800961c:	e7e6      	b.n	80095ec <__ieee754_sqrt+0x30>
 800961e:	1509      	asrs	r1, r1, #20
 8009620:	d076      	beq.n	8009710 <__ieee754_sqrt+0x154>
 8009622:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009626:	07ce      	lsls	r6, r1, #31
 8009628:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800962c:	bf5e      	ittt	pl
 800962e:	0fda      	lsrpl	r2, r3, #31
 8009630:	005b      	lslpl	r3, r3, #1
 8009632:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009636:	0fda      	lsrs	r2, r3, #31
 8009638:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800963c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009640:	2000      	movs	r0, #0
 8009642:	106d      	asrs	r5, r5, #1
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	f04f 0e16 	mov.w	lr, #22
 800964a:	4684      	mov	ip, r0
 800964c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009650:	eb0c 0401 	add.w	r4, ip, r1
 8009654:	4294      	cmp	r4, r2
 8009656:	bfde      	ittt	le
 8009658:	1b12      	suble	r2, r2, r4
 800965a:	eb04 0c01 	addle.w	ip, r4, r1
 800965e:	1840      	addle	r0, r0, r1
 8009660:	0052      	lsls	r2, r2, #1
 8009662:	f1be 0e01 	subs.w	lr, lr, #1
 8009666:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800966a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800966e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009672:	d1ed      	bne.n	8009650 <__ieee754_sqrt+0x94>
 8009674:	4671      	mov	r1, lr
 8009676:	2720      	movs	r7, #32
 8009678:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800967c:	4562      	cmp	r2, ip
 800967e:	eb04 060e 	add.w	r6, r4, lr
 8009682:	dc02      	bgt.n	800968a <__ieee754_sqrt+0xce>
 8009684:	d113      	bne.n	80096ae <__ieee754_sqrt+0xf2>
 8009686:	429e      	cmp	r6, r3
 8009688:	d811      	bhi.n	80096ae <__ieee754_sqrt+0xf2>
 800968a:	2e00      	cmp	r6, #0
 800968c:	eb06 0e04 	add.w	lr, r6, r4
 8009690:	da43      	bge.n	800971a <__ieee754_sqrt+0x15e>
 8009692:	f1be 0f00 	cmp.w	lr, #0
 8009696:	db40      	blt.n	800971a <__ieee754_sqrt+0x15e>
 8009698:	f10c 0801 	add.w	r8, ip, #1
 800969c:	eba2 020c 	sub.w	r2, r2, ip
 80096a0:	429e      	cmp	r6, r3
 80096a2:	bf88      	it	hi
 80096a4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80096a8:	1b9b      	subs	r3, r3, r6
 80096aa:	4421      	add	r1, r4
 80096ac:	46c4      	mov	ip, r8
 80096ae:	0052      	lsls	r2, r2, #1
 80096b0:	3f01      	subs	r7, #1
 80096b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80096b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80096ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096be:	d1dd      	bne.n	800967c <__ieee754_sqrt+0xc0>
 80096c0:	4313      	orrs	r3, r2
 80096c2:	d006      	beq.n	80096d2 <__ieee754_sqrt+0x116>
 80096c4:	1c4c      	adds	r4, r1, #1
 80096c6:	bf13      	iteet	ne
 80096c8:	3101      	addne	r1, #1
 80096ca:	3001      	addeq	r0, #1
 80096cc:	4639      	moveq	r1, r7
 80096ce:	f021 0101 	bicne.w	r1, r1, #1
 80096d2:	1043      	asrs	r3, r0, #1
 80096d4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80096d8:	0849      	lsrs	r1, r1, #1
 80096da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80096de:	07c2      	lsls	r2, r0, #31
 80096e0:	bf48      	it	mi
 80096e2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80096e6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80096ea:	460c      	mov	r4, r1
 80096ec:	463d      	mov	r5, r7
 80096ee:	e77f      	b.n	80095f0 <__ieee754_sqrt+0x34>
 80096f0:	0ada      	lsrs	r2, r3, #11
 80096f2:	3815      	subs	r0, #21
 80096f4:	055b      	lsls	r3, r3, #21
 80096f6:	2a00      	cmp	r2, #0
 80096f8:	d0fa      	beq.n	80096f0 <__ieee754_sqrt+0x134>
 80096fa:	02d7      	lsls	r7, r2, #11
 80096fc:	d50a      	bpl.n	8009714 <__ieee754_sqrt+0x158>
 80096fe:	f1c1 0420 	rsb	r4, r1, #32
 8009702:	fa23 f404 	lsr.w	r4, r3, r4
 8009706:	1e4d      	subs	r5, r1, #1
 8009708:	408b      	lsls	r3, r1
 800970a:	4322      	orrs	r2, r4
 800970c:	1b41      	subs	r1, r0, r5
 800970e:	e788      	b.n	8009622 <__ieee754_sqrt+0x66>
 8009710:	4608      	mov	r0, r1
 8009712:	e7f0      	b.n	80096f6 <__ieee754_sqrt+0x13a>
 8009714:	0052      	lsls	r2, r2, #1
 8009716:	3101      	adds	r1, #1
 8009718:	e7ef      	b.n	80096fa <__ieee754_sqrt+0x13e>
 800971a:	46e0      	mov	r8, ip
 800971c:	e7be      	b.n	800969c <__ieee754_sqrt+0xe0>
 800971e:	bf00      	nop
 8009720:	7ff00000 	.word	0x7ff00000

08009724 <_init>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	bf00      	nop
 8009728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972a:	bc08      	pop	{r3}
 800972c:	469e      	mov	lr, r3
 800972e:	4770      	bx	lr

08009730 <_fini>:
 8009730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009732:	bf00      	nop
 8009734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009736:	bc08      	pop	{r3}
 8009738:	469e      	mov	lr, r3
 800973a:	4770      	bx	lr
